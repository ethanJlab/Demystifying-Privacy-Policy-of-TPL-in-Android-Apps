CLINIT edge: $r7 = <io.vertx.core.Starter: java.lang.String PATH_SEP> in <io.vertx.core.Starter: void main(java.lang.String[])> ==> <io.vertx.core.Starter: void <clinit>()>
STATIC edge: $r26 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() in <io.vertx.core.Starter: void main(java.lang.String[])> ==> <java.lang.Thread: java.lang.Thread currentThread()>
STATIC edge: $r21 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() in <io.vertx.core.Starter: void main(java.lang.String[])> ==> <java.lang.Thread: java.lang.Thread currentThread()>
STATIC edge: $r14 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() in <io.vertx.core.Starter: void main(java.lang.String[])> ==> <java.lang.Thread: java.lang.Thread currentThread()>
STATIC edge: $r13 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() in <io.vertx.core.Starter: void main(java.lang.String[])> ==> <java.lang.Thread: java.lang.Thread currentThread()>
CLINIT edge: $r6 = new io.vertx.core.Starter in <io.vertx.core.Starter: void main(java.lang.String[])> ==> <io.vertx.core.Starter: void <clinit>()>
CLINIT edge: $r22 = new java.io.File in <io.vertx.core.Starter: void main(java.lang.String[])> ==> <java.io.File: void <clinit>()>
CLINIT edge: $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("path.separator") in <io.vertx.core.Starter: void <clinit>()> ==> <java.lang.System: void <clinit>()>
STATIC edge: $r1 = staticinvoke <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/Starter;") in <io.vertx.core.Starter: void <clinit>()> ==> <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>
STATIC edge: $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("path.separator") in <io.vertx.core.Starter: void <clinit>()> ==> <java.lang.System: java.lang.String getProperty(java.lang.String)>
CLINIT edge: $r1 = staticinvoke <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/Starter;") in <io.vertx.core.Starter: void <clinit>()> ==> <io.vertx.core.logging.LoggerFactory: void <clinit>()>
CLINIT edge: <io.vertx.core.Starter: java.lang.String PATH_SEP> = $r0 in <io.vertx.core.Starter: void <clinit>()> ==> <io.vertx.core.Starter: void <clinit>()>
CLINIT edge: $r2 = staticinvoke <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.String)>($r4) in <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)> ==> <io.vertx.core.logging.LoggerFactory: void <clinit>()>
STATIC edge: $r2 = staticinvoke <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.String)>($r4) in <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)> ==> <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.String)>
CLINIT edge: <io.vertx.core.logging.LoggerFactory: java.util.concurrent.ConcurrentMap loggers> = $r0 in <io.vertx.core.logging.LoggerFactory: void <clinit>()> ==> <io.vertx.core.logging.LoggerFactory: void <clinit>()>
STATIC edge: staticinvoke <io.vertx.core.logging.LoggerFactory: void initialise()>() in <io.vertx.core.logging.LoggerFactory: void <clinit>()> ==> <io.vertx.core.logging.LoggerFactory: void initialise()>
CLINIT edge: $r1 = <io.vertx.core.logging.LoggerFactory: java.util.concurrent.ConcurrentMap loggers> in <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.String)> ==> <io.vertx.core.logging.LoggerFactory: void <clinit>()>
CLINIT edge: r12 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("vertx.logger-delegate-factory-class-name") in <io.vertx.core.logging.LoggerFactory: void initialise()> ==> <java.lang.System: void <clinit>()>
STATIC edge: $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() in <io.vertx.core.logging.LoggerFactory: void initialise()> ==> <java.lang.Thread: java.lang.Thread currentThread()>
STATIC edge: r12 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("vertx.logger-delegate-factory-class-name") in <io.vertx.core.logging.LoggerFactory: void initialise()> ==> <java.lang.System: java.lang.String getProperty(java.lang.String)>
CLINIT edge: <io.vertx.core.logging.LoggerFactory: io.vertx.core.spi.logging.LogDelegateFactory delegateFactory> = r16 in <io.vertx.core.logging.LoggerFactory: void initialise()> ==> <io.vertx.core.logging.LoggerFactory: void <clinit>()>
CLINIT edge: $r1 = new io.vertx.core.logging.JULLogDelegateFactory in <io.vertx.core.logging.LoggerFactory: void initialise()> ==> <io.vertx.core.logging.JULLogDelegateFactory: void <clinit>()>
CLINIT edge: $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.util.logging.config.file") in <io.vertx.core.logging.JULLogDelegateFactory: void <clinit>()> ==> <java.lang.System: void <clinit>()>
STATIC edge: staticinvoke <io.vertx.core.logging.JULLogDelegateFactory: void loadConfig()>() in <io.vertx.core.logging.JULLogDelegateFactory: void <clinit>()> ==> <io.vertx.core.logging.JULLogDelegateFactory: void loadConfig()>
STATIC edge: $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.util.logging.config.file") in <io.vertx.core.logging.JULLogDelegateFactory: void <clinit>()> ==> <java.lang.System: java.lang.String getProperty(java.lang.String)>
CLINIT edge: staticinvoke <io.vertx.core.logging.JULLogDelegateFactory: void loadConfig()>() in <io.vertx.core.logging.JULLogDelegateFactory: void <clinit>()> ==> <io.vertx.core.logging.JULLogDelegateFactory: void <clinit>()>
STATIC edge: $r2 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>() in <io.vertx.core.logging.JULLogDelegateFactory: void loadConfig()> ==> <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.impl.Args: void <init>(java.lang.String[])>(r1) in <io.vertx.core.Starter: void main(java.lang.String[])> ==> <io.vertx.core.impl.Args: void <init>(java.lang.String[])>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>("-cp") in <io.vertx.core.Starter: void main(java.lang.String[])> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>("-cp") in <io.vertx.core.Starter: void main(java.lang.String[])> ==> <java.util.IdentityHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>("-cp") in <io.vertx.core.Starter: void main(java.lang.String[])> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>("-cp") in <io.vertx.core.Starter: void main(java.lang.String[])> ==> <java.util.EnumMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>("-cp") in <io.vertx.core.Starter: void main(java.lang.String[])> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>("-cp") in <io.vertx.core.Starter: void main(java.lang.String[])> ==> <java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>("-cp") in <io.vertx.core.Starter: void main(java.lang.String[])> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>("-cp") in <io.vertx.core.Starter: void main(java.lang.String[])> ==> <java.util.TreeMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>("-cp") in <io.vertx.core.Starter: void main(java.lang.String[])> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>("-cp") in <io.vertx.core.Starter: void main(java.lang.String[])> ==> <java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: r8 = virtualinvoke r5.<java.lang.String: java.lang.String[] split(java.lang.String)>($r7) in <io.vertx.core.Starter: void main(java.lang.String[])> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
SPECIAL edge: specialinvoke $r22.<java.io.File: void <init>(java.lang.String)>(r31) in <io.vertx.core.Starter: void main(java.lang.String[])> ==> <java.io.File: void <init>(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r22.<java.io.File: java.net.URI toURI()>() in <io.vertx.core.Starter: void main(java.lang.String[])> ==> <java.io.File: java.net.URI toURI()>
VIRTUAL edge: r33 = virtualinvoke $r23.<java.net.URI: java.net.URL toURL()>() in <io.vertx.core.Starter: void main(java.lang.String[])> ==> <java.net.URI: java.net.URL toURL()>
SPECIAL edge: specialinvoke $r30.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r29) in <io.vertx.core.Starter: void main(java.lang.String[])> ==> <java.lang.IllegalStateException: void <init>(java.lang.Throwable)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.ClassLoader getClassLoader()>() in <io.vertx.core.Starter: void main(java.lang.String[])> ==> <java.lang.Class: java.lang.ClassLoader getClassLoader()>
SPECIAL edge: specialinvoke $r10.<java.net.URLClassLoader: void <init>(java.net.URL[],java.lang.ClassLoader)>(r9, $r12) in <io.vertx.core.Starter: void main(java.lang.String[])> ==> <java.net.URLClassLoader: void <init>(java.net.URL[],java.lang.ClassLoader)>
VIRTUAL edge: r37 = virtualinvoke $r10.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>($r16) in <io.vertx.core.Starter: void main(java.lang.String[])> ==> <java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>
VIRTUAL edge: r36 = virtualinvoke $r13.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>() in <io.vertx.core.Starter: void main(java.lang.String[])> ==> <java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>
VIRTUAL edge: virtualinvoke $r14.<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>($r10) in <io.vertx.core.Starter: void main(java.lang.String[])> ==> <java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.Class: java.lang.String getName()>() in <io.vertx.core.Starter: void main(java.lang.String[])> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: r38 = virtualinvoke r37.<java.lang.Class: java.lang.Object newInstance()>() in <io.vertx.core.Starter: void main(java.lang.String[])> ==> <java.lang.Class: java.lang.Object newInstance()>
VIRTUAL edge: r18 = virtualinvoke r37.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("run", $r17) in <io.vertx.core.Starter: void main(java.lang.String[])> ==> <java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>
VIRTUAL edge: virtualinvoke r18.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r38, $r19) in <io.vertx.core.Starter: void main(java.lang.String[])> ==> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>
VIRTUAL edge: virtualinvoke $r21.<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>(r36) in <io.vertx.core.Starter: void main(java.lang.String[])> ==> <java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>
SPECIAL edge: specialinvoke $r28.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r27) in <io.vertx.core.Starter: void main(java.lang.String[])> ==> <java.lang.IllegalStateException: void <init>(java.lang.Throwable)>
VIRTUAL edge: virtualinvoke $r26.<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>(r36) in <io.vertx.core.Starter: void main(java.lang.String[])> ==> <java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>
SPECIAL edge: specialinvoke $r6.<io.vertx.core.Starter: void <init>()>() in <io.vertx.core.Starter: void main(java.lang.String[])> ==> <io.vertx.core.Starter: void <init>()>
VIRTUAL edge: virtualinvoke $r6.<io.vertx.core.Starter: void run(io.vertx.core.impl.Args,java.lang.String[])>($r0, r1) in <io.vertx.core.Starter: void main(java.lang.String[])> ==> <io.vertx.core.Starter: void run(io.vertx.core.impl.Args,java.lang.String[])>
STATIC edge: $r4 = staticinvoke <io.vertx.core.shareddata.impl.Checker: java.lang.Object copyIfRequired(java.lang.Object)>($r3) in <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object get(java.lang.Object)> ==> <io.vertx.core.shareddata.impl.Checker: java.lang.Object copyIfRequired(java.lang.Object)>
CLINIT edge: $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1) in <io.vertx.core.Starter: void run(io.vertx.core.impl.Args,java.lang.String[])> ==> <java.util.Collections: void <clinit>()>
STATIC edge: $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1) in <io.vertx.core.Starter: void run(io.vertx.core.impl.Args,java.lang.String[])> ==> <java.util.Collections: java.util.List unmodifiableList(java.util.List)>
STATIC edge: $r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r0) in <io.vertx.core.Starter: void run(io.vertx.core.impl.Args,java.lang.String[])> ==> <java.util.Arrays: java.util.List asList(java.lang.Object[])>
CLINIT edge: <io.vertx.core.Starter: java.util.List PROCESS_ARGS> = $r2 in <io.vertx.core.Starter: void run(io.vertx.core.impl.Args,java.lang.String[])> ==> <io.vertx.core.Starter: void <clinit>()>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, 0, r5, 0, $i1) in <io.vertx.core.shareddata.impl.Checker: java.lang.Object copyIfRequired(java.lang.Object)> ==> <java.lang.System: void <clinit>()>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, 0, r5, 0, $i1) in <io.vertx.core.shareddata.impl.Checker: java.lang.Object copyIfRequired(java.lang.Object)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
FINALIZE edge: null in <java.lang.Object: void <init>()> ==> <java.lang.Object: void finalize()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.Thread currentThread()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Class: boolean isAnonymousClass()>() in <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)> ==> <java.lang.Class: boolean isAnonymousClass()>
VIRTUAL edge: $r3 = virtualinvoke r0.<java.lang.Class: java.lang.Class getEnclosingClass()>() in <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)> ==> <java.lang.Class: java.lang.Class getEnclosingClass()>
VIRTUAL edge: $r4 = virtualinvoke r0.<java.lang.Class: java.lang.String getCanonicalName()>() in <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)> ==> <java.lang.Class: java.lang.String getCanonicalName()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getCanonicalName()>() in <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)> ==> <java.lang.Class: java.lang.String getCanonicalName()>
SPECIAL edge: specialinvoke $r0.<java.util.concurrent.ConcurrentHashMap: void <init>()>() in <io.vertx.core.logging.LoggerFactory: void <clinit>()> ==> <java.util.concurrent.ConcurrentHashMap: void <init>()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r0) in <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.String)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: r4 = interfaceinvoke $r3.<io.vertx.core.spi.logging.LogDelegateFactory: io.vertx.core.spi.logging.LogDelegate createDelegate(java.lang.String)>(r0) in <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.String)> ==> <io.vertx.core.logging.Log4jLogDelegateFactory: io.vertx.core.spi.logging.LogDelegate createDelegate(java.lang.String)>
INTERFACE edge: r4 = interfaceinvoke $r3.<io.vertx.core.spi.logging.LogDelegateFactory: io.vertx.core.spi.logging.LogDelegate createDelegate(java.lang.String)>(r0) in <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.String)> ==> <io.vertx.core.logging.JULLogDelegateFactory: io.vertx.core.spi.logging.LogDelegate createDelegate(java.lang.String)>
INTERFACE edge: r4 = interfaceinvoke $r3.<io.vertx.core.spi.logging.LogDelegateFactory: io.vertx.core.spi.logging.LogDelegate createDelegate(java.lang.String)>(r0) in <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.String)> ==> <io.vertx.core.logging.Log4j2LogDelegateFactory: io.vertx.core.spi.logging.LogDelegate createDelegate(java.lang.String)>
INTERFACE edge: r4 = interfaceinvoke $r3.<io.vertx.core.spi.logging.LogDelegateFactory: io.vertx.core.spi.logging.LogDelegate createDelegate(java.lang.String)>(r0) in <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.String)> ==> <io.vertx.core.logging.SLF4JLogDelegateFactory: io.vertx.core.spi.logging.LogDelegate createDelegate(java.lang.String)>
SPECIAL edge: specialinvoke $r5.<io.vertx.core.logging.Logger: void <init>(io.vertx.core.spi.logging.LogDelegate)>(r4) in <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.String)> ==> <io.vertx.core.logging.Logger: void <init>(io.vertx.core.spi.logging.LogDelegate)>
INTERFACE edge: $r7 = interfaceinvoke $r6.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r0, $r5) in <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.String)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>
CLINIT edge: $r0 = new io.vertx.core.logging.Log4jLogDelegate in <io.vertx.core.logging.Log4jLogDelegateFactory: io.vertx.core.spi.logging.LogDelegate createDelegate(java.lang.String)> ==> <io.vertx.core.logging.Log4jLogDelegate: void <clinit>()>
CLINIT edge: $r0 = new io.vertx.core.logging.Log4j2LogDelegate in <io.vertx.core.logging.Log4j2LogDelegateFactory: io.vertx.core.spi.logging.LogDelegate createDelegate(java.lang.String)> ==> <io.vertx.core.logging.Log4j2LogDelegate: void <clinit>()>
CLINIT edge: $r0 = new io.vertx.core.logging.SLF4JLogDelegate in <io.vertx.core.logging.SLF4JLogDelegateFactory: io.vertx.core.spi.logging.LogDelegate createDelegate(java.lang.String)> ==> <io.vertx.core.logging.SLF4JLogDelegate: void <clinit>()>
CLINIT edge: <io.vertx.core.logging.Log4jLogDelegate: java.lang.String FQCN> = $r1 in <io.vertx.core.logging.Log4jLogDelegate: void <clinit>()> ==> <io.vertx.core.logging.Log4jLogDelegate: void <clinit>()>
CLINIT edge: <io.vertx.core.logging.Log4j2LogDelegate: java.lang.String FQCN> = $r1 in <io.vertx.core.logging.Log4j2LogDelegate: void <clinit>()> ==> <io.vertx.core.logging.Log4j2LogDelegate: void <clinit>()>
CLINIT edge: <io.vertx.core.logging.SLF4JLogDelegate: java.lang.String FQCN> = $r1 in <io.vertx.core.logging.SLF4JLogDelegate: void <clinit>()> ==> <io.vertx.core.logging.SLF4JLogDelegate: void <clinit>()>
VIRTUAL edge: r12 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>() in <io.vertx.core.logging.LoggerFactory: void initialise()> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: r14 = virtualinvoke $r2.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>() in <io.vertx.core.logging.LoggerFactory: void initialise()> ==> <java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>
VIRTUAL edge: r15 = virtualinvoke r14.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r12) in <io.vertx.core.logging.LoggerFactory: void initialise()> ==> <java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r15.<java.lang.Class: java.lang.Object newInstance()>() in <io.vertx.core.logging.LoggerFactory: void initialise()> ==> <java.lang.Class: java.lang.Object newInstance()>
SPECIAL edge: specialinvoke $r6.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.logging.LoggerFactory: void initialise()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error instantiating transformer class \"") in <io.vertx.core.logging.LoggerFactory: void initialise()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12) in <io.vertx.core.logging.LoggerFactory: void initialise()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"") in <io.vertx.core.logging.LoggerFactory: void initialise()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.logging.LoggerFactory: void initialise()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r10, $r4) in <io.vertx.core.logging.LoggerFactory: void initialise()> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.logging.JULLogDelegateFactory: void <init>()>() in <io.vertx.core.logging.LoggerFactory: void initialise()> ==> <io.vertx.core.logging.JULLogDelegateFactory: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>() in <io.vertx.core.logging.JULLogDelegateFactory: void loadConfig()> ==> <java.lang.Class: java.lang.ClassLoader getClassLoader()>
VIRTUAL edge: r10 = virtualinvoke $r1.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>("vertx-default-jul-logging.properties") in <io.vertx.core.logging.JULLogDelegateFactory: void loadConfig()> ==> <java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<java.util.logging.LogManager: void readConfiguration(java.io.InputStream)>(r10) in <io.vertx.core.logging.JULLogDelegateFactory: void loadConfig()> ==> <java.util.logging.LogManager: void readConfiguration(java.io.InputStream)>
VIRTUAL edge: virtualinvoke r10.<java.io.InputStream: void close()>() in <io.vertx.core.logging.JULLogDelegateFactory: void loadConfig()> ==> <java.io.ByteArrayInputStream: void close()>
VIRTUAL edge: virtualinvoke r10.<java.io.InputStream: void close()>() in <io.vertx.core.logging.JULLogDelegateFactory: void loadConfig()> ==> <java.io.FileInputStream: void close()>
VIRTUAL edge: virtualinvoke r10.<java.io.InputStream: void close()>() in <io.vertx.core.logging.JULLogDelegateFactory: void loadConfig()> ==> <java.io.InputStream: void close()>
VIRTUAL edge: virtualinvoke r10.<java.io.InputStream: void close()>() in <io.vertx.core.logging.JULLogDelegateFactory: void loadConfig()> ==> <java.io.ByteArrayInputStream: void close()>
VIRTUAL edge: virtualinvoke r10.<java.io.InputStream: void close()>() in <io.vertx.core.logging.JULLogDelegateFactory: void loadConfig()> ==> <java.io.FileInputStream: void close()>
VIRTUAL edge: virtualinvoke r10.<java.io.InputStream: void close()>() in <io.vertx.core.logging.JULLogDelegateFactory: void loadConfig()> ==> <java.io.InputStream: void close()>
VIRTUAL edge: virtualinvoke r10.<java.io.InputStream: void close()>() in <io.vertx.core.logging.JULLogDelegateFactory: void loadConfig()> ==> <java.io.ByteArrayInputStream: void close()>
VIRTUAL edge: virtualinvoke r10.<java.io.InputStream: void close()>() in <io.vertx.core.logging.JULLogDelegateFactory: void loadConfig()> ==> <java.io.FileInputStream: void close()>
VIRTUAL edge: virtualinvoke r10.<java.io.InputStream: void close()>() in <io.vertx.core.logging.JULLogDelegateFactory: void loadConfig()> ==> <java.io.InputStream: void close()>
VIRTUAL edge: virtualinvoke $r8.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r4) in <io.vertx.core.logging.JULLogDelegateFactory: void loadConfig()> ==> <java.lang.Throwable: void addSuppressed(java.lang.Throwable)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.impl.Args: void <init>(java.lang.String[])> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.HashMap: void <init>()>() in <io.vertx.core.impl.Args: void <init>(java.lang.String[])> ==> <java.util.HashMap: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke r6.<java.lang.String: boolean startsWith(java.lang.String)>("-") in <io.vertx.core.impl.Args: void <init>(java.lang.String[])> ==> <java.lang.String: boolean startsWith(java.lang.String)>
INTERFACE edge: interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r11, "") in <io.vertx.core.impl.Args: void <init>(java.lang.String[])> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r11, "") in <io.vertx.core.impl.Args: void <init>(java.lang.String[])> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r11, "") in <io.vertx.core.impl.Args: void <init>(java.lang.String[])> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r11, "") in <io.vertx.core.impl.Args: void <init>(java.lang.String[])> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r11, "") in <io.vertx.core.impl.Args: void <init>(java.lang.String[])> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r11, "") in <io.vertx.core.impl.Args: void <init>(java.lang.String[])> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r11, "") in <io.vertx.core.impl.Args: void <init>(java.lang.String[])> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r11, "") in <io.vertx.core.impl.Args: void <init>(java.lang.String[])> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r11, "") in <io.vertx.core.impl.Args: void <init>(java.lang.String[])> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r11, "") in <io.vertx.core.impl.Args: void <init>(java.lang.String[])> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r11, r6) in <io.vertx.core.impl.Args: void <init>(java.lang.String[])> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r11, r6) in <io.vertx.core.impl.Args: void <init>(java.lang.String[])> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r11, r6) in <io.vertx.core.impl.Args: void <init>(java.lang.String[])> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r11, r6) in <io.vertx.core.impl.Args: void <init>(java.lang.String[])> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r11, r6) in <io.vertx.core.impl.Args: void <init>(java.lang.String[])> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r11, r6) in <io.vertx.core.impl.Args: void <init>(java.lang.String[])> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r11, r6) in <io.vertx.core.impl.Args: void <init>(java.lang.String[])> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r11, r6) in <io.vertx.core.impl.Args: void <init>(java.lang.String[])> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r11, r6) in <io.vertx.core.impl.Args: void <init>(java.lang.String[])> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r11, r6) in <io.vertx.core.impl.Args: void <init>(java.lang.String[])> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r11, "") in <io.vertx.core.impl.Args: void <init>(java.lang.String[])> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r11, "") in <io.vertx.core.impl.Args: void <init>(java.lang.String[])> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r11, "") in <io.vertx.core.impl.Args: void <init>(java.lang.String[])> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r11, "") in <io.vertx.core.impl.Args: void <init>(java.lang.String[])> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r11, "") in <io.vertx.core.impl.Args: void <init>(java.lang.String[])> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r11, "") in <io.vertx.core.impl.Args: void <init>(java.lang.String[])> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r11, "") in <io.vertx.core.impl.Args: void <init>(java.lang.String[])> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r11, "") in <io.vertx.core.impl.Args: void <init>(java.lang.String[])> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r11, "") in <io.vertx.core.impl.Args: void <init>(java.lang.String[])> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r11, "") in <io.vertx.core.impl.Args: void <init>(java.lang.String[])> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
STATIC edge: staticinvoke <io.vertx.core.shareddata.impl.Checker: void checkType(java.lang.Object)>(r0) in <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <io.vertx.core.shareddata.impl.Checker: void checkType(java.lang.Object)>
STATIC edge: staticinvoke <io.vertx.core.shareddata.impl.Checker: void checkType(java.lang.Object)>(r1) in <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <io.vertx.core.shareddata.impl.Checker: void checkType(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r1) in <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object get(java.lang.Object)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String[] split(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.ClassLoader getClassLoader()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.ClassLoader getContextClassLoader()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.String getName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Object newInstance()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.Starter: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: r8 = specialinvoke r3.<io.vertx.core.Starter: java.lang.String readMainVerticleFromManifest()>() in <io.vertx.core.Starter: void run(io.vertx.core.impl.Args,java.lang.String[])> ==> <io.vertx.core.Starter: java.lang.String readMainVerticleFromManifest()>
SPECIAL edge: specialinvoke r3.<io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)>(r8, r5) in <io.vertx.core.Starter: void run(io.vertx.core.impl.Args,java.lang.String[])> ==> <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)>
VIRTUAL edge: $r7 = virtualinvoke r3.<io.vertx.core.Starter: java.lang.String getVersion()>() in <io.vertx.core.Starter: void run(io.vertx.core.impl.Args,java.lang.String[])> ==> <io.vertx.core.Starter: java.lang.String getVersion()>
SPECIAL edge: specialinvoke r3.<io.vertx.core.Starter: void displaySyntax()>() in <io.vertx.core.Starter: void run(io.vertx.core.impl.Args,java.lang.String[])> ==> <io.vertx.core.Starter: void displaySyntax()>
SPECIAL edge: specialinvoke r3.<io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)>(r9, r5) in <io.vertx.core.Starter: void run(io.vertx.core.impl.Args,java.lang.String[])> ==> <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)>
SPECIAL edge: specialinvoke r3.<io.vertx.core.Starter: void runBare(io.vertx.core.impl.Args)>(r5) in <io.vertx.core.Starter: void run(io.vertx.core.impl.Args,java.lang.String[])> ==> <io.vertx.core.Starter: void runBare(io.vertx.core.impl.Args)>
SPECIAL edge: specialinvoke r3.<io.vertx.core.Starter: void displaySyntax()>() in <io.vertx.core.Starter: void run(io.vertx.core.impl.Args,java.lang.String[])> ==> <io.vertx.core.Starter: void displaySyntax()>
VIRTUAL edge: $z0 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("-version") in <io.vertx.core.Starter: void run(io.vertx.core.impl.Args,java.lang.String[])> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("run") in <io.vertx.core.Starter: void run(io.vertx.core.impl.Args,java.lang.String[])> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("-ha") in <io.vertx.core.Starter: void run(io.vertx.core.impl.Args,java.lang.String[])> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r6.<io.vertx.core.logging.Logger: void info(java.lang.Object)>($r7) in <io.vertx.core.Starter: void run(io.vertx.core.impl.Args,java.lang.String[])> ==> <io.vertx.core.logging.Logger: void info(java.lang.Object)>
CLINIT edge: i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r9) in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $r21 = staticinvoke <io.vertx.core.Starter$lambda_runVerticle_1__1: io.vertx.core.Handler bootstrap$(io.vertx.core.Starter)>(r5) in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <io.vertx.core.Starter$lambda_runVerticle_1__1: io.vertx.core.Handler bootstrap$(io.vertx.core.Starter)>
STATIC edge: i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r9) in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <java.lang.Integer: int parseInt(java.lang.String)>
CLINIT edge: $r12 = new io.vertx.core.DeploymentOptions in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <io.vertx.core.DeploymentOptions: void <clinit>()>
CLINIT edge: $r29 = <io.vertx.core.Starter: io.vertx.core.logging.Logger log> in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <io.vertx.core.Starter: void <clinit>()>
CLINIT edge: $r44 = <io.vertx.core.Starter: io.vertx.core.logging.Logger log> in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <io.vertx.core.Starter: void <clinit>()>
CLINIT edge: $r24 = new java.io.File in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <java.io.File: void <clinit>()>
CLINIT edge: $r26 = <io.vertx.core.Starter: io.vertx.core.logging.Logger log> in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <io.vertx.core.Starter: void <clinit>()>
CLINIT edge: $r1 = <io.vertx.core.Starter: io.vertx.core.logging.Logger log> in <io.vertx.core.Starter: void displaySyntax()> ==> <io.vertx.core.Starter: void <clinit>()>
CLINIT edge: <java.lang.Integer: java.lang.Class TYPE> = null in <java.lang.Integer: void <clinit>()> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: <io.vertx.core.DeploymentOptions: java.lang.String DEFAULT_ISOLATION_GROUP> = null in <io.vertx.core.DeploymentOptions: void <clinit>()> ==> <io.vertx.core.DeploymentOptions: void <clinit>()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<io.vertx.core.shareddata.Shareable: io.vertx.core.shareddata.Shareable copy()>() in <io.vertx.core.shareddata.impl.Checker: java.lang.Object copyIfRequired(java.lang.Object)> ==> <io.vertx.core.json.JsonArray: io.vertx.core.shareddata.Shareable copy()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<io.vertx.core.shareddata.Shareable: io.vertx.core.shareddata.Shareable copy()>() in <io.vertx.core.shareddata.impl.Checker: java.lang.Object copyIfRequired(java.lang.Object)> ==> <io.vertx.core.json.JsonObject: io.vertx.core.shareddata.Shareable copy()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<io.vertx.core.shareddata.Shareable: io.vertx.core.shareddata.Shareable copy()>() in <io.vertx.core.shareddata.impl.Checker: java.lang.Object copyIfRequired(java.lang.Object)> ==> <io.vertx.core.shareddata.Shareable: io.vertx.core.shareddata.Shareable copy()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<io.vertx.core.shareddata.Shareable: io.vertx.core.shareddata.Shareable copy()>() in <io.vertx.core.shareddata.impl.Checker: java.lang.Object copyIfRequired(java.lang.Object)> ==> <io.vertx.core.buffer.impl.BufferImpl: io.vertx.core.shareddata.Shareable copy()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>(java.lang.String)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: void finalize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.String getCanonicalName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.logging.Log4jLogDelegate: void <init>(java.lang.String)>(r1) in <io.vertx.core.logging.Log4jLogDelegateFactory: io.vertx.core.spi.logging.LogDelegate createDelegate(java.lang.String)> ==> <io.vertx.core.logging.Log4jLogDelegate: void <init>(java.lang.String)>
STATIC edge: $r2 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getLogger(java.lang.String)>(r1) in <io.vertx.core.logging.Log4jLogDelegate: void <init>(java.lang.String)> ==> <org.apache.log4j.Logger: org.apache.log4j.Logger getLogger(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.logging.JULLogDelegate: void <init>(java.lang.String)>(r1) in <io.vertx.core.logging.JULLogDelegateFactory: io.vertx.core.spi.logging.LogDelegate createDelegate(java.lang.String)> ==> <io.vertx.core.logging.JULLogDelegate: void <init>(java.lang.String)>
CLINIT edge: $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>(r1) in <io.vertx.core.logging.JULLogDelegate: void <init>(java.lang.String)> ==> <java.util.logging.Logger: void <clinit>()>
STATIC edge: $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>(r1) in <io.vertx.core.logging.JULLogDelegate: void <init>(java.lang.String)> ==> <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.logging.Log4j2LogDelegate: void <init>(java.lang.String)>(r1) in <io.vertx.core.logging.Log4j2LogDelegateFactory: io.vertx.core.spi.logging.LogDelegate createDelegate(java.lang.String)> ==> <io.vertx.core.logging.Log4j2LogDelegate: void <init>(java.lang.String)>
STATIC edge: $r2 = staticinvoke <org.apache.logging.log4j.LogManager: org.apache.logging.log4j.Logger getLogger(java.lang.String)>(r1) in <io.vertx.core.logging.Log4j2LogDelegate: void <init>(java.lang.String)> ==> <org.apache.logging.log4j.LogManager: org.apache.logging.log4j.Logger getLogger(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.logging.SLF4JLogDelegate: void <init>(java.lang.String)>(r1) in <io.vertx.core.logging.SLF4JLogDelegateFactory: io.vertx.core.spi.logging.LogDelegate createDelegate(java.lang.String)> ==> <io.vertx.core.logging.SLF4JLogDelegate: void <init>(java.lang.String)>
STATIC edge: $r2 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.String)>(r1) in <io.vertx.core.logging.SLF4JLogDelegate: void <init>(java.lang.String)> ==> <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.logging.Logger: void <init>(io.vertx.core.spi.logging.LogDelegate)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getCanonicalName()>() in <io.vertx.core.logging.Log4jLogDelegate: void <clinit>()> ==> <java.lang.Class: java.lang.String getCanonicalName()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getCanonicalName()>() in <io.vertx.core.logging.Log4j2LogDelegate: void <clinit>()> ==> <java.lang.Class: java.lang.String getCanonicalName()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getCanonicalName()>() in <io.vertx.core.logging.SLF4JLogDelegate: void <clinit>()> ==> <java.lang.Class: java.lang.String getCanonicalName()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.logging.JULLogDelegateFactory: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean startsWith(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r1) in <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.shareddata.impl.Checker: void checkType(java.lang.Object)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid type for shareddata data structure: ") in <io.vertx.core.shareddata.impl.Checker: void checkType(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() in <io.vertx.core.shareddata.impl.Checker: void checkType(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>() in <io.vertx.core.shareddata.impl.Checker: void checkType(java.lang.Object)> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5) in <io.vertx.core.shareddata.impl.Checker: void checkType(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.shareddata.impl.Checker: void checkType(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7) in <io.vertx.core.shareddata.impl.Checker: void checkType(java.lang.Object)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() in <io.vertx.core.Starter: java.lang.String readMainVerticleFromManifest()> ==> <java.lang.Object: java.lang.Class getClass()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.Starter: void closeQuietly(java.io.InputStream)>(r19) in <io.vertx.core.Starter: java.lang.String readMainVerticleFromManifest()> ==> <io.vertx.core.Starter: void closeQuietly(java.io.InputStream)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.Starter: void closeQuietly(java.io.InputStream)>(r19) in <io.vertx.core.Starter: java.lang.String readMainVerticleFromManifest()> ==> <io.vertx.core.Starter: void closeQuietly(java.io.InputStream)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.Starter: void closeQuietly(java.io.InputStream)>(r19) in <io.vertx.core.Starter: java.lang.String readMainVerticleFromManifest()> ==> <io.vertx.core.Starter: void closeQuietly(java.io.InputStream)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>() in <io.vertx.core.Starter: java.lang.String readMainVerticleFromManifest()> ==> <java.lang.Class: java.lang.ClassLoader getClassLoader()>
VIRTUAL edge: r18 = virtualinvoke $r2.<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>("META-INF/MANIFEST.MF") in <io.vertx.core.Starter: java.lang.String readMainVerticleFromManifest()> ==> <java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>
VIRTUAL edge: r18 = virtualinvoke $r2.<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>("META-INF/MANIFEST.MF") in <io.vertx.core.Starter: java.lang.String readMainVerticleFromManifest()> ==> <io.vertx.core.impl.IsolatingClassLoader: java.util.Enumeration getResources(java.lang.String)>
INTERFACE edge: $z0 = interfaceinvoke r18.<java.util.Enumeration: boolean hasMoreElements()>() in <io.vertx.core.Starter: java.lang.String readMainVerticleFromManifest()> ==> <java.util.StringTokenizer: boolean hasMoreElements()>
INTERFACE edge: $r3 = interfaceinvoke r18.<java.util.Enumeration: java.lang.Object nextElement()>() in <io.vertx.core.Starter: java.lang.String readMainVerticleFromManifest()> ==> <java.util.StringTokenizer: java.lang.Object nextElement()>
VIRTUAL edge: r19 = virtualinvoke $r4.<java.net.URL: java.io.InputStream openStream()>() in <io.vertx.core.Starter: java.lang.String readMainVerticleFromManifest()> ==> <java.net.URL: java.io.InputStream openStream()>
SPECIAL edge: specialinvoke $r21.<java.util.jar.Manifest: void <init>(java.io.InputStream)>(r19) in <io.vertx.core.Starter: java.lang.String readMainVerticleFromManifest()> ==> <java.util.jar.Manifest: void <init>(java.io.InputStream)>
VIRTUAL edge: r7 = virtualinvoke $r21.<java.util.jar.Manifest: java.util.jar.Attributes getMainAttributes()>() in <io.vertx.core.Starter: java.lang.String readMainVerticleFromManifest()> ==> <java.util.jar.Manifest: java.util.jar.Attributes getMainAttributes()>
VIRTUAL edge: r8 = virtualinvoke r7.<java.util.jar.Attributes: java.lang.String getValue(java.lang.String)>("Main-Class") in <io.vertx.core.Starter: java.lang.String readMainVerticleFromManifest()> ==> <java.util.jar.Attributes: java.lang.String getValue(java.lang.String)>
VIRTUAL edge: r11 = virtualinvoke r7.<java.util.jar.Attributes: java.lang.String getValue(java.lang.String)>("Main-Verticle") in <io.vertx.core.Starter: java.lang.String readMainVerticleFromManifest()> ==> <java.util.jar.Attributes: java.lang.String getValue(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.String getName()>() in <io.vertx.core.Starter: java.lang.String readMainVerticleFromManifest()> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: $z1 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(r8) in <io.vertx.core.Starter: java.lang.String readMainVerticleFromManifest()> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $r15 = virtualinvoke $r23.<java.io.IOException: java.lang.String getMessage()>() in <io.vertx.core.Starter: java.lang.String readMainVerticleFromManifest()> ==> <java.lang.Throwable: java.lang.String getMessage()>
VIRTUAL edge: $r15 = virtualinvoke $r23.<java.io.IOException: java.lang.String getMessage()>() in <io.vertx.core.Starter: java.lang.String readMainVerticleFromManifest()> ==> <java.nio.charset.MalformedInputException: java.lang.String getMessage()>
VIRTUAL edge: $r15 = virtualinvoke $r23.<java.io.IOException: java.lang.String getMessage()>() in <io.vertx.core.Starter: java.lang.String readMainVerticleFromManifest()> ==> <java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
SPECIAL edge: specialinvoke $r22.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r15) in <io.vertx.core.Starter: java.lang.String readMainVerticleFromManifest()> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
CLINIT edge: r3 = staticinvoke <java.util.Collections: java.util.ArrayList list(java.util.Enumeration)>($r2) in <io.vertx.core.impl.IsolatingClassLoader: java.util.Enumeration getResources(java.lang.String)> ==> <java.util.Collections: void <clinit>()>
STATIC edge: $r8 = staticinvoke <java.util.Collections: java.util.Enumeration enumeration(java.util.Collection)>(r3) in <io.vertx.core.impl.IsolatingClassLoader: java.util.Enumeration getResources(java.lang.String)> ==> <java.util.Collections: java.util.Enumeration enumeration(java.util.Collection)>
STATIC edge: $r7 = staticinvoke <java.util.Collections: java.util.ArrayList list(java.util.Enumeration)>(r6) in <io.vertx.core.impl.IsolatingClassLoader: java.util.Enumeration getResources(java.lang.String)> ==> <java.util.Collections: java.util.ArrayList list(java.util.Enumeration)>
STATIC edge: r3 = staticinvoke <java.util.Collections: java.util.ArrayList list(java.util.Enumeration)>($r2) in <io.vertx.core.impl.IsolatingClassLoader: java.util.Enumeration getResources(java.lang.String)> ==> <java.util.Collections: java.util.ArrayList list(java.util.Enumeration)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("-ha") in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("-ha") in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <java.util.IdentityHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("-ha") in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("-ha") in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <java.util.EnumMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("-ha") in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("-ha") in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("-ha") in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("-ha") in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <java.util.TreeMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("-ha") in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("-ha") in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>("-cluster") in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>("-cluster") in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <java.util.IdentityHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>("-cluster") in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>("-cluster") in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <java.util.EnumMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>("-cluster") in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>("-cluster") in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>("-cluster") in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>("-cluster") in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <java.util.TreeMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>("-cluster") in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>("-cluster") in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>
SPECIAL edge: r6 = specialinvoke r5.<io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)>($z3, z0, r0) in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)>
SPECIAL edge: specialinvoke r5.<io.vertx.core.Starter: void displaySyntax()>() in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <io.vertx.core.Starter: void displaySyntax()>
SPECIAL edge: specialinvoke r5.<io.vertx.core.Starter: void displaySyntax()>() in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <io.vertx.core.Starter: void displaySyntax()>
SPECIAL edge: specialinvoke r5.<io.vertx.core.Starter: void configureFromSystemProperties(java.lang.Object,java.lang.String)>($r13, "vertx.deployment.options.") in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <io.vertx.core.Starter: void configureFromSystemProperties(java.lang.Object,java.lang.String)>
VIRTUAL edge: virtualinvoke r5.<io.vertx.core.Starter: void beforeDeployingVerticle(io.vertx.core.DeploymentOptions)>($r18) in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <io.vertx.core.Starter: void beforeDeployingVerticle(io.vertx.core.DeploymentOptions)>
SPECIAL edge: $r22 = specialinvoke r5.<io.vertx.core.Starter: io.vertx.core.Handler createLoggingHandler(java.lang.String,io.vertx.core.Handler)>($r58, $r21) in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <io.vertx.core.Starter: io.vertx.core.Handler createLoggingHandler(java.lang.String,io.vertx.core.Handler)>
INTERFACE edge: $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>("-instances") in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>("-instances") in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <java.util.IdentityHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>("-instances") in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>("-instances") in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <java.util.EnumMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>("-instances") in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>("-instances") in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>("-instances") in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>("-instances") in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <java.util.TreeMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>("-instances") in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>("-instances") in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r26.<io.vertx.core.logging.Logger: void error(java.lang.Object)>("Invalid number of instances") in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <io.vertx.core.logging.Logger: void error(java.lang.Object)>
INTERFACE edge: $r11 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>("-conf") in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r11 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>("-conf") in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <java.util.IdentityHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r11 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>("-conf") in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r11 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>("-conf") in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <java.util.EnumMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r11 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>("-conf") in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r11 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>("-conf") in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r11 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>("-conf") in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r11 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>("-conf") in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <java.util.TreeMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r11 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>("-conf") in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r11 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>("-conf") in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>
SPECIAL edge: specialinvoke $r24.<java.io.File: void <init>(java.lang.String)>(r50) in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <java.io.File: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r23.<java.util.Scanner: void <init>(java.io.File)>($r24) in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <java.util.Scanner: void <init>(java.io.File)>
VIRTUAL edge: r51 = virtualinvoke $r23.<java.util.Scanner: java.util.Scanner useDelimiter(java.lang.String)>("\\A") in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <java.util.Scanner: java.util.Scanner useDelimiter(java.lang.String)>
VIRTUAL edge: r52 = virtualinvoke r51.<java.util.Scanner: java.lang.String next()>() in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <java.util.Scanner: java.lang.String next()>
VIRTUAL edge: virtualinvoke r51.<java.util.Scanner: void close()>() in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <java.util.Scanner: void close()>
VIRTUAL edge: virtualinvoke r51.<java.util.Scanner: void close()>() in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <java.util.Scanner: void close()>
VIRTUAL edge: virtualinvoke r51.<java.util.Scanner: void close()>() in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <java.util.Scanner: void close()>
VIRTUAL edge: virtualinvoke r51.<java.util.Scanner: void close()>() in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <java.util.Scanner: void close()>
SPECIAL edge: specialinvoke $r25.<io.vertx.core.json.JsonObject: void <init>(java.lang.String)>(r52) in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <io.vertx.core.json.JsonObject: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r43.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Configuration file ") in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r52) in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not contain a valid JSON object") in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r44.<io.vertx.core.logging.Logger: void error(java.lang.Object)>($r48) in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <io.vertx.core.logging.Logger: void error(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r39.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r35) in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <java.lang.Throwable: void addSuppressed(java.lang.Throwable)>
SPECIAL edge: specialinvoke $r34.<io.vertx.core.json.JsonObject: void <init>(java.lang.String)>(r50) in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <io.vertx.core.json.JsonObject: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r28.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-conf option does not point to a file and is not valid JSON: ") in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r50) in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r29.<io.vertx.core.logging.Logger: void error(java.lang.Object)>($r32) in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <io.vertx.core.logging.Logger: void error(java.lang.Object)>
INTERFACE edge: $r57 = interfaceinvoke $r56.<java.util.Map: java.lang.Object get(java.lang.Object)>("-worker") in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r57 = interfaceinvoke $r56.<java.util.Map: java.lang.Object get(java.lang.Object)>("-worker") in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <java.util.IdentityHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r57 = interfaceinvoke $r56.<java.util.Map: java.lang.Object get(java.lang.Object)>("-worker") in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r57 = interfaceinvoke $r56.<java.util.Map: java.lang.Object get(java.lang.Object)>("-worker") in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <java.util.EnumMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r57 = interfaceinvoke $r56.<java.util.Map: java.lang.Object get(java.lang.Object)>("-worker") in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r57 = interfaceinvoke $r56.<java.util.Map: java.lang.Object get(java.lang.Object)>("-worker") in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r57 = interfaceinvoke $r56.<java.util.Map: java.lang.Object get(java.lang.Object)>("-worker") in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r57 = interfaceinvoke $r56.<java.util.Map: java.lang.Object get(java.lang.Object)>("-worker") in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <java.util.TreeMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r57 = interfaceinvoke $r56.<java.util.Map: java.lang.Object get(java.lang.Object)>("-worker") in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r57 = interfaceinvoke $r56.<java.util.Map: java.lang.Object get(java.lang.Object)>("-worker") in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>
SPECIAL edge: specialinvoke $r12.<io.vertx.core.DeploymentOptions: void <init>()>() in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <io.vertx.core.DeploymentOptions: void <init>()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<io.vertx.core.DeploymentOptions: io.vertx.core.DeploymentOptions setConfig(io.vertx.core.json.JsonObject)>(r53) in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <io.vertx.core.DeploymentOptions: io.vertx.core.DeploymentOptions setConfig(io.vertx.core.json.JsonObject)>
VIRTUAL edge: $r16 = virtualinvoke $r15.<io.vertx.core.DeploymentOptions: io.vertx.core.DeploymentOptions setWorker(boolean)>(z5) in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <io.vertx.core.DeploymentOptions: io.vertx.core.DeploymentOptions setWorker(boolean)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<io.vertx.core.DeploymentOptions: io.vertx.core.DeploymentOptions setHa(boolean)>(z0) in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <io.vertx.core.DeploymentOptions: io.vertx.core.DeploymentOptions setHa(boolean)>
VIRTUAL edge: virtualinvoke $r17.<io.vertx.core.DeploymentOptions: io.vertx.core.DeploymentOptions setInstances(int)>(i0) in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <io.vertx.core.DeploymentOptions: io.vertx.core.DeploymentOptions setInstances(int)>
INTERFACE edge: interfaceinvoke r6.<io.vertx.core.Vertx: void deployVerticle(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)>(r19, $r20, $r22) in <io.vertx.core.Starter: void runVerticle(java.lang.String,io.vertx.core.impl.Args)> ==> <io.vertx.core.impl.VertxImpl: void deployVerticle(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)>
CLINIT edge: $r4 = new io.vertx.core.VertxOptions in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <io.vertx.core.VertxOptions: void <clinit>()>
STATIC edge: $r9 = staticinvoke <io.vertx.core.Vertx: io.vertx.core.Vertx vertx(io.vertx.core.VertxOptions)>($r8) in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <io.vertx.core.Vertx: io.vertx.core.Vertx vertx(io.vertx.core.VertxOptions)>
STATIC edge: staticinvoke <io.vertx.core.Vertx: void clusteredVertx(io.vertx.core.VertxOptions,io.vertx.core.Handler)>($r57, $r58) in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <io.vertx.core.Vertx: void clusteredVertx(io.vertx.core.VertxOptions,io.vertx.core.Handler)>
STATIC edge: $r58 = staticinvoke <io.vertx.core.Starter$lambda_startVertx_0__2: io.vertx.core.Handler bootstrap$(java.util.concurrent.atomic.AtomicReference,java.util.concurrent.CountDownLatch)>($r17, $r15) in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <io.vertx.core.Starter$lambda_startVertx_0__2: io.vertx.core.Handler bootstrap$(java.util.concurrent.atomic.AtomicReference,java.util.concurrent.CountDownLatch)>
STATIC edge: r0 = staticinvoke <java.util.ServiceLoader: java.util.ServiceLoader load(java.lang.Class)>(class "Lio/vertx/core/spi/VertxMetricsFactory;") in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <java.util.ServiceLoader: java.util.ServiceLoader load(java.lang.Class)>
CLINIT edge: $r9 = staticinvoke <io.vertx.core.Vertx: io.vertx.core.Vertx vertx(io.vertx.core.VertxOptions)>($r8) in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <io.vertx.core.Vertx: void <clinit>()>
CLINIT edge: $r51 = <io.vertx.core.Starter: io.vertx.core.logging.Logger log> in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <io.vertx.core.Starter: void <clinit>()>
CLINIT edge: $r59 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES> in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <java.util.concurrent.TimeUnit: void <clinit>()>
CLINIT edge: staticinvoke <io.vertx.core.Vertx: void clusteredVertx(io.vertx.core.VertxOptions,io.vertx.core.Handler)>($r57, $r58) in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <io.vertx.core.Vertx: void <clinit>()>
CLINIT edge: $r11 = <io.vertx.core.Starter: io.vertx.core.logging.Logger log> in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <io.vertx.core.Starter: void <clinit>()>
CLINIT edge: r0 = staticinvoke <java.lang.System: java.util.Properties getProperties()>() in <io.vertx.core.Starter: void configureFromSystemProperties(java.lang.Object,java.lang.String)> ==> <java.lang.System: void <clinit>()>
STATIC edge: r50 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(r12, r4) in <io.vertx.core.Starter: void configureFromSystemProperties(java.lang.Object,java.lang.String)> ==> <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
STATIC edge: r50 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>(r4) in <io.vertx.core.Starter: void configureFromSystemProperties(java.lang.Object,java.lang.String)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>
STATIC edge: r50 = staticinvoke <java.lang.Long: java.lang.Long valueOf(java.lang.String)>(r4) in <io.vertx.core.Starter: void configureFromSystemProperties(java.lang.Object,java.lang.String)> ==> <java.lang.Long: java.lang.Long valueOf(java.lang.String)>
STATIC edge: r50 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>(r4) in <io.vertx.core.Starter: void configureFromSystemProperties(java.lang.Object,java.lang.String)> ==> <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>
STATIC edge: r0 = staticinvoke <java.lang.System: java.util.Properties getProperties()>() in <io.vertx.core.Starter: void configureFromSystemProperties(java.lang.Object,java.lang.String)> ==> <java.lang.System: java.util.Properties getProperties()>
CLINIT edge: $r40 = <io.vertx.core.Starter: io.vertx.core.logging.Logger log> in <io.vertx.core.Starter: void configureFromSystemProperties(java.lang.Object,java.lang.String)> ==> <io.vertx.core.Starter: void <clinit>()>
CLINIT edge: $r17 = <io.vertx.core.Starter: io.vertx.core.logging.Logger log> in <io.vertx.core.Starter: void configureFromSystemProperties(java.lang.Object,java.lang.String)> ==> <io.vertx.core.Starter: void <clinit>()>
CLINIT edge: $r15 = <java.lang.Boolean: java.lang.Class TYPE> in <io.vertx.core.Starter: void configureFromSystemProperties(java.lang.Object,java.lang.String)> ==> <java.lang.Boolean: void <clinit>()>
CLINIT edge: $r14 = <java.lang.Long: java.lang.Class TYPE> in <io.vertx.core.Starter: void configureFromSystemProperties(java.lang.Object,java.lang.String)> ==> <java.lang.Long: void <clinit>()>
CLINIT edge: $r13 = <java.lang.Integer: java.lang.Class TYPE> in <io.vertx.core.Starter: void configureFromSystemProperties(java.lang.Object,java.lang.String)> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: $r24 = <io.vertx.core.Starter: io.vertx.core.logging.Logger log> in <io.vertx.core.Starter: void configureFromSystemProperties(java.lang.Object,java.lang.String)> ==> <io.vertx.core.Starter: void <clinit>()>
STATIC edge: $r2 = staticinvoke <io.vertx.core.Starter$lambda_createLoggingHandler_2__3: io.vertx.core.Handler bootstrap$(java.lang.String,io.vertx.core.Handler)>(r0, r1) in <io.vertx.core.Starter: io.vertx.core.Handler createLoggingHandler(java.lang.String,io.vertx.core.Handler)> ==> <io.vertx.core.Starter$lambda_createLoggingHandler_2__3: io.vertx.core.Handler bootstrap$(java.lang.String,io.vertx.core.Handler)>
CLINIT edge: $r1 = <io.vertx.core.DeploymentOptions: java.lang.String DEFAULT_ISOLATION_GROUP> in <io.vertx.core.DeploymentOptions: void <init>()> ==> <io.vertx.core.DeploymentOptions: void <clinit>()>
CLINIT edge: $r2 = <io.vertx.core.VertxOptions: java.util.concurrent.TimeUnit DEFAULT_MAX_WORKER_EXECUTE_TIME_UNIT> in <io.vertx.core.DeploymentOptions: void <init>()> ==> <io.vertx.core.VertxOptions: void <clinit>()>
CLINIT edge: $i0 = staticinvoke <io.vertx.core.impl.cpu.CpuCoreSensor: int availableProcessors()>() in <io.vertx.core.VertxOptions: void <clinit>()> ==> <io.vertx.core.impl.cpu.CpuCoreSensor: void <clinit>()>
STATIC edge: $i0 = staticinvoke <io.vertx.core.impl.cpu.CpuCoreSensor: int availableProcessors()>() in <io.vertx.core.VertxOptions: void <clinit>()> ==> <io.vertx.core.impl.cpu.CpuCoreSensor: int availableProcessors()>
CLINIT edge: $r0 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS> in <io.vertx.core.VertxOptions: void <clinit>()> ==> <java.util.concurrent.TimeUnit: void <clinit>()>
CLINIT edge: <io.vertx.core.VertxOptions: int DEFAULT_EVENT_LOOP_POOL_SIZE> = $i1 in <io.vertx.core.VertxOptions: void <clinit>()> ==> <io.vertx.core.VertxOptions: void <clinit>()>
CLINIT edge: $r1 = <io.vertx.core.Vertx: io.vertx.core.spi.VertxFactory factory> in <io.vertx.core.Vertx: io.vertx.core.Vertx vertx(io.vertx.core.VertxOptions)> ==> <io.vertx.core.Vertx: void <clinit>()>
CLINIT edge: $r2 = <io.vertx.core.Vertx: io.vertx.core.spi.VertxFactory factory> in <io.vertx.core.Vertx: void clusteredVertx(io.vertx.core.VertxOptions,io.vertx.core.Handler)> ==> <io.vertx.core.Vertx: void <clinit>()>
CLINIT edge: <io.vertx.core.Vertx: io.vertx.core.spi.VertxFactory factory> = $r1 in <io.vertx.core.Vertx: void <clinit>()> ==> <io.vertx.core.Vertx: void <clinit>()>
STATIC edge: $r0 = staticinvoke <io.vertx.core.ServiceHelper: java.lang.Object loadFactory(java.lang.Class)>(class "Lio/vertx/core/spi/VertxFactory;") in <io.vertx.core.Vertx: void <clinit>()> ==> <io.vertx.core.ServiceHelper: java.lang.Object loadFactory(java.lang.Class)>
CLINIT edge: <java.lang.Boolean: java.lang.Class TYPE> = null in <java.lang.Boolean: void <clinit>()> ==> <java.lang.Boolean: void <clinit>()>
CLINIT edge: <java.lang.Long: java.lang.Class TYPE> = null in <java.lang.Long: void <clinit>()> ==> <java.lang.Long: void <clinit>()>
CLINIT edge: <io.vertx.core.impl.cpu.CpuCoreSensor: byte[] BITS> = $r0 in <io.vertx.core.impl.cpu.CpuCoreSensor: void <clinit>()> ==> <io.vertx.core.impl.cpu.CpuCoreSensor: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("US-ASCII") in <io.vertx.core.impl.cpu.CpuCoreSensor: void <clinit>()> ==> <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>
CLINIT edge: $r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>() in <io.vertx.core.impl.cpu.CpuCoreSensor: int availableProcessors()> ==> <java.lang.System: void <clinit>()>
STATIC edge: $i0 = staticinvoke <io.vertx.core.impl.cpu.CpuCoreSensor: int determineProcessors()>() in <io.vertx.core.impl.cpu.CpuCoreSensor: int availableProcessors()> ==> <io.vertx.core.impl.cpu.CpuCoreSensor: int determineProcessors()>
STATIC edge: $r2 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r1) in <io.vertx.core.impl.cpu.CpuCoreSensor: int availableProcessors()> ==> <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
STATIC edge: $r1 = staticinvoke <io.vertx.core.impl.cpu.CpuCoreSensor$lambda_availableProcessors_0__4: java.security.PrivilegedAction bootstrap$()>() in <io.vertx.core.impl.cpu.CpuCoreSensor: int availableProcessors()> ==> <io.vertx.core.impl.cpu.CpuCoreSensor$lambda_availableProcessors_0__4: java.security.PrivilegedAction bootstrap$()>
STATIC edge: $r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>() in <io.vertx.core.impl.cpu.CpuCoreSensor: int availableProcessors()> ==> <java.lang.System: java.lang.SecurityManager getSecurityManager()>
CLINIT edge: $i0 = staticinvoke <io.vertx.core.impl.cpu.CpuCoreSensor: int determineProcessors()>() in <io.vertx.core.impl.cpu.CpuCoreSensor: int availableProcessors()> ==> <io.vertx.core.impl.cpu.CpuCoreSensor: void <clinit>()>
STATIC edge: r1 = staticinvoke <io.vertx.core.ServiceHelper: java.lang.Object loadFactoryOrNull(java.lang.Class)>(r0) in <io.vertx.core.ServiceHelper: java.lang.Object loadFactory(java.lang.Class)> ==> <io.vertx.core.ServiceHelper: java.lang.Object loadFactoryOrNull(java.lang.Class)>
CLINIT edge: $z0 = staticinvoke <io.vertx.core.impl.launcher.commands.ExecUtils: boolean isLinux()>() in <io.vertx.core.impl.cpu.CpuCoreSensor: int determineProcessors()> ==> <io.vertx.core.impl.launcher.commands.ExecUtils: void <clinit>()>
STATIC edge: $i2 = staticinvoke <java.lang.Math: int min(int,int)>(i0, i1) in <io.vertx.core.impl.cpu.CpuCoreSensor: int determineProcessors()> ==> <java.lang.Math: int min(int,int)>
STATIC edge: i1 = staticinvoke <io.vertx.core.impl.cpu.CpuCoreSensor: int readCPUMask(java.io.File)>($r1) in <io.vertx.core.impl.cpu.CpuCoreSensor: int determineProcessors()> ==> <io.vertx.core.impl.cpu.CpuCoreSensor: int readCPUMask(java.io.File)>
STATIC edge: $z0 = staticinvoke <io.vertx.core.impl.launcher.commands.ExecUtils: boolean isLinux()>() in <io.vertx.core.impl.cpu.CpuCoreSensor: int determineProcessors()> ==> <io.vertx.core.impl.launcher.commands.ExecUtils: boolean isLinux()>
STATIC edge: $r0 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>() in <io.vertx.core.impl.cpu.CpuCoreSensor: int determineProcessors()> ==> <java.lang.Runtime: java.lang.Runtime getRuntime()>
CLINIT edge: i1 = staticinvoke <io.vertx.core.impl.cpu.CpuCoreSensor: int readCPUMask(java.io.File)>($r1) in <io.vertx.core.impl.cpu.CpuCoreSensor: int determineProcessors()> ==> <io.vertx.core.impl.cpu.CpuCoreSensor: void <clinit>()>
CLINIT edge: $r1 = new java.io.File in <io.vertx.core.impl.cpu.CpuCoreSensor: int determineProcessors()> ==> <java.io.File: void <clinit>()>
STATIC edge: r1 = staticinvoke <io.vertx.core.ServiceHelper: java.util.Collection loadFactories(java.lang.Class)>(r0) in <io.vertx.core.ServiceHelper: java.lang.Object loadFactoryOrNull(java.lang.Class)> ==> <io.vertx.core.ServiceHelper: java.util.Collection loadFactories(java.lang.Class)>
CLINIT edge: $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("os.name") in <io.vertx.core.impl.launcher.commands.ExecUtils: void <clinit>()> ==> <java.lang.System: void <clinit>()>
STATIC edge: $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("os.name") in <io.vertx.core.impl.launcher.commands.ExecUtils: void <clinit>()> ==> <java.lang.System: java.lang.String getProperty(java.lang.String)>
CLINIT edge: <io.vertx.core.impl.launcher.commands.ExecUtils: java.lang.String osName> = $r1 in <io.vertx.core.impl.launcher.commands.ExecUtils: void <clinit>()> ==> <io.vertx.core.impl.launcher.commands.ExecUtils: void <clinit>()>
CLINIT edge: $r4 = <io.vertx.core.impl.cpu.CpuCoreSensor: java.nio.charset.Charset ASCII> in <io.vertx.core.impl.cpu.CpuCoreSensor: int readCPUMask(java.io.File)> ==> <io.vertx.core.impl.cpu.CpuCoreSensor: void <clinit>()>
CLINIT edge: $r0 = <io.vertx.core.impl.launcher.commands.ExecUtils: java.lang.String osName> in <io.vertx.core.impl.launcher.commands.ExecUtils: boolean isLinux()> ==> <io.vertx.core.impl.launcher.commands.ExecUtils: void <clinit>()>
STATIC edge: $r1 = staticinvoke <io.vertx.core.ServiceHelper: java.util.Collection loadFactories(java.lang.Class,java.lang.ClassLoader)>(r0, null) in <io.vertx.core.ServiceHelper: java.util.Collection loadFactories(java.lang.Class)> ==> <io.vertx.core.ServiceHelper: java.util.Collection loadFactories(java.lang.Class,java.lang.ClassLoader)>
CLINIT edge: $r8 = staticinvoke <java.util.Collections: java.util.List emptyList()>() in <io.vertx.core.ServiceHelper: java.util.Collection loadFactories(java.lang.Class,java.lang.ClassLoader)> ==> <java.util.Collections: void <clinit>()>
STATIC edge: $r8 = staticinvoke <java.util.Collections: java.util.List emptyList()>() in <io.vertx.core.ServiceHelper: java.util.Collection loadFactories(java.lang.Class,java.lang.ClassLoader)> ==> <java.util.Collections: java.util.List emptyList()>
STATIC edge: $r11 = staticinvoke <io.vertx.core.ServiceHelper$add__5: java.util.function.Consumer bootstrap$(java.util.List)>($r0) in <io.vertx.core.ServiceHelper: java.util.Collection loadFactories(java.lang.Class,java.lang.ClassLoader)> ==> <io.vertx.core.ServiceHelper$add__5: java.util.function.Consumer bootstrap$(java.util.List)>
STATIC edge: r16 = staticinvoke <java.util.ServiceLoader: java.util.ServiceLoader load(java.lang.Class,java.lang.ClassLoader)>(r3, $r6) in <io.vertx.core.ServiceHelper: java.util.Collection loadFactories(java.lang.Class,java.lang.ClassLoader)> ==> <java.util.ServiceLoader: java.util.ServiceLoader load(java.lang.Class,java.lang.ClassLoader)>
STATIC edge: $r14 = staticinvoke <io.vertx.core.ServiceHelper$add__6: java.util.function.Consumer bootstrap$(java.util.List)>($r0) in <io.vertx.core.ServiceHelper: java.util.Collection loadFactories(java.lang.Class,java.lang.ClassLoader)> ==> <io.vertx.core.ServiceHelper$add__6: java.util.function.Consumer bootstrap$(java.util.List)>
STATIC edge: r15 = staticinvoke <java.util.ServiceLoader: java.util.ServiceLoader load(java.lang.Class)>(r3) in <io.vertx.core.ServiceHelper: java.util.Collection loadFactories(java.lang.Class,java.lang.ClassLoader)> ==> <java.util.ServiceLoader: java.util.ServiceLoader load(java.lang.Class)>
STATIC edge: r15 = staticinvoke <java.util.ServiceLoader: java.util.ServiceLoader load(java.lang.Class,java.lang.ClassLoader)>(r3, r2) in <io.vertx.core.ServiceHelper: java.util.Collection loadFactories(java.lang.Class,java.lang.ClassLoader)> ==> <java.util.ServiceLoader: java.util.ServiceLoader load(java.lang.Class,java.lang.ClassLoader)>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() in <io.vertx.core.Starter: java.lang.String getVersion()> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>() in <io.vertx.core.Starter: java.lang.String getVersion()> ==> <java.lang.Class: java.lang.ClassLoader getClassLoader()>
VIRTUAL edge: r20 = virtualinvoke $r2.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>("META-INF/vertx/vertx-version.txt") in <io.vertx.core.Starter: java.lang.String getVersion()> ==> <java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>
SPECIAL edge: specialinvoke $r29.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot find vertx-version.txt on classpath") in <io.vertx.core.Starter: java.lang.String getVersion()> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r30.<java.util.Scanner: void <init>(java.io.InputStream,java.lang.String)>(r20, "UTF-8") in <io.vertx.core.Starter: java.lang.String getVersion()> ==> <java.util.Scanner: void <init>(java.io.InputStream,java.lang.String)>
VIRTUAL edge: r21 = virtualinvoke $r30.<java.util.Scanner: java.util.Scanner useDelimiter(java.lang.String)>("\\A") in <io.vertx.core.Starter: java.lang.String getVersion()> ==> <java.util.Scanner: java.util.Scanner useDelimiter(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r21.<java.util.Scanner: boolean hasNext()>() in <io.vertx.core.Starter: java.lang.String getVersion()> ==> <java.util.Scanner: boolean hasNext()>
VIRTUAL edge: $r22 = virtualinvoke r21.<java.util.Scanner: java.lang.String next()>() in <io.vertx.core.Starter: java.lang.String getVersion()> ==> <java.util.Scanner: java.lang.String next()>
VIRTUAL edge: virtualinvoke r21.<java.util.Scanner: void close()>() in <io.vertx.core.Starter: java.lang.String getVersion()> ==> <java.util.Scanner: void close()>
VIRTUAL edge: virtualinvoke r21.<java.util.Scanner: void close()>() in <io.vertx.core.Starter: java.lang.String getVersion()> ==> <java.util.Scanner: void close()>
VIRTUAL edge: virtualinvoke r21.<java.util.Scanner: void close()>() in <io.vertx.core.Starter: java.lang.String getVersion()> ==> <java.util.Scanner: void close()>
VIRTUAL edge: virtualinvoke r20.<java.io.InputStream: void close()>() in <io.vertx.core.Starter: java.lang.String getVersion()> ==> <java.io.ByteArrayInputStream: void close()>
VIRTUAL edge: virtualinvoke r20.<java.io.InputStream: void close()>() in <io.vertx.core.Starter: java.lang.String getVersion()> ==> <java.io.FileInputStream: void close()>
VIRTUAL edge: virtualinvoke r20.<java.io.InputStream: void close()>() in <io.vertx.core.Starter: java.lang.String getVersion()> ==> <java.io.InputStream: void close()>
VIRTUAL edge: virtualinvoke r20.<java.io.InputStream: void close()>() in <io.vertx.core.Starter: java.lang.String getVersion()> ==> <java.io.ByteArrayInputStream: void close()>
VIRTUAL edge: virtualinvoke r20.<java.io.InputStream: void close()>() in <io.vertx.core.Starter: java.lang.String getVersion()> ==> <java.io.FileInputStream: void close()>
VIRTUAL edge: virtualinvoke r20.<java.io.InputStream: void close()>() in <io.vertx.core.Starter: java.lang.String getVersion()> ==> <java.io.InputStream: void close()>
VIRTUAL edge: virtualinvoke r20.<java.io.InputStream: void close()>() in <io.vertx.core.Starter: java.lang.String getVersion()> ==> <java.io.ByteArrayInputStream: void close()>
VIRTUAL edge: virtualinvoke r20.<java.io.InputStream: void close()>() in <io.vertx.core.Starter: java.lang.String getVersion()> ==> <java.io.FileInputStream: void close()>
VIRTUAL edge: virtualinvoke r20.<java.io.InputStream: void close()>() in <io.vertx.core.Starter: java.lang.String getVersion()> ==> <java.io.InputStream: void close()>
VIRTUAL edge: virtualinvoke $r17.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r13) in <io.vertx.core.Starter: java.lang.String getVersion()> ==> <java.lang.Throwable: void addSuppressed(java.lang.Throwable)>
VIRTUAL edge: virtualinvoke $r12.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r8) in <io.vertx.core.Starter: java.lang.String getVersion()> ==> <java.lang.Throwable: void addSuppressed(java.lang.Throwable)>
VIRTUAL edge: $r7 = virtualinvoke $r32.<java.io.IOException: java.lang.String getMessage()>() in <io.vertx.core.Starter: java.lang.String getVersion()> ==> <java.lang.Throwable: java.lang.String getMessage()>
VIRTUAL edge: $r7 = virtualinvoke $r32.<java.io.IOException: java.lang.String getMessage()>() in <io.vertx.core.Starter: java.lang.String getVersion()> ==> <java.nio.charset.MalformedInputException: java.lang.String getMessage()>
VIRTUAL edge: $r7 = virtualinvoke $r32.<java.io.IOException: java.lang.String getMessage()>() in <io.vertx.core.Starter: java.lang.String getVersion()> ==> <java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
SPECIAL edge: specialinvoke $r31.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7) in <io.vertx.core.Starter: java.lang.String getVersion()> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r1.<io.vertx.core.logging.Logger: void info(java.lang.Object)>("    vertx run <main> [-options]                                                \n        runs a verticle called <main> in its own instance of vert.x.         \n\n    valid options are:                                                         \n        -conf <config>         Specifies configuration that should be provided \n                               to the verticle. <config> should reference      \n                               either a text file containing a valid JSON      \n                               object which represents the configuration OR    \n                               be a JSON string.                               \n        -instances <instances> specifies how many instances of the verticle    \n                               will be deployed. Defaults to 1                 \n        -worker                if specified then the verticle is a worker      \n                               verticle.                                       \n        -cp <classpath>        provide an extra classpath to be used for the   \n                               verticle deployment.                            \n        -cluster               if specified then the vert.x instance will form \n                               a cluster with any other vert.x instances on    \n                               the network.                                    \n        -cluster-port          port to use for cluster communication.          \n                               Default is 0 which means choose a spare         \n                               random port.                                    \n        -cluster-host          host to bind to for cluster communication.      \n                               If this is not specified vert.x will attempt    \n                               to choose one from the available interfaces.    \n        -ha                    if specified the verticle will be deployed as a \n                               high availability (HA) deployment.              \n                               This means it can fail over to any other nodes  \n                               in the cluster started with the same HA group   \n        -quorum                used in conjunction with -ha this specifies the \n                               minimum number of nodes in the cluster for any  \n                               HA deploymentIDs to be active. Defaults to 0    \n        -hagroup               used in conjunction with -ha this specifies the \n                               HA group this node will join. There can be      \n                               multiple HA groups in a cluster. Nodes will only\n                               failover to other nodes in the same group.      \n                               Defaults to __DEFAULT__                       \n\n    vertx -version                                                             \n        displays the version") in <io.vertx.core.Starter: void displaySyntax()> ==> <io.vertx.core.logging.Logger: void info(java.lang.Object)>
SPECIAL edge: r2 = specialinvoke r0.<io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)>(1, 1, r1) in <io.vertx.core.Starter: void runBare(io.vertx.core.impl.Args)> ==> <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.spi.logging.LogDelegate: void info(java.lang.Object)>(r1) in <io.vertx.core.logging.Logger: void info(java.lang.Object)> ==> <io.vertx.core.logging.Log4jLogDelegate: void info(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.spi.logging.LogDelegate: void info(java.lang.Object)>(r1) in <io.vertx.core.logging.Logger: void info(java.lang.Object)> ==> <io.vertx.core.logging.SLF4JLogDelegate: void info(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.spi.logging.LogDelegate: void info(java.lang.Object)>(r1) in <io.vertx.core.logging.Logger: void info(java.lang.Object)> ==> <io.vertx.core.logging.JULLogDelegate: void info(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.spi.logging.LogDelegate: void info(java.lang.Object)>(r1) in <io.vertx.core.logging.Logger: void info(java.lang.Object)> ==> <io.vertx.core.logging.Log4j2LogDelegate: void info(java.lang.Object)>
CLINIT edge: $r2 = <java.util.logging.Level: java.util.logging.Level INFO> in <io.vertx.core.logging.JULLogDelegate: void info(java.lang.Object)> ==> <java.util.logging.Level: void <clinit>()>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.Starter$lambda_runVerticle_1__1: void <init>(io.vertx.core.Starter)>($r0) in <io.vertx.core.Starter$lambda_runVerticle_1__1: io.vertx.core.Handler bootstrap$(io.vertx.core.Starter)> ==> <io.vertx.core.Starter$lambda_runVerticle_1__1: void <init>(io.vertx.core.Starter)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int parseInt(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.json.JsonArray: io.vertx.core.json.JsonArray copy()>() in <io.vertx.core.json.JsonArray: io.vertx.core.shareddata.Shareable copy()> ==> <io.vertx.core.json.JsonArray: io.vertx.core.json.JsonArray copy()>
CLINIT edge: r8 = staticinvoke <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)>(r7, 1) in <io.vertx.core.json.JsonArray: io.vertx.core.json.JsonArray copy()> ==> <io.vertx.core.json.Json: void <clinit>()>
STATIC edge: r8 = staticinvoke <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)>(r7, 1) in <io.vertx.core.json.JsonArray: io.vertx.core.json.JsonArray copy()> ==> <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)>
CLINIT edge: <io.vertx.core.json.Json: com.fasterxml.jackson.databind.ObjectMapper mapper> = $r29 in <io.vertx.core.json.Json: void <clinit>()> ==> <io.vertx.core.json.Json: void <clinit>()>
STATIC edge: $r8 = staticinvoke <java.util.Base64: java.util.Base64$Encoder getEncoder()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.util.Base64: java.util.Base64$Encoder getEncoder()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()>() in <io.vertx.core.json.JsonObject: io.vertx.core.shareddata.Shareable copy()> ==> <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()>
CLINIT edge: r16 = staticinvoke <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)>(r15, 1) in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <io.vertx.core.json.Json: void <clinit>()>
STATIC edge: r16 = staticinvoke <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)>(r15, 1) in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.buffer.impl.BufferImpl: io.vertx.core.buffer.Buffer copy()>() in <io.vertx.core.buffer.impl.BufferImpl: io.vertx.core.shareddata.Shareable copy()> ==> <io.vertx.core.buffer.impl.BufferImpl: io.vertx.core.buffer.Buffer copy()>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Exception: void <init>()> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Exception: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.logging.Log4jLogDelegate: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.logging.JULLogDelegate: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.logging.Log4j2LogDelegate: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.logging.SLF4JLogDelegate: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke r0.<java.io.InputStream: void close()>() in <io.vertx.core.Starter: void closeQuietly(java.io.InputStream)> ==> <java.io.ByteArrayInputStream: void close()>
VIRTUAL edge: virtualinvoke r0.<java.io.InputStream: void close()>() in <io.vertx.core.Starter: void closeQuietly(java.io.InputStream)> ==> <java.io.FileInputStream: void close()>
VIRTUAL edge: virtualinvoke r0.<java.io.InputStream: void close()>() in <io.vertx.core.Starter: void closeQuietly(java.io.InputStream)> ==> <java.io.InputStream: void close()>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.impl.IsolatingClassLoader: java.util.Enumeration findResources(java.lang.String)>(r1) in <io.vertx.core.impl.IsolatingClassLoader: java.util.Enumeration getResources(java.lang.String)> ==> <java.net.URLClassLoader: java.util.Enumeration findResources(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke r0.<io.vertx.core.impl.IsolatingClassLoader: java.lang.ClassLoader getParent()>() in <io.vertx.core.impl.IsolatingClassLoader: java.util.Enumeration getResources(java.lang.String)> ==> <java.lang.ClassLoader: java.lang.ClassLoader getParent()>
VIRTUAL edge: $r5 = virtualinvoke r0.<io.vertx.core.impl.IsolatingClassLoader: java.lang.ClassLoader getParent()>() in <io.vertx.core.impl.IsolatingClassLoader: java.util.Enumeration getResources(java.lang.String)> ==> <java.lang.ClassLoader: java.lang.ClassLoader getParent()>
VIRTUAL edge: r6 = virtualinvoke $r5.<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>(r1) in <io.vertx.core.impl.IsolatingClassLoader: java.util.Enumeration getResources(java.lang.String)> ==> <java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>
VIRTUAL edge: r6 = virtualinvoke $r5.<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>(r1) in <io.vertx.core.impl.IsolatingClassLoader: java.util.Enumeration getResources(java.lang.String)> ==> <io.vertx.core.impl.IsolatingClassLoader: java.util.Enumeration getResources(java.lang.String)>
INTERFACE edge: $z0 = interfaceinvoke r6.<java.util.Enumeration: boolean hasMoreElements()>() in <io.vertx.core.impl.IsolatingClassLoader: java.util.Enumeration getResources(java.lang.String)> ==> <java.util.StringTokenizer: boolean hasMoreElements()>
INTERFACE edge: interfaceinvoke r3.<java.util.List: boolean addAll(java.util.Collection)>($r7) in <io.vertx.core.impl.IsolatingClassLoader: java.util.Enumeration getResources(java.lang.String)> ==> <java.util.ArrayList: boolean addAll(java.util.Collection)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.String getMessage()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.util.ServiceLoader: java.util.Iterator iterator()>() in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <java.util.ServiceLoader: java.util.Iterator iterator()>
VIRTUAL edge: $r48 = virtualinvoke r0.<java.util.ServiceLoader: java.util.Iterator iterator()>() in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <java.util.ServiceLoader: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <io.vertx.core.json.JsonArray$Iter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <io.vertx.core.json.JsonObject$Iter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <java.util.Scanner: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: boolean hasNext()>
INTERFACE edge: $r49 = interfaceinvoke $r48.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object next()>
INTERFACE edge: $r49 = interfaceinvoke $r48.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <io.vertx.core.json.JsonArray$Iter: java.lang.Object next()>
INTERFACE edge: $r49 = interfaceinvoke $r48.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <io.vertx.core.json.JsonObject$Iter: java.lang.Object next()>
INTERFACE edge: $r49 = interfaceinvoke $r48.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: java.lang.Object next()>
INTERFACE edge: $r49 = interfaceinvoke $r48.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <java.util.Scanner: java.lang.Object next()>
INTERFACE edge: $r49 = interfaceinvoke $r48.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: java.lang.Object next()>
INTERFACE edge: $r49 = interfaceinvoke $r48.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: java.lang.Object next()>
SPECIAL edge: specialinvoke $r2.<io.vertx.core.metrics.MetricsOptions: void <init>()>() in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <io.vertx.core.metrics.MetricsOptions: void <init>()>
SPECIAL edge: specialinvoke r3.<io.vertx.core.Starter: void configureFromSystemProperties(java.lang.Object,java.lang.String)>(r53, "vertx.metrics.options.") in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <io.vertx.core.Starter: void configureFromSystemProperties(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke r3.<io.vertx.core.Starter: void configureFromSystemProperties(java.lang.Object,java.lang.String)>($r6, "vertx.options.") in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <io.vertx.core.Starter: void configureFromSystemProperties(java.lang.Object,java.lang.String)>
SPECIAL edge: r54 = specialinvoke r3.<io.vertx.core.Starter: java.lang.String getDefaultAddress()>() in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <io.vertx.core.Starter: java.lang.String getDefaultAddress()>
VIRTUAL edge: virtualinvoke r3.<io.vertx.core.Starter: void beforeStartingVertx(io.vertx.core.VertxOptions)>($r56) in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <io.vertx.core.Starter: void beforeStartingVertx(io.vertx.core.VertxOptions)>
VIRTUAL edge: virtualinvoke r3.<io.vertx.core.Starter: void beforeStartingVertx(io.vertx.core.VertxOptions)>($r7) in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <io.vertx.core.Starter: void beforeStartingVertx(io.vertx.core.VertxOptions)>
SPECIAL edge: specialinvoke r3.<io.vertx.core.Starter: void addShutdownHook()>() in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <io.vertx.core.Starter: void addShutdownHook()>
VIRTUAL edge: virtualinvoke r3.<io.vertx.core.Starter: void afterStartingVertx()>() in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <io.vertx.core.Starter: void afterStartingVertx()>
SPECIAL edge: specialinvoke $r4.<io.vertx.core.VertxOptions: void <init>()>() in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <io.vertx.core.VertxOptions: void <init>()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<io.vertx.core.VertxOptions: io.vertx.core.VertxOptions setMetricsOptions(io.vertx.core.metrics.MetricsOptions)>(r53) in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <io.vertx.core.VertxOptions: io.vertx.core.VertxOptions setMetricsOptions(io.vertx.core.metrics.MetricsOptions)>
VIRTUAL edge: virtualinvoke $r11.<io.vertx.core.logging.Logger: void info(java.lang.Object)>("Starting clustering...") in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <io.vertx.core.logging.Logger: void info(java.lang.Object)>
VIRTUAL edge: i1 = virtualinvoke r12.<io.vertx.core.impl.Args: int getInt(java.lang.String)>("-cluster-port") in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <io.vertx.core.impl.Args: int getInt(java.lang.String)>
VIRTUAL edge: i0 = virtualinvoke r12.<io.vertx.core.impl.Args: int getInt(java.lang.String)>("-quorum") in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <io.vertx.core.impl.Args: int getInt(java.lang.String)>
INTERFACE edge: $r14 = interfaceinvoke $r13.<java.util.Map: java.lang.Object get(java.lang.Object)>("-cluster-host") in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r14 = interfaceinvoke $r13.<java.util.Map: java.lang.Object get(java.lang.Object)>("-cluster-host") in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <java.util.IdentityHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r14 = interfaceinvoke $r13.<java.util.Map: java.lang.Object get(java.lang.Object)>("-cluster-host") in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r14 = interfaceinvoke $r13.<java.util.Map: java.lang.Object get(java.lang.Object)>("-cluster-host") in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <java.util.EnumMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r14 = interfaceinvoke $r13.<java.util.Map: java.lang.Object get(java.lang.Object)>("-cluster-host") in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r14 = interfaceinvoke $r13.<java.util.Map: java.lang.Object get(java.lang.Object)>("-cluster-host") in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r14 = interfaceinvoke $r13.<java.util.Map: java.lang.Object get(java.lang.Object)>("-cluster-host") in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r14 = interfaceinvoke $r13.<java.util.Map: java.lang.Object get(java.lang.Object)>("-cluster-host") in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <java.util.TreeMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r14 = interfaceinvoke $r13.<java.util.Map: java.lang.Object get(java.lang.Object)>("-cluster-host") in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r14 = interfaceinvoke $r13.<java.util.Map: java.lang.Object get(java.lang.Object)>("-cluster-host") in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r47.<io.vertx.core.logging.Logger: void error(java.lang.Object)>("Unable to find a default network interface for clustering. Please specify one using -cluster-host") in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <io.vertx.core.logging.Logger: void error(java.lang.Object)>
SPECIAL edge: specialinvoke $r42.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r44 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No cluster-host specified so using address ") in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r54) in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r43.<io.vertx.core.logging.Logger: void info(java.lang.Object)>($r46) in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <io.vertx.core.logging.Logger: void info(java.lang.Object)>
SPECIAL edge: specialinvoke $r15.<java.util.concurrent.CountDownLatch: void <init>(int)>(1) in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <java.util.concurrent.CountDownLatch: void <init>(int)>
VIRTUAL edge: $z4 = virtualinvoke $r15.<java.util.concurrent.CountDownLatch: boolean await(long,java.util.concurrent.TimeUnit)>(2L, $r59) in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <java.util.concurrent.CountDownLatch: boolean await(long,java.util.concurrent.TimeUnit)>
SPECIAL edge: specialinvoke $r17.<java.util.concurrent.atomic.AtomicReference: void <init>()>() in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <java.util.concurrent.atomic.AtomicReference: void <init>()>
VIRTUAL edge: $r23 = virtualinvoke $r17.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>() in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>
VIRTUAL edge: $r30 = virtualinvoke $r17.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>() in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>
VIRTUAL edge: $r25 = virtualinvoke $r17.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>() in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>
VIRTUAL edge: $r20 = virtualinvoke $r19.<io.vertx.core.VertxOptions: io.vertx.core.VertxOptions setClusterHost(java.lang.String)>(r54) in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <io.vertx.core.VertxOptions: io.vertx.core.VertxOptions setClusterHost(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke $r20.<io.vertx.core.VertxOptions: io.vertx.core.VertxOptions setClusterPort(int)>(i1) in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <io.vertx.core.VertxOptions: io.vertx.core.VertxOptions setClusterPort(int)>
VIRTUAL edge: virtualinvoke $r21.<io.vertx.core.VertxOptions: io.vertx.core.VertxOptions setClustered(boolean)>(1) in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <io.vertx.core.VertxOptions: io.vertx.core.VertxOptions setClustered(boolean)>
INTERFACE edge: $r35 = interfaceinvoke $r34.<java.util.Map: java.lang.Object get(java.lang.Object)>("-hagroup") in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r35 = interfaceinvoke $r34.<java.util.Map: java.lang.Object get(java.lang.Object)>("-hagroup") in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <java.util.IdentityHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r35 = interfaceinvoke $r34.<java.util.Map: java.lang.Object get(java.lang.Object)>("-hagroup") in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r35 = interfaceinvoke $r34.<java.util.Map: java.lang.Object get(java.lang.Object)>("-hagroup") in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <java.util.EnumMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r35 = interfaceinvoke $r34.<java.util.Map: java.lang.Object get(java.lang.Object)>("-hagroup") in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r35 = interfaceinvoke $r34.<java.util.Map: java.lang.Object get(java.lang.Object)>("-hagroup") in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r35 = interfaceinvoke $r34.<java.util.Map: java.lang.Object get(java.lang.Object)>("-hagroup") in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r35 = interfaceinvoke $r34.<java.util.Map: java.lang.Object get(java.lang.Object)>("-hagroup") in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <java.util.TreeMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r35 = interfaceinvoke $r34.<java.util.Map: java.lang.Object get(java.lang.Object)>("-hagroup") in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r35 = interfaceinvoke $r34.<java.util.Map: java.lang.Object get(java.lang.Object)>("-hagroup") in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r36.<io.vertx.core.VertxOptions: io.vertx.core.VertxOptions setHAEnabled(boolean)>(1) in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <io.vertx.core.VertxOptions: io.vertx.core.VertxOptions setHAEnabled(boolean)>
VIRTUAL edge: virtualinvoke $r40.<io.vertx.core.VertxOptions: io.vertx.core.VertxOptions setHAGroup(java.lang.String)>(r55) in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <io.vertx.core.VertxOptions: io.vertx.core.VertxOptions setHAGroup(java.lang.String)>
VIRTUAL edge: virtualinvoke $r38.<io.vertx.core.VertxOptions: io.vertx.core.VertxOptions setQuorumSize(int)>(i0) in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <io.vertx.core.VertxOptions: io.vertx.core.VertxOptions setQuorumSize(int)>
VIRTUAL edge: virtualinvoke $r33.<io.vertx.core.logging.Logger: void error(java.lang.Object)>("Timed out in starting clustered Vert.x") in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <io.vertx.core.logging.Logger: void error(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r51.<io.vertx.core.logging.Logger: void error(java.lang.Object)>("Thread interrupted in startup") in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <io.vertx.core.logging.Logger: void error(java.lang.Object)>
INTERFACE edge: $z3 = interfaceinvoke $r24.<io.vertx.core.AsyncResult: boolean failed()>() in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <io.vertx.core.impl.FutureImpl: boolean failed()>
INTERFACE edge: $z3 = interfaceinvoke $r24.<io.vertx.core.AsyncResult: boolean failed()>() in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <io.vertx.core.impl.FailedFuture: boolean failed()>
INTERFACE edge: $z3 = interfaceinvoke $r24.<io.vertx.core.AsyncResult: boolean failed()>() in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <io.vertx.core.AsyncResult$1: boolean failed()>
INTERFACE edge: $z3 = interfaceinvoke $r24.<io.vertx.core.AsyncResult: boolean failed()>() in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <io.vertx.core.AsyncResult$2: boolean failed()>
INTERFACE edge: $z3 = interfaceinvoke $r24.<io.vertx.core.AsyncResult: boolean failed()>() in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <io.vertx.core.impl.CompositeFutureImpl: boolean failed()>
INTERFACE edge: $z3 = interfaceinvoke $r24.<io.vertx.core.AsyncResult: boolean failed()>() in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <io.vertx.core.impl.SucceededFuture: boolean failed()>
VIRTUAL edge: virtualinvoke $r29.<io.vertx.core.logging.Logger: void error(java.lang.Object)>("Failed to form cluster") in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <io.vertx.core.logging.Logger: void error(java.lang.Object)>
INTERFACE edge: $r32 = interfaceinvoke $r31.<io.vertx.core.AsyncResult: java.lang.Throwable cause()>() in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <io.vertx.core.impl.FutureImpl: java.lang.Throwable cause()>
INTERFACE edge: $r32 = interfaceinvoke $r31.<io.vertx.core.AsyncResult: java.lang.Throwable cause()>() in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <io.vertx.core.impl.FailedFuture: java.lang.Throwable cause()>
INTERFACE edge: $r32 = interfaceinvoke $r31.<io.vertx.core.AsyncResult: java.lang.Throwable cause()>() in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <io.vertx.core.AsyncResult$1: java.lang.Throwable cause()>
INTERFACE edge: $r32 = interfaceinvoke $r31.<io.vertx.core.AsyncResult: java.lang.Throwable cause()>() in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <io.vertx.core.AsyncResult$2: java.lang.Throwable cause()>
INTERFACE edge: $r32 = interfaceinvoke $r31.<io.vertx.core.AsyncResult: java.lang.Throwable cause()>() in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <io.vertx.core.impl.CompositeFutureImpl: java.lang.Throwable cause()>
INTERFACE edge: $r32 = interfaceinvoke $r31.<io.vertx.core.AsyncResult: java.lang.Throwable cause()>() in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <io.vertx.core.impl.SucceededFuture: java.lang.Throwable cause()>
VIRTUAL edge: virtualinvoke $r32.<java.lang.Throwable: void printStackTrace()>() in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <java.lang.Throwable: void printStackTrace()>
INTERFACE edge: $r27 = interfaceinvoke $r26.<io.vertx.core.AsyncResult: java.lang.Object result()>() in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <io.vertx.core.impl.FutureImpl: java.lang.Object result()>
INTERFACE edge: $r27 = interfaceinvoke $r26.<io.vertx.core.AsyncResult: java.lang.Object result()>() in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <io.vertx.core.impl.FailedFuture: java.lang.Object result()>
INTERFACE edge: $r27 = interfaceinvoke $r26.<io.vertx.core.AsyncResult: java.lang.Object result()>() in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <io.vertx.core.AsyncResult$1: java.lang.Object result()>
INTERFACE edge: $r27 = interfaceinvoke $r26.<io.vertx.core.AsyncResult: java.lang.Object result()>() in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <io.vertx.core.AsyncResult$2: java.lang.Object result()>
INTERFACE edge: $r27 = interfaceinvoke $r26.<io.vertx.core.AsyncResult: java.lang.Object result()>() in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <io.vertx.core.impl.CompositeFutureImpl: java.lang.Object result()>
INTERFACE edge: $r27 = interfaceinvoke $r26.<io.vertx.core.AsyncResult: java.lang.Object result()>() in <io.vertx.core.Starter: io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)> ==> <io.vertx.core.impl.SucceededFuture: java.lang.Object result()>
STATIC edge: $r3 = staticinvoke <io.vertx.core.http.impl.headers.VertxHttpHeaders: io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry access$000(io.vertx.core.http.impl.headers.VertxHttpHeaders)>($r1) in <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: boolean hasNext()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders: io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry access$000(io.vertx.core.http.impl.headers.VertxHttpHeaders)>
STATIC edge: $i3 = staticinvoke <java.lang.Math: int abs(int)>($i2) in <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object next()> ==> <java.lang.Math: int abs(int)>
STATIC edge: r0 = staticinvoke <java.net.NetworkInterface: java.util.Enumeration getNetworkInterfaces()>() in <io.vertx.core.Starter: java.lang.String getDefaultAddress()> ==> <java.net.NetworkInterface: java.util.Enumeration getNetworkInterfaces()>
STATIC edge: $r0 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>() in <io.vertx.core.Starter: void addShutdownHook()> ==> <java.lang.Runtime: java.lang.Runtime getRuntime()>
CLINIT edge: $i0 = <io.vertx.core.VertxOptions: int DEFAULT_EVENT_LOOP_POOL_SIZE> in <io.vertx.core.VertxOptions: void <init>()> ==> <io.vertx.core.VertxOptions: void <clinit>()>
CLINIT edge: $r4 = new io.vertx.core.dns.AddressResolverOptions in <io.vertx.core.VertxOptions: void <init>()> ==> <io.vertx.core.dns.AddressResolverOptions: void <clinit>()>
CLINIT edge: $r3 = new io.vertx.core.eventbus.EventBusOptions in <io.vertx.core.VertxOptions: void <init>()> ==> <io.vertx.core.net.TCPSSLOptions: void <clinit>()>
CLINIT edge: $r3 = new io.vertx.core.eventbus.EventBusOptions in <io.vertx.core.VertxOptions: void <init>()> ==> <io.vertx.core.eventbus.EventBusOptions: void <clinit>()>
CLINIT edge: $r2 = new io.vertx.core.file.FileSystemOptions in <io.vertx.core.VertxOptions: void <init>()> ==> <io.vertx.core.file.FileSystemOptions: void <clinit>()>
CLINIT edge: i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r5) in <io.vertx.core.impl.Args: int getInt(java.lang.String)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r5) in <io.vertx.core.impl.Args: int getInt(java.lang.String)> ==> <java.lang.Integer: int parseInt(java.lang.String)>
STATIC edge: staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r0, "ha group cannot be null") in <io.vertx.core.VertxOptions: io.vertx.core.VertxOptions setHAGroup(java.lang.String)> ==> <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>
CLINIT edge: <io.vertx.core.dns.AddressResolverOptions: java.util.List DEFAULT_SERVERS> = null in <io.vertx.core.dns.AddressResolverOptions: void <clinit>()> ==> <io.vertx.core.dns.AddressResolverOptions: void <clinit>()>
CLINIT edge: $i0 = <io.vertx.core.impl.AddressResolver: int DEFAULT_NDOTS_RESOLV_OPTION> in <io.vertx.core.dns.AddressResolverOptions: void <clinit>()> ==> <io.vertx.core.impl.AddressResolver: void <clinit>()>
CLINIT edge: $r0 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS> in <io.vertx.core.net.TCPSSLOptions: void <clinit>()> ==> <java.util.concurrent.TimeUnit: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r2) in <io.vertx.core.net.TCPSSLOptions: void <clinit>()> ==> <java.util.Collections: java.util.List unmodifiableList(java.util.List)>
STATIC edge: $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1) in <io.vertx.core.net.TCPSSLOptions: void <clinit>()> ==> <java.util.Arrays: java.util.List asList(java.lang.Object[])>
CLINIT edge: $r3 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r2) in <io.vertx.core.net.TCPSSLOptions: void <clinit>()> ==> <java.util.Collections: void <clinit>()>
CLINIT edge: $r1 = newarray (java.lang.String)[3] in <io.vertx.core.net.TCPSSLOptions: void <clinit>()> ==> <java.lang.String: void <clinit>()>
CLINIT edge: <io.vertx.core.net.TCPSSLOptions: java.util.concurrent.TimeUnit DEFAULT_IDLE_TIMEOUT_TIME_UNIT> = $r0 in <io.vertx.core.net.TCPSSLOptions: void <clinit>()> ==> <io.vertx.core.net.TCPSSLOptions: void <clinit>()>
CLINIT edge: $r0 = <io.vertx.core.http.ClientAuth: io.vertx.core.http.ClientAuth NONE> in <io.vertx.core.eventbus.EventBusOptions: void <clinit>()> ==> <io.vertx.core.http.ClientAuth: void <clinit>()>
CLINIT edge: <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.http.ClientAuth DEFAULT_CLIENT_AUTH> = $r0 in <io.vertx.core.eventbus.EventBusOptions: void <clinit>()> ==> <io.vertx.core.net.TCPSSLOptions: void <clinit>()>
CLINIT edge: <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.http.ClientAuth DEFAULT_CLIENT_AUTH> = $r0 in <io.vertx.core.eventbus.EventBusOptions: void <clinit>()> ==> <io.vertx.core.eventbus.EventBusOptions: void <clinit>()>
CLINIT edge: $z0 = staticinvoke <java.lang.Boolean: boolean getBoolean(java.lang.String)>("vertx.disableFileCaching") in <io.vertx.core.file.FileSystemOptions: void <clinit>()> ==> <java.lang.Boolean: void <clinit>()>
STATIC edge: $z1 = staticinvoke <java.lang.Boolean: boolean getBoolean(java.lang.String)>("vertx.disableFileCPResolving") in <io.vertx.core.file.FileSystemOptions: void <clinit>()> ==> <java.lang.Boolean: boolean getBoolean(java.lang.String)>
STATIC edge: $z0 = staticinvoke <java.lang.Boolean: boolean getBoolean(java.lang.String)>("vertx.disableFileCaching") in <io.vertx.core.file.FileSystemOptions: void <clinit>()> ==> <java.lang.Boolean: boolean getBoolean(java.lang.String)>
CLINIT edge: <io.vertx.core.file.FileSystemOptions: boolean DEFAULT_FILE_CACHING_ENABLED> = $z2 in <io.vertx.core.file.FileSystemOptions: void <clinit>()> ==> <io.vertx.core.file.FileSystemOptions: void <clinit>()>
CLINIT edge: $r0 = staticinvoke <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/impl/AddressResolver;") in <io.vertx.core.impl.AddressResolver: void <clinit>()> ==> <io.vertx.core.logging.LoggerFactory: void <clinit>()>
STATIC edge: z3 = staticinvoke <io.vertx.core.impl.AddressResolver: boolean parseRotateOptionFromResolvConf(java.lang.String)>($r5) in <io.vertx.core.impl.AddressResolver: void <clinit>()> ==> <io.vertx.core.impl.AddressResolver: boolean parseRotateOptionFromResolvConf(java.lang.String)>
STATIC edge: i0 = staticinvoke <io.vertx.core.impl.AddressResolver: int parseNdotsOptionFromResolvConf(java.lang.String)>($r5) in <io.vertx.core.impl.AddressResolver: void <clinit>()> ==> <io.vertx.core.impl.AddressResolver: int parseNdotsOptionFromResolvConf(java.lang.String)>
STATIC edge: $r7 = staticinvoke <java.nio.file.Files: byte[] readAllBytes(java.nio.file.Path)>($r6) in <io.vertx.core.impl.AddressResolver: void <clinit>()> ==> <java.nio.file.Files: byte[] readAllBytes(java.nio.file.Path)>
STATIC edge: $z0 = staticinvoke <io.vertx.core.impl.launcher.commands.ExecUtils: boolean isLinux()>() in <io.vertx.core.impl.AddressResolver: void <clinit>()> ==> <io.vertx.core.impl.launcher.commands.ExecUtils: boolean isLinux()>
STATIC edge: $r2 = staticinvoke <io.vertx.core.impl.AddressResolver: java.util.regex.Pattern resolvOption(java.lang.String)>("rotate") in <io.vertx.core.impl.AddressResolver: void <clinit>()> ==> <io.vertx.core.impl.AddressResolver: java.util.regex.Pattern resolvOption(java.lang.String)>
STATIC edge: $r1 = staticinvoke <io.vertx.core.impl.AddressResolver: java.util.regex.Pattern resolvOption(java.lang.String)>("ndots:[ \\t\\f]*(\\d)+") in <io.vertx.core.impl.AddressResolver: void <clinit>()> ==> <io.vertx.core.impl.AddressResolver: java.util.regex.Pattern resolvOption(java.lang.String)>
STATIC edge: $r0 = staticinvoke <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/impl/AddressResolver;") in <io.vertx.core.impl.AddressResolver: void <clinit>()> ==> <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>
CLINIT edge: $r9 = <io.vertx.core.impl.AddressResolver: io.vertx.core.logging.Logger log> in <io.vertx.core.impl.AddressResolver: void <clinit>()> ==> <io.vertx.core.impl.AddressResolver: void <clinit>()>
CLINIT edge: $r5 = new java.lang.String in <io.vertx.core.impl.AddressResolver: void <clinit>()> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r3 = new java.io.File in <io.vertx.core.impl.AddressResolver: void <clinit>()> ==> <java.io.File: void <clinit>()>
CLINIT edge: $z0 = staticinvoke <io.vertx.core.impl.launcher.commands.ExecUtils: boolean isLinux()>() in <io.vertx.core.impl.AddressResolver: void <clinit>()> ==> <io.vertx.core.impl.launcher.commands.ExecUtils: void <clinit>()>
CLINIT edge: <io.vertx.core.impl.AddressResolver: io.vertx.core.logging.Logger log> = $r0 in <io.vertx.core.impl.AddressResolver: void <clinit>()> ==> <io.vertx.core.impl.AddressResolver: void <clinit>()>
CLINIT edge: <java.lang.String: java.util.Comparator CASE_INSENSITIVE_ORDER> = null in <java.lang.String: void <clinit>()> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r0 = new io.vertx.core.http.ClientAuth in <io.vertx.core.http.ClientAuth: void <clinit>()> ==> <io.vertx.core.http.ClientAuth: void <clinit>()>
CLINIT edge: $r1 = <io.vertx.core.impl.AddressResolver: java.util.regex.Pattern ROTATE_OPTIONS_PATTERN> in <io.vertx.core.impl.AddressResolver: boolean parseRotateOptionFromResolvConf(java.lang.String)> ==> <io.vertx.core.impl.AddressResolver: void <clinit>()>
CLINIT edge: $r1 = <io.vertx.core.impl.AddressResolver: java.util.regex.Pattern NDOTS_OPTIONS_PATTERN> in <io.vertx.core.impl.AddressResolver: int parseNdotsOptionFromResolvConf(java.lang.String)> ==> <io.vertx.core.impl.AddressResolver: void <clinit>()>
STATIC edge: i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3) in <io.vertx.core.impl.AddressResolver: int parseNdotsOptionFromResolvConf(java.lang.String)> ==> <java.lang.Integer: int parseInt(java.lang.String)>
CLINIT edge: i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3) in <io.vertx.core.impl.AddressResolver: int parseNdotsOptionFromResolvConf(java.lang.String)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $r6 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>($r5, 8) in <io.vertx.core.impl.AddressResolver: java.util.regex.Pattern resolvOption(java.lang.String)> ==> <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>
VIRTUAL edge: r1 = virtualinvoke r0.<java.util.Properties: java.util.Enumeration propertyNames()>() in <io.vertx.core.Starter: void configureFromSystemProperties(java.lang.Object,java.lang.String)> ==> <java.util.Properties: java.util.Enumeration propertyNames()>
VIRTUAL edge: r4 = virtualinvoke r0.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r3) in <io.vertx.core.Starter: void configureFromSystemProperties(java.lang.Object,java.lang.String)> ==> <java.util.Properties: java.lang.String getProperty(java.lang.String)>
INTERFACE edge: $z6 = interfaceinvoke r1.<java.util.Enumeration: boolean hasMoreElements()>() in <io.vertx.core.Starter: void configureFromSystemProperties(java.lang.Object,java.lang.String)> ==> <java.util.StringTokenizer: boolean hasMoreElements()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Enumeration: java.lang.Object nextElement()>() in <io.vertx.core.Starter: void configureFromSystemProperties(java.lang.Object,java.lang.String)> ==> <java.util.StringTokenizer: java.lang.Object nextElement()>
VIRTUAL edge: $z0 = virtualinvoke r3.<java.lang.String: boolean startsWith(java.lang.String)>(r5) in <io.vertx.core.Starter: void configureFromSystemProperties(java.lang.Object,java.lang.String)> ==> <java.lang.String: boolean startsWith(java.lang.String)>
VIRTUAL edge: r6 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int)>($i0) in <io.vertx.core.Starter: void configureFromSystemProperties(java.lang.Object,java.lang.String)> ==> <java.lang.String: java.lang.String substring(int)>
VIRTUAL edge: $i0 = virtualinvoke r5.<java.lang.String: int length()>() in <io.vertx.core.Starter: void configureFromSystemProperties(java.lang.Object,java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: $r9 = virtualinvoke r8.<java.lang.Object: java.lang.Class getClass()>() in <io.vertx.core.Starter: void configureFromSystemProperties(java.lang.Object,java.lang.String)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r26 = virtualinvoke r8.<java.lang.Object: java.lang.Class getClass()>() in <io.vertx.core.Starter: void configureFromSystemProperties(java.lang.Object,java.lang.String)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r44 = virtualinvoke r8.<java.lang.Object: java.lang.Class getClass()>() in <io.vertx.core.Starter: void configureFromSystemProperties(java.lang.Object,java.lang.String)> ==> <java.lang.Object: java.lang.Class getClass()>
SPECIAL edge: r10 = specialinvoke r7.<io.vertx.core.Starter: java.lang.reflect.Method getSetter(java.lang.String,java.lang.Class)>(r6, $r9) in <io.vertx.core.Starter: void configureFromSystemProperties(java.lang.Object,java.lang.String)> ==> <io.vertx.core.Starter: java.lang.reflect.Method getSetter(java.lang.String,java.lang.Class)>
SPECIAL edge: specialinvoke $r23.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.Starter: void configureFromSystemProperties(java.lang.Object,java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No such property to configure on options: ") in <io.vertx.core.Starter: void configureFromSystemProperties(java.lang.Object,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r27 = virtualinvoke $r26.<java.lang.Class: java.lang.String getName()>() in <io.vertx.core.Starter: void configureFromSystemProperties(java.lang.Object,java.lang.String)> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: $r28 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27) in <io.vertx.core.Starter: void configureFromSystemProperties(java.lang.Object,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".") in <io.vertx.core.Starter: void configureFromSystemProperties(java.lang.Object,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6) in <io.vertx.core.Starter: void configureFromSystemProperties(java.lang.Object,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.Starter: void configureFromSystemProperties(java.lang.Object,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r24.<io.vertx.core.logging.Logger: void warn(java.lang.Object)>($r31) in <io.vertx.core.Starter: void configureFromSystemProperties(java.lang.Object,java.lang.String)> ==> <io.vertx.core.logging.Logger: void warn(java.lang.Object)>
VIRTUAL edge: $r11 = virtualinvoke r10.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>() in <io.vertx.core.Starter: void configureFromSystemProperties(java.lang.Object,java.lang.String)> ==> <java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>
VIRTUAL edge: virtualinvoke r10.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r8, $r21) in <io.vertx.core.Starter: void configureFromSystemProperties(java.lang.Object,java.lang.String)> ==> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>
VIRTUAL edge: $z1 = virtualinvoke r12.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/String;") in <io.vertx.core.Starter: void configureFromSystemProperties(java.lang.Object,java.lang.String)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke r12.<java.lang.Object: boolean equals(java.lang.Object)>($r13) in <io.vertx.core.Starter: void configureFromSystemProperties(java.lang.Object,java.lang.String)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $z3 = virtualinvoke r12.<java.lang.Object: boolean equals(java.lang.Object)>($r14) in <io.vertx.core.Starter: void configureFromSystemProperties(java.lang.Object,java.lang.String)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $z4 = virtualinvoke r12.<java.lang.Object: boolean equals(java.lang.Object)>($r15) in <io.vertx.core.Starter: void configureFromSystemProperties(java.lang.Object,java.lang.String)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $z5 = virtualinvoke r12.<java.lang.Class: boolean isEnum()>() in <io.vertx.core.Starter: void configureFromSystemProperties(java.lang.Object,java.lang.String)> ==> <java.lang.Class: boolean isEnum()>
SPECIAL edge: specialinvoke $r16.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.Starter: void configureFromSystemProperties(java.lang.Object,java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid type for setter: ") in <io.vertx.core.Starter: void configureFromSystemProperties(java.lang.Object,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r12) in <io.vertx.core.Starter: void configureFromSystemProperties(java.lang.Object,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.Starter: void configureFromSystemProperties(java.lang.Object,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r17.<io.vertx.core.logging.Logger: void warn(java.lang.Object)>($r20) in <io.vertx.core.Starter: void configureFromSystemProperties(java.lang.Object,java.lang.String)> ==> <io.vertx.core.logging.Logger: void warn(java.lang.Object)>
SPECIAL edge: specialinvoke $r39.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.Starter: void configureFromSystemProperties(java.lang.Object,java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r41 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid argtype:") in <io.vertx.core.Starter: void configureFromSystemProperties(java.lang.Object,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r12) in <io.vertx.core.Starter: void configureFromSystemProperties(java.lang.Object,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" on options: ") in <io.vertx.core.Starter: void configureFromSystemProperties(java.lang.Object,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r45 = virtualinvoke $r44.<java.lang.Class: java.lang.String getName()>() in <io.vertx.core.Starter: void configureFromSystemProperties(java.lang.Object,java.lang.String)> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: $r46 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r45) in <io.vertx.core.Starter: void configureFromSystemProperties(java.lang.Object,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".") in <io.vertx.core.Starter: void configureFromSystemProperties(java.lang.Object,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6) in <io.vertx.core.Starter: void configureFromSystemProperties(java.lang.Object,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.Starter: void configureFromSystemProperties(java.lang.Object,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r40.<io.vertx.core.logging.Logger: void warn(java.lang.Object)>($r49) in <io.vertx.core.Starter: void configureFromSystemProperties(java.lang.Object,java.lang.String)> ==> <io.vertx.core.logging.Logger: void warn(java.lang.Object)>
SPECIAL edge: specialinvoke $r34.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.Starter: void configureFromSystemProperties(java.lang.Object,java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to invoke setter: ") in <io.vertx.core.Starter: void configureFromSystemProperties(java.lang.Object,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r10) in <io.vertx.core.Starter: void configureFromSystemProperties(java.lang.Object,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.Starter: void configureFromSystemProperties(java.lang.Object,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r33.<io.vertx.core.VertxException: void <init>(java.lang.String,java.lang.Throwable)>($r37, $r32) in <io.vertx.core.Starter: void configureFromSystemProperties(java.lang.Object,java.lang.String)> ==> <io.vertx.core.VertxException: void <init>(java.lang.String,java.lang.Throwable)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.spi.logging.LogDelegate: void error(java.lang.Object)>(r1) in <io.vertx.core.logging.Logger: void error(java.lang.Object)> ==> <io.vertx.core.logging.Log4jLogDelegate: void error(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.spi.logging.LogDelegate: void error(java.lang.Object)>(r1) in <io.vertx.core.logging.Logger: void error(java.lang.Object)> ==> <io.vertx.core.logging.SLF4JLogDelegate: void error(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.spi.logging.LogDelegate: void error(java.lang.Object)>(r1) in <io.vertx.core.logging.Logger: void error(java.lang.Object)> ==> <io.vertx.core.logging.JULLogDelegate: void error(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.spi.logging.LogDelegate: void error(java.lang.Object)>(r1) in <io.vertx.core.logging.Logger: void error(java.lang.Object)> ==> <io.vertx.core.logging.Log4j2LogDelegate: void error(java.lang.Object)>
CLINIT edge: $r2 = <java.util.logging.Level: java.util.logging.Level SEVERE> in <io.vertx.core.logging.JULLogDelegate: void error(java.lang.Object)> ==> <java.util.logging.Level: void <clinit>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.json.JsonObject: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.json.JsonObject: void fromJson(java.lang.String)>(r1) in <io.vertx.core.json.JsonObject: void <init>(java.lang.String)> ==> <io.vertx.core.json.JsonObject: void fromJson(java.lang.String)>
CLINIT edge: $r2 = staticinvoke <io.vertx.core.json.Json: java.lang.Object decodeValue(java.lang.String,java.lang.Class)>(r1, class "Ljava/util/Map;") in <io.vertx.core.json.JsonObject: void fromJson(java.lang.String)> ==> <io.vertx.core.json.Json: void <clinit>()>
STATIC edge: $r2 = staticinvoke <io.vertx.core.json.Json: java.lang.Object decodeValue(java.lang.String,java.lang.Class)>(r1, class "Ljava/util/Map;") in <io.vertx.core.json.JsonObject: void fromJson(java.lang.String)> ==> <io.vertx.core.json.Json: java.lang.Object decodeValue(java.lang.String,java.lang.Class)>
CLINIT edge: $r2 = <io.vertx.core.json.Json: com.fasterxml.jackson.databind.ObjectMapper mapper> in <io.vertx.core.json.Json: java.lang.Object decodeValue(java.lang.String,java.lang.Class)> ==> <io.vertx.core.json.Json: void <clinit>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.DeploymentOptions: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke r0.<io.vertx.core.DeploymentOptions: boolean isHa()>() in <io.vertx.core.impl.VertxImpl: void deployVerticle(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)> ==> <io.vertx.core.DeploymentOptions: boolean isHa()>
VIRTUAL edge: $r4 = virtualinvoke r1.<io.vertx.core.impl.VertxImpl: io.vertx.core.impl.HAManager haManager()>() in <io.vertx.core.impl.VertxImpl: void deployVerticle(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.HAManager haManager()>
VIRTUAL edge: $r5 = virtualinvoke r1.<io.vertx.core.impl.VertxImpl: io.vertx.core.impl.HAManager haManager()>() in <io.vertx.core.impl.VertxImpl: void deployVerticle(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.HAManager haManager()>
VIRTUAL edge: $r6 = virtualinvoke r1.<io.vertx.core.impl.VertxImpl: io.vertx.core.impl.HAManager haManager()>() in <io.vertx.core.impl.VertxImpl: void deployVerticle(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.HAManager haManager()>
VIRTUAL edge: $z1 = virtualinvoke $r5.<io.vertx.core.impl.HAManager: boolean isEnabled()>() in <io.vertx.core.impl.VertxImpl: void deployVerticle(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)> ==> <io.vertx.core.impl.HAManager: boolean isEnabled()>
VIRTUAL edge: virtualinvoke $r6.<io.vertx.core.impl.HAManager: void deployVerticle(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)>(r2, r0, r3) in <io.vertx.core.impl.VertxImpl: void deployVerticle(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)> ==> <io.vertx.core.impl.HAManager: void deployVerticle(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)>
VIRTUAL edge: virtualinvoke $r7.<io.vertx.core.impl.DeploymentManager: void deployVerticle(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)>(r2, r0, r3) in <io.vertx.core.impl.VertxImpl: void deployVerticle(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)> ==> <io.vertx.core.impl.DeploymentManager: void deployVerticle(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)>
CLINIT edge: $r1 = <io.vertx.core.impl.HAManager: io.vertx.core.logging.Logger log> in <io.vertx.core.impl.HAManager: void deployVerticle(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)> ==> <io.vertx.core.impl.HAManager: void <clinit>()>
CLINIT edge: $r0 = staticinvoke <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/impl/HAManager;") in <io.vertx.core.impl.HAManager: void <clinit>()> ==> <io.vertx.core.logging.LoggerFactory: void <clinit>()>
STATIC edge: $r0 = staticinvoke <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/impl/HAManager;") in <io.vertx.core.impl.HAManager: void <clinit>()> ==> <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>
CLINIT edge: <io.vertx.core.impl.HAManager: io.vertx.core.logging.Logger log> = $r0 in <io.vertx.core.impl.HAManager: void <clinit>()> ==> <io.vertx.core.impl.HAManager: void <clinit>()>
VIRTUAL edge: $l2 = virtualinvoke $r3.<java.util.concurrent.TimeUnit: long toNanos(long)>(5L) in <io.vertx.core.VertxOptions: void <clinit>()> ==> <java.util.concurrent.TimeUnit: long toNanos(long)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<io.vertx.core.spi.VertxFactory: io.vertx.core.Vertx vertx(io.vertx.core.VertxOptions)>(r0) in <io.vertx.core.Vertx: io.vertx.core.Vertx vertx(io.vertx.core.VertxOptions)> ==> <io.vertx.core.impl.VertxFactoryImpl: io.vertx.core.Vertx vertx(io.vertx.core.VertxOptions)>
CLINIT edge: $r1 = staticinvoke <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.VertxImpl vertx(io.vertx.core.VertxOptions)>(r0) in <io.vertx.core.impl.VertxFactoryImpl: io.vertx.core.Vertx vertx(io.vertx.core.VertxOptions)> ==> <io.vertx.core.impl.VertxImpl: void <clinit>()>
STATIC edge: $r1 = staticinvoke <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.VertxImpl vertx(io.vertx.core.VertxOptions)>(r0) in <io.vertx.core.impl.VertxFactoryImpl: io.vertx.core.Vertx vertx(io.vertx.core.VertxOptions)> ==> <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.VertxImpl vertx(io.vertx.core.VertxOptions)>
CLINIT edge: $r0 = staticinvoke <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/impl/VertxImpl;") in <io.vertx.core.impl.VertxImpl: void <clinit>()> ==> <io.vertx.core.logging.LoggerFactory: void <clinit>()>
STATIC edge: staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>("io.netty.noJdkZlibDecoder", "false") in <io.vertx.core.impl.VertxImpl: void <clinit>()> ==> <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>
STATIC edge: staticinvoke <io.netty.util.ResourceLeakDetector: void setLevel(io.netty.util.ResourceLeakDetector$Level)>($r2) in <io.vertx.core.impl.VertxImpl: void <clinit>()> ==> <io.netty.util.ResourceLeakDetector: void setLevel(io.netty.util.ResourceLeakDetector$Level)>
STATIC edge: $r1 = staticinvoke <java.lang.Integer: java.lang.Integer getInteger(java.lang.String,int)>("vertx.nettyIORatio", 50) in <io.vertx.core.impl.VertxImpl: void <clinit>()> ==> <java.lang.Integer: java.lang.Integer getInteger(java.lang.String,int)>
STATIC edge: $r0 = staticinvoke <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/impl/VertxImpl;") in <io.vertx.core.impl.VertxImpl: void <clinit>()> ==> <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>
CLINIT edge: staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>("io.netty.noJdkZlibDecoder", "false") in <io.vertx.core.impl.VertxImpl: void <clinit>()> ==> <java.lang.System: void <clinit>()>
CLINIT edge: $r1 = staticinvoke <java.lang.Integer: java.lang.Integer getInteger(java.lang.String,int)>("vertx.nettyIORatio", 50) in <io.vertx.core.impl.VertxImpl: void <clinit>()> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: <io.vertx.core.impl.VertxImpl: io.vertx.core.logging.Logger log> = $r0 in <io.vertx.core.impl.VertxImpl: void <clinit>()> ==> <io.vertx.core.impl.VertxImpl: void <clinit>()>
CLINIT edge: $r0 = new io.vertx.core.impl.VertxImpl in <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.VertxImpl vertx(io.vertx.core.VertxOptions)> ==> <io.vertx.core.impl.VertxImpl: void <clinit>()>
STATIC edge: $r2 = staticinvoke <io.vertx.core.net.impl.transport.Transport: io.vertx.core.net.impl.transport.Transport transport(boolean)>($z0) in <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.VertxImpl vertx(io.vertx.core.VertxOptions)> ==> <io.vertx.core.net.impl.transport.Transport: io.vertx.core.net.impl.transport.Transport transport(boolean)>
CLINIT edge: $r2 = staticinvoke <io.vertx.core.net.impl.transport.Transport: io.vertx.core.net.impl.transport.Transport transport(boolean)>($z0) in <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.VertxImpl vertx(io.vertx.core.VertxOptions)> ==> <io.vertx.core.net.impl.transport.Transport: void <clinit>()>
CLINIT edge: r1 = staticinvoke <io.vertx.core.net.impl.transport.Transport: io.vertx.core.net.impl.transport.Transport nativeTransport()>() in <io.vertx.core.net.impl.transport.Transport: io.vertx.core.net.impl.transport.Transport transport(boolean)> ==> <io.vertx.core.net.impl.transport.Transport: void <clinit>()>
STATIC edge: r1 = staticinvoke <io.vertx.core.net.impl.transport.Transport: io.vertx.core.net.impl.transport.Transport nativeTransport()>() in <io.vertx.core.net.impl.transport.Transport: io.vertx.core.net.impl.transport.Transport transport(boolean)> ==> <io.vertx.core.net.impl.transport.Transport: io.vertx.core.net.impl.transport.Transport nativeTransport()>
CLINIT edge: $r0 = <io.vertx.core.net.impl.transport.Transport: io.vertx.core.net.impl.transport.Transport JDK> in <io.vertx.core.net.impl.transport.Transport: io.vertx.core.net.impl.transport.Transport transport(boolean)> ==> <io.vertx.core.net.impl.transport.Transport: void <clinit>()>
CLINIT edge: $r0 = new io.vertx.core.net.impl.transport.Transport in <io.vertx.core.net.impl.transport.Transport: void <clinit>()> ==> <io.vertx.core.net.impl.transport.Transport: void <clinit>()>
CLINIT edge: $r0 = new io.vertx.core.net.impl.transport.EpollTransport in <io.vertx.core.net.impl.transport.Transport: io.vertx.core.net.impl.transport.Transport nativeTransport()> ==> <io.vertx.core.net.impl.transport.EpollTransport: void <clinit>()>
CLINIT edge: $r0 = new io.vertx.core.net.impl.transport.EpollTransport in <io.vertx.core.net.impl.transport.Transport: io.vertx.core.net.impl.transport.Transport nativeTransport()> ==> <io.vertx.core.net.impl.transport.Transport: void <clinit>()>
CLINIT edge: <io.vertx.core.net.impl.transport.EpollTransport: int pendingFastOpenRequestsThreshold> = 256 in <io.vertx.core.net.impl.transport.EpollTransport: void <clinit>()> ==> <io.vertx.core.net.impl.transport.EpollTransport: void <clinit>()>
CLINIT edge: <io.vertx.core.net.impl.transport.EpollTransport: int pendingFastOpenRequestsThreshold> = 256 in <io.vertx.core.net.impl.transport.EpollTransport: void <clinit>()> ==> <io.vertx.core.net.impl.transport.Transport: void <clinit>()>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.spi.VertxFactory: void clusteredVertx(io.vertx.core.VertxOptions,io.vertx.core.Handler)>(r0, r1) in <io.vertx.core.Vertx: void clusteredVertx(io.vertx.core.VertxOptions,io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxFactoryImpl: void clusteredVertx(io.vertx.core.VertxOptions,io.vertx.core.Handler)>
CLINIT edge: staticinvoke <io.vertx.core.impl.VertxImpl: void clusteredVertx(io.vertx.core.VertxOptions,io.vertx.core.Handler)>(r0, r2) in <io.vertx.core.impl.VertxFactoryImpl: void clusteredVertx(io.vertx.core.VertxOptions,io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl: void <clinit>()>
STATIC edge: staticinvoke <io.vertx.core.impl.VertxImpl: void clusteredVertx(io.vertx.core.VertxOptions,io.vertx.core.Handler)>(r0, r2) in <io.vertx.core.impl.VertxFactoryImpl: void clusteredVertx(io.vertx.core.VertxOptions,io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl: void clusteredVertx(io.vertx.core.VertxOptions,io.vertx.core.Handler)>
CLINIT edge: $r0 = new io.vertx.core.impl.VertxImpl in <io.vertx.core.impl.VertxImpl: void clusteredVertx(io.vertx.core.VertxOptions,io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl: void <clinit>()>
STATIC edge: $r2 = staticinvoke <io.vertx.core.net.impl.transport.Transport: io.vertx.core.net.impl.transport.Transport transport(boolean)>($z0) in <io.vertx.core.impl.VertxImpl: void clusteredVertx(io.vertx.core.VertxOptions,io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.transport.Transport: io.vertx.core.net.impl.transport.Transport transport(boolean)>
CLINIT edge: $r2 = staticinvoke <io.vertx.core.net.impl.transport.Transport: io.vertx.core.net.impl.transport.Transport transport(boolean)>($z0) in <io.vertx.core.impl.VertxImpl: void clusteredVertx(io.vertx.core.VertxOptions,io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.transport.Transport: void <clinit>()>
SPECIAL edge: specialinvoke $r2.<io.vertx.core.Starter$lambda_startVertx_0__2: void <init>(java.util.concurrent.atomic.AtomicReference,java.util.concurrent.CountDownLatch)>($r0, $r1) in <io.vertx.core.Starter$lambda_startVertx_0__2: io.vertx.core.Handler bootstrap$(java.util.concurrent.atomic.AtomicReference,java.util.concurrent.CountDownLatch)> ==> <io.vertx.core.Starter$lambda_startVertx_0__2: void <init>(java.util.concurrent.atomic.AtomicReference,java.util.concurrent.CountDownLatch)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r2.<io.vertx.core.Starter$lambda_createLoggingHandler_2__3: void <init>(java.lang.String,io.vertx.core.Handler)>($r0, $r1) in <io.vertx.core.Starter$lambda_createLoggingHandler_2__3: io.vertx.core.Handler bootstrap$(java.lang.String,io.vertx.core.Handler)> ==> <io.vertx.core.Starter$lambda_createLoggingHandler_2__3: void <init>(java.lang.String,io.vertx.core.Handler)>
PRIVILEGED edge: $r2 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r1) in <io.vertx.core.impl.cpu.CpuCoreSensor: int availableProcessors()> ==> <io.vertx.core.impl.cpu.CpuCoreSensor$lambda_availableProcessors_0__4: java.lang.Object run()>
VIRTUAL edge: $i1 = virtualinvoke $r3.<java.lang.Integer: int intValue()>() in <io.vertx.core.impl.cpu.CpuCoreSensor: int availableProcessors()> ==> <java.lang.Integer: int intValue()>
CLINIT edge: $r1 = staticinvoke <io.vertx.core.impl.cpu.CpuCoreSensor: java.lang.Integer lambda$availableProcessors$0()>() in <io.vertx.core.impl.cpu.CpuCoreSensor$lambda_availableProcessors_0__4: java.lang.Object run()> ==> <io.vertx.core.impl.cpu.CpuCoreSensor: void <clinit>()>
STATIC edge: $r1 = staticinvoke <io.vertx.core.impl.cpu.CpuCoreSensor: java.lang.Integer lambda$availableProcessors$0()>() in <io.vertx.core.impl.cpu.CpuCoreSensor$lambda_availableProcessors_0__4: java.lang.Object run()> ==> <io.vertx.core.impl.cpu.CpuCoreSensor: java.lang.Integer lambda$availableProcessors$0()>
CLINIT edge: $i0 = staticinvoke <io.vertx.core.impl.cpu.CpuCoreSensor: int determineProcessors()>() in <io.vertx.core.impl.cpu.CpuCoreSensor: java.lang.Integer lambda$availableProcessors$0()> ==> <io.vertx.core.impl.cpu.CpuCoreSensor: void <clinit>()>
STATIC edge: $r0 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <io.vertx.core.impl.cpu.CpuCoreSensor: java.lang.Integer lambda$availableProcessors$0()> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $i0 = staticinvoke <io.vertx.core.impl.cpu.CpuCoreSensor: int determineProcessors()>() in <io.vertx.core.impl.cpu.CpuCoreSensor: java.lang.Integer lambda$availableProcessors$0()> ==> <io.vertx.core.impl.cpu.CpuCoreSensor: int determineProcessors()>
CLINIT edge: $r0 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <io.vertx.core.impl.cpu.CpuCoreSensor: java.lang.Integer lambda$availableProcessors$0()> ==> <java.lang.Integer: void <clinit>()>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.ServiceHelper: java.lang.Object loadFactory(java.lang.Class)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot find META-INF/services/") in <io.vertx.core.ServiceHelper: java.lang.Object loadFactory(java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>() in <io.vertx.core.ServiceHelper: java.lang.Object loadFactory(java.lang.Class)> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5) in <io.vertx.core.ServiceHelper: java.lang.Object loadFactory(java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" on classpath") in <io.vertx.core.ServiceHelper: java.lang.Object loadFactory(java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.ServiceHelper: java.lang.Object loadFactory(java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r8) in <io.vertx.core.ServiceHelper: java.lang.Object loadFactory(java.lang.Class)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
VIRTUAL edge: i0 = virtualinvoke $r0.<java.lang.Runtime: int availableProcessors()>() in <io.vertx.core.impl.cpu.CpuCoreSensor: int determineProcessors()> ==> <java.lang.Runtime: int availableProcessors()>
SPECIAL edge: specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>("/proc/self/status") in <io.vertx.core.impl.cpu.CpuCoreSensor: int determineProcessors()> ==> <java.io.File: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.impl.cpu.CpuCoreSensor$lambda_availableProcessors_0__4: void <init>()>() in <io.vertx.core.impl.cpu.CpuCoreSensor$lambda_availableProcessors_0__4: java.security.PrivilegedAction bootstrap$()> ==> <io.vertx.core.impl.cpu.CpuCoreSensor$lambda_availableProcessors_0__4: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Collection: boolean isEmpty()>() in <io.vertx.core.ServiceHelper: java.lang.Object loadFactoryOrNull(java.lang.Class)> ==> <io.vertx.core.impl.ConcurrentHashSet: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Collection: boolean isEmpty()>() in <io.vertx.core.ServiceHelper: java.lang.Object loadFactoryOrNull(java.lang.Class)> ==> <java.util.TreeSet: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Collection: boolean isEmpty()>() in <io.vertx.core.ServiceHelper: java.lang.Object loadFactoryOrNull(java.lang.Class)> ==> <java.util.ArrayList: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Collection: boolean isEmpty()>() in <io.vertx.core.ServiceHelper: java.lang.Object loadFactoryOrNull(java.lang.Class)> ==> <java.util.HashSet: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Collection: boolean isEmpty()>() in <io.vertx.core.ServiceHelper: java.lang.Object loadFactoryOrNull(java.lang.Class)> ==> <java.util.AbstractCollection: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Collection: boolean isEmpty()>() in <io.vertx.core.ServiceHelper: java.lang.Object loadFactoryOrNull(java.lang.Class)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$1: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Collection: boolean isEmpty()>() in <io.vertx.core.ServiceHelper: java.lang.Object loadFactoryOrNull(java.lang.Class)> ==> <java.util.ArrayDeque: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Collection: boolean isEmpty()>() in <io.vertx.core.ServiceHelper: java.lang.Object loadFactoryOrNull(java.lang.Class)> ==> <java.util.concurrent.CopyOnWriteArrayList: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Collection: boolean isEmpty()>() in <io.vertx.core.ServiceHelper: java.lang.Object loadFactoryOrNull(java.lang.Class)> ==> <java.util.concurrent.ConcurrentLinkedQueue: boolean isEmpty()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.ServiceHelper: java.lang.Object loadFactoryOrNull(java.lang.Class)> ==> <io.vertx.core.impl.ConcurrentHashSet: java.util.Iterator iterator()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.ServiceHelper: java.lang.Object loadFactoryOrNull(java.lang.Class)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.ServiceHelper: java.lang.Object loadFactoryOrNull(java.lang.Class)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.ServiceHelper: java.lang.Object loadFactoryOrNull(java.lang.Class)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.ServiceHelper: java.lang.Object loadFactoryOrNull(java.lang.Class)> ==> <java.util.AbstractList: java.util.Iterator iterator()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.ServiceHelper: java.lang.Object loadFactoryOrNull(java.lang.Class)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2: java.util.Iterator iterator()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.ServiceHelper: java.lang.Object loadFactoryOrNull(java.lang.Class)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$1: java.util.Iterator iterator()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.ServiceHelper: java.lang.Object loadFactoryOrNull(java.lang.Class)> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.ServiceHelper: java.lang.Object loadFactoryOrNull(java.lang.Class)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.ServiceHelper: java.lang.Object loadFactoryOrNull(java.lang.Class)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.ServiceHelper: java.lang.Object loadFactoryOrNull(java.lang.Class)> ==> <java.util.concurrent.ConcurrentLinkedQueue: java.util.Iterator iterator()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.ServiceHelper: java.lang.Object loadFactoryOrNull(java.lang.Class)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object next()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.ServiceHelper: java.lang.Object loadFactoryOrNull(java.lang.Class)> ==> <io.vertx.core.json.JsonArray$Iter: java.lang.Object next()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.ServiceHelper: java.lang.Object loadFactoryOrNull(java.lang.Class)> ==> <io.vertx.core.json.JsonObject$Iter: java.lang.Object next()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.ServiceHelper: java.lang.Object loadFactoryOrNull(java.lang.Class)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: java.lang.Object next()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.ServiceHelper: java.lang.Object loadFactoryOrNull(java.lang.Class)> ==> <java.util.Scanner: java.lang.Object next()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.ServiceHelper: java.lang.Object loadFactoryOrNull(java.lang.Class)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: java.lang.Object next()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.ServiceHelper: java.lang.Object loadFactoryOrNull(java.lang.Class)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: java.lang.Object next()>
STATIC edge: $r2 = staticinvoke <io.vertx.core.net.impl.VertxEventLoopGroup: java.util.List access$000(io.vertx.core.net.impl.VertxEventLoopGroup)>($r1) in <io.vertx.core.net.impl.VertxEventLoopGroup$1: boolean isEmpty()> ==> <io.vertx.core.net.impl.VertxEventLoopGroup: java.util.List access$000(io.vertx.core.net.impl.VertxEventLoopGroup)>
STATIC edge: $r2 = staticinvoke <io.vertx.core.http.impl.Http2HeadersAdaptor: io.netty.handler.codec.http2.Http2Headers access$000(io.vertx.core.http.impl.Http2HeadersAdaptor)>($r1) in <io.vertx.core.http.impl.Http2HeadersAdaptor$2: java.util.Iterator iterator()> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor: io.netty.handler.codec.http2.Http2Headers access$000(io.vertx.core.http.impl.Http2HeadersAdaptor)>
STATIC edge: $r3 = staticinvoke <io.vertx.core.net.impl.VertxEventLoopGroup: java.util.List access$000(io.vertx.core.net.impl.VertxEventLoopGroup)>($r2) in <io.vertx.core.net.impl.VertxEventLoopGroup$1: java.util.Iterator iterator()> ==> <io.vertx.core.net.impl.VertxEventLoopGroup: java.util.List access$000(io.vertx.core.net.impl.VertxEventLoopGroup)>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.String: java.lang.String toLowerCase()>() in <io.vertx.core.impl.launcher.commands.ExecUtils: void <clinit>()> ==> <java.lang.String: java.lang.String toLowerCase()>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.io.File: boolean exists()>() in <io.vertx.core.impl.cpu.CpuCoreSensor: int readCPUMask(java.io.File)> ==> <java.io.File: boolean exists()>
SPECIAL edge: specialinvoke $r1.<java.io.FileInputStream: void <init>(java.io.File)>(r0) in <io.vertx.core.impl.cpu.CpuCoreSensor: int readCPUMask(java.io.File)> ==> <java.io.FileInputStream: void <init>(java.io.File)>
SPECIAL edge: specialinvoke $r3.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>($r1, $r4) in <io.vertx.core.impl.cpu.CpuCoreSensor: int readCPUMask(java.io.File)> ==> <java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>
SPECIAL edge: specialinvoke $r6.<java.io.BufferedReader: void <init>(java.io.Reader)>($r3) in <io.vertx.core.impl.cpu.CpuCoreSensor: int readCPUMask(java.io.File)> ==> <java.io.BufferedReader: void <init>(java.io.Reader)>
VIRTUAL edge: $r8 = virtualinvoke $r6.<java.io.BufferedReader: java.lang.String readLine()>() in <io.vertx.core.impl.cpu.CpuCoreSensor: int readCPUMask(java.io.File)> ==> <java.io.BufferedReader: java.lang.String readLine()>
VIRTUAL edge: virtualinvoke $r6.<java.io.BufferedReader: void close()>() in <io.vertx.core.impl.cpu.CpuCoreSensor: int readCPUMask(java.io.File)> ==> <java.io.BufferedReader: void close()>
VIRTUAL edge: virtualinvoke $r6.<java.io.BufferedReader: void close()>() in <io.vertx.core.impl.cpu.CpuCoreSensor: int readCPUMask(java.io.File)> ==> <java.io.BufferedReader: void close()>
VIRTUAL edge: virtualinvoke $r6.<java.io.BufferedReader: void close()>() in <io.vertx.core.impl.cpu.CpuCoreSensor: int readCPUMask(java.io.File)> ==> <java.io.BufferedReader: void close()>
VIRTUAL edge: virtualinvoke $r6.<java.io.BufferedReader: void close()>() in <io.vertx.core.impl.cpu.CpuCoreSensor: int readCPUMask(java.io.File)> ==> <java.io.BufferedReader: void close()>
VIRTUAL edge: $z1 = virtualinvoke $r8.<java.lang.String: boolean startsWith(java.lang.String)>("Cpus_allowed:") in <io.vertx.core.impl.cpu.CpuCoreSensor: int readCPUMask(java.io.File)> ==> <java.lang.String: boolean startsWith(java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r8.<java.lang.String: int length()>() in <io.vertx.core.impl.cpu.CpuCoreSensor: int readCPUMask(java.io.File)> ==> <java.lang.String: int length()>
VIRTUAL edge: c12 = virtualinvoke $r8.<java.lang.String: char charAt(int)>(i11) in <io.vertx.core.impl.cpu.CpuCoreSensor: int readCPUMask(java.io.File)> ==> <java.lang.String: char charAt(int)>
VIRTUAL edge: i0 = virtualinvoke $r9.<java.lang.String: int length()>() in <io.vertx.core.impl.cpu.CpuCoreSensor: int readCPUMask(java.io.File)> ==> <java.lang.String: int length()>
VIRTUAL edge: virtualinvoke $r17.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r13) in <io.vertx.core.impl.cpu.CpuCoreSensor: int readCPUMask(java.io.File)> ==> <java.lang.Throwable: void addSuppressed(java.lang.Throwable)>
VIRTUAL edge: $z0 = virtualinvoke $r0.<java.lang.String: boolean contains(java.lang.CharSequence)>("nux") in <io.vertx.core.impl.launcher.commands.ExecUtils: boolean isLinux()> ==> <java.lang.String: boolean contains(java.lang.CharSequence)>
SPECIAL edge: specialinvoke $r0.<java.util.ArrayList: void <init>()>() in <io.vertx.core.ServiceHelper: java.util.Collection loadFactories(java.lang.Class,java.lang.ClassLoader)> ==> <java.util.ArrayList: void <init>()>
VIRTUAL edge: virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>() in <io.vertx.core.ServiceHelper: java.util.Collection loadFactories(java.lang.Class,java.lang.ClassLoader)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>() in <io.vertx.core.ServiceHelper: java.util.Collection loadFactories(java.lang.Class,java.lang.ClassLoader)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r4 = virtualinvoke r15.<java.util.ServiceLoader: java.util.Iterator iterator()>() in <io.vertx.core.ServiceHelper: java.util.Collection loadFactories(java.lang.Class,java.lang.ClassLoader)> ==> <java.util.ServiceLoader: java.util.Iterator iterator()>
VIRTUAL edge: $r12 = virtualinvoke r15.<java.util.ServiceLoader: java.util.Iterator iterator()>() in <io.vertx.core.ServiceHelper: java.util.Collection loadFactories(java.lang.Class,java.lang.ClassLoader)> ==> <java.util.ServiceLoader: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.ServiceHelper: java.util.Collection loadFactories(java.lang.Class,java.lang.ClassLoader)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.ServiceHelper: java.util.Collection loadFactories(java.lang.Class,java.lang.ClassLoader)> ==> <io.vertx.core.json.JsonArray$Iter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.ServiceHelper: java.util.Collection loadFactories(java.lang.Class,java.lang.ClassLoader)> ==> <io.vertx.core.json.JsonObject$Iter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.ServiceHelper: java.util.Collection loadFactories(java.lang.Class,java.lang.ClassLoader)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.ServiceHelper: java.util.Collection loadFactories(java.lang.Class,java.lang.ClassLoader)> ==> <java.util.Scanner: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.ServiceHelper: java.util.Collection loadFactories(java.lang.Class,java.lang.ClassLoader)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.ServiceHelper: java.util.Collection loadFactories(java.lang.Class,java.lang.ClassLoader)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: boolean hasNext()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.ClassLoader getClassLoader()>() in <io.vertx.core.ServiceHelper: java.util.Collection loadFactories(java.lang.Class,java.lang.ClassLoader)> ==> <java.lang.Class: java.lang.ClassLoader getClassLoader()>
VIRTUAL edge: $r7 = virtualinvoke r16.<java.util.ServiceLoader: java.util.Iterator iterator()>() in <io.vertx.core.ServiceHelper: java.util.Collection loadFactories(java.lang.Class,java.lang.ClassLoader)> ==> <java.util.ServiceLoader: java.util.Iterator iterator()>
VIRTUAL edge: $r9 = virtualinvoke r16.<java.util.ServiceLoader: java.util.Iterator iterator()>() in <io.vertx.core.ServiceHelper: java.util.Collection loadFactories(java.lang.Class,java.lang.ClassLoader)> ==> <java.util.ServiceLoader: java.util.Iterator iterator()>
INTERFACE edge: $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.ServiceHelper: java.util.Collection loadFactories(java.lang.Class,java.lang.ClassLoader)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.ServiceHelper: java.util.Collection loadFactories(java.lang.Class,java.lang.ClassLoader)> ==> <io.vertx.core.json.JsonArray$Iter: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.ServiceHelper: java.util.Collection loadFactories(java.lang.Class,java.lang.ClassLoader)> ==> <io.vertx.core.json.JsonObject$Iter: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.ServiceHelper: java.util.Collection loadFactories(java.lang.Class,java.lang.ClassLoader)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.ServiceHelper: java.util.Collection loadFactories(java.lang.Class,java.lang.ClassLoader)> ==> <java.util.Scanner: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.ServiceHelper: java.util.Collection loadFactories(java.lang.Class,java.lang.ClassLoader)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.ServiceHelper: java.util.Collection loadFactories(java.lang.Class,java.lang.ClassLoader)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: boolean hasNext()>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.ServiceHelper$add__5: void <init>(java.util.List)>($r0) in <io.vertx.core.ServiceHelper$add__5: java.util.function.Consumer bootstrap$(java.util.List)> ==> <io.vertx.core.ServiceHelper$add__5: void <init>(java.util.List)>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.ServiceHelper$add__6: void <init>(java.util.List)>($r0) in <io.vertx.core.ServiceHelper$add__6: java.util.function.Consumer bootstrap$(java.util.List)> ==> <io.vertx.core.ServiceHelper$add__6: void <init>(java.util.List)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.logging.Log4jLogDelegate: void log(org.apache.log4j.Level,java.lang.Object)>($r2, r1) in <io.vertx.core.logging.Log4jLogDelegate: void info(java.lang.Object)> ==> <io.vertx.core.logging.Log4jLogDelegate: void log(org.apache.log4j.Level,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object)>(20, r1) in <io.vertx.core.logging.SLF4JLogDelegate: void info(java.lang.Object)> ==> <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object)>($r2, r1) in <io.vertx.core.logging.JULLogDelegate: void info(java.lang.Object)> ==> <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.logging.Log4j2LogDelegate: void log(org.apache.logging.log4j.Level,java.lang.Object)>($r2, r1) in <io.vertx.core.logging.Log4j2LogDelegate: void info(java.lang.Object)> ==> <io.vertx.core.logging.Log4j2LogDelegate: void log(org.apache.logging.log4j.Level,java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.Starter$lambda_runVerticle_1__1: void <init>(io.vertx.core.Starter)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $i0 = interfaceinvoke $r2.<java.util.List: int size()>() in <io.vertx.core.json.JsonArray: io.vertx.core.json.JsonArray copy()> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$1: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r2.<java.util.List: int size()>() in <io.vertx.core.json.JsonArray: io.vertx.core.json.JsonArray copy()> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r2.<java.util.List: int size()>() in <io.vertx.core.json.JsonArray: io.vertx.core.json.JsonArray copy()> ==> <java.util.concurrent.CopyOnWriteArrayList: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r2.<java.util.List: int size()>() in <io.vertx.core.json.JsonArray: io.vertx.core.json.JsonArray copy()> ==> <java.util.ArrayList: int size()>
SPECIAL edge: specialinvoke $r0.<java.util.ArrayList: void <init>(int)>($i0) in <io.vertx.core.json.JsonArray: io.vertx.core.json.JsonArray copy()> ==> <java.util.ArrayList: void <init>(int)>
INTERFACE edge: interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r8) in <io.vertx.core.json.JsonArray: io.vertx.core.json.JsonArray copy()> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.json.JsonArray: io.vertx.core.json.JsonArray copy()> ==> <java.util.AbstractList: java.util.Iterator iterator()>
INTERFACE edge: r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.json.JsonArray: io.vertx.core.json.JsonArray copy()> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.json.JsonArray: io.vertx.core.json.JsonArray copy()> ==> <java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
INTERFACE edge: r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.json.JsonArray: io.vertx.core.json.JsonArray copy()> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.json.JsonArray: io.vertx.core.json.JsonArray copy()> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.json.JsonArray: io.vertx.core.json.JsonArray copy()> ==> <io.vertx.core.json.JsonArray$Iter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.json.JsonArray: io.vertx.core.json.JsonArray copy()> ==> <io.vertx.core.json.JsonObject$Iter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.json.JsonArray: io.vertx.core.json.JsonArray copy()> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.json.JsonArray: io.vertx.core.json.JsonArray copy()> ==> <java.util.Scanner: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.json.JsonArray: io.vertx.core.json.JsonArray copy()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.json.JsonArray: io.vertx.core.json.JsonArray copy()> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: boolean hasNext()>
INTERFACE edge: r7 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.json.JsonArray: io.vertx.core.json.JsonArray copy()> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object next()>
INTERFACE edge: r7 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.json.JsonArray: io.vertx.core.json.JsonArray copy()> ==> <io.vertx.core.json.JsonArray$Iter: java.lang.Object next()>
INTERFACE edge: r7 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.json.JsonArray: io.vertx.core.json.JsonArray copy()> ==> <io.vertx.core.json.JsonObject$Iter: java.lang.Object next()>
INTERFACE edge: r7 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.json.JsonArray: io.vertx.core.json.JsonArray copy()> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: java.lang.Object next()>
INTERFACE edge: r7 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.json.JsonArray: io.vertx.core.json.JsonArray copy()> ==> <java.util.Scanner: java.lang.Object next()>
INTERFACE edge: r7 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.json.JsonArray: io.vertx.core.json.JsonArray copy()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: java.lang.Object next()>
INTERFACE edge: r7 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.json.JsonArray: io.vertx.core.json.JsonArray copy()> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: java.lang.Object next()>
SPECIAL edge: specialinvoke $r6.<io.vertx.core.json.JsonArray: void <init>(java.util.List)>($r0) in <io.vertx.core.json.JsonArray: io.vertx.core.json.JsonArray copy()> ==> <io.vertx.core.json.JsonArray: void <init>(java.util.List)>
SPECIAL edge: specialinvoke $r29.<com.fasterxml.jackson.databind.ObjectMapper: void <init>()>() in <io.vertx.core.json.Json: void <clinit>()> ==> <com.fasterxml.jackson.databind.ObjectMapper: void <init>()>
SPECIAL edge: specialinvoke $r30.<com.fasterxml.jackson.databind.ObjectMapper: void <init>()>() in <io.vertx.core.json.Json: void <clinit>()> ==> <com.fasterxml.jackson.databind.ObjectMapper: void <init>()>
SPECIAL edge: specialinvoke $r31.<com.fasterxml.jackson.databind.module.SimpleModule: void <init>()>() in <io.vertx.core.json.Json: void <clinit>()> ==> <com.fasterxml.jackson.databind.module.SimpleModule: void <init>()>
SPECIAL edge: specialinvoke $r32.<io.vertx.core.json.Json$JsonObjectSerializer: void <init>(io.vertx.core.json.Json$1)>(null) in <io.vertx.core.json.Json: void <clinit>()> ==> <io.vertx.core.json.Json$JsonObjectSerializer: void <init>(io.vertx.core.json.Json$1)>
SPECIAL edge: specialinvoke $r33.<io.vertx.core.json.Json$JsonArraySerializer: void <init>(io.vertx.core.json.Json$1)>(null) in <io.vertx.core.json.Json: void <clinit>()> ==> <io.vertx.core.json.Json$JsonArraySerializer: void <init>(io.vertx.core.json.Json$1)>
SPECIAL edge: specialinvoke $r34.<io.vertx.core.json.Json$InstantSerializer: void <init>(io.vertx.core.json.Json$1)>(null) in <io.vertx.core.json.Json: void <clinit>()> ==> <io.vertx.core.json.Json$InstantSerializer: void <init>(io.vertx.core.json.Json$1)>
SPECIAL edge: specialinvoke $r35.<io.vertx.core.json.Json$InstantDeserializer: void <init>(io.vertx.core.json.Json$1)>(null) in <io.vertx.core.json.Json: void <clinit>()> ==> <io.vertx.core.json.Json$InstantDeserializer: void <init>(io.vertx.core.json.Json$1)>
SPECIAL edge: specialinvoke $r36.<io.vertx.core.json.Json$ByteArraySerializer: void <init>(io.vertx.core.json.Json$1)>(null) in <io.vertx.core.json.Json: void <clinit>()> ==> <io.vertx.core.json.Json$ByteArraySerializer: void <init>(io.vertx.core.json.Json$1)>
SPECIAL edge: specialinvoke $r37.<io.vertx.core.json.Json$ByteArrayDeserializer: void <init>(io.vertx.core.json.Json$1)>(null) in <io.vertx.core.json.Json: void <clinit>()> ==> <io.vertx.core.json.Json$ByteArrayDeserializer: void <init>(io.vertx.core.json.Json$1)>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.lang.Object: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <io.vertx.core.impl.FutureImpl: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.lang.Throwable: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.lang.Integer: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.net.Proxy: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.lang.Thread: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.util.concurrent.CountDownLatch: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.nio.ByteOrder: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.util.AbstractMap: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.io.ByteArrayOutputStream: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.lang.reflect.Constructor: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.lang.Enum: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.security.Provider$Service: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <io.vertx.core.impl.verticle.CustomJavaFileObject: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.util.Scanner: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.util.EventObject: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.util.concurrent.atomic.AtomicInteger: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.lang.reflect.Method: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <io.vertx.core.http.StreamPriority: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.util.concurrent.atomic.AtomicBoolean: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.nio.charset.CodingErrorAction: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.lang.Boolean: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.lang.Package: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <io.vertx.core.http.impl.FileStreamChannel$Id: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.net.Inet6Address: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.lang.Class: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.security.KeyStore$PrivateKeyEntry: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <io.vertx.core.dns.impl.MxRecordImpl: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <io.vertx.core.eventbus.ReplyException: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.lang.Float: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <io.vertx.core.http.Http2Settings: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.nio.channels.FileChannel$MapMode: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.math.BigDecimal: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.lang.Character: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <io.vertx.core.json.JsonObject: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <io.vertx.core.http.impl.ws.WebSocketFrameImpl: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.util.AbstractCollection: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <io.vertx.core.buffer.impl.BufferImpl: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.util.jar.Attributes$Name: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.lang.String: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.util.Hashtable: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.io.StringWriter: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.security.Provider: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <io.vertx.core.http.CaseInsensitiveHeaders: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <io.vertx.core.VertxOptions: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.net.InetSocketAddress: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.util.regex.Pattern: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.lang.Character$Subset: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.util.concurrent.atomic.AtomicReference: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.security.CodeSigner: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <io.vertx.core.impl.FailedFuture: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.security.Timestamp: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.lang.ThreadGroup: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.net.ServerSocket: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.lang.Long: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.math.BigInteger: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.math.MathContext: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.net.NetworkInterface: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <io.vertx.core.http.impl.pool.Pool$Holder: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.lang.StackTraceElement: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.lang.reflect.Field: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.net.InetAddress: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.util.concurrent.atomic.AtomicLong: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.util.Date: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <io.vertx.core.eventbus.impl.clustered.ClusterNodeInfo: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.util.Locale: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.lang.Short: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.util.zip.ZipEntry: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.util.ServiceLoader: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.util.UUID: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <javax.security.auth.x500.X500Principal: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.util.logging.Level: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <io.vertx.core.http.impl.FileStreamChannel$StreamSocketAddress: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <io.vertx.core.impl.SucceededFuture: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.lang.Double: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <javax.net.ssl.SSLEngineResult: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <io.vertx.core.file.FileSystemOptions: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.io.File: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <io.vertx.core.json.JsonArray: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <io.vertx.core.net.impl.SocketAddressImpl: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.net.URL: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.net.URI: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.lang.Byte: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <io.vertx.core.net.impl.ServerID: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <io.vertx.core.metrics.MetricsOptions: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.net.Socket: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.nio.charset.CoderResult: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <io.vertx.core.dns.DnsResponseCode: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.io.FileDescriptor: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke r21.<java.lang.Object: java.lang.Class getClass()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: r21 = virtualinvoke $r20.<io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()>
VIRTUAL edge: r21 = virtualinvoke $r19.<io.vertx.core.json.JsonArray: io.vertx.core.json.JsonArray copy()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <io.vertx.core.json.JsonArray: io.vertx.core.json.JsonArray copy()>
SPECIAL edge: specialinvoke $r22.<io.vertx.core.json.JsonObject: void <init>(java.util.Map)>($r18) in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <io.vertx.core.json.JsonObject: void <init>(java.util.Map)>
VIRTUAL edge: r21 = virtualinvoke $r22.<io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()>
SPECIAL edge: specialinvoke $r23.<io.vertx.core.json.JsonObject: void <init>(java.util.Map)>($r16) in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <io.vertx.core.json.JsonObject: void <init>(java.util.Map)>
SPECIAL edge: specialinvoke $r24.<io.vertx.core.json.JsonArray: void <init>(java.util.List)>($r14) in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <io.vertx.core.json.JsonArray: void <init>(java.util.List)>
VIRTUAL edge: r21 = virtualinvoke $r24.<io.vertx.core.json.JsonArray: io.vertx.core.json.JsonArray copy()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <io.vertx.core.json.JsonArray: io.vertx.core.json.JsonArray copy()>
SPECIAL edge: specialinvoke $r25.<io.vertx.core.json.JsonArray: void <init>(java.util.List)>($r12) in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <io.vertx.core.json.JsonArray: void <init>(java.util.List)>
SPECIAL edge: specialinvoke $r26.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal type in JsonObject: ") in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3) in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r27.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5) in <io.vertx.core.json.Json: java.lang.Object checkAndCopy(java.lang.Object,boolean)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
INTERFACE edge: $i1 = interfaceinvoke $r13.<java.util.Map: int size()>() in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <java.util.HashMap: int size()>
INTERFACE edge: $i1 = interfaceinvoke $r13.<java.util.Map: int size()>() in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <java.util.IdentityHashMap: int size()>
INTERFACE edge: $i1 = interfaceinvoke $r13.<java.util.Map: int size()>() in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <java.util.Hashtable: int size()>
INTERFACE edge: $i1 = interfaceinvoke $r13.<java.util.Map: int size()>() in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <java.util.EnumMap: int size()>
INTERFACE edge: $i1 = interfaceinvoke $r13.<java.util.Map: int size()>() in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <java.util.concurrent.ConcurrentHashMap: int size()>
INTERFACE edge: $i1 = interfaceinvoke $r13.<java.util.Map: int size()>() in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <java.util.jar.Attributes: int size()>
INTERFACE edge: $i1 = interfaceinvoke $r13.<java.util.Map: int size()>() in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <java.util.TreeMap: int size()>
INTERFACE edge: $i1 = interfaceinvoke $r13.<java.util.Map: int size()>() in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: int size()>
INTERFACE edge: $i1 = interfaceinvoke $r13.<java.util.Map: int size()>() in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <java.util.WeakHashMap: int size()>
SPECIAL edge: specialinvoke $r17.<java.util.LinkedHashMap: void <init>(int)>($i1) in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <java.util.LinkedHashMap: void <init>(int)>
INTERFACE edge: $i0 = interfaceinvoke $r3.<java.util.Map: int size()>() in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <java.util.HashMap: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r3.<java.util.Map: int size()>() in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <java.util.IdentityHashMap: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r3.<java.util.Map: int size()>() in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <java.util.Hashtable: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r3.<java.util.Map: int size()>() in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <java.util.EnumMap: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r3.<java.util.Map: int size()>() in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <java.util.concurrent.ConcurrentHashMap: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r3.<java.util.Map: int size()>() in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <java.util.jar.Attributes: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r3.<java.util.Map: int size()>() in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <java.util.TreeMap: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r3.<java.util.Map: int size()>() in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r3.<java.util.Map: int size()>() in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <java.util.WeakHashMap: int size()>
SPECIAL edge: specialinvoke $r18.<java.util.HashMap: void <init>(int)>($i0) in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <java.util.HashMap: void <init>(int)>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Set entrySet()>() in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <java.util.HashMap: java.util.Set entrySet()>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Set entrySet()>() in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <java.util.IdentityHashMap: java.util.Set entrySet()>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Set entrySet()>() in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <java.util.Hashtable: java.util.Set entrySet()>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Set entrySet()>() in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <java.util.EnumMap: java.util.Set entrySet()>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Set entrySet()>() in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <java.util.concurrent.ConcurrentHashMap: java.util.Set entrySet()>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Set entrySet()>() in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <java.security.Provider: java.util.Set entrySet()>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Set entrySet()>() in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <java.util.jar.Attributes: java.util.Set entrySet()>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Set entrySet()>() in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <java.util.TreeMap: java.util.Set entrySet()>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Set entrySet()>() in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Set entrySet()>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Set entrySet()>() in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <java.util.WeakHashMap: java.util.Set entrySet()>
INTERFACE edge: r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>() in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>() in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2: java.util.Iterator iterator()>
INTERFACE edge: r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>() in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <io.vertx.core.impl.ConcurrentHashSet: java.util.Iterator iterator()>
INTERFACE edge: r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>() in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$1: java.util.Iterator iterator()>
INTERFACE edge: r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>() in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <io.vertx.core.json.JsonArray$Iter: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <io.vertx.core.json.JsonObject$Iter: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <java.util.Scanner: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: boolean hasNext()>
INTERFACE edge: $r8 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object next()>
INTERFACE edge: $r8 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <io.vertx.core.json.JsonArray$Iter: java.lang.Object next()>
INTERFACE edge: $r8 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <io.vertx.core.json.JsonObject$Iter: java.lang.Object next()>
INTERFACE edge: $r8 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: java.lang.Object next()>
INTERFACE edge: $r8 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <java.util.Scanner: java.lang.Object next()>
INTERFACE edge: $r8 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: java.lang.Object next()>
INTERFACE edge: $r8 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: java.lang.Object next()>
INTERFACE edge: r15 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: r15 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: r15 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: r15 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: r15 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: r15 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r10 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getKey()>
INTERFACE edge: $r10 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getKey()>
INTERFACE edge: $r10 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>
INTERFACE edge: $r10 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getKey()>
INTERFACE edge: $r10 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getKey()>
INTERFACE edge: $r10 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getKey()>
INTERFACE edge: interfaceinvoke $r20.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, r16) in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r20.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, r16) in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r20.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, r16) in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r20.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, r16) in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r20.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, r16) in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r20.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, r16) in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r20.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, r16) in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r20.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, r16) in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r20.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, r16) in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r20.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, r16) in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r19.<io.vertx.core.json.JsonObject: void <init>(java.util.Map)>($r21) in <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()> ==> <io.vertx.core.json.JsonObject: void <init>(java.util.Map)>
STATIC edge: $r3 = staticinvoke <io.vertx.core.shareddata.impl.Checker: java.lang.Object copyIfRequired(java.lang.Object)>($r2) in <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()> ==> <io.vertx.core.shareddata.impl.Checker: java.lang.Object copyIfRequired(java.lang.Object)>
STATIC edge: $r3 = staticinvoke <io.vertx.core.shareddata.impl.Checker: java.lang.Object copyIfRequired(java.lang.Object)>($r2) in <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getKey()> ==> <io.vertx.core.shareddata.impl.Checker: java.lang.Object copyIfRequired(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.buffer.impl.BufferImpl: void <init>(io.netty.buffer.ByteBuf)>($r3) in <io.vertx.core.buffer.impl.BufferImpl: io.vertx.core.buffer.Buffer copy()> ==> <io.vertx.core.buffer.impl.BufferImpl: void <init>(io.netty.buffer.ByteBuf)>
STATIC edge: $r2 = staticinvoke <io.netty.buffer.Unpooled: io.netty.buffer.ByteBuf unreleasableBuffer(io.netty.buffer.ByteBuf)>(r1) in <io.vertx.core.buffer.impl.BufferImpl: void <init>(io.netty.buffer.ByteBuf)> ==> <io.netty.buffer.Unpooled: io.netty.buffer.ByteBuf unreleasableBuffer(io.netty.buffer.ByteBuf)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Throwable: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.json.JsonArray$Iter: boolean hasNext()> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.json.JsonArray$Iter: boolean hasNext()> ==> <io.vertx.core.json.JsonArray$Iter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.json.JsonArray$Iter: boolean hasNext()> ==> <io.vertx.core.json.JsonObject$Iter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.json.JsonArray$Iter: boolean hasNext()> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.json.JsonArray$Iter: boolean hasNext()> ==> <java.util.Scanner: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.json.JsonArray$Iter: boolean hasNext()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.json.JsonArray$Iter: boolean hasNext()> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.json.JsonObject$Iter: boolean hasNext()> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.json.JsonObject$Iter: boolean hasNext()> ==> <io.vertx.core.json.JsonArray$Iter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.json.JsonObject$Iter: boolean hasNext()> ==> <io.vertx.core.json.JsonObject$Iter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.json.JsonObject$Iter: boolean hasNext()> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.json.JsonObject$Iter: boolean hasNext()> ==> <java.util.Scanner: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.json.JsonObject$Iter: boolean hasNext()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.json.JsonObject$Iter: boolean hasNext()> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: boolean hasNext()> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: boolean hasNext()> ==> <io.vertx.core.json.JsonArray$Iter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: boolean hasNext()> ==> <io.vertx.core.json.JsonObject$Iter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: boolean hasNext()> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: boolean hasNext()> ==> <java.util.Scanner: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: boolean hasNext()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: boolean hasNext()> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: boolean hasNext()> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: boolean hasNext()> ==> <io.vertx.core.json.JsonArray$Iter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: boolean hasNext()> ==> <io.vertx.core.json.JsonObject$Iter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: boolean hasNext()> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: boolean hasNext()> ==> <java.util.Scanner: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: boolean hasNext()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: boolean hasNext()> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: boolean hasNext()>
VIRTUAL edge: i1 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>() in <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object next()> ==> <java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>
INTERFACE edge: r6 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.json.JsonArray$Iter: java.lang.Object next()> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object next()>
INTERFACE edge: r6 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.json.JsonArray$Iter: java.lang.Object next()> ==> <io.vertx.core.json.JsonArray$Iter: java.lang.Object next()>
INTERFACE edge: r6 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.json.JsonArray$Iter: java.lang.Object next()> ==> <io.vertx.core.json.JsonObject$Iter: java.lang.Object next()>
INTERFACE edge: r6 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.json.JsonArray$Iter: java.lang.Object next()> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: java.lang.Object next()>
INTERFACE edge: r6 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.json.JsonArray$Iter: java.lang.Object next()> ==> <java.util.Scanner: java.lang.Object next()>
INTERFACE edge: r6 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.json.JsonArray$Iter: java.lang.Object next()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: java.lang.Object next()>
INTERFACE edge: r6 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.json.JsonArray$Iter: java.lang.Object next()> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: java.lang.Object next()>
SPECIAL edge: specialinvoke $r4.<io.vertx.core.json.JsonObject: void <init>(java.util.Map)>($r5) in <io.vertx.core.json.JsonArray$Iter: java.lang.Object next()> ==> <io.vertx.core.json.JsonObject: void <init>(java.util.Map)>
SPECIAL edge: specialinvoke $r2.<io.vertx.core.json.JsonArray: void <init>(java.util.List)>($r3) in <io.vertx.core.json.JsonArray$Iter: java.lang.Object next()> ==> <io.vertx.core.json.JsonArray: void <init>(java.util.List)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.json.JsonObject$Iter: java.util.Map$Entry next()>() in <io.vertx.core.json.JsonObject$Iter: java.lang.Object next()> ==> <io.vertx.core.json.JsonObject$Iter: java.util.Map$Entry next()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: io.netty.util.concurrent.EventExecutor next()>() in <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: java.lang.Object next()> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: io.netty.util.concurrent.EventExecutor next()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.impl.headers.VertxHttpHeaders$2: java.util.Map$Entry next()>() in <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: java.lang.Object next()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: java.util.Map$Entry next()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: java.lang.String next()>() in <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: java.lang.Object next()> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: java.lang.String next()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.metrics.MetricsOptions: void <init>()> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.Enumeration: boolean hasMoreElements()>() in <io.vertx.core.Starter: java.lang.String getDefaultAddress()> ==> <java.util.StringTokenizer: boolean hasMoreElements()>
INTERFACE edge: $r1 = interfaceinvoke r0.<java.util.Enumeration: java.lang.Object nextElement()>() in <io.vertx.core.Starter: java.lang.String getDefaultAddress()> ==> <java.util.StringTokenizer: java.lang.Object nextElement()>
VIRTUAL edge: r2 = virtualinvoke r9.<java.net.NetworkInterface: java.util.Enumeration getInetAddresses()>() in <io.vertx.core.Starter: java.lang.String getDefaultAddress()> ==> <java.net.NetworkInterface: java.util.Enumeration getInetAddresses()>
INTERFACE edge: $z1 = interfaceinvoke r2.<java.util.Enumeration: boolean hasMoreElements()>() in <io.vertx.core.Starter: java.lang.String getDefaultAddress()> ==> <java.util.StringTokenizer: boolean hasMoreElements()>
INTERFACE edge: $r3 = interfaceinvoke r2.<java.util.Enumeration: java.lang.Object nextElement()>() in <io.vertx.core.Starter: java.lang.String getDefaultAddress()> ==> <java.util.StringTokenizer: java.lang.Object nextElement()>
VIRTUAL edge: $z2 = virtualinvoke r4.<java.net.InetAddress: boolean isAnyLocalAddress()>() in <io.vertx.core.Starter: java.lang.String getDefaultAddress()> ==> <java.net.InetAddress: boolean isAnyLocalAddress()>
VIRTUAL edge: $z2 = virtualinvoke r4.<java.net.InetAddress: boolean isAnyLocalAddress()>() in <io.vertx.core.Starter: java.lang.String getDefaultAddress()> ==> <java.net.Inet6Address: boolean isAnyLocalAddress()>
VIRTUAL edge: $z2 = virtualinvoke r4.<java.net.InetAddress: boolean isAnyLocalAddress()>() in <io.vertx.core.Starter: java.lang.String getDefaultAddress()> ==> <java.net.Inet4Address: boolean isAnyLocalAddress()>
VIRTUAL edge: $z3 = virtualinvoke r4.<java.net.InetAddress: boolean isMulticastAddress()>() in <io.vertx.core.Starter: java.lang.String getDefaultAddress()> ==> <java.net.InetAddress: boolean isMulticastAddress()>
VIRTUAL edge: $z3 = virtualinvoke r4.<java.net.InetAddress: boolean isMulticastAddress()>() in <io.vertx.core.Starter: java.lang.String getDefaultAddress()> ==> <java.net.Inet6Address: boolean isMulticastAddress()>
VIRTUAL edge: $z3 = virtualinvoke r4.<java.net.InetAddress: boolean isMulticastAddress()>() in <io.vertx.core.Starter: java.lang.String getDefaultAddress()> ==> <java.net.Inet4Address: boolean isMulticastAddress()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.net.InetAddress: java.lang.String getHostAddress()>() in <io.vertx.core.Starter: java.lang.String getDefaultAddress()> ==> <java.net.InetAddress: java.lang.String getHostAddress()>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.Starter$1: void <init>(io.vertx.core.Starter)>(r2) in <io.vertx.core.Starter: void addShutdownHook()> ==> <io.vertx.core.Starter$1: void <init>(io.vertx.core.Starter)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.Runtime: void addShutdownHook(java.lang.Thread)>($r1) in <io.vertx.core.Starter: void addShutdownHook()> ==> <java.lang.Runtime: void addShutdownHook(java.lang.Thread)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.VertxOptions: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.metrics.MetricsOptions: void <init>()>() in <io.vertx.core.VertxOptions: void <init>()> ==> <io.vertx.core.metrics.MetricsOptions: void <init>()>
SPECIAL edge: specialinvoke $r2.<io.vertx.core.file.FileSystemOptions: void <init>()>() in <io.vertx.core.VertxOptions: void <init>()> ==> <io.vertx.core.file.FileSystemOptions: void <init>()>
SPECIAL edge: specialinvoke $r3.<io.vertx.core.eventbus.EventBusOptions: void <init>()>() in <io.vertx.core.VertxOptions: void <init>()> ==> <io.vertx.core.eventbus.EventBusOptions: void <init>()>
SPECIAL edge: specialinvoke $r4.<io.vertx.core.dns.AddressResolverOptions: void <init>()>() in <io.vertx.core.VertxOptions: void <init>()> ==> <io.vertx.core.dns.AddressResolverOptions: void <init>()>
CLINIT edge: $z0 = <io.vertx.core.file.FileSystemOptions: boolean DEFAULT_CLASS_PATH_RESOLVING_ENABLED> in <io.vertx.core.file.FileSystemOptions: void <init>()> ==> <io.vertx.core.file.FileSystemOptions: void <clinit>()>
CLINIT edge: $r1 = <io.vertx.core.VertxOptions: java.lang.String DEFAULT_CLUSTER_PUBLIC_HOST> in <io.vertx.core.eventbus.EventBusOptions: void <init>()> ==> <io.vertx.core.VertxOptions: void <clinit>()>
CLINIT edge: $r2 = <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.http.ClientAuth DEFAULT_CLIENT_AUTH> in <io.vertx.core.eventbus.EventBusOptions: void <init>()> ==> <io.vertx.core.net.TCPSSLOptions: void <clinit>()>
CLINIT edge: $r2 = <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.http.ClientAuth DEFAULT_CLIENT_AUTH> in <io.vertx.core.eventbus.EventBusOptions: void <init>()> ==> <io.vertx.core.eventbus.EventBusOptions: void <clinit>()>
CLINIT edge: $r1 = <io.vertx.core.dns.AddressResolverOptions: java.util.List DEFAULT_SERVERS> in <io.vertx.core.dns.AddressResolverOptions: void <init>()> ==> <io.vertx.core.dns.AddressResolverOptions: void <clinit>()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <io.vertx.core.impl.Args: int getInt(java.lang.String)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <io.vertx.core.impl.Args: int getInt(java.lang.String)> ==> <java.util.IdentityHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <io.vertx.core.impl.Args: int getInt(java.lang.String)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <io.vertx.core.impl.Args: int getInt(java.lang.String)> ==> <java.util.EnumMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <io.vertx.core.impl.Args: int getInt(java.lang.String)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <io.vertx.core.impl.Args: int getInt(java.lang.String)> ==> <java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <io.vertx.core.impl.Args: int getInt(java.lang.String)> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <io.vertx.core.impl.Args: int getInt(java.lang.String)> ==> <java.util.TreeMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <io.vertx.core.impl.Args: int getInt(java.lang.String)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <io.vertx.core.impl.Args: int getInt(java.lang.String)> ==> <java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.String: java.lang.String trim()>() in <io.vertx.core.impl.Args: int getInt(java.lang.String)> ==> <java.lang.String: java.lang.String trim()>
SPECIAL edge: specialinvoke $r9.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.impl.Args: int getInt(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid ") in <io.vertx.core.impl.Args: int getInt(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <io.vertx.core.impl.Args: int getInt(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ") in <io.vertx.core.impl.Args: int getInt(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) in <io.vertx.core.impl.Args: int getInt(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.impl.Args: int getInt(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14) in <io.vertx.core.impl.Args: int getInt(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setHost(java.lang.String)>(r1) in <io.vertx.core.VertxOptions: io.vertx.core.VertxOptions setClusterHost(java.lang.String)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setHost(java.lang.String)>
VIRTUAL edge: virtualinvoke $r1.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setPort(int)>(i0) in <io.vertx.core.VertxOptions: io.vertx.core.VertxOptions setClusterPort(int)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setPort(int)>
VIRTUAL edge: virtualinvoke $r1.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setClustered(boolean)>(z0) in <io.vertx.core.VertxOptions: io.vertx.core.VertxOptions setClustered(boolean)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setClustered(boolean)>
SPECIAL edge: specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("quorumSize should be >= 1") in <io.vertx.core.VertxOptions: io.vertx.core.VertxOptions setQuorumSize(int)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
INTERFACE edge: $z0 = interfaceinvoke $r1.<io.vertx.core.AsyncResult: boolean failed()>() in <io.vertx.core.AsyncResult$1: boolean failed()> ==> <io.vertx.core.impl.FutureImpl: boolean failed()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<io.vertx.core.AsyncResult: boolean failed()>() in <io.vertx.core.AsyncResult$1: boolean failed()> ==> <io.vertx.core.impl.FailedFuture: boolean failed()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<io.vertx.core.AsyncResult: boolean failed()>() in <io.vertx.core.AsyncResult$1: boolean failed()> ==> <io.vertx.core.AsyncResult$1: boolean failed()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<io.vertx.core.AsyncResult: boolean failed()>() in <io.vertx.core.AsyncResult$1: boolean failed()> ==> <io.vertx.core.AsyncResult$2: boolean failed()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<io.vertx.core.AsyncResult: boolean failed()>() in <io.vertx.core.AsyncResult$1: boolean failed()> ==> <io.vertx.core.impl.CompositeFutureImpl: boolean failed()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<io.vertx.core.AsyncResult: boolean failed()>() in <io.vertx.core.AsyncResult$1: boolean failed()> ==> <io.vertx.core.impl.SucceededFuture: boolean failed()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<io.vertx.core.AsyncResult: java.lang.Throwable cause()>() in <io.vertx.core.AsyncResult$1: java.lang.Throwable cause()> ==> <io.vertx.core.impl.FutureImpl: java.lang.Throwable cause()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<io.vertx.core.AsyncResult: java.lang.Throwable cause()>() in <io.vertx.core.AsyncResult$1: java.lang.Throwable cause()> ==> <io.vertx.core.impl.FailedFuture: java.lang.Throwable cause()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<io.vertx.core.AsyncResult: java.lang.Throwable cause()>() in <io.vertx.core.AsyncResult$1: java.lang.Throwable cause()> ==> <io.vertx.core.AsyncResult$1: java.lang.Throwable cause()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<io.vertx.core.AsyncResult: java.lang.Throwable cause()>() in <io.vertx.core.AsyncResult$1: java.lang.Throwable cause()> ==> <io.vertx.core.AsyncResult$2: java.lang.Throwable cause()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<io.vertx.core.AsyncResult: java.lang.Throwable cause()>() in <io.vertx.core.AsyncResult$1: java.lang.Throwable cause()> ==> <io.vertx.core.impl.CompositeFutureImpl: java.lang.Throwable cause()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<io.vertx.core.AsyncResult: java.lang.Throwable cause()>() in <io.vertx.core.AsyncResult$1: java.lang.Throwable cause()> ==> <io.vertx.core.impl.SucceededFuture: java.lang.Throwable cause()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void printStackTrace()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<io.vertx.core.AsyncResult$1: boolean succeeded()>() in <io.vertx.core.AsyncResult$1: java.lang.Object result()> ==> <io.vertx.core.AsyncResult$1: boolean succeeded()>
INTERFACE edge: $r3 = interfaceinvoke $r1.<io.vertx.core.AsyncResult: java.lang.Object result()>() in <io.vertx.core.AsyncResult$1: java.lang.Object result()> ==> <io.vertx.core.impl.FutureImpl: java.lang.Object result()>
INTERFACE edge: $r3 = interfaceinvoke $r1.<io.vertx.core.AsyncResult: java.lang.Object result()>() in <io.vertx.core.AsyncResult$1: java.lang.Object result()> ==> <io.vertx.core.impl.FailedFuture: java.lang.Object result()>
INTERFACE edge: $r3 = interfaceinvoke $r1.<io.vertx.core.AsyncResult: java.lang.Object result()>() in <io.vertx.core.AsyncResult$1: java.lang.Object result()> ==> <io.vertx.core.AsyncResult$1: java.lang.Object result()>
INTERFACE edge: $r3 = interfaceinvoke $r1.<io.vertx.core.AsyncResult: java.lang.Object result()>() in <io.vertx.core.AsyncResult$1: java.lang.Object result()> ==> <io.vertx.core.AsyncResult$2: java.lang.Object result()>
INTERFACE edge: $r3 = interfaceinvoke $r1.<io.vertx.core.AsyncResult: java.lang.Object result()>() in <io.vertx.core.AsyncResult$1: java.lang.Object result()> ==> <io.vertx.core.impl.CompositeFutureImpl: java.lang.Object result()>
INTERFACE edge: $r3 = interfaceinvoke $r1.<io.vertx.core.AsyncResult: java.lang.Object result()>() in <io.vertx.core.AsyncResult$1: java.lang.Object result()> ==> <io.vertx.core.impl.SucceededFuture: java.lang.Object result()>
INTERFACE edge: $r4 = interfaceinvoke $r2.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>($r3) in <io.vertx.core.AsyncResult$1: java.lang.Object result()> ==> <java.util.function.Function: java.lang.Object apply(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r1.<io.vertx.core.AsyncResult: boolean succeeded()>() in <io.vertx.core.AsyncResult$2: java.lang.Object result()> ==> <io.vertx.core.impl.FutureImpl: boolean succeeded()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<io.vertx.core.AsyncResult: boolean succeeded()>() in <io.vertx.core.AsyncResult$2: java.lang.Object result()> ==> <io.vertx.core.impl.FailedFuture: boolean succeeded()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<io.vertx.core.AsyncResult: boolean succeeded()>() in <io.vertx.core.AsyncResult$2: java.lang.Object result()> ==> <io.vertx.core.AsyncResult$1: boolean succeeded()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<io.vertx.core.AsyncResult: boolean succeeded()>() in <io.vertx.core.AsyncResult$2: java.lang.Object result()> ==> <io.vertx.core.AsyncResult$2: boolean succeeded()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<io.vertx.core.AsyncResult: boolean succeeded()>() in <io.vertx.core.AsyncResult$2: java.lang.Object result()> ==> <io.vertx.core.impl.CompositeFutureImpl: boolean succeeded()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<io.vertx.core.AsyncResult: boolean succeeded()>() in <io.vertx.core.AsyncResult$2: java.lang.Object result()> ==> <io.vertx.core.impl.SucceededFuture: boolean succeeded()>
INTERFACE edge: $r8 = interfaceinvoke $r7.<io.vertx.core.AsyncResult: java.lang.Object result()>() in <io.vertx.core.AsyncResult$2: java.lang.Object result()> ==> <io.vertx.core.impl.FutureImpl: java.lang.Object result()>
INTERFACE edge: $r8 = interfaceinvoke $r7.<io.vertx.core.AsyncResult: java.lang.Object result()>() in <io.vertx.core.AsyncResult$2: java.lang.Object result()> ==> <io.vertx.core.impl.FailedFuture: java.lang.Object result()>
INTERFACE edge: $r8 = interfaceinvoke $r7.<io.vertx.core.AsyncResult: java.lang.Object result()>() in <io.vertx.core.AsyncResult$2: java.lang.Object result()> ==> <io.vertx.core.AsyncResult$1: java.lang.Object result()>
INTERFACE edge: $r8 = interfaceinvoke $r7.<io.vertx.core.AsyncResult: java.lang.Object result()>() in <io.vertx.core.AsyncResult$2: java.lang.Object result()> ==> <io.vertx.core.AsyncResult$2: java.lang.Object result()>
INTERFACE edge: $r8 = interfaceinvoke $r7.<io.vertx.core.AsyncResult: java.lang.Object result()>() in <io.vertx.core.AsyncResult$2: java.lang.Object result()> ==> <io.vertx.core.impl.CompositeFutureImpl: java.lang.Object result()>
INTERFACE edge: $r8 = interfaceinvoke $r7.<io.vertx.core.AsyncResult: java.lang.Object result()>() in <io.vertx.core.AsyncResult$2: java.lang.Object result()> ==> <io.vertx.core.impl.SucceededFuture: java.lang.Object result()>
INTERFACE edge: $z1 = interfaceinvoke $r2.<io.vertx.core.AsyncResult: boolean failed()>() in <io.vertx.core.AsyncResult$2: java.lang.Object result()> ==> <io.vertx.core.impl.FutureImpl: boolean failed()>
INTERFACE edge: $z1 = interfaceinvoke $r2.<io.vertx.core.AsyncResult: boolean failed()>() in <io.vertx.core.AsyncResult$2: java.lang.Object result()> ==> <io.vertx.core.impl.FailedFuture: boolean failed()>
INTERFACE edge: $z1 = interfaceinvoke $r2.<io.vertx.core.AsyncResult: boolean failed()>() in <io.vertx.core.AsyncResult$2: java.lang.Object result()> ==> <io.vertx.core.AsyncResult$1: boolean failed()>
INTERFACE edge: $z1 = interfaceinvoke $r2.<io.vertx.core.AsyncResult: boolean failed()>() in <io.vertx.core.AsyncResult$2: java.lang.Object result()> ==> <io.vertx.core.AsyncResult$2: boolean failed()>
INTERFACE edge: $z1 = interfaceinvoke $r2.<io.vertx.core.AsyncResult: boolean failed()>() in <io.vertx.core.AsyncResult$2: java.lang.Object result()> ==> <io.vertx.core.impl.CompositeFutureImpl: boolean failed()>
INTERFACE edge: $z1 = interfaceinvoke $r2.<io.vertx.core.AsyncResult: boolean failed()>() in <io.vertx.core.AsyncResult$2: java.lang.Object result()> ==> <io.vertx.core.impl.SucceededFuture: boolean failed()>
INTERFACE edge: $r5 = interfaceinvoke $r3.<io.vertx.core.AsyncResult: java.lang.Throwable cause()>() in <io.vertx.core.AsyncResult$2: java.lang.Object result()> ==> <io.vertx.core.impl.FutureImpl: java.lang.Throwable cause()>
INTERFACE edge: $r5 = interfaceinvoke $r3.<io.vertx.core.AsyncResult: java.lang.Throwable cause()>() in <io.vertx.core.AsyncResult$2: java.lang.Object result()> ==> <io.vertx.core.impl.FailedFuture: java.lang.Throwable cause()>
INTERFACE edge: $r5 = interfaceinvoke $r3.<io.vertx.core.AsyncResult: java.lang.Throwable cause()>() in <io.vertx.core.AsyncResult$2: java.lang.Object result()> ==> <io.vertx.core.AsyncResult$1: java.lang.Throwable cause()>
INTERFACE edge: $r5 = interfaceinvoke $r3.<io.vertx.core.AsyncResult: java.lang.Throwable cause()>() in <io.vertx.core.AsyncResult$2: java.lang.Object result()> ==> <io.vertx.core.AsyncResult$2: java.lang.Throwable cause()>
INTERFACE edge: $r5 = interfaceinvoke $r3.<io.vertx.core.AsyncResult: java.lang.Throwable cause()>() in <io.vertx.core.AsyncResult$2: java.lang.Object result()> ==> <io.vertx.core.impl.CompositeFutureImpl: java.lang.Throwable cause()>
INTERFACE edge: $r5 = interfaceinvoke $r3.<io.vertx.core.AsyncResult: java.lang.Throwable cause()>() in <io.vertx.core.AsyncResult$2: java.lang.Object result()> ==> <io.vertx.core.impl.SucceededFuture: java.lang.Throwable cause()>
INTERFACE edge: $r6 = interfaceinvoke $r4.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>($r5) in <io.vertx.core.AsyncResult$2: java.lang.Object result()> ==> <java.util.function.Function: java.lang.Object apply(java.lang.Object)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.impl.CompositeFutureImpl: io.vertx.core.CompositeFuture result()>() in <io.vertx.core.impl.CompositeFutureImpl: java.lang.Object result()> ==> <io.vertx.core.impl.CompositeFutureImpl: io.vertx.core.CompositeFuture result()>
SPECIAL edge: specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>("/etc/resolv.conf") in <io.vertx.core.impl.AddressResolver: void <clinit>()> ==> <java.io.File: void <init>(java.lang.String)>
VIRTUAL edge: $z1 = virtualinvoke $r3.<java.io.File: boolean exists()>() in <io.vertx.core.impl.AddressResolver: void <clinit>()> ==> <java.io.File: boolean exists()>
VIRTUAL edge: $z2 = virtualinvoke $r3.<java.io.File: boolean isFile()>() in <io.vertx.core.impl.AddressResolver: void <clinit>()> ==> <java.io.File: boolean isFile()>
VIRTUAL edge: $r6 = virtualinvoke $r3.<java.io.File: java.nio.file.Path toPath()>() in <io.vertx.core.impl.AddressResolver: void <clinit>()> ==> <java.io.File: java.nio.file.Path toPath()>
SPECIAL edge: specialinvoke $r5.<java.lang.String: void <init>(byte[])>($r7) in <io.vertx.core.impl.AddressResolver: void <clinit>()> ==> <java.lang.String: void <init>(byte[])>
VIRTUAL edge: virtualinvoke $r9.<io.vertx.core.logging.Logger: void debug(java.lang.Object,java.lang.Throwable)>("Failed to load options from /etc/resolv/.conf", $r8) in <io.vertx.core.impl.AddressResolver: void <clinit>()> ==> <io.vertx.core.logging.Logger: void debug(java.lang.Object,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.http.ClientAuth: void <init>(java.lang.String,int)>("NONE", 0) in <io.vertx.core.http.ClientAuth: void <clinit>()> ==> <io.vertx.core.http.ClientAuth: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.http.ClientAuth: void <init>(java.lang.String,int)>("REQUEST", 1) in <io.vertx.core.http.ClientAuth: void <clinit>()> ==> <io.vertx.core.http.ClientAuth: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r2.<io.vertx.core.http.ClientAuth: void <init>(java.lang.String,int)>("REQUIRED", 2) in <io.vertx.core.http.ClientAuth: void <clinit>()> ==> <io.vertx.core.http.ClientAuth: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: boolean getBoolean(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: r2 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0) in <io.vertx.core.impl.AddressResolver: boolean parseRotateOptionFromResolvConf(java.lang.String)> ==> <java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>
VIRTUAL edge: $z0 = virtualinvoke r2.<java.util.regex.Matcher: boolean find()>() in <io.vertx.core.impl.AddressResolver: boolean parseRotateOptionFromResolvConf(java.lang.String)> ==> <java.util.regex.Matcher: boolean find()>
VIRTUAL edge: r2 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0) in <io.vertx.core.impl.AddressResolver: int parseNdotsOptionFromResolvConf(java.lang.String)> ==> <java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>
VIRTUAL edge: $z0 = virtualinvoke r2.<java.util.regex.Matcher: boolean find()>() in <io.vertx.core.impl.AddressResolver: int parseNdotsOptionFromResolvConf(java.lang.String)> ==> <java.util.regex.Matcher: boolean find()>
VIRTUAL edge: $r3 = virtualinvoke r2.<java.util.regex.Matcher: java.lang.String group(int)>(1) in <io.vertx.core.impl.AddressResolver: int parseNdotsOptionFromResolvConf(java.lang.String)> ==> <java.util.regex.Matcher: java.lang.String group(int)>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.impl.AddressResolver: java.util.regex.Pattern resolvOption(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("^[ \\t\\f]*options[^\n]+") in <io.vertx.core.impl.AddressResolver: java.util.regex.Pattern resolvOption(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) in <io.vertx.core.impl.AddressResolver: java.util.regex.Pattern resolvOption(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(?=$|\\s)") in <io.vertx.core.impl.AddressResolver: java.util.regex.Pattern resolvOption(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.impl.AddressResolver: java.util.regex.Pattern resolvOption(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String substring(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: r1 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>() in <io.vertx.core.Starter: java.lang.reflect.Method getSetter(java.lang.String,java.lang.Class)> ==> <java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>
SPECIAL edge: specialinvoke $r4.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.Starter: java.lang.reflect.Method getSetter(java.lang.String,java.lang.Class)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("set") in <io.vertx.core.Starter: java.lang.reflect.Method getSetter(java.lang.String,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6) in <io.vertx.core.Starter: java.lang.reflect.Method getSetter(java.lang.String,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.Starter: java.lang.reflect.Method getSetter(java.lang.String,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.String: java.lang.String toLowerCase()>() in <io.vertx.core.Starter: java.lang.reflect.Method getSetter(java.lang.String,java.lang.Class)> ==> <java.lang.String: java.lang.String toLowerCase()>
VIRTUAL edge: $r10 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.String getName()>() in <io.vertx.core.Starter: java.lang.reflect.Method getSetter(java.lang.String,java.lang.Class)> ==> <java.lang.reflect.Method: java.lang.String getName()>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.String: java.lang.String toLowerCase()>() in <io.vertx.core.Starter: java.lang.reflect.Method getSetter(java.lang.String,java.lang.Class)> ==> <java.lang.String: java.lang.String toLowerCase()>
VIRTUAL edge: $z0 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r11) in <io.vertx.core.Starter: java.lang.reflect.Method getSetter(java.lang.String,java.lang.Class)> ==> <java.lang.String: boolean equals(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.spi.logging.LogDelegate: void warn(java.lang.Object)>(r1) in <io.vertx.core.logging.Logger: void warn(java.lang.Object)> ==> <io.vertx.core.logging.Log4jLogDelegate: void warn(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.spi.logging.LogDelegate: void warn(java.lang.Object)>(r1) in <io.vertx.core.logging.Logger: void warn(java.lang.Object)> ==> <io.vertx.core.logging.SLF4JLogDelegate: void warn(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.spi.logging.LogDelegate: void warn(java.lang.Object)>(r1) in <io.vertx.core.logging.Logger: void warn(java.lang.Object)> ==> <io.vertx.core.logging.JULLogDelegate: void warn(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.spi.logging.LogDelegate: void warn(java.lang.Object)>(r1) in <io.vertx.core.logging.Logger: void warn(java.lang.Object)> ==> <io.vertx.core.logging.Log4j2LogDelegate: void warn(java.lang.Object)>
CLINIT edge: $r2 = <java.util.logging.Level: java.util.logging.Level WARNING> in <io.vertx.core.logging.JULLogDelegate: void warn(java.lang.Object)> ==> <java.util.logging.Level: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isEnum()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(r1, r2) in <io.vertx.core.VertxException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.logging.Log4jLogDelegate: void log(org.apache.log4j.Level,java.lang.Object)>($r2, r1) in <io.vertx.core.logging.Log4jLogDelegate: void error(java.lang.Object)> ==> <io.vertx.core.logging.Log4jLogDelegate: void log(org.apache.log4j.Level,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object)>(40, r1) in <io.vertx.core.logging.SLF4JLogDelegate: void error(java.lang.Object)> ==> <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object)>($r2, r1) in <io.vertx.core.logging.JULLogDelegate: void error(java.lang.Object)> ==> <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.logging.Log4j2LogDelegate: void log(org.apache.logging.log4j.Level,java.lang.Object)>($r2, r1) in <io.vertx.core.logging.Log4j2LogDelegate: void error(java.lang.Object)> ==> <io.vertx.core.logging.Log4j2LogDelegate: void log(org.apache.logging.log4j.Level,java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<com.fasterxml.jackson.databind.ObjectMapper: java.lang.Object readValue(java.lang.String,java.lang.Class)>(r0, r1) in <io.vertx.core.json.Json: java.lang.Object decodeValue(java.lang.String,java.lang.Class)> ==> <com.fasterxml.jackson.databind.ObjectMapper: java.lang.Object readValue(java.lang.String,java.lang.Class)>
SPECIAL edge: specialinvoke $r7.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.json.Json: java.lang.Object decodeValue(java.lang.String,java.lang.Class)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to decode: ") in <io.vertx.core.json.Json: java.lang.Object decodeValue(java.lang.String,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r4.<java.lang.Exception: java.lang.String getMessage()>() in <io.vertx.core.json.Json: java.lang.Object decodeValue(java.lang.String,java.lang.Class)> ==> <java.lang.Throwable: java.lang.String getMessage()>
VIRTUAL edge: $r9 = virtualinvoke $r4.<java.lang.Exception: java.lang.String getMessage()>() in <io.vertx.core.json.Json: java.lang.Object decodeValue(java.lang.String,java.lang.Class)> ==> <java.nio.charset.MalformedInputException: java.lang.String getMessage()>
VIRTUAL edge: $r9 = virtualinvoke $r4.<java.lang.Exception: java.lang.String getMessage()>() in <io.vertx.core.json.Json: java.lang.Object decodeValue(java.lang.String,java.lang.Class)> ==> <java.net.URISyntaxException: java.lang.String getMessage()>
VIRTUAL edge: $r9 = virtualinvoke $r4.<java.lang.Exception: java.lang.String getMessage()>() in <io.vertx.core.json.Json: java.lang.Object decodeValue(java.lang.String,java.lang.Class)> ==> <java.util.regex.PatternSyntaxException: java.lang.String getMessage()>
VIRTUAL edge: $r9 = virtualinvoke $r4.<java.lang.Exception: java.lang.String getMessage()>() in <io.vertx.core.json.Json: java.lang.Object decodeValue(java.lang.String,java.lang.Class)> ==> <java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
VIRTUAL edge: $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9) in <io.vertx.core.json.Json: java.lang.Object decodeValue(java.lang.String,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.Object decodeValue(java.lang.String,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r6.<io.vertx.core.json.DecodeException: void <init>(java.lang.String)>($r11) in <io.vertx.core.json.Json: java.lang.Object decodeValue(java.lang.String,java.lang.Class)> ==> <io.vertx.core.json.DecodeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.impl.HAManager: void doDeployVerticle(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)>(r2, r3, r4) in <io.vertx.core.impl.HAManager: void deployVerticle(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)> ==> <io.vertx.core.impl.HAManager: void doDeployVerticle(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.impl.HAManager: void addToHADeployList(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)>(r2, r3, r4) in <io.vertx.core.impl.HAManager: void deployVerticle(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)> ==> <io.vertx.core.impl.HAManager: void addToHADeployList(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)>
VIRTUAL edge: virtualinvoke $r1.<io.vertx.core.logging.Logger: void info(java.lang.Object)>("Quorum not attained. Deployment of verticle will be delayed until there\'s a quorum.") in <io.vertx.core.impl.HAManager: void deployVerticle(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)> ==> <io.vertx.core.logging.Logger: void info(java.lang.Object)>
STATIC edge: r4 = staticinvoke <io.vertx.core.impl.HAManager$lambda_doDeployVerticle_4__7: io.vertx.core.Handler bootstrap$(io.vertx.core.impl.HAManager,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)>(r0, r1, r2, r3) in <io.vertx.core.impl.HAManager: void doDeployVerticle(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)> ==> <io.vertx.core.impl.HAManager$lambda_doDeployVerticle_4__7: io.vertx.core.Handler bootstrap$(io.vertx.core.impl.HAManager,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)>
STATIC edge: $r5 = staticinvoke <io.vertx.core.impl.HAManager$lambda_addToHADeployList_7__8: java.lang.Runnable bootstrap$(io.vertx.core.impl.HAManager,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)>(r0, r1, r2, r3) in <io.vertx.core.impl.HAManager: void addToHADeployList(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)> ==> <io.vertx.core.impl.HAManager$lambda_addToHADeployList_7__8: java.lang.Runnable bootstrap$(io.vertx.core.impl.HAManager,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)>
VIRTUAL edge: $z0 = virtualinvoke r0.<io.vertx.core.DeploymentOptions: boolean isMultiThreaded()>() in <io.vertx.core.impl.DeploymentManager: void deployVerticle(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)> ==> <io.vertx.core.DeploymentOptions: boolean isMultiThreaded()>
VIRTUAL edge: $z1 = virtualinvoke r0.<io.vertx.core.DeploymentOptions: boolean isWorker()>() in <io.vertx.core.impl.DeploymentManager: void deployVerticle(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)> ==> <io.vertx.core.DeploymentOptions: boolean isWorker()>
SPECIAL edge: specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("If multi-threaded then must be worker too") in <io.vertx.core.impl.DeploymentManager: void deployVerticle(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
INTERFACE edge: r3 = interfaceinvoke $r2.<io.vertx.core.impl.VertxInternal: io.vertx.core.impl.ContextInternal getOrCreateContext()>() in <io.vertx.core.impl.DeploymentManager: void deployVerticle(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.ContextInternal getOrCreateContext()>
SPECIAL edge: r4 = specialinvoke r1.<io.vertx.core.impl.DeploymentManager: java.lang.ClassLoader getClassLoader(io.vertx.core.DeploymentOptions)>(r0) in <io.vertx.core.impl.DeploymentManager: void deployVerticle(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)> ==> <io.vertx.core.impl.DeploymentManager: java.lang.ClassLoader getClassLoader(io.vertx.core.DeploymentOptions)>
SPECIAL edge: specialinvoke r1.<io.vertx.core.impl.DeploymentManager: void doDeployVerticle(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.lang.ClassLoader,io.vertx.core.Handler)>(r5, r0, r3, r3, r4, r6) in <io.vertx.core.impl.DeploymentManager: void deployVerticle(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)> ==> <io.vertx.core.impl.DeploymentManager: void doDeployVerticle(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.lang.ClassLoader,io.vertx.core.Handler)>
CLINIT edge: $r38 = new java.io.File in <io.vertx.core.impl.DeploymentManager: java.lang.ClassLoader getClassLoader(io.vertx.core.DeploymentOptions)> ==> <java.io.File: void <clinit>()>
STATIC edge: $r12 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r11) in <io.vertx.core.impl.DeploymentManager: java.lang.ClassLoader getClassLoader(io.vertx.core.DeploymentOptions)> ==> <java.util.Arrays: java.util.List asList(java.lang.Object[])>
VIRTUAL edge: $z0 = virtualinvoke r0.<io.vertx.core.VertxOptions: boolean isClustered()>() in <io.vertx.core.impl.VertxFactoryImpl: io.vertx.core.Vertx vertx(io.vertx.core.VertxOptions)> ==> <io.vertx.core.VertxOptions: boolean isClustered()>
SPECIAL edge: specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Please use Vertx.clusteredVertx() to create a clustered Vert.x instance") in <io.vertx.core.impl.VertxFactoryImpl: io.vertx.core.Vertx vertx(io.vertx.core.VertxOptions)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Integer: int intValue()>() in <io.vertx.core.impl.VertxImpl: void <clinit>()> ==> <java.lang.Integer: int intValue()>
VIRTUAL edge: $z0 = virtualinvoke r1.<io.vertx.core.VertxOptions: boolean getPreferNativeTransport()>() in <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.VertxImpl vertx(io.vertx.core.VertxOptions)> ==> <io.vertx.core.VertxOptions: boolean getPreferNativeTransport()>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)>(r1, $r2) in <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.VertxImpl vertx(io.vertx.core.VertxOptions)> ==> <io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.impl.VertxImpl: void init()>() in <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.VertxImpl vertx(io.vertx.core.VertxOptions)> ==> <io.vertx.core.impl.VertxImpl: void init()>
CLINIT edge: $r6 = staticinvoke <io.vertx.core.Vertx: io.vertx.core.Context currentContext()>() in <io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)> ==> <io.vertx.core.Vertx: void <clinit>()>
STATIC edge: r34 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newFixedThreadPool(int,java.util.concurrent.ThreadFactory)>($i8, $r31) in <io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)> ==> <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newFixedThreadPool(int,java.util.concurrent.ThreadFactory)>
STATIC edge: r28 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newFixedThreadPool(int,java.util.concurrent.ThreadFactory)>($i6, $r25) in <io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)> ==> <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newFixedThreadPool(int,java.util.concurrent.ThreadFactory)>
STATIC edge: $r6 = staticinvoke <io.vertx.core.Vertx: io.vertx.core.Context currentContext()>() in <io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)> ==> <io.vertx.core.Vertx: io.vertx.core.Context currentContext()>
CLINIT edge: $r47 = new io.vertx.core.eventbus.impl.EventBusImpl in <io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)> ==> <io.vertx.core.eventbus.impl.EventBusImpl: void <clinit>()>
CLINIT edge: $r51 = new io.vertx.core.eventbus.impl.clustered.ClusteredEventBus in <io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)> ==> <io.vertx.core.eventbus.impl.EventBusImpl: void <clinit>()>
CLINIT edge: $r51 = new io.vertx.core.eventbus.impl.clustered.ClusteredEventBus in <io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void <clinit>()>
CLINIT edge: $r46 = new io.vertx.core.impl.DeploymentManager in <io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)> ==> <io.vertx.core.impl.DeploymentManager: void <clinit>()>
CLINIT edge: $r44 = new io.vertx.core.impl.AddressResolver in <io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)> ==> <io.vertx.core.impl.AddressResolver: void <clinit>()>
CLINIT edge: $r41 = new io.vertx.core.file.impl.FileResolver in <io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)> ==> <io.vertx.core.file.impl.FileResolver: void <clinit>()>
CLINIT edge: $r13 = new io.vertx.core.impl.VertxThreadFactory in <io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)> ==> <io.vertx.core.impl.VertxThreadFactory: void <clinit>()>
CLINIT edge: $r9 = new io.vertx.core.impl.BlockedThreadChecker in <io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)> ==> <io.vertx.core.impl.BlockedThreadChecker: void <clinit>()>
CLINIT edge: $r8 = <io.vertx.core.impl.VertxImpl: io.vertx.core.logging.Logger log> in <io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)> ==> <io.vertx.core.impl.VertxImpl: void <clinit>()>
CLINIT edge: $r55 = <io.vertx.core.impl.VertxImpl: io.vertx.core.logging.Logger log> in <io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)> ==> <io.vertx.core.impl.VertxImpl: void <clinit>()>
STATIC edge: $r2 = staticinvoke <io.vertx.core.impl.VertxImpl$lambda_init_0__9: io.vertx.core.Handler bootstrap$()>() in <io.vertx.core.impl.VertxImpl: void init()> ==> <io.vertx.core.impl.VertxImpl$lambda_init_0__9: io.vertx.core.Handler bootstrap$()>
CLINIT edge: $r0 = <io.vertx.core.Vertx: io.vertx.core.spi.VertxFactory factory> in <io.vertx.core.Vertx: io.vertx.core.Context currentContext()> ==> <io.vertx.core.Vertx: void <clinit>()>
CLINIT edge: $r0 = staticinvoke <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/eventbus/impl/EventBusImpl;") in <io.vertx.core.eventbus.impl.EventBusImpl: void <clinit>()> ==> <io.vertx.core.logging.LoggerFactory: void <clinit>()>
STATIC edge: $r0 = staticinvoke <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/eventbus/impl/EventBusImpl;") in <io.vertx.core.eventbus.impl.EventBusImpl: void <clinit>()> ==> <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>
CLINIT edge: <io.vertx.core.eventbus.impl.EventBusImpl: io.vertx.core.logging.Logger log> = $r0 in <io.vertx.core.eventbus.impl.EventBusImpl: void <clinit>()> ==> <io.vertx.core.eventbus.impl.EventBusImpl: void <clinit>()>
CLINIT edge: $r0 = staticinvoke <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/eventbus/impl/clustered/ClusteredEventBus;") in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void <clinit>()> ==> <io.vertx.core.logging.LoggerFactory: void <clinit>()>
STATIC edge: $r2 = staticinvoke <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer(byte[])>($r1) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void <clinit>()> ==> <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer(byte[])>
STATIC edge: $r0 = staticinvoke <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/eventbus/impl/clustered/ClusteredEventBus;") in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void <clinit>()> ==> <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>
CLINIT edge: $r2 = staticinvoke <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer(byte[])>($r1) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void <clinit>()> ==> <io.vertx.core.buffer.Buffer: void <clinit>()>
CLINIT edge: <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: io.vertx.core.logging.Logger log> = $r0 in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void <clinit>()> ==> <io.vertx.core.eventbus.impl.EventBusImpl: void <clinit>()>
CLINIT edge: <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: io.vertx.core.logging.Logger log> = $r0 in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void <clinit>()> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void <clinit>()>
CLINIT edge: $r0 = staticinvoke <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/impl/DeploymentManager;") in <io.vertx.core.impl.DeploymentManager: void <clinit>()> ==> <io.vertx.core.logging.LoggerFactory: void <clinit>()>
STATIC edge: $r0 = staticinvoke <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/impl/DeploymentManager;") in <io.vertx.core.impl.DeploymentManager: void <clinit>()> ==> <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>
CLINIT edge: <io.vertx.core.impl.DeploymentManager: io.vertx.core.logging.Logger log> = $r0 in <io.vertx.core.impl.DeploymentManager: void <clinit>()> ==> <io.vertx.core.impl.DeploymentManager: void <clinit>()>
CLINIT edge: $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("file.separator") in <io.vertx.core.file.impl.FileResolver: void <clinit>()> ==> <java.lang.System: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("!/") in <io.vertx.core.file.impl.FileResolver: void <clinit>()> ==> <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
STATIC edge: $r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("vertx.cacheDirBase", ".vertx") in <io.vertx.core.file.impl.FileResolver: void <clinit>()> ==> <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>
STATIC edge: $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("file.separator") in <io.vertx.core.file.impl.FileResolver: void <clinit>()> ==> <java.lang.System: java.lang.String getProperty(java.lang.String)>
CLINIT edge: <io.vertx.core.file.impl.FileResolver: java.lang.String FILE_SEP> = $r0 in <io.vertx.core.file.impl.FileResolver: void <clinit>()> ==> <io.vertx.core.file.impl.FileResolver: void <clinit>()>
CLINIT edge: <io.vertx.core.impl.VertxThreadFactory: java.lang.Object FOO> = $r0 in <io.vertx.core.impl.VertxThreadFactory: void <clinit>()> ==> <io.vertx.core.impl.VertxThreadFactory: void <clinit>()>
CLINIT edge: $r0 = staticinvoke <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/impl/BlockedThreadChecker;") in <io.vertx.core.impl.BlockedThreadChecker: void <clinit>()> ==> <io.vertx.core.logging.LoggerFactory: void <clinit>()>
STATIC edge: $r0 = staticinvoke <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/impl/BlockedThreadChecker;") in <io.vertx.core.impl.BlockedThreadChecker: void <clinit>()> ==> <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>
CLINIT edge: <io.vertx.core.impl.BlockedThreadChecker: io.vertx.core.logging.Logger log> = $r0 in <io.vertx.core.impl.BlockedThreadChecker: void <clinit>()> ==> <io.vertx.core.impl.BlockedThreadChecker: void <clinit>()>
CLINIT edge: $r1 = <io.vertx.core.buffer.Buffer: io.vertx.core.spi.BufferFactory factory> in <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer(byte[])> ==> <io.vertx.core.buffer.Buffer: void <clinit>()>
CLINIT edge: <io.vertx.core.buffer.Buffer: io.vertx.core.spi.BufferFactory factory> = $r1 in <io.vertx.core.buffer.Buffer: void <clinit>()> ==> <io.vertx.core.buffer.Buffer: void <clinit>()>
STATIC edge: $r0 = staticinvoke <io.vertx.core.ServiceHelper: java.lang.Object loadFactory(java.lang.Class)>(class "Lio/vertx/core/spi/BufferFactory;") in <io.vertx.core.buffer.Buffer: void <clinit>()> ==> <io.vertx.core.ServiceHelper: java.lang.Object loadFactory(java.lang.Class)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer getInteger(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $z1 = virtualinvoke r1.<io.vertx.core.net.impl.transport.Transport: boolean isAvailable()>() in <io.vertx.core.net.impl.transport.Transport: io.vertx.core.net.impl.transport.Transport transport(boolean)> ==> <io.vertx.core.net.impl.transport.EpollTransport: boolean isAvailable()>
VIRTUAL edge: $z1 = virtualinvoke r1.<io.vertx.core.net.impl.transport.Transport: boolean isAvailable()>() in <io.vertx.core.net.impl.transport.Transport: io.vertx.core.net.impl.transport.Transport transport(boolean)> ==> <io.vertx.core.net.impl.transport.KQueueTransport: boolean isAvailable()>
VIRTUAL edge: $z1 = virtualinvoke r1.<io.vertx.core.net.impl.transport.Transport: boolean isAvailable()>() in <io.vertx.core.net.impl.transport.Transport: io.vertx.core.net.impl.transport.Transport transport(boolean)> ==> <io.vertx.core.net.impl.transport.Transport: boolean isAvailable()>
STATIC edge: $z0 = staticinvoke <io.netty.channel.epoll.Epoll: boolean isAvailable()>() in <io.vertx.core.net.impl.transport.EpollTransport: boolean isAvailable()> ==> <io.netty.channel.epoll.Epoll: boolean isAvailable()>
STATIC edge: $z0 = staticinvoke <io.netty.channel.kqueue.KQueue: boolean isAvailable()>() in <io.vertx.core.net.impl.transport.KQueueTransport: boolean isAvailable()> ==> <io.netty.channel.kqueue.KQueue: boolean isAvailable()>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.net.impl.transport.Transport: void <init>()>() in <io.vertx.core.net.impl.transport.Transport: void <clinit>()> ==> <io.vertx.core.net.impl.transport.Transport: void <init>()>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.net.impl.transport.EpollTransport: void <init>()>() in <io.vertx.core.net.impl.transport.Transport: io.vertx.core.net.impl.transport.Transport nativeTransport()> ==> <io.vertx.core.net.impl.transport.EpollTransport: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r0.<io.vertx.core.net.impl.transport.Transport: boolean isAvailable()>() in <io.vertx.core.net.impl.transport.Transport: io.vertx.core.net.impl.transport.Transport nativeTransport()> ==> <io.vertx.core.net.impl.transport.EpollTransport: boolean isAvailable()>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.net.impl.transport.KQueueTransport: void <init>()>() in <io.vertx.core.net.impl.transport.Transport: io.vertx.core.net.impl.transport.Transport nativeTransport()> ==> <io.vertx.core.net.impl.transport.KQueueTransport: void <init>()>
VIRTUAL edge: $z1 = virtualinvoke $r1.<io.vertx.core.net.impl.transport.Transport: boolean isAvailable()>() in <io.vertx.core.net.impl.transport.Transport: io.vertx.core.net.impl.transport.Transport nativeTransport()> ==> <io.vertx.core.net.impl.transport.KQueueTransport: boolean isAvailable()>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.VertxOptions: io.vertx.core.VertxOptions setClustered(boolean)>(1) in <io.vertx.core.impl.VertxFactoryImpl: void clusteredVertx(io.vertx.core.VertxOptions,io.vertx.core.Handler)> ==> <io.vertx.core.VertxOptions: io.vertx.core.VertxOptions setClustered(boolean)>
VIRTUAL edge: $z0 = virtualinvoke r1.<io.vertx.core.VertxOptions: boolean getPreferNativeTransport()>() in <io.vertx.core.impl.VertxImpl: void clusteredVertx(io.vertx.core.VertxOptions,io.vertx.core.Handler)> ==> <io.vertx.core.VertxOptions: boolean getPreferNativeTransport()>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)>(r1, $r2) in <io.vertx.core.impl.VertxImpl: void clusteredVertx(io.vertx.core.VertxOptions,io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.impl.VertxImpl: void joinCluster(io.vertx.core.VertxOptions,io.vertx.core.Handler)>(r1, r4) in <io.vertx.core.impl.VertxImpl: void clusteredVertx(io.vertx.core.VertxOptions,io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl: void joinCluster(io.vertx.core.VertxOptions,io.vertx.core.Handler)>
STATIC edge: $r5 = staticinvoke <io.vertx.core.impl.VertxImpl$lambda_joinCluster_1__10: io.vertx.core.Handler bootstrap$(io.vertx.core.impl.VertxImpl,io.vertx.core.VertxOptions,io.vertx.core.Handler)>(r0, r2, r3) in <io.vertx.core.impl.VertxImpl: void joinCluster(io.vertx.core.VertxOptions,io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl$lambda_joinCluster_1__10: io.vertx.core.Handler bootstrap$(io.vertx.core.impl.VertxImpl,io.vertx.core.VertxOptions,io.vertx.core.Handler)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.Starter$lambda_startVertx_0__2: void <init>(java.util.concurrent.atomic.AtomicReference,java.util.concurrent.CountDownLatch)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.Starter$lambda_createLoggingHandler_2__3: void <init>(java.lang.String,io.vertx.core.Handler)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer valueOf(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.impl.cpu.CpuCoreSensor$lambda_availableProcessors_0__4: void <init>()> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>() in <io.vertx.core.impl.ConcurrentHashSet: boolean isEmpty()> ==> <java.util.HashMap: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>() in <io.vertx.core.impl.ConcurrentHashSet: boolean isEmpty()> ==> <java.util.IdentityHashMap: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>() in <io.vertx.core.impl.ConcurrentHashSet: boolean isEmpty()> ==> <java.util.Hashtable: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>() in <io.vertx.core.impl.ConcurrentHashSet: boolean isEmpty()> ==> <java.util.AbstractMap: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>() in <io.vertx.core.impl.ConcurrentHashSet: boolean isEmpty()> ==> <java.util.concurrent.ConcurrentHashMap: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>() in <io.vertx.core.impl.ConcurrentHashSet: boolean isEmpty()> ==> <java.util.jar.Attributes: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>() in <io.vertx.core.impl.ConcurrentHashSet: boolean isEmpty()> ==> <java.util.TreeMap: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>() in <io.vertx.core.impl.ConcurrentHashSet: boolean isEmpty()> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>() in <io.vertx.core.impl.ConcurrentHashSet: boolean isEmpty()> ==> <java.util.WeakHashMap: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>() in <io.vertx.core.net.impl.VertxEventLoopGroup$1: boolean isEmpty()> ==> <java.util.AbstractCollection: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>() in <io.vertx.core.net.impl.VertxEventLoopGroup$1: boolean isEmpty()> ==> <java.util.concurrent.CopyOnWriteArrayList: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>() in <io.vertx.core.net.impl.VertxEventLoopGroup$1: boolean isEmpty()> ==> <java.util.ArrayList: boolean isEmpty()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>() in <io.vertx.core.impl.ConcurrentHashSet: java.util.Iterator iterator()> ==> <java.util.HashMap: java.util.Set keySet()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>() in <io.vertx.core.impl.ConcurrentHashSet: java.util.Iterator iterator()> ==> <java.util.IdentityHashMap: java.util.Set keySet()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>() in <io.vertx.core.impl.ConcurrentHashSet: java.util.Iterator iterator()> ==> <java.util.Hashtable: java.util.Set keySet()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>() in <io.vertx.core.impl.ConcurrentHashSet: java.util.Iterator iterator()> ==> <java.util.EnumMap: java.util.Set keySet()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>() in <io.vertx.core.impl.ConcurrentHashSet: java.util.Iterator iterator()> ==> <java.util.concurrent.ConcurrentHashMap: java.util.Set keySet()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>() in <io.vertx.core.impl.ConcurrentHashSet: java.util.Iterator iterator()> ==> <java.security.Provider: java.util.Set keySet()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>() in <io.vertx.core.impl.ConcurrentHashSet: java.util.Iterator iterator()> ==> <java.util.jar.Attributes: java.util.Set keySet()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>() in <io.vertx.core.impl.ConcurrentHashSet: java.util.Iterator iterator()> ==> <java.util.TreeMap: java.util.Set keySet()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>() in <io.vertx.core.impl.ConcurrentHashSet: java.util.Iterator iterator()> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Set keySet()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>() in <io.vertx.core.impl.ConcurrentHashSet: java.util.Iterator iterator()> ==> <java.util.WeakHashMap: java.util.Set keySet()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>() in <io.vertx.core.impl.ConcurrentHashSet: java.util.Iterator iterator()> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>() in <io.vertx.core.impl.ConcurrentHashSet: java.util.Iterator iterator()> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2: java.util.Iterator iterator()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>() in <io.vertx.core.impl.ConcurrentHashSet: java.util.Iterator iterator()> ==> <io.vertx.core.impl.ConcurrentHashSet: java.util.Iterator iterator()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>() in <io.vertx.core.impl.ConcurrentHashSet: java.util.Iterator iterator()> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$1: java.util.Iterator iterator()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>() in <io.vertx.core.impl.ConcurrentHashSet: java.util.Iterator iterator()> ==> <java.util.TreeSet: java.util.Iterator iterator()>
STATIC edge: $r8 = staticinvoke <io.vertx.core.shareddata.impl.Checker: java.lang.Object copyIfRequired(java.lang.Object)>(r7) in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Set keySet()> ==> <io.vertx.core.shareddata.impl.Checker: java.lang.Object copyIfRequired(java.lang.Object)>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>() in <io.vertx.core.http.impl.Http2HeadersAdaptor$2: java.util.Iterator iterator()> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>() in <io.vertx.core.http.impl.Http2HeadersAdaptor$2: java.util.Iterator iterator()> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>() in <io.vertx.core.http.impl.Http2HeadersAdaptor$2: java.util.Iterator iterator()> ==> <io.vertx.core.impl.ConcurrentHashSet: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>() in <io.vertx.core.http.impl.Http2HeadersAdaptor$2: java.util.Iterator iterator()> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$1: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>() in <io.vertx.core.http.impl.Http2HeadersAdaptor$2: java.util.Iterator iterator()> ==> <java.util.TreeSet: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke $r5.<io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: void <init>(io.vertx.core.http.impl.Http2HeadersAdaptor$2,java.util.Iterator)>(r0, r4) in <io.vertx.core.http.impl.Http2HeadersAdaptor$2: java.util.Iterator iterator()> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: void <init>(io.vertx.core.http.impl.Http2HeadersAdaptor$2,java.util.Iterator)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.VertxEventLoopGroup$1: java.util.Iterator iterator()> ==> <java.util.AbstractList: java.util.Iterator iterator()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.VertxEventLoopGroup$1: java.util.Iterator iterator()> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.VertxEventLoopGroup$1: java.util.Iterator iterator()> ==> <java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.VertxEventLoopGroup$1: java.util.Iterator iterator()> ==> <java.util.ArrayList: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: void <init>(java.util.Iterator)>($r4) in <io.vertx.core.net.impl.VertxEventLoopGroup$1: java.util.Iterator iterator()> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: void <init>(java.util.Iterator)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toLowerCase()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean contains(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.ServiceHelper$add__5: void <init>(java.util.List)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.ServiceHelper$add__6: void <init>(java.util.List)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.logging.Log4jLogDelegate: void log(org.apache.log4j.Level,java.lang.Object,java.lang.Throwable)>(r1, r2, null) in <io.vertx.core.logging.Log4jLogDelegate: void log(org.apache.log4j.Level,java.lang.Object)> ==> <io.vertx.core.logging.Log4jLogDelegate: void log(org.apache.log4j.Level,java.lang.Object,java.lang.Throwable)>
CLINIT edge: $r4 = <io.vertx.core.logging.Log4jLogDelegate: java.lang.String FQCN> in <io.vertx.core.logging.Log4jLogDelegate: void log(org.apache.log4j.Level,java.lang.Object,java.lang.Throwable)> ==> <io.vertx.core.logging.Log4jLogDelegate: void <clinit>()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable)>(i0, r1, null) in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object)> ==> <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable)>(r1, r2, null) in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object)> ==> <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.logging.Log4j2LogDelegate: void log(org.apache.logging.log4j.Level,java.lang.Object,java.lang.Throwable)>(r1, r2, null) in <io.vertx.core.logging.Log4j2LogDelegate: void log(org.apache.logging.log4j.Level,java.lang.Object)> ==> <io.vertx.core.logging.Log4j2LogDelegate: void log(org.apache.logging.log4j.Level,java.lang.Object,java.lang.Throwable)>
CLINIT edge: $r7 = <io.vertx.core.logging.Log4j2LogDelegate: java.lang.String FQCN> in <io.vertx.core.logging.Log4j2LogDelegate: void log(org.apache.logging.log4j.Level,java.lang.Object,java.lang.Throwable)> ==> <io.vertx.core.logging.Log4j2LogDelegate: void <clinit>()>
CLINIT edge: $r4 = <io.vertx.core.logging.Log4j2LogDelegate: java.lang.String FQCN> in <io.vertx.core.logging.Log4j2LogDelegate: void log(org.apache.logging.log4j.Level,java.lang.Object,java.lang.Throwable)> ==> <io.vertx.core.logging.Log4j2LogDelegate: void <clinit>()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.List: int size()>() in <io.vertx.core.http.impl.Http2HeadersAdaptor$1: int size()> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$1: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.List: int size()>() in <io.vertx.core.http.impl.Http2HeadersAdaptor$1: int size()> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.List: int size()>() in <io.vertx.core.http.impl.Http2HeadersAdaptor$1: int size()> ==> <java.util.concurrent.CopyOnWriteArrayList: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.List: int size()>() in <io.vertx.core.http.impl.Http2HeadersAdaptor$1: int size()> ==> <java.util.ArrayList: int size()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.json.JsonArray: void <init>(java.util.List)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.json.Json$JsonObjectSerializer: void <init>()>() in <io.vertx.core.json.Json$JsonObjectSerializer: void <init>(io.vertx.core.json.Json$1)> ==> <io.vertx.core.json.Json$JsonObjectSerializer: void <init>()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.json.Json$JsonArraySerializer: void <init>()>() in <io.vertx.core.json.Json$JsonArraySerializer: void <init>(io.vertx.core.json.Json$1)> ==> <io.vertx.core.json.Json$JsonArraySerializer: void <init>()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.json.Json$InstantSerializer: void <init>()>() in <io.vertx.core.json.Json$InstantSerializer: void <init>(io.vertx.core.json.Json$1)> ==> <io.vertx.core.json.Json$InstantSerializer: void <init>()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.json.Json$InstantDeserializer: void <init>()>() in <io.vertx.core.json.Json$InstantDeserializer: void <init>(io.vertx.core.json.Json$1)> ==> <io.vertx.core.json.Json$InstantDeserializer: void <init>()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.json.Json$ByteArraySerializer: void <init>()>() in <io.vertx.core.json.Json$ByteArraySerializer: void <init>(io.vertx.core.json.Json$1)> ==> <io.vertx.core.json.Json$ByteArraySerializer: void <init>()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.json.Json$ByteArrayDeserializer: void <init>()>() in <io.vertx.core.json.Json$ByteArrayDeserializer: void <init>(io.vertx.core.json.Json$1)> ==> <io.vertx.core.json.Json$ByteArrayDeserializer: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r10.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.impl.FutureImpl: java.lang.String toString()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Future{result=") in <io.vertx.core.impl.FutureImpl: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12) in <io.vertx.core.impl.FutureImpl: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}") in <io.vertx.core.impl.FutureImpl: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.impl.FutureImpl: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.impl.FutureImpl: java.lang.String toString()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Future{cause=") in <io.vertx.core.impl.FutureImpl: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.Throwable: java.lang.String getMessage()>() in <io.vertx.core.impl.FutureImpl: java.lang.String toString()> ==> <java.lang.Throwable: java.lang.String getMessage()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.Throwable: java.lang.String getMessage()>() in <io.vertx.core.impl.FutureImpl: java.lang.String toString()> ==> <java.nio.charset.MalformedInputException: java.lang.String getMessage()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.Throwable: java.lang.String getMessage()>() in <io.vertx.core.impl.FutureImpl: java.lang.String toString()> ==> <java.net.URISyntaxException: java.lang.String getMessage()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.Throwable: java.lang.String getMessage()>() in <io.vertx.core.impl.FutureImpl: java.lang.String toString()> ==> <java.util.regex.PatternSyntaxException: java.lang.String getMessage()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.Throwable: java.lang.String getMessage()>() in <io.vertx.core.impl.FutureImpl: java.lang.String toString()> ==> <java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
VIRTUAL edge: $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) in <io.vertx.core.impl.FutureImpl: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}") in <io.vertx.core.impl.FutureImpl: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.impl.FutureImpl: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.String toString()> ==> <java.util.AbstractMap: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.String toString()> ==> <java.lang.Object: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.impl.verticle.CustomJavaFileObject: java.lang.String toString()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3) in <io.vertx.core.impl.verticle.CustomJavaFileObject: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() in <io.vertx.core.impl.verticle.CustomJavaFileObject: java.lang.String toString()> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r6 = virtualinvoke r1.<io.vertx.core.impl.verticle.CustomJavaFileObject: java.net.URI toUri()>() in <io.vertx.core.impl.verticle.CustomJavaFileObject: java.lang.String toString()> ==> <io.vertx.core.impl.verticle.CustomJavaFileObject: java.net.URI toUri()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>() in <io.vertx.core.impl.verticle.CustomJavaFileObject: java.lang.String toString()> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91) in <io.vertx.core.impl.verticle.CustomJavaFileObject: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6) in <io.vertx.core.impl.verticle.CustomJavaFileObject: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93) in <io.vertx.core.impl.verticle.CustomJavaFileObject: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.impl.verticle.CustomJavaFileObject: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder: java.lang.String toString()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Holder{value=") in <io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3) in <io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", timerId=") in <io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0) in <io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(long)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ttl=") in <io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1) in <io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(long)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", timestamp=") in <io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2) in <io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(long)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125) in <io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.http.StreamPriority: java.lang.String toString()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("StreamPriority [weight=") in <io.vertx.core.http.StreamPriority: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($s0) in <io.vertx.core.http.StreamPriority: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", dependency=") in <io.vertx.core.http.StreamPriority: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1) in <io.vertx.core.http.StreamPriority: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", exclusive=") in <io.vertx.core.http.StreamPriority: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0) in <io.vertx.core.http.StreamPriority: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]") in <io.vertx.core.http.StreamPriority: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.http.StreamPriority: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.dns.impl.MxRecordImpl: java.lang.String toString()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <io.vertx.core.dns.impl.MxRecordImpl: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $i0 = virtualinvoke r1.<io.vertx.core.dns.impl.MxRecordImpl: int priority()>() in <io.vertx.core.dns.impl.MxRecordImpl: java.lang.String toString()> ==> <io.vertx.core.dns.impl.MxRecordImpl: int priority()>
VIRTUAL edge: $r4 = virtualinvoke r1.<io.vertx.core.dns.impl.MxRecordImpl: java.lang.String name()>() in <io.vertx.core.dns.impl.MxRecordImpl: java.lang.String toString()> ==> <io.vertx.core.dns.impl.MxRecordImpl: java.lang.String name()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ") in <io.vertx.core.dns.impl.MxRecordImpl: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) in <io.vertx.core.dns.impl.MxRecordImpl: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.dns.impl.MxRecordImpl: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r1 = virtualinvoke r0.<io.vertx.core.eventbus.ReplyException: java.lang.String getMessage()>() in <io.vertx.core.eventbus.ReplyException: java.lang.String toString()> ==> <java.lang.Throwable: java.lang.String getMessage()>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.eventbus.ReplyException: java.lang.String toString()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(") in <io.vertx.core.eventbus.ReplyException: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4) in <io.vertx.core.eventbus.ReplyException: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",") in <io.vertx.core.eventbus.ReplyException: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <io.vertx.core.eventbus.ReplyException: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") ") in <io.vertx.core.eventbus.ReplyException: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11) in <io.vertx.core.eventbus.ReplyException: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.eventbus.ReplyException: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.Http2Settings: io.vertx.core.json.JsonObject toJson()>() in <io.vertx.core.http.Http2Settings: java.lang.String toString()> ==> <io.vertx.core.http.Http2Settings: io.vertx.core.json.JsonObject toJson()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<io.vertx.core.json.JsonObject: java.lang.String encode()>() in <io.vertx.core.http.Http2Settings: java.lang.String toString()> ==> <io.vertx.core.json.JsonObject: java.lang.String encode()>
STATIC edge: staticinvoke <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,io.vertx.core.json.JsonObject)>(r2, $r0) in <io.vertx.core.http.Http2Settings: io.vertx.core.json.JsonObject toJson()> ==> <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,io.vertx.core.json.JsonObject)>
CLINIT edge: $r2 = staticinvoke <io.vertx.core.json.Json: java.lang.String encode(java.lang.Object)>($r1) in <io.vertx.core.json.JsonObject: java.lang.String encode()> ==> <io.vertx.core.json.Json: void <clinit>()>
STATIC edge: $r2 = staticinvoke <io.vertx.core.json.Json: java.lang.String encode(java.lang.Object)>($r1) in <io.vertx.core.json.JsonObject: java.lang.String encode()> ==> <io.vertx.core.json.Json: java.lang.String encode(java.lang.Object)>
STATIC edge: staticinvoke <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)>(r0, $r2) in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,io.vertx.core.json.JsonObject)> ==> <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)>
CLINIT edge: $r1 = <io.vertx.core.json.Json: com.fasterxml.jackson.databind.ObjectMapper mapper> in <io.vertx.core.json.Json: java.lang.String encode(java.lang.Object)> ==> <io.vertx.core.json.Json: void <clinit>()>
CLINIT edge: $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0) in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <java.lang.Long: void <clinit>()>
STATIC edge: $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0) in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
STATIC edge: $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l4) in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <java.lang.Long: java.lang.Long valueOf(long)>
STATIC edge: $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3) in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2) in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <java.lang.Long: java.lang.Long valueOf(long)>
STATIC edge: $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1) in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0) in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <java.lang.Long: java.lang.Long valueOf(long)>
CLINIT edge: $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0) in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <java.lang.Boolean: void <clinit>()>
CLINIT edge: $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1) in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <java.lang.Integer: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.json.JsonObject: java.lang.String encode()>() in <io.vertx.core.json.JsonObject: java.lang.String toString()> ==> <io.vertx.core.json.JsonObject: java.lang.String encode()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.http.impl.ws.WebSocketFrameImpl: java.lang.String toString()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3) in <io.vertx.core.http.impl.ws.WebSocketFrameImpl: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() in <io.vertx.core.http.impl.ws.WebSocketFrameImpl: java.lang.String toString()> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r9 = virtualinvoke r1.<io.vertx.core.http.impl.ws.WebSocketFrameImpl: io.netty.buffer.ByteBuf getBinaryData()>() in <io.vertx.core.http.impl.ws.WebSocketFrameImpl: java.lang.String toString()> ==> <io.vertx.core.http.impl.ws.WebSocketFrameImpl: io.netty.buffer.ByteBuf getBinaryData()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getSimpleName()>() in <io.vertx.core.http.impl.ws.WebSocketFrameImpl: java.lang.String toString()> ==> <java.lang.Class: java.lang.String getSimpleName()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(type: ") in <io.vertx.core.http.impl.ws.WebSocketFrameImpl: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6) in <io.vertx.core.http.impl.ws.WebSocketFrameImpl: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", data: ") in <io.vertx.core.http.impl.ws.WebSocketFrameImpl: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9) in <io.vertx.core.http.impl.ws.WebSocketFrameImpl: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41) in <io.vertx.core.http.impl.ws.WebSocketFrameImpl: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.http.impl.ws.WebSocketFrameImpl: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.String toString()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r1.<io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.String getKey()>() in <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.String toString()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.String getKey()>
VIRTUAL edge: $r5 = virtualinvoke r1.<io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.String getValue()>() in <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.String toString()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.String getValue()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ") in <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5) in <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.http.CaseInsensitiveHeaders: java.lang.String toString()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6) in <io.vertx.core.http.CaseInsensitiveHeaders: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.http.CaseInsensitiveHeaders: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r3 = virtualinvoke r2.<io.vertx.core.http.CaseInsensitiveHeaders: java.util.Iterator iterator()>() in <io.vertx.core.http.CaseInsensitiveHeaders: java.lang.String toString()> ==> <io.vertx.core.http.CaseInsensitiveHeaders: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.http.CaseInsensitiveHeaders: java.lang.String toString()> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.http.CaseInsensitiveHeaders: java.lang.String toString()> ==> <io.vertx.core.json.JsonArray$Iter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.http.CaseInsensitiveHeaders: java.lang.String toString()> ==> <io.vertx.core.json.JsonObject$Iter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.http.CaseInsensitiveHeaders: java.lang.String toString()> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.http.CaseInsensitiveHeaders: java.lang.String toString()> ==> <java.util.Scanner: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.http.CaseInsensitiveHeaders: java.lang.String toString()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.http.CaseInsensitiveHeaders: java.lang.String toString()> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: boolean hasNext()>
INTERFACE edge: $r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.http.CaseInsensitiveHeaders: java.lang.String toString()> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object next()>
INTERFACE edge: $r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.http.CaseInsensitiveHeaders: java.lang.String toString()> ==> <io.vertx.core.json.JsonArray$Iter: java.lang.Object next()>
INTERFACE edge: $r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.http.CaseInsensitiveHeaders: java.lang.String toString()> ==> <io.vertx.core.json.JsonObject$Iter: java.lang.Object next()>
INTERFACE edge: $r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.http.CaseInsensitiveHeaders: java.lang.String toString()> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: java.lang.Object next()>
INTERFACE edge: $r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.http.CaseInsensitiveHeaders: java.lang.String toString()> ==> <java.util.Scanner: java.lang.Object next()>
INTERFACE edge: $r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.http.CaseInsensitiveHeaders: java.lang.String toString()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: java.lang.Object next()>
INTERFACE edge: $r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.http.CaseInsensitiveHeaders: java.lang.String toString()> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: java.lang.Object next()>
VIRTUAL edge: virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10) in <io.vertx.core.http.CaseInsensitiveHeaders: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.VertxOptions: java.lang.String toString()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("VertxOptions{eventLoopPoolSize=") in <io.vertx.core.VertxOptions: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <io.vertx.core.VertxOptions: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", workerPoolSize=") in <io.vertx.core.VertxOptions: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1) in <io.vertx.core.VertxOptions: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", internalBlockingPoolSize=") in <io.vertx.core.VertxOptions: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2) in <io.vertx.core.VertxOptions: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", blockedThreadCheckIntervalUnit=") in <io.vertx.core.VertxOptions: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9) in <io.vertx.core.VertxOptions: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", blockedThreadCheckInterval=") in <io.vertx.core.VertxOptions: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l3) in <io.vertx.core.VertxOptions: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(long)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", maxEventLoopExecuteTimeUnit=") in <io.vertx.core.VertxOptions: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14) in <io.vertx.core.VertxOptions: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", maxEventLoopExecuteTime=") in <io.vertx.core.VertxOptions: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l4) in <io.vertx.core.VertxOptions: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(long)>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", maxWorkerExecuteTimeUnit=") in <io.vertx.core.VertxOptions: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r19) in <io.vertx.core.VertxOptions: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", maxWorkerExecuteTime=") in <io.vertx.core.VertxOptions: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l5) in <io.vertx.core.VertxOptions: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(long)>
VIRTUAL edge: $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", clusterManager=") in <io.vertx.core.VertxOptions: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r24) in <io.vertx.core.VertxOptions: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", haEnabled=") in <io.vertx.core.VertxOptions: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0) in <io.vertx.core.VertxOptions: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>
VIRTUAL edge: $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", preferNativeTransport=") in <io.vertx.core.VertxOptions: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1) in <io.vertx.core.VertxOptions: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>
VIRTUAL edge: $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", quorumSize=") in <io.vertx.core.VertxOptions: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6) in <io.vertx.core.VertxOptions: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", haGroup=\'") in <io.vertx.core.VertxOptions: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33) in <io.vertx.core.VertxOptions: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39) in <io.vertx.core.VertxOptions: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", metrics=") in <io.vertx.core.VertxOptions: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r38 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r37) in <io.vertx.core.VertxOptions: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", fileSystemOptions=") in <io.vertx.core.VertxOptions: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r41 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r40) in <io.vertx.core.VertxOptions: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", addressResolver=") in <io.vertx.core.VertxOptions: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r44 = virtualinvoke $r43.<io.vertx.core.dns.AddressResolverOptions: io.vertx.core.json.JsonObject toJson()>() in <io.vertx.core.VertxOptions: java.lang.String toString()> ==> <io.vertx.core.dns.AddressResolverOptions: io.vertx.core.json.JsonObject toJson()>
VIRTUAL edge: $r45 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r44) in <io.vertx.core.VertxOptions: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", addressResolver=") in <io.vertx.core.VertxOptions: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r48 = virtualinvoke $r47.<io.vertx.core.dns.AddressResolverOptions: io.vertx.core.json.JsonObject toJson()>() in <io.vertx.core.VertxOptions: java.lang.String toString()> ==> <io.vertx.core.dns.AddressResolverOptions: io.vertx.core.json.JsonObject toJson()>
VIRTUAL edge: $r49 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r48) in <io.vertx.core.VertxOptions: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", eventbus=") in <io.vertx.core.VertxOptions: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r52 = virtualinvoke $r51.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.json.JsonObject toJson()>() in <io.vertx.core.VertxOptions: java.lang.String toString()> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.json.JsonObject toJson()>
VIRTUAL edge: $r53 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r52) in <io.vertx.core.VertxOptions: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", warningExceptionTimeUnit=") in <io.vertx.core.VertxOptions: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r56 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r55) in <io.vertx.core.VertxOptions: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", warningExceptionTime=") in <io.vertx.core.VertxOptions: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l7) in <io.vertx.core.VertxOptions: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(long)>
VIRTUAL edge: $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125) in <io.vertx.core.VertxOptions: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.VertxOptions: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.String toString()>
STATIC edge: staticinvoke <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,io.vertx.core.json.JsonObject)>(r2, $r0) in <io.vertx.core.dns.AddressResolverOptions: io.vertx.core.json.JsonObject toJson()> ==> <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,io.vertx.core.json.JsonObject)>
STATIC edge: staticinvoke <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,io.vertx.core.json.JsonObject)>(r2, $r0) in <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.json.JsonObject toJson()> ==> <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,io.vertx.core.json.JsonObject)>
STATIC edge: staticinvoke <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)>(r0, $r2) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,io.vertx.core.json.JsonObject)> ==> <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)>
STATIC edge: staticinvoke <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)>(r0, $r2) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,io.vertx.core.json.JsonObject)> ==> <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)>
CLINIT edge: $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $r26 = staticinvoke <io.vertx.core.dns.AddressResolverOptionsConverter$lambda_toJson_3__11: java.util.function.Consumer bootstrap$(io.vertx.core.json.JsonArray)>($r24) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <io.vertx.core.dns.AddressResolverOptionsConverter$lambda_toJson_3__11: java.util.function.Consumer bootstrap$(io.vertx.core.json.JsonArray)>
STATIC edge: $r30 = staticinvoke <io.vertx.core.dns.AddressResolverOptionsConverter$lambda_toJson_2__12: java.util.function.Consumer bootstrap$(io.vertx.core.json.JsonArray)>($r28) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <io.vertx.core.dns.AddressResolverOptionsConverter$lambda_toJson_2__12: java.util.function.Consumer bootstrap$(io.vertx.core.json.JsonArray)>
STATIC edge: $r20 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
STATIC edge: $r18 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
STATIC edge: $r16 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l5) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.lang.Long: java.lang.Long valueOf(long)>
STATIC edge: $r14 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
STATIC edge: $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r32 = staticinvoke <java.util.Base64: java.util.Base64$Encoder getEncoder()>() in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.Base64: java.util.Base64$Encoder getEncoder()>
STATIC edge: $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
CLINIT edge: $r16 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l5) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.lang.Long: void <clinit>()>
CLINIT edge: $r14 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.lang.Boolean: void <clinit>()>
CLINIT edge: $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $r68 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z12) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
STATIC edge: $r66 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z11) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
STATIC edge: $r63 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z10) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
STATIC edge: $r61 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i12) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r59 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z9) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
STATIC edge: $r57 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z8) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
STATIC edge: $r55 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z7) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
STATIC edge: $r53 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z6) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
STATIC edge: $r51 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z5) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
STATIC edge: $r49 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z4) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
STATIC edge: $r47 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i11) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r45 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i10) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r43 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z3) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
STATIC edge: $r41 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
STATIC edge: $r39 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l9) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.lang.Long: java.lang.Long valueOf(long)>
STATIC edge: $r37 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r35 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r33 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r26 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
STATIC edge: $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r101 = staticinvoke <io.vertx.core.eventbus.EventBusOptionsConverter$lambda_toJson_7__13: java.util.function.Consumer bootstrap$(io.vertx.core.json.JsonArray)>($r99) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.eventbus.EventBusOptionsConverter$lambda_toJson_7__13: java.util.function.Consumer bootstrap$(io.vertx.core.json.JsonArray)>
STATIC edge: $r105 = staticinvoke <io.vertx.core.eventbus.EventBusOptionsConverter$lambda_toJson_6__14: java.util.function.Consumer bootstrap$(io.vertx.core.json.JsonArray)>($r103) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.eventbus.EventBusOptionsConverter$lambda_toJson_6__14: java.util.function.Consumer bootstrap$(io.vertx.core.json.JsonArray)>
STATIC edge: $r109 = staticinvoke <io.vertx.core.eventbus.EventBusOptionsConverter$lambda_toJson_5__15: java.util.function.Consumer bootstrap$(io.vertx.core.json.JsonArray)>($r107) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.eventbus.EventBusOptionsConverter$lambda_toJson_5__15: java.util.function.Consumer bootstrap$(io.vertx.core.json.JsonArray)>
STATIC edge: $r113 = staticinvoke <io.vertx.core.eventbus.EventBusOptionsConverter$lambda_toJson_4__16: java.util.function.Consumer bootstrap$(io.vertx.core.json.JsonArray)>($r111) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.eventbus.EventBusOptionsConverter$lambda_toJson_4__16: java.util.function.Consumer bootstrap$(io.vertx.core.json.JsonArray)>
STATIC edge: $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
STATIC edge: $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.lang.Long: java.lang.Long valueOf(long)>
STATIC edge: $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.lang.Long: java.lang.Long valueOf(long)>
STATIC edge: $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
CLINIT edge: $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.lang.Boolean: void <clinit>()>
CLINIT edge: $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.lang.Long: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.impl.FailedFuture: java.lang.String toString()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Future{cause=") in <io.vertx.core.impl.FailedFuture: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.Throwable: java.lang.String getMessage()>() in <io.vertx.core.impl.FailedFuture: java.lang.String toString()> ==> <java.lang.Throwable: java.lang.String getMessage()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.Throwable: java.lang.String getMessage()>() in <io.vertx.core.impl.FailedFuture: java.lang.String toString()> ==> <java.nio.charset.MalformedInputException: java.lang.String getMessage()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.Throwable: java.lang.String getMessage()>() in <io.vertx.core.impl.FailedFuture: java.lang.String toString()> ==> <java.net.URISyntaxException: java.lang.String getMessage()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.Throwable: java.lang.String getMessage()>() in <io.vertx.core.impl.FailedFuture: java.lang.String toString()> ==> <java.util.regex.PatternSyntaxException: java.lang.String getMessage()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.Throwable: java.lang.String getMessage()>() in <io.vertx.core.impl.FailedFuture: java.lang.String toString()> ==> <java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
VIRTUAL edge: $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) in <io.vertx.core.impl.FailedFuture: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}") in <io.vertx.core.impl.FailedFuture: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.impl.FailedFuture: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.String toString()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r1.<io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.String getKey()>() in <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.String toString()> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.String getKey()>
VIRTUAL edge: $r5 = virtualinvoke r1.<io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.String getValue()>() in <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.String toString()> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.String getValue()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ") in <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5) in <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.http.impl.pool.Pool$Holder: java.lang.String toString()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Holder[removed=") in <io.vertx.core.http.impl.pool.Pool$Holder: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0) in <io.vertx.core.http.impl.pool.Pool$Holder: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",capacity=") in <io.vertx.core.http.impl.pool.Pool$Holder: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0) in <io.vertx.core.http.impl.pool.Pool$Holder: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(long)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",concurrency=") in <io.vertx.core.http.impl.pool.Pool$Holder: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1) in <io.vertx.core.http.impl.pool.Pool$Holder: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(long)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",expirationTimestamp=") in <io.vertx.core.http.impl.pool.Pool$Holder: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2) in <io.vertx.core.http.impl.pool.Pool$Holder: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(long)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]") in <io.vertx.core.http.impl.pool.Pool$Holder: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.http.impl.pool.Pool$Holder: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.eventbus.impl.clustered.ClusterNodeInfo: java.lang.String toString()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <io.vertx.core.eventbus.impl.clustered.ClusterNodeInfo: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":") in <io.vertx.core.eventbus.impl.clustered.ClusterNodeInfo: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<io.vertx.core.net.impl.ServerID: java.lang.String toString()>() in <io.vertx.core.eventbus.impl.clustered.ClusterNodeInfo: java.lang.String toString()> ==> <io.vertx.core.net.impl.ServerID: java.lang.String toString()>
VIRTUAL edge: $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) in <io.vertx.core.eventbus.impl.clustered.ClusterNodeInfo: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.eventbus.impl.clustered.ClusterNodeInfo: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.String toString()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2) in <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke r1.<io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.CharSequence getKey()>() in <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.String toString()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.CharSequence getKey()>
VIRTUAL edge: $r5 = virtualinvoke r1.<io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.CharSequence getValue()>() in <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.String toString()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.CharSequence getValue()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ") in <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5) in <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.impl.SucceededFuture: java.lang.String toString()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Future{result=") in <io.vertx.core.impl.SucceededFuture: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3) in <io.vertx.core.impl.SucceededFuture: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}") in <io.vertx.core.impl.SucceededFuture: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.impl.SucceededFuture: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.file.FileSystemOptions: java.lang.String toString()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FileSystemOptions{classPathResolvingEnabled=") in <io.vertx.core.file.FileSystemOptions: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0) in <io.vertx.core.file.FileSystemOptions: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", fileCachingEnabled=") in <io.vertx.core.file.FileSystemOptions: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1) in <io.vertx.core.file.FileSystemOptions: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125) in <io.vertx.core.file.FileSystemOptions: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.file.FileSystemOptions: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.json.JsonArray: java.lang.String encode()>() in <io.vertx.core.json.JsonArray: java.lang.String toString()> ==> <io.vertx.core.json.JsonArray: java.lang.String encode()>
CLINIT edge: $r2 = staticinvoke <io.vertx.core.json.Json: java.lang.String encode(java.lang.Object)>($r1) in <io.vertx.core.json.JsonArray: java.lang.String encode()> ==> <io.vertx.core.json.Json: void <clinit>()>
STATIC edge: $r2 = staticinvoke <io.vertx.core.json.Json: java.lang.String encode(java.lang.Object)>($r1) in <io.vertx.core.json.JsonArray: java.lang.String encode()> ==> <io.vertx.core.json.Json: java.lang.String encode(java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.net.impl.SocketAddressImpl: java.lang.String toString()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) in <io.vertx.core.net.impl.SocketAddressImpl: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":") in <io.vertx.core.net.impl.SocketAddressImpl: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <io.vertx.core.net.impl.SocketAddressImpl: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.net.impl.SocketAddressImpl: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.net.impl.ServerID: java.lang.String toString()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <io.vertx.core.net.impl.ServerID: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":") in <io.vertx.core.net.impl.ServerID: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <io.vertx.core.net.impl.ServerID: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.net.impl.ServerID: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.metrics.MetricsOptions: java.lang.String toString()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("MetricsOptions{enabled=") in <io.vertx.core.metrics.MetricsOptions: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0) in <io.vertx.core.metrics.MetricsOptions: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", json=") in <io.vertx.core.metrics.MetricsOptions: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5) in <io.vertx.core.metrics.MetricsOptions: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125) in <io.vertx.core.metrics.MetricsOptions: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.metrics.MetricsOptions: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.dns.DnsResponseCode: java.lang.String toString()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <io.vertx.core.dns.DnsResponseCode: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r1.<io.vertx.core.dns.DnsResponseCode: java.lang.String name()>() in <io.vertx.core.dns.DnsResponseCode: java.lang.String toString()> ==> <java.lang.Enum: java.lang.String name()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": type ") in <io.vertx.core.dns.DnsResponseCode: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <io.vertx.core.dns.DnsResponseCode: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ") in <io.vertx.core.dns.DnsResponseCode: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) in <io.vertx.core.dns.DnsResponseCode: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.dns.DnsResponseCode: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.json.JsonObject: void <init>(java.util.Map)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.concurrent.ConcurrentMap: int size()>() in <io.vertx.core.shareddata.impl.LocalMapImpl: int size()> ==> <java.util.concurrent.ConcurrentHashMap: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: int size()>() in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Set entrySet()> ==> <java.util.concurrent.ConcurrentHashMap: int size()>
SPECIAL edge: specialinvoke $r0.<java.util.HashSet: void <init>(int)>($i0) in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Set entrySet()> ==> <java.util.HashSet: void <init>(int)>
INTERFACE edge: interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r9) in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Set entrySet()> ==> <java.util.HashSet: boolean add(java.lang.Object)>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.concurrent.ConcurrentMap: java.util.Set entrySet()>() in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Set entrySet()> ==> <java.util.concurrent.ConcurrentHashMap: java.util.Set entrySet()>
INTERFACE edge: r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>() in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Set entrySet()> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>() in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Set entrySet()> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2: java.util.Iterator iterator()>
INTERFACE edge: r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>() in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Set entrySet()> ==> <io.vertx.core.impl.ConcurrentHashSet: java.util.Iterator iterator()>
INTERFACE edge: r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>() in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Set entrySet()> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$1: java.util.Iterator iterator()>
INTERFACE edge: r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>() in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Set entrySet()> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Set entrySet()> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Set entrySet()> ==> <io.vertx.core.json.JsonArray$Iter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Set entrySet()> ==> <io.vertx.core.json.JsonObject$Iter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Set entrySet()> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Set entrySet()> ==> <java.util.Scanner: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Set entrySet()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Set entrySet()> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: boolean hasNext()>
INTERFACE edge: $r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Set entrySet()> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object next()>
INTERFACE edge: $r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Set entrySet()> ==> <io.vertx.core.json.JsonArray$Iter: java.lang.Object next()>
INTERFACE edge: $r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Set entrySet()> ==> <io.vertx.core.json.JsonObject$Iter: java.lang.Object next()>
INTERFACE edge: $r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Set entrySet()> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: java.lang.Object next()>
INTERFACE edge: $r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Set entrySet()> ==> <java.util.Scanner: java.lang.Object next()>
INTERFACE edge: $r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Set entrySet()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: java.lang.Object next()>
INTERFACE edge: $r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Set entrySet()> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: java.lang.Object next()>
SPECIAL edge: specialinvoke $r9.<io.vertx.core.shareddata.impl.LocalMapImpl$1: void <init>(io.vertx.core.shareddata.impl.LocalMapImpl,java.util.Map$Entry)>(r1, r8) in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Set entrySet()> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: void <init>(io.vertx.core.shareddata.impl.LocalMapImpl,java.util.Map$Entry)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.CharSequence getValue()>() in <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.CharSequence getValue()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.String getValue()>() in <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.String getValue()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.String getValue()>() in <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.String getValue()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getKey()> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getKey()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getKey()> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getKey()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getKey()> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getKey()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getKey()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getKey()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getKey()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getKey()> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getKey()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.json.JsonObject$Entry: java.lang.String getKey()>() in <io.vertx.core.json.JsonObject$Entry: java.lang.Object getKey()> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.String getKey()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.CharSequence getKey()>() in <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getKey()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.CharSequence getKey()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.String getKey()>() in <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getKey()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.String getKey()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.String getKey()>() in <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getKey()> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.String getKey()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.buffer.impl.BufferImpl: void <init>(io.netty.buffer.ByteBuf)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.json.JsonObject$Iter: java.util.Map$Entry next()> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.json.JsonObject$Iter: java.util.Map$Entry next()> ==> <io.vertx.core.json.JsonArray$Iter: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.json.JsonObject$Iter: java.util.Map$Entry next()> ==> <io.vertx.core.json.JsonObject$Iter: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.json.JsonObject$Iter: java.util.Map$Entry next()> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.json.JsonObject$Iter: java.util.Map$Entry next()> ==> <java.util.Scanner: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.json.JsonObject$Iter: java.util.Map$Entry next()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.json.JsonObject$Iter: java.util.Map$Entry next()> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: java.lang.Object next()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.json.JsonObject$Iter: java.util.Map$Entry next()> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.json.JsonObject$Iter: java.util.Map$Entry next()> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.json.JsonObject$Iter: java.util.Map$Entry next()> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.json.JsonObject$Iter: java.util.Map$Entry next()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.json.JsonObject$Iter: java.util.Map$Entry next()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.json.JsonObject$Iter: java.util.Map$Entry next()> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r13 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.json.JsonObject$Iter: java.util.Map$Entry next()> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getKey()>
INTERFACE edge: $r13 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.json.JsonObject$Iter: java.util.Map$Entry next()> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getKey()>
INTERFACE edge: $r13 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.json.JsonObject$Iter: java.util.Map$Entry next()> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>
INTERFACE edge: $r13 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.json.JsonObject$Iter: java.util.Map$Entry next()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getKey()>
INTERFACE edge: $r13 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.json.JsonObject$Iter: java.util.Map$Entry next()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getKey()>
INTERFACE edge: $r13 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.json.JsonObject$Iter: java.util.Map$Entry next()> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getKey()>
INTERFACE edge: $r16 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.json.JsonObject$Iter: java.util.Map$Entry next()> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r16 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.json.JsonObject$Iter: java.util.Map$Entry next()> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r16 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.json.JsonObject$Iter: java.util.Map$Entry next()> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r16 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.json.JsonObject$Iter: java.util.Map$Entry next()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r16 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.json.JsonObject$Iter: java.util.Map$Entry next()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r16 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.json.JsonObject$Iter: java.util.Map$Entry next()> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r5 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.json.JsonObject$Iter: java.util.Map$Entry next()> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r5 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.json.JsonObject$Iter: java.util.Map$Entry next()> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r5 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.json.JsonObject$Iter: java.util.Map$Entry next()> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r5 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.json.JsonObject$Iter: java.util.Map$Entry next()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r5 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.json.JsonObject$Iter: java.util.Map$Entry next()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r5 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.json.JsonObject$Iter: java.util.Map$Entry next()> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r7 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.json.JsonObject$Iter: java.util.Map$Entry next()> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getKey()>
INTERFACE edge: $r7 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.json.JsonObject$Iter: java.util.Map$Entry next()> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getKey()>
INTERFACE edge: $r7 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.json.JsonObject$Iter: java.util.Map$Entry next()> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>
INTERFACE edge: $r7 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.json.JsonObject$Iter: java.util.Map$Entry next()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getKey()>
INTERFACE edge: $r7 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.json.JsonObject$Iter: java.util.Map$Entry next()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getKey()>
INTERFACE edge: $r7 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.json.JsonObject$Iter: java.util.Map$Entry next()> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getKey()>
INTERFACE edge: $r10 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.json.JsonObject$Iter: java.util.Map$Entry next()> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r10 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.json.JsonObject$Iter: java.util.Map$Entry next()> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r10 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.json.JsonObject$Iter: java.util.Map$Entry next()> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r10 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.json.JsonObject$Iter: java.util.Map$Entry next()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r10 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.json.JsonObject$Iter: java.util.Map$Entry next()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r10 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.json.JsonObject$Iter: java.util.Map$Entry next()> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
SPECIAL edge: specialinvoke $r14.<io.vertx.core.json.JsonObject: void <init>(java.util.Map)>($r17) in <io.vertx.core.json.JsonObject$Iter: java.util.Map$Entry next()> ==> <io.vertx.core.json.JsonObject: void <init>(java.util.Map)>
SPECIAL edge: specialinvoke $r12.<io.vertx.core.json.JsonObject$Entry: void <init>(java.lang.String,java.lang.Object)>($r15, $r14) in <io.vertx.core.json.JsonObject$Iter: java.util.Map$Entry next()> ==> <io.vertx.core.json.JsonObject$Entry: void <init>(java.lang.String,java.lang.Object)>
SPECIAL edge: specialinvoke $r8.<io.vertx.core.json.JsonArray: void <init>(java.util.List)>($r11) in <io.vertx.core.json.JsonObject$Iter: java.util.Map$Entry next()> ==> <io.vertx.core.json.JsonArray: void <init>(java.util.List)>
SPECIAL edge: specialinvoke $r6.<io.vertx.core.json.JsonObject$Entry: void <init>(java.lang.String,java.lang.Object)>($r9, $r8) in <io.vertx.core.json.JsonObject$Iter: java.util.Map$Entry next()> ==> <io.vertx.core.json.JsonObject$Entry: void <init>(java.lang.String,java.lang.Object)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: io.netty.util.concurrent.EventExecutor next()> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: io.netty.util.concurrent.EventExecutor next()> ==> <io.vertx.core.json.JsonArray$Iter: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: io.netty.util.concurrent.EventExecutor next()> ==> <io.vertx.core.json.JsonObject$Iter: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: io.netty.util.concurrent.EventExecutor next()> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: io.netty.util.concurrent.EventExecutor next()> ==> <java.util.Scanner: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: io.netty.util.concurrent.EventExecutor next()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: io.netty.util.concurrent.EventExecutor next()> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: java.lang.String next()> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: java.lang.String next()> ==> <io.vertx.core.json.JsonArray$Iter: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: java.lang.String next()> ==> <io.vertx.core.json.JsonObject$Iter: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: java.lang.String next()> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: java.lang.String next()> ==> <java.util.Scanner: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: java.lang.String next()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: java.lang.String next()> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: java.lang.Object next()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.lang.CharSequence: java.lang.String toString()>() in <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: java.lang.String next()> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.lang.CharSequence: java.lang.String toString()>() in <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: java.lang.String next()> ==> <java.lang.String: java.lang.String toString()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.lang.CharSequence: java.lang.String toString()>() in <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: java.lang.String next()> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<java.lang.Thread: void <init>()>() in <io.vertx.core.Starter$1: void <init>(io.vertx.core.Starter)> ==> <java.lang.Thread: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.file.FileSystemOptions: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: void <init>()>() in <io.vertx.core.eventbus.EventBusOptions: void <init>()> ==> <io.vertx.core.net.TCPSSLOptions: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.dns.AddressResolverOptions: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String trim()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("clusterPort p must be in range 0 <= p <= 65535") in <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setPort(int)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
INTERFACE edge: $z0 = interfaceinvoke $r1.<io.vertx.core.AsyncResult: boolean succeeded()>() in <io.vertx.core.AsyncResult$1: boolean succeeded()> ==> <io.vertx.core.impl.FutureImpl: boolean succeeded()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<io.vertx.core.AsyncResult: boolean succeeded()>() in <io.vertx.core.AsyncResult$1: boolean succeeded()> ==> <io.vertx.core.impl.FailedFuture: boolean succeeded()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<io.vertx.core.AsyncResult: boolean succeeded()>() in <io.vertx.core.AsyncResult$1: boolean succeeded()> ==> <io.vertx.core.AsyncResult$1: boolean succeeded()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<io.vertx.core.AsyncResult: boolean succeeded()>() in <io.vertx.core.AsyncResult$1: boolean succeeded()> ==> <io.vertx.core.AsyncResult$2: boolean succeeded()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<io.vertx.core.AsyncResult: boolean succeeded()>() in <io.vertx.core.AsyncResult$1: boolean succeeded()> ==> <io.vertx.core.impl.CompositeFutureImpl: boolean succeeded()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<io.vertx.core.AsyncResult: boolean succeeded()>() in <io.vertx.core.AsyncResult$1: boolean succeeded()> ==> <io.vertx.core.impl.SucceededFuture: boolean succeeded()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<io.vertx.core.AsyncResult: boolean succeeded()>() in <io.vertx.core.AsyncResult$2: boolean succeeded()> ==> <io.vertx.core.impl.FutureImpl: boolean succeeded()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<io.vertx.core.AsyncResult: boolean succeeded()>() in <io.vertx.core.AsyncResult$2: boolean succeeded()> ==> <io.vertx.core.impl.FailedFuture: boolean succeeded()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<io.vertx.core.AsyncResult: boolean succeeded()>() in <io.vertx.core.AsyncResult$2: boolean succeeded()> ==> <io.vertx.core.AsyncResult$1: boolean succeeded()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<io.vertx.core.AsyncResult: boolean succeeded()>() in <io.vertx.core.AsyncResult$2: boolean succeeded()> ==> <io.vertx.core.AsyncResult$2: boolean succeeded()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<io.vertx.core.AsyncResult: boolean succeeded()>() in <io.vertx.core.AsyncResult$2: boolean succeeded()> ==> <io.vertx.core.impl.CompositeFutureImpl: boolean succeeded()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<io.vertx.core.AsyncResult: boolean succeeded()>() in <io.vertx.core.AsyncResult$2: boolean succeeded()> ==> <io.vertx.core.impl.SucceededFuture: boolean succeeded()>
INTERFACE edge: $z1 = interfaceinvoke $r2.<io.vertx.core.AsyncResult: boolean failed()>() in <io.vertx.core.AsyncResult$2: boolean succeeded()> ==> <io.vertx.core.impl.FutureImpl: boolean failed()>
INTERFACE edge: $z1 = interfaceinvoke $r2.<io.vertx.core.AsyncResult: boolean failed()>() in <io.vertx.core.AsyncResult$2: boolean succeeded()> ==> <io.vertx.core.impl.FailedFuture: boolean failed()>
INTERFACE edge: $z1 = interfaceinvoke $r2.<io.vertx.core.AsyncResult: boolean failed()>() in <io.vertx.core.AsyncResult$2: boolean succeeded()> ==> <io.vertx.core.AsyncResult$1: boolean failed()>
INTERFACE edge: $z1 = interfaceinvoke $r2.<io.vertx.core.AsyncResult: boolean failed()>() in <io.vertx.core.AsyncResult$2: boolean succeeded()> ==> <io.vertx.core.AsyncResult$2: boolean failed()>
INTERFACE edge: $z1 = interfaceinvoke $r2.<io.vertx.core.AsyncResult: boolean failed()>() in <io.vertx.core.AsyncResult$2: boolean succeeded()> ==> <io.vertx.core.impl.CompositeFutureImpl: boolean failed()>
INTERFACE edge: $z1 = interfaceinvoke $r2.<io.vertx.core.AsyncResult: boolean failed()>() in <io.vertx.core.AsyncResult$2: boolean succeeded()> ==> <io.vertx.core.impl.SucceededFuture: boolean failed()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[])> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.spi.logging.LogDelegate: void debug(java.lang.Object,java.lang.Throwable)>(r1, r2) in <io.vertx.core.logging.Logger: void debug(java.lang.Object,java.lang.Throwable)> ==> <io.vertx.core.logging.Log4jLogDelegate: void debug(java.lang.Object,java.lang.Throwable)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.spi.logging.LogDelegate: void debug(java.lang.Object,java.lang.Throwable)>(r1, r2) in <io.vertx.core.logging.Logger: void debug(java.lang.Object,java.lang.Throwable)> ==> <io.vertx.core.logging.SLF4JLogDelegate: void debug(java.lang.Object,java.lang.Throwable)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.spi.logging.LogDelegate: void debug(java.lang.Object,java.lang.Throwable)>(r1, r2) in <io.vertx.core.logging.Logger: void debug(java.lang.Object,java.lang.Throwable)> ==> <io.vertx.core.logging.JULLogDelegate: void debug(java.lang.Object,java.lang.Throwable)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.spi.logging.LogDelegate: void debug(java.lang.Object,java.lang.Throwable)>(r1, r2) in <io.vertx.core.logging.Logger: void debug(java.lang.Object,java.lang.Throwable)> ==> <io.vertx.core.logging.Log4j2LogDelegate: void debug(java.lang.Object,java.lang.Throwable)>
CLINIT edge: $r3 = <java.util.logging.Level: java.util.logging.Level FINE> in <io.vertx.core.logging.JULLogDelegate: void debug(java.lang.Object,java.lang.Throwable)> ==> <java.util.logging.Level: void <clinit>()>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0) in <io.vertx.core.http.ClientAuth: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
FINALIZE edge: null in <java.lang.Enum: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void finalize()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.logging.Log4jLogDelegate: void log(org.apache.log4j.Level,java.lang.Object)>($r2, r1) in <io.vertx.core.logging.Log4jLogDelegate: void warn(java.lang.Object)> ==> <io.vertx.core.logging.Log4jLogDelegate: void log(org.apache.log4j.Level,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object)>(30, r1) in <io.vertx.core.logging.SLF4JLogDelegate: void warn(java.lang.Object)> ==> <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object)>($r2, r1) in <io.vertx.core.logging.JULLogDelegate: void warn(java.lang.Object)> ==> <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.logging.Log4j2LogDelegate: void log(org.apache.logging.log4j.Level,java.lang.Object)>($r2, r1) in <io.vertx.core.logging.Log4j2LogDelegate: void warn(java.lang.Object)> ==> <io.vertx.core.logging.Log4j2LogDelegate: void log(org.apache.logging.log4j.Level,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>(java.lang.String)>(r1) in <io.vertx.core.json.DecodeException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r5.<io.vertx.core.impl.DeploymentManager: void deployVerticle(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)>(r1, r2, r4) in <io.vertx.core.impl.HAManager: void doDeployVerticle(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)> ==> <io.vertx.core.impl.DeploymentManager: void deployVerticle(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)>
INTERFACE edge: interfaceinvoke $r4.<java.util.Queue: boolean add(java.lang.Object)>($r5) in <io.vertx.core.impl.HAManager: void addToHADeployList(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)> ==> <java.util.ArrayDeque: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<java.util.Queue: boolean add(java.lang.Object)>($r5) in <io.vertx.core.impl.HAManager: void addToHADeployList(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<java.util.Queue: boolean add(java.lang.Object)>($r5) in <io.vertx.core.impl.HAManager: void addToHADeployList(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)> ==> <java.util.concurrent.ConcurrentLinkedQueue: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke $r4.<io.vertx.core.impl.HAManager$lambda_doDeployVerticle_4__7: void <init>(io.vertx.core.impl.HAManager,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)>($r0, $r1, $r2, $r3) in <io.vertx.core.impl.HAManager$lambda_doDeployVerticle_4__7: io.vertx.core.Handler bootstrap$(io.vertx.core.impl.HAManager,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)> ==> <io.vertx.core.impl.HAManager$lambda_doDeployVerticle_4__7: void <init>(io.vertx.core.impl.HAManager,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)>
SPECIAL edge: specialinvoke $r4.<io.vertx.core.impl.HAManager$lambda_addToHADeployList_7__8: void <init>(io.vertx.core.impl.HAManager,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)>($r0, $r1, $r2, $r3) in <io.vertx.core.impl.HAManager$lambda_addToHADeployList_7__8: java.lang.Runnable bootstrap$(io.vertx.core.impl.HAManager,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)> ==> <io.vertx.core.impl.HAManager$lambda_addToHADeployList_7__8: void <init>(io.vertx.core.impl.HAManager,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.impl.VertxImpl: io.vertx.core.impl.ContextImpl getOrCreateContext()>() in <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.ContextInternal getOrCreateContext()> ==> <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.ContextImpl getOrCreateContext()>
STATIC edge: $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() in <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.ContextImpl getOrCreateContext()> ==> <java.lang.Thread: java.lang.Thread currentThread()>
VIRTUAL edge: r1 = virtualinvoke r0.<io.vertx.core.DeploymentOptions: java.lang.String getIsolationGroup()>() in <io.vertx.core.impl.DeploymentManager: java.lang.ClassLoader getClassLoader(io.vertx.core.DeploymentOptions)> ==> <io.vertx.core.DeploymentOptions: java.lang.String getIsolationGroup()>
VIRTUAL edge: r10 = virtualinvoke r0.<io.vertx.core.DeploymentOptions: java.util.List getExtraClasspath()>() in <io.vertx.core.impl.DeploymentManager: java.lang.ClassLoader getClassLoader(io.vertx.core.DeploymentOptions)> ==> <io.vertx.core.DeploymentOptions: java.util.List getExtraClasspath()>
VIRTUAL edge: $r18 = virtualinvoke r0.<io.vertx.core.DeploymentOptions: java.util.List getIsolatedClasses()>() in <io.vertx.core.impl.DeploymentManager: java.lang.ClassLoader getClassLoader(io.vertx.core.DeploymentOptions)> ==> <io.vertx.core.DeploymentOptions: java.util.List getIsolatedClasses()>
SPECIAL edge: r31 = specialinvoke r2.<io.vertx.core.impl.DeploymentManager: java.lang.ClassLoader getCurrentClassLoader()>() in <io.vertx.core.impl.DeploymentManager: java.lang.ClassLoader getClassLoader(io.vertx.core.DeploymentOptions)> ==> <io.vertx.core.impl.DeploymentManager: java.lang.ClassLoader getCurrentClassLoader()>
SPECIAL edge: r7 = specialinvoke r2.<io.vertx.core.impl.DeploymentManager: java.lang.ClassLoader getCurrentClassLoader()>() in <io.vertx.core.impl.DeploymentManager: java.lang.ClassLoader getClassLoader(io.vertx.core.DeploymentOptions)> ==> <io.vertx.core.impl.DeploymentManager: java.lang.ClassLoader getCurrentClassLoader()>
SPECIAL edge: $r17 = specialinvoke r2.<io.vertx.core.impl.DeploymentManager: java.lang.ClassLoader getCurrentClassLoader()>() in <io.vertx.core.impl.DeploymentManager: java.lang.ClassLoader getClassLoader(io.vertx.core.DeploymentOptions)> ==> <io.vertx.core.impl.DeploymentManager: java.lang.ClassLoader getCurrentClassLoader()>
INTERFACE edge: $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <io.vertx.core.impl.DeploymentManager: java.lang.ClassLoader getClassLoader(io.vertx.core.DeploymentOptions)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <io.vertx.core.impl.DeploymentManager: java.lang.ClassLoader getClassLoader(io.vertx.core.DeploymentOptions)> ==> <java.util.IdentityHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <io.vertx.core.impl.DeploymentManager: java.lang.ClassLoader getClassLoader(io.vertx.core.DeploymentOptions)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <io.vertx.core.impl.DeploymentManager: java.lang.ClassLoader getClassLoader(io.vertx.core.DeploymentOptions)> ==> <java.util.EnumMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <io.vertx.core.impl.DeploymentManager: java.lang.ClassLoader getClassLoader(io.vertx.core.DeploymentOptions)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <io.vertx.core.impl.DeploymentManager: java.lang.ClassLoader getClassLoader(io.vertx.core.DeploymentOptions)> ==> <java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <io.vertx.core.impl.DeploymentManager: java.lang.ClassLoader getClassLoader(io.vertx.core.DeploymentOptions)> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <io.vertx.core.impl.DeploymentManager: java.lang.ClassLoader getClassLoader(io.vertx.core.DeploymentOptions)> ==> <java.util.TreeMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <io.vertx.core.impl.DeploymentManager: java.lang.ClassLoader getClassLoader(io.vertx.core.DeploymentOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <io.vertx.core.impl.DeploymentManager: java.lang.ClassLoader getClassLoader(io.vertx.core.DeploymentOptions)> ==> <java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>
SPECIAL edge: specialinvoke $r36.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Current classloader must be URLClassLoader") in <io.vertx.core.impl.DeploymentManager: java.lang.ClassLoader getClassLoader(io.vertx.core.DeploymentOptions)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r37.<java.util.ArrayList: void <init>()>() in <io.vertx.core.impl.DeploymentManager: java.lang.ClassLoader getClassLoader(io.vertx.core.DeploymentOptions)> ==> <java.util.ArrayList: void <init>()>
INTERFACE edge: interfaceinvoke $r37.<java.util.List: boolean add(java.lang.Object)>(r33) in <io.vertx.core.impl.DeploymentManager: java.lang.ClassLoader getClassLoader(io.vertx.core.DeploymentOptions)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r37.<java.util.List: boolean addAll(java.util.Collection)>($r12) in <io.vertx.core.impl.DeploymentManager: java.lang.ClassLoader getClassLoader(io.vertx.core.DeploymentOptions)> ==> <java.util.ArrayList: boolean addAll(java.util.Collection)>
INTERFACE edge: $i0 = interfaceinvoke $r37.<java.util.List: int size()>() in <io.vertx.core.impl.DeploymentManager: java.lang.ClassLoader getClassLoader(io.vertx.core.DeploymentOptions)> ==> <java.util.ArrayList: int size()>
INTERFACE edge: $r15 = interfaceinvoke $r37.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r14) in <io.vertx.core.impl.DeploymentManager: java.lang.ClassLoader getClassLoader(io.vertx.core.DeploymentOptions)> ==> <java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>
INTERFACE edge: r32 = interfaceinvoke r10.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.impl.DeploymentManager: java.lang.ClassLoader getClassLoader(io.vertx.core.DeploymentOptions)> ==> <java.util.AbstractList: java.util.Iterator iterator()>
INTERFACE edge: r32 = interfaceinvoke r10.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.impl.DeploymentManager: java.lang.ClassLoader getClassLoader(io.vertx.core.DeploymentOptions)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r32 = interfaceinvoke r10.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.impl.DeploymentManager: java.lang.ClassLoader getClassLoader(io.vertx.core.DeploymentOptions)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
INTERFACE edge: r32 = interfaceinvoke r10.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.impl.DeploymentManager: java.lang.ClassLoader getClassLoader(io.vertx.core.DeploymentOptions)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z2 = interfaceinvoke r32.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.DeploymentManager: java.lang.ClassLoader getClassLoader(io.vertx.core.DeploymentOptions)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: boolean hasNext()>
INTERFACE edge: $z2 = interfaceinvoke r32.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.DeploymentManager: java.lang.ClassLoader getClassLoader(io.vertx.core.DeploymentOptions)> ==> <io.vertx.core.json.JsonArray$Iter: boolean hasNext()>
INTERFACE edge: $z2 = interfaceinvoke r32.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.DeploymentManager: java.lang.ClassLoader getClassLoader(io.vertx.core.DeploymentOptions)> ==> <io.vertx.core.json.JsonObject$Iter: boolean hasNext()>
INTERFACE edge: $z2 = interfaceinvoke r32.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.DeploymentManager: java.lang.ClassLoader getClassLoader(io.vertx.core.DeploymentOptions)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: boolean hasNext()>
INTERFACE edge: $z2 = interfaceinvoke r32.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.DeploymentManager: java.lang.ClassLoader getClassLoader(io.vertx.core.DeploymentOptions)> ==> <java.util.Scanner: boolean hasNext()>
INTERFACE edge: $z2 = interfaceinvoke r32.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.DeploymentManager: java.lang.ClassLoader getClassLoader(io.vertx.core.DeploymentOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: boolean hasNext()>
INTERFACE edge: $z2 = interfaceinvoke r32.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.DeploymentManager: java.lang.ClassLoader getClassLoader(io.vertx.core.DeploymentOptions)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: boolean hasNext()>
INTERFACE edge: $r21 = interfaceinvoke r32.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.DeploymentManager: java.lang.ClassLoader getClassLoader(io.vertx.core.DeploymentOptions)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object next()>
INTERFACE edge: $r21 = interfaceinvoke r32.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.DeploymentManager: java.lang.ClassLoader getClassLoader(io.vertx.core.DeploymentOptions)> ==> <io.vertx.core.json.JsonArray$Iter: java.lang.Object next()>
INTERFACE edge: $r21 = interfaceinvoke r32.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.DeploymentManager: java.lang.ClassLoader getClassLoader(io.vertx.core.DeploymentOptions)> ==> <io.vertx.core.json.JsonObject$Iter: java.lang.Object next()>
INTERFACE edge: $r21 = interfaceinvoke r32.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.DeploymentManager: java.lang.ClassLoader getClassLoader(io.vertx.core.DeploymentOptions)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: java.lang.Object next()>
INTERFACE edge: $r21 = interfaceinvoke r32.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.DeploymentManager: java.lang.ClassLoader getClassLoader(io.vertx.core.DeploymentOptions)> ==> <java.util.Scanner: java.lang.Object next()>
INTERFACE edge: $r21 = interfaceinvoke r32.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.DeploymentManager: java.lang.ClassLoader getClassLoader(io.vertx.core.DeploymentOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: java.lang.Object next()>
INTERFACE edge: $r21 = interfaceinvoke r32.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.DeploymentManager: java.lang.ClassLoader getClassLoader(io.vertx.core.DeploymentOptions)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: java.lang.Object next()>
SPECIAL edge: specialinvoke $r38.<java.io.File: void <init>(java.lang.String)>(r22) in <io.vertx.core.impl.DeploymentManager: java.lang.ClassLoader getClassLoader(io.vertx.core.DeploymentOptions)> ==> <java.io.File: void <init>(java.lang.String)>
VIRTUAL edge: $r25 = virtualinvoke $r38.<java.io.File: java.net.URI toURI()>() in <io.vertx.core.impl.DeploymentManager: java.lang.ClassLoader getClassLoader(io.vertx.core.DeploymentOptions)> ==> <java.io.File: java.net.URI toURI()>
VIRTUAL edge: r33 = virtualinvoke $r25.<java.net.URI: java.net.URL toURL()>() in <io.vertx.core.impl.DeploymentManager: java.lang.ClassLoader getClassLoader(io.vertx.core.DeploymentOptions)> ==> <java.net.URI: java.net.URL toURL()>
SPECIAL edge: specialinvoke $r39.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r29) in <io.vertx.core.impl.DeploymentManager: java.lang.ClassLoader getClassLoader(io.vertx.core.DeploymentOptions)> ==> <java.lang.IllegalStateException: void <init>(java.lang.Throwable)>
VIRTUAL edge: $r11 = virtualinvoke r35.<java.net.URLClassLoader: java.net.URL[] getURLs()>() in <io.vertx.core.impl.DeploymentManager: java.lang.ClassLoader getClassLoader(io.vertx.core.DeploymentOptions)> ==> <java.net.URLClassLoader: java.net.URL[] getURLs()>
SPECIAL edge: specialinvoke $r40.<io.vertx.core.impl.IsolatingClassLoader: void <init>(java.net.URL[],java.lang.ClassLoader,java.util.List)>($r16, $r17, $r18) in <io.vertx.core.impl.DeploymentManager: java.lang.ClassLoader getClassLoader(io.vertx.core.DeploymentOptions)> ==> <io.vertx.core.impl.IsolatingClassLoader: void <init>(java.net.URL[],java.lang.ClassLoader,java.util.List)>
INTERFACE edge: interfaceinvoke $r19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r40) in <io.vertx.core.impl.DeploymentManager: java.lang.ClassLoader getClassLoader(io.vertx.core.DeploymentOptions)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r40) in <io.vertx.core.impl.DeploymentManager: java.lang.ClassLoader getClassLoader(io.vertx.core.DeploymentOptions)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r40) in <io.vertx.core.impl.DeploymentManager: java.lang.ClassLoader getClassLoader(io.vertx.core.DeploymentOptions)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r40) in <io.vertx.core.impl.DeploymentManager: java.lang.ClassLoader getClassLoader(io.vertx.core.DeploymentOptions)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r40) in <io.vertx.core.impl.DeploymentManager: java.lang.ClassLoader getClassLoader(io.vertx.core.DeploymentOptions)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r40) in <io.vertx.core.impl.DeploymentManager: java.lang.ClassLoader getClassLoader(io.vertx.core.DeploymentOptions)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r40) in <io.vertx.core.impl.DeploymentManager: java.lang.ClassLoader getClassLoader(io.vertx.core.DeploymentOptions)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r40) in <io.vertx.core.impl.DeploymentManager: java.lang.ClassLoader getClassLoader(io.vertx.core.DeploymentOptions)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r40) in <io.vertx.core.impl.DeploymentManager: java.lang.ClassLoader getClassLoader(io.vertx.core.DeploymentOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r40) in <io.vertx.core.impl.DeploymentManager: java.lang.ClassLoader getClassLoader(io.vertx.core.DeploymentOptions)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
STATIC edge: $r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() in <io.vertx.core.impl.DeploymentManager: java.lang.ClassLoader getCurrentClassLoader()> ==> <java.lang.Thread: java.lang.Thread currentThread()>
SPECIAL edge: r2 = specialinvoke r0.<io.vertx.core.impl.DeploymentManager: java.util.List resolveFactories(java.lang.String)>(r1) in <io.vertx.core.impl.DeploymentManager: void doDeployVerticle(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.lang.ClassLoader,io.vertx.core.Handler)> ==> <io.vertx.core.impl.DeploymentManager: java.util.List resolveFactories(java.lang.String)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.impl.DeploymentManager: void doDeployVerticle(java.util.Iterator,java.lang.Throwable,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.lang.ClassLoader,io.vertx.core.Handler)>(r3, null, r1, r4, r5, r6, r7, r8) in <io.vertx.core.impl.DeploymentManager: void doDeployVerticle(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.lang.ClassLoader,io.vertx.core.Handler)> ==> <io.vertx.core.impl.DeploymentManager: void doDeployVerticle(java.util.Iterator,java.lang.Throwable,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.lang.ClassLoader,io.vertx.core.Handler)>
INTERFACE edge: r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.impl.DeploymentManager: void doDeployVerticle(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.lang.ClassLoader,io.vertx.core.Handler)> ==> <java.util.AbstractList: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.impl.DeploymentManager: void doDeployVerticle(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.lang.ClassLoader,io.vertx.core.Handler)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.impl.DeploymentManager: void doDeployVerticle(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.lang.ClassLoader,io.vertx.core.Handler)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.impl.DeploymentManager: void doDeployVerticle(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.lang.ClassLoader,io.vertx.core.Handler)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
CLINIT edge: r7 = staticinvoke <io.vertx.core.Future: io.vertx.core.Future future()>() in <io.vertx.core.impl.DeploymentManager: void doDeployVerticle(java.util.Iterator,java.lang.Throwable,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.lang.ClassLoader,io.vertx.core.Handler)> ==> <io.vertx.core.Future: void <clinit>()>
STATIC edge: $r17 = staticinvoke <io.vertx.core.impl.DeploymentManager$lambda_doDeployVerticle_2__17: io.vertx.core.Handler bootstrap$(io.vertx.core.impl.DeploymentManager,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.spi.VerticleFactory,java.lang.ClassLoader,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.util.Iterator)>(r2, r8, r9, r4, r6, r10, r11, r3, r0) in <io.vertx.core.impl.DeploymentManager: void doDeployVerticle(java.util.Iterator,java.lang.Throwable,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.lang.ClassLoader,io.vertx.core.Handler)> ==> <io.vertx.core.impl.DeploymentManager$lambda_doDeployVerticle_2__17: io.vertx.core.Handler bootstrap$(io.vertx.core.impl.DeploymentManager,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.spi.VerticleFactory,java.lang.ClassLoader,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.util.Iterator)>
STATIC edge: r7 = staticinvoke <io.vertx.core.Future: io.vertx.core.Future future()>() in <io.vertx.core.impl.DeploymentManager: void doDeployVerticle(java.util.Iterator,java.lang.Throwable,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.lang.ClassLoader,io.vertx.core.Handler)> ==> <io.vertx.core.Future: io.vertx.core.Future future()>
CLINIT edge: <io.vertx.core.Future: io.vertx.core.spi.FutureFactory factory> = $r1 in <io.vertx.core.Future: void <clinit>()> ==> <io.vertx.core.Future: void <clinit>()>
STATIC edge: $r0 = staticinvoke <io.vertx.core.ServiceHelper: java.lang.Object loadFactory(java.lang.Class)>(class "Lio/vertx/core/spi/FutureFactory;") in <io.vertx.core.Future: void <clinit>()> ==> <io.vertx.core.ServiceHelper: java.lang.Object loadFactory(java.lang.Class)>
CLINIT edge: $r0 = <io.vertx.core.Future: io.vertx.core.spi.FutureFactory factory> in <io.vertx.core.Future: io.vertx.core.Future future()> ==> <io.vertx.core.Future: void <clinit>()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<io.vertx.core.eventbus.EventBusOptions: boolean isClustered()>() in <io.vertx.core.VertxOptions: boolean isClustered()> ==> <io.vertx.core.eventbus.EventBusOptions: boolean isClustered()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.impl.VertxImpl: io.vertx.core.file.FileSystem getFileSystem()>() in <io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)> ==> <io.vertx.core.impl.VertxImpl: io.vertx.core.file.FileSystem getFileSystem()>
SPECIAL edge: $r24 = specialinvoke r0.<io.vertx.core.impl.VertxImpl: io.vertx.core.spi.metrics.VertxMetrics initialiseMetrics(io.vertx.core.VertxOptions)>(r10) in <io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)> ==> <io.vertx.core.impl.VertxImpl: io.vertx.core.spi.metrics.VertxMetrics initialiseMetrics(io.vertx.core.VertxOptions)>
SPECIAL edge: $r50 = specialinvoke r0.<io.vertx.core.impl.VertxImpl: io.vertx.core.spi.cluster.ClusterManager getClusterManager(io.vertx.core.VertxOptions)>(r10) in <io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)> ==> <io.vertx.core.impl.VertxImpl: io.vertx.core.spi.cluster.ClusterManager getClusterManager(io.vertx.core.VertxOptions)>
SPECIAL edge: specialinvoke $r2.<java.util.concurrent.ConcurrentHashMap: void <init>()>() in <io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)> ==> <java.util.concurrent.ConcurrentHashMap: void <init>()>
SPECIAL edge: specialinvoke $r3.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(0L) in <io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)> ==> <java.util.concurrent.atomic.AtomicLong: void <init>(long)>
SPECIAL edge: specialinvoke $r4.<java.util.HashMap: void <init>()>() in <io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)> ==> <java.util.HashMap: void <init>()>
SPECIAL edge: specialinvoke $r5.<java.util.HashMap: void <init>()>() in <io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)> ==> <java.util.HashMap: void <init>()>
VIRTUAL edge: virtualinvoke $r55.<io.vertx.core.logging.Logger: void warn(java.lang.Object)>("You\'re already on a Vert.x context, are you sure you want to create a new Vertx instance?") in <io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)> ==> <io.vertx.core.logging.Logger: void warn(java.lang.Object)>
SPECIAL edge: specialinvoke $r7.<io.vertx.core.impl.CloseHooks: void <init>(io.vertx.core.logging.Logger)>($r8) in <io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)> ==> <io.vertx.core.impl.CloseHooks: void <init>(io.vertx.core.logging.Logger)>
VIRTUAL edge: $l0 = virtualinvoke r10.<io.vertx.core.VertxOptions: long getBlockedThreadCheckInterval()>() in <io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)> ==> <io.vertx.core.VertxOptions: long getBlockedThreadCheckInterval()>
VIRTUAL edge: $r11 = virtualinvoke r10.<io.vertx.core.VertxOptions: java.util.concurrent.TimeUnit getBlockedThreadCheckIntervalUnit()>() in <io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)> ==> <io.vertx.core.VertxOptions: java.util.concurrent.TimeUnit getBlockedThreadCheckIntervalUnit()>
VIRTUAL edge: $l1 = virtualinvoke r10.<io.vertx.core.VertxOptions: long getWarningExceptionTime()>() in <io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)> ==> <io.vertx.core.VertxOptions: long getWarningExceptionTime()>
VIRTUAL edge: $r12 = virtualinvoke r10.<io.vertx.core.VertxOptions: java.util.concurrent.TimeUnit getWarningExceptionTimeUnit()>() in <io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)> ==> <io.vertx.core.VertxOptions: java.util.concurrent.TimeUnit getWarningExceptionTimeUnit()>
VIRTUAL edge: $l2 = virtualinvoke r10.<io.vertx.core.VertxOptions: long getMaxEventLoopExecuteTime()>() in <io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)> ==> <io.vertx.core.VertxOptions: long getMaxEventLoopExecuteTime()>
VIRTUAL edge: $r15 = virtualinvoke r10.<io.vertx.core.VertxOptions: java.util.concurrent.TimeUnit getMaxEventLoopExecuteTimeUnit()>() in <io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)> ==> <io.vertx.core.VertxOptions: java.util.concurrent.TimeUnit getMaxEventLoopExecuteTimeUnit()>
VIRTUAL edge: $i3 = virtualinvoke r10.<io.vertx.core.VertxOptions: int getEventLoopPoolSize()>() in <io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)> ==> <io.vertx.core.VertxOptions: int getEventLoopPoolSize()>
VIRTUAL edge: $l5 = virtualinvoke r10.<io.vertx.core.VertxOptions: long getMaxEventLoopExecuteTime()>() in <io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)> ==> <io.vertx.core.VertxOptions: long getMaxEventLoopExecuteTime()>
VIRTUAL edge: $r21 = virtualinvoke r10.<io.vertx.core.VertxOptions: java.util.concurrent.TimeUnit getMaxEventLoopExecuteTimeUnit()>() in <io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)> ==> <io.vertx.core.VertxOptions: java.util.concurrent.TimeUnit getMaxEventLoopExecuteTimeUnit()>
VIRTUAL edge: $i6 = virtualinvoke r10.<io.vertx.core.VertxOptions: int getWorkerPoolSize()>() in <io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)> ==> <io.vertx.core.VertxOptions: int getWorkerPoolSize()>
VIRTUAL edge: $l7 = virtualinvoke r10.<io.vertx.core.VertxOptions: long getMaxWorkerExecuteTime()>() in <io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)> ==> <io.vertx.core.VertxOptions: long getMaxWorkerExecuteTime()>
VIRTUAL edge: $r27 = virtualinvoke r10.<io.vertx.core.VertxOptions: java.util.concurrent.TimeUnit getMaxWorkerExecuteTimeUnit()>() in <io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)> ==> <io.vertx.core.VertxOptions: java.util.concurrent.TimeUnit getMaxWorkerExecuteTimeUnit()>
VIRTUAL edge: $i13 = virtualinvoke r10.<io.vertx.core.VertxOptions: int getWorkerPoolSize()>() in <io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)> ==> <io.vertx.core.VertxOptions: int getWorkerPoolSize()>
VIRTUAL edge: $i8 = virtualinvoke r10.<io.vertx.core.VertxOptions: int getInternalBlockingPoolSize()>() in <io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)> ==> <io.vertx.core.VertxOptions: int getInternalBlockingPoolSize()>
VIRTUAL edge: $l9 = virtualinvoke r10.<io.vertx.core.VertxOptions: long getMaxWorkerExecuteTime()>() in <io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)> ==> <io.vertx.core.VertxOptions: long getMaxWorkerExecuteTime()>
VIRTUAL edge: $r33 = virtualinvoke r10.<io.vertx.core.VertxOptions: java.util.concurrent.TimeUnit getMaxWorkerExecuteTimeUnit()>() in <io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)> ==> <io.vertx.core.VertxOptions: java.util.concurrent.TimeUnit getMaxWorkerExecuteTimeUnit()>
VIRTUAL edge: $i12 = virtualinvoke r10.<io.vertx.core.VertxOptions: int getInternalBlockingPoolSize()>() in <io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)> ==> <io.vertx.core.VertxOptions: int getInternalBlockingPoolSize()>
VIRTUAL edge: $i10 = virtualinvoke r10.<io.vertx.core.VertxOptions: int getWorkerPoolSize()>() in <io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)> ==> <io.vertx.core.VertxOptions: int getWorkerPoolSize()>
VIRTUAL edge: $l11 = virtualinvoke r10.<io.vertx.core.VertxOptions: long getMaxWorkerExecuteTime()>() in <io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)> ==> <io.vertx.core.VertxOptions: long getMaxWorkerExecuteTime()>
VIRTUAL edge: $r40 = virtualinvoke r10.<io.vertx.core.VertxOptions: java.util.concurrent.TimeUnit getMaxWorkerExecuteTimeUnit()>() in <io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)> ==> <io.vertx.core.VertxOptions: java.util.concurrent.TimeUnit getMaxWorkerExecuteTimeUnit()>
VIRTUAL edge: $r42 = virtualinvoke r10.<io.vertx.core.VertxOptions: io.vertx.core.file.FileSystemOptions getFileSystemOptions()>() in <io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)> ==> <io.vertx.core.VertxOptions: io.vertx.core.file.FileSystemOptions getFileSystemOptions()>
VIRTUAL edge: $r43 = virtualinvoke r10.<io.vertx.core.VertxOptions: io.vertx.core.dns.AddressResolverOptions getAddressResolverOptions()>() in <io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)> ==> <io.vertx.core.VertxOptions: io.vertx.core.dns.AddressResolverOptions getAddressResolverOptions()>
VIRTUAL edge: $r45 = virtualinvoke r10.<io.vertx.core.VertxOptions: io.vertx.core.dns.AddressResolverOptions getAddressResolverOptions()>() in <io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)> ==> <io.vertx.core.VertxOptions: io.vertx.core.dns.AddressResolverOptions getAddressResolverOptions()>
VIRTUAL edge: $z0 = virtualinvoke r10.<io.vertx.core.VertxOptions: boolean isClustered()>() in <io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)> ==> <io.vertx.core.VertxOptions: boolean isClustered()>
SPECIAL edge: specialinvoke $r9.<io.vertx.core.impl.BlockedThreadChecker: void <init>(long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>($l0, $r11, $l1, $r12) in <io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)> ==> <io.vertx.core.impl.BlockedThreadChecker: void <init>(long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>
SPECIAL edge: specialinvoke $r13.<io.vertx.core.impl.VertxThreadFactory: void <init>(java.lang.String,io.vertx.core.impl.BlockedThreadChecker,boolean,long,java.util.concurrent.TimeUnit)>("vert.x-eventloop-thread-", $r14, 0, $l2, $r15) in <io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)> ==> <io.vertx.core.impl.VertxThreadFactory: void <init>(java.lang.String,io.vertx.core.impl.BlockedThreadChecker,boolean,long,java.util.concurrent.TimeUnit)>
VIRTUAL edge: $r18 = virtualinvoke r16.<io.vertx.core.net.impl.transport.Transport: io.netty.channel.EventLoopGroup eventLoopGroup(int,java.util.concurrent.ThreadFactory,int)>($i3, $r17, $i4) in <io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)> ==> <io.vertx.core.net.impl.transport.EpollTransport: io.netty.channel.EventLoopGroup eventLoopGroup(int,java.util.concurrent.ThreadFactory,int)>
VIRTUAL edge: $r18 = virtualinvoke r16.<io.vertx.core.net.impl.transport.Transport: io.netty.channel.EventLoopGroup eventLoopGroup(int,java.util.concurrent.ThreadFactory,int)>($i3, $r17, $i4) in <io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)> ==> <io.vertx.core.net.impl.transport.KQueueTransport: io.netty.channel.EventLoopGroup eventLoopGroup(int,java.util.concurrent.ThreadFactory,int)>
VIRTUAL edge: $r18 = virtualinvoke r16.<io.vertx.core.net.impl.transport.Transport: io.netty.channel.EventLoopGroup eventLoopGroup(int,java.util.concurrent.ThreadFactory,int)>($i3, $r17, $i4) in <io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)> ==> <io.vertx.core.net.impl.transport.Transport: io.netty.channel.EventLoopGroup eventLoopGroup(int,java.util.concurrent.ThreadFactory,int)>
VIRTUAL edge: $r23 = virtualinvoke r16.<io.vertx.core.net.impl.transport.Transport: io.netty.channel.EventLoopGroup eventLoopGroup(int,java.util.concurrent.ThreadFactory,int)>(1, $r19, 100) in <io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)> ==> <io.vertx.core.net.impl.transport.EpollTransport: io.netty.channel.EventLoopGroup eventLoopGroup(int,java.util.concurrent.ThreadFactory,int)>
VIRTUAL edge: $r23 = virtualinvoke r16.<io.vertx.core.net.impl.transport.Transport: io.netty.channel.EventLoopGroup eventLoopGroup(int,java.util.concurrent.ThreadFactory,int)>(1, $r19, 100) in <io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)> ==> <io.vertx.core.net.impl.transport.KQueueTransport: io.netty.channel.EventLoopGroup eventLoopGroup(int,java.util.concurrent.ThreadFactory,int)>
VIRTUAL edge: $r23 = virtualinvoke r16.<io.vertx.core.net.impl.transport.Transport: io.netty.channel.EventLoopGroup eventLoopGroup(int,java.util.concurrent.ThreadFactory,int)>(1, $r19, 100) in <io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)> ==> <io.vertx.core.net.impl.transport.Transport: io.netty.channel.EventLoopGroup eventLoopGroup(int,java.util.concurrent.ThreadFactory,int)>
SPECIAL edge: specialinvoke $r19.<io.vertx.core.impl.VertxThreadFactory: void <init>(java.lang.String,io.vertx.core.impl.BlockedThreadChecker,boolean,long,java.util.concurrent.TimeUnit)>("vert.x-acceptor-thread-", $r20, 0, $l5, $r21) in <io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)> ==> <io.vertx.core.impl.VertxThreadFactory: void <init>(java.lang.String,io.vertx.core.impl.BlockedThreadChecker,boolean,long,java.util.concurrent.TimeUnit)>
SPECIAL edge: specialinvoke $r25.<io.vertx.core.impl.VertxThreadFactory: void <init>(java.lang.String,io.vertx.core.impl.BlockedThreadChecker,boolean,long,java.util.concurrent.TimeUnit)>("vert.x-worker-thread-", $r26, 1, $l7, $r27) in <io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)> ==> <io.vertx.core.impl.VertxThreadFactory: void <init>(java.lang.String,io.vertx.core.impl.BlockedThreadChecker,boolean,long,java.util.concurrent.TimeUnit)>
INTERFACE edge: $r56 = interfaceinvoke $r54.<io.vertx.core.spi.metrics.VertxMetrics: io.vertx.core.spi.metrics.PoolMetrics createPoolMetrics(java.lang.String,java.lang.String,int)>("worker", "vert.x-worker-thread", $i13) in <io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)> ==> <io.vertx.core.spi.metrics.VertxMetrics: io.vertx.core.spi.metrics.PoolMetrics createPoolMetrics(java.lang.String,java.lang.String,int)>
SPECIAL edge: specialinvoke $r31.<io.vertx.core.impl.VertxThreadFactory: void <init>(java.lang.String,io.vertx.core.impl.BlockedThreadChecker,boolean,long,java.util.concurrent.TimeUnit)>("vert.x-internal-blocking-", $r32, 1, $l9, $r33) in <io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)> ==> <io.vertx.core.impl.VertxThreadFactory: void <init>(java.lang.String,io.vertx.core.impl.BlockedThreadChecker,boolean,long,java.util.concurrent.TimeUnit)>
INTERFACE edge: $r57 = interfaceinvoke $r53.<io.vertx.core.spi.metrics.VertxMetrics: io.vertx.core.spi.metrics.PoolMetrics createPoolMetrics(java.lang.String,java.lang.String,int)>("worker", "vert.x-internal-blocking", $i12) in <io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)> ==> <io.vertx.core.spi.metrics.VertxMetrics: io.vertx.core.spi.metrics.PoolMetrics createPoolMetrics(java.lang.String,java.lang.String,int)>
SPECIAL edge: specialinvoke $r37.<io.vertx.core.impl.WorkerPool: void <init>(java.util.concurrent.ExecutorService,io.vertx.core.spi.metrics.PoolMetrics)>(r34, $r57) in <io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)> ==> <io.vertx.core.impl.WorkerPool: void <init>(java.util.concurrent.ExecutorService,io.vertx.core.spi.metrics.PoolMetrics)>
SPECIAL edge: specialinvoke $r38.<java.util.HashMap: void <init>()>() in <io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)> ==> <java.util.HashMap: void <init>()>
SPECIAL edge: specialinvoke $r39.<io.vertx.core.impl.WorkerPool: void <init>(java.util.concurrent.ExecutorService,io.vertx.core.spi.metrics.PoolMetrics)>(r28, r30) in <io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)> ==> <io.vertx.core.impl.WorkerPool: void <init>(java.util.concurrent.ExecutorService,io.vertx.core.spi.metrics.PoolMetrics)>
SPECIAL edge: specialinvoke $r41.<io.vertx.core.file.impl.FileResolver: void <init>(io.vertx.core.file.FileSystemOptions)>($r42) in <io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)> ==> <io.vertx.core.file.impl.FileResolver: void <init>(io.vertx.core.file.FileSystemOptions)>
SPECIAL edge: specialinvoke $r44.<io.vertx.core.impl.AddressResolver: void <init>(io.vertx.core.Vertx,io.vertx.core.dns.AddressResolverOptions)>(r0, $r45) in <io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)> ==> <io.vertx.core.impl.AddressResolver: void <init>(io.vertx.core.Vertx,io.vertx.core.dns.AddressResolverOptions)>
SPECIAL edge: specialinvoke $r46.<io.vertx.core.impl.DeploymentManager: void <init>(io.vertx.core.impl.VertxInternal)>(r0) in <io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)> ==> <io.vertx.core.impl.DeploymentManager: void <init>(io.vertx.core.impl.VertxInternal)>
SPECIAL edge: specialinvoke $r51.<io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.ClusterManager)>(r0, r10, $r52) in <io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.ClusterManager)>
SPECIAL edge: specialinvoke $r47.<io.vertx.core.eventbus.impl.EventBusImpl: void <init>(io.vertx.core.impl.VertxInternal)>(r0) in <io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)> ==> <io.vertx.core.eventbus.impl.EventBusImpl: void <init>(io.vertx.core.impl.VertxInternal)>
SPECIAL edge: specialinvoke $r48.<io.vertx.core.shareddata.impl.SharedDataImpl: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.spi.cluster.ClusterManager)>(r0, $r49) in <io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.net.impl.transport.Transport)> ==> <io.vertx.core.shareddata.impl.SharedDataImpl: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.spi.cluster.ClusterManager)>
CLINIT edge: $z0 = staticinvoke <io.vertx.core.impl.Utils: boolean isWindows()>() in <io.vertx.core.impl.VertxImpl: io.vertx.core.file.FileSystem getFileSystem()> ==> <io.vertx.core.impl.Utils: void <clinit>()>
STATIC edge: $z0 = staticinvoke <io.vertx.core.impl.Utils: boolean isWindows()>() in <io.vertx.core.impl.VertxImpl: io.vertx.core.file.FileSystem getFileSystem()> ==> <io.vertx.core.impl.Utils: boolean isWindows()>
CLINIT edge: $r3 = new io.vertx.core.file.impl.FileSystemImpl in <io.vertx.core.impl.VertxImpl: io.vertx.core.file.FileSystem getFileSystem()> ==> <io.vertx.core.file.impl.FileSystemImpl: void <clinit>()>
CLINIT edge: $r2 = new io.vertx.core.file.impl.WindowsFileSystem in <io.vertx.core.impl.VertxImpl: io.vertx.core.file.FileSystem getFileSystem()> ==> <io.vertx.core.file.impl.FileSystemImpl: void <clinit>()>
CLINIT edge: $r2 = new io.vertx.core.file.impl.WindowsFileSystem in <io.vertx.core.impl.VertxImpl: io.vertx.core.file.FileSystem getFileSystem()> ==> <io.vertx.core.file.impl.WindowsFileSystem: void <clinit>()>
CLINIT edge: $r12 = <io.vertx.core.impl.VertxImpl: io.vertx.core.logging.Logger log> in <io.vertx.core.impl.VertxImpl: io.vertx.core.spi.metrics.VertxMetrics initialiseMetrics(io.vertx.core.VertxOptions)> ==> <io.vertx.core.impl.VertxImpl: void <clinit>()>
STATIC edge: staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r4, $r9) in <io.vertx.core.impl.VertxImpl: io.vertx.core.spi.metrics.VertxMetrics initialiseMetrics(io.vertx.core.VertxOptions)> ==> <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>
STATIC edge: $r11 = staticinvoke <io.vertx.core.ServiceHelper: java.lang.Object loadFactoryOrNull(java.lang.Class)>(class "Lio/vertx/core/spi/VertxMetricsFactory;") in <io.vertx.core.impl.VertxImpl: io.vertx.core.spi.metrics.VertxMetrics initialiseMetrics(io.vertx.core.VertxOptions)> ==> <io.vertx.core.ServiceHelper: java.lang.Object loadFactoryOrNull(java.lang.Class)>
CLINIT edge: r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("vertx.cluster.managerClass") in <io.vertx.core.impl.VertxImpl: io.vertx.core.spi.cluster.ClusterManager getClusterManager(io.vertx.core.VertxOptions)> ==> <java.lang.System: void <clinit>()>
STATIC edge: $r2 = staticinvoke <io.vertx.core.ServiceHelper: java.lang.Object loadFactoryOrNull(java.lang.Class)>(class "Lio/vertx/core/spi/cluster/ClusterManager;") in <io.vertx.core.impl.VertxImpl: io.vertx.core.spi.cluster.ClusterManager getClusterManager(io.vertx.core.VertxOptions)> ==> <io.vertx.core.ServiceHelper: java.lang.Object loadFactoryOrNull(java.lang.Class)>
STATIC edge: r13 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r1) in <io.vertx.core.impl.VertxImpl: io.vertx.core.spi.cluster.ClusterManager getClusterManager(io.vertx.core.VertxOptions)> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
STATIC edge: r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("vertx.cluster.managerClass") in <io.vertx.core.impl.VertxImpl: io.vertx.core.spi.cluster.ClusterManager getClusterManager(io.vertx.core.VertxOptions)> ==> <java.lang.System: java.lang.String getProperty(java.lang.String)>
CLINIT edge: r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("vertx.cwd") in <io.vertx.core.file.impl.FileResolver: void <init>(io.vertx.core.file.FileSystemOptions)> ==> <java.lang.System: void <clinit>()>
STATIC edge: r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("vertx.cwd") in <io.vertx.core.file.impl.FileResolver: void <init>(io.vertx.core.file.FileSystemOptions)> ==> <java.lang.System: java.lang.String getProperty(java.lang.String)>
CLINIT edge: $r3 = new java.io.File in <io.vertx.core.file.impl.FileResolver: void <init>(io.vertx.core.file.FileSystemOptions)> ==> <java.io.File: void <clinit>()>
STATIC edge: $r3 = staticinvoke <io.vertx.core.spi.resolver.ResolverProvider: io.vertx.core.spi.resolver.ResolverProvider factory(io.vertx.core.Vertx,io.vertx.core.dns.AddressResolverOptions)>(r1, r2) in <io.vertx.core.impl.AddressResolver: void <init>(io.vertx.core.Vertx,io.vertx.core.dns.AddressResolverOptions)> ==> <io.vertx.core.spi.resolver.ResolverProvider: io.vertx.core.spi.resolver.ResolverProvider factory(io.vertx.core.Vertx,io.vertx.core.dns.AddressResolverOptions)>
CLINIT edge: $r3 = new io.vertx.core.impl.ConcurrentHashSet in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.ClusterManager)> ==> <io.vertx.core.impl.ConcurrentHashSet: void <clinit>()>
FINALIZE edge: null in <io.vertx.core.eventbus.impl.EventBusImpl: void <init>(io.vertx.core.impl.VertxInternal)> ==> <io.vertx.core.eventbus.impl.EventBusImpl: void finalize()>
CLINIT edge: $r5 = new io.vertx.core.eventbus.impl.CodecManager in <io.vertx.core.eventbus.impl.EventBusImpl: void <init>(io.vertx.core.impl.VertxInternal)> ==> <io.vertx.core.eventbus.impl.CodecManager: void <clinit>()>
CLINIT edge: $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator") in <io.vertx.core.impl.Utils: void <clinit>()> ==> <java.lang.System: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("os.name") in <io.vertx.core.impl.Utils: void <clinit>()> ==> <java.lang.System: java.lang.String getProperty(java.lang.String)>
STATIC edge: $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator") in <io.vertx.core.impl.Utils: void <clinit>()> ==> <java.lang.System: java.lang.String getProperty(java.lang.String)>
CLINIT edge: <io.vertx.core.impl.Utils: java.lang.String LINE_SEPARATOR> = $r0 in <io.vertx.core.impl.Utils: void <clinit>()> ==> <io.vertx.core.impl.Utils: void <clinit>()>
CLINIT edge: $z0 = <io.vertx.core.impl.Utils: boolean isWindows> in <io.vertx.core.impl.Utils: boolean isWindows()> ==> <io.vertx.core.impl.Utils: void <clinit>()>
CLINIT edge: <io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.CopyOptions DEFAULT_OPTIONS> = $r0 in <io.vertx.core.file.impl.FileSystemImpl: void <clinit>()> ==> <io.vertx.core.file.impl.FileSystemImpl: void <clinit>()>
CLINIT edge: $r0 = staticinvoke <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/file/impl/WindowsFileSystem;") in <io.vertx.core.file.impl.WindowsFileSystem: void <clinit>()> ==> <io.vertx.core.logging.LoggerFactory: void <clinit>()>
STATIC edge: $r0 = staticinvoke <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/file/impl/WindowsFileSystem;") in <io.vertx.core.file.impl.WindowsFileSystem: void <clinit>()> ==> <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>
CLINIT edge: <io.vertx.core.file.impl.WindowsFileSystem: io.vertx.core.logging.Logger log> = $r0 in <io.vertx.core.file.impl.WindowsFileSystem: void <clinit>()> ==> <io.vertx.core.file.impl.FileSystemImpl: void <clinit>()>
CLINIT edge: <io.vertx.core.file.impl.WindowsFileSystem: io.vertx.core.logging.Logger log> = $r0 in <io.vertx.core.file.impl.WindowsFileSystem: void <clinit>()> ==> <io.vertx.core.file.impl.WindowsFileSystem: void <clinit>()>
CLINIT edge: $z0 = staticinvoke <java.lang.Boolean: boolean getBoolean(java.lang.String)>("vertx.disableDnsResolver") in <io.vertx.core.spi.resolver.ResolverProvider: io.vertx.core.spi.resolver.ResolverProvider factory(io.vertx.core.Vertx,io.vertx.core.dns.AddressResolverOptions)> ==> <java.lang.Boolean: void <clinit>()>
STATIC edge: r7 = staticinvoke <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/spi/resolver/ResolverProvider;") in <io.vertx.core.spi.resolver.ResolverProvider: io.vertx.core.spi.resolver.ResolverProvider factory(io.vertx.core.Vertx,io.vertx.core.dns.AddressResolverOptions)> ==> <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>
STATIC edge: $z0 = staticinvoke <java.lang.Boolean: boolean getBoolean(java.lang.String)>("vertx.disableDnsResolver") in <io.vertx.core.spi.resolver.ResolverProvider: io.vertx.core.spi.resolver.ResolverProvider factory(io.vertx.core.Vertx,io.vertx.core.dns.AddressResolverOptions)> ==> <java.lang.Boolean: boolean getBoolean(java.lang.String)>
CLINIT edge: r7 = staticinvoke <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/spi/resolver/ResolverProvider;") in <io.vertx.core.spi.resolver.ResolverProvider: io.vertx.core.spi.resolver.ResolverProvider factory(io.vertx.core.Vertx,io.vertx.core.dns.AddressResolverOptions)> ==> <io.vertx.core.logging.LoggerFactory: void <clinit>()>
CLINIT edge: <io.vertx.core.impl.ConcurrentHashSet: java.lang.Object OBJ> = $r0 in <io.vertx.core.impl.ConcurrentHashSet: void <clinit>()> ==> <io.vertx.core.impl.ConcurrentHashSet: void <clinit>()>
STATIC edge: $r1 = staticinvoke <io.vertx.core.eventbus.impl.EventBusImpl$lambda_finalize_6__18: io.vertx.core.Handler bootstrap$()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void finalize()> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_finalize_6__18: io.vertx.core.Handler bootstrap$()>
CLINIT edge: <io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec PING_MESSAGE_CODEC> = $r0 in <io.vertx.core.eventbus.impl.CodecManager: void <clinit>()> ==> <io.vertx.core.eventbus.impl.CodecManager: void <clinit>()>
INTERFACE edge: interfaceinvoke $r1.<io.vertx.core.eventbus.EventBus: void start(io.vertx.core.Handler)>($r2) in <io.vertx.core.impl.VertxImpl: void init()> ==> <io.vertx.core.eventbus.impl.EventBusImpl: void start(io.vertx.core.Handler)>
INTERFACE edge: interfaceinvoke $r1.<io.vertx.core.eventbus.EventBus: void start(io.vertx.core.Handler)>($r2) in <io.vertx.core.impl.VertxImpl: void init()> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void start(io.vertx.core.Handler)>
INTERFACE edge: interfaceinvoke $r4.<io.vertx.core.spi.metrics.VertxMetrics: void vertxCreated(io.vertx.core.Vertx)>(r0) in <io.vertx.core.impl.VertxImpl: void init()> ==> <io.vertx.core.spi.metrics.VertxMetrics: void vertxCreated(io.vertx.core.Vertx)>
CLINIT edge: $r2 = staticinvoke <io.vertx.core.Future: io.vertx.core.Future succeededFuture()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void start(io.vertx.core.Handler)> ==> <io.vertx.core.Future: void <clinit>()>
STATIC edge: $r2 = staticinvoke <io.vertx.core.Future: io.vertx.core.Future succeededFuture()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void start(io.vertx.core.Handler)> ==> <io.vertx.core.Future: io.vertx.core.Future succeededFuture()>
STATIC edge: $r5 = staticinvoke <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_start_3__19: io.vertx.core.Handler bootstrap$(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus,io.vertx.core.impl.HAManager,io.vertx.core.Handler)>(r0, r2, r3) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void start(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_start_3__19: io.vertx.core.Handler bootstrap$(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus,io.vertx.core.impl.HAManager,io.vertx.core.Handler)>
CLINIT edge: $r0 = <io.vertx.core.Future: io.vertx.core.spi.FutureFactory factory> in <io.vertx.core.Future: io.vertx.core.Future succeededFuture()> ==> <io.vertx.core.Future: void <clinit>()>
INTERFACE edge: $r1 = interfaceinvoke $r0.<io.vertx.core.spi.VertxFactory: io.vertx.core.Context context()>() in <io.vertx.core.Vertx: io.vertx.core.Context currentContext()> ==> <io.vertx.core.impl.VertxFactoryImpl: io.vertx.core.Context context()>
CLINIT edge: $r0 = staticinvoke <io.vertx.core.impl.VertxImpl: io.vertx.core.Context context()>() in <io.vertx.core.impl.VertxFactoryImpl: io.vertx.core.Context context()> ==> <io.vertx.core.impl.VertxImpl: void <clinit>()>
STATIC edge: $r0 = staticinvoke <io.vertx.core.impl.VertxImpl: io.vertx.core.Context context()>() in <io.vertx.core.impl.VertxFactoryImpl: io.vertx.core.Context context()> ==> <io.vertx.core.impl.VertxImpl: io.vertx.core.Context context()>
STATIC edge: r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() in <io.vertx.core.impl.VertxImpl: io.vertx.core.Context context()> ==> <java.lang.Thread: java.lang.Thread currentThread()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("/") in <io.vertx.core.file.impl.FileResolver: void <clinit>()> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.impl.VertxThreadFactory: void <clinit>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.WeakHashMap: void <init>()>() in <io.vertx.core.impl.VertxThreadFactory: void <clinit>()> ==> <java.util.WeakHashMap: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.Object: void <init>()>() in <io.vertx.core.impl.BlockedThreadChecker: void <clinit>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.impl.VertxImpl$lambda_init_0__9: void <init>()>() in <io.vertx.core.impl.VertxImpl$lambda_init_0__9: io.vertx.core.Handler bootstrap$()> ==> <io.vertx.core.impl.VertxImpl$lambda_init_0__9: void <init>()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<io.vertx.core.spi.BufferFactory: io.vertx.core.buffer.Buffer buffer(byte[])>(r0) in <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer(byte[])> ==> <io.vertx.core.buffer.impl.BufferFactoryImpl: io.vertx.core.buffer.Buffer buffer(byte[])>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.impl.transport.Transport: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.impl.transport.Transport: void <init>()>() in <io.vertx.core.net.impl.transport.EpollTransport: void <init>()> ==> <io.vertx.core.net.impl.transport.Transport: void <init>()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.impl.transport.Transport: void <init>()>() in <io.vertx.core.net.impl.transport.KQueueTransport: void <init>()> ==> <io.vertx.core.net.impl.transport.Transport: void <init>()>
SPECIAL edge: specialinvoke $r3.<io.vertx.core.impl.VertxImpl$lambda_joinCluster_1__10: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.VertxOptions,io.vertx.core.Handler)>($r0, $r1, $r2) in <io.vertx.core.impl.VertxImpl$lambda_joinCluster_1__10: io.vertx.core.Handler bootstrap$(io.vertx.core.impl.VertxImpl,io.vertx.core.VertxOptions,io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl$lambda_joinCluster_1__10: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.VertxOptions,io.vertx.core.Handler)>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.concurrent.ConcurrentMap: boolean isEmpty()>() in <io.vertx.core.shareddata.impl.LocalMapImpl: boolean isEmpty()> ==> <java.util.concurrent.ConcurrentHashMap: boolean isEmpty()>
INTERFACE edge: $i0 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: int size()>() in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Set keySet()> ==> <java.util.concurrent.ConcurrentHashMap: int size()>
SPECIAL edge: specialinvoke $r0.<java.util.HashSet: void <init>(int)>($i0) in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Set keySet()> ==> <java.util.HashSet: void <init>(int)>
INTERFACE edge: interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r8) in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Set keySet()> ==> <java.util.HashSet: boolean add(java.lang.Object)>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.concurrent.ConcurrentMap: java.util.Set keySet()>() in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Set keySet()> ==> <java.util.concurrent.ConcurrentHashMap: java.util.Set keySet()>
INTERFACE edge: r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>() in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Set keySet()> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>() in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Set keySet()> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2: java.util.Iterator iterator()>
INTERFACE edge: r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>() in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Set keySet()> ==> <io.vertx.core.impl.ConcurrentHashSet: java.util.Iterator iterator()>
INTERFACE edge: r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>() in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Set keySet()> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$1: java.util.Iterator iterator()>
INTERFACE edge: r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>() in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Set keySet()> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Set keySet()> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Set keySet()> ==> <io.vertx.core.json.JsonArray$Iter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Set keySet()> ==> <io.vertx.core.json.JsonObject$Iter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Set keySet()> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Set keySet()> ==> <java.util.Scanner: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Set keySet()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Set keySet()> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: boolean hasNext()>
INTERFACE edge: r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Set keySet()> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object next()>
INTERFACE edge: r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Set keySet()> ==> <io.vertx.core.json.JsonArray$Iter: java.lang.Object next()>
INTERFACE edge: r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Set keySet()> ==> <io.vertx.core.json.JsonObject$Iter: java.lang.Object next()>
INTERFACE edge: r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Set keySet()> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: java.lang.Object next()>
INTERFACE edge: r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Set keySet()> ==> <java.util.Scanner: java.lang.Object next()>
INTERFACE edge: r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Set keySet()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: java.lang.Object next()>
INTERFACE edge: r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Set keySet()> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: java.lang.Object next()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: void <init>(io.vertx.core.http.impl.Http2HeadersAdaptor$2,java.util.Iterator)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: void <init>(java.util.Iterator)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])>(i0, r1, r2, $r3) in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable)> ==> <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r24, 0, $i3) in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.lang.System: void <clinit>()>
STATIC edge: r16 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>(r1, r24) in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r24, 0, $i3) in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
CLINIT edge: $r27 = <io.vertx.core.logging.SLF4JLogDelegate: java.lang.String FQCN> in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <io.vertx.core.logging.SLF4JLogDelegate: void <clinit>()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])>(r1, r2, r3, $r4) in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable)> ==> <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.fasterxml.jackson.databind.JsonSerializer: void <init>()>() in <io.vertx.core.json.Json$JsonObjectSerializer: void <init>()> ==> <com.fasterxml.jackson.databind.JsonSerializer: void <init>()>
SPECIAL edge: specialinvoke r0.<com.fasterxml.jackson.databind.JsonSerializer: void <init>()>() in <io.vertx.core.json.Json$JsonArraySerializer: void <init>()> ==> <com.fasterxml.jackson.databind.JsonSerializer: void <init>()>
SPECIAL edge: specialinvoke r0.<com.fasterxml.jackson.databind.JsonSerializer: void <init>()>() in <io.vertx.core.json.Json$InstantSerializer: void <init>()> ==> <com.fasterxml.jackson.databind.JsonSerializer: void <init>()>
SPECIAL edge: specialinvoke r0.<com.fasterxml.jackson.databind.JsonDeserializer: void <init>()>() in <io.vertx.core.json.Json$InstantDeserializer: void <init>()> ==> <com.fasterxml.jackson.databind.JsonDeserializer: void <init>()>
SPECIAL edge: specialinvoke r0.<com.fasterxml.jackson.databind.JsonSerializer: void <init>()>() in <io.vertx.core.json.Json$ByteArraySerializer: void <init>()> ==> <com.fasterxml.jackson.databind.JsonSerializer: void <init>()>
SPECIAL edge: specialinvoke r0.<com.fasterxml.jackson.databind.JsonDeserializer: void <init>()>() in <io.vertx.core.json.Json$ByteArrayDeserializer: void <init>()> ==> <com.fasterxml.jackson.databind.JsonDeserializer: void <init>()>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.json.JsonObject: void <init>()>() in <io.vertx.core.http.Http2Settings: io.vertx.core.json.JsonObject toJson()> ==> <io.vertx.core.json.JsonObject: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke r1.<io.vertx.core.json.JsonObject: java.util.Map getMap()>() in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,io.vertx.core.json.JsonObject)> ==> <io.vertx.core.json.JsonObject: java.util.Map getMap()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.fasterxml.jackson.databind.ObjectMapper: java.lang.String writeValueAsString(java.lang.Object)>(r0) in <io.vertx.core.json.Json: java.lang.String encode(java.lang.Object)> ==> <com.fasterxml.jackson.databind.ObjectMapper: java.lang.String writeValueAsString(java.lang.Object)>
SPECIAL edge: specialinvoke $r6.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.json.Json: java.lang.String encode(java.lang.Object)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to encode as JSON: ") in <io.vertx.core.json.Json: java.lang.String encode(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r3.<java.lang.Exception: java.lang.String getMessage()>() in <io.vertx.core.json.Json: java.lang.String encode(java.lang.Object)> ==> <java.lang.Throwable: java.lang.String getMessage()>
VIRTUAL edge: $r8 = virtualinvoke $r3.<java.lang.Exception: java.lang.String getMessage()>() in <io.vertx.core.json.Json: java.lang.String encode(java.lang.Object)> ==> <java.nio.charset.MalformedInputException: java.lang.String getMessage()>
VIRTUAL edge: $r8 = virtualinvoke $r3.<java.lang.Exception: java.lang.String getMessage()>() in <io.vertx.core.json.Json: java.lang.String encode(java.lang.Object)> ==> <java.net.URISyntaxException: java.lang.String getMessage()>
VIRTUAL edge: $r8 = virtualinvoke $r3.<java.lang.Exception: java.lang.String getMessage()>() in <io.vertx.core.json.Json: java.lang.String encode(java.lang.Object)> ==> <java.util.regex.PatternSyntaxException: java.lang.String getMessage()>
VIRTUAL edge: $r8 = virtualinvoke $r3.<java.lang.Exception: java.lang.String getMessage()>() in <io.vertx.core.json.Json: java.lang.String encode(java.lang.Object)> ==> <java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
VIRTUAL edge: $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8) in <io.vertx.core.json.Json: java.lang.String encode(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.json.Json: java.lang.String encode(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r5.<io.vertx.core.json.EncodeException: void <init>(java.lang.String)>($r10) in <io.vertx.core.json.Json: java.lang.String encode(java.lang.Object)> ==> <io.vertx.core.json.EncodeException: void <init>(java.lang.String)>
VIRTUAL edge: $l0 = virtualinvoke r1.<io.vertx.core.http.Http2Settings: long getHeaderTableSize()>() in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <io.vertx.core.http.Http2Settings: long getHeaderTableSize()>
VIRTUAL edge: $i1 = virtualinvoke r1.<io.vertx.core.http.Http2Settings: int getInitialWindowSize()>() in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <io.vertx.core.http.Http2Settings: int getInitialWindowSize()>
VIRTUAL edge: $l2 = virtualinvoke r1.<io.vertx.core.http.Http2Settings: long getMaxConcurrentStreams()>() in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <io.vertx.core.http.Http2Settings: long getMaxConcurrentStreams()>
VIRTUAL edge: $i3 = virtualinvoke r1.<io.vertx.core.http.Http2Settings: int getMaxFrameSize()>() in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <io.vertx.core.http.Http2Settings: int getMaxFrameSize()>
VIRTUAL edge: $l4 = virtualinvoke r1.<io.vertx.core.http.Http2Settings: long getMaxHeaderListSize()>() in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <io.vertx.core.http.Http2Settings: long getMaxHeaderListSize()>
VIRTUAL edge: $z0 = virtualinvoke r1.<io.vertx.core.http.Http2Settings: boolean isPushEnabled()>() in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <io.vertx.core.http.Http2Settings: boolean isPushEnabled()>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("headerTableSize", $r2) in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("headerTableSize", $r2) in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("headerTableSize", $r2) in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("headerTableSize", $r2) in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("headerTableSize", $r2) in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("headerTableSize", $r2) in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("headerTableSize", $r2) in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("headerTableSize", $r2) in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("headerTableSize", $r2) in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("headerTableSize", $r2) in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("initialWindowSize", $r4) in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("initialWindowSize", $r4) in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("initialWindowSize", $r4) in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("initialWindowSize", $r4) in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("initialWindowSize", $r4) in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("initialWindowSize", $r4) in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("initialWindowSize", $r4) in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("initialWindowSize", $r4) in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("initialWindowSize", $r4) in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("initialWindowSize", $r4) in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("maxConcurrentStreams", $r6) in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("maxConcurrentStreams", $r6) in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("maxConcurrentStreams", $r6) in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("maxConcurrentStreams", $r6) in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("maxConcurrentStreams", $r6) in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("maxConcurrentStreams", $r6) in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("maxConcurrentStreams", $r6) in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("maxConcurrentStreams", $r6) in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("maxConcurrentStreams", $r6) in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("maxConcurrentStreams", $r6) in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("maxFrameSize", $r8) in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("maxFrameSize", $r8) in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("maxFrameSize", $r8) in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("maxFrameSize", $r8) in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("maxFrameSize", $r8) in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("maxFrameSize", $r8) in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("maxFrameSize", $r8) in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("maxFrameSize", $r8) in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("maxFrameSize", $r8) in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("maxFrameSize", $r8) in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("maxHeaderListSize", $r10) in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("maxHeaderListSize", $r10) in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("maxHeaderListSize", $r10) in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("maxHeaderListSize", $r10) in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("maxHeaderListSize", $r10) in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("maxHeaderListSize", $r10) in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("maxHeaderListSize", $r10) in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("maxHeaderListSize", $r10) in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("maxHeaderListSize", $r10) in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("maxHeaderListSize", $r10) in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("pushEnabled", $r12) in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("pushEnabled", $r12) in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("pushEnabled", $r12) in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("pushEnabled", $r12) in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("pushEnabled", $r12) in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("pushEnabled", $r12) in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("pushEnabled", $r12) in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("pushEnabled", $r12) in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("pushEnabled", $r12) in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("pushEnabled", $r12) in <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: java.lang.Boolean valueOf(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long valueOf(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.String getSimpleName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.lang.CharSequence: java.lang.String toString()>() in <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.String getKey()> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.lang.CharSequence: java.lang.String toString()>() in <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.String getKey()> ==> <java.lang.String: java.lang.String toString()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.lang.CharSequence: java.lang.String toString()>() in <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.String getKey()> ==> <java.lang.StringBuffer: java.lang.String toString()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.lang.CharSequence: java.lang.String toString()>() in <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.String getValue()> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.lang.CharSequence: java.lang.String toString()>() in <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.String getValue()> ==> <java.lang.String: java.lang.String toString()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.lang.CharSequence: java.lang.String toString()>() in <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.String getValue()> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.CaseInsensitiveHeaders: java.util.List entries()>() in <io.vertx.core.http.CaseInsensitiveHeaders: java.util.Iterator iterator()> ==> <io.vertx.core.http.CaseInsensitiveHeaders: java.util.List entries()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.http.CaseInsensitiveHeaders: java.util.Iterator iterator()> ==> <java.util.AbstractList: java.util.Iterator iterator()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.http.CaseInsensitiveHeaders: java.util.Iterator iterator()> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.http.CaseInsensitiveHeaders: java.util.Iterator iterator()> ==> <java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.http.CaseInsensitiveHeaders: java.util.Iterator iterator()> ==> <java.util.ArrayList: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.json.JsonObject: void <init>()>() in <io.vertx.core.dns.AddressResolverOptions: io.vertx.core.json.JsonObject toJson()> ==> <io.vertx.core.json.JsonObject: void <init>()>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.json.JsonObject: void <init>()>() in <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.json.JsonObject toJson()> ==> <io.vertx.core.json.JsonObject: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke r1.<io.vertx.core.json.JsonObject: java.util.Map getMap()>() in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,io.vertx.core.json.JsonObject)> ==> <io.vertx.core.json.JsonObject: java.util.Map getMap()>
VIRTUAL edge: $r2 = virtualinvoke r1.<io.vertx.core.json.JsonObject: java.util.Map getMap()>() in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,io.vertx.core.json.JsonObject)> ==> <io.vertx.core.json.JsonObject: java.util.Map getMap()>
VIRTUAL edge: $i0 = virtualinvoke r1.<io.vertx.core.dns.AddressResolverOptions: int getCacheMaxTimeToLive()>() in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <io.vertx.core.dns.AddressResolverOptions: int getCacheMaxTimeToLive()>
VIRTUAL edge: $i1 = virtualinvoke r1.<io.vertx.core.dns.AddressResolverOptions: int getCacheMinTimeToLive()>() in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <io.vertx.core.dns.AddressResolverOptions: int getCacheMinTimeToLive()>
VIRTUAL edge: $i2 = virtualinvoke r1.<io.vertx.core.dns.AddressResolverOptions: int getCacheNegativeTimeToLive()>() in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <io.vertx.core.dns.AddressResolverOptions: int getCacheNegativeTimeToLive()>
VIRTUAL edge: $r8 = virtualinvoke r1.<io.vertx.core.dns.AddressResolverOptions: java.lang.String getHostsPath()>() in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <io.vertx.core.dns.AddressResolverOptions: java.lang.String getHostsPath()>
VIRTUAL edge: $r37 = virtualinvoke r1.<io.vertx.core.dns.AddressResolverOptions: java.lang.String getHostsPath()>() in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <io.vertx.core.dns.AddressResolverOptions: java.lang.String getHostsPath()>
VIRTUAL edge: $r9 = virtualinvoke r1.<io.vertx.core.dns.AddressResolverOptions: io.vertx.core.buffer.Buffer getHostsValue()>() in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <io.vertx.core.dns.AddressResolverOptions: io.vertx.core.buffer.Buffer getHostsValue()>
VIRTUAL edge: $r33 = virtualinvoke r1.<io.vertx.core.dns.AddressResolverOptions: io.vertx.core.buffer.Buffer getHostsValue()>() in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <io.vertx.core.dns.AddressResolverOptions: io.vertx.core.buffer.Buffer getHostsValue()>
VIRTUAL edge: $i3 = virtualinvoke r1.<io.vertx.core.dns.AddressResolverOptions: int getMaxQueries()>() in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <io.vertx.core.dns.AddressResolverOptions: int getMaxQueries()>
VIRTUAL edge: $i4 = virtualinvoke r1.<io.vertx.core.dns.AddressResolverOptions: int getNdots()>() in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <io.vertx.core.dns.AddressResolverOptions: int getNdots()>
VIRTUAL edge: $z0 = virtualinvoke r1.<io.vertx.core.dns.AddressResolverOptions: boolean isOptResourceEnabled()>() in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <io.vertx.core.dns.AddressResolverOptions: boolean isOptResourceEnabled()>
VIRTUAL edge: $l5 = virtualinvoke r1.<io.vertx.core.dns.AddressResolverOptions: long getQueryTimeout()>() in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <io.vertx.core.dns.AddressResolverOptions: long getQueryTimeout()>
VIRTUAL edge: $z1 = virtualinvoke r1.<io.vertx.core.dns.AddressResolverOptions: boolean getRdFlag()>() in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <io.vertx.core.dns.AddressResolverOptions: boolean getRdFlag()>
VIRTUAL edge: $z2 = virtualinvoke r1.<io.vertx.core.dns.AddressResolverOptions: boolean isRotateServers()>() in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <io.vertx.core.dns.AddressResolverOptions: boolean isRotateServers()>
VIRTUAL edge: $r22 = virtualinvoke r1.<io.vertx.core.dns.AddressResolverOptions: java.util.List getSearchDomains()>() in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <io.vertx.core.dns.AddressResolverOptions: java.util.List getSearchDomains()>
VIRTUAL edge: $r29 = virtualinvoke r1.<io.vertx.core.dns.AddressResolverOptions: java.util.List getSearchDomains()>() in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <io.vertx.core.dns.AddressResolverOptions: java.util.List getSearchDomains()>
VIRTUAL edge: $r23 = virtualinvoke r1.<io.vertx.core.dns.AddressResolverOptions: java.util.List getServers()>() in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <io.vertx.core.dns.AddressResolverOptions: java.util.List getServers()>
VIRTUAL edge: $r25 = virtualinvoke r1.<io.vertx.core.dns.AddressResolverOptions: java.util.List getServers()>() in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <io.vertx.core.dns.AddressResolverOptions: java.util.List getServers()>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("cacheMaxTimeToLive", $r2) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("cacheMaxTimeToLive", $r2) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("cacheMaxTimeToLive", $r2) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("cacheMaxTimeToLive", $r2) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("cacheMaxTimeToLive", $r2) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("cacheMaxTimeToLive", $r2) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("cacheMaxTimeToLive", $r2) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("cacheMaxTimeToLive", $r2) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("cacheMaxTimeToLive", $r2) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("cacheMaxTimeToLive", $r2) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("cacheMinTimeToLive", $r4) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("cacheMinTimeToLive", $r4) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("cacheMinTimeToLive", $r4) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("cacheMinTimeToLive", $r4) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("cacheMinTimeToLive", $r4) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("cacheMinTimeToLive", $r4) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("cacheMinTimeToLive", $r4) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("cacheMinTimeToLive", $r4) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("cacheMinTimeToLive", $r4) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("cacheMinTimeToLive", $r4) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("cacheNegativeTimeToLive", $r6) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("cacheNegativeTimeToLive", $r6) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("cacheNegativeTimeToLive", $r6) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("cacheNegativeTimeToLive", $r6) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("cacheNegativeTimeToLive", $r6) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("cacheNegativeTimeToLive", $r6) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("cacheNegativeTimeToLive", $r6) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("cacheNegativeTimeToLive", $r6) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("cacheNegativeTimeToLive", $r6) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("cacheNegativeTimeToLive", $r6) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("hostsPath", $r37) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("hostsPath", $r37) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("hostsPath", $r37) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("hostsPath", $r37) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("hostsPath", $r37) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("hostsPath", $r37) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("hostsPath", $r37) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("hostsPath", $r37) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("hostsPath", $r37) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("hostsPath", $r37) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("hostsValue", $r35) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("hostsValue", $r35) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("hostsValue", $r35) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("hostsValue", $r35) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("hostsValue", $r35) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("hostsValue", $r35) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("hostsValue", $r35) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("hostsValue", $r35) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("hostsValue", $r35) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("hostsValue", $r35) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("maxQueries", $r10) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("maxQueries", $r10) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("maxQueries", $r10) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("maxQueries", $r10) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("maxQueries", $r10) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("maxQueries", $r10) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("maxQueries", $r10) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("maxQueries", $r10) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("maxQueries", $r10) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("maxQueries", $r10) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ndots", $r12) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ndots", $r12) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ndots", $r12) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ndots", $r12) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ndots", $r12) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ndots", $r12) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ndots", $r12) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ndots", $r12) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ndots", $r12) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ndots", $r12) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("optResourceEnabled", $r14) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("optResourceEnabled", $r14) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("optResourceEnabled", $r14) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("optResourceEnabled", $r14) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("optResourceEnabled", $r14) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("optResourceEnabled", $r14) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("optResourceEnabled", $r14) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("optResourceEnabled", $r14) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("optResourceEnabled", $r14) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("optResourceEnabled", $r14) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("queryTimeout", $r16) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("queryTimeout", $r16) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("queryTimeout", $r16) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("queryTimeout", $r16) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("queryTimeout", $r16) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("queryTimeout", $r16) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("queryTimeout", $r16) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("queryTimeout", $r16) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("queryTimeout", $r16) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("queryTimeout", $r16) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("rdFlag", $r18) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("rdFlag", $r18) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("rdFlag", $r18) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("rdFlag", $r18) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("rdFlag", $r18) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("rdFlag", $r18) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("rdFlag", $r18) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("rdFlag", $r18) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("rdFlag", $r18) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("rdFlag", $r18) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("rotateServers", $r20) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("rotateServers", $r20) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("rotateServers", $r20) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("rotateServers", $r20) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("rotateServers", $r20) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("rotateServers", $r20) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("rotateServers", $r20) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("rotateServers", $r20) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("rotateServers", $r20) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("rotateServers", $r20) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("searchDomains", $r28) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("searchDomains", $r28) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("searchDomains", $r28) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("searchDomains", $r28) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("searchDomains", $r28) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("searchDomains", $r28) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("searchDomains", $r28) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("searchDomains", $r28) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("searchDomains", $r28) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("searchDomains", $r28) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("servers", $r24) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("servers", $r24) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("servers", $r24) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("servers", $r24) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("servers", $r24) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("servers", $r24) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("servers", $r24) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("servers", $r24) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("servers", $r24) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("servers", $r24) in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: $r34 = interfaceinvoke $r33.<io.vertx.core.buffer.Buffer: byte[] getBytes()>() in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <io.vertx.core.buffer.impl.BufferImpl: byte[] getBytes()>
SPECIAL edge: specialinvoke $r28.<io.vertx.core.json.JsonArray: void <init>()>() in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <io.vertx.core.json.JsonArray: void <init>()>
SPECIAL edge: specialinvoke $r24.<io.vertx.core.json.JsonArray: void <init>()>() in <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)> ==> <io.vertx.core.json.JsonArray: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke r1.<io.vertx.core.eventbus.EventBusOptions: int getAcceptBacklog()>() in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.eventbus.EventBusOptions: int getAcceptBacklog()>
VIRTUAL edge: $r4 = virtualinvoke r1.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.http.ClientAuth getClientAuth()>() in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.http.ClientAuth getClientAuth()>
VIRTUAL edge: $r117 = virtualinvoke r1.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.http.ClientAuth getClientAuth()>() in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.http.ClientAuth getClientAuth()>
VIRTUAL edge: $l1 = virtualinvoke r1.<io.vertx.core.eventbus.EventBusOptions: long getClusterPingInterval()>() in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.eventbus.EventBusOptions: long getClusterPingInterval()>
VIRTUAL edge: $l2 = virtualinvoke r1.<io.vertx.core.eventbus.EventBusOptions: long getClusterPingReplyInterval()>() in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.eventbus.EventBusOptions: long getClusterPingReplyInterval()>
VIRTUAL edge: $r9 = virtualinvoke r1.<io.vertx.core.eventbus.EventBusOptions: java.lang.String getClusterPublicHost()>() in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.eventbus.EventBusOptions: java.lang.String getClusterPublicHost()>
VIRTUAL edge: $r115 = virtualinvoke r1.<io.vertx.core.eventbus.EventBusOptions: java.lang.String getClusterPublicHost()>() in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.eventbus.EventBusOptions: java.lang.String getClusterPublicHost()>
VIRTUAL edge: $i3 = virtualinvoke r1.<io.vertx.core.eventbus.EventBusOptions: int getClusterPublicPort()>() in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.eventbus.EventBusOptions: int getClusterPublicPort()>
VIRTUAL edge: $z0 = virtualinvoke r1.<io.vertx.core.eventbus.EventBusOptions: boolean isClustered()>() in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.eventbus.EventBusOptions: boolean isClustered()>
VIRTUAL edge: $i4 = virtualinvoke r1.<io.vertx.core.eventbus.EventBusOptions: int getConnectTimeout()>() in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.eventbus.EventBusOptions: int getConnectTimeout()>
VIRTUAL edge: $r16 = virtualinvoke r1.<io.vertx.core.eventbus.EventBusOptions: java.util.List getCrlPaths()>() in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.net.TCPSSLOptions: java.util.List getCrlPaths()>
VIRTUAL edge: $r112 = virtualinvoke r1.<io.vertx.core.eventbus.EventBusOptions: java.util.List getCrlPaths()>() in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.net.TCPSSLOptions: java.util.List getCrlPaths()>
VIRTUAL edge: $r17 = virtualinvoke r1.<io.vertx.core.eventbus.EventBusOptions: java.util.List getCrlValues()>() in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.net.TCPSSLOptions: java.util.List getCrlValues()>
VIRTUAL edge: $r108 = virtualinvoke r1.<io.vertx.core.eventbus.EventBusOptions: java.util.List getCrlValues()>() in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.net.TCPSSLOptions: java.util.List getCrlValues()>
VIRTUAL edge: $r18 = virtualinvoke r1.<io.vertx.core.eventbus.EventBusOptions: java.util.Set getEnabledCipherSuites()>() in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.net.TCPSSLOptions: java.util.Set getEnabledCipherSuites()>
VIRTUAL edge: $r104 = virtualinvoke r1.<io.vertx.core.eventbus.EventBusOptions: java.util.Set getEnabledCipherSuites()>() in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.net.TCPSSLOptions: java.util.Set getEnabledCipherSuites()>
VIRTUAL edge: $r19 = virtualinvoke r1.<io.vertx.core.eventbus.EventBusOptions: java.util.Set getEnabledSecureTransportProtocols()>() in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.net.TCPSSLOptions: java.util.Set getEnabledSecureTransportProtocols()>
VIRTUAL edge: $r100 = virtualinvoke r1.<io.vertx.core.eventbus.EventBusOptions: java.util.Set getEnabledSecureTransportProtocols()>() in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.net.TCPSSLOptions: java.util.Set getEnabledSecureTransportProtocols()>
VIRTUAL edge: $r20 = virtualinvoke r1.<io.vertx.core.eventbus.EventBusOptions: java.lang.String getHost()>() in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.eventbus.EventBusOptions: java.lang.String getHost()>
VIRTUAL edge: $r97 = virtualinvoke r1.<io.vertx.core.eventbus.EventBusOptions: java.lang.String getHost()>() in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.eventbus.EventBusOptions: java.lang.String getHost()>
VIRTUAL edge: $i5 = virtualinvoke r1.<io.vertx.core.eventbus.EventBusOptions: int getIdleTimeout()>() in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.net.TCPSSLOptions: int getIdleTimeout()>
VIRTUAL edge: $r23 = virtualinvoke r1.<io.vertx.core.eventbus.EventBusOptions: java.util.concurrent.TimeUnit getIdleTimeoutUnit()>() in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.net.TCPSSLOptions: java.util.concurrent.TimeUnit getIdleTimeoutUnit()>
VIRTUAL edge: $r94 = virtualinvoke r1.<io.vertx.core.eventbus.EventBusOptions: java.util.concurrent.TimeUnit getIdleTimeoutUnit()>() in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.net.TCPSSLOptions: java.util.concurrent.TimeUnit getIdleTimeoutUnit()>
VIRTUAL edge: $r24 = virtualinvoke r1.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.JdkSSLEngineOptions getJdkSslEngineOptions()>() in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.JdkSSLEngineOptions getJdkSslEngineOptions()>
VIRTUAL edge: $r91 = virtualinvoke r1.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.JdkSSLEngineOptions getJdkSslEngineOptions()>() in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.JdkSSLEngineOptions getJdkSslEngineOptions()>
VIRTUAL edge: $r25 = virtualinvoke r1.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.JksOptions getKeyStoreOptions()>() in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.JksOptions getKeyStoreOptions()>
VIRTUAL edge: $r88 = virtualinvoke r1.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.JksOptions getKeyStoreOptions()>() in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.JksOptions getKeyStoreOptions()>
VIRTUAL edge: $z1 = virtualinvoke r1.<io.vertx.core.eventbus.EventBusOptions: boolean getLogActivity()>() in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.net.NetworkOptions: boolean getLogActivity()>
VIRTUAL edge: $r28 = virtualinvoke r1.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.OpenSSLEngineOptions getOpenSslEngineOptions()>() in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.OpenSSLEngineOptions getOpenSslEngineOptions()>
VIRTUAL edge: $r85 = virtualinvoke r1.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.OpenSSLEngineOptions getOpenSslEngineOptions()>() in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.OpenSSLEngineOptions getOpenSslEngineOptions()>
VIRTUAL edge: $r29 = virtualinvoke r1.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.PemKeyCertOptions getPemKeyCertOptions()>() in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.PemKeyCertOptions getPemKeyCertOptions()>
VIRTUAL edge: $r82 = virtualinvoke r1.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.PemKeyCertOptions getPemKeyCertOptions()>() in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.PemKeyCertOptions getPemKeyCertOptions()>
VIRTUAL edge: $r30 = virtualinvoke r1.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.PemTrustOptions getPemTrustOptions()>() in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.PemTrustOptions getPemTrustOptions()>
VIRTUAL edge: $r79 = virtualinvoke r1.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.PemTrustOptions getPemTrustOptions()>() in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.PemTrustOptions getPemTrustOptions()>
VIRTUAL edge: $r31 = virtualinvoke r1.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.PfxOptions getPfxKeyCertOptions()>() in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.PfxOptions getPfxKeyCertOptions()>
VIRTUAL edge: $r76 = virtualinvoke r1.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.PfxOptions getPfxKeyCertOptions()>() in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.PfxOptions getPfxKeyCertOptions()>
VIRTUAL edge: $r32 = virtualinvoke r1.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.PfxOptions getPfxTrustOptions()>() in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.PfxOptions getPfxTrustOptions()>
VIRTUAL edge: $r73 = virtualinvoke r1.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.PfxOptions getPfxTrustOptions()>() in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.PfxOptions getPfxTrustOptions()>
VIRTUAL edge: $i6 = virtualinvoke r1.<io.vertx.core.eventbus.EventBusOptions: int getPort()>() in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.eventbus.EventBusOptions: int getPort()>
VIRTUAL edge: $i7 = virtualinvoke r1.<io.vertx.core.eventbus.EventBusOptions: int getReceiveBufferSize()>() in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.net.NetworkOptions: int getReceiveBufferSize()>
VIRTUAL edge: $i8 = virtualinvoke r1.<io.vertx.core.eventbus.EventBusOptions: int getReconnectAttempts()>() in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.eventbus.EventBusOptions: int getReconnectAttempts()>
VIRTUAL edge: $l9 = virtualinvoke r1.<io.vertx.core.eventbus.EventBusOptions: long getReconnectInterval()>() in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.eventbus.EventBusOptions: long getReconnectInterval()>
VIRTUAL edge: $z2 = virtualinvoke r1.<io.vertx.core.eventbus.EventBusOptions: boolean isReuseAddress()>() in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.net.NetworkOptions: boolean isReuseAddress()>
VIRTUAL edge: $z3 = virtualinvoke r1.<io.vertx.core.eventbus.EventBusOptions: boolean isReusePort()>() in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.net.NetworkOptions: boolean isReusePort()>
VIRTUAL edge: $i10 = virtualinvoke r1.<io.vertx.core.eventbus.EventBusOptions: int getSendBufferSize()>() in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.net.NetworkOptions: int getSendBufferSize()>
VIRTUAL edge: $i11 = virtualinvoke r1.<io.vertx.core.eventbus.EventBusOptions: int getSoLinger()>() in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.net.TCPSSLOptions: int getSoLinger()>
VIRTUAL edge: $z4 = virtualinvoke r1.<io.vertx.core.eventbus.EventBusOptions: boolean isSsl()>() in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.net.TCPSSLOptions: boolean isSsl()>
VIRTUAL edge: $z5 = virtualinvoke r1.<io.vertx.core.eventbus.EventBusOptions: boolean isTcpCork()>() in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.net.TCPSSLOptions: boolean isTcpCork()>
VIRTUAL edge: $z6 = virtualinvoke r1.<io.vertx.core.eventbus.EventBusOptions: boolean isTcpFastOpen()>() in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.net.TCPSSLOptions: boolean isTcpFastOpen()>
VIRTUAL edge: $z7 = virtualinvoke r1.<io.vertx.core.eventbus.EventBusOptions: boolean isTcpKeepAlive()>() in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.net.TCPSSLOptions: boolean isTcpKeepAlive()>
VIRTUAL edge: $z8 = virtualinvoke r1.<io.vertx.core.eventbus.EventBusOptions: boolean isTcpNoDelay()>() in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.net.TCPSSLOptions: boolean isTcpNoDelay()>
VIRTUAL edge: $z9 = virtualinvoke r1.<io.vertx.core.eventbus.EventBusOptions: boolean isTcpQuickAck()>() in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.net.TCPSSLOptions: boolean isTcpQuickAck()>
VIRTUAL edge: $i12 = virtualinvoke r1.<io.vertx.core.eventbus.EventBusOptions: int getTrafficClass()>() in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.net.NetworkOptions: int getTrafficClass()>
VIRTUAL edge: $z10 = virtualinvoke r1.<io.vertx.core.eventbus.EventBusOptions: boolean isTrustAll()>() in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.eventbus.EventBusOptions: boolean isTrustAll()>
VIRTUAL edge: $r65 = virtualinvoke r1.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.JksOptions getTrustStoreOptions()>() in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.JksOptions getTrustStoreOptions()>
VIRTUAL edge: $r70 = virtualinvoke r1.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.JksOptions getTrustStoreOptions()>() in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.JksOptions getTrustStoreOptions()>
VIRTUAL edge: $z11 = virtualinvoke r1.<io.vertx.core.eventbus.EventBusOptions: boolean isUseAlpn()>() in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.net.TCPSSLOptions: boolean isUseAlpn()>
VIRTUAL edge: $z12 = virtualinvoke r1.<io.vertx.core.eventbus.EventBusOptions: boolean isUsePooledBuffers()>() in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.net.TCPSSLOptions: boolean isUsePooledBuffers()>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("acceptBacklog", $r2) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("acceptBacklog", $r2) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("acceptBacklog", $r2) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("acceptBacklog", $r2) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("acceptBacklog", $r2) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("acceptBacklog", $r2) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("acceptBacklog", $r2) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("acceptBacklog", $r2) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("acceptBacklog", $r2) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("acceptBacklog", $r2) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("clientAuth", $r118) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("clientAuth", $r118) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("clientAuth", $r118) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("clientAuth", $r118) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("clientAuth", $r118) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("clientAuth", $r118) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("clientAuth", $r118) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("clientAuth", $r118) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("clientAuth", $r118) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("clientAuth", $r118) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("clusterPingInterval", $r5) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("clusterPingInterval", $r5) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("clusterPingInterval", $r5) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("clusterPingInterval", $r5) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("clusterPingInterval", $r5) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("clusterPingInterval", $r5) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("clusterPingInterval", $r5) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("clusterPingInterval", $r5) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("clusterPingInterval", $r5) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("clusterPingInterval", $r5) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("clusterPingReplyInterval", $r7) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("clusterPingReplyInterval", $r7) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("clusterPingReplyInterval", $r7) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("clusterPingReplyInterval", $r7) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("clusterPingReplyInterval", $r7) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("clusterPingReplyInterval", $r7) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("clusterPingReplyInterval", $r7) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("clusterPingReplyInterval", $r7) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("clusterPingReplyInterval", $r7) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("clusterPingReplyInterval", $r7) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("clusterPublicHost", $r115) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("clusterPublicHost", $r115) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("clusterPublicHost", $r115) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("clusterPublicHost", $r115) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("clusterPublicHost", $r115) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("clusterPublicHost", $r115) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("clusterPublicHost", $r115) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("clusterPublicHost", $r115) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("clusterPublicHost", $r115) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("clusterPublicHost", $r115) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("clusterPublicPort", $r10) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("clusterPublicPort", $r10) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("clusterPublicPort", $r10) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("clusterPublicPort", $r10) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("clusterPublicPort", $r10) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("clusterPublicPort", $r10) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("clusterPublicPort", $r10) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("clusterPublicPort", $r10) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("clusterPublicPort", $r10) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("clusterPublicPort", $r10) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("clustered", $r12) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("clustered", $r12) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("clustered", $r12) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("clustered", $r12) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("clustered", $r12) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("clustered", $r12) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("clustered", $r12) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("clustered", $r12) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("clustered", $r12) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("clustered", $r12) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("connectTimeout", $r14) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("connectTimeout", $r14) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("connectTimeout", $r14) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("connectTimeout", $r14) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("connectTimeout", $r14) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("connectTimeout", $r14) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("connectTimeout", $r14) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("connectTimeout", $r14) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("connectTimeout", $r14) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("connectTimeout", $r14) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("crlPaths", $r111) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("crlPaths", $r111) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("crlPaths", $r111) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("crlPaths", $r111) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("crlPaths", $r111) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("crlPaths", $r111) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("crlPaths", $r111) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("crlPaths", $r111) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("crlPaths", $r111) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("crlPaths", $r111) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("crlValues", $r107) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("crlValues", $r107) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("crlValues", $r107) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("crlValues", $r107) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("crlValues", $r107) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("crlValues", $r107) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("crlValues", $r107) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("crlValues", $r107) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("crlValues", $r107) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("crlValues", $r107) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("enabledCipherSuites", $r103) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("enabledCipherSuites", $r103) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("enabledCipherSuites", $r103) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("enabledCipherSuites", $r103) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("enabledCipherSuites", $r103) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("enabledCipherSuites", $r103) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("enabledCipherSuites", $r103) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("enabledCipherSuites", $r103) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("enabledCipherSuites", $r103) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("enabledCipherSuites", $r103) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("enabledSecureTransportProtocols", $r99) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("enabledSecureTransportProtocols", $r99) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("enabledSecureTransportProtocols", $r99) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("enabledSecureTransportProtocols", $r99) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("enabledSecureTransportProtocols", $r99) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("enabledSecureTransportProtocols", $r99) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("enabledSecureTransportProtocols", $r99) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("enabledSecureTransportProtocols", $r99) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("enabledSecureTransportProtocols", $r99) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("enabledSecureTransportProtocols", $r99) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("host", $r97) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("host", $r97) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("host", $r97) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("host", $r97) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("host", $r97) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("host", $r97) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("host", $r97) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("host", $r97) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("host", $r97) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("host", $r97) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("idleTimeout", $r21) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("idleTimeout", $r21) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("idleTimeout", $r21) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("idleTimeout", $r21) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("idleTimeout", $r21) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("idleTimeout", $r21) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("idleTimeout", $r21) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("idleTimeout", $r21) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("idleTimeout", $r21) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("idleTimeout", $r21) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("idleTimeoutUnit", $r95) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("idleTimeoutUnit", $r95) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("idleTimeoutUnit", $r95) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("idleTimeoutUnit", $r95) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("idleTimeoutUnit", $r95) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("idleTimeoutUnit", $r95) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("idleTimeoutUnit", $r95) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("idleTimeoutUnit", $r95) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("idleTimeoutUnit", $r95) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("idleTimeoutUnit", $r95) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("jdkSslEngineOptions", $r92) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("jdkSslEngineOptions", $r92) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("jdkSslEngineOptions", $r92) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("jdkSslEngineOptions", $r92) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("jdkSslEngineOptions", $r92) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("jdkSslEngineOptions", $r92) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("jdkSslEngineOptions", $r92) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("jdkSslEngineOptions", $r92) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("jdkSslEngineOptions", $r92) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("jdkSslEngineOptions", $r92) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("keyStoreOptions", $r89) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("keyStoreOptions", $r89) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("keyStoreOptions", $r89) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("keyStoreOptions", $r89) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("keyStoreOptions", $r89) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("keyStoreOptions", $r89) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("keyStoreOptions", $r89) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("keyStoreOptions", $r89) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("keyStoreOptions", $r89) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("keyStoreOptions", $r89) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("logActivity", $r26) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("logActivity", $r26) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("logActivity", $r26) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("logActivity", $r26) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("logActivity", $r26) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("logActivity", $r26) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("logActivity", $r26) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("logActivity", $r26) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("logActivity", $r26) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("logActivity", $r26) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("openSslEngineOptions", $r86) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("openSslEngineOptions", $r86) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("openSslEngineOptions", $r86) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("openSslEngineOptions", $r86) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("openSslEngineOptions", $r86) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("openSslEngineOptions", $r86) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("openSslEngineOptions", $r86) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("openSslEngineOptions", $r86) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("openSslEngineOptions", $r86) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("openSslEngineOptions", $r86) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("pemKeyCertOptions", $r83) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("pemKeyCertOptions", $r83) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("pemKeyCertOptions", $r83) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("pemKeyCertOptions", $r83) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("pemKeyCertOptions", $r83) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("pemKeyCertOptions", $r83) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("pemKeyCertOptions", $r83) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("pemKeyCertOptions", $r83) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("pemKeyCertOptions", $r83) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("pemKeyCertOptions", $r83) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("pemTrustOptions", $r80) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("pemTrustOptions", $r80) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("pemTrustOptions", $r80) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("pemTrustOptions", $r80) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("pemTrustOptions", $r80) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("pemTrustOptions", $r80) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("pemTrustOptions", $r80) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("pemTrustOptions", $r80) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("pemTrustOptions", $r80) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("pemTrustOptions", $r80) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("pfxKeyCertOptions", $r77) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("pfxKeyCertOptions", $r77) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("pfxKeyCertOptions", $r77) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("pfxKeyCertOptions", $r77) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("pfxKeyCertOptions", $r77) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("pfxKeyCertOptions", $r77) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("pfxKeyCertOptions", $r77) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("pfxKeyCertOptions", $r77) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("pfxKeyCertOptions", $r77) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("pfxKeyCertOptions", $r77) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("pfxTrustOptions", $r74) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("pfxTrustOptions", $r74) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("pfxTrustOptions", $r74) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("pfxTrustOptions", $r74) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("pfxTrustOptions", $r74) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("pfxTrustOptions", $r74) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("pfxTrustOptions", $r74) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("pfxTrustOptions", $r74) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("pfxTrustOptions", $r74) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("pfxTrustOptions", $r74) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("port", $r33) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("port", $r33) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("port", $r33) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("port", $r33) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("port", $r33) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("port", $r33) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("port", $r33) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("port", $r33) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("port", $r33) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("port", $r33) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("receiveBufferSize", $r35) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("receiveBufferSize", $r35) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("receiveBufferSize", $r35) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("receiveBufferSize", $r35) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("receiveBufferSize", $r35) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("receiveBufferSize", $r35) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("receiveBufferSize", $r35) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("receiveBufferSize", $r35) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("receiveBufferSize", $r35) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("receiveBufferSize", $r35) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("reconnectAttempts", $r37) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("reconnectAttempts", $r37) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("reconnectAttempts", $r37) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("reconnectAttempts", $r37) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("reconnectAttempts", $r37) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("reconnectAttempts", $r37) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("reconnectAttempts", $r37) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("reconnectAttempts", $r37) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("reconnectAttempts", $r37) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("reconnectAttempts", $r37) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("reconnectInterval", $r39) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("reconnectInterval", $r39) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("reconnectInterval", $r39) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("reconnectInterval", $r39) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("reconnectInterval", $r39) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("reconnectInterval", $r39) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("reconnectInterval", $r39) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("reconnectInterval", $r39) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("reconnectInterval", $r39) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("reconnectInterval", $r39) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("reuseAddress", $r41) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("reuseAddress", $r41) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("reuseAddress", $r41) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("reuseAddress", $r41) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("reuseAddress", $r41) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("reuseAddress", $r41) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("reuseAddress", $r41) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("reuseAddress", $r41) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("reuseAddress", $r41) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("reuseAddress", $r41) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("reusePort", $r43) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("reusePort", $r43) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("reusePort", $r43) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("reusePort", $r43) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("reusePort", $r43) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("reusePort", $r43) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("reusePort", $r43) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("reusePort", $r43) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("reusePort", $r43) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("reusePort", $r43) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("sendBufferSize", $r45) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("sendBufferSize", $r45) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("sendBufferSize", $r45) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("sendBufferSize", $r45) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("sendBufferSize", $r45) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("sendBufferSize", $r45) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("sendBufferSize", $r45) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("sendBufferSize", $r45) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("sendBufferSize", $r45) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("sendBufferSize", $r45) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("soLinger", $r47) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("soLinger", $r47) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("soLinger", $r47) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("soLinger", $r47) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("soLinger", $r47) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("soLinger", $r47) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("soLinger", $r47) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("soLinger", $r47) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("soLinger", $r47) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("soLinger", $r47) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ssl", $r49) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ssl", $r49) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ssl", $r49) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ssl", $r49) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ssl", $r49) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ssl", $r49) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ssl", $r49) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ssl", $r49) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ssl", $r49) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ssl", $r49) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("tcpCork", $r51) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("tcpCork", $r51) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("tcpCork", $r51) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("tcpCork", $r51) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("tcpCork", $r51) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("tcpCork", $r51) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("tcpCork", $r51) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("tcpCork", $r51) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("tcpCork", $r51) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("tcpCork", $r51) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("tcpFastOpen", $r53) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("tcpFastOpen", $r53) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("tcpFastOpen", $r53) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("tcpFastOpen", $r53) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("tcpFastOpen", $r53) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("tcpFastOpen", $r53) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("tcpFastOpen", $r53) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("tcpFastOpen", $r53) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("tcpFastOpen", $r53) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("tcpFastOpen", $r53) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("tcpKeepAlive", $r55) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("tcpKeepAlive", $r55) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("tcpKeepAlive", $r55) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("tcpKeepAlive", $r55) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("tcpKeepAlive", $r55) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("tcpKeepAlive", $r55) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("tcpKeepAlive", $r55) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("tcpKeepAlive", $r55) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("tcpKeepAlive", $r55) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("tcpKeepAlive", $r55) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("tcpNoDelay", $r57) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("tcpNoDelay", $r57) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("tcpNoDelay", $r57) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("tcpNoDelay", $r57) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("tcpNoDelay", $r57) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("tcpNoDelay", $r57) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("tcpNoDelay", $r57) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("tcpNoDelay", $r57) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("tcpNoDelay", $r57) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("tcpNoDelay", $r57) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("tcpQuickAck", $r59) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("tcpQuickAck", $r59) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("tcpQuickAck", $r59) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("tcpQuickAck", $r59) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("tcpQuickAck", $r59) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("tcpQuickAck", $r59) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("tcpQuickAck", $r59) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("tcpQuickAck", $r59) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("tcpQuickAck", $r59) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("tcpQuickAck", $r59) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("trafficClass", $r61) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("trafficClass", $r61) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("trafficClass", $r61) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("trafficClass", $r61) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("trafficClass", $r61) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("trafficClass", $r61) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("trafficClass", $r61) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("trafficClass", $r61) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("trafficClass", $r61) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("trafficClass", $r61) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("trustAll", $r63) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("trustAll", $r63) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("trustAll", $r63) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("trustAll", $r63) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("trustAll", $r63) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("trustAll", $r63) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("trustAll", $r63) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("trustAll", $r63) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("trustAll", $r63) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("trustAll", $r63) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("trustStoreOptions", $r71) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("trustStoreOptions", $r71) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("trustStoreOptions", $r71) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("trustStoreOptions", $r71) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("trustStoreOptions", $r71) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("trustStoreOptions", $r71) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("trustStoreOptions", $r71) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("trustStoreOptions", $r71) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("trustStoreOptions", $r71) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("trustStoreOptions", $r71) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("useAlpn", $r66) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("useAlpn", $r66) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("useAlpn", $r66) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("useAlpn", $r66) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("useAlpn", $r66) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("useAlpn", $r66) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("useAlpn", $r66) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("useAlpn", $r66) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("useAlpn", $r66) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("useAlpn", $r66) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("usePooledBuffers", $r68) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("usePooledBuffers", $r68) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("usePooledBuffers", $r68) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("usePooledBuffers", $r68) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("usePooledBuffers", $r68) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("usePooledBuffers", $r68) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("usePooledBuffers", $r68) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("usePooledBuffers", $r68) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("usePooledBuffers", $r68) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("usePooledBuffers", $r68) in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r118 = virtualinvoke $r117.<io.vertx.core.http.ClientAuth: java.lang.String name()>() in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.lang.Enum: java.lang.String name()>
SPECIAL edge: specialinvoke $r111.<io.vertx.core.json.JsonArray: void <init>()>() in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.json.JsonArray: void <init>()>
SPECIAL edge: specialinvoke $r107.<io.vertx.core.json.JsonArray: void <init>()>() in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.json.JsonArray: void <init>()>
SPECIAL edge: specialinvoke $r103.<io.vertx.core.json.JsonArray: void <init>()>() in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.json.JsonArray: void <init>()>
SPECIAL edge: specialinvoke $r99.<io.vertx.core.json.JsonArray: void <init>()>() in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.json.JsonArray: void <init>()>
VIRTUAL edge: $r95 = virtualinvoke $r94.<java.util.concurrent.TimeUnit: java.lang.String name()>() in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <java.lang.Enum: java.lang.String name()>
VIRTUAL edge: $r92 = virtualinvoke $r91.<io.vertx.core.net.JdkSSLEngineOptions: io.vertx.core.json.JsonObject toJson()>() in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.net.JdkSSLEngineOptions: io.vertx.core.json.JsonObject toJson()>
VIRTUAL edge: $r89 = virtualinvoke $r88.<io.vertx.core.net.JksOptions: io.vertx.core.json.JsonObject toJson()>() in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.net.JksOptions: io.vertx.core.json.JsonObject toJson()>
VIRTUAL edge: $r86 = virtualinvoke $r85.<io.vertx.core.net.OpenSSLEngineOptions: io.vertx.core.json.JsonObject toJson()>() in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.net.OpenSSLEngineOptions: io.vertx.core.json.JsonObject toJson()>
VIRTUAL edge: $r83 = virtualinvoke $r82.<io.vertx.core.net.PemKeyCertOptions: io.vertx.core.json.JsonObject toJson()>() in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.json.JsonObject toJson()>
VIRTUAL edge: $r80 = virtualinvoke $r79.<io.vertx.core.net.PemTrustOptions: io.vertx.core.json.JsonObject toJson()>() in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.net.PemTrustOptions: io.vertx.core.json.JsonObject toJson()>
VIRTUAL edge: $r77 = virtualinvoke $r76.<io.vertx.core.net.PfxOptions: io.vertx.core.json.JsonObject toJson()>() in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.net.PfxOptions: io.vertx.core.json.JsonObject toJson()>
VIRTUAL edge: $r74 = virtualinvoke $r73.<io.vertx.core.net.PfxOptions: io.vertx.core.json.JsonObject toJson()>() in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.net.PfxOptions: io.vertx.core.json.JsonObject toJson()>
VIRTUAL edge: $r71 = virtualinvoke $r70.<io.vertx.core.net.JksOptions: io.vertx.core.json.JsonObject toJson()>() in <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,java.util.Map)> ==> <io.vertx.core.net.JksOptions: io.vertx.core.json.JsonObject toJson()>
STATIC edge: staticinvoke <io.vertx.core.net.JksOptionsConverter: void toJson(io.vertx.core.net.JksOptions,io.vertx.core.json.JsonObject)>(r2, $r0) in <io.vertx.core.net.JksOptions: io.vertx.core.json.JsonObject toJson()> ==> <io.vertx.core.net.JksOptionsConverter: void toJson(io.vertx.core.net.JksOptions,io.vertx.core.json.JsonObject)>
STATIC edge: staticinvoke <io.vertx.core.net.OpenSSLEngineOptionsConverter: void toJson(io.vertx.core.net.OpenSSLEngineOptions,io.vertx.core.json.JsonObject)>(r2, $r0) in <io.vertx.core.net.OpenSSLEngineOptions: io.vertx.core.json.JsonObject toJson()> ==> <io.vertx.core.net.OpenSSLEngineOptionsConverter: void toJson(io.vertx.core.net.OpenSSLEngineOptions,io.vertx.core.json.JsonObject)>
STATIC edge: staticinvoke <io.vertx.core.net.PemKeyCertOptionsConverter: void toJson(io.vertx.core.net.PemKeyCertOptions,io.vertx.core.json.JsonObject)>(r2, $r0) in <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.json.JsonObject toJson()> ==> <io.vertx.core.net.PemKeyCertOptionsConverter: void toJson(io.vertx.core.net.PemKeyCertOptions,io.vertx.core.json.JsonObject)>
STATIC edge: staticinvoke <io.vertx.core.net.PemTrustOptionsConverter: void toJson(io.vertx.core.net.PemTrustOptions,io.vertx.core.json.JsonObject)>(r2, $r0) in <io.vertx.core.net.PemTrustOptions: io.vertx.core.json.JsonObject toJson()> ==> <io.vertx.core.net.PemTrustOptionsConverter: void toJson(io.vertx.core.net.PemTrustOptions,io.vertx.core.json.JsonObject)>
STATIC edge: staticinvoke <io.vertx.core.net.PfxOptionsConverter: void toJson(io.vertx.core.net.PfxOptions,io.vertx.core.json.JsonObject)>(r2, $r0) in <io.vertx.core.net.PfxOptions: io.vertx.core.json.JsonObject toJson()> ==> <io.vertx.core.net.PfxOptionsConverter: void toJson(io.vertx.core.net.PfxOptions,io.vertx.core.json.JsonObject)>
STATIC edge: staticinvoke <io.vertx.core.net.JksOptionsConverter: void toJson(io.vertx.core.net.JksOptions,java.util.Map)>(r0, $r2) in <io.vertx.core.net.JksOptionsConverter: void toJson(io.vertx.core.net.JksOptions,io.vertx.core.json.JsonObject)> ==> <io.vertx.core.net.JksOptionsConverter: void toJson(io.vertx.core.net.JksOptions,java.util.Map)>
STATIC edge: staticinvoke <io.vertx.core.net.OpenSSLEngineOptionsConverter: void toJson(io.vertx.core.net.OpenSSLEngineOptions,java.util.Map)>(r0, $r2) in <io.vertx.core.net.OpenSSLEngineOptionsConverter: void toJson(io.vertx.core.net.OpenSSLEngineOptions,io.vertx.core.json.JsonObject)> ==> <io.vertx.core.net.OpenSSLEngineOptionsConverter: void toJson(io.vertx.core.net.OpenSSLEngineOptions,java.util.Map)>
STATIC edge: staticinvoke <io.vertx.core.net.PemKeyCertOptionsConverter: void toJson(io.vertx.core.net.PemKeyCertOptions,java.util.Map)>(r0, $r2) in <io.vertx.core.net.PemKeyCertOptionsConverter: void toJson(io.vertx.core.net.PemKeyCertOptions,io.vertx.core.json.JsonObject)> ==> <io.vertx.core.net.PemKeyCertOptionsConverter: void toJson(io.vertx.core.net.PemKeyCertOptions,java.util.Map)>
STATIC edge: staticinvoke <io.vertx.core.net.PemTrustOptionsConverter: void toJson(io.vertx.core.net.PemTrustOptions,java.util.Map)>(r0, $r2) in <io.vertx.core.net.PemTrustOptionsConverter: void toJson(io.vertx.core.net.PemTrustOptions,io.vertx.core.json.JsonObject)> ==> <io.vertx.core.net.PemTrustOptionsConverter: void toJson(io.vertx.core.net.PemTrustOptions,java.util.Map)>
STATIC edge: staticinvoke <io.vertx.core.net.PfxOptionsConverter: void toJson(io.vertx.core.net.PfxOptions,java.util.Map)>(r0, $r2) in <io.vertx.core.net.PfxOptionsConverter: void toJson(io.vertx.core.net.PfxOptions,io.vertx.core.json.JsonObject)> ==> <io.vertx.core.net.PfxOptionsConverter: void toJson(io.vertx.core.net.PfxOptions,java.util.Map)>
STATIC edge: $r5 = staticinvoke <java.util.Base64: java.util.Base64$Encoder getEncoder()>() in <io.vertx.core.net.JksOptionsConverter: void toJson(io.vertx.core.net.JksOptions,java.util.Map)> ==> <java.util.Base64: java.util.Base64$Encoder getEncoder()>
CLINIT edge: $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0) in <io.vertx.core.net.OpenSSLEngineOptionsConverter: void toJson(io.vertx.core.net.OpenSSLEngineOptions,java.util.Map)> ==> <java.lang.Boolean: void <clinit>()>
STATIC edge: $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0) in <io.vertx.core.net.OpenSSLEngineOptionsConverter: void toJson(io.vertx.core.net.OpenSSLEngineOptions,java.util.Map)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
STATIC edge: $r20 = staticinvoke <io.vertx.core.net.PemKeyCertOptionsConverter$lambda_toJson_4__23: java.util.function.Consumer bootstrap$(io.vertx.core.json.JsonArray)>($r18) in <io.vertx.core.net.PemKeyCertOptionsConverter: void toJson(io.vertx.core.net.PemKeyCertOptions,java.util.Map)> ==> <io.vertx.core.net.PemKeyCertOptionsConverter$lambda_toJson_4__23: java.util.function.Consumer bootstrap$(io.vertx.core.json.JsonArray)>
STATIC edge: $r7 = staticinvoke <io.vertx.core.net.PemKeyCertOptionsConverter$lambda_toJson_7__20: java.util.function.Consumer bootstrap$(io.vertx.core.json.JsonArray)>($r5) in <io.vertx.core.net.PemKeyCertOptionsConverter: void toJson(io.vertx.core.net.PemKeyCertOptions,java.util.Map)> ==> <io.vertx.core.net.PemKeyCertOptionsConverter$lambda_toJson_7__20: java.util.function.Consumer bootstrap$(io.vertx.core.json.JsonArray)>
STATIC edge: $r12 = staticinvoke <io.vertx.core.net.PemKeyCertOptionsConverter$lambda_toJson_6__21: java.util.function.Consumer bootstrap$(io.vertx.core.json.JsonArray)>($r10) in <io.vertx.core.net.PemKeyCertOptionsConverter: void toJson(io.vertx.core.net.PemKeyCertOptions,java.util.Map)> ==> <io.vertx.core.net.PemKeyCertOptionsConverter$lambda_toJson_6__21: java.util.function.Consumer bootstrap$(io.vertx.core.json.JsonArray)>
STATIC edge: $r16 = staticinvoke <io.vertx.core.net.PemKeyCertOptionsConverter$lambda_toJson_5__22: java.util.function.Consumer bootstrap$(io.vertx.core.json.JsonArray)>($r14) in <io.vertx.core.net.PemKeyCertOptionsConverter: void toJson(io.vertx.core.net.PemKeyCertOptions,java.util.Map)> ==> <io.vertx.core.net.PemKeyCertOptionsConverter$lambda_toJson_5__22: java.util.function.Consumer bootstrap$(io.vertx.core.json.JsonArray)>
STATIC edge: $r10 = staticinvoke <io.vertx.core.net.PemTrustOptionsConverter$lambda_toJson_2__25: java.util.function.Consumer bootstrap$(io.vertx.core.json.JsonArray)>($r8) in <io.vertx.core.net.PemTrustOptionsConverter: void toJson(io.vertx.core.net.PemTrustOptions,java.util.Map)> ==> <io.vertx.core.net.PemTrustOptionsConverter$lambda_toJson_2__25: java.util.function.Consumer bootstrap$(io.vertx.core.json.JsonArray)>
STATIC edge: $r5 = staticinvoke <io.vertx.core.net.PemTrustOptionsConverter$lambda_toJson_3__24: java.util.function.Consumer bootstrap$(io.vertx.core.json.JsonArray)>($r3) in <io.vertx.core.net.PemTrustOptionsConverter: void toJson(io.vertx.core.net.PemTrustOptions,java.util.Map)> ==> <io.vertx.core.net.PemTrustOptionsConverter$lambda_toJson_3__24: java.util.function.Consumer bootstrap$(io.vertx.core.json.JsonArray)>
STATIC edge: $r5 = staticinvoke <java.util.Base64: java.util.Base64$Encoder getEncoder()>() in <io.vertx.core.net.PfxOptionsConverter: void toJson(io.vertx.core.net.PfxOptions,java.util.Map)> ==> <java.util.Base64: java.util.Base64$Encoder getEncoder()>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.dns.AddressResolverOptionsConverter$lambda_toJson_3__11: void <init>(io.vertx.core.json.JsonArray)>($r0) in <io.vertx.core.dns.AddressResolverOptionsConverter$lambda_toJson_3__11: java.util.function.Consumer bootstrap$(io.vertx.core.json.JsonArray)> ==> <io.vertx.core.dns.AddressResolverOptionsConverter$lambda_toJson_3__11: void <init>(io.vertx.core.json.JsonArray)>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.dns.AddressResolverOptionsConverter$lambda_toJson_2__12: void <init>(io.vertx.core.json.JsonArray)>($r0) in <io.vertx.core.dns.AddressResolverOptionsConverter$lambda_toJson_2__12: java.util.function.Consumer bootstrap$(io.vertx.core.json.JsonArray)> ==> <io.vertx.core.dns.AddressResolverOptionsConverter$lambda_toJson_2__12: void <init>(io.vertx.core.json.JsonArray)>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.eventbus.EventBusOptionsConverter$lambda_toJson_7__13: void <init>(io.vertx.core.json.JsonArray)>($r0) in <io.vertx.core.eventbus.EventBusOptionsConverter$lambda_toJson_7__13: java.util.function.Consumer bootstrap$(io.vertx.core.json.JsonArray)> ==> <io.vertx.core.eventbus.EventBusOptionsConverter$lambda_toJson_7__13: void <init>(io.vertx.core.json.JsonArray)>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.eventbus.EventBusOptionsConverter$lambda_toJson_6__14: void <init>(io.vertx.core.json.JsonArray)>($r0) in <io.vertx.core.eventbus.EventBusOptionsConverter$lambda_toJson_6__14: java.util.function.Consumer bootstrap$(io.vertx.core.json.JsonArray)> ==> <io.vertx.core.eventbus.EventBusOptionsConverter$lambda_toJson_6__14: void <init>(io.vertx.core.json.JsonArray)>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.eventbus.EventBusOptionsConverter$lambda_toJson_5__15: void <init>(io.vertx.core.json.JsonArray)>($r0) in <io.vertx.core.eventbus.EventBusOptionsConverter$lambda_toJson_5__15: java.util.function.Consumer bootstrap$(io.vertx.core.json.JsonArray)> ==> <io.vertx.core.eventbus.EventBusOptionsConverter$lambda_toJson_5__15: void <init>(io.vertx.core.json.JsonArray)>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.eventbus.EventBusOptionsConverter$lambda_toJson_4__16: void <init>(io.vertx.core.json.JsonArray)>($r0) in <io.vertx.core.eventbus.EventBusOptionsConverter$lambda_toJson_4__16: java.util.function.Consumer bootstrap$(io.vertx.core.json.JsonArray)> ==> <io.vertx.core.eventbus.EventBusOptionsConverter$lambda_toJson_4__16: void <init>(io.vertx.core.json.JsonArray)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: java.lang.String name()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.shareddata.impl.LocalMapImpl$1: void <init>(io.vertx.core.shareddata.impl.LocalMapImpl,java.util.Map$Entry)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.json.JsonObject$Entry: void <init>(java.lang.String,java.lang.Object)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.NetworkOptions: void <init>()>() in <io.vertx.core.net.TCPSSLOptions: void <init>()> ==> <io.vertx.core.net.NetworkOptions: void <init>()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: void init()>() in <io.vertx.core.net.TCPSSLOptions: void <init>()> ==> <io.vertx.core.net.TCPSSLOptions: void init()>
CLINIT edge: $r1 = <io.vertx.core.net.TCPSSLOptions: java.util.concurrent.TimeUnit DEFAULT_IDLE_TIMEOUT_TIME_UNIT> in <io.vertx.core.net.TCPSSLOptions: void init()> ==> <io.vertx.core.net.TCPSSLOptions: void <clinit>()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.logging.Log4jLogDelegate: void log(org.apache.log4j.Level,java.lang.Object,java.lang.Throwable)>($r3, r1, r2) in <io.vertx.core.logging.Log4jLogDelegate: void debug(java.lang.Object,java.lang.Throwable)> ==> <io.vertx.core.logging.Log4jLogDelegate: void log(org.apache.log4j.Level,java.lang.Object,java.lang.Throwable)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable)>(10, r1, r2) in <io.vertx.core.logging.SLF4JLogDelegate: void debug(java.lang.Object,java.lang.Throwable)> ==> <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable)>($r3, r1, r2) in <io.vertx.core.logging.JULLogDelegate: void debug(java.lang.Object,java.lang.Throwable)> ==> <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.logging.Log4j2LogDelegate: void log(org.apache.logging.log4j.Level,java.lang.Object,java.lang.Throwable)>($r3, r1, r2) in <io.vertx.core.logging.Log4j2LogDelegate: void debug(java.lang.Object,java.lang.Throwable)> ==> <io.vertx.core.logging.Log4j2LogDelegate: void log(org.apache.logging.log4j.Level,java.lang.Object,java.lang.Throwable)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Enum: void <init>(java.lang.String,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: void <init>(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: void finalize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.impl.HAManager$lambda_doDeployVerticle_4__7: void <init>(io.vertx.core.impl.HAManager,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.impl.HAManager$lambda_addToHADeployList_7__8: void <init>(io.vertx.core.impl.HAManager,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: r4 = virtualinvoke r0.<io.vertx.core.impl.VertxImpl: io.vertx.core.impl.ContextImpl getContext()>() in <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.ContextImpl getOrCreateContext()> ==> <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.ContextImpl getContext()>
VIRTUAL edge: r4 = virtualinvoke r0.<io.vertx.core.impl.VertxImpl: io.vertx.core.impl.EventLoopContext createEventLoopContext(java.lang.String,io.vertx.core.impl.WorkerPool,io.vertx.core.json.JsonObject,java.lang.ClassLoader)>(null, null, $r1, $r3) in <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.ContextImpl getOrCreateContext()> ==> <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.EventLoopContext createEventLoopContext(java.lang.String,io.vertx.core.impl.WorkerPool,io.vertx.core.json.JsonObject,java.lang.ClassLoader)>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.json.JsonObject: void <init>()>() in <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.ContextImpl getOrCreateContext()> ==> <io.vertx.core.json.JsonObject: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>() in <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.ContextImpl getOrCreateContext()> ==> <java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>
CLINIT edge: $r0 = staticinvoke <io.vertx.core.impl.VertxImpl: io.vertx.core.Context context()>() in <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.ContextImpl getContext()> ==> <io.vertx.core.impl.VertxImpl: void <clinit>()>
STATIC edge: $r0 = staticinvoke <io.vertx.core.impl.VertxImpl: io.vertx.core.Context context()>() in <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.ContextImpl getContext()> ==> <io.vertx.core.impl.VertxImpl: io.vertx.core.Context context()>
CLINIT edge: $r0 = new io.vertx.core.impl.EventLoopContext in <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.EventLoopContext createEventLoopContext(java.lang.String,io.vertx.core.impl.WorkerPool,io.vertx.core.json.JsonObject,java.lang.ClassLoader)> ==> <io.vertx.core.impl.EventLoopContext: void <clinit>()>
CLINIT edge: $r0 = new io.vertx.core.impl.EventLoopContext in <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.EventLoopContext createEventLoopContext(java.lang.String,io.vertx.core.impl.WorkerPool,io.vertx.core.json.JsonObject,java.lang.ClassLoader)> ==> <io.vertx.core.impl.ContextImpl: void <clinit>()>
CLINIT edge: $r0 = staticinvoke <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/impl/EventLoopContext;") in <io.vertx.core.impl.EventLoopContext: void <clinit>()> ==> <io.vertx.core.logging.LoggerFactory: void <clinit>()>
STATIC edge: $r0 = staticinvoke <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/impl/EventLoopContext;") in <io.vertx.core.impl.EventLoopContext: void <clinit>()> ==> <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>
CLINIT edge: <io.vertx.core.impl.EventLoopContext: io.vertx.core.logging.Logger log> = $r0 in <io.vertx.core.impl.EventLoopContext: void <clinit>()> ==> <io.vertx.core.impl.ContextImpl: void <clinit>()>
CLINIT edge: <io.vertx.core.impl.EventLoopContext: io.vertx.core.logging.Logger log> = $r0 in <io.vertx.core.impl.EventLoopContext: void <clinit>()> ==> <io.vertx.core.impl.EventLoopContext: void <clinit>()>
CLINIT edge: $r0 = staticinvoke <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/impl/ContextImpl;") in <io.vertx.core.impl.ContextImpl: void <clinit>()> ==> <io.vertx.core.logging.LoggerFactory: void <clinit>()>
STATIC edge: $z2 = staticinvoke <java.lang.Boolean: boolean getBoolean(java.lang.String)>("vertx.disableTCCL") in <io.vertx.core.impl.ContextImpl: void <clinit>()> ==> <java.lang.Boolean: boolean getBoolean(java.lang.String)>
STATIC edge: $z1 = staticinvoke <java.lang.Boolean: boolean getBoolean(java.lang.String)>("vertx.disableContextTimings") in <io.vertx.core.impl.ContextImpl: void <clinit>()> ==> <java.lang.Boolean: boolean getBoolean(java.lang.String)>
STATIC edge: $z0 = staticinvoke <java.lang.Boolean: boolean getBoolean(java.lang.String)>("vertx.threadChecks") in <io.vertx.core.impl.ContextImpl: void <clinit>()> ==> <java.lang.Boolean: boolean getBoolean(java.lang.String)>
STATIC edge: $r0 = staticinvoke <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/impl/ContextImpl;") in <io.vertx.core.impl.ContextImpl: void <clinit>()> ==> <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>
CLINIT edge: $z0 = staticinvoke <java.lang.Boolean: boolean getBoolean(java.lang.String)>("vertx.threadChecks") in <io.vertx.core.impl.ContextImpl: void <clinit>()> ==> <java.lang.Boolean: void <clinit>()>
CLINIT edge: <io.vertx.core.impl.ContextImpl: io.vertx.core.logging.Logger log> = $r0 in <io.vertx.core.impl.ContextImpl: void <clinit>()> ==> <io.vertx.core.impl.ContextImpl: void <clinit>()>
VIRTUAL edge: r3 = virtualinvoke $r0.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>() in <io.vertx.core.impl.DeploymentManager: java.lang.ClassLoader getCurrentClassLoader()> ==> <java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() in <io.vertx.core.impl.DeploymentManager: java.lang.ClassLoader getCurrentClassLoader()> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: r3 = virtualinvoke $r2.<java.lang.Class: java.lang.ClassLoader getClassLoader()>() in <io.vertx.core.impl.DeploymentManager: java.lang.ClassLoader getCurrentClassLoader()> ==> <java.lang.Class: java.lang.ClassLoader getClassLoader()>
SPECIAL edge: specialinvoke r0.<java.net.URLClassLoader: void <init>(java.net.URL[],java.lang.ClassLoader)>(r1, r2) in <io.vertx.core.impl.IsolatingClassLoader: void <init>(java.net.URL[],java.lang.ClassLoader,java.util.List)> ==> <java.net.URLClassLoader: void <init>(java.net.URL[],java.lang.ClassLoader)>
VIRTUAL edge: i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(58) in <io.vertx.core.impl.DeploymentManager: java.util.List resolveFactories(java.lang.String)> ==> <java.lang.String: int indexOf(int)>
VIRTUAL edge: r5 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i0) in <io.vertx.core.impl.DeploymentManager: java.util.List resolveFactories(java.lang.String)> ==> <java.lang.String: java.lang.String substring(int,int)>
VIRTUAL edge: i1 = virtualinvoke r0.<java.lang.String: int lastIndexOf(int)>(46) in <io.vertx.core.impl.DeploymentManager: java.util.List resolveFactories(java.lang.String)> ==> <java.lang.String: int lastIndexOf(int)>
SPECIAL edge: r5 = specialinvoke r1.<io.vertx.core.impl.DeploymentManager: java.lang.String getSuffix(int,java.lang.String)>(i1, r0) in <io.vertx.core.impl.DeploymentManager: java.util.List resolveFactories(java.lang.String)> ==> <io.vertx.core.impl.DeploymentManager: java.lang.String getSuffix(int,java.lang.String)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5) in <io.vertx.core.impl.DeploymentManager: java.util.List resolveFactories(java.lang.String)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5) in <io.vertx.core.impl.DeploymentManager: java.util.List resolveFactories(java.lang.String)> ==> <java.util.IdentityHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5) in <io.vertx.core.impl.DeploymentManager: java.util.List resolveFactories(java.lang.String)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5) in <io.vertx.core.impl.DeploymentManager: java.util.List resolveFactories(java.lang.String)> ==> <java.util.EnumMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5) in <io.vertx.core.impl.DeploymentManager: java.util.List resolveFactories(java.lang.String)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5) in <io.vertx.core.impl.DeploymentManager: java.util.List resolveFactories(java.lang.String)> ==> <java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5) in <io.vertx.core.impl.DeploymentManager: java.util.List resolveFactories(java.lang.String)> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5) in <io.vertx.core.impl.DeploymentManager: java.util.List resolveFactories(java.lang.String)> ==> <java.util.TreeMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5) in <io.vertx.core.impl.DeploymentManager: java.util.List resolveFactories(java.lang.String)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5) in <io.vertx.core.impl.DeploymentManager: java.util.List resolveFactories(java.lang.String)> ==> <java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.DeploymentManager: void doDeployVerticle(java.util.Iterator,java.lang.Throwable,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.lang.ClassLoader,io.vertx.core.Handler)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.DeploymentManager: void doDeployVerticle(java.util.Iterator,java.lang.Throwable,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.lang.ClassLoader,io.vertx.core.Handler)> ==> <io.vertx.core.json.JsonArray$Iter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.DeploymentManager: void doDeployVerticle(java.util.Iterator,java.lang.Throwable,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.lang.ClassLoader,io.vertx.core.Handler)> ==> <io.vertx.core.json.JsonObject$Iter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.DeploymentManager: void doDeployVerticle(java.util.Iterator,java.lang.Throwable,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.lang.ClassLoader,io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.DeploymentManager: void doDeployVerticle(java.util.Iterator,java.lang.Throwable,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.lang.ClassLoader,io.vertx.core.Handler)> ==> <java.util.Scanner: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.DeploymentManager: void doDeployVerticle(java.util.Iterator,java.lang.Throwable,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.lang.ClassLoader,io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.DeploymentManager: void doDeployVerticle(java.util.Iterator,java.lang.Throwable,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.lang.ClassLoader,io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: boolean hasNext()>
INTERFACE edge: $r5 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.DeploymentManager: void doDeployVerticle(java.util.Iterator,java.lang.Throwable,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.lang.ClassLoader,io.vertx.core.Handler)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object next()>
INTERFACE edge: $r5 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.DeploymentManager: void doDeployVerticle(java.util.Iterator,java.lang.Throwable,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.lang.ClassLoader,io.vertx.core.Handler)> ==> <io.vertx.core.json.JsonArray$Iter: java.lang.Object next()>
INTERFACE edge: $r5 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.DeploymentManager: void doDeployVerticle(java.util.Iterator,java.lang.Throwable,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.lang.ClassLoader,io.vertx.core.Handler)> ==> <io.vertx.core.json.JsonObject$Iter: java.lang.Object next()>
INTERFACE edge: $r5 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.DeploymentManager: void doDeployVerticle(java.util.Iterator,java.lang.Throwable,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.lang.ClassLoader,io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: java.lang.Object next()>
INTERFACE edge: $r5 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.DeploymentManager: void doDeployVerticle(java.util.Iterator,java.lang.Throwable,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.lang.ClassLoader,io.vertx.core.Handler)> ==> <java.util.Scanner: java.lang.Object next()>
INTERFACE edge: $r5 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.DeploymentManager: void doDeployVerticle(java.util.Iterator,java.lang.Throwable,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.lang.ClassLoader,io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: java.lang.Object next()>
INTERFACE edge: $r5 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.DeploymentManager: void doDeployVerticle(java.util.Iterator,java.lang.Throwable,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.lang.ClassLoader,io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: java.lang.Object next()>
INTERFACE edge: $z1 = interfaceinvoke r6.<io.vertx.core.spi.VerticleFactory: boolean requiresResolve()>() in <io.vertx.core.impl.DeploymentManager: void doDeployVerticle(java.util.Iterator,java.lang.Throwable,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.lang.ClassLoader,io.vertx.core.Handler)> ==> <io.vertx.core.spi.VerticleFactory: boolean requiresResolve()>
INTERFACE edge: interfaceinvoke r6.<io.vertx.core.spi.VerticleFactory: void resolve(java.lang.String,io.vertx.core.DeploymentOptions,java.lang.ClassLoader,io.vertx.core.Future)>(r8, r9, r10, r7) in <io.vertx.core.impl.DeploymentManager: void doDeployVerticle(java.util.Iterator,java.lang.Throwable,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.lang.ClassLoader,io.vertx.core.Handler)> ==> <io.vertx.core.spi.VerticleFactory: void resolve(java.lang.String,io.vertx.core.DeploymentOptions,java.lang.ClassLoader,io.vertx.core.Future)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Future: void fail(java.lang.Throwable)>($r15) in <io.vertx.core.impl.DeploymentManager: void doDeployVerticle(java.util.Iterator,java.lang.Throwable,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.lang.ClassLoader,io.vertx.core.Handler)> ==> <io.vertx.core.impl.CompositeFutureImpl: void fail(java.lang.Throwable)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Future: void fail(java.lang.Throwable)>($r15) in <io.vertx.core.impl.DeploymentManager: void doDeployVerticle(java.util.Iterator,java.lang.Throwable,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.lang.ClassLoader,io.vertx.core.Handler)> ==> <io.vertx.core.impl.SucceededFuture: void fail(java.lang.Throwable)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Future: void fail(java.lang.Throwable)>($r15) in <io.vertx.core.impl.DeploymentManager: void doDeployVerticle(java.util.Iterator,java.lang.Throwable,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.lang.ClassLoader,io.vertx.core.Handler)> ==> <io.vertx.core.impl.FutureImpl: void fail(java.lang.Throwable)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Future: void fail(java.lang.Throwable)>($r15) in <io.vertx.core.impl.DeploymentManager: void doDeployVerticle(java.util.Iterator,java.lang.Throwable,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.lang.ClassLoader,io.vertx.core.Handler)> ==> <io.vertx.core.impl.FailedFuture: void fail(java.lang.Throwable)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Future: void complete(java.lang.Object)>(r8) in <io.vertx.core.impl.DeploymentManager: void doDeployVerticle(java.util.Iterator,java.lang.Throwable,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.lang.ClassLoader,io.vertx.core.Handler)> ==> <io.vertx.core.impl.CompositeFutureImpl: void complete(java.lang.Object)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Future: void complete(java.lang.Object)>(r8) in <io.vertx.core.impl.DeploymentManager: void doDeployVerticle(java.util.Iterator,java.lang.Throwable,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.lang.ClassLoader,io.vertx.core.Handler)> ==> <io.vertx.core.impl.SucceededFuture: void complete(java.lang.Object)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Future: void complete(java.lang.Object)>(r8) in <io.vertx.core.impl.DeploymentManager: void doDeployVerticle(java.util.Iterator,java.lang.Throwable,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.lang.ClassLoader,io.vertx.core.Handler)> ==> <io.vertx.core.impl.FutureImpl: void complete(java.lang.Object)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Future: void complete(java.lang.Object)>(r8) in <io.vertx.core.impl.DeploymentManager: void doDeployVerticle(java.util.Iterator,java.lang.Throwable,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.lang.ClassLoader,io.vertx.core.Handler)> ==> <io.vertx.core.impl.FailedFuture: void complete(java.lang.Object)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Future: io.vertx.core.Future setHandler(io.vertx.core.Handler)>($r17) in <io.vertx.core.impl.DeploymentManager: void doDeployVerticle(java.util.Iterator,java.lang.Throwable,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.lang.ClassLoader,io.vertx.core.Handler)> ==> <io.vertx.core.impl.CompositeFutureImpl: io.vertx.core.Future setHandler(io.vertx.core.Handler)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Future: io.vertx.core.Future setHandler(io.vertx.core.Handler)>($r17) in <io.vertx.core.impl.DeploymentManager: void doDeployVerticle(java.util.Iterator,java.lang.Throwable,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.lang.ClassLoader,io.vertx.core.Handler)> ==> <io.vertx.core.impl.SucceededFuture: io.vertx.core.Future setHandler(io.vertx.core.Handler)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Future: io.vertx.core.Future setHandler(io.vertx.core.Handler)>($r17) in <io.vertx.core.impl.DeploymentManager: void doDeployVerticle(java.util.Iterator,java.lang.Throwable,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.lang.ClassLoader,io.vertx.core.Handler)> ==> <io.vertx.core.impl.FutureImpl: io.vertx.core.Future setHandler(io.vertx.core.Handler)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Future: io.vertx.core.Future setHandler(io.vertx.core.Handler)>($r17) in <io.vertx.core.impl.DeploymentManager: void doDeployVerticle(java.util.Iterator,java.lang.Throwable,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.lang.ClassLoader,io.vertx.core.Handler)> ==> <io.vertx.core.impl.FailedFuture: io.vertx.core.Future setHandler(io.vertx.core.Handler)>
SPECIAL edge: specialinvoke r2.<io.vertx.core.impl.DeploymentManager: void reportFailure(java.lang.Throwable,io.vertx.core.Context,io.vertx.core.Handler)>(r1, r3, r4) in <io.vertx.core.impl.DeploymentManager: void doDeployVerticle(java.util.Iterator,java.lang.Throwable,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.lang.ClassLoader,io.vertx.core.Handler)> ==> <io.vertx.core.impl.DeploymentManager: void reportFailure(java.lang.Throwable,io.vertx.core.Context,io.vertx.core.Handler)>
CLINIT edge: $r6 = staticinvoke <io.vertx.core.Future: io.vertx.core.Future failedFuture(java.lang.Throwable)>(r1) in <io.vertx.core.impl.DeploymentManager: void reportFailure(java.lang.Throwable,io.vertx.core.Context,io.vertx.core.Handler)> ==> <io.vertx.core.Future: void <clinit>()>
STATIC edge: $r6 = staticinvoke <io.vertx.core.Future: io.vertx.core.Future failedFuture(java.lang.Throwable)>(r1) in <io.vertx.core.impl.DeploymentManager: void reportFailure(java.lang.Throwable,io.vertx.core.Context,io.vertx.core.Handler)> ==> <io.vertx.core.Future: io.vertx.core.Future failedFuture(java.lang.Throwable)>
CLINIT edge: $r2 = <io.vertx.core.impl.DeploymentManager: io.vertx.core.logging.Logger log> in <io.vertx.core.impl.DeploymentManager: void reportFailure(java.lang.Throwable,io.vertx.core.Context,io.vertx.core.Handler)> ==> <io.vertx.core.impl.DeploymentManager: void <clinit>()>
CLINIT edge: $r1 = <io.vertx.core.Future: io.vertx.core.spi.FutureFactory factory> in <io.vertx.core.Future: io.vertx.core.Future failedFuture(java.lang.Throwable)> ==> <io.vertx.core.Future: void <clinit>()>
SPECIAL edge: specialinvoke $r9.<io.vertx.core.impl.DeploymentManager$lambda_doDeployVerticle_2__17: void <init>(io.vertx.core.impl.DeploymentManager,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.spi.VerticleFactory,java.lang.ClassLoader,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.util.Iterator)>($r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8) in <io.vertx.core.impl.DeploymentManager$lambda_doDeployVerticle_2__17: io.vertx.core.Handler bootstrap$(io.vertx.core.impl.DeploymentManager,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.spi.VerticleFactory,java.lang.ClassLoader,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.util.Iterator)> ==> <io.vertx.core.impl.DeploymentManager$lambda_doDeployVerticle_2__17: void <init>(io.vertx.core.impl.DeploymentManager,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.spi.VerticleFactory,java.lang.ClassLoader,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.util.Iterator)>
INTERFACE edge: $r1 = interfaceinvoke $r0.<io.vertx.core.spi.FutureFactory: io.vertx.core.Future future()>() in <io.vertx.core.Future: io.vertx.core.Future future()> ==> <io.vertx.core.impl.FutureFactoryImpl: io.vertx.core.Future future()>
SPECIAL edge: specialinvoke $r2.<io.vertx.core.file.impl.WindowsFileSystem: void <init>(io.vertx.core.impl.VertxInternal)>(r0) in <io.vertx.core.impl.VertxImpl: io.vertx.core.file.FileSystem getFileSystem()> ==> <io.vertx.core.file.impl.WindowsFileSystem: void <init>(io.vertx.core.impl.VertxInternal)>
SPECIAL edge: specialinvoke $r3.<io.vertx.core.file.impl.FileSystemImpl: void <init>(io.vertx.core.impl.VertxInternal)>(r0) in <io.vertx.core.impl.VertxImpl: io.vertx.core.file.FileSystem getFileSystem()> ==> <io.vertx.core.file.impl.FileSystemImpl: void <init>(io.vertx.core.impl.VertxInternal)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.VertxOptions: io.vertx.core.metrics.MetricsOptions getMetricsOptions()>() in <io.vertx.core.impl.VertxImpl: io.vertx.core.spi.metrics.VertxMetrics initialiseMetrics(io.vertx.core.VertxOptions)> ==> <io.vertx.core.VertxOptions: io.vertx.core.metrics.MetricsOptions getMetricsOptions()>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.VertxOptions: io.vertx.core.metrics.MetricsOptions getMetricsOptions()>() in <io.vertx.core.impl.VertxImpl: io.vertx.core.spi.metrics.VertxMetrics initialiseMetrics(io.vertx.core.VertxOptions)> ==> <io.vertx.core.VertxOptions: io.vertx.core.metrics.MetricsOptions getMetricsOptions()>
VIRTUAL edge: $r3 = virtualinvoke r0.<io.vertx.core.VertxOptions: io.vertx.core.metrics.MetricsOptions getMetricsOptions()>() in <io.vertx.core.impl.VertxImpl: io.vertx.core.spi.metrics.VertxMetrics initialiseMetrics(io.vertx.core.VertxOptions)> ==> <io.vertx.core.VertxOptions: io.vertx.core.metrics.MetricsOptions getMetricsOptions()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<io.vertx.core.metrics.MetricsOptions: boolean isEnabled()>() in <io.vertx.core.impl.VertxImpl: io.vertx.core.spi.metrics.VertxMetrics initialiseMetrics(io.vertx.core.VertxOptions)> ==> <io.vertx.core.metrics.MetricsOptions: boolean isEnabled()>
VIRTUAL edge: r14 = virtualinvoke $r3.<io.vertx.core.metrics.MetricsOptions: io.vertx.core.spi.VertxMetricsFactory getFactory()>() in <io.vertx.core.impl.VertxImpl: io.vertx.core.spi.metrics.VertxMetrics initialiseMetrics(io.vertx.core.VertxOptions)> ==> <io.vertx.core.metrics.MetricsOptions: io.vertx.core.spi.VertxMetricsFactory getFactory()>
VIRTUAL edge: virtualinvoke $r12.<io.vertx.core.logging.Logger: void warn(java.lang.Object)>("Metrics has been set to enabled but no VertxMetricsFactory found on classpath") in <io.vertx.core.impl.VertxImpl: io.vertx.core.spi.metrics.VertxMetrics initialiseMetrics(io.vertx.core.VertxOptions)> ==> <io.vertx.core.logging.Logger: void warn(java.lang.Object)>
SPECIAL edge: specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.impl.VertxImpl: io.vertx.core.spi.metrics.VertxMetrics initialiseMetrics(io.vertx.core.VertxOptions)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The metric instance created from ") in <io.vertx.core.impl.VertxImpl: io.vertx.core.spi.metrics.VertxMetrics initialiseMetrics(io.vertx.core.VertxOptions)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r14) in <io.vertx.core.impl.VertxImpl: io.vertx.core.spi.metrics.VertxMetrics initialiseMetrics(io.vertx.core.VertxOptions)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cannot be null") in <io.vertx.core.impl.VertxImpl: io.vertx.core.spi.metrics.VertxMetrics initialiseMetrics(io.vertx.core.VertxOptions)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.impl.VertxImpl: io.vertx.core.spi.metrics.VertxMetrics initialiseMetrics(io.vertx.core.VertxOptions)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r12 = virtualinvoke r0.<io.vertx.core.VertxOptions: io.vertx.core.spi.cluster.ClusterManager getClusterManager()>() in <io.vertx.core.impl.VertxImpl: io.vertx.core.spi.cluster.ClusterManager getClusterManager(io.vertx.core.VertxOptions)> ==> <io.vertx.core.VertxOptions: io.vertx.core.spi.cluster.ClusterManager getClusterManager()>
VIRTUAL edge: $r4 = virtualinvoke r13.<java.lang.Class: java.lang.Object newInstance()>() in <io.vertx.core.impl.VertxImpl: io.vertx.core.spi.cluster.ClusterManager getClusterManager(io.vertx.core.VertxOptions)> ==> <java.lang.Class: java.lang.Object newInstance()>
SPECIAL edge: specialinvoke $r7.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.impl.VertxImpl: io.vertx.core.spi.cluster.ClusterManager getClusterManager(io.vertx.core.VertxOptions)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to instantiate ") in <io.vertx.core.impl.VertxImpl: io.vertx.core.spi.cluster.ClusterManager getClusterManager(io.vertx.core.VertxOptions)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <io.vertx.core.impl.VertxImpl: io.vertx.core.spi.cluster.ClusterManager getClusterManager(io.vertx.core.VertxOptions)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.impl.VertxImpl: io.vertx.core.spi.cluster.ClusterManager getClusterManager(io.vertx.core.VertxOptions)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r10, $r5) in <io.vertx.core.impl.VertxImpl: io.vertx.core.spi.cluster.ClusterManager getClusterManager(io.vertx.core.VertxOptions)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No ClusterManagerFactory instances found on classpath") in <io.vertx.core.impl.VertxImpl: io.vertx.core.spi.cluster.ClusterManager getClusterManager(io.vertx.core.VertxOptions)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.impl.CloseHooks: void <init>(io.vertx.core.logging.Logger)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.impl.BlockedThreadChecker: void <init>(long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.WeakHashMap: void <init>()>() in <io.vertx.core.impl.BlockedThreadChecker: void <init>(long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)> ==> <java.util.WeakHashMap: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.util.Timer: void <init>(java.lang.String,boolean)>("vertx-blocked-thread-checker", 1) in <io.vertx.core.impl.BlockedThreadChecker: void <init>(long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)> ==> <java.util.Timer: void <init>(java.lang.String,boolean)>
SPECIAL edge: specialinvoke $r3.<io.vertx.core.impl.BlockedThreadChecker$1: void <init>(io.vertx.core.impl.BlockedThreadChecker,java.util.concurrent.TimeUnit,long)>(r0, r4, l0) in <io.vertx.core.impl.BlockedThreadChecker: void <init>(long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)> ==> <io.vertx.core.impl.BlockedThreadChecker$1: void <init>(io.vertx.core.impl.BlockedThreadChecker,java.util.concurrent.TimeUnit,long)>
VIRTUAL edge: $l2 = virtualinvoke r6.<java.util.concurrent.TimeUnit: long toMillis(long)>(l1) in <io.vertx.core.impl.BlockedThreadChecker: void <init>(long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)> ==> <java.util.concurrent.TimeUnit: long toMillis(long)>
VIRTUAL edge: $l3 = virtualinvoke r6.<java.util.concurrent.TimeUnit: long toMillis(long)>(l1) in <io.vertx.core.impl.BlockedThreadChecker: void <init>(long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)> ==> <java.util.concurrent.TimeUnit: long toMillis(long)>
VIRTUAL edge: virtualinvoke $r5.<java.util.Timer: void schedule(java.util.TimerTask,long,long)>($r3, $l2, $l3) in <io.vertx.core.impl.BlockedThreadChecker: void <init>(long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)> ==> <java.util.Timer: void schedule(java.util.TimerTask,long,long)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.impl.VertxThreadFactory: void <init>(java.lang.String,io.vertx.core.impl.BlockedThreadChecker,boolean,long,java.util.concurrent.TimeUnit)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0) in <io.vertx.core.impl.VertxThreadFactory: void <init>(java.lang.String,io.vertx.core.impl.BlockedThreadChecker,boolean,long,java.util.concurrent.TimeUnit)> ==> <java.util.concurrent.atomic.AtomicInteger: void <init>(int)>
SPECIAL edge: specialinvoke $r4.<io.netty.channel.epoll.EpollEventLoopGroup: void <init>(int,java.util.concurrent.ThreadFactory)>(i0, r1) in <io.vertx.core.net.impl.transport.EpollTransport: io.netty.channel.EventLoopGroup eventLoopGroup(int,java.util.concurrent.ThreadFactory,int)> ==> <io.netty.channel.epoll.EpollEventLoopGroup: void <init>(int,java.util.concurrent.ThreadFactory)>
SPECIAL edge: specialinvoke $r4.<io.netty.channel.kqueue.KQueueEventLoopGroup: void <init>(int,java.util.concurrent.ThreadFactory)>(i0, r1) in <io.vertx.core.net.impl.transport.KQueueTransport: io.netty.channel.EventLoopGroup eventLoopGroup(int,java.util.concurrent.ThreadFactory,int)> ==> <io.netty.channel.kqueue.KQueueEventLoopGroup: void <init>(int,java.util.concurrent.ThreadFactory)>
SPECIAL edge: specialinvoke $r4.<io.netty.channel.nio.NioEventLoopGroup: void <init>(int,java.util.concurrent.ThreadFactory)>(i0, r1) in <io.vertx.core.net.impl.transport.Transport: io.netty.channel.EventLoopGroup eventLoopGroup(int,java.util.concurrent.ThreadFactory,int)> ==> <io.netty.channel.nio.NioEventLoopGroup: void <init>(int,java.util.concurrent.ThreadFactory)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.impl.WorkerPool: void <init>(java.util.concurrent.ExecutorService,io.vertx.core.spi.metrics.PoolMetrics)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.file.impl.FileResolver: void <init>(io.vertx.core.file.FileSystemOptions)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.file.impl.FileResolver: void setupCacheDir()>() in <io.vertx.core.file.impl.FileResolver: void <init>(io.vertx.core.file.FileSystemOptions)> ==> <io.vertx.core.file.impl.FileResolver: void setupCacheDir()>
VIRTUAL edge: $z0 = virtualinvoke r1.<io.vertx.core.file.FileSystemOptions: boolean isFileCachingEnabled()>() in <io.vertx.core.file.impl.FileResolver: void <init>(io.vertx.core.file.FileSystemOptions)> ==> <io.vertx.core.file.FileSystemOptions: boolean isFileCachingEnabled()>
VIRTUAL edge: $z1 = virtualinvoke r1.<io.vertx.core.file.FileSystemOptions: boolean isClassPathResolvingEnabled()>() in <io.vertx.core.file.impl.FileResolver: void <init>(io.vertx.core.file.FileSystemOptions)> ==> <io.vertx.core.file.FileSystemOptions: boolean isClassPathResolvingEnabled()>
SPECIAL edge: specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>(r2) in <io.vertx.core.file.impl.FileResolver: void <init>(io.vertx.core.file.FileSystemOptions)> ==> <java.io.File: void <init>(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.io.File: java.io.File getAbsoluteFile()>() in <io.vertx.core.file.impl.FileResolver: void <init>(io.vertx.core.file.FileSystemOptions)> ==> <java.io.File: java.io.File getAbsoluteFile()>
CLINIT edge: $r1 = <io.vertx.core.file.impl.FileResolver: java.lang.String CACHE_DIR_BASE> in <io.vertx.core.file.impl.FileResolver: void setupCacheDir()> ==> <io.vertx.core.file.impl.FileResolver: void <clinit>()>
STATIC edge: $r15 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>() in <io.vertx.core.file.impl.FileResolver: void setupCacheDir()> ==> <java.lang.Runtime: java.lang.Runtime getRuntime()>
STATIC edge: $r14 = staticinvoke <io.vertx.core.file.impl.FileResolver$lambda_setupCacheDir_1__26: java.lang.Runnable bootstrap$(io.vertx.core.file.impl.FileResolver)>(r8) in <io.vertx.core.file.impl.FileResolver: void setupCacheDir()> ==> <io.vertx.core.file.impl.FileResolver$lambda_setupCacheDir_1__26: java.lang.Runnable bootstrap$(io.vertx.core.file.impl.FileResolver)>
STATIC edge: $r4 = staticinvoke <java.util.UUID: java.util.UUID randomUUID()>() in <io.vertx.core.file.impl.FileResolver: void setupCacheDir()> ==> <java.util.UUID: java.util.UUID randomUUID()>
CLINIT edge: $r9 = new java.io.File in <io.vertx.core.file.impl.FileResolver: void setupCacheDir()> ==> <java.io.File: void <clinit>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.impl.AddressResolver: void <init>(io.vertx.core.Vertx,io.vertx.core.dns.AddressResolverOptions)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $r5 = interfaceinvoke $r4.<io.vertx.core.spi.resolver.ResolverProvider: io.netty.resolver.AddressResolverGroup resolver(io.vertx.core.dns.AddressResolverOptions)>(r2) in <io.vertx.core.impl.AddressResolver: void <init>(io.vertx.core.Vertx,io.vertx.core.dns.AddressResolverOptions)> ==> <io.vertx.core.impl.resolver.DefaultResolverProvider: io.netty.resolver.AddressResolverGroup resolver(io.vertx.core.dns.AddressResolverOptions)>
INTERFACE edge: $r5 = interfaceinvoke $r4.<io.vertx.core.spi.resolver.ResolverProvider: io.netty.resolver.AddressResolverGroup resolver(io.vertx.core.dns.AddressResolverOptions)>(r2) in <io.vertx.core.impl.AddressResolver: void <init>(io.vertx.core.Vertx,io.vertx.core.dns.AddressResolverOptions)> ==> <io.vertx.core.impl.resolver.DnsResolverProvider: io.netty.resolver.AddressResolverGroup resolver(io.vertx.core.dns.AddressResolverOptions)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.impl.DeploymentManager: void <init>(io.vertx.core.impl.VertxInternal)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.impl.DeploymentManager: void loadVerticleFactories()>() in <io.vertx.core.impl.DeploymentManager: void <init>(io.vertx.core.impl.VertxInternal)> ==> <io.vertx.core.impl.DeploymentManager: void loadVerticleFactories()>
SPECIAL edge: specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>() in <io.vertx.core.impl.DeploymentManager: void <init>(io.vertx.core.impl.VertxInternal)> ==> <java.util.concurrent.ConcurrentHashMap: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.util.WeakHashMap: void <init>()>() in <io.vertx.core.impl.DeploymentManager: void <init>(io.vertx.core.impl.VertxInternal)> ==> <java.util.WeakHashMap: void <init>()>
SPECIAL edge: specialinvoke $r3.<java.util.concurrent.ConcurrentHashMap: void <init>()>() in <io.vertx.core.impl.DeploymentManager: void <init>(io.vertx.core.impl.VertxInternal)> ==> <java.util.concurrent.ConcurrentHashMap: void <init>()>
SPECIAL edge: specialinvoke $r4.<java.util.ArrayList: void <init>()>() in <io.vertx.core.impl.DeploymentManager: void <init>(io.vertx.core.impl.VertxInternal)> ==> <java.util.ArrayList: void <init>()>
STATIC edge: r0 = staticinvoke <io.vertx.core.ServiceHelper: java.util.Collection loadFactories(java.lang.Class)>(class "Lio/vertx/core/spi/VerticleFactory;") in <io.vertx.core.impl.DeploymentManager: void loadVerticleFactories()> ==> <io.vertx.core.ServiceHelper: java.util.Collection loadFactories(java.lang.Class)>
STATIC edge: $r2 = staticinvoke <io.vertx.core.impl.DeploymentManager$registerVerticleFactory__27: java.util.function.Consumer bootstrap$(io.vertx.core.impl.DeploymentManager)>(r1) in <io.vertx.core.impl.DeploymentManager: void loadVerticleFactories()> ==> <io.vertx.core.impl.DeploymentManager$registerVerticleFactory__27: java.util.function.Consumer bootstrap$(io.vertx.core.impl.DeploymentManager)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.eventbus.impl.EventBusImpl: void <init>(io.vertx.core.impl.VertxInternal)>(r1) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.ClusterManager)> ==> <io.vertx.core.eventbus.impl.EventBusImpl: void <init>(io.vertx.core.impl.VertxInternal)>
SPECIAL edge: specialinvoke $r2.<java.util.concurrent.ConcurrentHashMap: void <init>()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.ClusterManager)> ==> <java.util.concurrent.ConcurrentHashMap: void <init>()>
SPECIAL edge: specialinvoke $r3.<io.vertx.core.impl.ConcurrentHashSet: void <init>()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.ClusterManager)> ==> <io.vertx.core.impl.ConcurrentHashSet: void <init>()>
VIRTUAL edge: $r5 = virtualinvoke r4.<io.vertx.core.VertxOptions: io.vertx.core.eventbus.EventBusOptions getEventBusOptions()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.ClusterManager)> ==> <io.vertx.core.VertxOptions: io.vertx.core.eventbus.EventBusOptions getEventBusOptions()>
INTERFACE edge: $r7 = interfaceinvoke r1.<io.vertx.core.impl.VertxInternal: io.vertx.core.impl.ContextInternal getOrCreateContext()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.ClusterManager)> ==> <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.ContextInternal getOrCreateContext()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void <init>(io.vertx.core.impl.VertxInternal)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.concurrent.CopyOnWriteArrayList: void <init>()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void <init>(io.vertx.core.impl.VertxInternal)> ==> <java.util.concurrent.CopyOnWriteArrayList: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.util.concurrent.CopyOnWriteArrayList: void <init>()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void <init>(io.vertx.core.impl.VertxInternal)> ==> <java.util.concurrent.CopyOnWriteArrayList: void <init>()>
SPECIAL edge: specialinvoke $r3.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(0L) in <io.vertx.core.eventbus.impl.EventBusImpl: void <init>(io.vertx.core.impl.VertxInternal)> ==> <java.util.concurrent.atomic.AtomicLong: void <init>(long)>
SPECIAL edge: specialinvoke $r4.<java.util.concurrent.ConcurrentHashMap: void <init>()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void <init>(io.vertx.core.impl.VertxInternal)> ==> <java.util.concurrent.ConcurrentHashMap: void <init>()>
SPECIAL edge: specialinvoke $r5.<io.vertx.core.eventbus.impl.CodecManager: void <init>()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void <init>(io.vertx.core.impl.VertxInternal)> ==> <io.vertx.core.eventbus.impl.CodecManager: void <init>()>
INTERFACE edge: r7 = interfaceinvoke r6.<io.vertx.core.impl.VertxInternal: io.vertx.core.spi.metrics.VertxMetrics metricsSPI()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void <init>(io.vertx.core.impl.VertxInternal)> ==> <io.vertx.core.impl.VertxImpl: io.vertx.core.spi.metrics.VertxMetrics metricsSPI()>
INTERFACE edge: $r9 = interfaceinvoke r7.<io.vertx.core.spi.metrics.VertxMetrics: io.vertx.core.spi.metrics.EventBusMetrics createEventBusMetrics()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void <init>(io.vertx.core.impl.VertxInternal)> ==> <io.vertx.core.spi.metrics.VertxMetrics: io.vertx.core.spi.metrics.EventBusMetrics createEventBusMetrics()>
CLINIT edge: $r4 = <io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec NULL_MESSAGE_CODEC> in <io.vertx.core.eventbus.impl.CodecManager: void <init>()> ==> <io.vertx.core.eventbus.impl.CodecManager: void <clinit>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.shareddata.impl.SharedDataImpl: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.spi.cluster.ClusterManager)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>() in <io.vertx.core.shareddata.impl.SharedDataImpl: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.spi.cluster.ClusterManager)> ==> <java.util.concurrent.ConcurrentHashMap: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.util.concurrent.ConcurrentHashMap: void <init>()>() in <io.vertx.core.shareddata.impl.SharedDataImpl: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.spi.cluster.ClusterManager)> ==> <java.util.concurrent.ConcurrentHashMap: void <init>()>
SPECIAL edge: specialinvoke $r3.<java.util.concurrent.ConcurrentHashMap: void <init>()>() in <io.vertx.core.shareddata.impl.SharedDataImpl: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.spi.cluster.ClusterManager)> ==> <java.util.concurrent.ConcurrentHashMap: void <init>()>
SPECIAL edge: specialinvoke $r7.<io.vertx.core.shareddata.impl.LocalAsyncLocks: void <init>()>() in <io.vertx.core.shareddata.impl.SharedDataImpl: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.spi.cluster.ClusterManager)> ==> <io.vertx.core.shareddata.impl.LocalAsyncLocks: void <init>()>
VIRTUAL edge: r2 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>() in <io.vertx.core.impl.Utils: void <clinit>()> ==> <java.lang.String: java.lang.String toLowerCase()>
VIRTUAL edge: $z0 = virtualinvoke r2.<java.lang.String: boolean contains(java.lang.CharSequence)>("win") in <io.vertx.core.impl.Utils: void <clinit>()> ==> <java.lang.String: boolean contains(java.lang.CharSequence)>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.file.CopyOptions: void <init>()>() in <io.vertx.core.file.impl.FileSystemImpl: void <clinit>()> ==> <io.vertx.core.file.CopyOptions: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class forName(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)>($r4, r3) in <io.vertx.core.spi.resolver.ResolverProvider: io.vertx.core.spi.resolver.ResolverProvider factory(io.vertx.core.Vertx,io.vertx.core.dns.AddressResolverOptions)> ==> <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.logging.Logger: void info(java.lang.Object)>("Using the default address resolver as the dns resolver could not be loaded") in <io.vertx.core.spi.resolver.ResolverProvider: io.vertx.core.spi.resolver.ResolverProvider factory(io.vertx.core.Vertx,io.vertx.core.dns.AddressResolverOptions)> ==> <io.vertx.core.logging.Logger: void info(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.impl.resolver.DefaultResolverProvider: void <init>()>() in <io.vertx.core.spi.resolver.ResolverProvider: io.vertx.core.spi.resolver.ResolverProvider factory(io.vertx.core.Vertx,io.vertx.core.dns.AddressResolverOptions)> ==> <io.vertx.core.impl.resolver.DefaultResolverProvider: void <init>()>
CLINIT edge: $r2 = staticinvoke <java.util.Collections: java.util.List synchronizedList(java.util.List)>($r59) in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <java.util.Collections: void <clinit>()>
STATIC edge: i9 = staticinvoke <io.netty.util.internal.ObjectUtil: int intValue(java.lang.Integer,int)>($r55, 0) in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <io.netty.util.internal.ObjectUtil: int intValue(java.lang.Integer,int)>
STATIC edge: $r55 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8) in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: i7 = staticinvoke <io.netty.util.internal.ObjectUtil: int intValue(java.lang.Integer,int)>($r54, 2147483647) in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <io.netty.util.internal.ObjectUtil: int intValue(java.lang.Integer,int)>
STATIC edge: $r54 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6) in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: i5 = staticinvoke <io.netty.util.internal.ObjectUtil: int intValue(java.lang.Integer,int)>($r53, 0) in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <io.netty.util.internal.ObjectUtil: int intValue(java.lang.Integer,int)>
STATIC edge: $r53 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4) in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: r50 = staticinvoke <io.netty.resolver.HostsFileParser: io.netty.resolver.HostsFileEntries parseSilently()>() in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <io.netty.resolver.HostsFileParser: io.netty.resolver.HostsFileEntries parseSilently()>
STATIC edge: r50 = staticinvoke <io.netty.resolver.HostsFileParser: io.netty.resolver.HostsFileEntries parse(java.io.Reader)>($r67) in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <io.netty.resolver.HostsFileParser: io.netty.resolver.HostsFileEntries parse(java.io.Reader)>
STATIC edge: r50 = staticinvoke <io.netty.resolver.HostsFileParser: io.netty.resolver.HostsFileEntries parse(java.io.File)>(r49) in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <io.netty.resolver.HostsFileParser: io.netty.resolver.HostsFileEntries parse(java.io.File)>
STATIC edge: r48 = staticinvoke <io.vertx.core.impl.resolver.DnsResolverProvider$lambda_new_0__28: io.netty.resolver.dns.DnsServerAddressStreamProvider bootstrap$(io.netty.resolver.dns.DnsServerAddresses)>($r46) in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <io.vertx.core.impl.resolver.DnsResolverProvider$lambda_new_0__28: io.netty.resolver.dns.DnsServerAddressStreamProvider bootstrap$(io.netty.resolver.dns.DnsServerAddresses)>
STATIC edge: $r46 = staticinvoke <io.netty.resolver.dns.DnsServerAddresses: io.netty.resolver.dns.DnsServerAddresses sequential(java.lang.Iterable)>($r9) in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <io.netty.resolver.dns.DnsServerAddresses: io.netty.resolver.dns.DnsServerAddresses sequential(java.lang.Iterable)>
STATIC edge: $r46 = staticinvoke <io.netty.resolver.dns.DnsServerAddresses: io.netty.resolver.dns.DnsServerAddresses rotational(java.lang.Iterable)>($r21) in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <io.netty.resolver.dns.DnsServerAddresses: io.netty.resolver.dns.DnsServerAddresses rotational(java.lang.Iterable)>
STATIC edge: $r6 = staticinvoke <io.netty.resolver.dns.DefaultDnsServerAddressStreamProvider: io.netty.resolver.dns.DnsServerAddresses defaultAddresses()>() in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <io.netty.resolver.dns.DefaultDnsServerAddressStreamProvider: io.netty.resolver.dns.DnsServerAddresses defaultAddresses()>
STATIC edge: $r26 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByAddress(byte[])>($r25) in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <java.net.InetAddress: java.net.InetAddress getByAddress(byte[])>
STATIC edge: $r25 = staticinvoke <io.netty.util.NetUtil: byte[] createByteArrayFromIpAddressString(java.lang.String)>(r41) in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <io.netty.util.NetUtil: byte[] createByteArrayFromIpAddressString(java.lang.String)>
STATIC edge: i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r27) in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <java.lang.Integer: int parseInt(java.lang.String)>
STATIC edge: $r2 = staticinvoke <java.util.Collections: java.util.List synchronizedList(java.util.List)>($r59) in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <java.util.Collections: java.util.List synchronizedList(java.util.List)>
CLINIT edge: $r53 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4) in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r27) in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <java.lang.Integer: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.impl.ConcurrentHashSet: void <clinit>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.eventbus.impl.EventBusImpl: void close(io.vertx.core.Handler)>($r1) in <io.vertx.core.eventbus.impl.EventBusImpl: void finalize()> ==> <io.vertx.core.eventbus.impl.EventBusImpl: void close(io.vertx.core.Handler)>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.eventbus.impl.EventBusImpl: void close(io.vertx.core.Handler)>($r1) in <io.vertx.core.eventbus.impl.EventBusImpl: void finalize()> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void close(io.vertx.core.Handler)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void finalize()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void finalize()> ==> <java.lang.Object: void finalize()>
STATIC edge: $r4 = staticinvoke <io.vertx.core.eventbus.impl.EventBusImpl$lambda_close_0__29: io.vertx.core.Handler bootstrap$(io.vertx.core.Handler)>(r2) in <io.vertx.core.eventbus.impl.EventBusImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_close_0__29: io.vertx.core.Handler bootstrap$(io.vertx.core.Handler)>
STATIC edge: $r2 = staticinvoke <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_close_5__30: io.vertx.core.Handler bootstrap$(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus,io.vertx.core.Handler)>(r0, r1) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void close(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_close_5__30: io.vertx.core.Handler bootstrap$(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus,io.vertx.core.Handler)>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.eventbus.impl.codecs.PingMessageCodec: void <init>()>() in <io.vertx.core.eventbus.impl.CodecManager: void <clinit>()> ==> <io.vertx.core.eventbus.impl.codecs.PingMessageCodec: void <init>()>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.eventbus.impl.codecs.NullMessageCodec: void <init>()>() in <io.vertx.core.eventbus.impl.CodecManager: void <clinit>()> ==> <io.vertx.core.eventbus.impl.codecs.NullMessageCodec: void <init>()>
SPECIAL edge: specialinvoke $r2.<io.vertx.core.eventbus.impl.codecs.StringMessageCodec: void <init>()>() in <io.vertx.core.eventbus.impl.CodecManager: void <clinit>()> ==> <io.vertx.core.eventbus.impl.codecs.StringMessageCodec: void <init>()>
SPECIAL edge: specialinvoke $r3.<io.vertx.core.eventbus.impl.codecs.BufferMessageCodec: void <init>()>() in <io.vertx.core.eventbus.impl.CodecManager: void <clinit>()> ==> <io.vertx.core.eventbus.impl.codecs.BufferMessageCodec: void <init>()>
SPECIAL edge: specialinvoke $r4.<io.vertx.core.eventbus.impl.codecs.JsonObjectMessageCodec: void <init>()>() in <io.vertx.core.eventbus.impl.CodecManager: void <clinit>()> ==> <io.vertx.core.eventbus.impl.codecs.JsonObjectMessageCodec: void <init>()>
SPECIAL edge: specialinvoke $r5.<io.vertx.core.eventbus.impl.codecs.JsonArrayMessageCodec: void <init>()>() in <io.vertx.core.eventbus.impl.CodecManager: void <clinit>()> ==> <io.vertx.core.eventbus.impl.codecs.JsonArrayMessageCodec: void <init>()>
SPECIAL edge: specialinvoke $r6.<io.vertx.core.eventbus.impl.codecs.ByteArrayMessageCodec: void <init>()>() in <io.vertx.core.eventbus.impl.CodecManager: void <clinit>()> ==> <io.vertx.core.eventbus.impl.codecs.ByteArrayMessageCodec: void <init>()>
SPECIAL edge: specialinvoke $r7.<io.vertx.core.eventbus.impl.codecs.IntMessageCodec: void <init>()>() in <io.vertx.core.eventbus.impl.CodecManager: void <clinit>()> ==> <io.vertx.core.eventbus.impl.codecs.IntMessageCodec: void <init>()>
SPECIAL edge: specialinvoke $r8.<io.vertx.core.eventbus.impl.codecs.LongMessageCodec: void <init>()>() in <io.vertx.core.eventbus.impl.CodecManager: void <clinit>()> ==> <io.vertx.core.eventbus.impl.codecs.LongMessageCodec: void <init>()>
SPECIAL edge: specialinvoke $r9.<io.vertx.core.eventbus.impl.codecs.FloatMessageCodec: void <init>()>() in <io.vertx.core.eventbus.impl.CodecManager: void <clinit>()> ==> <io.vertx.core.eventbus.impl.codecs.FloatMessageCodec: void <init>()>
SPECIAL edge: specialinvoke $r10.<io.vertx.core.eventbus.impl.codecs.DoubleMessageCodec: void <init>()>() in <io.vertx.core.eventbus.impl.CodecManager: void <clinit>()> ==> <io.vertx.core.eventbus.impl.codecs.DoubleMessageCodec: void <init>()>
SPECIAL edge: specialinvoke $r11.<io.vertx.core.eventbus.impl.codecs.BooleanMessageCodec: void <init>()>() in <io.vertx.core.eventbus.impl.CodecManager: void <clinit>()> ==> <io.vertx.core.eventbus.impl.codecs.BooleanMessageCodec: void <init>()>
SPECIAL edge: specialinvoke $r12.<io.vertx.core.eventbus.impl.codecs.ShortMessageCodec: void <init>()>() in <io.vertx.core.eventbus.impl.CodecManager: void <clinit>()> ==> <io.vertx.core.eventbus.impl.codecs.ShortMessageCodec: void <init>()>
SPECIAL edge: specialinvoke $r13.<io.vertx.core.eventbus.impl.codecs.CharMessageCodec: void <init>()>() in <io.vertx.core.eventbus.impl.CodecManager: void <clinit>()> ==> <io.vertx.core.eventbus.impl.codecs.CharMessageCodec: void <init>()>
SPECIAL edge: specialinvoke $r14.<io.vertx.core.eventbus.impl.codecs.ByteMessageCodec: void <init>()>() in <io.vertx.core.eventbus.impl.CodecManager: void <clinit>()> ==> <io.vertx.core.eventbus.impl.codecs.ByteMessageCodec: void <init>()>
SPECIAL edge: specialinvoke $r15.<io.vertx.core.eventbus.impl.codecs.ReplyExceptionMessageCodec: void <init>()>() in <io.vertx.core.eventbus.impl.CodecManager: void <clinit>()> ==> <io.vertx.core.eventbus.impl.codecs.ReplyExceptionMessageCodec: void <init>()>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.eventbus.impl.EventBusImpl$lambda_finalize_6__18: void <init>()>() in <io.vertx.core.eventbus.impl.EventBusImpl$lambda_finalize_6__18: io.vertx.core.Handler bootstrap$()> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_finalize_6__18: void <init>()>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Already started") in <io.vertx.core.eventbus.impl.EventBusImpl: void start(io.vertx.core.Handler)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.eventbus.impl.EventBusImpl: void start(io.vertx.core.Handler)> ==> <io.vertx.core.impl.DeploymentManager$lambda_doDeployVerticle_2__17: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.eventbus.impl.EventBusImpl: void start(io.vertx.core.Handler)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.eventbus.impl.EventBusImpl: void start(io.vertx.core.Handler)> ==> <io.vertx.core.impl.FutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.eventbus.impl.EventBusImpl: void start(io.vertx.core.Handler)> ==> <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.eventbus.impl.EventBusImpl: void start(io.vertx.core.Handler)> ==> <io.vertx.core.impl.SucceededFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.eventbus.impl.EventBusImpl: void start(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.eventbus.impl.EventBusImpl: void start(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.eventbus.impl.EventBusImpl: void start(io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl$lambda_joinCluster_1__10: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.eventbus.impl.EventBusImpl: void start(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.eventbus.impl.EventBusImpl: void start(io.vertx.core.Handler)> ==> <io.vertx.core.Starter$lambda_runVerticle_1__1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.eventbus.impl.EventBusImpl: void start(io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.eventbus.impl.EventBusImpl: void start(io.vertx.core.Handler)> ==> <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.eventbus.impl.EventBusImpl: void start(io.vertx.core.Handler)> ==> <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.eventbus.impl.EventBusImpl: void start(io.vertx.core.Handler)> ==> <io.vertx.core.Starter$lambda_startVertx_0__2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.eventbus.impl.EventBusImpl: void start(io.vertx.core.Handler)> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.eventbus.impl.EventBusImpl: void start(io.vertx.core.Handler)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.eventbus.impl.EventBusImpl: void start(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_start_3__19: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.eventbus.impl.EventBusImpl: void start(io.vertx.core.Handler)> ==> <io.vertx.core.impl.HAManager$lambda_doDeployVerticle_4__7: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.eventbus.impl.EventBusImpl: void start(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_close_0__29: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.eventbus.impl.EventBusImpl: void start(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.eventbus.impl.EventBusImpl: void start(io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.eventbus.impl.EventBusImpl: void start(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.eventbus.impl.EventBusImpl: void start(io.vertx.core.Handler)> ==> <io.vertx.core.Starter$lambda_createLoggingHandler_2__3: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.eventbus.impl.EventBusImpl: void start(io.vertx.core.Handler)> ==> <io.vertx.core.impl.CompositeFutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.eventbus.impl.EventBusImpl: void start(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.eventbus.impl.EventBusImpl: void start(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_finalize_6__18: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.eventbus.impl.EventBusImpl: void start(io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.eventbus.impl.EventBusImpl: void start(io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl$lambda_init_0__9: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.eventbus.impl.EventBusImpl: void start(io.vertx.core.Handler)> ==> <io.vertx.core.impl.FailedFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.eventbus.impl.EventBusImpl: void start(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.eventbus.impl.EventBusImpl: void start(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_close_5__30: void handle(java.lang.Object)>
CLINIT edge: r7 = staticinvoke <io.vertx.core.net.impl.VertxHandler: io.netty.buffer.ByteBuf safeBuffer(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBufAllocator)>(r6, $r2) in <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)> ==> <io.vertx.core.net.impl.VertxHandler: void <clinit>()>
STATIC edge: r3 = staticinvoke <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer(io.netty.buffer.ByteBuf)>(r7) in <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)> ==> <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer(io.netty.buffer.ByteBuf)>
STATIC edge: r7 = staticinvoke <io.vertx.core.net.impl.VertxHandler: io.netty.buffer.ByteBuf safeBuffer(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBufAllocator)>(r6, $r2) in <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)> ==> <io.vertx.core.net.impl.VertxHandler: io.netty.buffer.ByteBuf safeBuffer(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBufAllocator)>
CLINIT edge: r3 = staticinvoke <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer(io.netty.buffer.ByteBuf)>(r7) in <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)> ==> <io.vertx.core.buffer.Buffer: void <clinit>()>
CLINIT edge: staticinvoke <io.vertx.core.Starter: void lambda$startVertx$0(java.util.concurrent.atomic.AtomicReference,java.util.concurrent.CountDownLatch,io.vertx.core.AsyncResult)>($r3, $r4, $r2) in <io.vertx.core.Starter$lambda_startVertx_0__2: void handle(java.lang.Object)> ==> <io.vertx.core.Starter: void <clinit>()>
STATIC edge: staticinvoke <io.vertx.core.Starter: void lambda$startVertx$0(java.util.concurrent.atomic.AtomicReference,java.util.concurrent.CountDownLatch,io.vertx.core.AsyncResult)>($r3, $r4, $r2) in <io.vertx.core.Starter$lambda_startVertx_0__2: void handle(java.lang.Object)> ==> <io.vertx.core.Starter: void lambda$startVertx$0(java.util.concurrent.atomic.AtomicReference,java.util.concurrent.CountDownLatch,io.vertx.core.AsyncResult)>
CLINIT edge: staticinvoke <io.vertx.core.eventbus.impl.EventBusImpl: void lambda$close$0(io.vertx.core.Handler,java.lang.Void)>($r3, $r2) in <io.vertx.core.eventbus.impl.EventBusImpl$lambda_close_0__29: void handle(java.lang.Object)> ==> <io.vertx.core.eventbus.impl.EventBusImpl: void <clinit>()>
STATIC edge: staticinvoke <io.vertx.core.eventbus.impl.EventBusImpl: void lambda$close$0(io.vertx.core.Handler,java.lang.Void)>($r3, $r2) in <io.vertx.core.eventbus.impl.EventBusImpl$lambda_close_0__29: void handle(java.lang.Object)> ==> <io.vertx.core.eventbus.impl.EventBusImpl: void lambda$close$0(io.vertx.core.Handler,java.lang.Void)>
CLINIT edge: staticinvoke <io.vertx.core.Starter: void lambda$createLoggingHandler$2(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)>($r3, $r4, $r2) in <io.vertx.core.Starter$lambda_createLoggingHandler_2__3: void handle(java.lang.Object)> ==> <io.vertx.core.Starter: void <clinit>()>
STATIC edge: staticinvoke <io.vertx.core.Starter: void lambda$createLoggingHandler$2(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)>($r3, $r4, $r2) in <io.vertx.core.Starter$lambda_createLoggingHandler_2__3: void handle(java.lang.Object)> ==> <io.vertx.core.Starter: void lambda$createLoggingHandler$2(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)>
CLINIT edge: staticinvoke <io.vertx.core.eventbus.impl.EventBusImpl: void lambda$finalize$6(io.vertx.core.AsyncResult)>($r2) in <io.vertx.core.eventbus.impl.EventBusImpl$lambda_finalize_6__18: void handle(java.lang.Object)> ==> <io.vertx.core.eventbus.impl.EventBusImpl: void <clinit>()>
STATIC edge: staticinvoke <io.vertx.core.eventbus.impl.EventBusImpl: void lambda$finalize$6(io.vertx.core.AsyncResult)>($r2) in <io.vertx.core.eventbus.impl.EventBusImpl$lambda_finalize_6__18: void handle(java.lang.Object)> ==> <io.vertx.core.eventbus.impl.EventBusImpl: void lambda$finalize$6(io.vertx.core.AsyncResult)>
CLINIT edge: staticinvoke <io.vertx.core.impl.VertxImpl: void lambda$init$0(io.vertx.core.AsyncResult)>($r2) in <io.vertx.core.impl.VertxImpl$lambda_init_0__9: void handle(java.lang.Object)> ==> <io.vertx.core.impl.VertxImpl: void <clinit>()>
STATIC edge: staticinvoke <io.vertx.core.impl.VertxImpl: void lambda$init$0(io.vertx.core.AsyncResult)>($r2) in <io.vertx.core.impl.VertxImpl$lambda_init_0__9: void handle(java.lang.Object)> ==> <io.vertx.core.impl.VertxImpl: void lambda$init$0(io.vertx.core.AsyncResult)>
CLINIT edge: <io.vertx.core.net.impl.VertxHandler: io.vertx.core.Handler NULL_HANDLER> = $r0 in <io.vertx.core.net.impl.VertxHandler: void <clinit>()> ==> <io.vertx.core.net.impl.VertxHandler: void <clinit>()>
STATIC edge: $r0 = staticinvoke <io.vertx.core.net.impl.VertxHandler$lambda_static_0__31: io.vertx.core.Handler bootstrap$()>() in <io.vertx.core.net.impl.VertxHandler: void <clinit>()> ==> <io.vertx.core.net.impl.VertxHandler$lambda_static_0__31: io.vertx.core.Handler bootstrap$()>
CLINIT edge: $r1 = <io.vertx.core.buffer.Buffer: io.vertx.core.spi.BufferFactory factory> in <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer(io.netty.buffer.ByteBuf)> ==> <io.vertx.core.buffer.Buffer: void <clinit>()>
CLINIT edge: $r1 = staticinvoke <io.vertx.core.Future: io.vertx.core.Future succeededFuture()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void lambda$close$0(io.vertx.core.Handler,java.lang.Void)> ==> <io.vertx.core.Future: void <clinit>()>
STATIC edge: $r1 = staticinvoke <io.vertx.core.Future: io.vertx.core.Future succeededFuture()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void lambda$close$0(io.vertx.core.Handler,java.lang.Void)> ==> <io.vertx.core.Future: io.vertx.core.Future succeededFuture()>
CLINIT edge: $r15 = <io.vertx.core.Starter: io.vertx.core.logging.Logger log> in <io.vertx.core.Starter: void lambda$createLoggingHandler$2(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.Starter: void <clinit>()>
CLINIT edge: $r2 = <io.vertx.core.Starter: io.vertx.core.logging.Logger log> in <io.vertx.core.Starter: void lambda$createLoggingHandler$2(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.Starter: void <clinit>()>
CLINIT edge: $r10 = <io.vertx.core.Starter: io.vertx.core.logging.Logger log> in <io.vertx.core.Starter: void lambda$createLoggingHandler$2(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.Starter: void <clinit>()>
INTERFACE edge: r2 = interfaceinvoke $r1.<io.vertx.core.impl.VertxInternal: io.vertx.core.impl.HAManager haManager()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void start(io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.HAManager haManager()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void setClusterViewChangedHandler(io.vertx.core.impl.HAManager)>(r2) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void start(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void setClusterViewChangedHandler(io.vertx.core.impl.HAManager)>
STATIC edge: $r2 = staticinvoke <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_setClusterViewChangedHandler_12__32: java.util.function.Consumer bootstrap$(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus)>(r1) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void setClusterViewChangedHandler(io.vertx.core.impl.HAManager)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_setClusterViewChangedHandler_12__32: java.util.function.Consumer bootstrap$(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus)>
INTERFACE edge: $r1 = interfaceinvoke $r0.<io.vertx.core.spi.FutureFactory: io.vertx.core.Future succeededFuture()>() in <io.vertx.core.Future: io.vertx.core.Future succeededFuture()> ==> <io.vertx.core.impl.FutureFactoryImpl: io.vertx.core.Future succeededFuture()>
CLINIT edge: r0 = <io.vertx.core.impl.FutureFactoryImpl: io.vertx.core.impl.SucceededFuture EMPTY> in <io.vertx.core.impl.FutureFactoryImpl: io.vertx.core.Future succeededFuture()> ==> <io.vertx.core.impl.FutureFactoryImpl: void <clinit>()>
CLINIT edge: <io.vertx.core.impl.FutureFactoryImpl: io.vertx.core.impl.SucceededFuture EMPTY> = $r0 in <io.vertx.core.impl.FutureFactoryImpl: void <clinit>()> ==> <io.vertx.core.impl.FutureFactoryImpl: void <clinit>()>
SPECIAL edge: specialinvoke $r3.<io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_start_3__19: void <init>(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus,io.vertx.core.impl.HAManager,io.vertx.core.Handler)>($r0, $r1, $r2) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_start_3__19: io.vertx.core.Handler bootstrap$(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus,io.vertx.core.impl.HAManager,io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_start_3__19: void <init>(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus,io.vertx.core.impl.HAManager,io.vertx.core.Handler)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<io.vertx.core.impl.VertxThread: io.vertx.core.impl.ContextImpl getContext()>() in <io.vertx.core.impl.VertxImpl: io.vertx.core.Context context()> ==> <io.vertx.core.impl.VertxThread: io.vertx.core.impl.ContextImpl getContext()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.impl.VertxImpl$lambda_init_0__9: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.buffer.impl.BufferImpl: void <init>(byte[])>(r1) in <io.vertx.core.buffer.impl.BufferFactoryImpl: io.vertx.core.buffer.Buffer buffer(byte[])> ==> <io.vertx.core.buffer.impl.BufferImpl: void <init>(byte[])>
STATIC edge: $r2 = staticinvoke <io.netty.buffer.Unpooled: io.netty.buffer.ByteBuf buffer(int,int)>($i0, 2147483647) in <io.vertx.core.buffer.impl.BufferImpl: void <init>(byte[])> ==> <io.netty.buffer.Unpooled: io.netty.buffer.ByteBuf buffer(int,int)>
STATIC edge: $r3 = staticinvoke <io.netty.buffer.Unpooled: io.netty.buffer.ByteBuf unreleasableBuffer(io.netty.buffer.ByteBuf)>($r2) in <io.vertx.core.buffer.impl.BufferImpl: void <init>(byte[])> ==> <io.netty.buffer.Unpooled: io.netty.buffer.ByteBuf unreleasableBuffer(io.netty.buffer.ByteBuf)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.impl.VertxImpl$lambda_joinCluster_1__10: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.VertxOptions,io.vertx.core.Handler)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.lang.Object: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <io.vertx.core.impl.FutureImpl: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.lang.Throwable: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.lang.Integer: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.net.Proxy: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.lang.Thread: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.util.concurrent.CountDownLatch: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.nio.ByteOrder: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.util.AbstractMap: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.io.ByteArrayOutputStream: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.lang.reflect.Constructor: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.lang.Enum: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.security.Provider$Service: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <io.vertx.core.impl.verticle.CustomJavaFileObject: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.util.Scanner: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.util.EventObject: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.util.concurrent.atomic.AtomicInteger: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.lang.reflect.Method: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <io.vertx.core.http.StreamPriority: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.util.concurrent.atomic.AtomicBoolean: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.nio.charset.CodingErrorAction: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.lang.Boolean: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.lang.Package: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <io.vertx.core.http.impl.FileStreamChannel$Id: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.net.Inet6Address: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.lang.Class: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.security.KeyStore$PrivateKeyEntry: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <io.vertx.core.dns.impl.MxRecordImpl: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <io.vertx.core.eventbus.ReplyException: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.lang.Float: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <io.vertx.core.http.Http2Settings: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.nio.channels.FileChannel$MapMode: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.math.BigDecimal: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.lang.Character: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <io.vertx.core.json.JsonObject: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <io.vertx.core.http.impl.ws.WebSocketFrameImpl: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.util.AbstractCollection: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <io.vertx.core.buffer.impl.BufferImpl: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.util.jar.Attributes$Name: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.lang.String: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.util.Hashtable: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.io.StringWriter: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.security.Provider: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <io.vertx.core.http.CaseInsensitiveHeaders: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <io.vertx.core.VertxOptions: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.net.InetSocketAddress: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.util.regex.Pattern: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.lang.Character$Subset: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.util.concurrent.atomic.AtomicReference: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.security.CodeSigner: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <io.vertx.core.impl.FailedFuture: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.security.Timestamp: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.lang.ThreadGroup: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.net.ServerSocket: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.lang.Long: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.math.BigInteger: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.math.MathContext: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.net.NetworkInterface: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <io.vertx.core.http.impl.pool.Pool$Holder: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.lang.StackTraceElement: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.lang.reflect.Field: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.net.InetAddress: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.util.concurrent.atomic.AtomicLong: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.util.AbstractMap$SimpleEntry: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.util.Date: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <io.vertx.core.eventbus.impl.clustered.ClusterNodeInfo: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.util.Locale: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.lang.Short: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.util.zip.ZipEntry: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.util.ServiceLoader: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.util.UUID: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <javax.security.auth.x500.X500Principal: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.util.logging.Level: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <io.vertx.core.http.impl.FileStreamChannel$StreamSocketAddress: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <io.vertx.core.impl.SucceededFuture: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.lang.Double: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <javax.net.ssl.SSLEngineResult: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <io.vertx.core.file.FileSystemOptions: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.io.File: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <io.vertx.core.json.JsonArray: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <io.vertx.core.net.impl.SocketAddressImpl: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.net.URL: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.net.URI: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.lang.Byte: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <io.vertx.core.net.impl.ServerID: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <io.vertx.core.metrics.MetricsOptions: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.net.Socket: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.nio.charset.CoderResult: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <io.vertx.core.dns.DnsResponseCode: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.io.FileDescriptor: java.lang.String toString()>
SPECIAL edge: specialinvoke $r10.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown log level ") in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0) in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13) in <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>(r1) in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.lang.Object: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <io.vertx.core.impl.FutureImpl: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.lang.Throwable: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.lang.Integer: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.net.Proxy: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.lang.Thread: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.util.concurrent.CountDownLatch: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.nio.ByteOrder: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.util.AbstractMap: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.io.ByteArrayOutputStream: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.lang.reflect.Constructor: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.lang.Enum: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.security.Provider$Service: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <io.vertx.core.impl.verticle.CustomJavaFileObject: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.util.Scanner: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.util.EventObject: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.util.concurrent.atomic.AtomicInteger: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.lang.reflect.Method: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <io.vertx.core.http.StreamPriority: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.util.concurrent.atomic.AtomicBoolean: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.nio.charset.CodingErrorAction: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.lang.Boolean: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.lang.Package: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <io.vertx.core.http.impl.FileStreamChannel$Id: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.net.Inet6Address: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.lang.Class: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.security.KeyStore$PrivateKeyEntry: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <io.vertx.core.dns.impl.MxRecordImpl: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <io.vertx.core.eventbus.ReplyException: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.lang.Float: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <io.vertx.core.http.Http2Settings: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.nio.channels.FileChannel$MapMode: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.math.BigDecimal: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.lang.Character: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <io.vertx.core.json.JsonObject: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <io.vertx.core.http.impl.ws.WebSocketFrameImpl: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.util.AbstractCollection: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <io.vertx.core.buffer.impl.BufferImpl: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.util.jar.Attributes$Name: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.lang.String: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.util.Hashtable: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.io.StringWriter: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.security.Provider: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <io.vertx.core.http.CaseInsensitiveHeaders: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <io.vertx.core.VertxOptions: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.net.InetSocketAddress: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.util.regex.Pattern: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.lang.Character$Subset: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.util.concurrent.atomic.AtomicReference: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.security.CodeSigner: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <io.vertx.core.impl.FailedFuture: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.security.Timestamp: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.lang.ThreadGroup: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.net.ServerSocket: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.lang.Long: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.math.BigInteger: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.math.MathContext: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.net.NetworkInterface: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <io.vertx.core.http.impl.pool.Pool$Holder: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.lang.StackTraceElement: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.lang.reflect.Field: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.net.InetAddress: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.util.concurrent.atomic.AtomicLong: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.util.AbstractMap$SimpleEntry: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.util.Date: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <io.vertx.core.eventbus.impl.clustered.ClusterNodeInfo: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.util.Locale: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.lang.Short: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.util.zip.ZipEntry: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.util.ServiceLoader: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.util.UUID: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <javax.security.auth.x500.X500Principal: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.util.logging.Level: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <io.vertx.core.http.impl.FileStreamChannel$StreamSocketAddress: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <io.vertx.core.impl.SucceededFuture: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.lang.Double: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <javax.net.ssl.SSLEngineResult: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <io.vertx.core.file.FileSystemOptions: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.io.File: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <io.vertx.core.json.JsonArray: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <io.vertx.core.net.impl.SocketAddressImpl: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.net.URL: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.net.URI: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.lang.Byte: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <io.vertx.core.net.impl.ServerID: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <io.vertx.core.metrics.MetricsOptions: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.net.Socket: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.nio.charset.CoderResult: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <io.vertx.core.dns.DnsResponseCode: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.io.FileDescriptor: java.lang.String toString()>
SPECIAL edge: specialinvoke $r5.<java.util.logging.LogRecord: void <init>(java.util.logging.Level,java.lang.String)>(r1, $r14) in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.util.logging.LogRecord: void <init>(java.util.logging.Level,java.lang.String)>
VIRTUAL edge: virtualinvoke $r5.<java.util.logging.LogRecord: void setLoggerName(java.lang.String)>($r8) in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.util.logging.LogRecord: void setLoggerName(java.lang.String)>
VIRTUAL edge: virtualinvoke $r5.<java.util.logging.LogRecord: void setThrown(java.lang.Throwable)>(r9) in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.util.logging.LogRecord: void setThrown(java.lang.Throwable)>
VIRTUAL edge: virtualinvoke $r5.<java.util.logging.LogRecord: void setThrown(java.lang.Throwable)>($r13) in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.util.logging.LogRecord: void setThrown(java.lang.Throwable)>
VIRTUAL edge: virtualinvoke $r5.<java.util.logging.LogRecord: void setSourceClassName(java.lang.String)>(null) in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.util.logging.LogRecord: void setSourceClassName(java.lang.String)>
VIRTUAL edge: virtualinvoke $r5.<java.util.logging.LogRecord: void setParameters(java.lang.Object[])>(r10) in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.util.logging.LogRecord: void setParameters(java.lang.Object[])>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.util.logging.Logger: java.lang.String getName()>() in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.util.logging.Logger: java.lang.String getName()>
VIRTUAL edge: virtualinvoke $r15.<java.util.logging.Logger: void log(java.util.logging.LogRecord)>($r5) in <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable,java.lang.Object[])> ==> <java.util.logging.Logger: void log(java.util.logging.LogRecord)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.json.JsonObject: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.LinkedHashMap: void <init>()>() in <io.vertx.core.json.JsonObject: void <init>()> ==> <java.util.LinkedHashMap: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>(java.lang.String)>(r1) in <io.vertx.core.json.EncodeException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.util.LinkedList: void <init>()>() in <io.vertx.core.http.CaseInsensitiveHeaders: java.util.List entries()> ==> <java.util.LinkedList: void <init>()>
INTERFACE edge: interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r5) in <io.vertx.core.http.CaseInsensitiveHeaders: java.util.List entries()> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.json.JsonArray: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.ArrayList: void <init>()>() in <io.vertx.core.json.JsonArray: void <init>()> ==> <java.util.ArrayList: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.util.LinkedHashSet: void <init>(java.util.Collection)>($r2) in <io.vertx.core.net.TCPSSLOptions: java.util.Set getEnabledSecureTransportProtocols()> ==> <java.util.LinkedHashSet: void <init>(java.util.Collection)>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.json.JsonObject: void <init>()>() in <io.vertx.core.net.JdkSSLEngineOptions: io.vertx.core.json.JsonObject toJson()> ==> <io.vertx.core.json.JsonObject: void <init>()>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.json.JsonObject: void <init>()>() in <io.vertx.core.net.JksOptions: io.vertx.core.json.JsonObject toJson()> ==> <io.vertx.core.json.JsonObject: void <init>()>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.json.JsonObject: void <init>()>() in <io.vertx.core.net.OpenSSLEngineOptions: io.vertx.core.json.JsonObject toJson()> ==> <io.vertx.core.json.JsonObject: void <init>()>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.json.JsonObject: void <init>()>() in <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.json.JsonObject toJson()> ==> <io.vertx.core.json.JsonObject: void <init>()>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.json.JsonObject: void <init>()>() in <io.vertx.core.net.PemTrustOptions: io.vertx.core.json.JsonObject toJson()> ==> <io.vertx.core.json.JsonObject: void <init>()>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.json.JsonObject: void <init>()>() in <io.vertx.core.net.PfxOptions: io.vertx.core.json.JsonObject toJson()> ==> <io.vertx.core.json.JsonObject: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke r1.<io.vertx.core.json.JsonObject: java.util.Map getMap()>() in <io.vertx.core.net.JksOptionsConverter: void toJson(io.vertx.core.net.JksOptions,io.vertx.core.json.JsonObject)> ==> <io.vertx.core.json.JsonObject: java.util.Map getMap()>
VIRTUAL edge: $r2 = virtualinvoke r1.<io.vertx.core.json.JsonObject: java.util.Map getMap()>() in <io.vertx.core.net.OpenSSLEngineOptionsConverter: void toJson(io.vertx.core.net.OpenSSLEngineOptions,io.vertx.core.json.JsonObject)> ==> <io.vertx.core.json.JsonObject: java.util.Map getMap()>
VIRTUAL edge: $r2 = virtualinvoke r1.<io.vertx.core.json.JsonObject: java.util.Map getMap()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void toJson(io.vertx.core.net.PemKeyCertOptions,io.vertx.core.json.JsonObject)> ==> <io.vertx.core.json.JsonObject: java.util.Map getMap()>
VIRTUAL edge: $r2 = virtualinvoke r1.<io.vertx.core.json.JsonObject: java.util.Map getMap()>() in <io.vertx.core.net.PemTrustOptionsConverter: void toJson(io.vertx.core.net.PemTrustOptions,io.vertx.core.json.JsonObject)> ==> <io.vertx.core.json.JsonObject: java.util.Map getMap()>
VIRTUAL edge: $r2 = virtualinvoke r1.<io.vertx.core.json.JsonObject: java.util.Map getMap()>() in <io.vertx.core.net.PfxOptionsConverter: void toJson(io.vertx.core.net.PfxOptions,io.vertx.core.json.JsonObject)> ==> <io.vertx.core.json.JsonObject: java.util.Map getMap()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.JksOptions: java.lang.String getPassword()>() in <io.vertx.core.net.JksOptionsConverter: void toJson(io.vertx.core.net.JksOptions,java.util.Map)> ==> <io.vertx.core.net.JksOptions: java.lang.String getPassword()>
VIRTUAL edge: $r12 = virtualinvoke r0.<io.vertx.core.net.JksOptions: java.lang.String getPassword()>() in <io.vertx.core.net.JksOptionsConverter: void toJson(io.vertx.core.net.JksOptions,java.util.Map)> ==> <io.vertx.core.net.JksOptions: java.lang.String getPassword()>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.net.JksOptions: java.lang.String getPath()>() in <io.vertx.core.net.JksOptionsConverter: void toJson(io.vertx.core.net.JksOptions,java.util.Map)> ==> <io.vertx.core.net.JksOptions: java.lang.String getPath()>
VIRTUAL edge: $r10 = virtualinvoke r0.<io.vertx.core.net.JksOptions: java.lang.String getPath()>() in <io.vertx.core.net.JksOptionsConverter: void toJson(io.vertx.core.net.JksOptions,java.util.Map)> ==> <io.vertx.core.net.JksOptions: java.lang.String getPath()>
VIRTUAL edge: $r3 = virtualinvoke r0.<io.vertx.core.net.JksOptions: io.vertx.core.buffer.Buffer getValue()>() in <io.vertx.core.net.JksOptionsConverter: void toJson(io.vertx.core.net.JksOptions,java.util.Map)> ==> <io.vertx.core.net.JksOptions: io.vertx.core.buffer.Buffer getValue()>
VIRTUAL edge: $r6 = virtualinvoke r0.<io.vertx.core.net.JksOptions: io.vertx.core.buffer.Buffer getValue()>() in <io.vertx.core.net.JksOptionsConverter: void toJson(io.vertx.core.net.JksOptions,java.util.Map)> ==> <io.vertx.core.net.JksOptions: io.vertx.core.buffer.Buffer getValue()>
INTERFACE edge: interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("password", $r12) in <io.vertx.core.net.JksOptionsConverter: void toJson(io.vertx.core.net.JksOptions,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("password", $r12) in <io.vertx.core.net.JksOptionsConverter: void toJson(io.vertx.core.net.JksOptions,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("password", $r12) in <io.vertx.core.net.JksOptionsConverter: void toJson(io.vertx.core.net.JksOptions,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("password", $r12) in <io.vertx.core.net.JksOptionsConverter: void toJson(io.vertx.core.net.JksOptions,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("password", $r12) in <io.vertx.core.net.JksOptionsConverter: void toJson(io.vertx.core.net.JksOptions,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("password", $r12) in <io.vertx.core.net.JksOptionsConverter: void toJson(io.vertx.core.net.JksOptions,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("password", $r12) in <io.vertx.core.net.JksOptionsConverter: void toJson(io.vertx.core.net.JksOptions,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("password", $r12) in <io.vertx.core.net.JksOptionsConverter: void toJson(io.vertx.core.net.JksOptions,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("password", $r12) in <io.vertx.core.net.JksOptionsConverter: void toJson(io.vertx.core.net.JksOptions,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("password", $r12) in <io.vertx.core.net.JksOptionsConverter: void toJson(io.vertx.core.net.JksOptions,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("path", $r10) in <io.vertx.core.net.JksOptionsConverter: void toJson(io.vertx.core.net.JksOptions,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("path", $r10) in <io.vertx.core.net.JksOptionsConverter: void toJson(io.vertx.core.net.JksOptions,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("path", $r10) in <io.vertx.core.net.JksOptionsConverter: void toJson(io.vertx.core.net.JksOptions,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("path", $r10) in <io.vertx.core.net.JksOptionsConverter: void toJson(io.vertx.core.net.JksOptions,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("path", $r10) in <io.vertx.core.net.JksOptionsConverter: void toJson(io.vertx.core.net.JksOptions,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("path", $r10) in <io.vertx.core.net.JksOptionsConverter: void toJson(io.vertx.core.net.JksOptions,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("path", $r10) in <io.vertx.core.net.JksOptionsConverter: void toJson(io.vertx.core.net.JksOptions,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("path", $r10) in <io.vertx.core.net.JksOptionsConverter: void toJson(io.vertx.core.net.JksOptions,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("path", $r10) in <io.vertx.core.net.JksOptionsConverter: void toJson(io.vertx.core.net.JksOptions,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("path", $r10) in <io.vertx.core.net.JksOptionsConverter: void toJson(io.vertx.core.net.JksOptions,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("value", $r8) in <io.vertx.core.net.JksOptionsConverter: void toJson(io.vertx.core.net.JksOptions,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("value", $r8) in <io.vertx.core.net.JksOptionsConverter: void toJson(io.vertx.core.net.JksOptions,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("value", $r8) in <io.vertx.core.net.JksOptionsConverter: void toJson(io.vertx.core.net.JksOptions,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("value", $r8) in <io.vertx.core.net.JksOptionsConverter: void toJson(io.vertx.core.net.JksOptions,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("value", $r8) in <io.vertx.core.net.JksOptionsConverter: void toJson(io.vertx.core.net.JksOptions,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("value", $r8) in <io.vertx.core.net.JksOptionsConverter: void toJson(io.vertx.core.net.JksOptions,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("value", $r8) in <io.vertx.core.net.JksOptionsConverter: void toJson(io.vertx.core.net.JksOptions,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("value", $r8) in <io.vertx.core.net.JksOptionsConverter: void toJson(io.vertx.core.net.JksOptions,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("value", $r8) in <io.vertx.core.net.JksOptionsConverter: void toJson(io.vertx.core.net.JksOptions,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("value", $r8) in <io.vertx.core.net.JksOptionsConverter: void toJson(io.vertx.core.net.JksOptions,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: $r7 = interfaceinvoke $r6.<io.vertx.core.buffer.Buffer: byte[] getBytes()>() in <io.vertx.core.net.JksOptionsConverter: void toJson(io.vertx.core.net.JksOptions,java.util.Map)> ==> <io.vertx.core.buffer.impl.BufferImpl: byte[] getBytes()>
VIRTUAL edge: $z0 = virtualinvoke r1.<io.vertx.core.net.OpenSSLEngineOptions: boolean isSessionCacheEnabled()>() in <io.vertx.core.net.OpenSSLEngineOptionsConverter: void toJson(io.vertx.core.net.OpenSSLEngineOptions,java.util.Map)> ==> <io.vertx.core.net.OpenSSLEngineOptions: boolean isSessionCacheEnabled()>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("sessionCacheEnabled", $r2) in <io.vertx.core.net.OpenSSLEngineOptionsConverter: void toJson(io.vertx.core.net.OpenSSLEngineOptions,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("sessionCacheEnabled", $r2) in <io.vertx.core.net.OpenSSLEngineOptionsConverter: void toJson(io.vertx.core.net.OpenSSLEngineOptions,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("sessionCacheEnabled", $r2) in <io.vertx.core.net.OpenSSLEngineOptionsConverter: void toJson(io.vertx.core.net.OpenSSLEngineOptions,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("sessionCacheEnabled", $r2) in <io.vertx.core.net.OpenSSLEngineOptionsConverter: void toJson(io.vertx.core.net.OpenSSLEngineOptions,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("sessionCacheEnabled", $r2) in <io.vertx.core.net.OpenSSLEngineOptionsConverter: void toJson(io.vertx.core.net.OpenSSLEngineOptions,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("sessionCacheEnabled", $r2) in <io.vertx.core.net.OpenSSLEngineOptionsConverter: void toJson(io.vertx.core.net.OpenSSLEngineOptions,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("sessionCacheEnabled", $r2) in <io.vertx.core.net.OpenSSLEngineOptionsConverter: void toJson(io.vertx.core.net.OpenSSLEngineOptions,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("sessionCacheEnabled", $r2) in <io.vertx.core.net.OpenSSLEngineOptionsConverter: void toJson(io.vertx.core.net.OpenSSLEngineOptions,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("sessionCacheEnabled", $r2) in <io.vertx.core.net.OpenSSLEngineOptionsConverter: void toJson(io.vertx.core.net.OpenSSLEngineOptions,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("sessionCacheEnabled", $r2) in <io.vertx.core.net.OpenSSLEngineOptionsConverter: void toJson(io.vertx.core.net.OpenSSLEngineOptions,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.PemKeyCertOptions: java.util.List getCertPaths()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void toJson(io.vertx.core.net.PemKeyCertOptions,java.util.Map)> ==> <io.vertx.core.net.PemKeyCertOptions: java.util.List getCertPaths()>
VIRTUAL edge: $r19 = virtualinvoke r0.<io.vertx.core.net.PemKeyCertOptions: java.util.List getCertPaths()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void toJson(io.vertx.core.net.PemKeyCertOptions,java.util.Map)> ==> <io.vertx.core.net.PemKeyCertOptions: java.util.List getCertPaths()>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.net.PemKeyCertOptions: java.util.List getCertValues()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void toJson(io.vertx.core.net.PemKeyCertOptions,java.util.Map)> ==> <io.vertx.core.net.PemKeyCertOptions: java.util.List getCertValues()>
VIRTUAL edge: $r15 = virtualinvoke r0.<io.vertx.core.net.PemKeyCertOptions: java.util.List getCertValues()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void toJson(io.vertx.core.net.PemKeyCertOptions,java.util.Map)> ==> <io.vertx.core.net.PemKeyCertOptions: java.util.List getCertValues()>
VIRTUAL edge: $r3 = virtualinvoke r0.<io.vertx.core.net.PemKeyCertOptions: java.util.List getKeyPaths()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void toJson(io.vertx.core.net.PemKeyCertOptions,java.util.Map)> ==> <io.vertx.core.net.PemKeyCertOptions: java.util.List getKeyPaths()>
VIRTUAL edge: $r11 = virtualinvoke r0.<io.vertx.core.net.PemKeyCertOptions: java.util.List getKeyPaths()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void toJson(io.vertx.core.net.PemKeyCertOptions,java.util.Map)> ==> <io.vertx.core.net.PemKeyCertOptions: java.util.List getKeyPaths()>
VIRTUAL edge: $r4 = virtualinvoke r0.<io.vertx.core.net.PemKeyCertOptions: java.util.List getKeyValues()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void toJson(io.vertx.core.net.PemKeyCertOptions,java.util.Map)> ==> <io.vertx.core.net.PemKeyCertOptions: java.util.List getKeyValues()>
VIRTUAL edge: $r6 = virtualinvoke r0.<io.vertx.core.net.PemKeyCertOptions: java.util.List getKeyValues()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void toJson(io.vertx.core.net.PemKeyCertOptions,java.util.Map)> ==> <io.vertx.core.net.PemKeyCertOptions: java.util.List getKeyValues()>
SPECIAL edge: specialinvoke $r18.<io.vertx.core.json.JsonArray: void <init>()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void toJson(io.vertx.core.net.PemKeyCertOptions,java.util.Map)> ==> <io.vertx.core.json.JsonArray: void <init>()>
INTERFACE edge: interfaceinvoke r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("certPaths", $r18) in <io.vertx.core.net.PemKeyCertOptionsConverter: void toJson(io.vertx.core.net.PemKeyCertOptions,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("certPaths", $r18) in <io.vertx.core.net.PemKeyCertOptionsConverter: void toJson(io.vertx.core.net.PemKeyCertOptions,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("certPaths", $r18) in <io.vertx.core.net.PemKeyCertOptionsConverter: void toJson(io.vertx.core.net.PemKeyCertOptions,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("certPaths", $r18) in <io.vertx.core.net.PemKeyCertOptionsConverter: void toJson(io.vertx.core.net.PemKeyCertOptions,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("certPaths", $r18) in <io.vertx.core.net.PemKeyCertOptionsConverter: void toJson(io.vertx.core.net.PemKeyCertOptions,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("certPaths", $r18) in <io.vertx.core.net.PemKeyCertOptionsConverter: void toJson(io.vertx.core.net.PemKeyCertOptions,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("certPaths", $r18) in <io.vertx.core.net.PemKeyCertOptionsConverter: void toJson(io.vertx.core.net.PemKeyCertOptions,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("certPaths", $r18) in <io.vertx.core.net.PemKeyCertOptionsConverter: void toJson(io.vertx.core.net.PemKeyCertOptions,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("certPaths", $r18) in <io.vertx.core.net.PemKeyCertOptionsConverter: void toJson(io.vertx.core.net.PemKeyCertOptions,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("certPaths", $r18) in <io.vertx.core.net.PemKeyCertOptionsConverter: void toJson(io.vertx.core.net.PemKeyCertOptions,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("certValues", $r14) in <io.vertx.core.net.PemKeyCertOptionsConverter: void toJson(io.vertx.core.net.PemKeyCertOptions,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("certValues", $r14) in <io.vertx.core.net.PemKeyCertOptionsConverter: void toJson(io.vertx.core.net.PemKeyCertOptions,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("certValues", $r14) in <io.vertx.core.net.PemKeyCertOptionsConverter: void toJson(io.vertx.core.net.PemKeyCertOptions,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("certValues", $r14) in <io.vertx.core.net.PemKeyCertOptionsConverter: void toJson(io.vertx.core.net.PemKeyCertOptions,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("certValues", $r14) in <io.vertx.core.net.PemKeyCertOptionsConverter: void toJson(io.vertx.core.net.PemKeyCertOptions,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("certValues", $r14) in <io.vertx.core.net.PemKeyCertOptionsConverter: void toJson(io.vertx.core.net.PemKeyCertOptions,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("certValues", $r14) in <io.vertx.core.net.PemKeyCertOptionsConverter: void toJson(io.vertx.core.net.PemKeyCertOptions,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("certValues", $r14) in <io.vertx.core.net.PemKeyCertOptionsConverter: void toJson(io.vertx.core.net.PemKeyCertOptions,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("certValues", $r14) in <io.vertx.core.net.PemKeyCertOptionsConverter: void toJson(io.vertx.core.net.PemKeyCertOptions,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("certValues", $r14) in <io.vertx.core.net.PemKeyCertOptionsConverter: void toJson(io.vertx.core.net.PemKeyCertOptions,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("keyPaths", $r10) in <io.vertx.core.net.PemKeyCertOptionsConverter: void toJson(io.vertx.core.net.PemKeyCertOptions,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("keyPaths", $r10) in <io.vertx.core.net.PemKeyCertOptionsConverter: void toJson(io.vertx.core.net.PemKeyCertOptions,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("keyPaths", $r10) in <io.vertx.core.net.PemKeyCertOptionsConverter: void toJson(io.vertx.core.net.PemKeyCertOptions,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("keyPaths", $r10) in <io.vertx.core.net.PemKeyCertOptionsConverter: void toJson(io.vertx.core.net.PemKeyCertOptions,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("keyPaths", $r10) in <io.vertx.core.net.PemKeyCertOptionsConverter: void toJson(io.vertx.core.net.PemKeyCertOptions,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("keyPaths", $r10) in <io.vertx.core.net.PemKeyCertOptionsConverter: void toJson(io.vertx.core.net.PemKeyCertOptions,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("keyPaths", $r10) in <io.vertx.core.net.PemKeyCertOptionsConverter: void toJson(io.vertx.core.net.PemKeyCertOptions,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("keyPaths", $r10) in <io.vertx.core.net.PemKeyCertOptionsConverter: void toJson(io.vertx.core.net.PemKeyCertOptions,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("keyPaths", $r10) in <io.vertx.core.net.PemKeyCertOptionsConverter: void toJson(io.vertx.core.net.PemKeyCertOptions,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("keyPaths", $r10) in <io.vertx.core.net.PemKeyCertOptionsConverter: void toJson(io.vertx.core.net.PemKeyCertOptions,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("keyValues", $r5) in <io.vertx.core.net.PemKeyCertOptionsConverter: void toJson(io.vertx.core.net.PemKeyCertOptions,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("keyValues", $r5) in <io.vertx.core.net.PemKeyCertOptionsConverter: void toJson(io.vertx.core.net.PemKeyCertOptions,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("keyValues", $r5) in <io.vertx.core.net.PemKeyCertOptionsConverter: void toJson(io.vertx.core.net.PemKeyCertOptions,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("keyValues", $r5) in <io.vertx.core.net.PemKeyCertOptionsConverter: void toJson(io.vertx.core.net.PemKeyCertOptions,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("keyValues", $r5) in <io.vertx.core.net.PemKeyCertOptionsConverter: void toJson(io.vertx.core.net.PemKeyCertOptions,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("keyValues", $r5) in <io.vertx.core.net.PemKeyCertOptionsConverter: void toJson(io.vertx.core.net.PemKeyCertOptions,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("keyValues", $r5) in <io.vertx.core.net.PemKeyCertOptionsConverter: void toJson(io.vertx.core.net.PemKeyCertOptions,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("keyValues", $r5) in <io.vertx.core.net.PemKeyCertOptionsConverter: void toJson(io.vertx.core.net.PemKeyCertOptions,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("keyValues", $r5) in <io.vertx.core.net.PemKeyCertOptionsConverter: void toJson(io.vertx.core.net.PemKeyCertOptions,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("keyValues", $r5) in <io.vertx.core.net.PemKeyCertOptionsConverter: void toJson(io.vertx.core.net.PemKeyCertOptions,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r14.<io.vertx.core.json.JsonArray: void <init>()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void toJson(io.vertx.core.net.PemKeyCertOptions,java.util.Map)> ==> <io.vertx.core.json.JsonArray: void <init>()>
SPECIAL edge: specialinvoke $r10.<io.vertx.core.json.JsonArray: void <init>()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void toJson(io.vertx.core.net.PemKeyCertOptions,java.util.Map)> ==> <io.vertx.core.json.JsonArray: void <init>()>
SPECIAL edge: specialinvoke $r5.<io.vertx.core.json.JsonArray: void <init>()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void toJson(io.vertx.core.net.PemKeyCertOptions,java.util.Map)> ==> <io.vertx.core.json.JsonArray: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.PemTrustOptions: java.util.List getCertPaths()>() in <io.vertx.core.net.PemTrustOptionsConverter: void toJson(io.vertx.core.net.PemTrustOptions,java.util.Map)> ==> <io.vertx.core.net.PemTrustOptions: java.util.List getCertPaths()>
VIRTUAL edge: $r9 = virtualinvoke r0.<io.vertx.core.net.PemTrustOptions: java.util.List getCertPaths()>() in <io.vertx.core.net.PemTrustOptionsConverter: void toJson(io.vertx.core.net.PemTrustOptions,java.util.Map)> ==> <io.vertx.core.net.PemTrustOptions: java.util.List getCertPaths()>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.net.PemTrustOptions: java.util.List getCertValues()>() in <io.vertx.core.net.PemTrustOptionsConverter: void toJson(io.vertx.core.net.PemTrustOptions,java.util.Map)> ==> <io.vertx.core.net.PemTrustOptions: java.util.List getCertValues()>
VIRTUAL edge: $r4 = virtualinvoke r0.<io.vertx.core.net.PemTrustOptions: java.util.List getCertValues()>() in <io.vertx.core.net.PemTrustOptionsConverter: void toJson(io.vertx.core.net.PemTrustOptions,java.util.Map)> ==> <io.vertx.core.net.PemTrustOptions: java.util.List getCertValues()>
SPECIAL edge: specialinvoke $r8.<io.vertx.core.json.JsonArray: void <init>()>() in <io.vertx.core.net.PemTrustOptionsConverter: void toJson(io.vertx.core.net.PemTrustOptions,java.util.Map)> ==> <io.vertx.core.json.JsonArray: void <init>()>
INTERFACE edge: interfaceinvoke r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("certPaths", $r8) in <io.vertx.core.net.PemTrustOptionsConverter: void toJson(io.vertx.core.net.PemTrustOptions,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("certPaths", $r8) in <io.vertx.core.net.PemTrustOptionsConverter: void toJson(io.vertx.core.net.PemTrustOptions,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("certPaths", $r8) in <io.vertx.core.net.PemTrustOptionsConverter: void toJson(io.vertx.core.net.PemTrustOptions,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("certPaths", $r8) in <io.vertx.core.net.PemTrustOptionsConverter: void toJson(io.vertx.core.net.PemTrustOptions,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("certPaths", $r8) in <io.vertx.core.net.PemTrustOptionsConverter: void toJson(io.vertx.core.net.PemTrustOptions,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("certPaths", $r8) in <io.vertx.core.net.PemTrustOptionsConverter: void toJson(io.vertx.core.net.PemTrustOptions,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("certPaths", $r8) in <io.vertx.core.net.PemTrustOptionsConverter: void toJson(io.vertx.core.net.PemTrustOptions,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("certPaths", $r8) in <io.vertx.core.net.PemTrustOptionsConverter: void toJson(io.vertx.core.net.PemTrustOptions,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("certPaths", $r8) in <io.vertx.core.net.PemTrustOptionsConverter: void toJson(io.vertx.core.net.PemTrustOptions,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("certPaths", $r8) in <io.vertx.core.net.PemTrustOptionsConverter: void toJson(io.vertx.core.net.PemTrustOptions,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("certValues", $r3) in <io.vertx.core.net.PemTrustOptionsConverter: void toJson(io.vertx.core.net.PemTrustOptions,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("certValues", $r3) in <io.vertx.core.net.PemTrustOptionsConverter: void toJson(io.vertx.core.net.PemTrustOptions,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("certValues", $r3) in <io.vertx.core.net.PemTrustOptionsConverter: void toJson(io.vertx.core.net.PemTrustOptions,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("certValues", $r3) in <io.vertx.core.net.PemTrustOptionsConverter: void toJson(io.vertx.core.net.PemTrustOptions,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("certValues", $r3) in <io.vertx.core.net.PemTrustOptionsConverter: void toJson(io.vertx.core.net.PemTrustOptions,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("certValues", $r3) in <io.vertx.core.net.PemTrustOptionsConverter: void toJson(io.vertx.core.net.PemTrustOptions,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("certValues", $r3) in <io.vertx.core.net.PemTrustOptionsConverter: void toJson(io.vertx.core.net.PemTrustOptions,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("certValues", $r3) in <io.vertx.core.net.PemTrustOptionsConverter: void toJson(io.vertx.core.net.PemTrustOptions,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("certValues", $r3) in <io.vertx.core.net.PemTrustOptionsConverter: void toJson(io.vertx.core.net.PemTrustOptions,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("certValues", $r3) in <io.vertx.core.net.PemTrustOptionsConverter: void toJson(io.vertx.core.net.PemTrustOptions,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<io.vertx.core.json.JsonArray: void <init>()>() in <io.vertx.core.net.PemTrustOptionsConverter: void toJson(io.vertx.core.net.PemTrustOptions,java.util.Map)> ==> <io.vertx.core.json.JsonArray: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.PfxOptions: java.lang.String getPassword()>() in <io.vertx.core.net.PfxOptionsConverter: void toJson(io.vertx.core.net.PfxOptions,java.util.Map)> ==> <io.vertx.core.net.PfxOptions: java.lang.String getPassword()>
VIRTUAL edge: $r12 = virtualinvoke r0.<io.vertx.core.net.PfxOptions: java.lang.String getPassword()>() in <io.vertx.core.net.PfxOptionsConverter: void toJson(io.vertx.core.net.PfxOptions,java.util.Map)> ==> <io.vertx.core.net.PfxOptions: java.lang.String getPassword()>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.net.PfxOptions: java.lang.String getPath()>() in <io.vertx.core.net.PfxOptionsConverter: void toJson(io.vertx.core.net.PfxOptions,java.util.Map)> ==> <io.vertx.core.net.PfxOptions: java.lang.String getPath()>
VIRTUAL edge: $r10 = virtualinvoke r0.<io.vertx.core.net.PfxOptions: java.lang.String getPath()>() in <io.vertx.core.net.PfxOptionsConverter: void toJson(io.vertx.core.net.PfxOptions,java.util.Map)> ==> <io.vertx.core.net.PfxOptions: java.lang.String getPath()>
VIRTUAL edge: $r3 = virtualinvoke r0.<io.vertx.core.net.PfxOptions: io.vertx.core.buffer.Buffer getValue()>() in <io.vertx.core.net.PfxOptionsConverter: void toJson(io.vertx.core.net.PfxOptions,java.util.Map)> ==> <io.vertx.core.net.PfxOptions: io.vertx.core.buffer.Buffer getValue()>
VIRTUAL edge: $r6 = virtualinvoke r0.<io.vertx.core.net.PfxOptions: io.vertx.core.buffer.Buffer getValue()>() in <io.vertx.core.net.PfxOptionsConverter: void toJson(io.vertx.core.net.PfxOptions,java.util.Map)> ==> <io.vertx.core.net.PfxOptions: io.vertx.core.buffer.Buffer getValue()>
INTERFACE edge: interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("password", $r12) in <io.vertx.core.net.PfxOptionsConverter: void toJson(io.vertx.core.net.PfxOptions,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("password", $r12) in <io.vertx.core.net.PfxOptionsConverter: void toJson(io.vertx.core.net.PfxOptions,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("password", $r12) in <io.vertx.core.net.PfxOptionsConverter: void toJson(io.vertx.core.net.PfxOptions,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("password", $r12) in <io.vertx.core.net.PfxOptionsConverter: void toJson(io.vertx.core.net.PfxOptions,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("password", $r12) in <io.vertx.core.net.PfxOptionsConverter: void toJson(io.vertx.core.net.PfxOptions,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("password", $r12) in <io.vertx.core.net.PfxOptionsConverter: void toJson(io.vertx.core.net.PfxOptions,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("password", $r12) in <io.vertx.core.net.PfxOptionsConverter: void toJson(io.vertx.core.net.PfxOptions,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("password", $r12) in <io.vertx.core.net.PfxOptionsConverter: void toJson(io.vertx.core.net.PfxOptions,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("password", $r12) in <io.vertx.core.net.PfxOptionsConverter: void toJson(io.vertx.core.net.PfxOptions,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("password", $r12) in <io.vertx.core.net.PfxOptionsConverter: void toJson(io.vertx.core.net.PfxOptions,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("path", $r10) in <io.vertx.core.net.PfxOptionsConverter: void toJson(io.vertx.core.net.PfxOptions,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("path", $r10) in <io.vertx.core.net.PfxOptionsConverter: void toJson(io.vertx.core.net.PfxOptions,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("path", $r10) in <io.vertx.core.net.PfxOptionsConverter: void toJson(io.vertx.core.net.PfxOptions,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("path", $r10) in <io.vertx.core.net.PfxOptionsConverter: void toJson(io.vertx.core.net.PfxOptions,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("path", $r10) in <io.vertx.core.net.PfxOptionsConverter: void toJson(io.vertx.core.net.PfxOptions,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("path", $r10) in <io.vertx.core.net.PfxOptionsConverter: void toJson(io.vertx.core.net.PfxOptions,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("path", $r10) in <io.vertx.core.net.PfxOptionsConverter: void toJson(io.vertx.core.net.PfxOptions,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("path", $r10) in <io.vertx.core.net.PfxOptionsConverter: void toJson(io.vertx.core.net.PfxOptions,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("path", $r10) in <io.vertx.core.net.PfxOptionsConverter: void toJson(io.vertx.core.net.PfxOptions,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("path", $r10) in <io.vertx.core.net.PfxOptionsConverter: void toJson(io.vertx.core.net.PfxOptions,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("value", $r8) in <io.vertx.core.net.PfxOptionsConverter: void toJson(io.vertx.core.net.PfxOptions,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("value", $r8) in <io.vertx.core.net.PfxOptionsConverter: void toJson(io.vertx.core.net.PfxOptions,java.util.Map)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("value", $r8) in <io.vertx.core.net.PfxOptionsConverter: void toJson(io.vertx.core.net.PfxOptions,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("value", $r8) in <io.vertx.core.net.PfxOptionsConverter: void toJson(io.vertx.core.net.PfxOptions,java.util.Map)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("value", $r8) in <io.vertx.core.net.PfxOptionsConverter: void toJson(io.vertx.core.net.PfxOptions,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("value", $r8) in <io.vertx.core.net.PfxOptionsConverter: void toJson(io.vertx.core.net.PfxOptions,java.util.Map)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("value", $r8) in <io.vertx.core.net.PfxOptionsConverter: void toJson(io.vertx.core.net.PfxOptions,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("value", $r8) in <io.vertx.core.net.PfxOptionsConverter: void toJson(io.vertx.core.net.PfxOptions,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("value", $r8) in <io.vertx.core.net.PfxOptionsConverter: void toJson(io.vertx.core.net.PfxOptions,java.util.Map)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("value", $r8) in <io.vertx.core.net.PfxOptionsConverter: void toJson(io.vertx.core.net.PfxOptions,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: $r7 = interfaceinvoke $r6.<io.vertx.core.buffer.Buffer: byte[] getBytes()>() in <io.vertx.core.net.PfxOptionsConverter: void toJson(io.vertx.core.net.PfxOptions,java.util.Map)> ==> <io.vertx.core.buffer.impl.BufferImpl: byte[] getBytes()>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.net.PemKeyCertOptionsConverter$lambda_toJson_4__23: void <init>(io.vertx.core.json.JsonArray)>($r0) in <io.vertx.core.net.PemKeyCertOptionsConverter$lambda_toJson_4__23: java.util.function.Consumer bootstrap$(io.vertx.core.json.JsonArray)> ==> <io.vertx.core.net.PemKeyCertOptionsConverter$lambda_toJson_4__23: void <init>(io.vertx.core.json.JsonArray)>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.net.PemKeyCertOptionsConverter$lambda_toJson_7__20: void <init>(io.vertx.core.json.JsonArray)>($r0) in <io.vertx.core.net.PemKeyCertOptionsConverter$lambda_toJson_7__20: java.util.function.Consumer bootstrap$(io.vertx.core.json.JsonArray)> ==> <io.vertx.core.net.PemKeyCertOptionsConverter$lambda_toJson_7__20: void <init>(io.vertx.core.json.JsonArray)>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.net.PemKeyCertOptionsConverter$lambda_toJson_6__21: void <init>(io.vertx.core.json.JsonArray)>($r0) in <io.vertx.core.net.PemKeyCertOptionsConverter$lambda_toJson_6__21: java.util.function.Consumer bootstrap$(io.vertx.core.json.JsonArray)> ==> <io.vertx.core.net.PemKeyCertOptionsConverter$lambda_toJson_6__21: void <init>(io.vertx.core.json.JsonArray)>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.net.PemKeyCertOptionsConverter$lambda_toJson_5__22: void <init>(io.vertx.core.json.JsonArray)>($r0) in <io.vertx.core.net.PemKeyCertOptionsConverter$lambda_toJson_5__22: java.util.function.Consumer bootstrap$(io.vertx.core.json.JsonArray)> ==> <io.vertx.core.net.PemKeyCertOptionsConverter$lambda_toJson_5__22: void <init>(io.vertx.core.json.JsonArray)>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.net.PemTrustOptionsConverter$lambda_toJson_2__25: void <init>(io.vertx.core.json.JsonArray)>($r0) in <io.vertx.core.net.PemTrustOptionsConverter$lambda_toJson_2__25: java.util.function.Consumer bootstrap$(io.vertx.core.json.JsonArray)> ==> <io.vertx.core.net.PemTrustOptionsConverter$lambda_toJson_2__25: void <init>(io.vertx.core.json.JsonArray)>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.net.PemTrustOptionsConverter$lambda_toJson_3__24: void <init>(io.vertx.core.json.JsonArray)>($r0) in <io.vertx.core.net.PemTrustOptionsConverter$lambda_toJson_3__24: java.util.function.Consumer bootstrap$(io.vertx.core.json.JsonArray)> ==> <io.vertx.core.net.PemTrustOptionsConverter$lambda_toJson_3__24: void <init>(io.vertx.core.json.JsonArray)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.dns.AddressResolverOptionsConverter$lambda_toJson_3__11: void <init>(io.vertx.core.json.JsonArray)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.dns.AddressResolverOptionsConverter$lambda_toJson_2__12: void <init>(io.vertx.core.json.JsonArray)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.eventbus.EventBusOptionsConverter$lambda_toJson_7__13: void <init>(io.vertx.core.json.JsonArray)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.eventbus.EventBusOptionsConverter$lambda_toJson_6__14: void <init>(io.vertx.core.json.JsonArray)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.eventbus.EventBusOptionsConverter$lambda_toJson_5__15: void <init>(io.vertx.core.json.JsonArray)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.eventbus.EventBusOptionsConverter$lambda_toJson_4__16: void <init>(io.vertx.core.json.JsonArray)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.NetworkOptions: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.util.LinkedHashSet: void <init>()>() in <io.vertx.core.net.TCPSSLOptions: void init()> ==> <java.util.LinkedHashSet: void <init>()>
SPECIAL edge: specialinvoke $r3.<java.util.ArrayList: void <init>()>() in <io.vertx.core.net.TCPSSLOptions: void init()> ==> <java.util.ArrayList: void <init>()>
SPECIAL edge: specialinvoke $r4.<java.util.ArrayList: void <init>()>() in <io.vertx.core.net.TCPSSLOptions: void init()> ==> <java.util.ArrayList: void <init>()>
SPECIAL edge: specialinvoke $r6.<java.util.LinkedHashSet: void <init>(java.util.Collection)>($r7) in <io.vertx.core.net.TCPSSLOptions: void init()> ==> <java.util.LinkedHashSet: void <init>(java.util.Collection)>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.impl.EventLoopContext: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.impl.WorkerPool,io.vertx.core.impl.WorkerPool,java.lang.String,io.vertx.core.json.JsonObject,java.lang.ClassLoader)>(r1, $r6, $r8, r3, r4, r5) in <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.EventLoopContext createEventLoopContext(java.lang.String,io.vertx.core.impl.WorkerPool,io.vertx.core.json.JsonObject,java.lang.ClassLoader)> ==> <io.vertx.core.impl.EventLoopContext: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.impl.WorkerPool,io.vertx.core.impl.WorkerPool,java.lang.String,io.vertx.core.json.JsonObject,java.lang.ClassLoader)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int indexOf(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String substring(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int lastIndexOf(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i2 = virtualinvoke r0.<java.lang.String: int length()>() in <io.vertx.core.impl.DeploymentManager: java.lang.String getSuffix(int,java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i3) in <io.vertx.core.impl.DeploymentManager: java.lang.String getSuffix(int,java.lang.String)> ==> <java.lang.String: java.lang.String substring(int)>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.impl.DeploymentManager: java.lang.String getSuffix(int,java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid name: ") in <io.vertx.core.impl.DeploymentManager: java.lang.String getSuffix(int,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0) in <io.vertx.core.impl.DeploymentManager: java.lang.String getSuffix(int,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.impl.DeploymentManager: java.lang.String getSuffix(int,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6) in <io.vertx.core.impl.DeploymentManager: java.lang.String getSuffix(int,java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Future: void complete(java.lang.Object)>(r1) in <io.vertx.core.spi.VerticleFactory: void resolve(java.lang.String,io.vertx.core.DeploymentOptions,java.lang.ClassLoader,io.vertx.core.Future)> ==> <io.vertx.core.impl.CompositeFutureImpl: void complete(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Future: void complete(java.lang.Object)>(r1) in <io.vertx.core.spi.VerticleFactory: void resolve(java.lang.String,io.vertx.core.DeploymentOptions,java.lang.ClassLoader,io.vertx.core.Future)> ==> <io.vertx.core.impl.SucceededFuture: void complete(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Future: void complete(java.lang.Object)>(r1) in <io.vertx.core.spi.VerticleFactory: void resolve(java.lang.String,io.vertx.core.DeploymentOptions,java.lang.ClassLoader,io.vertx.core.Future)> ==> <io.vertx.core.impl.FutureImpl: void complete(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Future: void complete(java.lang.Object)>(r1) in <io.vertx.core.spi.VerticleFactory: void resolve(java.lang.String,io.vertx.core.DeploymentOptions,java.lang.ClassLoader,io.vertx.core.Future)> ==> <io.vertx.core.impl.FailedFuture: void complete(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<io.vertx.core.impl.CompositeFutureImpl: boolean tryFail(java.lang.Throwable)>(r1) in <io.vertx.core.impl.CompositeFutureImpl: void fail(java.lang.Throwable)> ==> <io.vertx.core.impl.CompositeFutureImpl: boolean tryFail(java.lang.Throwable)>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.impl.CompositeFutureImpl: void fail(java.lang.Throwable)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Result is already complete: ") in <io.vertx.core.impl.CompositeFutureImpl: void fail(java.lang.Throwable)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8) in <io.vertx.core.impl.CompositeFutureImpl: void fail(java.lang.Throwable)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.impl.CompositeFutureImpl: void fail(java.lang.Throwable)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7) in <io.vertx.core.impl.CompositeFutureImpl: void fail(java.lang.Throwable)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Result is already complete: succeeded") in <io.vertx.core.impl.SucceededFuture: void fail(java.lang.Throwable)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<io.vertx.core.impl.FutureImpl: boolean tryFail(java.lang.Throwable)>(r1) in <io.vertx.core.impl.FutureImpl: void fail(java.lang.Throwable)> ==> <io.vertx.core.impl.FutureImpl: boolean tryFail(java.lang.Throwable)>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.impl.FutureImpl: void fail(java.lang.Throwable)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Result is already complete: ") in <io.vertx.core.impl.FutureImpl: void fail(java.lang.Throwable)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) in <io.vertx.core.impl.FutureImpl: void fail(java.lang.Throwable)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.impl.FutureImpl: void fail(java.lang.Throwable)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6) in <io.vertx.core.impl.FutureImpl: void fail(java.lang.Throwable)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Result is already complete: failed") in <io.vertx.core.impl.FailedFuture: void fail(java.lang.Throwable)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.impl.CompositeFutureImpl: void complete(io.vertx.core.CompositeFuture)>($r2) in <io.vertx.core.impl.CompositeFutureImpl: void complete(java.lang.Object)> ==> <io.vertx.core.impl.CompositeFutureImpl: void complete(io.vertx.core.CompositeFuture)>
SPECIAL edge: specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Result is already complete: succeeded") in <io.vertx.core.impl.SucceededFuture: void complete(java.lang.Object)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<io.vertx.core.impl.FutureImpl: boolean tryComplete(java.lang.Object)>(r1) in <io.vertx.core.impl.FutureImpl: void complete(java.lang.Object)> ==> <io.vertx.core.impl.FutureImpl: boolean tryComplete(java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.impl.FutureImpl: void complete(java.lang.Object)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Result is already complete: ") in <io.vertx.core.impl.FutureImpl: void complete(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) in <io.vertx.core.impl.FutureImpl: void complete(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.impl.FutureImpl: void complete(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6) in <io.vertx.core.impl.FutureImpl: void complete(java.lang.Object)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Result is already complete: failed") in <io.vertx.core.impl.FailedFuture: void complete(java.lang.Object)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.impl.CompositeFutureImpl: io.vertx.core.CompositeFuture setHandler(io.vertx.core.Handler)>(r1) in <io.vertx.core.impl.CompositeFutureImpl: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.impl.CompositeFutureImpl: io.vertx.core.CompositeFuture setHandler(io.vertx.core.Handler)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.SucceededFuture: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.impl.DeploymentManager$lambda_doDeployVerticle_2__17: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.SucceededFuture: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.SucceededFuture: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.impl.FutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.SucceededFuture: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.SucceededFuture: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.impl.SucceededFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.SucceededFuture: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.SucceededFuture: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.SucceededFuture: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl$lambda_joinCluster_1__10: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.SucceededFuture: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.SucceededFuture: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.Starter$lambda_runVerticle_1__1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.SucceededFuture: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.SucceededFuture: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.SucceededFuture: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.SucceededFuture: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.Starter$lambda_startVertx_0__2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.SucceededFuture: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.SucceededFuture: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.SucceededFuture: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_start_3__19: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.SucceededFuture: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.impl.HAManager$lambda_doDeployVerticle_4__7: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.SucceededFuture: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_close_0__29: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.SucceededFuture: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.SucceededFuture: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.SucceededFuture: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.SucceededFuture: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.Starter$lambda_createLoggingHandler_2__3: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.SucceededFuture: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.impl.CompositeFutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.SucceededFuture: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.SucceededFuture: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_finalize_6__18: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.SucceededFuture: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.SucceededFuture: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl$lambda_init_0__9: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.SucceededFuture: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.impl.FailedFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.SucceededFuture: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.SucceededFuture: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_close_5__30: void handle(java.lang.Object)>
VIRTUAL edge: z0 = virtualinvoke r0.<io.vertx.core.impl.FutureImpl: boolean isComplete()>() in <io.vertx.core.impl.FutureImpl: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.impl.FutureImpl: boolean isComplete()>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.impl.DeploymentManager$lambda_doDeployVerticle_2__17: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.impl.FutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.impl.SucceededFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl$lambda_joinCluster_1__10: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.Starter$lambda_runVerticle_1__1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.Starter$lambda_startVertx_0__2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_start_3__19: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.impl.HAManager$lambda_doDeployVerticle_4__7: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_close_0__29: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.Starter$lambda_createLoggingHandler_2__3: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.impl.CompositeFutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_finalize_6__18: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl$lambda_init_0__9: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.impl.FailedFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_close_5__30: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.FailedFuture: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.impl.DeploymentManager$lambda_doDeployVerticle_2__17: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.FailedFuture: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.FailedFuture: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.impl.FutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.FailedFuture: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.FailedFuture: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.impl.SucceededFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.FailedFuture: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.FailedFuture: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.FailedFuture: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl$lambda_joinCluster_1__10: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.FailedFuture: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.FailedFuture: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.Starter$lambda_runVerticle_1__1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.FailedFuture: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.FailedFuture: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.FailedFuture: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.FailedFuture: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.Starter$lambda_startVertx_0__2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.FailedFuture: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.FailedFuture: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.FailedFuture: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_start_3__19: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.FailedFuture: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.impl.HAManager$lambda_doDeployVerticle_4__7: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.FailedFuture: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_close_0__29: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.FailedFuture: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.FailedFuture: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.FailedFuture: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.FailedFuture: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.Starter$lambda_createLoggingHandler_2__3: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.FailedFuture: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.impl.CompositeFutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.FailedFuture: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.FailedFuture: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_finalize_6__18: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.FailedFuture: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.FailedFuture: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl$lambda_init_0__9: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.FailedFuture: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.impl.FailedFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.FailedFuture: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.FailedFuture: io.vertx.core.Future setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_close_5__30: void handle(java.lang.Object)>
SPECIAL edge: specialinvoke r4.<io.vertx.core.impl.DeploymentManager: void reportResult(io.vertx.core.Context,io.vertx.core.Handler,io.vertx.core.AsyncResult)>(r5, r0, $r6) in <io.vertx.core.impl.DeploymentManager: void reportFailure(java.lang.Throwable,io.vertx.core.Context,io.vertx.core.Handler)> ==> <io.vertx.core.impl.DeploymentManager: void reportResult(io.vertx.core.Context,io.vertx.core.Handler,io.vertx.core.AsyncResult)>
VIRTUAL edge: $r3 = virtualinvoke r1.<java.lang.Throwable: java.lang.String getMessage()>() in <io.vertx.core.impl.DeploymentManager: void reportFailure(java.lang.Throwable,io.vertx.core.Context,io.vertx.core.Handler)> ==> <java.lang.Throwable: java.lang.String getMessage()>
VIRTUAL edge: $r3 = virtualinvoke r1.<java.lang.Throwable: java.lang.String getMessage()>() in <io.vertx.core.impl.DeploymentManager: void reportFailure(java.lang.Throwable,io.vertx.core.Context,io.vertx.core.Handler)> ==> <java.nio.charset.MalformedInputException: java.lang.String getMessage()>
VIRTUAL edge: $r3 = virtualinvoke r1.<java.lang.Throwable: java.lang.String getMessage()>() in <io.vertx.core.impl.DeploymentManager: void reportFailure(java.lang.Throwable,io.vertx.core.Context,io.vertx.core.Handler)> ==> <java.net.URISyntaxException: java.lang.String getMessage()>
VIRTUAL edge: $r3 = virtualinvoke r1.<java.lang.Throwable: java.lang.String getMessage()>() in <io.vertx.core.impl.DeploymentManager: void reportFailure(java.lang.Throwable,io.vertx.core.Context,io.vertx.core.Handler)> ==> <java.util.regex.PatternSyntaxException: java.lang.String getMessage()>
VIRTUAL edge: $r3 = virtualinvoke r1.<java.lang.Throwable: java.lang.String getMessage()>() in <io.vertx.core.impl.DeploymentManager: void reportFailure(java.lang.Throwable,io.vertx.core.Context,io.vertx.core.Handler)> ==> <java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
VIRTUAL edge: virtualinvoke $r2.<io.vertx.core.logging.Logger: void error(java.lang.Object,java.lang.Throwable)>($r3, r1) in <io.vertx.core.impl.DeploymentManager: void reportFailure(java.lang.Throwable,io.vertx.core.Context,io.vertx.core.Handler)> ==> <io.vertx.core.logging.Logger: void error(java.lang.Object,java.lang.Throwable)>
STATIC edge: $r3 = staticinvoke <io.vertx.core.impl.DeploymentManager$lambda_reportResult_6__33: io.vertx.core.Handler bootstrap$(io.vertx.core.Handler,io.vertx.core.AsyncResult)>(r1, r2) in <io.vertx.core.impl.DeploymentManager: void reportResult(io.vertx.core.Context,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.DeploymentManager$lambda_reportResult_6__33: io.vertx.core.Handler bootstrap$(io.vertx.core.Handler,io.vertx.core.AsyncResult)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<io.vertx.core.spi.FutureFactory: io.vertx.core.Future failedFuture(java.lang.Throwable)>(r0) in <io.vertx.core.Future: io.vertx.core.Future failedFuture(java.lang.Throwable)> ==> <io.vertx.core.impl.FutureFactoryImpl: io.vertx.core.Future failedFuture(java.lang.Throwable)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.impl.DeploymentManager$lambda_doDeployVerticle_2__17: void <init>(io.vertx.core.impl.DeploymentManager,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.spi.VerticleFactory,java.lang.ClassLoader,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.util.Iterator)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.impl.FutureImpl: void <init>()>() in <io.vertx.core.impl.FutureFactoryImpl: io.vertx.core.Future future()> ==> <io.vertx.core.impl.FutureImpl: void <init>()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.file.impl.FileSystemImpl: void <init>(io.vertx.core.impl.VertxInternal)>(r1) in <io.vertx.core.file.impl.WindowsFileSystem: void <init>(io.vertx.core.impl.VertxInternal)> ==> <io.vertx.core.file.impl.FileSystemImpl: void <init>(io.vertx.core.impl.VertxInternal)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.file.impl.FileSystemImpl: void <init>(io.vertx.core.impl.VertxInternal)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.util.TimerTask: void <init>()>() in <io.vertx.core.impl.BlockedThreadChecker$1: void <init>(io.vertx.core.impl.BlockedThreadChecker,java.util.concurrent.TimeUnit,long)> ==> <java.util.TimerTask: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.file.impl.FileResolver: void setupCacheDir()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1) in <io.vertx.core.file.impl.FileResolver: void setupCacheDir()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/file-cache-") in <io.vertx.core.file.impl.FileResolver: void setupCacheDir()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.util.UUID: java.lang.String toString()>() in <io.vertx.core.file.impl.FileResolver: void setupCacheDir()> ==> <java.util.UUID: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5) in <io.vertx.core.file.impl.FileResolver: void setupCacheDir()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.file.impl.FileResolver: void setupCacheDir()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r9.<java.io.File: void <init>(java.lang.String)>(r7) in <io.vertx.core.file.impl.FileResolver: void setupCacheDir()> ==> <java.io.File: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r10.<java.io.File: boolean mkdirs()>() in <io.vertx.core.file.impl.FileResolver: void setupCacheDir()> ==> <java.io.File: boolean mkdirs()>
SPECIAL edge: specialinvoke $r17.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Failed to create cache dir") in <io.vertx.core.file.impl.FileResolver: void setupCacheDir()> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r13.<java.lang.Thread: void <init>(java.lang.Runnable)>($r14) in <io.vertx.core.file.impl.FileResolver: void setupCacheDir()> ==> <java.lang.Thread: void <init>(java.lang.Runnable)>
VIRTUAL edge: virtualinvoke $r15.<java.lang.Runtime: void addShutdownHook(java.lang.Thread)>($r16) in <io.vertx.core.file.impl.FileResolver: void setupCacheDir()> ==> <java.lang.Runtime: void addShutdownHook(java.lang.Thread)>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.file.impl.FileResolver$lambda_setupCacheDir_1__26: void <init>(io.vertx.core.file.impl.FileResolver)>($r0) in <io.vertx.core.file.impl.FileResolver$lambda_setupCacheDir_1__26: java.lang.Runnable bootstrap$(io.vertx.core.file.impl.FileResolver)> ==> <io.vertx.core.file.impl.FileResolver$lambda_setupCacheDir_1__26: void <init>(io.vertx.core.file.impl.FileResolver)>
SPECIAL edge: specialinvoke $r3.<io.vertx.core.impl.JavaVerticleFactory: void <init>()>() in <io.vertx.core.impl.DeploymentManager: void loadVerticleFactories()> ==> <io.vertx.core.impl.JavaVerticleFactory: void <init>()>
INTERFACE edge: interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r3) in <io.vertx.core.impl.DeploymentManager: void loadVerticleFactories()> ==> <java.util.AbstractList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r3) in <io.vertx.core.impl.DeploymentManager: void loadVerticleFactories()> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r3) in <io.vertx.core.impl.DeploymentManager: void loadVerticleFactories()> ==> <java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r3) in <io.vertx.core.impl.DeploymentManager: void loadVerticleFactories()> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.impl.DeploymentManager$registerVerticleFactory__27: void <init>(io.vertx.core.impl.DeploymentManager)>($r0) in <io.vertx.core.impl.DeploymentManager$registerVerticleFactory__27: java.util.function.Consumer bootstrap$(io.vertx.core.impl.DeploymentManager)> ==> <io.vertx.core.impl.DeploymentManager$registerVerticleFactory__27: void <init>(io.vertx.core.impl.DeploymentManager)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.impl.ConcurrentHashSet: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>() in <io.vertx.core.impl.ConcurrentHashSet: void <init>()> ==> <java.util.concurrent.ConcurrentHashMap: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.eventbus.impl.CodecManager: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: $r20 = specialinvoke r0.<io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec[] codecs(io.vertx.core.eventbus.MessageCodec[])>($r3) in <io.vertx.core.eventbus.impl.CodecManager: void <init>()> ==> <io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec[] codecs(io.vertx.core.eventbus.MessageCodec[])>
SPECIAL edge: specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>() in <io.vertx.core.eventbus.impl.CodecManager: void <init>()> ==> <java.util.concurrent.ConcurrentHashMap: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.util.concurrent.ConcurrentHashMap: void <init>()>() in <io.vertx.core.eventbus.impl.CodecManager: void <init>()> ==> <java.util.concurrent.ConcurrentHashMap: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.shareddata.impl.LocalAsyncLocks: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>() in <io.vertx.core.shareddata.impl.LocalAsyncLocks: void <init>()> ==> <java.util.concurrent.ConcurrentHashMap: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.file.CopyOptions: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r59.<java.util.ArrayList: void <init>()>() in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <java.util.ArrayList: void <init>()>
SPECIAL edge: specialinvoke $r60.<java.util.ArrayList: void <init>()>() in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <java.util.ArrayList: void <init>()>
VIRTUAL edge: r5 = virtualinvoke r4.<io.vertx.core.dns.AddressResolverOptions: java.util.List getServers()>() in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <io.vertx.core.dns.AddressResolverOptions: java.util.List getServers()>
VIRTUAL edge: $z2 = virtualinvoke r4.<io.vertx.core.dns.AddressResolverOptions: boolean isRotateServers()>() in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <io.vertx.core.dns.AddressResolverOptions: boolean isRotateServers()>
VIRTUAL edge: $r10 = virtualinvoke r4.<io.vertx.core.dns.AddressResolverOptions: java.lang.String getHostsPath()>() in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <io.vertx.core.dns.AddressResolverOptions: java.lang.String getHostsPath()>
VIRTUAL edge: $r18 = virtualinvoke r4.<io.vertx.core.dns.AddressResolverOptions: java.lang.String getHostsPath()>() in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <io.vertx.core.dns.AddressResolverOptions: java.lang.String getHostsPath()>
VIRTUAL edge: $r11 = virtualinvoke r4.<io.vertx.core.dns.AddressResolverOptions: io.vertx.core.buffer.Buffer getHostsValue()>() in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <io.vertx.core.dns.AddressResolverOptions: io.vertx.core.buffer.Buffer getHostsValue()>
VIRTUAL edge: $r16 = virtualinvoke r4.<io.vertx.core.dns.AddressResolverOptions: io.vertx.core.buffer.Buffer getHostsValue()>() in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <io.vertx.core.dns.AddressResolverOptions: io.vertx.core.buffer.Buffer getHostsValue()>
VIRTUAL edge: $i4 = virtualinvoke r4.<io.vertx.core.dns.AddressResolverOptions: int getCacheMinTimeToLive()>() in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <io.vertx.core.dns.AddressResolverOptions: int getCacheMinTimeToLive()>
VIRTUAL edge: $i6 = virtualinvoke r4.<io.vertx.core.dns.AddressResolverOptions: int getCacheMaxTimeToLive()>() in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <io.vertx.core.dns.AddressResolverOptions: int getCacheMaxTimeToLive()>
VIRTUAL edge: $i8 = virtualinvoke r4.<io.vertx.core.dns.AddressResolverOptions: int getCacheNegativeTimeToLive()>() in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <io.vertx.core.dns.AddressResolverOptions: int getCacheNegativeTimeToLive()>
INTERFACE edge: $i0 = interfaceinvoke r5.<java.util.List: int size()>() in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$1: int size()>
INTERFACE edge: $i0 = interfaceinvoke r5.<java.util.List: int size()>() in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i0 = interfaceinvoke r5.<java.util.List: int size()>() in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <java.util.concurrent.CopyOnWriteArrayList: int size()>
INTERFACE edge: $i0 = interfaceinvoke r5.<java.util.List: int size()>() in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <java.util.ArrayList: int size()>
INTERFACE edge: r39 = interfaceinvoke r5.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <java.util.AbstractList: java.util.Iterator iterator()>
INTERFACE edge: r39 = interfaceinvoke r5.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r39 = interfaceinvoke r5.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
INTERFACE edge: r39 = interfaceinvoke r5.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z5 = interfaceinvoke r39.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: boolean hasNext()>
INTERFACE edge: $z5 = interfaceinvoke r39.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <io.vertx.core.json.JsonArray$Iter: boolean hasNext()>
INTERFACE edge: $z5 = interfaceinvoke r39.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <io.vertx.core.json.JsonObject$Iter: boolean hasNext()>
INTERFACE edge: $z5 = interfaceinvoke r39.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: boolean hasNext()>
INTERFACE edge: $z5 = interfaceinvoke r39.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <java.util.Scanner: boolean hasNext()>
INTERFACE edge: $z5 = interfaceinvoke r39.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: boolean hasNext()>
INTERFACE edge: $z5 = interfaceinvoke r39.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: boolean hasNext()>
INTERFACE edge: $r22 = interfaceinvoke r39.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object next()>
INTERFACE edge: $r22 = interfaceinvoke r39.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <io.vertx.core.json.JsonArray$Iter: java.lang.Object next()>
INTERFACE edge: $r22 = interfaceinvoke r39.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <io.vertx.core.json.JsonObject$Iter: java.lang.Object next()>
INTERFACE edge: $r22 = interfaceinvoke r39.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: java.lang.Object next()>
INTERFACE edge: $r22 = interfaceinvoke r39.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <java.util.Scanner: java.lang.Object next()>
INTERFACE edge: $r22 = interfaceinvoke r39.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: java.lang.Object next()>
INTERFACE edge: $r22 = interfaceinvoke r39.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: java.lang.Object next()>
VIRTUAL edge: i2 = virtualinvoke r40.<java.lang.String: int indexOf(int)>(58) in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <java.lang.String: int indexOf(int)>
VIRTUAL edge: r41 = virtualinvoke r40.<java.lang.String: java.lang.String substring(int,int)>(0, i2) in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <java.lang.String: java.lang.String substring(int,int)>
VIRTUAL edge: $r27 = virtualinvoke r40.<java.lang.String: java.lang.String substring(int)>($i1) in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <java.lang.String: java.lang.String substring(int)>
SPECIAL edge: specialinvoke $r61.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r26, i3) in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>
INTERFACE edge: interfaceinvoke $r24.<java.util.List: boolean add(java.lang.Object)>($r61) in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <java.util.AbstractList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r24.<java.util.List: boolean add(java.lang.Object)>($r61) in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r24.<java.util.List: boolean add(java.lang.Object)>($r61) in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r24.<java.util.List: boolean add(java.lang.Object)>($r61) in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke $r62.<io.vertx.core.VertxException: void <init>(java.lang.Throwable)>($r37) in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <io.vertx.core.VertxException: void <init>(java.lang.Throwable)>
SPECIAL edge: specialinvoke $r63.<java.util.HashSet: void <init>()>() in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <java.util.HashSet: void <init>()>
INTERFACE edge: $z7 = interfaceinvoke $r63.<java.util.Set: boolean contains(java.lang.Object)>(r45) in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <java.util.HashSet: boolean contains(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r63.<java.util.Set: boolean add(java.lang.Object)>(r45) in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <java.util.HashSet: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>(r45) in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <java.util.AbstractList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>(r45) in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>(r45) in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>(r45) in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: $r19 = virtualinvoke r14.<io.vertx.core.impl.VertxImpl: java.io.File resolveFile(java.lang.String)>($r18) in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <io.vertx.core.impl.VertxImpl: java.io.File resolveFile(java.lang.String)>
VIRTUAL edge: r49 = virtualinvoke $r19.<java.io.File: java.io.File getAbsoluteFile()>() in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <java.io.File: java.io.File getAbsoluteFile()>
VIRTUAL edge: $z3 = virtualinvoke r49.<java.io.File: boolean exists()>() in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <java.io.File: boolean exists()>
VIRTUAL edge: $z4 = virtualinvoke r49.<java.io.File: boolean isFile()>() in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <java.io.File: boolean isFile()>
VIRTUAL edge: $r34 = virtualinvoke r49.<java.io.File: java.lang.String getAbsolutePath()>() in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <java.io.File: java.lang.String getAbsolutePath()>
SPECIAL edge: specialinvoke $r64.<java.io.IOException: void <init>()>() in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <java.io.IOException: void <init>()>
SPECIAL edge: specialinvoke $r65.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r33 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot read hosts file ") in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34) in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r66.<io.vertx.core.VertxException: void <init>(java.lang.String)>($r36) in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <io.vertx.core.VertxException: void <init>(java.lang.String)>
INTERFACE edge: $r17 = interfaceinvoke $r16.<io.vertx.core.buffer.Buffer: java.lang.String toString()>() in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <io.vertx.core.buffer.impl.BufferImpl: java.lang.String toString()>
SPECIAL edge: specialinvoke $r67.<java.io.StringReader: void <init>(java.lang.String)>($r17) in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <java.io.StringReader: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r68.<io.vertx.core.VertxException: void <init>(java.lang.String,java.lang.Throwable)>("Cannot read hosts config ", $r28) in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <io.vertx.core.VertxException: void <init>(java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r69.<io.netty.resolver.dns.DefaultDnsCache: void <init>(int,int,int)>(i5, i7, i9) in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <io.netty.resolver.dns.DefaultDnsCache: void <init>(int,int,int)>
SPECIAL edge: specialinvoke $r70.<io.netty.resolver.dns.DefaultDnsCache: void <init>(int,int,int)>(i5, i7, i9) in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <io.netty.resolver.dns.DefaultDnsCache: void <init>(int,int,int)>
SPECIAL edge: specialinvoke $r71.<io.vertx.core.impl.resolver.DnsResolverProvider$1: void <init>(io.vertx.core.impl.resolver.DnsResolverProvider,io.vertx.core.impl.VertxImpl,io.netty.resolver.dns.DnsServerAddressStreamProvider,io.netty.resolver.HostsFileEntries,io.vertx.core.dns.AddressResolverOptions,io.netty.resolver.dns.DnsCache,io.netty.resolver.dns.DnsCache)>(r0, r14, r48, r50, r4, $r72, $r73) in <io.vertx.core.impl.resolver.DnsResolverProvider: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.dns.AddressResolverOptions)> ==> <io.vertx.core.impl.resolver.DnsResolverProvider$1: void <init>(io.vertx.core.impl.resolver.DnsResolverProvider,io.vertx.core.impl.VertxImpl,io.netty.resolver.dns.DnsServerAddressStreamProvider,io.netty.resolver.HostsFileEntries,io.vertx.core.dns.AddressResolverOptions,io.netty.resolver.dns.DnsCache,io.netty.resolver.dns.DnsCache)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.impl.resolver.DefaultResolverProvider: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.impl.resolver.DnsResolverProvider$lambda_new_0__28: void <init>(io.netty.resolver.dns.DnsServerAddresses)>($r0) in <io.vertx.core.impl.resolver.DnsResolverProvider$lambda_new_0__28: io.netty.resolver.dns.DnsServerAddressStreamProvider bootstrap$(io.netty.resolver.dns.DnsServerAddresses)> ==> <io.vertx.core.impl.resolver.DnsResolverProvider$lambda_new_0__28: void <init>(io.netty.resolver.dns.DnsServerAddresses)>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.eventbus.impl.EventBusImpl: void checkStarted()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.EventBusImpl: void checkStarted()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.eventbus.impl.EventBusImpl: void unregisterAll()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.EventBusImpl: void unregisterAll()>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.impl.VertxInternal: void runOnContext(io.vertx.core.Handler)>($r4) in <io.vertx.core.eventbus.impl.EventBusImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl: void runOnContext(io.vertx.core.Handler)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.eventbus.impl.EventBusImpl: void close(io.vertx.core.Handler)>($r2) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void close(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.EventBusImpl: void close(io.vertx.core.Handler)>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.eventbus.impl.EventBusImpl$lambda_close_0__29: void <init>(io.vertx.core.Handler)>($r0) in <io.vertx.core.eventbus.impl.EventBusImpl$lambda_close_0__29: io.vertx.core.Handler bootstrap$(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_close_0__29: void <init>(io.vertx.core.Handler)>
SPECIAL edge: specialinvoke $r2.<io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_close_5__30: void <init>(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus,io.vertx.core.Handler)>($r0, $r1) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_close_5__30: io.vertx.core.Handler bootstrap$(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus,io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_close_5__30: void <init>(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus,io.vertx.core.Handler)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.eventbus.impl.codecs.PingMessageCodec: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.eventbus.impl.codecs.NullMessageCodec: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.eventbus.impl.codecs.StringMessageCodec: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.eventbus.impl.codecs.BufferMessageCodec: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.eventbus.impl.codecs.JsonObjectMessageCodec: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.eventbus.impl.codecs.JsonArrayMessageCodec: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.eventbus.impl.codecs.ByteArrayMessageCodec: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.eventbus.impl.codecs.IntMessageCodec: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.eventbus.impl.codecs.LongMessageCodec: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.eventbus.impl.codecs.FloatMessageCodec: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.eventbus.impl.codecs.DoubleMessageCodec: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.eventbus.impl.codecs.BooleanMessageCodec: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.eventbus.impl.codecs.ShortMessageCodec: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.eventbus.impl.codecs.CharMessageCodec: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.eventbus.impl.codecs.ByteMessageCodec: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.eventbus.impl.codecs.ReplyExceptionMessageCodec: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.eventbus.impl.EventBusImpl$lambda_finalize_6__18: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r3.<io.vertx.core.impl.DeploymentManager: void lambda$doDeployVerticle$2(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.spi.VerticleFactory,java.lang.ClassLoader,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.util.Iterator,io.vertx.core.AsyncResult)>($r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r2) in <io.vertx.core.impl.DeploymentManager$lambda_doDeployVerticle_2__17: void handle(java.lang.Object)> ==> <io.vertx.core.impl.DeploymentManager: void lambda$doDeployVerticle$2(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.spi.VerticleFactory,java.lang.ClassLoader,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.util.Iterator,io.vertx.core.AsyncResult)>
CLINIT edge: $r17 = staticinvoke <io.vertx.core.Future: io.vertx.core.Future failedFuture(java.lang.Throwable)>($r16) in <io.vertx.core.impl.DeploymentManager: void lambda$doDeployVerticle$2(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.spi.VerticleFactory,java.lang.ClassLoader,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.util.Iterator,io.vertx.core.AsyncResult)> ==> <io.vertx.core.Future: void <clinit>()>
STATIC edge: $r14 = staticinvoke <io.vertx.core.impl.DeploymentManager$lambda_null_1__43: io.vertx.core.Handler bootstrap$(io.vertx.core.impl.DeploymentManager,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,java.lang.ClassLoader,java.util.Iterator)>(r1, r3, r4, r5, r6, r8, r7, r2) in <io.vertx.core.impl.DeploymentManager: void lambda$doDeployVerticle$2(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.spi.VerticleFactory,java.lang.ClassLoader,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.util.Iterator,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.DeploymentManager$lambda_null_1__43: io.vertx.core.Handler bootstrap$(io.vertx.core.impl.DeploymentManager,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,java.lang.ClassLoader,java.util.Iterator)>
STATIC edge: $r13 = staticinvoke <io.vertx.core.impl.DeploymentManager$lambda_null_0__42: io.vertx.core.Handler bootstrap$(io.vertx.core.impl.DeploymentManager,io.vertx.core.spi.VerticleFactory,java.lang.String,io.vertx.core.DeploymentOptions,java.lang.ClassLoader)>(r1, r11, r3, r4, r7) in <io.vertx.core.impl.DeploymentManager: void lambda$doDeployVerticle$2(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.spi.VerticleFactory,java.lang.ClassLoader,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.util.Iterator,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.DeploymentManager$lambda_null_0__42: io.vertx.core.Handler bootstrap$(io.vertx.core.impl.DeploymentManager,io.vertx.core.spi.VerticleFactory,java.lang.String,io.vertx.core.DeploymentOptions,java.lang.ClassLoader)>
STATIC edge: $r17 = staticinvoke <io.vertx.core.Future: io.vertx.core.Future failedFuture(java.lang.Throwable)>($r16) in <io.vertx.core.impl.DeploymentManager: void lambda$doDeployVerticle$2(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.spi.VerticleFactory,java.lang.ClassLoader,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.util.Iterator,io.vertx.core.AsyncResult)> ==> <io.vertx.core.Future: io.vertx.core.Future failedFuture(java.lang.Throwable)>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(com.fasterxml.jackson.core.JsonToken)>($r2) in <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(java.lang.Object)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(com.fasterxml.jackson.core.JsonToken)>
CLINIT edge: $r1 = <io.vertx.core.parsetools.impl.JsonParserImpl$1: int[] $SwitchMap$com$fasterxml$jackson$core$JsonToken> in <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(com.fasterxml.jackson.core.JsonToken)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$1: void <clinit>()>
STATIC edge: staticinvoke <io.vertx.core.parsetools.impl.JsonParserImpl: io.vertx.core.Handler access$202(io.vertx.core.parsetools.impl.JsonParserImpl,io.vertx.core.Handler)>($r6, $r7) in <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(com.fasterxml.jackson.core.JsonToken)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: io.vertx.core.Handler access$202(io.vertx.core.parsetools.impl.JsonParserImpl,io.vertx.core.Handler)>
STATIC edge: $r7 = staticinvoke <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler$lambda_handle_0__37: io.vertx.core.Handler bootstrap$(io.vertx.core.parsetools.impl.JsonParserImpl)>($r5) in <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(com.fasterxml.jackson.core.JsonToken)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler$lambda_handle_0__37: io.vertx.core.Handler bootstrap$(io.vertx.core.parsetools.impl.JsonParserImpl)>
STATIC edge: $r24 = staticinvoke <io.vertx.core.parsetools.impl.JsonParserImpl: com.fasterxml.jackson.core.json.async.NonBlockingJsonParser access$100(io.vertx.core.parsetools.impl.JsonParserImpl)>($r22) in <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(com.fasterxml.jackson.core.JsonToken)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: com.fasterxml.jackson.core.json.async.NonBlockingJsonParser access$100(io.vertx.core.parsetools.impl.JsonParserImpl)>
STATIC edge: $r15 = staticinvoke <io.vertx.core.parsetools.impl.JsonParserImpl: com.fasterxml.jackson.core.json.async.NonBlockingJsonParser access$100(io.vertx.core.parsetools.impl.JsonParserImpl)>($r13) in <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(com.fasterxml.jackson.core.JsonToken)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: com.fasterxml.jackson.core.json.async.NonBlockingJsonParser access$100(io.vertx.core.parsetools.impl.JsonParserImpl)>
STATIC edge: $r18 = staticinvoke <io.vertx.core.parsetools.impl.JsonParserImpl: com.fasterxml.jackson.core.json.async.NonBlockingJsonParser access$100(io.vertx.core.parsetools.impl.JsonParserImpl)>($r16) in <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(com.fasterxml.jackson.core.JsonToken)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: com.fasterxml.jackson.core.json.async.NonBlockingJsonParser access$100(io.vertx.core.parsetools.impl.JsonParserImpl)>
STATIC edge: $r28 = staticinvoke <io.vertx.core.parsetools.impl.JsonParserImpl: com.fasterxml.jackson.core.json.async.NonBlockingJsonParser access$100(io.vertx.core.parsetools.impl.JsonParserImpl)>($r26) in <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(com.fasterxml.jackson.core.JsonToken)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: com.fasterxml.jackson.core.json.async.NonBlockingJsonParser access$100(io.vertx.core.parsetools.impl.JsonParserImpl)>
CLINIT edge: $r34 = <io.vertx.core.json.Json: com.fasterxml.jackson.databind.ObjectMapper mapper> in <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(com.fasterxml.jackson.core.JsonToken)> ==> <io.vertx.core.json.Json: void <clinit>()>
CLINIT edge: <io.vertx.core.parsetools.impl.JsonParserImpl$1: int[] $SwitchMap$com$fasterxml$jackson$core$JsonToken> = $r1 in <io.vertx.core.parsetools.impl.JsonParserImpl$1: void <clinit>()> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$1: void <clinit>()>
STATIC edge: $r0 = staticinvoke <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken[] values()>() in <io.vertx.core.parsetools.impl.JsonParserImpl$1: void <clinit>()> ==> <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken[] values()>
CLINIT edge: $r23 = <io.vertx.core.parsetools.impl.JsonParserImpl$1: int[] $SwitchMap$com$fasterxml$jackson$core$JsonToken> in <io.vertx.core.parsetools.impl.JsonParserImpl$1: void <clinit>()> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$1: void <clinit>()>
CLINIT edge: $r21 = <io.vertx.core.parsetools.impl.JsonParserImpl$1: int[] $SwitchMap$com$fasterxml$jackson$core$JsonToken> in <io.vertx.core.parsetools.impl.JsonParserImpl$1: void <clinit>()> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$1: void <clinit>()>
CLINIT edge: $r19 = <io.vertx.core.parsetools.impl.JsonParserImpl$1: int[] $SwitchMap$com$fasterxml$jackson$core$JsonToken> in <io.vertx.core.parsetools.impl.JsonParserImpl$1: void <clinit>()> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$1: void <clinit>()>
CLINIT edge: $r17 = <io.vertx.core.parsetools.impl.JsonParserImpl$1: int[] $SwitchMap$com$fasterxml$jackson$core$JsonToken> in <io.vertx.core.parsetools.impl.JsonParserImpl$1: void <clinit>()> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$1: void <clinit>()>
CLINIT edge: $r15 = <io.vertx.core.parsetools.impl.JsonParserImpl$1: int[] $SwitchMap$com$fasterxml$jackson$core$JsonToken> in <io.vertx.core.parsetools.impl.JsonParserImpl$1: void <clinit>()> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$1: void <clinit>()>
CLINIT edge: $r13 = <io.vertx.core.parsetools.impl.JsonParserImpl$1: int[] $SwitchMap$com$fasterxml$jackson$core$JsonToken> in <io.vertx.core.parsetools.impl.JsonParserImpl$1: void <clinit>()> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$1: void <clinit>()>
CLINIT edge: $r11 = <io.vertx.core.parsetools.impl.JsonParserImpl$1: int[] $SwitchMap$com$fasterxml$jackson$core$JsonToken> in <io.vertx.core.parsetools.impl.JsonParserImpl$1: void <clinit>()> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$1: void <clinit>()>
CLINIT edge: $r9 = <io.vertx.core.parsetools.impl.JsonParserImpl$1: int[] $SwitchMap$com$fasterxml$jackson$core$JsonToken> in <io.vertx.core.parsetools.impl.JsonParserImpl$1: void <clinit>()> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$1: void <clinit>()>
CLINIT edge: $r7 = <io.vertx.core.parsetools.impl.JsonParserImpl$1: int[] $SwitchMap$com$fasterxml$jackson$core$JsonToken> in <io.vertx.core.parsetools.impl.JsonParserImpl$1: void <clinit>()> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$1: void <clinit>()>
CLINIT edge: $r5 = <io.vertx.core.parsetools.impl.JsonParserImpl$1: int[] $SwitchMap$com$fasterxml$jackson$core$JsonToken> in <io.vertx.core.parsetools.impl.JsonParserImpl$1: void <clinit>()> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$1: void <clinit>()>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.impl.FutureImpl: void handle(io.vertx.core.AsyncResult)>($r2) in <io.vertx.core.impl.FutureImpl: void handle(java.lang.Object)> ==> <io.vertx.core.impl.FutureImpl: void handle(io.vertx.core.AsyncResult)>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(io.vertx.core.Future)>($r2) in <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(java.lang.Object)> ==> <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(io.vertx.core.Future)>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.impl.SucceededFuture: void handle(io.vertx.core.AsyncResult)>($r2) in <io.vertx.core.impl.SucceededFuture: void handle(java.lang.Object)> ==> <io.vertx.core.impl.SucceededFuture: void handle(io.vertx.core.AsyncResult)>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(io.vertx.core.buffer.Buffer)>($r2) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(java.lang.Object)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(io.vertx.core.buffer.Buffer)>
CLINIT edge: $r1 = new io.vertx.core.eventbus.impl.clustered.ClusteredMessage in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void <clinit>()>
STATIC edge: staticinvoke <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: boolean access$400(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus,io.vertx.core.eventbus.impl.MessageImpl)>($r11, $r1) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: boolean access$400(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus,io.vertx.core.eventbus.impl.MessageImpl)>
STATIC edge: $r13 = staticinvoke <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: io.vertx.core.buffer.Buffer access$300()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: io.vertx.core.buffer.Buffer access$300()>
STATIC edge: $r16 = staticinvoke <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: io.vertx.core.spi.metrics.EventBusMetrics access$200(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus)>($r15) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: io.vertx.core.spi.metrics.EventBusMetrics access$200(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus)>
STATIC edge: $r7 = staticinvoke <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: io.vertx.core.spi.metrics.EventBusMetrics access$100(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus)>($r6) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: io.vertx.core.spi.metrics.EventBusMetrics access$100(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus)>
STATIC edge: $r5 = staticinvoke <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: io.vertx.core.eventbus.impl.CodecManager access$000(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus)>($r4) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: io.vertx.core.eventbus.impl.CodecManager access$000(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus)>
CLINIT edge: $r10 = <io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec PING_MESSAGE_CODEC> in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.eventbus.impl.CodecManager: void <clinit>()>
CLINIT edge: $r5 = staticinvoke <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: io.vertx.core.eventbus.impl.CodecManager access$000(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus)>($r4) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.eventbus.impl.EventBusImpl: void <clinit>()>
CLINIT edge: $r5 = staticinvoke <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: io.vertx.core.eventbus.impl.CodecManager access$000(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus)>($r4) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void <clinit>()>
CLINIT edge: $r1 = new io.vertx.core.eventbus.impl.clustered.ClusteredMessage in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.eventbus.impl.MessageImpl: void <clinit>()>
CLINIT edge: $r0 = staticinvoke <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/eventbus/impl/clustered/ClusteredMessage;") in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void <clinit>()> ==> <io.vertx.core.logging.LoggerFactory: void <clinit>()>
STATIC edge: $r0 = staticinvoke <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/eventbus/impl/clustered/ClusteredMessage;") in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void <clinit>()> ==> <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>
CLINIT edge: <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: io.vertx.core.logging.Logger log> = $r0 in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void <clinit>()> ==> <io.vertx.core.eventbus.impl.MessageImpl: void <clinit>()>
CLINIT edge: <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: io.vertx.core.logging.Logger log> = $r0 in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void <clinit>()> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void <clinit>()>
CLINIT edge: $r0 = <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: io.vertx.core.buffer.Buffer PONG> in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: io.vertx.core.buffer.Buffer access$300()> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void <clinit>()>
CLINIT edge: $r0 = <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: io.vertx.core.buffer.Buffer PONG> in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: io.vertx.core.buffer.Buffer access$300()> ==> <io.vertx.core.eventbus.impl.EventBusImpl: void <clinit>()>
CLINIT edge: $r0 = staticinvoke <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/eventbus/impl/MessageImpl;") in <io.vertx.core.eventbus.impl.MessageImpl: void <clinit>()> ==> <io.vertx.core.logging.LoggerFactory: void <clinit>()>
STATIC edge: $r0 = staticinvoke <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/eventbus/impl/MessageImpl;") in <io.vertx.core.eventbus.impl.MessageImpl: void <clinit>()> ==> <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>
CLINIT edge: <io.vertx.core.eventbus.impl.MessageImpl: io.vertx.core.logging.Logger log> = $r0 in <io.vertx.core.eventbus.impl.MessageImpl: void <clinit>()> ==> <io.vertx.core.eventbus.impl.MessageImpl: void <clinit>()>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(io.vertx.core.http.HttpServerRequest)>($r2) in <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(java.lang.Object)> ==> <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(io.vertx.core.http.HttpServerRequest)>
VIRTUAL edge: virtualinvoke $r3.<io.vertx.core.impl.VertxImpl: void lambda$joinCluster$1(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)>($r4, $r5, $r2) in <io.vertx.core.impl.VertxImpl$lambda_joinCluster_1__10: void handle(java.lang.Object)> ==> <io.vertx.core.impl.VertxImpl: void lambda$joinCluster$1(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)>
CLINIT edge: $r1 = <io.vertx.core.impl.VertxImpl: io.vertx.core.logging.Logger log> in <io.vertx.core.impl.VertxImpl: void lambda$joinCluster$1(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.VertxImpl: void <clinit>()>
STATIC edge: $r5 = staticinvoke <io.vertx.core.Future: io.vertx.core.Future failedFuture(java.lang.Throwable)>($r4) in <io.vertx.core.impl.VertxImpl: void lambda$joinCluster$1(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.Future: io.vertx.core.Future failedFuture(java.lang.Throwable)>
CLINIT edge: $r5 = staticinvoke <io.vertx.core.Future: io.vertx.core.Future failedFuture(java.lang.Throwable)>($r4) in <io.vertx.core.impl.VertxImpl: void lambda$joinCluster$1(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.Future: void <clinit>()>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.http.impl.WebSocketRequestHandler: void handle(io.vertx.core.http.HttpServerRequest)>($r2) in <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(java.lang.Object)> ==> <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(io.vertx.core.http.HttpServerRequest)>
CLINIT edge: $r3 = <io.vertx.core.http.HttpHeaders: java.lang.CharSequence UPGRADE> in <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.http.HttpHeaders: void <clinit>()>
CLINIT edge: $z0 = staticinvoke <java.lang.Boolean: boolean getBoolean(java.lang.String)>("vertx.disableHttpHeadersValidation") in <io.vertx.core.http.HttpHeaders: void <clinit>()> ==> <java.lang.Boolean: void <clinit>()>
STATIC edge: $r60 = staticinvoke <io.vertx.core.http.HttpHeaders: java.lang.CharSequence createOptimized(java.lang.String)>("GET") in <io.vertx.core.http.HttpHeaders: void <clinit>()> ==> <io.vertx.core.http.HttpHeaders: java.lang.CharSequence createOptimized(java.lang.String)>
STATIC edge: $r59 = staticinvoke <io.vertx.core.http.HttpHeaders: java.lang.CharSequence createOptimized(java.lang.String)>("text/html") in <io.vertx.core.http.HttpHeaders: void <clinit>()> ==> <io.vertx.core.http.HttpHeaders: java.lang.CharSequence createOptimized(java.lang.String)>
STATIC edge: $r58 = staticinvoke <io.vertx.core.http.HttpHeaders: java.lang.CharSequence createOptimized(java.lang.String)>("deflate, gzip") in <io.vertx.core.http.HttpHeaders: void <clinit>()> ==> <io.vertx.core.http.HttpHeaders: java.lang.CharSequence createOptimized(java.lang.String)>
STATIC edge: $z0 = staticinvoke <java.lang.Boolean: boolean getBoolean(java.lang.String)>("vertx.disableHttpHeadersValidation") in <io.vertx.core.http.HttpHeaders: void <clinit>()> ==> <java.lang.Boolean: boolean getBoolean(java.lang.String)>
CLINIT edge: <io.vertx.core.http.HttpHeaders: boolean DISABLE_HTTP_HEADERS_VALIDATION> = $z0 in <io.vertx.core.http.HttpHeaders: void <clinit>()> ==> <io.vertx.core.http.HttpHeaders: void <clinit>()>
VIRTUAL edge: virtualinvoke $r3.<io.vertx.core.Starter: void lambda$runVerticle$1(io.vertx.core.AsyncResult)>($r2) in <io.vertx.core.Starter$lambda_runVerticle_1__1: void handle(java.lang.Object)> ==> <io.vertx.core.Starter: void lambda$runVerticle$1(io.vertx.core.AsyncResult)>
INTERFACE edge: $i0 = interfaceinvoke r3.<io.vertx.core.buffer.Buffer: int length()>() in <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)> ==> <io.vertx.core.buffer.impl.BufferImpl: int length()>
VIRTUAL edge: virtualinvoke $r4.<io.vertx.core.net.impl.NetSocketImpl: void reportBytesRead(long)>($l1) in <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)> ==> <io.vertx.core.net.impl.ConnectionBase: void reportBytesRead(long)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)> ==> <io.vertx.core.impl.DeploymentManager$lambda_doDeployVerticle_2__17: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)> ==> <io.vertx.core.impl.FutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)> ==> <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)> ==> <io.vertx.core.impl.SucceededFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)> ==> <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)> ==> <io.vertx.core.impl.VertxImpl$lambda_joinCluster_1__10: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)> ==> <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)> ==> <io.vertx.core.Starter$lambda_runVerticle_1__1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)> ==> <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)> ==> <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)> ==> <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)> ==> <io.vertx.core.Starter$lambda_startVertx_0__2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_start_3__19: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)> ==> <io.vertx.core.impl.HAManager$lambda_doDeployVerticle_4__7: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_close_0__29: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)> ==> <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)> ==> <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)> ==> <io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)> ==> <io.vertx.core.Starter$lambda_createLoggingHandler_2__3: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)> ==> <io.vertx.core.impl.CompositeFutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_finalize_6__18: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)> ==> <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)> ==> <io.vertx.core.impl.VertxImpl$lambda_init_0__9: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)> ==> <io.vertx.core.impl.FailedFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)> ==> <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_close_5__30: void handle(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)>($r2) in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(java.lang.Object)> ==> <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)>
CLINIT edge: $r8 = staticinvoke <io.vertx.core.Future: io.vertx.core.Future succeededFuture(java.lang.Object)>($r1) in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.Future: void <clinit>()>
STATIC edge: $r8 = staticinvoke <io.vertx.core.Future: io.vertx.core.Future succeededFuture(java.lang.Object)>($r1) in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.Future: io.vertx.core.Future succeededFuture(java.lang.Object)>
CLINIT edge: $r1 = <io.vertx.core.Future: io.vertx.core.spi.FutureFactory factory> in <io.vertx.core.Future: io.vertx.core.Future succeededFuture(java.lang.Object)> ==> <io.vertx.core.Future: void <clinit>()>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(io.vertx.core.AsyncResult)>($r2) in <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(java.lang.Object)> ==> <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(io.vertx.core.AsyncResult)>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.parsetools.impl.RecordParserImpl: void handle(io.vertx.core.buffer.Buffer)>($r2) in <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(java.lang.Object)> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(io.vertx.core.buffer.Buffer)>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.parsetools.impl.JsonParserImpl: void handle(io.vertx.core.buffer.Buffer)>($r2) in <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(java.lang.Object)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(io.vertx.core.buffer.Buffer)>
VIRTUAL edge: virtualinvoke $r3.<io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$start$3(io.vertx.core.impl.HAManager,io.vertx.core.Handler,io.vertx.core.AsyncResult)>($r4, $r5, $r2) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_start_3__19: void handle(java.lang.Object)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$start$3(io.vertx.core.impl.HAManager,io.vertx.core.Handler,io.vertx.core.AsyncResult)>
CLINIT edge: $r3 = staticinvoke <io.vertx.core.Future: io.vertx.core.Future failedFuture(java.lang.Throwable)>($r2) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$start$3(io.vertx.core.impl.HAManager,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.Future: void <clinit>()>
STATIC edge: $r3 = staticinvoke <io.vertx.core.Future: io.vertx.core.Future failedFuture(java.lang.Throwable)>($r2) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$start$3(io.vertx.core.impl.HAManager,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.Future: io.vertx.core.Future failedFuture(java.lang.Throwable)>
STATIC edge: $r15 = staticinvoke <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_null_2__34: io.vertx.core.Handler bootstrap$(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus,io.vertx.core.impl.HAManager,io.vertx.core.Handler)>(r4, r13, r1) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$start$3(io.vertx.core.impl.HAManager,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_null_2__34: io.vertx.core.Handler bootstrap$(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus,io.vertx.core.impl.HAManager,io.vertx.core.Handler)>
VIRTUAL edge: virtualinvoke $r3.<io.vertx.core.impl.HAManager: void lambda$doDeployVerticle$4(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)>($r4, $r5, $r6, $r2) in <io.vertx.core.impl.HAManager$lambda_doDeployVerticle_4__7: void handle(java.lang.Object)> ==> <io.vertx.core.impl.HAManager: void lambda$doDeployVerticle$4(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)>
STATIC edge: $r5 = staticinvoke <io.vertx.core.impl.HAManager$lambda_null_2__35: io.vertx.core.Handler bootstrap$(io.vertx.core.impl.HAManager,io.vertx.core.AsyncResult,java.lang.String,io.vertx.core.DeploymentOptions)>(r0, r1, r2, r3) in <io.vertx.core.impl.HAManager: void lambda$doDeployVerticle$4(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.HAManager$lambda_null_2__35: io.vertx.core.Handler bootstrap$(io.vertx.core.impl.HAManager,io.vertx.core.AsyncResult,java.lang.String,io.vertx.core.DeploymentOptions)>
STATIC edge: $r7 = staticinvoke <io.vertx.core.impl.HAManager$lambda_null_3__36: io.vertx.core.Handler bootstrap$(io.vertx.core.Handler)>(r6) in <io.vertx.core.impl.HAManager: void lambda$doDeployVerticle$4(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.HAManager$lambda_null_3__36: io.vertx.core.Handler bootstrap$(io.vertx.core.Handler)>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handle(io.vertx.core.http.impl.ws.WebSocketFrameInternal)>($r2) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handle(java.lang.Object)> ==> <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handle(io.vertx.core.http.impl.ws.WebSocketFrameInternal)>
CLINIT edge: $r1 = <io.vertx.core.http.impl.WebSocketImplBase$1: int[] $SwitchMap$io$vertx$core$http$impl$FrameType> in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handle(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.http.impl.WebSocketImplBase$1: void <clinit>()>
CLINIT edge: $r0 = staticinvoke <io.vertx.core.http.impl.FrameType: io.vertx.core.http.impl.FrameType[] values()>() in <io.vertx.core.http.impl.WebSocketImplBase$1: void <clinit>()> ==> <io.vertx.core.http.impl.FrameType: void <clinit>()>
STATIC edge: $r0 = staticinvoke <io.vertx.core.http.impl.FrameType: io.vertx.core.http.impl.FrameType[] values()>() in <io.vertx.core.http.impl.WebSocketImplBase$1: void <clinit>()> ==> <io.vertx.core.http.impl.FrameType: io.vertx.core.http.impl.FrameType[] values()>
CLINIT edge: $r10 = <io.vertx.core.http.impl.FrameType: io.vertx.core.http.impl.FrameType CONTINUATION> in <io.vertx.core.http.impl.WebSocketImplBase$1: void <clinit>()> ==> <io.vertx.core.http.impl.FrameType: void <clinit>()>
CLINIT edge: $r11 = <io.vertx.core.http.impl.WebSocketImplBase$1: int[] $SwitchMap$io$vertx$core$http$impl$FrameType> in <io.vertx.core.http.impl.WebSocketImplBase$1: void <clinit>()> ==> <io.vertx.core.http.impl.WebSocketImplBase$1: void <clinit>()>
CLINIT edge: $r8 = <io.vertx.core.http.impl.FrameType: io.vertx.core.http.impl.FrameType BINARY> in <io.vertx.core.http.impl.WebSocketImplBase$1: void <clinit>()> ==> <io.vertx.core.http.impl.FrameType: void <clinit>()>
CLINIT edge: $r9 = <io.vertx.core.http.impl.WebSocketImplBase$1: int[] $SwitchMap$io$vertx$core$http$impl$FrameType> in <io.vertx.core.http.impl.WebSocketImplBase$1: void <clinit>()> ==> <io.vertx.core.http.impl.WebSocketImplBase$1: void <clinit>()>
CLINIT edge: $r6 = <io.vertx.core.http.impl.FrameType: io.vertx.core.http.impl.FrameType CLOSE> in <io.vertx.core.http.impl.WebSocketImplBase$1: void <clinit>()> ==> <io.vertx.core.http.impl.FrameType: void <clinit>()>
CLINIT edge: $r7 = <io.vertx.core.http.impl.WebSocketImplBase$1: int[] $SwitchMap$io$vertx$core$http$impl$FrameType> in <io.vertx.core.http.impl.WebSocketImplBase$1: void <clinit>()> ==> <io.vertx.core.http.impl.WebSocketImplBase$1: void <clinit>()>
CLINIT edge: $r4 = <io.vertx.core.http.impl.FrameType: io.vertx.core.http.impl.FrameType TEXT> in <io.vertx.core.http.impl.WebSocketImplBase$1: void <clinit>()> ==> <io.vertx.core.http.impl.FrameType: void <clinit>()>
CLINIT edge: $r5 = <io.vertx.core.http.impl.WebSocketImplBase$1: int[] $SwitchMap$io$vertx$core$http$impl$FrameType> in <io.vertx.core.http.impl.WebSocketImplBase$1: void <clinit>()> ==> <io.vertx.core.http.impl.WebSocketImplBase$1: void <clinit>()>
CLINIT edge: <io.vertx.core.http.impl.WebSocketImplBase$1: int[] $SwitchMap$io$vertx$core$http$impl$FrameType> = $r1 in <io.vertx.core.http.impl.WebSocketImplBase$1: void <clinit>()> ==> <io.vertx.core.http.impl.WebSocketImplBase$1: void <clinit>()>
CLINIT edge: $r0 = new io.vertx.core.http.impl.FrameType in <io.vertx.core.http.impl.FrameType: void <clinit>()> ==> <io.vertx.core.http.impl.FrameType: void <clinit>()>
CLINIT edge: $r0 = <io.vertx.core.http.impl.FrameType: io.vertx.core.http.impl.FrameType[] $VALUES> in <io.vertx.core.http.impl.FrameType: io.vertx.core.http.impl.FrameType[] values()> ==> <io.vertx.core.http.impl.FrameType: void <clinit>()>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Void)>($r2) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Object)> ==> <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Void)>
CLINIT edge: $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Void)> ==> <java.lang.Long: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Void)> ==> <java.lang.Long: java.lang.Long valueOf(long)>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler: void handle(io.vertx.core.buffer.Buffer)>($r2) in <io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler: void handle(java.lang.Object)> ==> <io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler: void handle(io.vertx.core.buffer.Buffer)>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.impl.CompositeFutureImpl: void handle(io.vertx.core.AsyncResult)>($r2) in <io.vertx.core.impl.CompositeFutureImpl: void handle(java.lang.Object)> ==> <io.vertx.core.impl.CompositeFutureImpl: void handle(io.vertx.core.AsyncResult)>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.eventbus.impl.HandlerRegistration: void handle(io.vertx.core.eventbus.Message)>($r2) in <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(java.lang.Object)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(io.vertx.core.eventbus.Message)>
CLINIT edge: $r12 = <io.vertx.core.eventbus.impl.HandlerRegistration: io.vertx.core.logging.Logger log> in <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(io.vertx.core.eventbus.Message)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void <clinit>()>
CLINIT edge: $r0 = staticinvoke <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/eventbus/impl/HandlerRegistration;") in <io.vertx.core.eventbus.impl.HandlerRegistration: void <clinit>()> ==> <io.vertx.core.logging.LoggerFactory: void <clinit>()>
STATIC edge: $r0 = staticinvoke <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/eventbus/impl/HandlerRegistration;") in <io.vertx.core.eventbus.impl.HandlerRegistration: void <clinit>()> ==> <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>
CLINIT edge: <io.vertx.core.eventbus.impl.HandlerRegistration: io.vertx.core.logging.Logger log> = $r0 in <io.vertx.core.eventbus.impl.HandlerRegistration: void <clinit>()> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void <clinit>()>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)>($r2) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Object)> ==> <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.impl.FailedFuture: void handle(io.vertx.core.AsyncResult)>($r2) in <io.vertx.core.impl.FailedFuture: void handle(java.lang.Object)> ==> <io.vertx.core.impl.FailedFuture: void handle(io.vertx.core.AsyncResult)>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.http.impl.Http2ServerConnection$1: void handle(io.vertx.core.AsyncResult)>($r2) in <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(java.lang.Object)> ==> <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(io.vertx.core.AsyncResult)>
CLINIT edge: r11 = staticinvoke <io.vertx.core.http.impl.HttpUtils: java.lang.String determineContentEncoding(io.netty.handler.codec.http2.Http2Headers)>($r10) in <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.http.impl.HttpUtils: void <clinit>()>
STATIC edge: $r5 = staticinvoke <io.vertx.core.http.impl.Http2ServerConnection$1$lambda_handle_1__38: io.vertx.core.Handler bootstrap$(io.vertx.core.Handler,io.vertx.core.AsyncResult)>($r4, r0) in <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.http.impl.Http2ServerConnection$1$lambda_handle_1__38: io.vertx.core.Handler bootstrap$(io.vertx.core.Handler,io.vertx.core.AsyncResult)>
STATIC edge: $r3 = staticinvoke <io.vertx.core.http.impl.Http2ServerConnection: io.vertx.core.impl.ContextInternal access$400(io.vertx.core.http.impl.Http2ServerConnection)>($r2) in <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.http.impl.Http2ServerConnection: io.vertx.core.impl.ContextInternal access$400(io.vertx.core.http.impl.Http2ServerConnection)>
STATIC edge: $r40 = staticinvoke <io.vertx.core.http.impl.Http2ServerConnection: java.util.ArrayDeque access$300(io.vertx.core.http.impl.Http2ServerConnection)>($r39) in <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.http.impl.Http2ServerConnection: java.util.ArrayDeque access$300(io.vertx.core.http.impl.Http2ServerConnection)>
STATIC edge: $r35 = staticinvoke <io.vertx.core.http.impl.Http2ServerConnection$1$lambda_handle_0__39: io.vertx.core.Handler bootstrap$(io.vertx.core.http.impl.Http2ServerConnection$Push)>($r20) in <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.http.impl.Http2ServerConnection$1$lambda_handle_0__39: io.vertx.core.Handler bootstrap$(io.vertx.core.http.impl.Http2ServerConnection$Push)>
STATIC edge: $r34 = staticinvoke <io.vertx.core.http.impl.Http2ServerConnection: io.vertx.core.impl.ContextInternal access$200(io.vertx.core.http.impl.Http2ServerConnection)>($r33) in <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.http.impl.Http2ServerConnection: io.vertx.core.impl.ContextInternal access$200(io.vertx.core.http.impl.Http2ServerConnection)>
STATIC edge: staticinvoke <io.vertx.core.http.impl.Http2ServerConnection: int access$108(io.vertx.core.http.impl.Http2ServerConnection)>($r32) in <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.http.impl.Http2ServerConnection: int access$108(io.vertx.core.http.impl.Http2ServerConnection)>
STATIC edge: $r38 = staticinvoke <io.vertx.core.http.impl.Http2ServerConnection: java.lang.Long access$000(io.vertx.core.http.impl.Http2ServerConnection)>($r37) in <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.http.impl.Http2ServerConnection: java.lang.Long access$000(io.vertx.core.http.impl.Http2ServerConnection)>
STATIC edge: $i2 = staticinvoke <io.vertx.core.http.impl.Http2ServerConnection: int access$100(io.vertx.core.http.impl.Http2ServerConnection)>($r36) in <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.http.impl.Http2ServerConnection: int access$100(io.vertx.core.http.impl.Http2ServerConnection)>
STATIC edge: $r31 = staticinvoke <io.vertx.core.http.impl.Http2ServerConnection: java.lang.Long access$000(io.vertx.core.http.impl.Http2ServerConnection)>($r30) in <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.http.impl.Http2ServerConnection: java.lang.Long access$000(io.vertx.core.http.impl.Http2ServerConnection)>
STATIC edge: r11 = staticinvoke <io.vertx.core.http.impl.HttpUtils: java.lang.String determineContentEncoding(io.netty.handler.codec.http2.Http2Headers)>($r10) in <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.http.impl.HttpUtils: java.lang.String determineContentEncoding(io.netty.handler.codec.http2.Http2Headers)>
CLINIT edge: <io.vertx.core.http.impl.HttpUtils: io.vertx.core.http.StreamPriority DEFAULT_STREAM_PRIORITY> = $r0 in <io.vertx.core.http.impl.HttpUtils: void <clinit>()> ==> <io.vertx.core.http.impl.HttpUtils: void <clinit>()>
STATIC edge: $r3 = staticinvoke <io.vertx.core.http.impl.HttpUtils$validateHeaderValue__40: java.util.function.Consumer bootstrap$()>() in <io.vertx.core.http.impl.HttpUtils: void <clinit>()> ==> <io.vertx.core.http.impl.HttpUtils$validateHeaderValue__40: java.util.function.Consumer bootstrap$()>
STATIC edge: $r2 = staticinvoke <io.netty.util.AsciiString: io.netty.util.AsciiString of(java.lang.CharSequence)>("timeout=") in <io.vertx.core.http.impl.HttpUtils: void <clinit>()> ==> <io.netty.util.AsciiString: io.netty.util.AsciiString of(java.lang.CharSequence)>
CLINIT edge: $r4 = <io.vertx.core.http.impl.HttpUtils: io.vertx.core.http.impl.HttpUtils$CustomCompressor compressor> in <io.vertx.core.http.impl.HttpUtils: java.lang.String determineContentEncoding(io.netty.handler.codec.http2.Http2Headers)> ==> <io.vertx.core.http.impl.HttpUtils: void <clinit>()>
CLINIT edge: $r6 = <io.vertx.core.http.impl.HttpUtils$2: int[] $SwitchMap$io$netty$handler$codec$compression$ZlibWrapper> in <io.vertx.core.http.impl.HttpUtils: java.lang.String determineContentEncoding(io.netty.handler.codec.http2.Http2Headers)> ==> <io.vertx.core.http.impl.HttpUtils$2: void <clinit>()>
CLINIT edge: $r0 = staticinvoke <io.vertx.core.http.HttpVersion: io.vertx.core.http.HttpVersion[] values()>() in <io.vertx.core.http.impl.HttpUtils$2: void <clinit>()> ==> <io.vertx.core.http.HttpVersion: void <clinit>()>
STATIC edge: $r26 = staticinvoke <io.netty.handler.codec.compression.ZlibWrapper: io.netty.handler.codec.compression.ZlibWrapper[] values()>() in <io.vertx.core.http.impl.HttpUtils$2: void <clinit>()> ==> <io.netty.handler.codec.compression.ZlibWrapper: io.netty.handler.codec.compression.ZlibWrapper[] values()>
STATIC edge: $r6 = staticinvoke <io.vertx.core.http.HttpMethod: io.vertx.core.http.HttpMethod[] values()>() in <io.vertx.core.http.impl.HttpUtils$2: void <clinit>()> ==> <io.vertx.core.http.HttpMethod: io.vertx.core.http.HttpMethod[] values()>
STATIC edge: $r0 = staticinvoke <io.vertx.core.http.HttpVersion: io.vertx.core.http.HttpVersion[] values()>() in <io.vertx.core.http.impl.HttpUtils$2: void <clinit>()> ==> <io.vertx.core.http.HttpVersion: io.vertx.core.http.HttpVersion[] values()>
CLINIT edge: $r31 = <io.vertx.core.http.impl.HttpUtils$2: int[] $SwitchMap$io$netty$handler$codec$compression$ZlibWrapper> in <io.vertx.core.http.impl.HttpUtils$2: void <clinit>()> ==> <io.vertx.core.http.impl.HttpUtils$2: void <clinit>()>
CLINIT edge: <io.vertx.core.http.impl.HttpUtils$2: int[] $SwitchMap$io$netty$handler$codec$compression$ZlibWrapper> = $r27 in <io.vertx.core.http.impl.HttpUtils$2: void <clinit>()> ==> <io.vertx.core.http.impl.HttpUtils$2: void <clinit>()>
CLINIT edge: $r24 = <io.vertx.core.http.HttpMethod: io.vertx.core.http.HttpMethod PATCH> in <io.vertx.core.http.impl.HttpUtils$2: void <clinit>()> ==> <io.vertx.core.http.HttpMethod: void <clinit>()>
CLINIT edge: $r25 = <io.vertx.core.http.impl.HttpUtils$2: int[] $SwitchMap$io$vertx$core$http$HttpMethod> in <io.vertx.core.http.impl.HttpUtils$2: void <clinit>()> ==> <io.vertx.core.http.impl.HttpUtils$2: void <clinit>()>
CLINIT edge: $r22 = <io.vertx.core.http.HttpMethod: io.vertx.core.http.HttpMethod TRACE> in <io.vertx.core.http.impl.HttpUtils$2: void <clinit>()> ==> <io.vertx.core.http.HttpMethod: void <clinit>()>
CLINIT edge: $r23 = <io.vertx.core.http.impl.HttpUtils$2: int[] $SwitchMap$io$vertx$core$http$HttpMethod> in <io.vertx.core.http.impl.HttpUtils$2: void <clinit>()> ==> <io.vertx.core.http.impl.HttpUtils$2: void <clinit>()>
CLINIT edge: $r20 = <io.vertx.core.http.HttpMethod: io.vertx.core.http.HttpMethod OPTIONS> in <io.vertx.core.http.impl.HttpUtils$2: void <clinit>()> ==> <io.vertx.core.http.HttpMethod: void <clinit>()>
CLINIT edge: $r21 = <io.vertx.core.http.impl.HttpUtils$2: int[] $SwitchMap$io$vertx$core$http$HttpMethod> in <io.vertx.core.http.impl.HttpUtils$2: void <clinit>()> ==> <io.vertx.core.http.impl.HttpUtils$2: void <clinit>()>
CLINIT edge: $r18 = <io.vertx.core.http.HttpMethod: io.vertx.core.http.HttpMethod HEAD> in <io.vertx.core.http.impl.HttpUtils$2: void <clinit>()> ==> <io.vertx.core.http.HttpMethod: void <clinit>()>
CLINIT edge: $r19 = <io.vertx.core.http.impl.HttpUtils$2: int[] $SwitchMap$io$vertx$core$http$HttpMethod> in <io.vertx.core.http.impl.HttpUtils$2: void <clinit>()> ==> <io.vertx.core.http.impl.HttpUtils$2: void <clinit>()>
CLINIT edge: $r16 = <io.vertx.core.http.HttpMethod: io.vertx.core.http.HttpMethod DELETE> in <io.vertx.core.http.impl.HttpUtils$2: void <clinit>()> ==> <io.vertx.core.http.HttpMethod: void <clinit>()>
CLINIT edge: $r17 = <io.vertx.core.http.impl.HttpUtils$2: int[] $SwitchMap$io$vertx$core$http$HttpMethod> in <io.vertx.core.http.impl.HttpUtils$2: void <clinit>()> ==> <io.vertx.core.http.impl.HttpUtils$2: void <clinit>()>
CLINIT edge: $r14 = <io.vertx.core.http.HttpMethod: io.vertx.core.http.HttpMethod POST> in <io.vertx.core.http.impl.HttpUtils$2: void <clinit>()> ==> <io.vertx.core.http.HttpMethod: void <clinit>()>
CLINIT edge: $r15 = <io.vertx.core.http.impl.HttpUtils$2: int[] $SwitchMap$io$vertx$core$http$HttpMethod> in <io.vertx.core.http.impl.HttpUtils$2: void <clinit>()> ==> <io.vertx.core.http.impl.HttpUtils$2: void <clinit>()>
CLINIT edge: $r12 = <io.vertx.core.http.HttpMethod: io.vertx.core.http.HttpMethod PUT> in <io.vertx.core.http.impl.HttpUtils$2: void <clinit>()> ==> <io.vertx.core.http.HttpMethod: void <clinit>()>
CLINIT edge: $r13 = <io.vertx.core.http.impl.HttpUtils$2: int[] $SwitchMap$io$vertx$core$http$HttpMethod> in <io.vertx.core.http.impl.HttpUtils$2: void <clinit>()> ==> <io.vertx.core.http.impl.HttpUtils$2: void <clinit>()>
CLINIT edge: $r10 = <io.vertx.core.http.HttpMethod: io.vertx.core.http.HttpMethod GET> in <io.vertx.core.http.impl.HttpUtils$2: void <clinit>()> ==> <io.vertx.core.http.HttpMethod: void <clinit>()>
CLINIT edge: $r11 = <io.vertx.core.http.impl.HttpUtils$2: int[] $SwitchMap$io$vertx$core$http$HttpMethod> in <io.vertx.core.http.impl.HttpUtils$2: void <clinit>()> ==> <io.vertx.core.http.impl.HttpUtils$2: void <clinit>()>
CLINIT edge: <io.vertx.core.http.impl.HttpUtils$2: int[] $SwitchMap$io$vertx$core$http$HttpMethod> = $r7 in <io.vertx.core.http.impl.HttpUtils$2: void <clinit>()> ==> <io.vertx.core.http.impl.HttpUtils$2: void <clinit>()>
CLINIT edge: $r6 = staticinvoke <io.vertx.core.http.HttpMethod: io.vertx.core.http.HttpMethod[] values()>() in <io.vertx.core.http.impl.HttpUtils$2: void <clinit>()> ==> <io.vertx.core.http.HttpMethod: void <clinit>()>
CLINIT edge: $r4 = <io.vertx.core.http.HttpVersion: io.vertx.core.http.HttpVersion HTTP_1_1> in <io.vertx.core.http.impl.HttpUtils$2: void <clinit>()> ==> <io.vertx.core.http.HttpVersion: void <clinit>()>
CLINIT edge: $r5 = <io.vertx.core.http.impl.HttpUtils$2: int[] $SwitchMap$io$vertx$core$http$HttpVersion> in <io.vertx.core.http.impl.HttpUtils$2: void <clinit>()> ==> <io.vertx.core.http.impl.HttpUtils$2: void <clinit>()>
CLINIT edge: <io.vertx.core.http.impl.HttpUtils$2: int[] $SwitchMap$io$vertx$core$http$HttpVersion> = $r1 in <io.vertx.core.http.impl.HttpUtils$2: void <clinit>()> ==> <io.vertx.core.http.impl.HttpUtils$2: void <clinit>()>
CLINIT edge: $r0 = new io.vertx.core.http.HttpVersion in <io.vertx.core.http.HttpVersion: void <clinit>()> ==> <io.vertx.core.http.HttpVersion: void <clinit>()>
CLINIT edge: $r0 = <io.vertx.core.http.HttpMethod: io.vertx.core.http.HttpMethod[] $VALUES> in <io.vertx.core.http.HttpMethod: io.vertx.core.http.HttpMethod[] values()> ==> <io.vertx.core.http.HttpMethod: void <clinit>()>
CLINIT edge: $r0 = <io.vertx.core.http.HttpVersion: io.vertx.core.http.HttpVersion[] $VALUES> in <io.vertx.core.http.HttpVersion: io.vertx.core.http.HttpVersion[] values()> ==> <io.vertx.core.http.HttpVersion: void <clinit>()>
CLINIT edge: $r0 = new io.vertx.core.http.HttpMethod in <io.vertx.core.http.HttpMethod: void <clinit>()> ==> <io.vertx.core.http.HttpMethod: void <clinit>()>
VIRTUAL edge: virtualinvoke $r3.<io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$close$5(io.vertx.core.Handler,io.vertx.core.AsyncResult)>($r4, $r2) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_close_5__30: void handle(java.lang.Object)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$close$5(io.vertx.core.Handler,io.vertx.core.AsyncResult)>
STATIC edge: $r5 = staticinvoke <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_null_4__41: io.vertx.core.Handler bootstrap$(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus,io.vertx.core.Handler)>(r0, r2) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$close$5(io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_null_4__41: io.vertx.core.Handler bootstrap$(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus,io.vertx.core.Handler)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<io.vertx.core.spi.BufferFactory: io.vertx.core.buffer.Buffer buffer(io.netty.buffer.ByteBuf)>(r0) in <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer(io.netty.buffer.ByteBuf)> ==> <io.vertx.core.buffer.impl.BufferFactoryImpl: io.vertx.core.buffer.Buffer buffer(io.netty.buffer.ByteBuf)>
VIRTUAL edge: $z1 = virtualinvoke r0.<io.netty.buffer.ByteBuf: boolean isReadable()>() in <io.vertx.core.net.impl.VertxHandler: io.netty.buffer.ByteBuf safeBuffer(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBufAllocator)> ==> <io.netty.buffer.ByteBuf: boolean isReadable()>
VIRTUAL edge: $i0 = virtualinvoke r0.<io.netty.buffer.ByteBuf: int readableBytes()>() in <io.vertx.core.net.impl.VertxHandler: io.netty.buffer.ByteBuf safeBuffer(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBufAllocator)> ==> <io.netty.buffer.ByteBuf: int readableBytes()>
INTERFACE edge: r7 = interfaceinvoke r2.<io.netty.buffer.ByteBufAllocator: io.netty.buffer.ByteBuf heapBuffer(int)>($i0) in <io.vertx.core.net.impl.VertxHandler: io.netty.buffer.ByteBuf safeBuffer(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBufAllocator)> ==> <io.vertx.core.net.impl.PartialPooledByteBufAllocator$ForceDirectPoooledByteBufAllocator: io.netty.buffer.ByteBuf heapBuffer(int)>
INTERFACE edge: r7 = interfaceinvoke r2.<io.netty.buffer.ByteBufAllocator: io.netty.buffer.ByteBuf heapBuffer(int)>($i0) in <io.vertx.core.net.impl.VertxHandler: io.netty.buffer.ByteBuf safeBuffer(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBufAllocator)> ==> <io.netty.buffer.ByteBufAllocator: io.netty.buffer.ByteBuf heapBuffer(int)>
INTERFACE edge: r7 = interfaceinvoke r2.<io.netty.buffer.ByteBufAllocator: io.netty.buffer.ByteBuf heapBuffer(int)>($i0) in <io.vertx.core.net.impl.VertxHandler: io.netty.buffer.ByteBuf safeBuffer(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBufAllocator)> ==> <io.vertx.core.net.impl.PartialPooledByteBufAllocator: io.netty.buffer.ByteBuf heapBuffer(int)>
VIRTUAL edge: virtualinvoke r7.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf)>(r0) in <io.vertx.core.net.impl.VertxHandler: io.netty.buffer.ByteBuf safeBuffer(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBufAllocator)> ==> <io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf)>
CLINIT edge: $r0 = <io.vertx.core.net.impl.PartialPooledByteBufAllocator: io.vertx.core.net.impl.PartialPooledByteBufAllocator INSTANCE> in <io.vertx.core.net.impl.PartialPooledByteBufAllocator$ForceDirectPoooledByteBufAllocator: io.netty.buffer.ByteBuf heapBuffer(int)> ==> <io.vertx.core.net.impl.PartialPooledByteBufAllocator: void <clinit>()>
CLINIT edge: $r0 = <io.vertx.core.net.impl.PartialPooledByteBufAllocator: io.netty.buffer.ByteBufAllocator UNPOOLED> in <io.vertx.core.net.impl.PartialPooledByteBufAllocator: io.netty.buffer.ByteBuf heapBuffer(int)> ==> <io.vertx.core.net.impl.PartialPooledByteBufAllocator: void <clinit>()>
CLINIT edge: <io.vertx.core.net.impl.PartialPooledByteBufAllocator: io.netty.buffer.ByteBufAllocator POOLED> = $r6 in <io.vertx.core.net.impl.PartialPooledByteBufAllocator: void <clinit>()> ==> <io.vertx.core.net.impl.PartialPooledByteBufAllocator: void <clinit>()>
VIRTUAL edge: virtualinvoke r0.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(r1) in <io.vertx.core.Starter: void lambda$startVertx$0(java.util.concurrent.atomic.AtomicReference,java.util.concurrent.CountDownLatch,io.vertx.core.AsyncResult)> ==> <java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>
VIRTUAL edge: virtualinvoke r2.<java.util.concurrent.CountDownLatch: void countDown()>() in <io.vertx.core.Starter: void lambda$startVertx$0(java.util.concurrent.atomic.AtomicReference,java.util.concurrent.CountDownLatch,io.vertx.core.AsyncResult)> ==> <java.util.concurrent.CountDownLatch: void countDown()>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r1) in <io.vertx.core.eventbus.impl.EventBusImpl: void lambda$close$0(io.vertx.core.Handler,java.lang.Void)> ==> <io.vertx.core.impl.DeploymentManager$lambda_doDeployVerticle_2__17: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r1) in <io.vertx.core.eventbus.impl.EventBusImpl: void lambda$close$0(io.vertx.core.Handler,java.lang.Void)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r1) in <io.vertx.core.eventbus.impl.EventBusImpl: void lambda$close$0(io.vertx.core.Handler,java.lang.Void)> ==> <io.vertx.core.impl.FutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r1) in <io.vertx.core.eventbus.impl.EventBusImpl: void lambda$close$0(io.vertx.core.Handler,java.lang.Void)> ==> <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r1) in <io.vertx.core.eventbus.impl.EventBusImpl: void lambda$close$0(io.vertx.core.Handler,java.lang.Void)> ==> <io.vertx.core.impl.SucceededFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r1) in <io.vertx.core.eventbus.impl.EventBusImpl: void lambda$close$0(io.vertx.core.Handler,java.lang.Void)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r1) in <io.vertx.core.eventbus.impl.EventBusImpl: void lambda$close$0(io.vertx.core.Handler,java.lang.Void)> ==> <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r1) in <io.vertx.core.eventbus.impl.EventBusImpl: void lambda$close$0(io.vertx.core.Handler,java.lang.Void)> ==> <io.vertx.core.impl.VertxImpl$lambda_joinCluster_1__10: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r1) in <io.vertx.core.eventbus.impl.EventBusImpl: void lambda$close$0(io.vertx.core.Handler,java.lang.Void)> ==> <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r1) in <io.vertx.core.eventbus.impl.EventBusImpl: void lambda$close$0(io.vertx.core.Handler,java.lang.Void)> ==> <io.vertx.core.Starter$lambda_runVerticle_1__1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r1) in <io.vertx.core.eventbus.impl.EventBusImpl: void lambda$close$0(io.vertx.core.Handler,java.lang.Void)> ==> <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r1) in <io.vertx.core.eventbus.impl.EventBusImpl: void lambda$close$0(io.vertx.core.Handler,java.lang.Void)> ==> <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r1) in <io.vertx.core.eventbus.impl.EventBusImpl: void lambda$close$0(io.vertx.core.Handler,java.lang.Void)> ==> <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r1) in <io.vertx.core.eventbus.impl.EventBusImpl: void lambda$close$0(io.vertx.core.Handler,java.lang.Void)> ==> <io.vertx.core.Starter$lambda_startVertx_0__2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r1) in <io.vertx.core.eventbus.impl.EventBusImpl: void lambda$close$0(io.vertx.core.Handler,java.lang.Void)> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r1) in <io.vertx.core.eventbus.impl.EventBusImpl: void lambda$close$0(io.vertx.core.Handler,java.lang.Void)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r1) in <io.vertx.core.eventbus.impl.EventBusImpl: void lambda$close$0(io.vertx.core.Handler,java.lang.Void)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_start_3__19: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r1) in <io.vertx.core.eventbus.impl.EventBusImpl: void lambda$close$0(io.vertx.core.Handler,java.lang.Void)> ==> <io.vertx.core.impl.HAManager$lambda_doDeployVerticle_4__7: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r1) in <io.vertx.core.eventbus.impl.EventBusImpl: void lambda$close$0(io.vertx.core.Handler,java.lang.Void)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_close_0__29: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r1) in <io.vertx.core.eventbus.impl.EventBusImpl: void lambda$close$0(io.vertx.core.Handler,java.lang.Void)> ==> <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r1) in <io.vertx.core.eventbus.impl.EventBusImpl: void lambda$close$0(io.vertx.core.Handler,java.lang.Void)> ==> <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r1) in <io.vertx.core.eventbus.impl.EventBusImpl: void lambda$close$0(io.vertx.core.Handler,java.lang.Void)> ==> <io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r1) in <io.vertx.core.eventbus.impl.EventBusImpl: void lambda$close$0(io.vertx.core.Handler,java.lang.Void)> ==> <io.vertx.core.Starter$lambda_createLoggingHandler_2__3: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r1) in <io.vertx.core.eventbus.impl.EventBusImpl: void lambda$close$0(io.vertx.core.Handler,java.lang.Void)> ==> <io.vertx.core.impl.CompositeFutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r1) in <io.vertx.core.eventbus.impl.EventBusImpl: void lambda$close$0(io.vertx.core.Handler,java.lang.Void)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r1) in <io.vertx.core.eventbus.impl.EventBusImpl: void lambda$close$0(io.vertx.core.Handler,java.lang.Void)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_finalize_6__18: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r1) in <io.vertx.core.eventbus.impl.EventBusImpl: void lambda$close$0(io.vertx.core.Handler,java.lang.Void)> ==> <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r1) in <io.vertx.core.eventbus.impl.EventBusImpl: void lambda$close$0(io.vertx.core.Handler,java.lang.Void)> ==> <io.vertx.core.impl.VertxImpl$lambda_init_0__9: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r1) in <io.vertx.core.eventbus.impl.EventBusImpl: void lambda$close$0(io.vertx.core.Handler,java.lang.Void)> ==> <io.vertx.core.impl.FailedFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r1) in <io.vertx.core.eventbus.impl.EventBusImpl: void lambda$close$0(io.vertx.core.Handler,java.lang.Void)> ==> <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r1) in <io.vertx.core.eventbus.impl.EventBusImpl: void lambda$close$0(io.vertx.core.Handler,java.lang.Void)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_close_5__30: void handle(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r0.<io.vertx.core.AsyncResult: boolean failed()>() in <io.vertx.core.Starter: void lambda$createLoggingHandler$2(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.FutureImpl: boolean failed()>
INTERFACE edge: $z0 = interfaceinvoke r0.<io.vertx.core.AsyncResult: boolean failed()>() in <io.vertx.core.Starter: void lambda$createLoggingHandler$2(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.FailedFuture: boolean failed()>
INTERFACE edge: $z0 = interfaceinvoke r0.<io.vertx.core.AsyncResult: boolean failed()>() in <io.vertx.core.Starter: void lambda$createLoggingHandler$2(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.AsyncResult$1: boolean failed()>
INTERFACE edge: $z0 = interfaceinvoke r0.<io.vertx.core.AsyncResult: boolean failed()>() in <io.vertx.core.Starter: void lambda$createLoggingHandler$2(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.AsyncResult$2: boolean failed()>
INTERFACE edge: $z0 = interfaceinvoke r0.<io.vertx.core.AsyncResult: boolean failed()>() in <io.vertx.core.Starter: void lambda$createLoggingHandler$2(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.CompositeFutureImpl: boolean failed()>
INTERFACE edge: $z0 = interfaceinvoke r0.<io.vertx.core.AsyncResult: boolean failed()>() in <io.vertx.core.Starter: void lambda$createLoggingHandler$2(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.SucceededFuture: boolean failed()>
INTERFACE edge: r8 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Throwable cause()>() in <io.vertx.core.Starter: void lambda$createLoggingHandler$2(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.FutureImpl: java.lang.Throwable cause()>
INTERFACE edge: r8 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Throwable cause()>() in <io.vertx.core.Starter: void lambda$createLoggingHandler$2(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.FailedFuture: java.lang.Throwable cause()>
INTERFACE edge: r8 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Throwable cause()>() in <io.vertx.core.Starter: void lambda$createLoggingHandler$2(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.AsyncResult$1: java.lang.Throwable cause()>
INTERFACE edge: r8 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Throwable cause()>() in <io.vertx.core.Starter: void lambda$createLoggingHandler$2(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.AsyncResult$2: java.lang.Throwable cause()>
INTERFACE edge: r8 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Throwable cause()>() in <io.vertx.core.Starter: void lambda$createLoggingHandler$2(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.CompositeFutureImpl: java.lang.Throwable cause()>
INTERFACE edge: r8 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Throwable cause()>() in <io.vertx.core.Starter: void lambda$createLoggingHandler$2(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.SucceededFuture: java.lang.Throwable cause()>
VIRTUAL edge: $r16 = virtualinvoke r14.<io.vertx.core.VertxException: java.lang.String getMessage()>() in <io.vertx.core.Starter: void lambda$createLoggingHandler$2(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <java.lang.Throwable: java.lang.String getMessage()>
VIRTUAL edge: $r17 = virtualinvoke r14.<io.vertx.core.VertxException: java.lang.Throwable getCause()>() in <io.vertx.core.Starter: void lambda$createLoggingHandler$2(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <java.lang.Throwable: java.lang.Throwable getCause()>
VIRTUAL edge: $r19 = virtualinvoke r14.<io.vertx.core.VertxException: java.lang.Throwable getCause()>() in <io.vertx.core.Starter: void lambda$createLoggingHandler$2(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <java.lang.Throwable: java.lang.Throwable getCause()>
VIRTUAL edge: virtualinvoke $r15.<io.vertx.core.logging.Logger: void error(java.lang.Object)>($r16) in <io.vertx.core.Starter: void lambda$createLoggingHandler$2(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.logging.Logger: void error(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r18.<io.vertx.core.logging.Logger: void error(java.lang.Object)>($r19) in <io.vertx.core.Starter: void lambda$createLoggingHandler$2(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.logging.Logger: void error(java.lang.Object)>
SPECIAL edge: specialinvoke $r9.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.Starter: void lambda$createLoggingHandler$2(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed in ") in <io.vertx.core.Starter: void lambda$createLoggingHandler$2(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) in <io.vertx.core.Starter: void lambda$createLoggingHandler$2(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.Starter: void lambda$createLoggingHandler$2(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r10.<io.vertx.core.logging.Logger: void error(java.lang.Object,java.lang.Throwable)>($r13, r8) in <io.vertx.core.Starter: void lambda$createLoggingHandler$2(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.logging.Logger: void error(java.lang.Object,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.Starter: void lambda$createLoggingHandler$2(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Succeeded in ") in <io.vertx.core.Starter: void lambda$createLoggingHandler$2(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) in <io.vertx.core.Starter: void lambda$createLoggingHandler$2(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.Starter: void lambda$createLoggingHandler$2(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r2.<io.vertx.core.logging.Logger: void info(java.lang.Object)>($r6) in <io.vertx.core.Starter: void lambda$createLoggingHandler$2(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.logging.Logger: void info(java.lang.Object)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.Starter: void lambda$createLoggingHandler$2(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.DeploymentManager$lambda_doDeployVerticle_2__17: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.Starter: void lambda$createLoggingHandler$2(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.Starter: void lambda$createLoggingHandler$2(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.FutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.Starter: void lambda$createLoggingHandler$2(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.Starter: void lambda$createLoggingHandler$2(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.SucceededFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.Starter: void lambda$createLoggingHandler$2(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.Starter: void lambda$createLoggingHandler$2(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.Starter: void lambda$createLoggingHandler$2(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.VertxImpl$lambda_joinCluster_1__10: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.Starter: void lambda$createLoggingHandler$2(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.Starter: void lambda$createLoggingHandler$2(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.Starter$lambda_runVerticle_1__1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.Starter: void lambda$createLoggingHandler$2(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.Starter: void lambda$createLoggingHandler$2(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.Starter: void lambda$createLoggingHandler$2(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.Starter: void lambda$createLoggingHandler$2(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.Starter$lambda_startVertx_0__2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.Starter: void lambda$createLoggingHandler$2(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.Starter: void lambda$createLoggingHandler$2(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.Starter: void lambda$createLoggingHandler$2(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_start_3__19: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.Starter: void lambda$createLoggingHandler$2(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.HAManager$lambda_doDeployVerticle_4__7: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.Starter: void lambda$createLoggingHandler$2(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_close_0__29: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.Starter: void lambda$createLoggingHandler$2(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.Starter: void lambda$createLoggingHandler$2(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.Starter: void lambda$createLoggingHandler$2(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.Starter: void lambda$createLoggingHandler$2(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.Starter$lambda_createLoggingHandler_2__3: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.Starter: void lambda$createLoggingHandler$2(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.CompositeFutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.Starter: void lambda$createLoggingHandler$2(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.Starter: void lambda$createLoggingHandler$2(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_finalize_6__18: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.Starter: void lambda$createLoggingHandler$2(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.Starter: void lambda$createLoggingHandler$2(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.VertxImpl$lambda_init_0__9: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.Starter: void lambda$createLoggingHandler$2(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.FailedFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.Starter: void lambda$createLoggingHandler$2(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.Starter: void lambda$createLoggingHandler$2(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_close_5__30: void handle(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.net.impl.VertxHandler$lambda_static_0__31: void <init>()>() in <io.vertx.core.net.impl.VertxHandler$lambda_static_0__31: io.vertx.core.Handler bootstrap$()> ==> <io.vertx.core.net.impl.VertxHandler$lambda_static_0__31: void <init>()>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.impl.HAManager: void setClusterViewChangedHandler(java.util.function.Consumer)>($r2) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void setClusterViewChangedHandler(io.vertx.core.impl.HAManager)> ==> <io.vertx.core.impl.HAManager: void setClusterViewChangedHandler(java.util.function.Consumer)>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_setClusterViewChangedHandler_12__32: void <init>(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus)>($r0) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_setClusterViewChangedHandler_12__32: java.util.function.Consumer bootstrap$(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_setClusterViewChangedHandler_12__32: void <init>(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus)>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.impl.SucceededFuture: void <init>(java.lang.Object)>(null) in <io.vertx.core.impl.FutureFactoryImpl: void <clinit>()> ==> <io.vertx.core.impl.SucceededFuture: void <init>(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_start_3__19: void <init>(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus,io.vertx.core.impl.HAManager,io.vertx.core.Handler)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.buffer.impl.BufferImpl: void <init>(byte[])> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.PemKeyCertOptionsConverter$lambda_toJson_4__23: void <init>(io.vertx.core.json.JsonArray)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.PemKeyCertOptionsConverter$lambda_toJson_7__20: void <init>(io.vertx.core.json.JsonArray)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.PemKeyCertOptionsConverter$lambda_toJson_6__21: void <init>(io.vertx.core.json.JsonArray)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.PemKeyCertOptionsConverter$lambda_toJson_5__22: void <init>(io.vertx.core.json.JsonArray)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.PemTrustOptionsConverter$lambda_toJson_2__25: void <init>(io.vertx.core.json.JsonArray)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.PemTrustOptionsConverter$lambda_toJson_3__24: void <init>(io.vertx.core.json.JsonArray)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.impl.ContextImpl: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.impl.WorkerPool,io.vertx.core.impl.WorkerPool,java.lang.String,io.vertx.core.json.JsonObject,java.lang.ClassLoader)>(r1, r2, r3, r4, r5, r6) in <io.vertx.core.impl.EventLoopContext: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.impl.WorkerPool,io.vertx.core.impl.WorkerPool,java.lang.String,io.vertx.core.json.JsonObject,java.lang.ClassLoader)> ==> <io.vertx.core.impl.ContextImpl: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.impl.WorkerPool,io.vertx.core.impl.WorkerPool,java.lang.String,io.vertx.core.json.JsonObject,java.lang.ClassLoader)>
CLINIT edge: $r2 = staticinvoke <io.vertx.core.impl.ContextImpl: io.netty.channel.EventLoop getEventLoop(io.vertx.core.impl.VertxInternal)>(r1) in <io.vertx.core.impl.ContextImpl: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.impl.WorkerPool,io.vertx.core.impl.WorkerPool,java.lang.String,io.vertx.core.json.JsonObject,java.lang.ClassLoader)> ==> <io.vertx.core.impl.ContextImpl: void <clinit>()>
STATIC edge: $r2 = staticinvoke <io.vertx.core.impl.ContextImpl: io.netty.channel.EventLoop getEventLoop(io.vertx.core.impl.VertxInternal)>(r1) in <io.vertx.core.impl.ContextImpl: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.impl.WorkerPool,io.vertx.core.impl.WorkerPool,java.lang.String,io.vertx.core.json.JsonObject,java.lang.ClassLoader)> ==> <io.vertx.core.impl.ContextImpl: io.netty.channel.EventLoop getEventLoop(io.vertx.core.impl.VertxInternal)>
SPECIAL edge: r2 = specialinvoke r0.<io.vertx.core.impl.CompositeFutureImpl: io.vertx.core.Handler setCompleted(java.lang.Throwable)>(r1) in <io.vertx.core.impl.CompositeFutureImpl: boolean tryFail(java.lang.Throwable)> ==> <io.vertx.core.impl.CompositeFutureImpl: io.vertx.core.Handler setCompleted(java.lang.Throwable)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: boolean tryFail(java.lang.Throwable)> ==> <io.vertx.core.impl.DeploymentManager$lambda_doDeployVerticle_2__17: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: boolean tryFail(java.lang.Throwable)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: boolean tryFail(java.lang.Throwable)> ==> <io.vertx.core.impl.FutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: boolean tryFail(java.lang.Throwable)> ==> <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: boolean tryFail(java.lang.Throwable)> ==> <io.vertx.core.impl.SucceededFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: boolean tryFail(java.lang.Throwable)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: boolean tryFail(java.lang.Throwable)> ==> <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: boolean tryFail(java.lang.Throwable)> ==> <io.vertx.core.impl.VertxImpl$lambda_joinCluster_1__10: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: boolean tryFail(java.lang.Throwable)> ==> <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: boolean tryFail(java.lang.Throwable)> ==> <io.vertx.core.Starter$lambda_runVerticle_1__1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: boolean tryFail(java.lang.Throwable)> ==> <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: boolean tryFail(java.lang.Throwable)> ==> <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: boolean tryFail(java.lang.Throwable)> ==> <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: boolean tryFail(java.lang.Throwable)> ==> <io.vertx.core.Starter$lambda_startVertx_0__2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: boolean tryFail(java.lang.Throwable)> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: boolean tryFail(java.lang.Throwable)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: boolean tryFail(java.lang.Throwable)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_start_3__19: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: boolean tryFail(java.lang.Throwable)> ==> <io.vertx.core.impl.HAManager$lambda_doDeployVerticle_4__7: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: boolean tryFail(java.lang.Throwable)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_close_0__29: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: boolean tryFail(java.lang.Throwable)> ==> <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: boolean tryFail(java.lang.Throwable)> ==> <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: boolean tryFail(java.lang.Throwable)> ==> <io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: boolean tryFail(java.lang.Throwable)> ==> <io.vertx.core.Starter$lambda_createLoggingHandler_2__3: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: boolean tryFail(java.lang.Throwable)> ==> <io.vertx.core.impl.CompositeFutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: boolean tryFail(java.lang.Throwable)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: boolean tryFail(java.lang.Throwable)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_finalize_6__18: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: boolean tryFail(java.lang.Throwable)> ==> <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: boolean tryFail(java.lang.Throwable)> ==> <io.vertx.core.impl.VertxImpl$lambda_init_0__9: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: boolean tryFail(java.lang.Throwable)> ==> <io.vertx.core.impl.FailedFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: boolean tryFail(java.lang.Throwable)> ==> <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: boolean tryFail(java.lang.Throwable)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_close_5__30: void handle(java.lang.Object)>
CLINIT edge: $r7 = <io.vertx.core.impl.CompositeFutureImpl: io.vertx.core.Handler NO_HANDLER> in <io.vertx.core.impl.CompositeFutureImpl: io.vertx.core.Handler setCompleted(java.lang.Throwable)> ==> <io.vertx.core.impl.CompositeFutureImpl: void <clinit>()>
CLINIT edge: <io.vertx.core.impl.CompositeFutureImpl: io.vertx.core.Handler NO_HANDLER> = $r0 in <io.vertx.core.impl.CompositeFutureImpl: void <clinit>()> ==> <io.vertx.core.impl.CompositeFutureImpl: void <clinit>()>
STATIC edge: $r1 = staticinvoke <io.vertx.core.impl.CompositeFutureImpl$lambda_static_3__45: java.util.function.Function bootstrap$()>() in <io.vertx.core.impl.CompositeFutureImpl: void <clinit>()> ==> <io.vertx.core.impl.CompositeFutureImpl$lambda_static_3__45: java.util.function.Function bootstrap$()>
STATIC edge: $r0 = staticinvoke <io.vertx.core.impl.CompositeFutureImpl$lambda_static_0__44: io.vertx.core.Handler bootstrap$()>() in <io.vertx.core.impl.CompositeFutureImpl: void <clinit>()> ==> <io.vertx.core.impl.CompositeFutureImpl$lambda_static_0__44: io.vertx.core.Handler bootstrap$()>
SPECIAL edge: specialinvoke $r9.<io.vertx.core.impl.NoStackTraceThrowable: void <init>(java.lang.String)>(null) in <io.vertx.core.impl.FutureImpl: boolean tryFail(java.lang.Throwable)> ==> <io.vertx.core.impl.NoStackTraceThrowable: void <init>(java.lang.String)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: boolean tryFail(java.lang.Throwable)> ==> <io.vertx.core.impl.DeploymentManager$lambda_doDeployVerticle_2__17: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: boolean tryFail(java.lang.Throwable)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: boolean tryFail(java.lang.Throwable)> ==> <io.vertx.core.impl.FutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: boolean tryFail(java.lang.Throwable)> ==> <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: boolean tryFail(java.lang.Throwable)> ==> <io.vertx.core.impl.SucceededFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: boolean tryFail(java.lang.Throwable)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: boolean tryFail(java.lang.Throwable)> ==> <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: boolean tryFail(java.lang.Throwable)> ==> <io.vertx.core.impl.VertxImpl$lambda_joinCluster_1__10: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: boolean tryFail(java.lang.Throwable)> ==> <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: boolean tryFail(java.lang.Throwable)> ==> <io.vertx.core.Starter$lambda_runVerticle_1__1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: boolean tryFail(java.lang.Throwable)> ==> <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: boolean tryFail(java.lang.Throwable)> ==> <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: boolean tryFail(java.lang.Throwable)> ==> <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: boolean tryFail(java.lang.Throwable)> ==> <io.vertx.core.Starter$lambda_startVertx_0__2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: boolean tryFail(java.lang.Throwable)> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: boolean tryFail(java.lang.Throwable)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: boolean tryFail(java.lang.Throwable)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_start_3__19: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: boolean tryFail(java.lang.Throwable)> ==> <io.vertx.core.impl.HAManager$lambda_doDeployVerticle_4__7: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: boolean tryFail(java.lang.Throwable)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_close_0__29: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: boolean tryFail(java.lang.Throwable)> ==> <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: boolean tryFail(java.lang.Throwable)> ==> <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: boolean tryFail(java.lang.Throwable)> ==> <io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: boolean tryFail(java.lang.Throwable)> ==> <io.vertx.core.Starter$lambda_createLoggingHandler_2__3: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: boolean tryFail(java.lang.Throwable)> ==> <io.vertx.core.impl.CompositeFutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: boolean tryFail(java.lang.Throwable)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: boolean tryFail(java.lang.Throwable)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_finalize_6__18: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: boolean tryFail(java.lang.Throwable)> ==> <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: boolean tryFail(java.lang.Throwable)> ==> <io.vertx.core.impl.VertxImpl$lambda_init_0__9: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: boolean tryFail(java.lang.Throwable)> ==> <io.vertx.core.impl.FailedFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: boolean tryFail(java.lang.Throwable)> ==> <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: boolean tryFail(java.lang.Throwable)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_close_5__30: void handle(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<io.vertx.core.impl.CompositeFutureImpl: boolean tryComplete(io.vertx.core.CompositeFuture)>(r1) in <io.vertx.core.impl.CompositeFutureImpl: void complete(io.vertx.core.CompositeFuture)> ==> <io.vertx.core.impl.CompositeFutureImpl: boolean tryComplete(io.vertx.core.CompositeFuture)>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.impl.CompositeFutureImpl: void complete(io.vertx.core.CompositeFuture)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Result is already complete: ") in <io.vertx.core.impl.CompositeFutureImpl: void complete(io.vertx.core.CompositeFuture)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8) in <io.vertx.core.impl.CompositeFutureImpl: void complete(io.vertx.core.CompositeFuture)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.impl.CompositeFutureImpl: void complete(io.vertx.core.CompositeFuture)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7) in <io.vertx.core.impl.CompositeFutureImpl: void complete(io.vertx.core.CompositeFuture)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: boolean tryComplete(java.lang.Object)> ==> <io.vertx.core.impl.DeploymentManager$lambda_doDeployVerticle_2__17: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: boolean tryComplete(java.lang.Object)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: boolean tryComplete(java.lang.Object)> ==> <io.vertx.core.impl.FutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: boolean tryComplete(java.lang.Object)> ==> <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: boolean tryComplete(java.lang.Object)> ==> <io.vertx.core.impl.SucceededFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: boolean tryComplete(java.lang.Object)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: boolean tryComplete(java.lang.Object)> ==> <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: boolean tryComplete(java.lang.Object)> ==> <io.vertx.core.impl.VertxImpl$lambda_joinCluster_1__10: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: boolean tryComplete(java.lang.Object)> ==> <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: boolean tryComplete(java.lang.Object)> ==> <io.vertx.core.Starter$lambda_runVerticle_1__1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: boolean tryComplete(java.lang.Object)> ==> <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: boolean tryComplete(java.lang.Object)> ==> <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: boolean tryComplete(java.lang.Object)> ==> <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: boolean tryComplete(java.lang.Object)> ==> <io.vertx.core.Starter$lambda_startVertx_0__2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: boolean tryComplete(java.lang.Object)> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: boolean tryComplete(java.lang.Object)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: boolean tryComplete(java.lang.Object)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_start_3__19: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: boolean tryComplete(java.lang.Object)> ==> <io.vertx.core.impl.HAManager$lambda_doDeployVerticle_4__7: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: boolean tryComplete(java.lang.Object)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_close_0__29: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: boolean tryComplete(java.lang.Object)> ==> <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: boolean tryComplete(java.lang.Object)> ==> <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: boolean tryComplete(java.lang.Object)> ==> <io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: boolean tryComplete(java.lang.Object)> ==> <io.vertx.core.Starter$lambda_createLoggingHandler_2__3: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: boolean tryComplete(java.lang.Object)> ==> <io.vertx.core.impl.CompositeFutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: boolean tryComplete(java.lang.Object)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: boolean tryComplete(java.lang.Object)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_finalize_6__18: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: boolean tryComplete(java.lang.Object)> ==> <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: boolean tryComplete(java.lang.Object)> ==> <io.vertx.core.impl.VertxImpl$lambda_init_0__9: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: boolean tryComplete(java.lang.Object)> ==> <io.vertx.core.impl.FailedFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: boolean tryComplete(java.lang.Object)> ==> <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.FutureImpl: boolean tryComplete(java.lang.Object)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_close_5__30: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: io.vertx.core.CompositeFuture setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.impl.DeploymentManager$lambda_doDeployVerticle_2__17: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: io.vertx.core.CompositeFuture setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: io.vertx.core.CompositeFuture setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.impl.FutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: io.vertx.core.CompositeFuture setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: io.vertx.core.CompositeFuture setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.impl.SucceededFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: io.vertx.core.CompositeFuture setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: io.vertx.core.CompositeFuture setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: io.vertx.core.CompositeFuture setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl$lambda_joinCluster_1__10: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: io.vertx.core.CompositeFuture setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: io.vertx.core.CompositeFuture setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.Starter$lambda_runVerticle_1__1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: io.vertx.core.CompositeFuture setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: io.vertx.core.CompositeFuture setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: io.vertx.core.CompositeFuture setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: io.vertx.core.CompositeFuture setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.Starter$lambda_startVertx_0__2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: io.vertx.core.CompositeFuture setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: io.vertx.core.CompositeFuture setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: io.vertx.core.CompositeFuture setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_start_3__19: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: io.vertx.core.CompositeFuture setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.impl.HAManager$lambda_doDeployVerticle_4__7: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: io.vertx.core.CompositeFuture setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_close_0__29: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: io.vertx.core.CompositeFuture setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: io.vertx.core.CompositeFuture setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: io.vertx.core.CompositeFuture setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: io.vertx.core.CompositeFuture setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.Starter$lambda_createLoggingHandler_2__3: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: io.vertx.core.CompositeFuture setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.impl.CompositeFutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: io.vertx.core.CompositeFuture setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: io.vertx.core.CompositeFuture setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_finalize_6__18: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: io.vertx.core.CompositeFuture setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: io.vertx.core.CompositeFuture setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl$lambda_init_0__9: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: io.vertx.core.CompositeFuture setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.impl.FailedFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: io.vertx.core.CompositeFuture setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: io.vertx.core.CompositeFuture setHandler(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_close_5__30: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Context: void runOnContext(io.vertx.core.Handler)>($r3) in <io.vertx.core.impl.DeploymentManager: void reportResult(io.vertx.core.Context,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.ContextImpl: void runOnContext(io.vertx.core.Handler)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Context: void runOnContext(io.vertx.core.Handler)>($r3) in <io.vertx.core.impl.DeploymentManager: void reportResult(io.vertx.core.Context,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.EventLoopContext: void runOnContext(io.vertx.core.Handler)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.spi.logging.LogDelegate: void error(java.lang.Object,java.lang.Throwable)>(r1, r2) in <io.vertx.core.logging.Logger: void error(java.lang.Object,java.lang.Throwable)> ==> <io.vertx.core.logging.Log4jLogDelegate: void error(java.lang.Object,java.lang.Throwable)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.spi.logging.LogDelegate: void error(java.lang.Object,java.lang.Throwable)>(r1, r2) in <io.vertx.core.logging.Logger: void error(java.lang.Object,java.lang.Throwable)> ==> <io.vertx.core.logging.SLF4JLogDelegate: void error(java.lang.Object,java.lang.Throwable)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.spi.logging.LogDelegate: void error(java.lang.Object,java.lang.Throwable)>(r1, r2) in <io.vertx.core.logging.Logger: void error(java.lang.Object,java.lang.Throwable)> ==> <io.vertx.core.logging.JULLogDelegate: void error(java.lang.Object,java.lang.Throwable)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.spi.logging.LogDelegate: void error(java.lang.Object,java.lang.Throwable)>(r1, r2) in <io.vertx.core.logging.Logger: void error(java.lang.Object,java.lang.Throwable)> ==> <io.vertx.core.logging.Log4j2LogDelegate: void error(java.lang.Object,java.lang.Throwable)>
CLINIT edge: $r3 = <java.util.logging.Level: java.util.logging.Level SEVERE> in <io.vertx.core.logging.JULLogDelegate: void error(java.lang.Object,java.lang.Throwable)> ==> <java.util.logging.Level: void <clinit>()>
SPECIAL edge: specialinvoke $r2.<io.vertx.core.impl.DeploymentManager$lambda_reportResult_6__33: void <init>(io.vertx.core.Handler,io.vertx.core.AsyncResult)>($r0, $r1) in <io.vertx.core.impl.DeploymentManager$lambda_reportResult_6__33: io.vertx.core.Handler bootstrap$(io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.DeploymentManager$lambda_reportResult_6__33: void <init>(io.vertx.core.Handler,io.vertx.core.AsyncResult)>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.impl.FailedFuture: void <init>(java.lang.Throwable)>(r1) in <io.vertx.core.impl.FutureFactoryImpl: io.vertx.core.Future failedFuture(java.lang.Throwable)> ==> <io.vertx.core.impl.FailedFuture: void <init>(java.lang.Throwable)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.impl.FutureImpl: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.Runnable)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.Runnable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.file.impl.FileResolver$lambda_setupCacheDir_1__26: void <init>(io.vertx.core.file.impl.FileResolver)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.impl.JavaVerticleFactory: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.impl.DeploymentManager$registerVerticleFactory__27: void <init>(io.vertx.core.impl.DeploymentManager)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $b2 = interfaceinvoke r3.<io.vertx.core.eventbus.MessageCodec: byte systemCodecID()>() in <io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec[] codecs(io.vertx.core.eventbus.MessageCodec[])> ==> <io.vertx.core.eventbus.impl.codecs.PingMessageCodec: byte systemCodecID()>
INTERFACE edge: $b2 = interfaceinvoke r3.<io.vertx.core.eventbus.MessageCodec: byte systemCodecID()>() in <io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec[] codecs(io.vertx.core.eventbus.MessageCodec[])> ==> <io.vertx.core.eventbus.impl.codecs.IntMessageCodec: byte systemCodecID()>
INTERFACE edge: $b2 = interfaceinvoke r3.<io.vertx.core.eventbus.MessageCodec: byte systemCodecID()>() in <io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec[] codecs(io.vertx.core.eventbus.MessageCodec[])> ==> <io.vertx.core.eventbus.impl.codecs.ShortMessageCodec: byte systemCodecID()>
INTERFACE edge: $b2 = interfaceinvoke r3.<io.vertx.core.eventbus.MessageCodec: byte systemCodecID()>() in <io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec[] codecs(io.vertx.core.eventbus.MessageCodec[])> ==> <io.vertx.core.eventbus.impl.codecs.ByteArrayMessageCodec: byte systemCodecID()>
INTERFACE edge: $b2 = interfaceinvoke r3.<io.vertx.core.eventbus.MessageCodec: byte systemCodecID()>() in <io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec[] codecs(io.vertx.core.eventbus.MessageCodec[])> ==> <io.vertx.core.eventbus.impl.codecs.NullMessageCodec: byte systemCodecID()>
INTERFACE edge: $b2 = interfaceinvoke r3.<io.vertx.core.eventbus.MessageCodec: byte systemCodecID()>() in <io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec[] codecs(io.vertx.core.eventbus.MessageCodec[])> ==> <io.vertx.core.eventbus.impl.codecs.StringMessageCodec: byte systemCodecID()>
INTERFACE edge: $b2 = interfaceinvoke r3.<io.vertx.core.eventbus.MessageCodec: byte systemCodecID()>() in <io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec[] codecs(io.vertx.core.eventbus.MessageCodec[])> ==> <io.vertx.core.eventbus.impl.codecs.JsonObjectMessageCodec: byte systemCodecID()>
INTERFACE edge: $b2 = interfaceinvoke r3.<io.vertx.core.eventbus.MessageCodec: byte systemCodecID()>() in <io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec[] codecs(io.vertx.core.eventbus.MessageCodec[])> ==> <io.vertx.core.eventbus.impl.codecs.ReplyExceptionMessageCodec: byte systemCodecID()>
INTERFACE edge: $b2 = interfaceinvoke r3.<io.vertx.core.eventbus.MessageCodec: byte systemCodecID()>() in <io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec[] codecs(io.vertx.core.eventbus.MessageCodec[])> ==> <io.vertx.core.eventbus.impl.codecs.JsonArrayMessageCodec: byte systemCodecID()>
INTERFACE edge: $b2 = interfaceinvoke r3.<io.vertx.core.eventbus.MessageCodec: byte systemCodecID()>() in <io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec[] codecs(io.vertx.core.eventbus.MessageCodec[])> ==> <io.vertx.core.eventbus.impl.codecs.BufferMessageCodec: byte systemCodecID()>
INTERFACE edge: $b2 = interfaceinvoke r3.<io.vertx.core.eventbus.MessageCodec: byte systemCodecID()>() in <io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec[] codecs(io.vertx.core.eventbus.MessageCodec[])> ==> <io.vertx.core.eventbus.impl.codecs.DoubleMessageCodec: byte systemCodecID()>
INTERFACE edge: $b2 = interfaceinvoke r3.<io.vertx.core.eventbus.MessageCodec: byte systemCodecID()>() in <io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec[] codecs(io.vertx.core.eventbus.MessageCodec[])> ==> <io.vertx.core.eventbus.impl.codecs.FloatMessageCodec: byte systemCodecID()>
INTERFACE edge: $b2 = interfaceinvoke r3.<io.vertx.core.eventbus.MessageCodec: byte systemCodecID()>() in <io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec[] codecs(io.vertx.core.eventbus.MessageCodec[])> ==> <io.vertx.core.eventbus.impl.codecs.BooleanMessageCodec: byte systemCodecID()>
INTERFACE edge: $b2 = interfaceinvoke r3.<io.vertx.core.eventbus.MessageCodec: byte systemCodecID()>() in <io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec[] codecs(io.vertx.core.eventbus.MessageCodec[])> ==> <io.vertx.core.eventbus.impl.codecs.CharMessageCodec: byte systemCodecID()>
INTERFACE edge: $b2 = interfaceinvoke r3.<io.vertx.core.eventbus.MessageCodec: byte systemCodecID()>() in <io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec[] codecs(io.vertx.core.eventbus.MessageCodec[])> ==> <io.vertx.core.eventbus.impl.codecs.ByteMessageCodec: byte systemCodecID()>
INTERFACE edge: $b2 = interfaceinvoke r3.<io.vertx.core.eventbus.MessageCodec: byte systemCodecID()>() in <io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec[] codecs(io.vertx.core.eventbus.MessageCodec[])> ==> <io.vertx.core.eventbus.impl.codecs.LongMessageCodec: byte systemCodecID()>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1) in <io.vertx.core.VertxException: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<io.vertx.core.file.impl.FileResolver: java.io.File resolveFile(java.lang.String)>(r1) in <io.vertx.core.impl.VertxImpl: java.io.File resolveFile(java.lang.String)> ==> <io.vertx.core.file.impl.FileResolver: java.io.File resolveFile(java.lang.String)>
CLINIT edge: $r0 = new java.io.File in <io.vertx.core.file.impl.FileResolver: java.io.File resolveFile(java.lang.String)> ==> <java.io.File: void <clinit>()>
CLINIT edge: $z2 = <io.vertx.core.file.impl.FileResolver: boolean NON_UNIX_FILE_SEP> in <io.vertx.core.file.impl.FileResolver: java.io.File resolveFile(java.lang.String)> ==> <io.vertx.core.file.impl.FileResolver: void <clinit>()>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>(java.lang.String)>(r1) in <io.vertx.core.VertxException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<io.netty.resolver.AddressResolverGroup: void <init>()>() in <io.vertx.core.impl.resolver.DnsResolverProvider$1: void <init>(io.vertx.core.impl.resolver.DnsResolverProvider,io.vertx.core.impl.VertxImpl,io.netty.resolver.dns.DnsServerAddressStreamProvider,io.netty.resolver.HostsFileEntries,io.vertx.core.dns.AddressResolverOptions,io.netty.resolver.dns.DnsCache,io.netty.resolver.dns.DnsCache)> ==> <io.netty.resolver.AddressResolverGroup: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.impl.resolver.DnsResolverProvider$lambda_new_0__28: void <init>(io.netty.resolver.dns.DnsServerAddresses)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Event Bus is not started") in <io.vertx.core.eventbus.impl.EventBusImpl: void checkStarted()> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.concurrent.ConcurrentMap: java.util.Collection values()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void unregisterAll()> ==> <java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void unregisterAll()> ==> <io.vertx.core.impl.ConcurrentHashSet: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void unregisterAll()> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void unregisterAll()> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void unregisterAll()> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void unregisterAll()> ==> <java.util.AbstractList: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void unregisterAll()> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void unregisterAll()> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$1: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void unregisterAll()> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void unregisterAll()> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void unregisterAll()> ==> <java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void unregisterAll()> ==> <java.util.concurrent.ConcurrentLinkedQueue: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void unregisterAll()> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void unregisterAll()> ==> <io.vertx.core.json.JsonArray$Iter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void unregisterAll()> ==> <io.vertx.core.json.JsonObject$Iter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void unregisterAll()> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void unregisterAll()> ==> <java.util.Scanner: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void unregisterAll()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void unregisterAll()> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: boolean hasNext()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void unregisterAll()> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object next()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void unregisterAll()> ==> <io.vertx.core.json.JsonArray$Iter: java.lang.Object next()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void unregisterAll()> ==> <io.vertx.core.json.JsonObject$Iter: java.lang.Object next()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void unregisterAll()> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: java.lang.Object next()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void unregisterAll()> ==> <java.util.Scanner: java.lang.Object next()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void unregisterAll()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: java.lang.Object next()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void unregisterAll()> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: java.lang.Object next()>
VIRTUAL edge: r6 = virtualinvoke r5.<io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.util.Iterator iterator()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void unregisterAll()> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.util.Iterator iterator()>
INTERFACE edge: $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void unregisterAll()> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void unregisterAll()> ==> <io.vertx.core.json.JsonArray$Iter: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void unregisterAll()> ==> <io.vertx.core.json.JsonObject$Iter: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void unregisterAll()> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void unregisterAll()> ==> <java.util.Scanner: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void unregisterAll()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void unregisterAll()> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: boolean hasNext()>
INTERFACE edge: $r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void unregisterAll()> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object next()>
INTERFACE edge: $r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void unregisterAll()> ==> <io.vertx.core.json.JsonArray$Iter: java.lang.Object next()>
INTERFACE edge: $r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void unregisterAll()> ==> <io.vertx.core.json.JsonObject$Iter: java.lang.Object next()>
INTERFACE edge: $r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void unregisterAll()> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: java.lang.Object next()>
INTERFACE edge: $r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void unregisterAll()> ==> <java.util.Scanner: java.lang.Object next()>
INTERFACE edge: $r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void unregisterAll()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: java.lang.Object next()>
INTERFACE edge: $r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void unregisterAll()> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: java.lang.Object next()>
VIRTUAL edge: $r9 = virtualinvoke r8.<io.vertx.core.eventbus.impl.HandlerHolder: io.vertx.core.eventbus.impl.HandlerRegistration getHandler()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void unregisterAll()> ==> <io.vertx.core.eventbus.impl.HandlerHolder: io.vertx.core.eventbus.impl.HandlerRegistration getHandler()>
VIRTUAL edge: virtualinvoke $r9.<io.vertx.core.eventbus.impl.HandlerRegistration: void unregister()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void unregisterAll()> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void unregister()>
STATIC edge: $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2) in <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.util.Iterator iterator()> ==> <java.util.Arrays: java.util.List asList(java.lang.Object[])>
VIRTUAL edge: r1 = virtualinvoke r0.<io.vertx.core.impl.VertxImpl: io.vertx.core.impl.ContextImpl getOrCreateContext()>() in <io.vertx.core.impl.VertxImpl: void runOnContext(io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.ContextImpl getOrCreateContext()>
VIRTUAL edge: virtualinvoke r1.<io.vertx.core.impl.ContextImpl: void runOnContext(io.vertx.core.Handler)>(r2) in <io.vertx.core.impl.VertxImpl: void runOnContext(io.vertx.core.Handler)> ==> <io.vertx.core.impl.ContextImpl: void runOnContext(io.vertx.core.Handler)>
VIRTUAL edge: virtualinvoke r1.<io.vertx.core.impl.ContextImpl: void runOnContext(io.vertx.core.Handler)>(r2) in <io.vertx.core.impl.VertxImpl: void runOnContext(io.vertx.core.Handler)> ==> <io.vertx.core.impl.EventLoopContext: void runOnContext(io.vertx.core.Handler)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.eventbus.impl.EventBusImpl$lambda_close_0__29: void <init>(io.vertx.core.Handler)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_close_5__30: void <init>(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus,io.vertx.core.Handler)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke r0.<io.vertx.core.AsyncResult: boolean succeeded()>() in <io.vertx.core.impl.DeploymentManager: void lambda$doDeployVerticle$2(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.spi.VerticleFactory,java.lang.ClassLoader,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.util.Iterator,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.FutureImpl: boolean succeeded()>
INTERFACE edge: $z0 = interfaceinvoke r0.<io.vertx.core.AsyncResult: boolean succeeded()>() in <io.vertx.core.impl.DeploymentManager: void lambda$doDeployVerticle$2(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.spi.VerticleFactory,java.lang.ClassLoader,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.util.Iterator,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.FailedFuture: boolean succeeded()>
INTERFACE edge: $z0 = interfaceinvoke r0.<io.vertx.core.AsyncResult: boolean succeeded()>() in <io.vertx.core.impl.DeploymentManager: void lambda$doDeployVerticle$2(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.spi.VerticleFactory,java.lang.ClassLoader,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.util.Iterator,io.vertx.core.AsyncResult)> ==> <io.vertx.core.AsyncResult$1: boolean succeeded()>
INTERFACE edge: $z0 = interfaceinvoke r0.<io.vertx.core.AsyncResult: boolean succeeded()>() in <io.vertx.core.impl.DeploymentManager: void lambda$doDeployVerticle$2(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.spi.VerticleFactory,java.lang.ClassLoader,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.util.Iterator,io.vertx.core.AsyncResult)> ==> <io.vertx.core.AsyncResult$2: boolean succeeded()>
INTERFACE edge: $z0 = interfaceinvoke r0.<io.vertx.core.AsyncResult: boolean succeeded()>() in <io.vertx.core.impl.DeploymentManager: void lambda$doDeployVerticle$2(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.spi.VerticleFactory,java.lang.ClassLoader,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.util.Iterator,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.CompositeFutureImpl: boolean succeeded()>
INTERFACE edge: $z0 = interfaceinvoke r0.<io.vertx.core.AsyncResult: boolean succeeded()>() in <io.vertx.core.impl.DeploymentManager: void lambda$doDeployVerticle$2(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.spi.VerticleFactory,java.lang.ClassLoader,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.util.Iterator,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.SucceededFuture: boolean succeeded()>
INTERFACE edge: $r9 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Object result()>() in <io.vertx.core.impl.DeploymentManager: void lambda$doDeployVerticle$2(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.spi.VerticleFactory,java.lang.ClassLoader,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.util.Iterator,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.FutureImpl: java.lang.Object result()>
INTERFACE edge: $r9 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Object result()>() in <io.vertx.core.impl.DeploymentManager: void lambda$doDeployVerticle$2(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.spi.VerticleFactory,java.lang.ClassLoader,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.util.Iterator,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.FailedFuture: java.lang.Object result()>
INTERFACE edge: $r9 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Object result()>() in <io.vertx.core.impl.DeploymentManager: void lambda$doDeployVerticle$2(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.spi.VerticleFactory,java.lang.ClassLoader,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.util.Iterator,io.vertx.core.AsyncResult)> ==> <io.vertx.core.AsyncResult$1: java.lang.Object result()>
INTERFACE edge: $r9 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Object result()>() in <io.vertx.core.impl.DeploymentManager: void lambda$doDeployVerticle$2(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.spi.VerticleFactory,java.lang.ClassLoader,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.util.Iterator,io.vertx.core.AsyncResult)> ==> <io.vertx.core.AsyncResult$2: java.lang.Object result()>
INTERFACE edge: $r9 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Object result()>() in <io.vertx.core.impl.DeploymentManager: void lambda$doDeployVerticle$2(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.spi.VerticleFactory,java.lang.ClassLoader,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.util.Iterator,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.CompositeFutureImpl: java.lang.Object result()>
INTERFACE edge: $r9 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Object result()>() in <io.vertx.core.impl.DeploymentManager: void lambda$doDeployVerticle$2(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.spi.VerticleFactory,java.lang.ClassLoader,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.util.Iterator,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.SucceededFuture: java.lang.Object result()>
INTERFACE edge: r21 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Throwable cause()>() in <io.vertx.core.impl.DeploymentManager: void lambda$doDeployVerticle$2(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.spi.VerticleFactory,java.lang.ClassLoader,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.util.Iterator,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.FutureImpl: java.lang.Throwable cause()>
INTERFACE edge: r21 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Throwable cause()>() in <io.vertx.core.impl.DeploymentManager: void lambda$doDeployVerticle$2(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.spi.VerticleFactory,java.lang.ClassLoader,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.util.Iterator,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.FailedFuture: java.lang.Throwable cause()>
INTERFACE edge: r21 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Throwable cause()>() in <io.vertx.core.impl.DeploymentManager: void lambda$doDeployVerticle$2(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.spi.VerticleFactory,java.lang.ClassLoader,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.util.Iterator,io.vertx.core.AsyncResult)> ==> <io.vertx.core.AsyncResult$1: java.lang.Throwable cause()>
INTERFACE edge: r21 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Throwable cause()>() in <io.vertx.core.impl.DeploymentManager: void lambda$doDeployVerticle$2(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.spi.VerticleFactory,java.lang.ClassLoader,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.util.Iterator,io.vertx.core.AsyncResult)> ==> <io.vertx.core.AsyncResult$2: java.lang.Throwable cause()>
INTERFACE edge: r21 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Throwable cause()>() in <io.vertx.core.impl.DeploymentManager: void lambda$doDeployVerticle$2(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.spi.VerticleFactory,java.lang.ClassLoader,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.util.Iterator,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.CompositeFutureImpl: java.lang.Throwable cause()>
INTERFACE edge: r21 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Throwable cause()>() in <io.vertx.core.impl.DeploymentManager: void lambda$doDeployVerticle$2(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.spi.VerticleFactory,java.lang.ClassLoader,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.util.Iterator,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.SucceededFuture: java.lang.Throwable cause()>
VIRTUAL edge: $z1 = virtualinvoke r10.<java.lang.String: boolean equals(java.lang.Object)>(r3) in <io.vertx.core.impl.DeploymentManager: void lambda$doDeployVerticle$2(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.spi.VerticleFactory,java.lang.ClassLoader,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.util.Iterator,io.vertx.core.AsyncResult)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke r1.<io.vertx.core.impl.DeploymentManager: void deployVerticle(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)>(r10, r4, r8) in <io.vertx.core.impl.DeploymentManager: void lambda$doDeployVerticle$2(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.spi.VerticleFactory,java.lang.ClassLoader,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.util.Iterator,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.DeploymentManager: void deployVerticle(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)>
SPECIAL edge: r19 = specialinvoke r1.<io.vertx.core.impl.DeploymentManager: io.vertx.core.Verticle[] createVerticles(io.vertx.core.spi.VerticleFactory,java.lang.String,int,java.lang.ClassLoader)>(r11, r3, $i0, r7) in <io.vertx.core.impl.DeploymentManager: void lambda$doDeployVerticle$2(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.spi.VerticleFactory,java.lang.ClassLoader,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.util.Iterator,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.DeploymentManager: io.vertx.core.Verticle[] createVerticles(io.vertx.core.spi.VerticleFactory,java.lang.String,int,java.lang.ClassLoader)>
SPECIAL edge: specialinvoke r1.<io.vertx.core.impl.DeploymentManager: void doDeploy(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,java.lang.ClassLoader,io.vertx.core.Verticle[])>(r3, r4, r5, r6, r8, r7, r19) in <io.vertx.core.impl.DeploymentManager: void lambda$doDeployVerticle$2(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.spi.VerticleFactory,java.lang.ClassLoader,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.util.Iterator,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.DeploymentManager: void doDeploy(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,java.lang.ClassLoader,io.vertx.core.Verticle[])>
SPECIAL edge: specialinvoke r1.<io.vertx.core.impl.DeploymentManager: void doDeployVerticle(java.util.Iterator,java.lang.Throwable,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.lang.ClassLoader,io.vertx.core.Handler)>(r2, r21, r3, r4, r5, r6, r7, r8) in <io.vertx.core.impl.DeploymentManager: void lambda$doDeployVerticle$2(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.spi.VerticleFactory,java.lang.ClassLoader,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.util.Iterator,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.DeploymentManager: void doDeployVerticle(java.util.Iterator,java.lang.Throwable,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.lang.ClassLoader,io.vertx.core.Handler)>
INTERFACE edge: interfaceinvoke r8.<io.vertx.core.Handler: void handle(java.lang.Object)>($r17) in <io.vertx.core.impl.DeploymentManager: void lambda$doDeployVerticle$2(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.spi.VerticleFactory,java.lang.ClassLoader,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.util.Iterator,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.DeploymentManager$lambda_doDeployVerticle_2__17: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<io.vertx.core.Handler: void handle(java.lang.Object)>($r17) in <io.vertx.core.impl.DeploymentManager: void lambda$doDeployVerticle$2(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.spi.VerticleFactory,java.lang.ClassLoader,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.util.Iterator,io.vertx.core.AsyncResult)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<io.vertx.core.Handler: void handle(java.lang.Object)>($r17) in <io.vertx.core.impl.DeploymentManager: void lambda$doDeployVerticle$2(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.spi.VerticleFactory,java.lang.ClassLoader,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.util.Iterator,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.FutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<io.vertx.core.Handler: void handle(java.lang.Object)>($r17) in <io.vertx.core.impl.DeploymentManager: void lambda$doDeployVerticle$2(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.spi.VerticleFactory,java.lang.ClassLoader,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.util.Iterator,io.vertx.core.AsyncResult)> ==> <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<io.vertx.core.Handler: void handle(java.lang.Object)>($r17) in <io.vertx.core.impl.DeploymentManager: void lambda$doDeployVerticle$2(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.spi.VerticleFactory,java.lang.ClassLoader,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.util.Iterator,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.SucceededFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<io.vertx.core.Handler: void handle(java.lang.Object)>($r17) in <io.vertx.core.impl.DeploymentManager: void lambda$doDeployVerticle$2(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.spi.VerticleFactory,java.lang.ClassLoader,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.util.Iterator,io.vertx.core.AsyncResult)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<io.vertx.core.Handler: void handle(java.lang.Object)>($r17) in <io.vertx.core.impl.DeploymentManager: void lambda$doDeployVerticle$2(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.spi.VerticleFactory,java.lang.ClassLoader,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.util.Iterator,io.vertx.core.AsyncResult)> ==> <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<io.vertx.core.Handler: void handle(java.lang.Object)>($r17) in <io.vertx.core.impl.DeploymentManager: void lambda$doDeployVerticle$2(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.spi.VerticleFactory,java.lang.ClassLoader,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.util.Iterator,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.VertxImpl$lambda_joinCluster_1__10: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<io.vertx.core.Handler: void handle(java.lang.Object)>($r17) in <io.vertx.core.impl.DeploymentManager: void lambda$doDeployVerticle$2(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.spi.VerticleFactory,java.lang.ClassLoader,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.util.Iterator,io.vertx.core.AsyncResult)> ==> <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<io.vertx.core.Handler: void handle(java.lang.Object)>($r17) in <io.vertx.core.impl.DeploymentManager: void lambda$doDeployVerticle$2(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.spi.VerticleFactory,java.lang.ClassLoader,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.util.Iterator,io.vertx.core.AsyncResult)> ==> <io.vertx.core.Starter$lambda_runVerticle_1__1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<io.vertx.core.Handler: void handle(java.lang.Object)>($r17) in <io.vertx.core.impl.DeploymentManager: void lambda$doDeployVerticle$2(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.spi.VerticleFactory,java.lang.ClassLoader,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.util.Iterator,io.vertx.core.AsyncResult)> ==> <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<io.vertx.core.Handler: void handle(java.lang.Object)>($r17) in <io.vertx.core.impl.DeploymentManager: void lambda$doDeployVerticle$2(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.spi.VerticleFactory,java.lang.ClassLoader,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.util.Iterator,io.vertx.core.AsyncResult)> ==> <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<io.vertx.core.Handler: void handle(java.lang.Object)>($r17) in <io.vertx.core.impl.DeploymentManager: void lambda$doDeployVerticle$2(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.spi.VerticleFactory,java.lang.ClassLoader,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.util.Iterator,io.vertx.core.AsyncResult)> ==> <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<io.vertx.core.Handler: void handle(java.lang.Object)>($r17) in <io.vertx.core.impl.DeploymentManager: void lambda$doDeployVerticle$2(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.spi.VerticleFactory,java.lang.ClassLoader,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.util.Iterator,io.vertx.core.AsyncResult)> ==> <io.vertx.core.Starter$lambda_startVertx_0__2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<io.vertx.core.Handler: void handle(java.lang.Object)>($r17) in <io.vertx.core.impl.DeploymentManager: void lambda$doDeployVerticle$2(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.spi.VerticleFactory,java.lang.ClassLoader,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.util.Iterator,io.vertx.core.AsyncResult)> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<io.vertx.core.Handler: void handle(java.lang.Object)>($r17) in <io.vertx.core.impl.DeploymentManager: void lambda$doDeployVerticle$2(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.spi.VerticleFactory,java.lang.ClassLoader,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.util.Iterator,io.vertx.core.AsyncResult)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<io.vertx.core.Handler: void handle(java.lang.Object)>($r17) in <io.vertx.core.impl.DeploymentManager: void lambda$doDeployVerticle$2(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.spi.VerticleFactory,java.lang.ClassLoader,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.util.Iterator,io.vertx.core.AsyncResult)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_start_3__19: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<io.vertx.core.Handler: void handle(java.lang.Object)>($r17) in <io.vertx.core.impl.DeploymentManager: void lambda$doDeployVerticle$2(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.spi.VerticleFactory,java.lang.ClassLoader,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.util.Iterator,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.HAManager$lambda_doDeployVerticle_4__7: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<io.vertx.core.Handler: void handle(java.lang.Object)>($r17) in <io.vertx.core.impl.DeploymentManager: void lambda$doDeployVerticle$2(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.spi.VerticleFactory,java.lang.ClassLoader,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.util.Iterator,io.vertx.core.AsyncResult)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_close_0__29: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<io.vertx.core.Handler: void handle(java.lang.Object)>($r17) in <io.vertx.core.impl.DeploymentManager: void lambda$doDeployVerticle$2(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.spi.VerticleFactory,java.lang.ClassLoader,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.util.Iterator,io.vertx.core.AsyncResult)> ==> <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<io.vertx.core.Handler: void handle(java.lang.Object)>($r17) in <io.vertx.core.impl.DeploymentManager: void lambda$doDeployVerticle$2(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.spi.VerticleFactory,java.lang.ClassLoader,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.util.Iterator,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<io.vertx.core.Handler: void handle(java.lang.Object)>($r17) in <io.vertx.core.impl.DeploymentManager: void lambda$doDeployVerticle$2(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.spi.VerticleFactory,java.lang.ClassLoader,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.util.Iterator,io.vertx.core.AsyncResult)> ==> <io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<io.vertx.core.Handler: void handle(java.lang.Object)>($r17) in <io.vertx.core.impl.DeploymentManager: void lambda$doDeployVerticle$2(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.spi.VerticleFactory,java.lang.ClassLoader,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.util.Iterator,io.vertx.core.AsyncResult)> ==> <io.vertx.core.Starter$lambda_createLoggingHandler_2__3: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<io.vertx.core.Handler: void handle(java.lang.Object)>($r17) in <io.vertx.core.impl.DeploymentManager: void lambda$doDeployVerticle$2(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.spi.VerticleFactory,java.lang.ClassLoader,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.util.Iterator,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.CompositeFutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<io.vertx.core.Handler: void handle(java.lang.Object)>($r17) in <io.vertx.core.impl.DeploymentManager: void lambda$doDeployVerticle$2(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.spi.VerticleFactory,java.lang.ClassLoader,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.util.Iterator,io.vertx.core.AsyncResult)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<io.vertx.core.Handler: void handle(java.lang.Object)>($r17) in <io.vertx.core.impl.DeploymentManager: void lambda$doDeployVerticle$2(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.spi.VerticleFactory,java.lang.ClassLoader,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.util.Iterator,io.vertx.core.AsyncResult)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_finalize_6__18: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<io.vertx.core.Handler: void handle(java.lang.Object)>($r17) in <io.vertx.core.impl.DeploymentManager: void lambda$doDeployVerticle$2(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.spi.VerticleFactory,java.lang.ClassLoader,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.util.Iterator,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<io.vertx.core.Handler: void handle(java.lang.Object)>($r17) in <io.vertx.core.impl.DeploymentManager: void lambda$doDeployVerticle$2(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.spi.VerticleFactory,java.lang.ClassLoader,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.util.Iterator,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.VertxImpl$lambda_init_0__9: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<io.vertx.core.Handler: void handle(java.lang.Object)>($r17) in <io.vertx.core.impl.DeploymentManager: void lambda$doDeployVerticle$2(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.spi.VerticleFactory,java.lang.ClassLoader,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.util.Iterator,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.FailedFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<io.vertx.core.Handler: void handle(java.lang.Object)>($r17) in <io.vertx.core.impl.DeploymentManager: void lambda$doDeployVerticle$2(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.spi.VerticleFactory,java.lang.ClassLoader,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.util.Iterator,io.vertx.core.AsyncResult)> ==> <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<io.vertx.core.Handler: void handle(java.lang.Object)>($r17) in <io.vertx.core.impl.DeploymentManager: void lambda$doDeployVerticle$2(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.spi.VerticleFactory,java.lang.ClassLoader,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.util.Iterator,io.vertx.core.AsyncResult)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_close_5__30: void handle(java.lang.Object)>
INTERFACE edge: $z2 = interfaceinvoke r11.<io.vertx.core.spi.VerticleFactory: boolean blockingCreate()>() in <io.vertx.core.impl.DeploymentManager: void lambda$doDeployVerticle$2(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.spi.VerticleFactory,java.lang.ClassLoader,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.util.Iterator,io.vertx.core.AsyncResult)> ==> <io.vertx.core.spi.VerticleFactory: boolean blockingCreate()>
INTERFACE edge: interfaceinvoke $r12.<io.vertx.core.impl.VertxInternal: void executeBlocking(io.vertx.core.Handler,io.vertx.core.Handler)>($r13, $r14) in <io.vertx.core.impl.DeploymentManager: void lambda$doDeployVerticle$2(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.spi.VerticleFactory,java.lang.ClassLoader,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.util.Iterator,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.VertxImpl: void executeBlocking(io.vertx.core.Handler,io.vertx.core.Handler)>
VIRTUAL edge: $i0 = virtualinvoke r4.<io.vertx.core.DeploymentOptions: int getInstances()>() in <io.vertx.core.impl.DeploymentManager: void lambda$doDeployVerticle$2(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.spi.VerticleFactory,java.lang.ClassLoader,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.util.Iterator,io.vertx.core.AsyncResult)> ==> <io.vertx.core.DeploymentOptions: int getInstances()>
STATIC edge: $r27 = staticinvoke <io.vertx.core.impl.DeploymentManager$lambda_doDeploy_8__49: io.vertx.core.Handler bootstrap$(io.vertx.core.impl.DeploymentManager,io.vertx.core.Verticle,io.vertx.core.impl.ContextImpl,io.vertx.core.impl.Deployment,io.vertx.core.impl.DeploymentManager$DeploymentImpl,java.lang.String,java.util.concurrent.atomic.AtomicInteger,io.vertx.core.Verticle[],io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean)>(r7, r18, r23, r6, $r9, r8, $r12, r16, r25, r26, $r14) in <io.vertx.core.impl.DeploymentManager: void doDeploy(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,java.lang.ClassLoader,io.vertx.core.Verticle[])> ==> <io.vertx.core.impl.DeploymentManager$lambda_doDeploy_8__49: io.vertx.core.Handler bootstrap$(io.vertx.core.impl.DeploymentManager,io.vertx.core.Verticle,io.vertx.core.impl.ContextImpl,io.vertx.core.impl.Deployment,io.vertx.core.impl.DeploymentManager$DeploymentImpl,java.lang.String,java.util.concurrent.atomic.AtomicInteger,io.vertx.core.Verticle[],io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean)>
SPECIAL edge: specialinvoke $r8.<io.vertx.core.impl.DeploymentManager$lambda_null_1__43: void <init>(io.vertx.core.impl.DeploymentManager,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,java.lang.ClassLoader,java.util.Iterator)>($r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7) in <io.vertx.core.impl.DeploymentManager$lambda_null_1__43: io.vertx.core.Handler bootstrap$(io.vertx.core.impl.DeploymentManager,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,java.lang.ClassLoader,java.util.Iterator)> ==> <io.vertx.core.impl.DeploymentManager$lambda_null_1__43: void <init>(io.vertx.core.impl.DeploymentManager,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,java.lang.ClassLoader,java.util.Iterator)>
SPECIAL edge: specialinvoke $r5.<io.vertx.core.impl.DeploymentManager$lambda_null_0__42: void <init>(io.vertx.core.impl.DeploymentManager,io.vertx.core.spi.VerticleFactory,java.lang.String,io.vertx.core.DeploymentOptions,java.lang.ClassLoader)>($r0, $r1, $r2, $r3, $r4) in <io.vertx.core.impl.DeploymentManager$lambda_null_0__42: io.vertx.core.Handler bootstrap$(io.vertx.core.impl.DeploymentManager,io.vertx.core.spi.VerticleFactory,java.lang.String,io.vertx.core.DeploymentOptions,java.lang.ClassLoader)> ==> <io.vertx.core.impl.DeploymentManager$lambda_null_0__42: void <init>(io.vertx.core.impl.DeploymentManager,io.vertx.core.spi.VerticleFactory,java.lang.String,io.vertx.core.DeploymentOptions,java.lang.ClassLoader)>
VIRTUAL edge: $i0 = virtualinvoke r0.<com.fasterxml.jackson.core.JsonToken: int ordinal()>() in <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(com.fasterxml.jackson.core.JsonToken)> ==> <com.fasterxml.jackson.core.JsonToken: int ordinal()>
SPECIAL edge: specialinvoke $r43.<com.fasterxml.jackson.databind.util.TokenBuffer: void <init>(com.fasterxml.jackson.core.ObjectCodec,boolean)>($r47, 0) in <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(com.fasterxml.jackson.core.JsonToken)> ==> <com.fasterxml.jackson.databind.util.TokenBuffer: void <init>(com.fasterxml.jackson.core.ObjectCodec,boolean)>
VIRTUAL edge: virtualinvoke $r32.<com.fasterxml.jackson.databind.util.TokenBuffer: void writeStartObject()>() in <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(com.fasterxml.jackson.core.JsonToken)> ==> <com.fasterxml.jackson.databind.util.TokenBuffer: void writeStartObject()>
VIRTUAL edge: virtualinvoke $r31.<com.fasterxml.jackson.databind.util.TokenBuffer: void writeStartArray()>() in <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(com.fasterxml.jackson.core.JsonToken)> ==> <com.fasterxml.jackson.databind.util.TokenBuffer: void writeStartArray()>
VIRTUAL edge: $r29 = virtualinvoke $r28.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParser: java.lang.String getCurrentName()>() in <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(com.fasterxml.jackson.core.JsonToken)> ==> <com.fasterxml.jackson.core.json.async.NonBlockingJsonParser: java.lang.String getCurrentName()>
VIRTUAL edge: virtualinvoke $r27.<com.fasterxml.jackson.databind.util.TokenBuffer: void writeFieldName(java.lang.String)>($r29) in <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(com.fasterxml.jackson.core.JsonToken)> ==> <com.fasterxml.jackson.databind.util.TokenBuffer: void writeFieldName(java.lang.String)>
VIRTUAL edge: $l4 = virtualinvoke $r18.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParser: long getLongValue()>() in <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(com.fasterxml.jackson.core.JsonToken)> ==> <com.fasterxml.jackson.core.json.async.NonBlockingJsonParser: long getLongValue()>
VIRTUAL edge: virtualinvoke $r17.<com.fasterxml.jackson.databind.util.TokenBuffer: void writeNumber(long)>($l4) in <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(com.fasterxml.jackson.core.JsonToken)> ==> <com.fasterxml.jackson.databind.util.TokenBuffer: void writeNumber(long)>
VIRTUAL edge: $d0 = virtualinvoke $r15.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParser: double getDoubleValue()>() in <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(com.fasterxml.jackson.core.JsonToken)> ==> <com.fasterxml.jackson.core.json.async.NonBlockingJsonParser: double getDoubleValue()>
VIRTUAL edge: virtualinvoke $r14.<com.fasterxml.jackson.databind.util.TokenBuffer: void writeNumber(double)>($d0) in <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(com.fasterxml.jackson.core.JsonToken)> ==> <com.fasterxml.jackson.databind.util.TokenBuffer: void writeNumber(double)>
VIRTUAL edge: $r25 = virtualinvoke $r24.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParser: java.lang.String getText()>() in <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(com.fasterxml.jackson.core.JsonToken)> ==> <com.fasterxml.jackson.core.json.async.NonBlockingJsonParser: java.lang.String getText()>
VIRTUAL edge: virtualinvoke $r23.<com.fasterxml.jackson.databind.util.TokenBuffer: void writeString(java.lang.String)>($r25) in <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(com.fasterxml.jackson.core.JsonToken)> ==> <com.fasterxml.jackson.databind.util.TokenBuffer: void writeString(java.lang.String)>
VIRTUAL edge: virtualinvoke $r21.<com.fasterxml.jackson.databind.util.TokenBuffer: void writeBoolean(boolean)>(1) in <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(com.fasterxml.jackson.core.JsonToken)> ==> <com.fasterxml.jackson.databind.util.TokenBuffer: void writeBoolean(boolean)>
VIRTUAL edge: virtualinvoke $r20.<com.fasterxml.jackson.databind.util.TokenBuffer: void writeBoolean(boolean)>(0) in <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(com.fasterxml.jackson.core.JsonToken)> ==> <com.fasterxml.jackson.databind.util.TokenBuffer: void writeBoolean(boolean)>
VIRTUAL edge: virtualinvoke $r19.<com.fasterxml.jackson.databind.util.TokenBuffer: void writeNull()>() in <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(com.fasterxml.jackson.core.JsonToken)> ==> <com.fasterxml.jackson.databind.util.TokenBuffer: void writeNull()>
VIRTUAL edge: virtualinvoke $r11.<com.fasterxml.jackson.databind.util.TokenBuffer: void writeEndObject()>() in <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(com.fasterxml.jackson.core.JsonToken)> ==> <com.fasterxml.jackson.databind.util.TokenBuffer: void writeEndObject()>
VIRTUAL edge: virtualinvoke $r4.<com.fasterxml.jackson.databind.util.TokenBuffer: void writeEndArray()>() in <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(com.fasterxml.jackson.core.JsonToken)> ==> <com.fasterxml.jackson.databind.util.TokenBuffer: void writeEndArray()>
VIRTUAL edge: virtualinvoke $r9.<com.fasterxml.jackson.databind.util.TokenBuffer: void flush()>() in <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(com.fasterxml.jackson.core.JsonToken)> ==> <com.fasterxml.jackson.databind.util.TokenBuffer: void flush()>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(com.fasterxml.jackson.core.JsonToken)> ==> <io.vertx.core.impl.DeploymentManager$lambda_doDeployVerticle_2__17: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(com.fasterxml.jackson.core.JsonToken)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(com.fasterxml.jackson.core.JsonToken)> ==> <io.vertx.core.impl.FutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(com.fasterxml.jackson.core.JsonToken)> ==> <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(com.fasterxml.jackson.core.JsonToken)> ==> <io.vertx.core.impl.SucceededFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(com.fasterxml.jackson.core.JsonToken)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(com.fasterxml.jackson.core.JsonToken)> ==> <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(com.fasterxml.jackson.core.JsonToken)> ==> <io.vertx.core.impl.VertxImpl$lambda_joinCluster_1__10: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(com.fasterxml.jackson.core.JsonToken)> ==> <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(com.fasterxml.jackson.core.JsonToken)> ==> <io.vertx.core.Starter$lambda_runVerticle_1__1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(com.fasterxml.jackson.core.JsonToken)> ==> <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(com.fasterxml.jackson.core.JsonToken)> ==> <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(com.fasterxml.jackson.core.JsonToken)> ==> <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(com.fasterxml.jackson.core.JsonToken)> ==> <io.vertx.core.Starter$lambda_startVertx_0__2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(com.fasterxml.jackson.core.JsonToken)> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(com.fasterxml.jackson.core.JsonToken)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(com.fasterxml.jackson.core.JsonToken)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_start_3__19: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(com.fasterxml.jackson.core.JsonToken)> ==> <io.vertx.core.impl.HAManager$lambda_doDeployVerticle_4__7: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(com.fasterxml.jackson.core.JsonToken)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_close_0__29: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(com.fasterxml.jackson.core.JsonToken)> ==> <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(com.fasterxml.jackson.core.JsonToken)> ==> <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(com.fasterxml.jackson.core.JsonToken)> ==> <io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(com.fasterxml.jackson.core.JsonToken)> ==> <io.vertx.core.Starter$lambda_createLoggingHandler_2__3: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(com.fasterxml.jackson.core.JsonToken)> ==> <io.vertx.core.impl.CompositeFutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(com.fasterxml.jackson.core.JsonToken)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(com.fasterxml.jackson.core.JsonToken)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_finalize_6__18: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(com.fasterxml.jackson.core.JsonToken)> ==> <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(com.fasterxml.jackson.core.JsonToken)> ==> <io.vertx.core.impl.VertxImpl$lambda_init_0__9: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(com.fasterxml.jackson.core.JsonToken)> ==> <io.vertx.core.impl.FailedFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(com.fasterxml.jackson.core.JsonToken)> ==> <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(com.fasterxml.jackson.core.JsonToken)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_close_5__30: void handle(java.lang.Object)>
SPECIAL edge: specialinvoke $r44.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(com.fasterxml.jackson.core.JsonToken)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r37 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not implemented ") in <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(com.fasterxml.jackson.core.JsonToken)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0) in <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(com.fasterxml.jackson.core.JsonToken)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(com.fasterxml.jackson.core.JsonToken)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r45.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r39) in <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(com.fasterxml.jackson.core.JsonToken)> ==> <java.lang.UnsupportedOperationException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r46.<io.vertx.core.VertxException: void <init>(java.lang.Throwable)>($r40) in <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(com.fasterxml.jackson.core.JsonToken)> ==> <io.vertx.core.VertxException: void <init>(java.lang.Throwable)>
VIRTUAL edge: $i1 = virtualinvoke $r2.<com.fasterxml.jackson.core.JsonToken: int ordinal()>() in <io.vertx.core.parsetools.impl.JsonParserImpl$1: void <clinit>()> ==> <com.fasterxml.jackson.core.JsonToken: int ordinal()>
VIRTUAL edge: $i2 = virtualinvoke $r4.<com.fasterxml.jackson.core.JsonToken: int ordinal()>() in <io.vertx.core.parsetools.impl.JsonParserImpl$1: void <clinit>()> ==> <com.fasterxml.jackson.core.JsonToken: int ordinal()>
VIRTUAL edge: $i3 = virtualinvoke $r6.<com.fasterxml.jackson.core.JsonToken: int ordinal()>() in <io.vertx.core.parsetools.impl.JsonParserImpl$1: void <clinit>()> ==> <com.fasterxml.jackson.core.JsonToken: int ordinal()>
VIRTUAL edge: $i4 = virtualinvoke $r8.<com.fasterxml.jackson.core.JsonToken: int ordinal()>() in <io.vertx.core.parsetools.impl.JsonParserImpl$1: void <clinit>()> ==> <com.fasterxml.jackson.core.JsonToken: int ordinal()>
VIRTUAL edge: $i5 = virtualinvoke $r10.<com.fasterxml.jackson.core.JsonToken: int ordinal()>() in <io.vertx.core.parsetools.impl.JsonParserImpl$1: void <clinit>()> ==> <com.fasterxml.jackson.core.JsonToken: int ordinal()>
VIRTUAL edge: $i6 = virtualinvoke $r12.<com.fasterxml.jackson.core.JsonToken: int ordinal()>() in <io.vertx.core.parsetools.impl.JsonParserImpl$1: void <clinit>()> ==> <com.fasterxml.jackson.core.JsonToken: int ordinal()>
VIRTUAL edge: $i7 = virtualinvoke $r14.<com.fasterxml.jackson.core.JsonToken: int ordinal()>() in <io.vertx.core.parsetools.impl.JsonParserImpl$1: void <clinit>()> ==> <com.fasterxml.jackson.core.JsonToken: int ordinal()>
VIRTUAL edge: $i8 = virtualinvoke $r16.<com.fasterxml.jackson.core.JsonToken: int ordinal()>() in <io.vertx.core.parsetools.impl.JsonParserImpl$1: void <clinit>()> ==> <com.fasterxml.jackson.core.JsonToken: int ordinal()>
VIRTUAL edge: $i9 = virtualinvoke $r18.<com.fasterxml.jackson.core.JsonToken: int ordinal()>() in <io.vertx.core.parsetools.impl.JsonParserImpl$1: void <clinit>()> ==> <com.fasterxml.jackson.core.JsonToken: int ordinal()>
VIRTUAL edge: $i10 = virtualinvoke $r20.<com.fasterxml.jackson.core.JsonToken: int ordinal()>() in <io.vertx.core.parsetools.impl.JsonParserImpl$1: void <clinit>()> ==> <com.fasterxml.jackson.core.JsonToken: int ordinal()>
VIRTUAL edge: $i11 = virtualinvoke $r22.<com.fasterxml.jackson.core.JsonToken: int ordinal()>() in <io.vertx.core.parsetools.impl.JsonParserImpl$1: void <clinit>()> ==> <com.fasterxml.jackson.core.JsonToken: int ordinal()>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler$lambda_handle_0__37: void <init>(io.vertx.core.parsetools.impl.JsonParserImpl)>($r0) in <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler$lambda_handle_0__37: io.vertx.core.Handler bootstrap$(io.vertx.core.parsetools.impl.JsonParserImpl)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler$lambda_handle_0__37: void <init>(io.vertx.core.parsetools.impl.JsonParserImpl)>
INTERFACE edge: $z0 = interfaceinvoke r0.<io.vertx.core.AsyncResult: boolean succeeded()>() in <io.vertx.core.impl.FutureImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.FutureImpl: boolean succeeded()>
INTERFACE edge: $z0 = interfaceinvoke r0.<io.vertx.core.AsyncResult: boolean succeeded()>() in <io.vertx.core.impl.FutureImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.FailedFuture: boolean succeeded()>
INTERFACE edge: $z0 = interfaceinvoke r0.<io.vertx.core.AsyncResult: boolean succeeded()>() in <io.vertx.core.impl.FutureImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.AsyncResult$1: boolean succeeded()>
INTERFACE edge: $z0 = interfaceinvoke r0.<io.vertx.core.AsyncResult: boolean succeeded()>() in <io.vertx.core.impl.FutureImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.AsyncResult$2: boolean succeeded()>
INTERFACE edge: $z0 = interfaceinvoke r0.<io.vertx.core.AsyncResult: boolean succeeded()>() in <io.vertx.core.impl.FutureImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.CompositeFutureImpl: boolean succeeded()>
INTERFACE edge: $z0 = interfaceinvoke r0.<io.vertx.core.AsyncResult: boolean succeeded()>() in <io.vertx.core.impl.FutureImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.SucceededFuture: boolean succeeded()>
INTERFACE edge: $r3 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Object result()>() in <io.vertx.core.impl.FutureImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.FutureImpl: java.lang.Object result()>
INTERFACE edge: $r3 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Object result()>() in <io.vertx.core.impl.FutureImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.FailedFuture: java.lang.Object result()>
INTERFACE edge: $r3 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Object result()>() in <io.vertx.core.impl.FutureImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.AsyncResult$1: java.lang.Object result()>
INTERFACE edge: $r3 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Object result()>() in <io.vertx.core.impl.FutureImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.AsyncResult$2: java.lang.Object result()>
INTERFACE edge: $r3 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Object result()>() in <io.vertx.core.impl.FutureImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.CompositeFutureImpl: java.lang.Object result()>
INTERFACE edge: $r3 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Object result()>() in <io.vertx.core.impl.FutureImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.SucceededFuture: java.lang.Object result()>
INTERFACE edge: $r2 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Throwable cause()>() in <io.vertx.core.impl.FutureImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.FutureImpl: java.lang.Throwable cause()>
INTERFACE edge: $r2 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Throwable cause()>() in <io.vertx.core.impl.FutureImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.FailedFuture: java.lang.Throwable cause()>
INTERFACE edge: $r2 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Throwable cause()>() in <io.vertx.core.impl.FutureImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.AsyncResult$1: java.lang.Throwable cause()>
INTERFACE edge: $r2 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Throwable cause()>() in <io.vertx.core.impl.FutureImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.AsyncResult$2: java.lang.Throwable cause()>
INTERFACE edge: $r2 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Throwable cause()>() in <io.vertx.core.impl.FutureImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.CompositeFutureImpl: java.lang.Throwable cause()>
INTERFACE edge: $r2 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Throwable cause()>() in <io.vertx.core.impl.FutureImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.SucceededFuture: java.lang.Throwable cause()>
VIRTUAL edge: virtualinvoke r1.<io.vertx.core.impl.FutureImpl: void complete(java.lang.Object)>($r3) in <io.vertx.core.impl.FutureImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.FutureImpl: void complete(java.lang.Object)>
VIRTUAL edge: virtualinvoke r1.<io.vertx.core.impl.FutureImpl: void fail(java.lang.Throwable)>($r2) in <io.vertx.core.impl.FutureImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.FutureImpl: void fail(java.lang.Throwable)>
VIRTUAL edge: r3 = virtualinvoke r0.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>() in <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(io.vertx.core.Future)> ==> <io.vertx.core.file.impl.FileSystemImpl$16: java.lang.Object perform()>
VIRTUAL edge: r3 = virtualinvoke r0.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>() in <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(io.vertx.core.Future)> ==> <io.vertx.core.file.impl.FileSystemImpl$17: java.lang.Object perform()>
VIRTUAL edge: r3 = virtualinvoke r0.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>() in <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(io.vertx.core.Future)> ==> <io.vertx.core.file.impl.FileSystemImpl$14: java.lang.Object perform()>
VIRTUAL edge: r3 = virtualinvoke r0.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>() in <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(io.vertx.core.Future)> ==> <io.vertx.core.file.impl.FileSystemImpl$15: java.lang.Object perform()>
VIRTUAL edge: r3 = virtualinvoke r0.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>() in <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(io.vertx.core.Future)> ==> <io.vertx.core.file.impl.FileSystemImpl$1: java.lang.Object perform()>
VIRTUAL edge: r3 = virtualinvoke r0.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>() in <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(io.vertx.core.Future)> ==> <io.vertx.core.file.impl.FileSystemImpl$2: java.lang.Object perform()>
VIRTUAL edge: r3 = virtualinvoke r0.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>() in <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(io.vertx.core.Future)> ==> <io.vertx.core.file.impl.FileSystemImpl$3: java.lang.Object perform()>
VIRTUAL edge: r3 = virtualinvoke r0.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>() in <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(io.vertx.core.Future)> ==> <io.vertx.core.file.impl.FileSystemImpl$18: java.lang.Object perform()>
VIRTUAL edge: r3 = virtualinvoke r0.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>() in <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(io.vertx.core.Future)> ==> <io.vertx.core.file.impl.FileSystemImpl$4: java.lang.Object perform()>
VIRTUAL edge: r3 = virtualinvoke r0.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>() in <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(io.vertx.core.Future)> ==> <io.vertx.core.file.impl.FileSystemImpl$19: java.lang.Object perform()>
VIRTUAL edge: r3 = virtualinvoke r0.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>() in <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(io.vertx.core.Future)> ==> <io.vertx.core.file.impl.FileSystemImpl$5: java.lang.Object perform()>
VIRTUAL edge: r3 = virtualinvoke r0.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>() in <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(io.vertx.core.Future)> ==> <io.vertx.core.file.impl.FileSystemImpl$6: java.lang.Object perform()>
VIRTUAL edge: r3 = virtualinvoke r0.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>() in <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(io.vertx.core.Future)> ==> <io.vertx.core.file.impl.FileSystemImpl$7: java.lang.Object perform()>
VIRTUAL edge: r3 = virtualinvoke r0.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>() in <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(io.vertx.core.Future)> ==> <io.vertx.core.file.impl.FileSystemImpl$8: java.lang.Object perform()>
VIRTUAL edge: r3 = virtualinvoke r0.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>() in <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(io.vertx.core.Future)> ==> <io.vertx.core.file.impl.FileSystemImpl$9: java.lang.Object perform()>
VIRTUAL edge: r3 = virtualinvoke r0.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>() in <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(io.vertx.core.Future)> ==> <io.vertx.core.file.impl.FileSystemImpl$20: java.lang.Object perform()>
VIRTUAL edge: r3 = virtualinvoke r0.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>() in <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(io.vertx.core.Future)> ==> <io.vertx.core.file.impl.FileSystemImpl$12: java.lang.Object perform()>
VIRTUAL edge: r3 = virtualinvoke r0.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>() in <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(io.vertx.core.Future)> ==> <io.vertx.core.file.impl.FileSystemImpl$13: java.lang.Object perform()>
VIRTUAL edge: r3 = virtualinvoke r0.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>() in <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(io.vertx.core.Future)> ==> <io.vertx.core.file.impl.WindowsFileSystem$1: java.lang.Object perform()>
VIRTUAL edge: r3 = virtualinvoke r0.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>() in <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(io.vertx.core.Future)> ==> <io.vertx.core.file.impl.FileSystemImpl$21: java.lang.Object perform()>
VIRTUAL edge: r3 = virtualinvoke r0.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>() in <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(io.vertx.core.Future)> ==> <io.vertx.core.file.impl.FileSystemImpl$10: java.lang.Object perform()>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Future: void complete(java.lang.Object)>(r3) in <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(io.vertx.core.Future)> ==> <io.vertx.core.impl.CompositeFutureImpl: void complete(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Future: void complete(java.lang.Object)>(r3) in <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(io.vertx.core.Future)> ==> <io.vertx.core.impl.SucceededFuture: void complete(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Future: void complete(java.lang.Object)>(r3) in <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(io.vertx.core.Future)> ==> <io.vertx.core.impl.FutureImpl: void complete(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Future: void complete(java.lang.Object)>(r3) in <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(io.vertx.core.Future)> ==> <io.vertx.core.impl.FailedFuture: void complete(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Future: void fail(java.lang.Throwable)>($r2) in <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(io.vertx.core.Future)> ==> <io.vertx.core.impl.CompositeFutureImpl: void fail(java.lang.Throwable)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Future: void fail(java.lang.Throwable)>($r2) in <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(io.vertx.core.Future)> ==> <io.vertx.core.impl.SucceededFuture: void fail(java.lang.Throwable)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Future: void fail(java.lang.Throwable)>($r2) in <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(io.vertx.core.Future)> ==> <io.vertx.core.impl.FutureImpl: void fail(java.lang.Throwable)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Future: void fail(java.lang.Throwable)>($r2) in <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(io.vertx.core.Future)> ==> <io.vertx.core.impl.FailedFuture: void fail(java.lang.Throwable)>
SPECIAL edge: specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Result is already complete: succeeded") in <io.vertx.core.impl.SucceededFuture: void handle(io.vertx.core.AsyncResult)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
INTERFACE edge: $i2 = interfaceinvoke r3.<io.vertx.core.buffer.Buffer: int getInt(int)>(0) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.buffer.impl.BufferImpl: int getInt(int)>
INTERFACE edge: $i1 = interfaceinvoke r3.<io.vertx.core.buffer.Buffer: int length()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.buffer.impl.BufferImpl: int length()>
INTERFACE edge: interfaceinvoke $r18.<io.vertx.core.parsetools.RecordParser: void fixedSizeMode(int)>($i3) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: void fixedSizeMode(int)>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void <init>()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void readFromWire(io.vertx.core.buffer.Buffer,io.vertx.core.eventbus.impl.CodecManager)>(r3, $r5) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void readFromWire(io.vertx.core.buffer.Buffer,io.vertx.core.eventbus.impl.CodecManager)>
VIRTUAL edge: $r17 = virtualinvoke $r1.<io.vertx.core.eventbus.impl.clustered.ClusteredMessage: java.lang.String address()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.eventbus.impl.MessageImpl: java.lang.String address()>
VIRTUAL edge: $r9 = virtualinvoke $r1.<io.vertx.core.eventbus.impl.clustered.ClusteredMessage: io.vertx.core.eventbus.MessageCodec codec()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.eventbus.impl.MessageImpl: io.vertx.core.eventbus.MessageCodec codec()>
INTERFACE edge: interfaceinvoke $r16.<io.vertx.core.spi.metrics.EventBusMetrics: void messageRead(java.lang.String,int)>($r17, $i1) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.spi.metrics.EventBusMetrics: void messageRead(java.lang.String,int)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.parsetools.RecordParser: void fixedSizeMode(int)>(4) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: void fixedSizeMode(int)>
INTERFACE edge: interfaceinvoke $r12.<io.vertx.core.net.NetSocket: io.vertx.core.net.NetSocket write(io.vertx.core.buffer.Buffer)>($r13) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.net.impl.NetSocketImpl: io.vertx.core.net.NetSocket write(io.vertx.core.buffer.Buffer)>
INTERFACE edge: interfaceinvoke $r12.<io.vertx.core.net.NetSocket: io.vertx.core.net.NetSocket write(io.vertx.core.buffer.Buffer)>($r13) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.http.impl.VertxHttp2NetSocket: io.vertx.core.net.NetSocket write(io.vertx.core.buffer.Buffer)>
STATIC edge: staticinvoke <io.vertx.core.impl.Arguments: void require(boolean,java.lang.String)>($z0, "Size must be > 0") in <io.vertx.core.parsetools.impl.RecordParserImpl: void fixedSizeMode(int)> ==> <io.vertx.core.impl.Arguments: void require(boolean,java.lang.String)>
CLINIT edge: $r14 = new java.lang.String in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void readFromWire(io.vertx.core.buffer.Buffer,io.vertx.core.eventbus.impl.CodecManager)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r5 = new java.lang.String in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void readFromWire(io.vertx.core.buffer.Buffer,io.vertx.core.eventbus.impl.CodecManager)> ==> <java.lang.String: void <clinit>()>
VIRTUAL edge: $z0 = virtualinvoke r0.<io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: boolean deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)>(r1) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: boolean access$400(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus,io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.eventbus.impl.EventBusImpl: boolean deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)>
INTERFACE edge: $r6 = interfaceinvoke r2.<io.vertx.core.http.HttpServerRequest: io.vertx.core.http.HttpConnection connection()>() in <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.http.impl.Http2ServerRequestImpl: io.vertx.core.http.HttpConnection connection()>
INTERFACE edge: $r6 = interfaceinvoke r2.<io.vertx.core.http.HttpServerRequest: io.vertx.core.http.HttpConnection connection()>() in <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.http.impl.HttpServerRequestImpl: io.vertx.core.http.HttpConnection connection()>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.impl.DeploymentManager$lambda_doDeployVerticle_2__17: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.impl.FutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.impl.SucceededFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.impl.VertxImpl$lambda_joinCluster_1__10: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.Starter$lambda_runVerticle_1__1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.Starter$lambda_startVertx_0__2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_start_3__19: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.impl.HAManager$lambda_doDeployVerticle_4__7: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_close_0__29: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.Starter$lambda_createLoggingHandler_2__3: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.impl.CompositeFutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_finalize_6__18: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.impl.VertxImpl$lambda_init_0__9: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.impl.FailedFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_close_5__30: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r2) in <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.impl.DeploymentManager$lambda_doDeployVerticle_2__17: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r2) in <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r2) in <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.impl.FutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r2) in <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r2) in <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.impl.SucceededFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r2) in <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r2) in <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r2) in <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.impl.VertxImpl$lambda_joinCluster_1__10: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r2) in <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r2) in <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.Starter$lambda_runVerticle_1__1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r2) in <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r2) in <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r2) in <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r2) in <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.Starter$lambda_startVertx_0__2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r2) in <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r2) in <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r2) in <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_start_3__19: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r2) in <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.impl.HAManager$lambda_doDeployVerticle_4__7: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r2) in <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_close_0__29: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r2) in <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r2) in <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r2) in <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r2) in <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.Starter$lambda_createLoggingHandler_2__3: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r2) in <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.impl.CompositeFutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r2) in <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r2) in <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_finalize_6__18: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r2) in <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r2) in <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.impl.VertxImpl$lambda_init_0__9: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r2) in <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.impl.FailedFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r2) in <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r2) in <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_close_5__30: void handle(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r0.<io.vertx.core.AsyncResult: boolean succeeded()>() in <io.vertx.core.impl.VertxImpl: void lambda$joinCluster$1(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.FutureImpl: boolean succeeded()>
INTERFACE edge: $z0 = interfaceinvoke r0.<io.vertx.core.AsyncResult: boolean succeeded()>() in <io.vertx.core.impl.VertxImpl: void lambda$joinCluster$1(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.FailedFuture: boolean succeeded()>
INTERFACE edge: $z0 = interfaceinvoke r0.<io.vertx.core.AsyncResult: boolean succeeded()>() in <io.vertx.core.impl.VertxImpl: void lambda$joinCluster$1(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.AsyncResult$1: boolean succeeded()>
INTERFACE edge: $z0 = interfaceinvoke r0.<io.vertx.core.AsyncResult: boolean succeeded()>() in <io.vertx.core.impl.VertxImpl: void lambda$joinCluster$1(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.AsyncResult$2: boolean succeeded()>
INTERFACE edge: $z0 = interfaceinvoke r0.<io.vertx.core.AsyncResult: boolean succeeded()>() in <io.vertx.core.impl.VertxImpl: void lambda$joinCluster$1(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.CompositeFutureImpl: boolean succeeded()>
INTERFACE edge: $z0 = interfaceinvoke r0.<io.vertx.core.AsyncResult: boolean succeeded()>() in <io.vertx.core.impl.VertxImpl: void lambda$joinCluster$1(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.SucceededFuture: boolean succeeded()>
INTERFACE edge: $r2 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Throwable cause()>() in <io.vertx.core.impl.VertxImpl: void lambda$joinCluster$1(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.FutureImpl: java.lang.Throwable cause()>
INTERFACE edge: $r2 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Throwable cause()>() in <io.vertx.core.impl.VertxImpl: void lambda$joinCluster$1(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.FailedFuture: java.lang.Throwable cause()>
INTERFACE edge: $r2 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Throwable cause()>() in <io.vertx.core.impl.VertxImpl: void lambda$joinCluster$1(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.AsyncResult$1: java.lang.Throwable cause()>
INTERFACE edge: $r2 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Throwable cause()>() in <io.vertx.core.impl.VertxImpl: void lambda$joinCluster$1(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.AsyncResult$2: java.lang.Throwable cause()>
INTERFACE edge: $r2 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Throwable cause()>() in <io.vertx.core.impl.VertxImpl: void lambda$joinCluster$1(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.CompositeFutureImpl: java.lang.Throwable cause()>
INTERFACE edge: $r2 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Throwable cause()>() in <io.vertx.core.impl.VertxImpl: void lambda$joinCluster$1(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.SucceededFuture: java.lang.Throwable cause()>
INTERFACE edge: $r4 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Throwable cause()>() in <io.vertx.core.impl.VertxImpl: void lambda$joinCluster$1(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.FutureImpl: java.lang.Throwable cause()>
INTERFACE edge: $r4 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Throwable cause()>() in <io.vertx.core.impl.VertxImpl: void lambda$joinCluster$1(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.FailedFuture: java.lang.Throwable cause()>
INTERFACE edge: $r4 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Throwable cause()>() in <io.vertx.core.impl.VertxImpl: void lambda$joinCluster$1(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.AsyncResult$1: java.lang.Throwable cause()>
INTERFACE edge: $r4 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Throwable cause()>() in <io.vertx.core.impl.VertxImpl: void lambda$joinCluster$1(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.AsyncResult$2: java.lang.Throwable cause()>
INTERFACE edge: $r4 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Throwable cause()>() in <io.vertx.core.impl.VertxImpl: void lambda$joinCluster$1(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.CompositeFutureImpl: java.lang.Throwable cause()>
INTERFACE edge: $r4 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Throwable cause()>() in <io.vertx.core.impl.VertxImpl: void lambda$joinCluster$1(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.SucceededFuture: java.lang.Throwable cause()>
SPECIAL edge: specialinvoke r6.<io.vertx.core.impl.VertxImpl: void createHaManager(io.vertx.core.VertxOptions,io.vertx.core.Handler)>(r7, r3) in <io.vertx.core.impl.VertxImpl: void lambda$joinCluster$1(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.VertxImpl: void createHaManager(io.vertx.core.VertxOptions,io.vertx.core.Handler)>
VIRTUAL edge: virtualinvoke $r1.<io.vertx.core.logging.Logger: void error(java.lang.Object,java.lang.Throwable)>("Failed to join cluster", $r2) in <io.vertx.core.impl.VertxImpl: void lambda$joinCluster$1(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.logging.Logger: void error(java.lang.Object,java.lang.Throwable)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.impl.VertxImpl: void lambda$joinCluster$1(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.DeploymentManager$lambda_doDeployVerticle_2__17: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.impl.VertxImpl: void lambda$joinCluster$1(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.impl.VertxImpl: void lambda$joinCluster$1(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.FutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.impl.VertxImpl: void lambda$joinCluster$1(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.impl.VertxImpl: void lambda$joinCluster$1(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.SucceededFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.impl.VertxImpl: void lambda$joinCluster$1(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.impl.VertxImpl: void lambda$joinCluster$1(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.impl.VertxImpl: void lambda$joinCluster$1(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.VertxImpl$lambda_joinCluster_1__10: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.impl.VertxImpl: void lambda$joinCluster$1(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.impl.VertxImpl: void lambda$joinCluster$1(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.Starter$lambda_runVerticle_1__1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.impl.VertxImpl: void lambda$joinCluster$1(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.impl.VertxImpl: void lambda$joinCluster$1(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.impl.VertxImpl: void lambda$joinCluster$1(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.impl.VertxImpl: void lambda$joinCluster$1(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.Starter$lambda_startVertx_0__2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.impl.VertxImpl: void lambda$joinCluster$1(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.impl.VertxImpl: void lambda$joinCluster$1(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.impl.VertxImpl: void lambda$joinCluster$1(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_start_3__19: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.impl.VertxImpl: void lambda$joinCluster$1(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.HAManager$lambda_doDeployVerticle_4__7: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.impl.VertxImpl: void lambda$joinCluster$1(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_close_0__29: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.impl.VertxImpl: void lambda$joinCluster$1(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.impl.VertxImpl: void lambda$joinCluster$1(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.impl.VertxImpl: void lambda$joinCluster$1(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.impl.VertxImpl: void lambda$joinCluster$1(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.Starter$lambda_createLoggingHandler_2__3: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.impl.VertxImpl: void lambda$joinCluster$1(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.CompositeFutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.impl.VertxImpl: void lambda$joinCluster$1(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.impl.VertxImpl: void lambda$joinCluster$1(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_finalize_6__18: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.impl.VertxImpl: void lambda$joinCluster$1(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.impl.VertxImpl: void lambda$joinCluster$1(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.VertxImpl$lambda_init_0__9: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.impl.VertxImpl: void lambda$joinCluster$1(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.FailedFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.impl.VertxImpl: void lambda$joinCluster$1(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.impl.VertxImpl: void lambda$joinCluster$1(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_close_5__30: void handle(java.lang.Object)>
STATIC edge: $r1 = staticinvoke <io.vertx.core.impl.VertxImpl$lambda_createHaManager_2__50: io.vertx.core.Handler bootstrap$(io.vertx.core.impl.VertxImpl)>(r0) in <io.vertx.core.impl.VertxImpl: void createHaManager(io.vertx.core.VertxOptions,io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl$lambda_createHaManager_2__50: io.vertx.core.Handler bootstrap$(io.vertx.core.impl.VertxImpl)>
STATIC edge: $r4 = staticinvoke <io.vertx.core.impl.VertxImpl$lambda_createHaManager_3__51: io.vertx.core.Handler bootstrap$(io.vertx.core.impl.VertxImpl,io.vertx.core.VertxOptions,io.vertx.core.Handler)>(r0, r2, r3) in <io.vertx.core.impl.VertxImpl: void createHaManager(io.vertx.core.VertxOptions,io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl$lambda_createHaManager_3__51: io.vertx.core.Handler bootstrap$(io.vertx.core.impl.VertxImpl,io.vertx.core.VertxOptions,io.vertx.core.Handler)>
INTERFACE edge: $r1 = interfaceinvoke r0.<io.vertx.core.http.HttpServerRequest: io.vertx.core.MultiMap headers()>() in <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.http.impl.Http2ServerRequestImpl: io.vertx.core.MultiMap headers()>
INTERFACE edge: $r1 = interfaceinvoke r0.<io.vertx.core.http.HttpServerRequest: io.vertx.core.MultiMap headers()>() in <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.http.impl.HttpServerRequestImpl: io.vertx.core.MultiMap headers()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<io.vertx.core.MultiMap: boolean contains(java.lang.CharSequence,java.lang.CharSequence,boolean)>($r3, $r2, 1) in <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.MultiMap: boolean contains(java.lang.CharSequence,java.lang.CharSequence,boolean)>
INTERFACE edge: $z0 = interfaceinvoke $r1.<io.vertx.core.MultiMap: boolean contains(java.lang.CharSequence,java.lang.CharSequence,boolean)>($r3, $r2, 1) in <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.http.impl.HeadersAdaptor: boolean contains(java.lang.CharSequence,java.lang.CharSequence,boolean)>
INTERFACE edge: $z0 = interfaceinvoke $r1.<io.vertx.core.MultiMap: boolean contains(java.lang.CharSequence,java.lang.CharSequence,boolean)>($r3, $r2, 1) in <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor: boolean contains(java.lang.CharSequence,java.lang.CharSequence,boolean)>
INTERFACE edge: $z0 = interfaceinvoke $r1.<io.vertx.core.MultiMap: boolean contains(java.lang.CharSequence,java.lang.CharSequence,boolean)>($r3, $r2, 1) in <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders: boolean contains(java.lang.CharSequence,java.lang.CharSequence,boolean)>
SPECIAL edge: specialinvoke r4.<io.vertx.core.http.impl.WebSocketRequestHandler: void handle(io.vertx.core.http.impl.HttpServerRequestImpl)>($r7) in <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(io.vertx.core.http.impl.HttpServerRequestImpl)>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.impl.DeploymentManager$lambda_doDeployVerticle_2__17: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.impl.FutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.impl.SucceededFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.impl.VertxImpl$lambda_joinCluster_1__10: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.Starter$lambda_runVerticle_1__1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.Starter$lambda_startVertx_0__2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_start_3__19: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.impl.HAManager$lambda_doDeployVerticle_4__7: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_close_0__29: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.Starter$lambda_createLoggingHandler_2__3: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.impl.CompositeFutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_finalize_6__18: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.impl.VertxImpl$lambda_init_0__9: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.impl.FailedFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(io.vertx.core.http.HttpServerRequest)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_close_5__30: void handle(java.lang.Object)>
STATIC edge: r6 = staticinvoke <io.vertx.core.MultiMap$lambda_contains_1__449: java.util.function.Predicate bootstrap$(java.lang.String)>(r5) in <io.vertx.core.MultiMap: boolean contains(java.lang.CharSequence,java.lang.CharSequence,boolean)> ==> <io.vertx.core.MultiMap$lambda_contains_1__449: java.util.function.Predicate bootstrap$(java.lang.String)>
STATIC edge: r6 = staticinvoke <io.vertx.core.MultiMap$lambda_contains_2__448: java.util.function.Predicate bootstrap$(java.lang.CharSequence)>(r0) in <io.vertx.core.MultiMap: boolean contains(java.lang.CharSequence,java.lang.CharSequence,boolean)> ==> <io.vertx.core.MultiMap$lambda_contains_2__448: java.util.function.Predicate bootstrap$(java.lang.CharSequence)>
STATIC edge: $r3 = staticinvoke <io.vertx.core.http.impl.Http2HeadersAdaptor: java.lang.CharSequence toLowerCase(java.lang.CharSequence)>(r1) in <io.vertx.core.http.impl.Http2HeadersAdaptor: boolean contains(java.lang.CharSequence,java.lang.CharSequence,boolean)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor: java.lang.CharSequence toLowerCase(java.lang.CharSequence)>
STATIC edge: i0 = staticinvoke <io.netty.util.AsciiString: int hashCode(java.lang.CharSequence)>(r0) in <io.vertx.core.http.impl.headers.VertxHttpHeaders: boolean contains(java.lang.CharSequence,java.lang.CharSequence,boolean)> ==> <io.netty.util.AsciiString: int hashCode(java.lang.CharSequence)>
STATIC edge: $z2 = staticinvoke <io.netty.util.AsciiString: boolean contentEqualsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>(r0, r4) in <io.vertx.core.http.impl.headers.VertxHttpHeaders: boolean contains(java.lang.CharSequence,java.lang.CharSequence,boolean)> ==> <io.netty.util.AsciiString: boolean contentEqualsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>
CLINIT edge: r0 = staticinvoke <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer()>() in <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(io.vertx.core.http.impl.HttpServerRequestImpl)> ==> <io.vertx.core.buffer.Buffer: void <clinit>()>
STATIC edge: $r6 = staticinvoke <io.vertx.core.http.impl.WebSocketRequestHandler$lambda_handle_1__53: io.vertx.core.Handler bootstrap$(io.vertx.core.http.impl.WebSocketRequestHandler,boolean[],io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.buffer.Buffer)>(r5, r1, r2, r0) in <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(io.vertx.core.http.impl.HttpServerRequestImpl)> ==> <io.vertx.core.http.impl.WebSocketRequestHandler$lambda_handle_1__53: io.vertx.core.Handler bootstrap$(io.vertx.core.http.impl.WebSocketRequestHandler,boolean[],io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.buffer.Buffer)>
STATIC edge: $r3 = staticinvoke <io.vertx.core.http.impl.WebSocketRequestHandler$lambda_handle_0__52: io.vertx.core.Handler bootstrap$(boolean[],io.vertx.core.buffer.Buffer,io.vertx.core.http.impl.HttpServerRequestImpl)>(r1, r0, r2) in <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(io.vertx.core.http.impl.HttpServerRequestImpl)> ==> <io.vertx.core.http.impl.WebSocketRequestHandler$lambda_handle_0__52: io.vertx.core.Handler bootstrap$(boolean[],io.vertx.core.buffer.Buffer,io.vertx.core.http.impl.HttpServerRequestImpl)>
STATIC edge: r0 = staticinvoke <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer()>() in <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(io.vertx.core.http.impl.HttpServerRequestImpl)> ==> <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer()>
CLINIT edge: $r0 = <io.vertx.core.buffer.Buffer: io.vertx.core.spi.BufferFactory factory> in <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer()> ==> <io.vertx.core.buffer.Buffer: void <clinit>()>
SPECIAL edge: specialinvoke $r2.<io.netty.util.AsciiString: void <init>(java.lang.CharSequence)>(r1) in <io.vertx.core.http.HttpHeaders: java.lang.CharSequence createOptimized(java.lang.String)> ==> <io.netty.util.AsciiString: void <init>(java.lang.CharSequence)>
INTERFACE edge: $z0 = interfaceinvoke r0.<io.vertx.core.AsyncResult: boolean failed()>() in <io.vertx.core.Starter: void lambda$runVerticle$1(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.FutureImpl: boolean failed()>
INTERFACE edge: $z0 = interfaceinvoke r0.<io.vertx.core.AsyncResult: boolean failed()>() in <io.vertx.core.Starter: void lambda$runVerticle$1(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.FailedFuture: boolean failed()>
INTERFACE edge: $z0 = interfaceinvoke r0.<io.vertx.core.AsyncResult: boolean failed()>() in <io.vertx.core.Starter: void lambda$runVerticle$1(io.vertx.core.AsyncResult)> ==> <io.vertx.core.AsyncResult$1: boolean failed()>
INTERFACE edge: $z0 = interfaceinvoke r0.<io.vertx.core.AsyncResult: boolean failed()>() in <io.vertx.core.Starter: void lambda$runVerticle$1(io.vertx.core.AsyncResult)> ==> <io.vertx.core.AsyncResult$2: boolean failed()>
INTERFACE edge: $z0 = interfaceinvoke r0.<io.vertx.core.AsyncResult: boolean failed()>() in <io.vertx.core.Starter: void lambda$runVerticle$1(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.CompositeFutureImpl: boolean failed()>
INTERFACE edge: $z0 = interfaceinvoke r0.<io.vertx.core.AsyncResult: boolean failed()>() in <io.vertx.core.Starter: void lambda$runVerticle$1(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.SucceededFuture: boolean failed()>
VIRTUAL edge: virtualinvoke r1.<io.vertx.core.Starter: void handleDeployFailed()>() in <io.vertx.core.Starter: void lambda$runVerticle$1(io.vertx.core.AsyncResult)> ==> <io.vertx.core.Starter: void handleDeployFailed()>
VIRTUAL edge: r1 = virtualinvoke r0.<io.vertx.core.net.impl.ConnectionBase: io.vertx.core.spi.metrics.NetworkMetrics metrics()>() in <io.vertx.core.net.impl.ConnectionBase: void reportBytesRead(long)> ==> <io.vertx.core.net.impl.NetSocketImpl: io.vertx.core.spi.metrics.NetworkMetrics metrics()>
VIRTUAL edge: r1 = virtualinvoke r0.<io.vertx.core.net.impl.ConnectionBase: io.vertx.core.spi.metrics.NetworkMetrics metrics()>() in <io.vertx.core.net.impl.ConnectionBase: void reportBytesRead(long)> ==> <io.vertx.core.http.impl.Http2ServerConnection: io.vertx.core.spi.metrics.NetworkMetrics metrics()>
VIRTUAL edge: r1 = virtualinvoke r0.<io.vertx.core.net.impl.ConnectionBase: io.vertx.core.spi.metrics.NetworkMetrics metrics()>() in <io.vertx.core.net.impl.ConnectionBase: void reportBytesRead(long)> ==> <io.vertx.core.http.impl.Http2ClientConnection: io.vertx.core.spi.metrics.NetworkMetrics metrics()>
VIRTUAL edge: r1 = virtualinvoke r0.<io.vertx.core.net.impl.ConnectionBase: io.vertx.core.spi.metrics.NetworkMetrics metrics()>() in <io.vertx.core.net.impl.ConnectionBase: void reportBytesRead(long)> ==> <io.vertx.core.datagram.impl.DatagramSocketImpl$Connection: io.vertx.core.spi.metrics.NetworkMetrics metrics()>
VIRTUAL edge: r1 = virtualinvoke r0.<io.vertx.core.net.impl.ConnectionBase: io.vertx.core.spi.metrics.NetworkMetrics metrics()>() in <io.vertx.core.net.impl.ConnectionBase: void reportBytesRead(long)> ==> <io.vertx.core.http.impl.Http1xServerConnection: io.vertx.core.spi.metrics.NetworkMetrics metrics()>
VIRTUAL edge: r1 = virtualinvoke r0.<io.vertx.core.net.impl.ConnectionBase: io.vertx.core.spi.metrics.NetworkMetrics metrics()>() in <io.vertx.core.net.impl.ConnectionBase: void reportBytesRead(long)> ==> <io.vertx.core.http.impl.Http1xClientConnection: io.vertx.core.spi.metrics.NetworkMetrics metrics()>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.net.impl.ConnectionBase: java.lang.Object metric()>() in <io.vertx.core.net.impl.ConnectionBase: void reportBytesRead(long)> ==> <io.vertx.core.net.impl.ConnectionBase: java.lang.Object metric()>
VIRTUAL edge: $r3 = virtualinvoke r0.<io.vertx.core.net.impl.ConnectionBase: io.vertx.core.net.SocketAddress remoteAddress()>() in <io.vertx.core.net.impl.ConnectionBase: void reportBytesRead(long)> ==> <io.vertx.core.net.impl.NetSocketImpl: io.vertx.core.net.SocketAddress remoteAddress()>
VIRTUAL edge: $r3 = virtualinvoke r0.<io.vertx.core.net.impl.ConnectionBase: io.vertx.core.net.SocketAddress remoteAddress()>() in <io.vertx.core.net.impl.ConnectionBase: void reportBytesRead(long)> ==> <io.vertx.core.net.impl.ConnectionBase: io.vertx.core.net.SocketAddress remoteAddress()>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.spi.metrics.NetworkMetrics: void bytesRead(java.lang.Object,io.vertx.core.net.SocketAddress,long)>($r2, $r3, l0) in <io.vertx.core.net.impl.ConnectionBase: void reportBytesRead(long)> ==> <io.vertx.core.spi.metrics.NetworkMetrics: void bytesRead(java.lang.Object,io.vertx.core.net.SocketAddress,long)>
STATIC edge: $r2 = staticinvoke <io.vertx.core.datagram.impl.DatagramSocketImpl: io.vertx.core.spi.metrics.DatagramSocketMetrics access$000(io.vertx.core.datagram.impl.DatagramSocketImpl)>($r1) in <io.vertx.core.datagram.impl.DatagramSocketImpl$Connection: io.vertx.core.spi.metrics.NetworkMetrics metrics()> ==> <io.vertx.core.datagram.impl.DatagramSocketImpl: io.vertx.core.spi.metrics.DatagramSocketMetrics access$000(io.vertx.core.datagram.impl.DatagramSocketImpl)>
INTERFACE edge: $z0 = interfaceinvoke r0.<io.vertx.core.AsyncResult: boolean failed()>() in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.FutureImpl: boolean failed()>
INTERFACE edge: $z0 = interfaceinvoke r0.<io.vertx.core.AsyncResult: boolean failed()>() in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.FailedFuture: boolean failed()>
INTERFACE edge: $z0 = interfaceinvoke r0.<io.vertx.core.AsyncResult: boolean failed()>() in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.AsyncResult$1: boolean failed()>
INTERFACE edge: $z0 = interfaceinvoke r0.<io.vertx.core.AsyncResult: boolean failed()>() in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.AsyncResult$2: boolean failed()>
INTERFACE edge: $z0 = interfaceinvoke r0.<io.vertx.core.AsyncResult: boolean failed()>() in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.CompositeFutureImpl: boolean failed()>
INTERFACE edge: $z0 = interfaceinvoke r0.<io.vertx.core.AsyncResult: boolean failed()>() in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.SucceededFuture: boolean failed()>
INTERFACE edge: $r3 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Object result()>() in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.FutureImpl: java.lang.Object result()>
INTERFACE edge: $r3 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Object result()>() in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.FailedFuture: java.lang.Object result()>
INTERFACE edge: $r3 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Object result()>() in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.AsyncResult$1: java.lang.Object result()>
INTERFACE edge: $r3 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Object result()>() in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.AsyncResult$2: java.lang.Object result()>
INTERFACE edge: $r3 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Object result()>() in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.CompositeFutureImpl: java.lang.Object result()>
INTERFACE edge: $r3 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Object result()>() in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.SucceededFuture: java.lang.Object result()>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.DeploymentManager$lambda_doDeployVerticle_2__17: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.FutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.SucceededFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.VertxImpl$lambda_joinCluster_1__10: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.Starter$lambda_runVerticle_1__1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.Starter$lambda_startVertx_0__2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_start_3__19: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.HAManager$lambda_doDeployVerticle_4__7: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_close_0__29: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.Starter$lambda_createLoggingHandler_2__3: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.CompositeFutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_finalize_6__18: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.VertxImpl$lambda_init_0__9: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.FailedFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_close_5__30: void handle(java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<java.util.ArrayList: void <init>()>() in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <java.util.ArrayList: void <init>()>
INTERFACE edge: interfaceinvoke $r1.<java.util.List: boolean addAll(java.util.Collection)>(r10) in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <java.util.ArrayList: boolean addAll(java.util.Collection)>
INTERFACE edge: r5 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <java.util.AbstractList: java.util.Iterator iterator()>
INTERFACE edge: r5 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r5 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
INTERFACE edge: r5 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.json.JsonArray$Iter: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.json.JsonObject$Iter: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <java.util.Scanner: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: boolean hasNext()>
INTERFACE edge: $r9 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object next()>
INTERFACE edge: $r9 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.json.JsonArray$Iter: java.lang.Object next()>
INTERFACE edge: $r9 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.json.JsonObject$Iter: java.lang.Object next()>
INTERFACE edge: $r9 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: java.lang.Object next()>
INTERFACE edge: $r9 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <java.util.Scanner: java.lang.Object next()>
INTERFACE edge: $r9 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: java.lang.Object next()>
INTERFACE edge: $r9 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: java.lang.Object next()>
INTERFACE edge: interfaceinvoke $r7.<io.vertx.core.Handler: void handle(java.lang.Object)>($r8) in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.DeploymentManager$lambda_doDeployVerticle_2__17: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r7.<io.vertx.core.Handler: void handle(java.lang.Object)>($r8) in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r7.<io.vertx.core.Handler: void handle(java.lang.Object)>($r8) in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.FutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r7.<io.vertx.core.Handler: void handle(java.lang.Object)>($r8) in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r7.<io.vertx.core.Handler: void handle(java.lang.Object)>($r8) in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.SucceededFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r7.<io.vertx.core.Handler: void handle(java.lang.Object)>($r8) in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r7.<io.vertx.core.Handler: void handle(java.lang.Object)>($r8) in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r7.<io.vertx.core.Handler: void handle(java.lang.Object)>($r8) in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.VertxImpl$lambda_joinCluster_1__10: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r7.<io.vertx.core.Handler: void handle(java.lang.Object)>($r8) in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r7.<io.vertx.core.Handler: void handle(java.lang.Object)>($r8) in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.Starter$lambda_runVerticle_1__1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r7.<io.vertx.core.Handler: void handle(java.lang.Object)>($r8) in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r7.<io.vertx.core.Handler: void handle(java.lang.Object)>($r8) in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r7.<io.vertx.core.Handler: void handle(java.lang.Object)>($r8) in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r7.<io.vertx.core.Handler: void handle(java.lang.Object)>($r8) in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.Starter$lambda_startVertx_0__2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r7.<io.vertx.core.Handler: void handle(java.lang.Object)>($r8) in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r7.<io.vertx.core.Handler: void handle(java.lang.Object)>($r8) in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r7.<io.vertx.core.Handler: void handle(java.lang.Object)>($r8) in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_start_3__19: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r7.<io.vertx.core.Handler: void handle(java.lang.Object)>($r8) in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.HAManager$lambda_doDeployVerticle_4__7: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r7.<io.vertx.core.Handler: void handle(java.lang.Object)>($r8) in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_close_0__29: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r7.<io.vertx.core.Handler: void handle(java.lang.Object)>($r8) in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r7.<io.vertx.core.Handler: void handle(java.lang.Object)>($r8) in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r7.<io.vertx.core.Handler: void handle(java.lang.Object)>($r8) in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r7.<io.vertx.core.Handler: void handle(java.lang.Object)>($r8) in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.Starter$lambda_createLoggingHandler_2__3: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r7.<io.vertx.core.Handler: void handle(java.lang.Object)>($r8) in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.CompositeFutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r7.<io.vertx.core.Handler: void handle(java.lang.Object)>($r8) in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r7.<io.vertx.core.Handler: void handle(java.lang.Object)>($r8) in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_finalize_6__18: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r7.<io.vertx.core.Handler: void handle(java.lang.Object)>($r8) in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r7.<io.vertx.core.Handler: void handle(java.lang.Object)>($r8) in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.VertxImpl$lambda_init_0__9: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r7.<io.vertx.core.Handler: void handle(java.lang.Object)>($r8) in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.FailedFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r7.<io.vertx.core.Handler: void handle(java.lang.Object)>($r8) in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r7.<io.vertx.core.Handler: void handle(java.lang.Object)>($r8) in <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_close_5__30: void handle(java.lang.Object)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<io.vertx.core.spi.FutureFactory: io.vertx.core.Future succeededFuture(java.lang.Object)>(r0) in <io.vertx.core.Future: io.vertx.core.Future succeededFuture(java.lang.Object)> ==> <io.vertx.core.impl.FutureFactoryImpl: io.vertx.core.Future succeededFuture(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r0.<io.vertx.core.AsyncResult: boolean failed()>() in <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.FutureImpl: boolean failed()>
INTERFACE edge: $z0 = interfaceinvoke r0.<io.vertx.core.AsyncResult: boolean failed()>() in <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.FailedFuture: boolean failed()>
INTERFACE edge: $z0 = interfaceinvoke r0.<io.vertx.core.AsyncResult: boolean failed()>() in <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.AsyncResult$1: boolean failed()>
INTERFACE edge: $z0 = interfaceinvoke r0.<io.vertx.core.AsyncResult: boolean failed()>() in <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.AsyncResult$2: boolean failed()>
INTERFACE edge: $z0 = interfaceinvoke r0.<io.vertx.core.AsyncResult: boolean failed()>() in <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.CompositeFutureImpl: boolean failed()>
INTERFACE edge: $z0 = interfaceinvoke r0.<io.vertx.core.AsyncResult: boolean failed()>() in <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.SucceededFuture: boolean failed()>
INTERFACE edge: $r4 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Throwable cause()>() in <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.FutureImpl: java.lang.Throwable cause()>
INTERFACE edge: $r4 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Throwable cause()>() in <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.FailedFuture: java.lang.Throwable cause()>
INTERFACE edge: $r4 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Throwable cause()>() in <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.AsyncResult$1: java.lang.Throwable cause()>
INTERFACE edge: $r4 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Throwable cause()>() in <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.AsyncResult$2: java.lang.Throwable cause()>
INTERFACE edge: $r4 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Throwable cause()>() in <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.CompositeFutureImpl: java.lang.Throwable cause()>
INTERFACE edge: $r4 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Throwable cause()>() in <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.SucceededFuture: java.lang.Throwable cause()>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.DeploymentManager$lambda_doDeployVerticle_2__17: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.FutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.SucceededFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.VertxImpl$lambda_joinCluster_1__10: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.Starter$lambda_runVerticle_1__1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.Starter$lambda_startVertx_0__2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_start_3__19: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.HAManager$lambda_doDeployVerticle_4__7: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_close_0__29: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.Starter$lambda_createLoggingHandler_2__3: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.CompositeFutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_finalize_6__18: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.VertxImpl$lambda_init_0__9: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.FailedFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_close_5__30: void handle(java.lang.Object)>
INTERFACE edge: $i0 = interfaceinvoke $r1.<io.vertx.core.buffer.Buffer: int length()>() in <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.buffer.impl.BufferImpl: int length()>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer appendBuffer(io.vertx.core.buffer.Buffer)>(r2) in <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.buffer.impl.BufferImpl: io.vertx.core.buffer.Buffer appendBuffer(io.vertx.core.buffer.Buffer)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()>() in <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()>
INTERFACE edge: $i2 = interfaceinvoke $r6.<io.vertx.core.buffer.Buffer: int length()>() in <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.buffer.impl.BufferImpl: int length()>
SPECIAL edge: specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("The current record is too long") in <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>($r7) in <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.impl.DeploymentManager$lambda_doDeployVerticle_2__17: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>($r7) in <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>($r7) in <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.impl.FutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>($r7) in <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>($r7) in <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.impl.SucceededFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>($r7) in <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>($r7) in <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>($r7) in <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.impl.VertxImpl$lambda_joinCluster_1__10: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>($r7) in <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>($r7) in <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.Starter$lambda_runVerticle_1__1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>($r7) in <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>($r7) in <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>($r7) in <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>($r7) in <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.Starter$lambda_startVertx_0__2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>($r7) in <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>($r7) in <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>($r7) in <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_start_3__19: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>($r7) in <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.impl.HAManager$lambda_doDeployVerticle_4__7: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>($r7) in <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_close_0__29: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>($r7) in <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>($r7) in <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>($r7) in <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>($r7) in <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.Starter$lambda_createLoggingHandler_2__3: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>($r7) in <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.impl.CompositeFutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>($r7) in <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>($r7) in <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_finalize_6__18: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>($r7) in <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>($r7) in <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.impl.VertxImpl$lambda_init_0__9: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>($r7) in <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.impl.FailedFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>($r7) in <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>($r7) in <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_close_5__30: void handle(java.lang.Object)>
CLINIT edge: $r3 = <io.vertx.core.parsetools.impl.RecordParserImpl: io.vertx.core.buffer.Buffer EMPTY_BUFFER> in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: void <clinit>()>
CLINIT edge: $r1 = staticinvoke <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer(io.netty.buffer.ByteBuf)>($r0) in <io.vertx.core.parsetools.impl.RecordParserImpl: void <clinit>()> ==> <io.vertx.core.buffer.Buffer: void <clinit>()>
STATIC edge: $r1 = staticinvoke <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer(io.netty.buffer.ByteBuf)>($r0) in <io.vertx.core.parsetools.impl.RecordParserImpl: void <clinit>()> ==> <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer(io.netty.buffer.ByteBuf)>
CLINIT edge: <io.vertx.core.parsetools.impl.RecordParserImpl: io.vertx.core.buffer.Buffer EMPTY_BUFFER> = $r1 in <io.vertx.core.parsetools.impl.RecordParserImpl: void <clinit>()> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: void <clinit>()>
INTERFACE edge: r1 = interfaceinvoke r0.<io.vertx.core.buffer.Buffer: byte[] getBytes()>() in <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.buffer.impl.BufferImpl: byte[] getBytes()>
VIRTUAL edge: virtualinvoke $r3.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParser: void feedInput(byte[],int,int)>(r1, 0, $i0) in <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <com.fasterxml.jackson.core.json.async.NonBlockingJsonParser: void feedInput(byte[],int,int)>
INTERFACE edge: interfaceinvoke $r9.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.impl.DeploymentManager$lambda_doDeployVerticle_2__17: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r9.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r9.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.impl.FutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r9.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r9.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.impl.SucceededFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r9.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r9.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r9.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.impl.VertxImpl$lambda_joinCluster_1__10: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r9.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r9.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.Starter$lambda_runVerticle_1__1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r9.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r9.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r9.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r9.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.Starter$lambda_startVertx_0__2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r9.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r9.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r9.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_start_3__19: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r9.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.impl.HAManager$lambda_doDeployVerticle_4__7: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r9.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_close_0__29: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r9.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r9.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r9.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r9.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.Starter$lambda_createLoggingHandler_2__3: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r9.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.impl.CompositeFutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r9.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r9.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_finalize_6__18: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r9.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r9.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.impl.VertxImpl$lambda_init_0__9: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r9.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.impl.FailedFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r9.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r9.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_close_5__30: void handle(java.lang.Object)>
VIRTUAL edge: $r8 = virtualinvoke $r11.<java.io.IOException: java.lang.String getMessage()>() in <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <java.lang.Throwable: java.lang.String getMessage()>
VIRTUAL edge: $r8 = virtualinvoke $r11.<java.io.IOException: java.lang.String getMessage()>() in <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <java.nio.charset.MalformedInputException: java.lang.String getMessage()>
VIRTUAL edge: $r8 = virtualinvoke $r11.<java.io.IOException: java.lang.String getMessage()>() in <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
SPECIAL edge: specialinvoke $r10.<io.vertx.core.json.DecodeException: void <init>(java.lang.String)>($r8) in <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.json.DecodeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r2.<io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()>() in <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()>
INTERFACE edge: $z0 = interfaceinvoke r0.<io.vertx.core.AsyncResult: boolean succeeded()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$start$3(io.vertx.core.impl.HAManager,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.FutureImpl: boolean succeeded()>
INTERFACE edge: $z0 = interfaceinvoke r0.<io.vertx.core.AsyncResult: boolean succeeded()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$start$3(io.vertx.core.impl.HAManager,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.FailedFuture: boolean succeeded()>
INTERFACE edge: $z0 = interfaceinvoke r0.<io.vertx.core.AsyncResult: boolean succeeded()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$start$3(io.vertx.core.impl.HAManager,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.AsyncResult$1: boolean succeeded()>
INTERFACE edge: $z0 = interfaceinvoke r0.<io.vertx.core.AsyncResult: boolean succeeded()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$start$3(io.vertx.core.impl.HAManager,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.AsyncResult$2: boolean succeeded()>
INTERFACE edge: $z0 = interfaceinvoke r0.<io.vertx.core.AsyncResult: boolean succeeded()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$start$3(io.vertx.core.impl.HAManager,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.CompositeFutureImpl: boolean succeeded()>
INTERFACE edge: $z0 = interfaceinvoke r0.<io.vertx.core.AsyncResult: boolean succeeded()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$start$3(io.vertx.core.impl.HAManager,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.SucceededFuture: boolean succeeded()>
INTERFACE edge: $r5 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Object result()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$start$3(io.vertx.core.impl.HAManager,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.FutureImpl: java.lang.Object result()>
INTERFACE edge: $r5 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Object result()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$start$3(io.vertx.core.impl.HAManager,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.FailedFuture: java.lang.Object result()>
INTERFACE edge: $r5 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Object result()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$start$3(io.vertx.core.impl.HAManager,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.AsyncResult$1: java.lang.Object result()>
INTERFACE edge: $r5 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Object result()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$start$3(io.vertx.core.impl.HAManager,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.AsyncResult$2: java.lang.Object result()>
INTERFACE edge: $r5 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Object result()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$start$3(io.vertx.core.impl.HAManager,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.CompositeFutureImpl: java.lang.Object result()>
INTERFACE edge: $r5 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Object result()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$start$3(io.vertx.core.impl.HAManager,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.SucceededFuture: java.lang.Object result()>
INTERFACE edge: $r2 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Throwable cause()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$start$3(io.vertx.core.impl.HAManager,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.FutureImpl: java.lang.Throwable cause()>
INTERFACE edge: $r2 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Throwable cause()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$start$3(io.vertx.core.impl.HAManager,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.FailedFuture: java.lang.Throwable cause()>
INTERFACE edge: $r2 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Throwable cause()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$start$3(io.vertx.core.impl.HAManager,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.AsyncResult$1: java.lang.Throwable cause()>
INTERFACE edge: $r2 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Throwable cause()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$start$3(io.vertx.core.impl.HAManager,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.AsyncResult$2: java.lang.Throwable cause()>
INTERFACE edge: $r2 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Throwable cause()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$start$3(io.vertx.core.impl.HAManager,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.CompositeFutureImpl: java.lang.Throwable cause()>
INTERFACE edge: $r2 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Throwable cause()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$start$3(io.vertx.core.impl.HAManager,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.SucceededFuture: java.lang.Throwable cause()>
SPECIAL edge: $r8 = specialinvoke r4.<io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: io.vertx.core.net.NetServerOptions getServerOptions()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$start$3(io.vertx.core.impl.HAManager,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: io.vertx.core.net.NetServerOptions getServerOptions()>
SPECIAL edge: $r11 = specialinvoke r4.<io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: io.vertx.core.Handler getServerHandler()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$start$3(io.vertx.core.impl.HAManager,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: io.vertx.core.Handler getServerHandler()>
INTERFACE edge: $r9 = interfaceinvoke $r7.<io.vertx.core.impl.VertxInternal: io.vertx.core.net.NetServer createNetServer(io.vertx.core.net.NetServerOptions)>($r8) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$start$3(io.vertx.core.impl.HAManager,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.VertxImpl: io.vertx.core.net.NetServer createNetServer(io.vertx.core.net.NetServerOptions)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.net.NetServer: io.vertx.core.net.NetServer connectHandler(io.vertx.core.Handler)>($r11) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$start$3(io.vertx.core.impl.HAManager,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.net.impl.NetServerImpl: io.vertx.core.net.NetServer connectHandler(io.vertx.core.Handler)>
INTERFACE edge: interfaceinvoke $r14.<io.vertx.core.net.NetServer: io.vertx.core.net.NetServer listen(io.vertx.core.Handler)>($r15) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$start$3(io.vertx.core.impl.HAManager,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.net.impl.NetServerImpl: io.vertx.core.net.NetServer listen(io.vertx.core.Handler)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$start$3(io.vertx.core.impl.HAManager,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.DeploymentManager$lambda_doDeployVerticle_2__17: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$start$3(io.vertx.core.impl.HAManager,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$start$3(io.vertx.core.impl.HAManager,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.FutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$start$3(io.vertx.core.impl.HAManager,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$start$3(io.vertx.core.impl.HAManager,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.SucceededFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$start$3(io.vertx.core.impl.HAManager,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$start$3(io.vertx.core.impl.HAManager,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$start$3(io.vertx.core.impl.HAManager,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.VertxImpl$lambda_joinCluster_1__10: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$start$3(io.vertx.core.impl.HAManager,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$start$3(io.vertx.core.impl.HAManager,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.Starter$lambda_runVerticle_1__1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$start$3(io.vertx.core.impl.HAManager,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$start$3(io.vertx.core.impl.HAManager,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$start$3(io.vertx.core.impl.HAManager,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$start$3(io.vertx.core.impl.HAManager,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.Starter$lambda_startVertx_0__2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$start$3(io.vertx.core.impl.HAManager,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$start$3(io.vertx.core.impl.HAManager,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$start$3(io.vertx.core.impl.HAManager,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_start_3__19: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$start$3(io.vertx.core.impl.HAManager,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.HAManager$lambda_doDeployVerticle_4__7: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$start$3(io.vertx.core.impl.HAManager,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_close_0__29: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$start$3(io.vertx.core.impl.HAManager,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$start$3(io.vertx.core.impl.HAManager,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$start$3(io.vertx.core.impl.HAManager,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$start$3(io.vertx.core.impl.HAManager,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.Starter$lambda_createLoggingHandler_2__3: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$start$3(io.vertx.core.impl.HAManager,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.CompositeFutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$start$3(io.vertx.core.impl.HAManager,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$start$3(io.vertx.core.impl.HAManager,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_finalize_6__18: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$start$3(io.vertx.core.impl.HAManager,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$start$3(io.vertx.core.impl.HAManager,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.VertxImpl$lambda_init_0__9: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$start$3(io.vertx.core.impl.HAManager,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.FailedFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$start$3(io.vertx.core.impl.HAManager,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$start$3(io.vertx.core.impl.HAManager,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_close_5__30: void handle(java.lang.Object)>
CLINIT edge: $r0 = new io.vertx.core.net.NetServerOptions in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: io.vertx.core.net.NetServerOptions getServerOptions()> ==> <io.vertx.core.net.NetServerOptions: void <clinit>()>
STATIC edge: staticinvoke <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void setTrustOptions(io.vertx.core.net.TCPSSLOptions,io.vertx.core.net.TrustOptions)>($r0, $r8) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: io.vertx.core.net.NetServerOptions getServerOptions()> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void setTrustOptions(io.vertx.core.net.TCPSSLOptions,io.vertx.core.net.TrustOptions)>
STATIC edge: staticinvoke <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void setCertOptions(io.vertx.core.net.TCPSSLOptions,io.vertx.core.net.KeyCertOptions)>($r0, $r6) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: io.vertx.core.net.NetServerOptions getServerOptions()> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void setCertOptions(io.vertx.core.net.TCPSSLOptions,io.vertx.core.net.KeyCertOptions)>
CLINIT edge: staticinvoke <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void setCertOptions(io.vertx.core.net.TCPSSLOptions,io.vertx.core.net.KeyCertOptions)>($r0, $r6) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: io.vertx.core.net.NetServerOptions getServerOptions()> ==> <io.vertx.core.eventbus.impl.EventBusImpl: void <clinit>()>
CLINIT edge: staticinvoke <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void setCertOptions(io.vertx.core.net.TCPSSLOptions,io.vertx.core.net.KeyCertOptions)>($r0, $r6) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: io.vertx.core.net.NetServerOptions getServerOptions()> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void <clinit>()>
CLINIT edge: $r0 = new io.vertx.core.net.NetServerOptions in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: io.vertx.core.net.NetServerOptions getServerOptions()> ==> <io.vertx.core.net.TCPSSLOptions: void <clinit>()>
STATIC edge: $r1 = staticinvoke <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_getServerHandler_13__46: io.vertx.core.Handler bootstrap$(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus)>(r0) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: io.vertx.core.Handler getServerHandler()> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_getServerHandler_13__46: io.vertx.core.Handler bootstrap$(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus)>
CLINIT edge: $r0 = new io.vertx.core.net.impl.NetServerImpl in <io.vertx.core.impl.VertxImpl: io.vertx.core.net.NetServer createNetServer(io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.net.impl.NetServerImpl: void <clinit>()>
CLINIT edge: $r0 = <io.vertx.core.http.ClientAuth: io.vertx.core.http.ClientAuth NONE> in <io.vertx.core.net.NetServerOptions: void <clinit>()> ==> <io.vertx.core.http.ClientAuth: void <clinit>()>
CLINIT edge: <io.vertx.core.net.NetServerOptions: io.vertx.core.http.ClientAuth DEFAULT_CLIENT_AUTH> = $r0 in <io.vertx.core.net.NetServerOptions: void <clinit>()> ==> <io.vertx.core.net.TCPSSLOptions: void <clinit>()>
CLINIT edge: <io.vertx.core.net.NetServerOptions: io.vertx.core.http.ClientAuth DEFAULT_CLIENT_AUTH> = $r0 in <io.vertx.core.net.NetServerOptions: void <clinit>()> ==> <io.vertx.core.net.NetServerOptions: void <clinit>()>
CLINIT edge: $r0 = staticinvoke <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/net/impl/NetServerImpl;") in <io.vertx.core.net.impl.NetServerImpl: void <clinit>()> ==> <io.vertx.core.logging.LoggerFactory: void <clinit>()>
STATIC edge: $r0 = staticinvoke <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/net/impl/NetServerImpl;") in <io.vertx.core.net.impl.NetServerImpl: void <clinit>()> ==> <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>
CLINIT edge: <io.vertx.core.net.impl.NetServerImpl: io.vertx.core.logging.Logger log> = $r0 in <io.vertx.core.net.impl.NetServerImpl: void <clinit>()> ==> <io.vertx.core.net.impl.NetServerImpl: void <clinit>()>
SPECIAL edge: specialinvoke $r3.<io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_null_2__34: void <init>(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus,io.vertx.core.impl.HAManager,io.vertx.core.Handler)>($r0, $r1, $r2) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_null_2__34: io.vertx.core.Handler bootstrap$(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus,io.vertx.core.impl.HAManager,io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_null_2__34: void <init>(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus,io.vertx.core.impl.HAManager,io.vertx.core.Handler)>
INTERFACE edge: interfaceinvoke $r4.<io.vertx.core.impl.VertxInternal: void executeBlocking(io.vertx.core.Handler,boolean,io.vertx.core.Handler)>($r5, 0, $r7) in <io.vertx.core.impl.HAManager: void lambda$doDeployVerticle$4(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.VertxImpl: void executeBlocking(io.vertx.core.Handler,boolean,io.vertx.core.Handler)>
SPECIAL edge: specialinvoke $r4.<io.vertx.core.impl.HAManager$lambda_null_2__35: void <init>(io.vertx.core.impl.HAManager,io.vertx.core.AsyncResult,java.lang.String,io.vertx.core.DeploymentOptions)>($r0, $r1, $r2, $r3) in <io.vertx.core.impl.HAManager$lambda_null_2__35: io.vertx.core.Handler bootstrap$(io.vertx.core.impl.HAManager,io.vertx.core.AsyncResult,java.lang.String,io.vertx.core.DeploymentOptions)> ==> <io.vertx.core.impl.HAManager$lambda_null_2__35: void <init>(io.vertx.core.impl.HAManager,io.vertx.core.AsyncResult,java.lang.String,io.vertx.core.DeploymentOptions)>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.impl.HAManager$lambda_null_3__36: void <init>(io.vertx.core.Handler)>($r0) in <io.vertx.core.impl.HAManager$lambda_null_3__36: io.vertx.core.Handler bootstrap$(io.vertx.core.Handler)> ==> <io.vertx.core.impl.HAManager$lambda_null_3__36: void <init>(io.vertx.core.Handler)>
INTERFACE edge: $r2 = interfaceinvoke r0.<io.vertx.core.http.impl.ws.WebSocketFrameInternal: io.vertx.core.http.impl.FrameType type()>() in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handle(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.http.impl.ws.WebSocketFrameImpl: io.vertx.core.http.impl.FrameType type()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<io.vertx.core.http.impl.FrameType: int ordinal()>() in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handle(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <java.lang.Enum: int ordinal()>
SPECIAL edge: specialinvoke r3.<io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleTextFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)>(r0) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handle(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleTextFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)>
SPECIAL edge: specialinvoke r3.<io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleBinaryFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)>(r0) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handle(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleBinaryFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)>
SPECIAL edge: specialinvoke r3.<io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleTextFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)>(r0) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handle(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleTextFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)>
SPECIAL edge: specialinvoke r3.<io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleBinaryFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)>(r0) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handle(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleBinaryFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)>
INTERFACE edge: $i3 = interfaceinvoke $r7.<io.vertx.core.buffer.Buffer: int length()>() in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handle(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.buffer.impl.BufferImpl: int length()>
INTERFACE edge: $i2 = interfaceinvoke $r6.<io.vertx.core.buffer.Buffer: int length()>() in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handle(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.buffer.impl.BufferImpl: int length()>
CLINIT edge: r2 = staticinvoke <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer(io.netty.buffer.ByteBuf)>($r1) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleTextFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.buffer.Buffer: void <clinit>()>
STATIC edge: $i5 = staticinvoke <io.vertx.core.http.impl.WebSocketImplBase: int access$000(io.vertx.core.http.impl.WebSocketImplBase)>($r19) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleTextFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.http.impl.WebSocketImplBase: int access$000(io.vertx.core.http.impl.WebSocketImplBase)>
STATIC edge: $i1 = staticinvoke <io.vertx.core.http.impl.WebSocketImplBase: int access$000(io.vertx.core.http.impl.WebSocketImplBase)>($r8) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleTextFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.http.impl.WebSocketImplBase: int access$000(io.vertx.core.http.impl.WebSocketImplBase)>
STATIC edge: r2 = staticinvoke <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer(io.netty.buffer.ByteBuf)>($r1) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleTextFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer(io.netty.buffer.ByteBuf)>
CLINIT edge: r2 = staticinvoke <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer(io.netty.buffer.ByteBuf)>($r1) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleBinaryFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.buffer.Buffer: void <clinit>()>
STATIC edge: $i5 = staticinvoke <io.vertx.core.http.impl.WebSocketImplBase: int access$000(io.vertx.core.http.impl.WebSocketImplBase)>($r19) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleBinaryFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.http.impl.WebSocketImplBase: int access$000(io.vertx.core.http.impl.WebSocketImplBase)>
STATIC edge: $i1 = staticinvoke <io.vertx.core.http.impl.WebSocketImplBase: int access$000(io.vertx.core.http.impl.WebSocketImplBase)>($r8) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleBinaryFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.http.impl.WebSocketImplBase: int access$000(io.vertx.core.http.impl.WebSocketImplBase)>
STATIC edge: r2 = staticinvoke <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer(io.netty.buffer.ByteBuf)>($r1) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleBinaryFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer(io.netty.buffer.ByteBuf)>
VIRTUAL edge: $i1 = virtualinvoke $r2.<io.vertx.core.http.impl.FrameType: int ordinal()>() in <io.vertx.core.http.impl.WebSocketImplBase$1: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $i2 = virtualinvoke $r4.<io.vertx.core.http.impl.FrameType: int ordinal()>() in <io.vertx.core.http.impl.WebSocketImplBase$1: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $i3 = virtualinvoke $r6.<io.vertx.core.http.impl.FrameType: int ordinal()>() in <io.vertx.core.http.impl.WebSocketImplBase$1: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $i4 = virtualinvoke $r8.<io.vertx.core.http.impl.FrameType: int ordinal()>() in <io.vertx.core.http.impl.WebSocketImplBase$1: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $i5 = virtualinvoke $r10.<io.vertx.core.http.impl.FrameType: int ordinal()>() in <io.vertx.core.http.impl.WebSocketImplBase$1: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.http.impl.FrameType: void <init>(java.lang.String,int)>("CONTINUATION", 0) in <io.vertx.core.http.impl.FrameType: void <clinit>()> ==> <io.vertx.core.http.impl.FrameType: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.http.impl.FrameType: void <init>(java.lang.String,int)>("TEXT", 1) in <io.vertx.core.http.impl.FrameType: void <clinit>()> ==> <io.vertx.core.http.impl.FrameType: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r2.<io.vertx.core.http.impl.FrameType: void <init>(java.lang.String,int)>("BINARY", 2) in <io.vertx.core.http.impl.FrameType: void <clinit>()> ==> <io.vertx.core.http.impl.FrameType: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r3.<io.vertx.core.http.impl.FrameType: void <init>(java.lang.String,int)>("CLOSE", 3) in <io.vertx.core.http.impl.FrameType: void <clinit>()> ==> <io.vertx.core.http.impl.FrameType: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r4.<io.vertx.core.http.impl.FrameType: void <init>(java.lang.String,int)>("PING", 4) in <io.vertx.core.http.impl.FrameType: void <clinit>()> ==> <io.vertx.core.http.impl.FrameType: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r5.<io.vertx.core.http.impl.FrameType: void <init>(java.lang.String,int)>("PONG", 5) in <io.vertx.core.http.impl.FrameType: void <clinit>()> ==> <io.vertx.core.http.impl.FrameType: void <init>(java.lang.String,int)>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.impl.FrameType: io.vertx.core.http.impl.FrameType[] values()> ==> <java.lang.Object: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.impl.FrameType: io.vertx.core.http.impl.FrameType[] values()> ==> <java.util.HashMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.impl.FrameType: io.vertx.core.http.impl.FrameType[] values()> ==> <io.vertx.core.net.PemTrustOptions: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.impl.FrameType: io.vertx.core.http.impl.FrameType[] values()> ==> <java.lang.Enum: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.impl.FrameType: io.vertx.core.http.impl.FrameType[] values()> ==> <java.util.TreeMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.impl.FrameType: io.vertx.core.http.impl.FrameType[] values()> ==> <java.util.jar.Attributes: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.impl.FrameType: io.vertx.core.http.impl.FrameType[] values()> ==> <java.util.EnumMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.impl.FrameType: io.vertx.core.http.impl.FrameType[] values()> ==> <java.util.TreeSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.impl.FrameType: io.vertx.core.http.impl.FrameType[] values()> ==> <java.util.ArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.impl.FrameType: io.vertx.core.http.impl.FrameType[] values()> ==> <java.util.HashSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.impl.FrameType: io.vertx.core.http.impl.FrameType[] values()> ==> <java.util.Hashtable: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.impl.FrameType: io.vertx.core.http.impl.FrameType[] values()> ==> <java.util.ArrayDeque: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.impl.FrameType: io.vertx.core.http.impl.FrameType[] values()> ==> <io.vertx.core.net.PemKeyCertOptions: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.impl.FrameType: io.vertx.core.http.impl.FrameType[] values()> ==> <io.vertx.core.net.JdkSSLEngineOptions: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.impl.FrameType: io.vertx.core.http.impl.FrameType[] values()> ==> <java.util.jar.Manifest: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.impl.FrameType: io.vertx.core.http.impl.FrameType[] values()> ==> <io.vertx.core.net.JksOptions: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.impl.FrameType: io.vertx.core.http.impl.FrameType[] values()> ==> <io.vertx.core.net.OpenSSLEngineOptions: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.impl.FrameType: io.vertx.core.http.impl.FrameType[] values()> ==> <java.util.concurrent.CopyOnWriteArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.impl.FrameType: io.vertx.core.http.impl.FrameType[] values()> ==> <io.vertx.core.net.PfxOptions: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.impl.FrameType: io.vertx.core.http.impl.FrameType[] values()> ==> <java.util.Date: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.impl.FrameType: io.vertx.core.http.impl.FrameType[] values()> ==> <java.util.Locale: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.impl.FrameType: io.vertx.core.http.impl.FrameType[] values()> ==> <java.util.zip.ZipEntry: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.impl.FrameType: io.vertx.core.http.impl.FrameType[] values()> ==> <java.util.AbstractMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.impl.FrameType: io.vertx.core.http.impl.FrameType[] values()> ==> <java.util.LinkedList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.impl.FrameType: io.vertx.core.http.impl.FrameType[] values()> ==> <java.util.IdentityHashMap: java.lang.Object clone()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>() in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Void)> ==> <java.util.concurrent.atomic.AtomicBoolean: boolean get()>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Void)> ==> <io.vertx.core.impl.DeploymentManager$lambda_doDeployVerticle_2__17: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Void)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Void)> ==> <io.vertx.core.impl.FutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Void)> ==> <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Void)> ==> <io.vertx.core.impl.SucceededFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Void)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Void)> ==> <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Void)> ==> <io.vertx.core.impl.VertxImpl$lambda_joinCluster_1__10: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Void)> ==> <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Void)> ==> <io.vertx.core.Starter$lambda_runVerticle_1__1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Void)> ==> <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Void)> ==> <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Void)> ==> <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Void)> ==> <io.vertx.core.Starter$lambda_startVertx_0__2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Void)> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Void)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Void)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_start_3__19: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Void)> ==> <io.vertx.core.impl.HAManager$lambda_doDeployVerticle_4__7: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Void)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_close_0__29: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Void)> ==> <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Void)> ==> <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Void)> ==> <io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Void)> ==> <io.vertx.core.Starter$lambda_createLoggingHandler_2__3: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Void)> ==> <io.vertx.core.impl.CompositeFutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Void)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Void)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_finalize_6__18: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Void)> ==> <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Void)> ==> <io.vertx.core.impl.VertxImpl$lambda_init_0__9: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Void)> ==> <io.vertx.core.impl.FailedFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Void)> ==> <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Void)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_close_5__30: void handle(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.impl.VertxImpl$InternalTimerHandler: void cleanupNonPeriodic()>() in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Void)> ==> <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void cleanupNonPeriodic()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.impl.VertxImpl$InternalTimerHandler: void cleanupNonPeriodic()>() in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Void)> ==> <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void cleanupNonPeriodic()>
CLINIT edge: $r2 = staticinvoke <io.vertx.core.impl.VertxImpl: java.util.concurrent.ConcurrentMap access$100(io.vertx.core.impl.VertxImpl)>($r1) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void cleanupNonPeriodic()> ==> <io.vertx.core.impl.VertxImpl: void <clinit>()>
STATIC edge: $r10 = staticinvoke <io.vertx.core.impl.VertxImpl: io.vertx.core.spi.metrics.VertxMetrics access$000(io.vertx.core.impl.VertxImpl)>($r9) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void cleanupNonPeriodic()> ==> <io.vertx.core.impl.VertxImpl: io.vertx.core.spi.metrics.VertxMetrics access$000(io.vertx.core.impl.VertxImpl)>
STATIC edge: $r6 = staticinvoke <io.vertx.core.impl.VertxImpl: io.vertx.core.spi.metrics.VertxMetrics access$000(io.vertx.core.impl.VertxImpl)>($r5) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void cleanupNonPeriodic()> ==> <io.vertx.core.impl.VertxImpl: io.vertx.core.spi.metrics.VertxMetrics access$000(io.vertx.core.impl.VertxImpl)>
STATIC edge: $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void cleanupNonPeriodic()> ==> <java.lang.Long: java.lang.Long valueOf(long)>
STATIC edge: $r2 = staticinvoke <io.vertx.core.impl.VertxImpl: java.util.concurrent.ConcurrentMap access$100(io.vertx.core.impl.VertxImpl)>($r1) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void cleanupNonPeriodic()> ==> <io.vertx.core.impl.VertxImpl: java.util.concurrent.ConcurrentMap access$100(io.vertx.core.impl.VertxImpl)>
CLINIT edge: $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void cleanupNonPeriodic()> ==> <java.lang.Long: void <clinit>()>
SPECIAL edge: $r1 = specialinvoke r0.<io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler: io.vertx.core.buffer.Buffer body()>() in <io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler: io.vertx.core.buffer.Buffer body()>
INTERFACE edge: interfaceinvoke $r1.<io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer appendBuffer(io.vertx.core.buffer.Buffer)>(r2) in <io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler: void handle(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.buffer.impl.BufferImpl: io.vertx.core.buffer.Buffer appendBuffer(io.vertx.core.buffer.Buffer)>
CLINIT edge: $r3 = staticinvoke <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer()>() in <io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler: io.vertx.core.buffer.Buffer body()> ==> <io.vertx.core.buffer.Buffer: void <clinit>()>
STATIC edge: $r3 = staticinvoke <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer()>() in <io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler: io.vertx.core.buffer.Buffer body()> ==> <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer()>
INTERFACE edge: $z0 = interfaceinvoke r0.<io.vertx.core.AsyncResult: boolean succeeded()>() in <io.vertx.core.impl.CompositeFutureImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.FutureImpl: boolean succeeded()>
INTERFACE edge: $z0 = interfaceinvoke r0.<io.vertx.core.AsyncResult: boolean succeeded()>() in <io.vertx.core.impl.CompositeFutureImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.FailedFuture: boolean succeeded()>
INTERFACE edge: $z0 = interfaceinvoke r0.<io.vertx.core.AsyncResult: boolean succeeded()>() in <io.vertx.core.impl.CompositeFutureImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.AsyncResult$1: boolean succeeded()>
INTERFACE edge: $z0 = interfaceinvoke r0.<io.vertx.core.AsyncResult: boolean succeeded()>() in <io.vertx.core.impl.CompositeFutureImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.AsyncResult$2: boolean succeeded()>
INTERFACE edge: $z0 = interfaceinvoke r0.<io.vertx.core.AsyncResult: boolean succeeded()>() in <io.vertx.core.impl.CompositeFutureImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.CompositeFutureImpl: boolean succeeded()>
INTERFACE edge: $z0 = interfaceinvoke r0.<io.vertx.core.AsyncResult: boolean succeeded()>() in <io.vertx.core.impl.CompositeFutureImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.SucceededFuture: boolean succeeded()>
INTERFACE edge: $r2 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Throwable cause()>() in <io.vertx.core.impl.CompositeFutureImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.FutureImpl: java.lang.Throwable cause()>
INTERFACE edge: $r2 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Throwable cause()>() in <io.vertx.core.impl.CompositeFutureImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.FailedFuture: java.lang.Throwable cause()>
INTERFACE edge: $r2 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Throwable cause()>() in <io.vertx.core.impl.CompositeFutureImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.AsyncResult$1: java.lang.Throwable cause()>
INTERFACE edge: $r2 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Throwable cause()>() in <io.vertx.core.impl.CompositeFutureImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.AsyncResult$2: java.lang.Throwable cause()>
INTERFACE edge: $r2 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Throwable cause()>() in <io.vertx.core.impl.CompositeFutureImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.CompositeFutureImpl: java.lang.Throwable cause()>
INTERFACE edge: $r2 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Throwable cause()>() in <io.vertx.core.impl.CompositeFutureImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.SucceededFuture: java.lang.Throwable cause()>
VIRTUAL edge: virtualinvoke r1.<io.vertx.core.impl.CompositeFutureImpl: void complete(io.vertx.core.CompositeFuture)>(r1) in <io.vertx.core.impl.CompositeFutureImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.CompositeFutureImpl: void complete(io.vertx.core.CompositeFuture)>
VIRTUAL edge: virtualinvoke r1.<io.vertx.core.impl.CompositeFutureImpl: void fail(java.lang.Throwable)>($r2) in <io.vertx.core.impl.CompositeFutureImpl: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.CompositeFutureImpl: void fail(java.lang.Throwable)>
INTERFACE edge: $i3 = interfaceinvoke $r9.<java.util.Queue: int size()>() in <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(io.vertx.core.eventbus.Message)> ==> <java.util.Queue: int size()>
INTERFACE edge: $i3 = interfaceinvoke $r9.<java.util.Queue: int size()>() in <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(io.vertx.core.eventbus.Message)> ==> <java.util.ArrayDeque: int size()>
INTERFACE edge: $i3 = interfaceinvoke $r9.<java.util.Queue: int size()>() in <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(io.vertx.core.eventbus.Message)> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i3 = interfaceinvoke $r9.<java.util.Queue: int size()>() in <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(io.vertx.core.eventbus.Message)> ==> <java.util.concurrent.ConcurrentLinkedQueue: int size()>
INTERFACE edge: interfaceinvoke $r20.<java.util.Queue: boolean add(java.lang.Object)>(r23) in <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(io.vertx.core.eventbus.Message)> ==> <java.util.ArrayDeque: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r20.<java.util.Queue: boolean add(java.lang.Object)>(r23) in <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(io.vertx.core.eventbus.Message)> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r20.<java.util.Queue: boolean add(java.lang.Object)>(r23) in <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(io.vertx.core.eventbus.Message)> ==> <java.util.concurrent.ConcurrentLinkedQueue: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r19.<io.vertx.core.Handler: void handle(java.lang.Object)>(r23) in <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(io.vertx.core.eventbus.Message)> ==> <io.vertx.core.impl.DeploymentManager$lambda_doDeployVerticle_2__17: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r19.<io.vertx.core.Handler: void handle(java.lang.Object)>(r23) in <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(io.vertx.core.eventbus.Message)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r19.<io.vertx.core.Handler: void handle(java.lang.Object)>(r23) in <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(io.vertx.core.eventbus.Message)> ==> <io.vertx.core.impl.FutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r19.<io.vertx.core.Handler: void handle(java.lang.Object)>(r23) in <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(io.vertx.core.eventbus.Message)> ==> <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r19.<io.vertx.core.Handler: void handle(java.lang.Object)>(r23) in <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(io.vertx.core.eventbus.Message)> ==> <io.vertx.core.impl.SucceededFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r19.<io.vertx.core.Handler: void handle(java.lang.Object)>(r23) in <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(io.vertx.core.eventbus.Message)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r19.<io.vertx.core.Handler: void handle(java.lang.Object)>(r23) in <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(io.vertx.core.eventbus.Message)> ==> <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r19.<io.vertx.core.Handler: void handle(java.lang.Object)>(r23) in <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(io.vertx.core.eventbus.Message)> ==> <io.vertx.core.impl.VertxImpl$lambda_joinCluster_1__10: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r19.<io.vertx.core.Handler: void handle(java.lang.Object)>(r23) in <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(io.vertx.core.eventbus.Message)> ==> <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r19.<io.vertx.core.Handler: void handle(java.lang.Object)>(r23) in <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(io.vertx.core.eventbus.Message)> ==> <io.vertx.core.Starter$lambda_runVerticle_1__1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r19.<io.vertx.core.Handler: void handle(java.lang.Object)>(r23) in <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(io.vertx.core.eventbus.Message)> ==> <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r19.<io.vertx.core.Handler: void handle(java.lang.Object)>(r23) in <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(io.vertx.core.eventbus.Message)> ==> <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r19.<io.vertx.core.Handler: void handle(java.lang.Object)>(r23) in <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(io.vertx.core.eventbus.Message)> ==> <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r19.<io.vertx.core.Handler: void handle(java.lang.Object)>(r23) in <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(io.vertx.core.eventbus.Message)> ==> <io.vertx.core.Starter$lambda_startVertx_0__2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r19.<io.vertx.core.Handler: void handle(java.lang.Object)>(r23) in <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(io.vertx.core.eventbus.Message)> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r19.<io.vertx.core.Handler: void handle(java.lang.Object)>(r23) in <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(io.vertx.core.eventbus.Message)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r19.<io.vertx.core.Handler: void handle(java.lang.Object)>(r23) in <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(io.vertx.core.eventbus.Message)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_start_3__19: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r19.<io.vertx.core.Handler: void handle(java.lang.Object)>(r23) in <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(io.vertx.core.eventbus.Message)> ==> <io.vertx.core.impl.HAManager$lambda_doDeployVerticle_4__7: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r19.<io.vertx.core.Handler: void handle(java.lang.Object)>(r23) in <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(io.vertx.core.eventbus.Message)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_close_0__29: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r19.<io.vertx.core.Handler: void handle(java.lang.Object)>(r23) in <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(io.vertx.core.eventbus.Message)> ==> <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r19.<io.vertx.core.Handler: void handle(java.lang.Object)>(r23) in <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(io.vertx.core.eventbus.Message)> ==> <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r19.<io.vertx.core.Handler: void handle(java.lang.Object)>(r23) in <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(io.vertx.core.eventbus.Message)> ==> <io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r19.<io.vertx.core.Handler: void handle(java.lang.Object)>(r23) in <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(io.vertx.core.eventbus.Message)> ==> <io.vertx.core.Starter$lambda_createLoggingHandler_2__3: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r19.<io.vertx.core.Handler: void handle(java.lang.Object)>(r23) in <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(io.vertx.core.eventbus.Message)> ==> <io.vertx.core.impl.CompositeFutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r19.<io.vertx.core.Handler: void handle(java.lang.Object)>(r23) in <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(io.vertx.core.eventbus.Message)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r19.<io.vertx.core.Handler: void handle(java.lang.Object)>(r23) in <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(io.vertx.core.eventbus.Message)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_finalize_6__18: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r19.<io.vertx.core.Handler: void handle(java.lang.Object)>(r23) in <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(io.vertx.core.eventbus.Message)> ==> <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r19.<io.vertx.core.Handler: void handle(java.lang.Object)>(r23) in <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(io.vertx.core.eventbus.Message)> ==> <io.vertx.core.impl.VertxImpl$lambda_init_0__9: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r19.<io.vertx.core.Handler: void handle(java.lang.Object)>(r23) in <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(io.vertx.core.eventbus.Message)> ==> <io.vertx.core.impl.FailedFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r19.<io.vertx.core.Handler: void handle(java.lang.Object)>(r23) in <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(io.vertx.core.eventbus.Message)> ==> <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r19.<io.vertx.core.Handler: void handle(java.lang.Object)>(r23) in <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(io.vertx.core.eventbus.Message)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_close_5__30: void handle(java.lang.Object)>
SPECIAL edge: specialinvoke $r11.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(io.vertx.core.eventbus.Message)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Discarding message as more than ") in <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(io.vertx.core.eventbus.Message)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5) in <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(io.vertx.core.eventbus.Message)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" buffered in paused consumer. address: ") in <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(io.vertx.core.eventbus.Message)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16) in <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(io.vertx.core.eventbus.Message)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(io.vertx.core.eventbus.Message)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r12.<io.vertx.core.logging.Logger: void warn(java.lang.Object)>($r18) in <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(io.vertx.core.eventbus.Message)> ==> <io.vertx.core.logging.Logger: void warn(java.lang.Object)>
INTERFACE edge: $i2 = interfaceinvoke $r3.<java.util.Queue: int size()>() in <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(io.vertx.core.eventbus.Message)> ==> <java.util.Queue: int size()>
INTERFACE edge: $i2 = interfaceinvoke $r3.<java.util.Queue: int size()>() in <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(io.vertx.core.eventbus.Message)> ==> <java.util.ArrayDeque: int size()>
INTERFACE edge: $i2 = interfaceinvoke $r3.<java.util.Queue: int size()>() in <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(io.vertx.core.eventbus.Message)> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i2 = interfaceinvoke $r3.<java.util.Queue: int size()>() in <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(io.vertx.core.eventbus.Message)> ==> <java.util.concurrent.ConcurrentLinkedQueue: int size()>
INTERFACE edge: interfaceinvoke $r6.<java.util.Queue: boolean add(java.lang.Object)>(r23) in <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(io.vertx.core.eventbus.Message)> ==> <java.util.ArrayDeque: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<java.util.Queue: boolean add(java.lang.Object)>(r23) in <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(io.vertx.core.eventbus.Message)> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<java.util.Queue: boolean add(java.lang.Object)>(r23) in <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(io.vertx.core.eventbus.Message)> ==> <java.util.concurrent.ConcurrentLinkedQueue: boolean add(java.lang.Object)>
INTERFACE edge: $r8 = interfaceinvoke $r7.<java.util.Queue: java.lang.Object poll()>() in <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(io.vertx.core.eventbus.Message)> ==> <java.util.ArrayDeque: java.lang.Object poll()>
INTERFACE edge: $r8 = interfaceinvoke $r7.<java.util.Queue: java.lang.Object poll()>() in <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(io.vertx.core.eventbus.Message)> ==> <java.util.LinkedList: java.lang.Object poll()>
INTERFACE edge: $r8 = interfaceinvoke $r7.<java.util.Queue: java.lang.Object poll()>() in <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(io.vertx.core.eventbus.Message)> ==> <java.util.concurrent.ConcurrentLinkedQueue: java.lang.Object poll()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.eventbus.impl.HandlerRegistration: void deliver(io.vertx.core.Handler,io.vertx.core.eventbus.Message,io.vertx.core.impl.ContextInternal)>(r4, r23, r5) in <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(io.vertx.core.eventbus.Message)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void deliver(io.vertx.core.Handler,io.vertx.core.eventbus.Message,io.vertx.core.impl.ContextInternal)>
CLINIT edge: $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1) in <io.vertx.core.eventbus.impl.HandlerRegistration: void deliver(io.vertx.core.Handler,io.vertx.core.eventbus.Message,io.vertx.core.impl.ContextInternal)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1) in <io.vertx.core.eventbus.impl.HandlerRegistration: void deliver(io.vertx.core.Handler,io.vertx.core.eventbus.Message,io.vertx.core.impl.ContextInternal)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
CLINIT edge: $r15 = <io.vertx.core.eventbus.impl.HandlerRegistration: io.vertx.core.logging.Logger log> in <io.vertx.core.eventbus.impl.HandlerRegistration: void deliver(io.vertx.core.Handler,io.vertx.core.eventbus.Message,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void <clinit>()>
INTERFACE edge: interfaceinvoke $r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.impl.DeploymentManager$lambda_doDeployVerticle_2__17: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.impl.FutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.impl.SucceededFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.impl.VertxImpl$lambda_joinCluster_1__10: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.Starter$lambda_runVerticle_1__1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.Starter$lambda_startVertx_0__2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_start_3__19: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.impl.HAManager$lambda_doDeployVerticle_4__7: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_close_0__29: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.Starter$lambda_createLoggingHandler_2__3: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.impl.CompositeFutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_finalize_6__18: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.impl.VertxImpl$lambda_init_0__9: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.impl.FailedFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_close_5__30: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.impl.DeploymentManager$lambda_doDeployVerticle_2__17: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.impl.FutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.impl.SucceededFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.impl.VertxImpl$lambda_joinCluster_1__10: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.Starter$lambda_runVerticle_1__1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.Starter$lambda_startVertx_0__2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_start_3__19: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.impl.HAManager$lambda_doDeployVerticle_4__7: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_close_0__29: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.Starter$lambda_createLoggingHandler_2__3: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.impl.CompositeFutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_finalize_6__18: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.impl.VertxImpl$lambda_init_0__9: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.impl.FailedFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_close_5__30: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.impl.DeploymentManager$lambda_doDeployVerticle_2__17: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.impl.FutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.impl.SucceededFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.impl.VertxImpl$lambda_joinCluster_1__10: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.Starter$lambda_runVerticle_1__1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.Starter$lambda_startVertx_0__2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_start_3__19: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.impl.HAManager$lambda_doDeployVerticle_4__7: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_close_0__29: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.Starter$lambda_createLoggingHandler_2__3: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.impl.CompositeFutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_finalize_6__18: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.impl.VertxImpl$lambda_init_0__9: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.impl.FailedFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Long)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_close_5__30: void handle(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Result is already complete: failed") in <io.vertx.core.impl.FailedFuture: void handle(io.vertx.core.AsyncResult)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
INTERFACE edge: $z0 = interfaceinvoke r0.<io.vertx.core.AsyncResult: boolean succeeded()>() in <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.FutureImpl: boolean succeeded()>
INTERFACE edge: $z0 = interfaceinvoke r0.<io.vertx.core.AsyncResult: boolean succeeded()>() in <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.FailedFuture: boolean succeeded()>
INTERFACE edge: $z0 = interfaceinvoke r0.<io.vertx.core.AsyncResult: boolean succeeded()>() in <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.AsyncResult$1: boolean succeeded()>
INTERFACE edge: $z0 = interfaceinvoke r0.<io.vertx.core.AsyncResult: boolean succeeded()>() in <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.AsyncResult$2: boolean succeeded()>
INTERFACE edge: $z0 = interfaceinvoke r0.<io.vertx.core.AsyncResult: boolean succeeded()>() in <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.CompositeFutureImpl: boolean succeeded()>
INTERFACE edge: $z0 = interfaceinvoke r0.<io.vertx.core.AsyncResult: boolean succeeded()>() in <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.SucceededFuture: boolean succeeded()>
INTERFACE edge: $r8 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Object result()>() in <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.FutureImpl: java.lang.Object result()>
INTERFACE edge: $r8 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Object result()>() in <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.FailedFuture: java.lang.Object result()>
INTERFACE edge: $r8 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Object result()>() in <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.AsyncResult$1: java.lang.Object result()>
INTERFACE edge: $r8 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Object result()>() in <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.AsyncResult$2: java.lang.Object result()>
INTERFACE edge: $r8 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Object result()>() in <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.CompositeFutureImpl: java.lang.Object result()>
INTERFACE edge: $r8 = interfaceinvoke r0.<io.vertx.core.AsyncResult: java.lang.Object result()>() in <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.SucceededFuture: java.lang.Object result()>
VIRTUAL edge: i0 = virtualinvoke $r9.<java.lang.Integer: int intValue()>() in <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(io.vertx.core.AsyncResult)> ==> <java.lang.Integer: int intValue()>
VIRTUAL edge: $r14 = virtualinvoke $r13.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.netty.handler.codec.http2.Http2Connection connection()>() in <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(io.vertx.core.AsyncResult)> ==> <io.netty.handler.codec.http2.Http2ConnectionHandler: io.netty.handler.codec.http2.Http2Connection connection()>
INTERFACE edge: r15 = interfaceinvoke $r14.<io.netty.handler.codec.http2.Http2Connection: io.netty.handler.codec.http2.Http2Stream stream(int)>(i0) in <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(io.vertx.core.AsyncResult)> ==> <io.netty.handler.codec.http2.Http2Connection: io.netty.handler.codec.http2.Http2Stream stream(int)>
VIRTUAL edge: $r18 = virtualinvoke $r17.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.netty.handler.codec.http2.Http2ConnectionEncoder encoder()>() in <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(io.vertx.core.AsyncResult)> ==> <io.netty.handler.codec.http2.Http2ConnectionHandler: io.netty.handler.codec.http2.Http2ConnectionEncoder encoder()>
INTERFACE edge: $r19 = interfaceinvoke $r18.<io.netty.handler.codec.http2.Http2ConnectionEncoder: io.netty.handler.codec.http2.Http2RemoteFlowController flowController()>() in <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(io.vertx.core.AsyncResult)> ==> <io.netty.handler.codec.http2.Http2ConnectionEncoder: io.netty.handler.codec.http2.Http2RemoteFlowController flowController()>
INTERFACE edge: z1 = interfaceinvoke $r19.<io.netty.handler.codec.http2.Http2RemoteFlowController: boolean isWritable(io.netty.handler.codec.http2.Http2Stream)>(r15) in <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(io.vertx.core.AsyncResult)> ==> <io.netty.handler.codec.http2.Http2RemoteFlowController: boolean isWritable(io.netty.handler.codec.http2.Http2Stream)>
SPECIAL edge: specialinvoke $r20.<io.vertx.core.http.impl.Http2ServerConnection$Push: void <init>(io.vertx.core.http.impl.Http2ServerConnection,io.netty.handler.codec.http2.Http2Stream,java.lang.String,io.vertx.core.http.HttpMethod,java.lang.String,boolean,io.vertx.core.Handler)>($r24, r15, r11, $r23, $r22, z1, $r21) in <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.http.impl.Http2ServerConnection$Push: void <init>(io.vertx.core.http.impl.Http2ServerConnection,io.netty.handler.codec.http2.Http2Stream,java.lang.String,io.vertx.core.http.HttpMethod,java.lang.String,boolean,io.vertx.core.Handler)>
VIRTUAL edge: virtualinvoke $r20.<io.vertx.core.http.impl.Http2ServerConnection$Push: void priority(io.vertx.core.http.StreamPriority)>($r26) in <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.http.impl.VertxHttp2Stream: void priority(io.vertx.core.http.StreamPriority)>
INTERFACE edge: interfaceinvoke $r28.<io.netty.util.collection.IntObjectMap: java.lang.Object put(int,java.lang.Object)>(i0, $r20) in <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(io.vertx.core.AsyncResult)> ==> <io.netty.util.collection.IntObjectMap: java.lang.Object put(int,java.lang.Object)>
VIRTUAL edge: $l4 = virtualinvoke $r38.<java.lang.Long: long longValue()>() in <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(io.vertx.core.AsyncResult)> ==> <java.lang.Long: long longValue()>
INTERFACE edge: interfaceinvoke $r34.<io.vertx.core.impl.ContextInternal: void executeFromIO(io.vertx.core.Handler)>($r35) in <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.ContextImpl: void executeFromIO(io.vertx.core.Handler)>
VIRTUAL edge: virtualinvoke $r40.<java.util.ArrayDeque: boolean add(java.lang.Object)>($r20) in <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(io.vertx.core.AsyncResult)> ==> <java.util.ArrayDeque: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.impl.ContextInternal: void executeFromIO(io.vertx.core.Handler)>($r5) in <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.ContextImpl: void executeFromIO(io.vertx.core.Handler)>
CLINIT edge: $r6 = staticinvoke <io.vertx.core.Future: io.vertx.core.Future future()>() in <io.vertx.core.http.impl.Http2ServerConnection$Push: void <init>(io.vertx.core.http.impl.Http2ServerConnection,io.netty.handler.codec.http2.Http2Stream,java.lang.String,io.vertx.core.http.HttpMethod,java.lang.String,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.Future: void <clinit>()>
STATIC edge: $r6 = staticinvoke <io.vertx.core.Future: io.vertx.core.Future future()>() in <io.vertx.core.http.impl.Http2ServerConnection$Push: void <init>(io.vertx.core.http.impl.Http2ServerConnection,io.netty.handler.codec.http2.Http2Stream,java.lang.String,io.vertx.core.http.HttpMethod,java.lang.String,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.Future: io.vertx.core.Future future()>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.http.impl.HttpUtils$1: void <init>()>() in <io.vertx.core.http.impl.HttpUtils: void <clinit>()> ==> <io.vertx.core.http.impl.HttpUtils$1: void <init>()>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.http.impl.HttpUtils$CustomCompressor: void <init>(io.vertx.core.http.impl.HttpUtils$1)>(null) in <io.vertx.core.http.impl.HttpUtils: void <clinit>()> ==> <io.vertx.core.http.impl.HttpUtils$CustomCompressor: void <init>(io.vertx.core.http.impl.HttpUtils$1)>
SPECIAL edge: specialinvoke $r2.<io.vertx.core.http.impl.Http2ServerConnection$1$lambda_handle_1__38: void <init>(io.vertx.core.Handler,io.vertx.core.AsyncResult)>($r0, $r1) in <io.vertx.core.http.impl.Http2ServerConnection$1$lambda_handle_1__38: io.vertx.core.Handler bootstrap$(io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.http.impl.Http2ServerConnection$1$lambda_handle_1__38: void <init>(io.vertx.core.Handler,io.vertx.core.AsyncResult)>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.http.impl.Http2ServerConnection$1$lambda_handle_0__39: void <init>(io.vertx.core.http.impl.Http2ServerConnection$Push)>($r0) in <io.vertx.core.http.impl.Http2ServerConnection$1$lambda_handle_0__39: io.vertx.core.Handler bootstrap$(io.vertx.core.http.impl.Http2ServerConnection$Push)> ==> <io.vertx.core.http.impl.Http2ServerConnection$1$lambda_handle_0__39: void <init>(io.vertx.core.http.impl.Http2ServerConnection$Push)>
INTERFACE edge: $r2 = interfaceinvoke r0.<io.netty.handler.codec.http2.Http2Headers: java.lang.Object get(java.lang.Object)>($r1) in <io.vertx.core.http.impl.HttpUtils: java.lang.String determineContentEncoding(io.netty.handler.codec.http2.Http2Headers)> ==> <io.netty.handler.codec.http2.Http2Headers: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r8 = interfaceinvoke r0.<io.netty.handler.codec.http2.Http2Headers: java.lang.Object get(java.lang.Object)>($r7) in <io.vertx.core.http.impl.HttpUtils: java.lang.String determineContentEncoding(io.netty.handler.codec.http2.Http2Headers)> ==> <io.netty.handler.codec.http2.Http2Headers: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r10 = interfaceinvoke $r9.<java.lang.CharSequence: java.lang.String toString()>() in <io.vertx.core.http.impl.HttpUtils: java.lang.String determineContentEncoding(io.netty.handler.codec.http2.Http2Headers)> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: $r10 = interfaceinvoke $r9.<java.lang.CharSequence: java.lang.String toString()>() in <io.vertx.core.http.impl.HttpUtils: java.lang.String determineContentEncoding(io.netty.handler.codec.http2.Http2Headers)> ==> <java.lang.String: java.lang.String toString()>
INTERFACE edge: $r10 = interfaceinvoke $r9.<java.lang.CharSequence: java.lang.String toString()>() in <io.vertx.core.http.impl.HttpUtils: java.lang.String determineContentEncoding(io.netty.handler.codec.http2.Http2Headers)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: r5 = virtualinvoke $r4.<io.vertx.core.http.impl.HttpUtils$CustomCompressor: io.netty.handler.codec.compression.ZlibWrapper determineWrapper(java.lang.String)>($r10) in <io.vertx.core.http.impl.HttpUtils: java.lang.String determineContentEncoding(io.netty.handler.codec.http2.Http2Headers)> ==> <io.vertx.core.http.impl.HttpUtils$CustomCompressor: io.netty.handler.codec.compression.ZlibWrapper determineWrapper(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r5.<io.netty.handler.codec.compression.ZlibWrapper: int ordinal()>() in <io.vertx.core.http.impl.HttpUtils: java.lang.String determineContentEncoding(io.netty.handler.codec.http2.Http2Headers)> ==> <io.netty.handler.codec.compression.ZlibWrapper: int ordinal()>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.http.impl.HttpUtils$validateHeaderValue__40: void <init>()>() in <io.vertx.core.http.impl.HttpUtils$validateHeaderValue__40: java.util.function.Consumer bootstrap$()> ==> <io.vertx.core.http.impl.HttpUtils$validateHeaderValue__40: void <init>()>
VIRTUAL edge: $i1 = virtualinvoke $r2.<io.vertx.core.http.HttpVersion: int ordinal()>() in <io.vertx.core.http.impl.HttpUtils$2: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $i2 = virtualinvoke $r4.<io.vertx.core.http.HttpVersion: int ordinal()>() in <io.vertx.core.http.impl.HttpUtils$2: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $i4 = virtualinvoke $r8.<io.vertx.core.http.HttpMethod: int ordinal()>() in <io.vertx.core.http.impl.HttpUtils$2: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $i5 = virtualinvoke $r10.<io.vertx.core.http.HttpMethod: int ordinal()>() in <io.vertx.core.http.impl.HttpUtils$2: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $i6 = virtualinvoke $r12.<io.vertx.core.http.HttpMethod: int ordinal()>() in <io.vertx.core.http.impl.HttpUtils$2: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $i7 = virtualinvoke $r14.<io.vertx.core.http.HttpMethod: int ordinal()>() in <io.vertx.core.http.impl.HttpUtils$2: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $i8 = virtualinvoke $r16.<io.vertx.core.http.HttpMethod: int ordinal()>() in <io.vertx.core.http.impl.HttpUtils$2: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $i9 = virtualinvoke $r18.<io.vertx.core.http.HttpMethod: int ordinal()>() in <io.vertx.core.http.impl.HttpUtils$2: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $i10 = virtualinvoke $r20.<io.vertx.core.http.HttpMethod: int ordinal()>() in <io.vertx.core.http.impl.HttpUtils$2: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $i11 = virtualinvoke $r22.<io.vertx.core.http.HttpMethod: int ordinal()>() in <io.vertx.core.http.impl.HttpUtils$2: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $i12 = virtualinvoke $r24.<io.vertx.core.http.HttpMethod: int ordinal()>() in <io.vertx.core.http.impl.HttpUtils$2: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $i14 = virtualinvoke $r28.<io.netty.handler.codec.compression.ZlibWrapper: int ordinal()>() in <io.vertx.core.http.impl.HttpUtils$2: void <clinit>()> ==> <io.netty.handler.codec.compression.ZlibWrapper: int ordinal()>
VIRTUAL edge: $i15 = virtualinvoke $r30.<io.netty.handler.codec.compression.ZlibWrapper: int ordinal()>() in <io.vertx.core.http.impl.HttpUtils$2: void <clinit>()> ==> <io.netty.handler.codec.compression.ZlibWrapper: int ordinal()>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.http.HttpVersion: void <init>(java.lang.String,int)>("HTTP_1_0", 0) in <io.vertx.core.http.HttpVersion: void <clinit>()> ==> <io.vertx.core.http.HttpVersion: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.http.HttpVersion: void <init>(java.lang.String,int)>("HTTP_1_1", 1) in <io.vertx.core.http.HttpVersion: void <clinit>()> ==> <io.vertx.core.http.HttpVersion: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r2.<io.vertx.core.http.HttpVersion: void <init>(java.lang.String,int)>("HTTP_2", 2) in <io.vertx.core.http.HttpVersion: void <clinit>()> ==> <io.vertx.core.http.HttpVersion: void <init>(java.lang.String,int)>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.HttpMethod: io.vertx.core.http.HttpMethod[] values()> ==> <java.lang.Object: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.HttpMethod: io.vertx.core.http.HttpMethod[] values()> ==> <java.util.HashMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.HttpMethod: io.vertx.core.http.HttpMethod[] values()> ==> <io.vertx.core.net.PemTrustOptions: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.HttpMethod: io.vertx.core.http.HttpMethod[] values()> ==> <java.lang.Enum: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.HttpMethod: io.vertx.core.http.HttpMethod[] values()> ==> <java.util.TreeMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.HttpMethod: io.vertx.core.http.HttpMethod[] values()> ==> <java.util.jar.Attributes: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.HttpMethod: io.vertx.core.http.HttpMethod[] values()> ==> <java.util.EnumMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.HttpMethod: io.vertx.core.http.HttpMethod[] values()> ==> <java.util.TreeSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.HttpMethod: io.vertx.core.http.HttpMethod[] values()> ==> <java.util.ArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.HttpMethod: io.vertx.core.http.HttpMethod[] values()> ==> <java.util.HashSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.HttpMethod: io.vertx.core.http.HttpMethod[] values()> ==> <java.util.Hashtable: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.HttpMethod: io.vertx.core.http.HttpMethod[] values()> ==> <java.util.ArrayDeque: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.HttpMethod: io.vertx.core.http.HttpMethod[] values()> ==> <io.vertx.core.net.PemKeyCertOptions: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.HttpMethod: io.vertx.core.http.HttpMethod[] values()> ==> <io.vertx.core.net.JdkSSLEngineOptions: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.HttpMethod: io.vertx.core.http.HttpMethod[] values()> ==> <java.util.jar.Manifest: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.HttpMethod: io.vertx.core.http.HttpMethod[] values()> ==> <io.vertx.core.net.JksOptions: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.HttpMethod: io.vertx.core.http.HttpMethod[] values()> ==> <io.vertx.core.net.OpenSSLEngineOptions: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.HttpMethod: io.vertx.core.http.HttpMethod[] values()> ==> <java.util.concurrent.CopyOnWriteArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.HttpMethod: io.vertx.core.http.HttpMethod[] values()> ==> <io.vertx.core.net.PfxOptions: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.HttpMethod: io.vertx.core.http.HttpMethod[] values()> ==> <java.util.Date: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.HttpMethod: io.vertx.core.http.HttpMethod[] values()> ==> <java.util.Locale: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.HttpMethod: io.vertx.core.http.HttpMethod[] values()> ==> <java.util.zip.ZipEntry: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.HttpMethod: io.vertx.core.http.HttpMethod[] values()> ==> <java.util.AbstractMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.HttpMethod: io.vertx.core.http.HttpMethod[] values()> ==> <java.util.LinkedList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.HttpMethod: io.vertx.core.http.HttpMethod[] values()> ==> <java.util.IdentityHashMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.HttpVersion: io.vertx.core.http.HttpVersion[] values()> ==> <java.lang.Object: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.HttpVersion: io.vertx.core.http.HttpVersion[] values()> ==> <java.util.HashMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.HttpVersion: io.vertx.core.http.HttpVersion[] values()> ==> <io.vertx.core.net.PemTrustOptions: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.HttpVersion: io.vertx.core.http.HttpVersion[] values()> ==> <java.lang.Enum: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.HttpVersion: io.vertx.core.http.HttpVersion[] values()> ==> <java.util.TreeMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.HttpVersion: io.vertx.core.http.HttpVersion[] values()> ==> <java.util.jar.Attributes: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.HttpVersion: io.vertx.core.http.HttpVersion[] values()> ==> <java.util.EnumMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.HttpVersion: io.vertx.core.http.HttpVersion[] values()> ==> <java.util.TreeSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.HttpVersion: io.vertx.core.http.HttpVersion[] values()> ==> <java.util.ArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.HttpVersion: io.vertx.core.http.HttpVersion[] values()> ==> <java.util.HashSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.HttpVersion: io.vertx.core.http.HttpVersion[] values()> ==> <java.util.Hashtable: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.HttpVersion: io.vertx.core.http.HttpVersion[] values()> ==> <java.util.ArrayDeque: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.HttpVersion: io.vertx.core.http.HttpVersion[] values()> ==> <io.vertx.core.net.PemKeyCertOptions: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.HttpVersion: io.vertx.core.http.HttpVersion[] values()> ==> <io.vertx.core.net.JdkSSLEngineOptions: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.HttpVersion: io.vertx.core.http.HttpVersion[] values()> ==> <java.util.jar.Manifest: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.HttpVersion: io.vertx.core.http.HttpVersion[] values()> ==> <io.vertx.core.net.JksOptions: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.HttpVersion: io.vertx.core.http.HttpVersion[] values()> ==> <io.vertx.core.net.OpenSSLEngineOptions: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.HttpVersion: io.vertx.core.http.HttpVersion[] values()> ==> <java.util.concurrent.CopyOnWriteArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.HttpVersion: io.vertx.core.http.HttpVersion[] values()> ==> <io.vertx.core.net.PfxOptions: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.HttpVersion: io.vertx.core.http.HttpVersion[] values()> ==> <java.util.Date: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.HttpVersion: io.vertx.core.http.HttpVersion[] values()> ==> <java.util.Locale: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.HttpVersion: io.vertx.core.http.HttpVersion[] values()> ==> <java.util.zip.ZipEntry: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.HttpVersion: io.vertx.core.http.HttpVersion[] values()> ==> <java.util.AbstractMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.HttpVersion: io.vertx.core.http.HttpVersion[] values()> ==> <java.util.LinkedList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.http.HttpVersion: io.vertx.core.http.HttpVersion[] values()> ==> <java.util.IdentityHashMap: java.lang.Object clone()>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.http.HttpMethod: void <init>(java.lang.String,int)>("OPTIONS", 0) in <io.vertx.core.http.HttpMethod: void <clinit>()> ==> <io.vertx.core.http.HttpMethod: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.http.HttpMethod: void <init>(java.lang.String,int)>("GET", 1) in <io.vertx.core.http.HttpMethod: void <clinit>()> ==> <io.vertx.core.http.HttpMethod: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r2.<io.vertx.core.http.HttpMethod: void <init>(java.lang.String,int)>("HEAD", 2) in <io.vertx.core.http.HttpMethod: void <clinit>()> ==> <io.vertx.core.http.HttpMethod: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r3.<io.vertx.core.http.HttpMethod: void <init>(java.lang.String,int)>("POST", 3) in <io.vertx.core.http.HttpMethod: void <clinit>()> ==> <io.vertx.core.http.HttpMethod: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r4.<io.vertx.core.http.HttpMethod: void <init>(java.lang.String,int)>("PUT", 4) in <io.vertx.core.http.HttpMethod: void <clinit>()> ==> <io.vertx.core.http.HttpMethod: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r5.<io.vertx.core.http.HttpMethod: void <init>(java.lang.String,int)>("DELETE", 5) in <io.vertx.core.http.HttpMethod: void <clinit>()> ==> <io.vertx.core.http.HttpMethod: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r6.<io.vertx.core.http.HttpMethod: void <init>(java.lang.String,int)>("TRACE", 6) in <io.vertx.core.http.HttpMethod: void <clinit>()> ==> <io.vertx.core.http.HttpMethod: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r7.<io.vertx.core.http.HttpMethod: void <init>(java.lang.String,int)>("CONNECT", 7) in <io.vertx.core.http.HttpMethod: void <clinit>()> ==> <io.vertx.core.http.HttpMethod: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r8.<io.vertx.core.http.HttpMethod: void <init>(java.lang.String,int)>("PATCH", 8) in <io.vertx.core.http.HttpMethod: void <clinit>()> ==> <io.vertx.core.http.HttpMethod: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r9.<io.vertx.core.http.HttpMethod: void <init>(java.lang.String,int)>("OTHER", 9) in <io.vertx.core.http.HttpMethod: void <clinit>()> ==> <io.vertx.core.http.HttpMethod: void <init>(java.lang.String,int)>
INTERFACE edge: interfaceinvoke $r4.<io.vertx.core.net.NetServer: void close(io.vertx.core.Handler)>($r5) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$close$5(io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.net.impl.NetServerImpl: void close(io.vertx.core.Handler)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$close$5(io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.DeploymentManager$lambda_doDeployVerticle_2__17: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$close$5(io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$close$5(io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.FutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$close$5(io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$close$5(io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.SucceededFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$close$5(io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$close$5(io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$close$5(io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.VertxImpl$lambda_joinCluster_1__10: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$close$5(io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$close$5(io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.Starter$lambda_runVerticle_1__1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$close$5(io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$close$5(io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$close$5(io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$close$5(io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.Starter$lambda_startVertx_0__2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$close$5(io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$close$5(io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$close$5(io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_start_3__19: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$close$5(io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.HAManager$lambda_doDeployVerticle_4__7: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$close$5(io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_close_0__29: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$close$5(io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$close$5(io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$close$5(io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$close$5(io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.Starter$lambda_createLoggingHandler_2__3: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$close$5(io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.CompositeFutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$close$5(io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$close$5(io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_finalize_6__18: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$close$5(io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$close$5(io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.VertxImpl$lambda_init_0__9: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$close$5(io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.impl.FailedFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$close$5(io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void lambda$close$5(io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_close_5__30: void handle(java.lang.Object)>
STATIC edge: r23 = staticinvoke <io.vertx.core.net.impl.NetServerImpl$lambda_close_7__48: io.vertx.core.Handler bootstrap$(io.vertx.core.Handler,io.vertx.core.Handler)>(r22, r3) in <io.vertx.core.net.impl.NetServerImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.NetServerImpl$lambda_close_7__48: io.vertx.core.Handler bootstrap$(io.vertx.core.Handler,io.vertx.core.Handler)>
STATIC edge: $r9 = staticinvoke <io.vertx.core.net.impl.NetServerImpl$lambda_close_8__47: io.vertx.core.Handler bootstrap$(io.vertx.core.Handler)>(r23) in <io.vertx.core.net.impl.NetServerImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.NetServerImpl$lambda_close_8__47: io.vertx.core.Handler bootstrap$(io.vertx.core.Handler)>
SPECIAL edge: specialinvoke $r2.<io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_null_4__41: void <init>(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus,io.vertx.core.Handler)>($r0, $r1) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_null_4__41: io.vertx.core.Handler bootstrap$(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus,io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_null_4__41: void <init>(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus,io.vertx.core.Handler)>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.buffer.impl.BufferImpl: void <init>(io.netty.buffer.ByteBuf)>(r1) in <io.vertx.core.buffer.impl.BufferFactoryImpl: io.vertx.core.buffer.Buffer buffer(io.netty.buffer.ByteBuf)> ==> <io.vertx.core.buffer.impl.BufferImpl: void <init>(io.netty.buffer.ByteBuf)>
VIRTUAL edge: $r1 = virtualinvoke $r0.<io.vertx.core.net.impl.PartialPooledByteBufAllocator: io.netty.buffer.ByteBuf heapBuffer(int)>(i0) in <io.vertx.core.net.impl.PartialPooledByteBufAllocator$ForceDirectPoooledByteBufAllocator: io.netty.buffer.ByteBuf heapBuffer(int)> ==> <io.vertx.core.net.impl.PartialPooledByteBufAllocator: io.netty.buffer.ByteBuf heapBuffer(int)>
INTERFACE edge: $r1 = interfaceinvoke $r0.<io.netty.buffer.ByteBufAllocator: io.netty.buffer.ByteBuf heapBuffer(int)>(i0) in <io.vertx.core.net.impl.PartialPooledByteBufAllocator: io.netty.buffer.ByteBuf heapBuffer(int)> ==> <io.vertx.core.net.impl.PartialPooledByteBufAllocator$ForceDirectPoooledByteBufAllocator: io.netty.buffer.ByteBuf heapBuffer(int)>
INTERFACE edge: $r1 = interfaceinvoke $r0.<io.netty.buffer.ByteBufAllocator: io.netty.buffer.ByteBuf heapBuffer(int)>(i0) in <io.vertx.core.net.impl.PartialPooledByteBufAllocator: io.netty.buffer.ByteBuf heapBuffer(int)> ==> <io.netty.buffer.ByteBufAllocator: io.netty.buffer.ByteBuf heapBuffer(int)>
INTERFACE edge: $r1 = interfaceinvoke $r0.<io.netty.buffer.ByteBufAllocator: io.netty.buffer.ByteBuf heapBuffer(int)>(i0) in <io.vertx.core.net.impl.PartialPooledByteBufAllocator: io.netty.buffer.ByteBuf heapBuffer(int)> ==> <io.vertx.core.net.impl.PartialPooledByteBufAllocator: io.netty.buffer.ByteBuf heapBuffer(int)>
SPECIAL edge: specialinvoke $r3.<io.netty.buffer.PooledByteBufAllocator: void <init>(boolean)>(1) in <io.vertx.core.net.impl.PartialPooledByteBufAllocator: void <clinit>()> ==> <io.netty.buffer.PooledByteBufAllocator: void <init>(boolean)>
SPECIAL edge: specialinvoke $r4.<io.netty.buffer.UnpooledByteBufAllocator: void <init>(boolean)>(0) in <io.vertx.core.net.impl.PartialPooledByteBufAllocator: void <clinit>()> ==> <io.netty.buffer.UnpooledByteBufAllocator: void <init>(boolean)>
SPECIAL edge: specialinvoke $r5.<io.vertx.core.net.impl.PartialPooledByteBufAllocator: void <init>()>() in <io.vertx.core.net.impl.PartialPooledByteBufAllocator: void <clinit>()> ==> <io.vertx.core.net.impl.PartialPooledByteBufAllocator: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.Throwable getCause()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.impl.VertxHandler$lambda_static_0__31: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_setClusterViewChangedHandler_12__32: void <init>(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.impl.SucceededFuture: void <init>(java.lang.Object)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.impl.ContextImpl: void <init>(io.vertx.core.impl.VertxInternal,io.netty.channel.EventLoop,io.vertx.core.impl.WorkerPool,io.vertx.core.impl.WorkerPool,java.lang.String,io.vertx.core.json.JsonObject,java.lang.ClassLoader)>(r1, $r2, r3, r4, r5, r6, r7) in <io.vertx.core.impl.ContextImpl: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.impl.WorkerPool,io.vertx.core.impl.WorkerPool,java.lang.String,io.vertx.core.json.JsonObject,java.lang.ClassLoader)> ==> <io.vertx.core.impl.ContextImpl: void <init>(io.vertx.core.impl.VertxInternal,io.netty.channel.EventLoop,io.vertx.core.impl.WorkerPool,io.vertx.core.impl.WorkerPool,java.lang.String,io.vertx.core.json.JsonObject,java.lang.ClassLoader)>
CLINIT edge: $z0 = <io.vertx.core.impl.ContextImpl: boolean DISABLE_TCCL> in <io.vertx.core.impl.ContextImpl: void <init>(io.vertx.core.impl.VertxInternal,io.netty.channel.EventLoop,io.vertx.core.impl.WorkerPool,io.vertx.core.impl.WorkerPool,java.lang.String,io.vertx.core.json.JsonObject,java.lang.ClassLoader)> ==> <io.vertx.core.impl.ContextImpl: void <clinit>()>
STATIC edge: $r8 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>() in <io.vertx.core.impl.ContextImpl: void <init>(io.vertx.core.impl.VertxInternal,io.netty.channel.EventLoop,io.vertx.core.impl.WorkerPool,io.vertx.core.impl.WorkerPool,java.lang.String,io.vertx.core.json.JsonObject,java.lang.ClassLoader)> ==> <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>
CLINIT edge: $r10 = new io.vertx.core.impl.TaskQueue in <io.vertx.core.impl.ContextImpl: void <init>(io.vertx.core.impl.VertxInternal,io.netty.channel.EventLoop,io.vertx.core.impl.WorkerPool,io.vertx.core.impl.WorkerPool,java.lang.String,io.vertx.core.json.JsonObject,java.lang.ClassLoader)> ==> <io.vertx.core.impl.TaskQueue: void <clinit>()>
CLINIT edge: $r0 = staticinvoke <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/impl/TaskQueue;") in <io.vertx.core.impl.TaskQueue: void <clinit>()> ==> <io.vertx.core.logging.LoggerFactory: void <clinit>()>
STATIC edge: $r0 = staticinvoke <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/impl/TaskQueue;") in <io.vertx.core.impl.TaskQueue: void <clinit>()> ==> <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>
CLINIT edge: <io.vertx.core.impl.TaskQueue: io.vertx.core.logging.Logger log> = $r0 in <io.vertx.core.impl.TaskQueue: void <clinit>()> ==> <io.vertx.core.impl.TaskQueue: void <clinit>()>
INTERFACE edge: r1 = interfaceinvoke r0.<io.vertx.core.impl.VertxInternal: io.netty.channel.EventLoopGroup getEventLoopGroup()>() in <io.vertx.core.impl.ContextImpl: io.netty.channel.EventLoop getEventLoop(io.vertx.core.impl.VertxInternal)> ==> <io.vertx.core.impl.VertxImpl: io.netty.channel.EventLoopGroup getEventLoopGroup()>
INTERFACE edge: $r2 = interfaceinvoke r1.<io.netty.channel.EventLoopGroup: io.netty.channel.EventLoop next()>() in <io.vertx.core.impl.ContextImpl: io.netty.channel.EventLoop getEventLoop(io.vertx.core.impl.VertxInternal)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup: io.netty.channel.EventLoop next()>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.impl.CompositeFutureImpl$lambda_static_3__45: void <init>()>() in <io.vertx.core.impl.CompositeFutureImpl$lambda_static_3__45: java.util.function.Function bootstrap$()> ==> <io.vertx.core.impl.CompositeFutureImpl$lambda_static_3__45: void <init>()>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.impl.CompositeFutureImpl$lambda_static_0__44: void <init>()>() in <io.vertx.core.impl.CompositeFutureImpl$lambda_static_0__44: io.vertx.core.Handler bootstrap$()> ==> <io.vertx.core.impl.CompositeFutureImpl$lambda_static_0__44: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable,boolean,boolean)>(r1, null, 0, 0) in <io.vertx.core.impl.NoStackTraceThrowable: void <init>(java.lang.String)> ==> <java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable,boolean,boolean)>
SPECIAL edge: r1 = specialinvoke r0.<io.vertx.core.impl.CompositeFutureImpl: io.vertx.core.Handler setCompleted(java.lang.Throwable)>(null) in <io.vertx.core.impl.CompositeFutureImpl: boolean tryComplete(io.vertx.core.CompositeFuture)> ==> <io.vertx.core.impl.CompositeFutureImpl: io.vertx.core.Handler setCompleted(java.lang.Throwable)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: boolean tryComplete(io.vertx.core.CompositeFuture)> ==> <io.vertx.core.impl.DeploymentManager$lambda_doDeployVerticle_2__17: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: boolean tryComplete(io.vertx.core.CompositeFuture)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: boolean tryComplete(io.vertx.core.CompositeFuture)> ==> <io.vertx.core.impl.FutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: boolean tryComplete(io.vertx.core.CompositeFuture)> ==> <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: boolean tryComplete(io.vertx.core.CompositeFuture)> ==> <io.vertx.core.impl.SucceededFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: boolean tryComplete(io.vertx.core.CompositeFuture)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: boolean tryComplete(io.vertx.core.CompositeFuture)> ==> <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: boolean tryComplete(io.vertx.core.CompositeFuture)> ==> <io.vertx.core.impl.VertxImpl$lambda_joinCluster_1__10: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: boolean tryComplete(io.vertx.core.CompositeFuture)> ==> <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: boolean tryComplete(io.vertx.core.CompositeFuture)> ==> <io.vertx.core.Starter$lambda_runVerticle_1__1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: boolean tryComplete(io.vertx.core.CompositeFuture)> ==> <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: boolean tryComplete(io.vertx.core.CompositeFuture)> ==> <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: boolean tryComplete(io.vertx.core.CompositeFuture)> ==> <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: boolean tryComplete(io.vertx.core.CompositeFuture)> ==> <io.vertx.core.Starter$lambda_startVertx_0__2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: boolean tryComplete(io.vertx.core.CompositeFuture)> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: boolean tryComplete(io.vertx.core.CompositeFuture)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: boolean tryComplete(io.vertx.core.CompositeFuture)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_start_3__19: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: boolean tryComplete(io.vertx.core.CompositeFuture)> ==> <io.vertx.core.impl.HAManager$lambda_doDeployVerticle_4__7: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: boolean tryComplete(io.vertx.core.CompositeFuture)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_close_0__29: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: boolean tryComplete(io.vertx.core.CompositeFuture)> ==> <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: boolean tryComplete(io.vertx.core.CompositeFuture)> ==> <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: boolean tryComplete(io.vertx.core.CompositeFuture)> ==> <io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: boolean tryComplete(io.vertx.core.CompositeFuture)> ==> <io.vertx.core.Starter$lambda_createLoggingHandler_2__3: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: boolean tryComplete(io.vertx.core.CompositeFuture)> ==> <io.vertx.core.impl.CompositeFutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: boolean tryComplete(io.vertx.core.CompositeFuture)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: boolean tryComplete(io.vertx.core.CompositeFuture)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_finalize_6__18: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: boolean tryComplete(io.vertx.core.CompositeFuture)> ==> <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: boolean tryComplete(io.vertx.core.CompositeFuture)> ==> <io.vertx.core.impl.VertxImpl$lambda_init_0__9: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: boolean tryComplete(io.vertx.core.CompositeFuture)> ==> <io.vertx.core.impl.FailedFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: boolean tryComplete(io.vertx.core.CompositeFuture)> ==> <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.impl.CompositeFutureImpl: boolean tryComplete(io.vertx.core.CompositeFuture)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_close_5__30: void handle(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.impl.ContextImpl: void executeAsync(io.vertx.core.Handler)>(r1) in <io.vertx.core.impl.ContextImpl: void runOnContext(io.vertx.core.Handler)> ==> <io.vertx.core.impl.WorkerContext: void executeAsync(io.vertx.core.Handler)>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.impl.ContextImpl: void executeAsync(io.vertx.core.Handler)>(r1) in <io.vertx.core.impl.ContextImpl: void runOnContext(io.vertx.core.Handler)> ==> <io.vertx.core.impl.EventLoopContext: void executeAsync(io.vertx.core.Handler)>
STATIC edge: $r3 = staticinvoke <io.vertx.core.impl.EventLoopContext$lambda_executeAsync_0__54: java.lang.Runnable bootstrap$(io.vertx.core.impl.EventLoopContext,io.vertx.core.Handler)>(r0, r2) in <io.vertx.core.impl.EventLoopContext: void executeAsync(io.vertx.core.Handler)> ==> <io.vertx.core.impl.EventLoopContext$lambda_executeAsync_0__54: java.lang.Runnable bootstrap$(io.vertx.core.impl.EventLoopContext,io.vertx.core.Handler)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.impl.ContextImpl: void runOnContext(io.vertx.core.Handler)>(r1) in <io.vertx.core.impl.EventLoopContext: void runOnContext(io.vertx.core.Handler)> ==> <io.vertx.core.impl.ContextImpl: void runOnContext(io.vertx.core.Handler)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.logging.Log4jLogDelegate: void log(org.apache.log4j.Level,java.lang.Object,java.lang.Throwable)>($r3, r1, r2) in <io.vertx.core.logging.Log4jLogDelegate: void error(java.lang.Object,java.lang.Throwable)> ==> <io.vertx.core.logging.Log4jLogDelegate: void log(org.apache.log4j.Level,java.lang.Object,java.lang.Throwable)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable)>(40, r1, r2) in <io.vertx.core.logging.SLF4JLogDelegate: void error(java.lang.Object,java.lang.Throwable)> ==> <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable)>($r3, r1, r2) in <io.vertx.core.logging.JULLogDelegate: void error(java.lang.Object,java.lang.Throwable)> ==> <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.logging.Log4j2LogDelegate: void log(org.apache.logging.log4j.Level,java.lang.Object,java.lang.Throwable)>($r3, r1, r2) in <io.vertx.core.logging.Log4j2LogDelegate: void error(java.lang.Object,java.lang.Throwable)> ==> <io.vertx.core.logging.Log4j2LogDelegate: void log(org.apache.logging.log4j.Level,java.lang.Object,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.impl.DeploymentManager$lambda_reportResult_6__33: void <init>(io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.impl.FailedFuture: void <init>(java.lang.Throwable)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r4.<io.vertx.core.impl.NoStackTraceThrowable: void <init>(java.lang.String)>(null) in <io.vertx.core.impl.FailedFuture: void <init>(java.lang.Throwable)> ==> <io.vertx.core.impl.NoStackTraceThrowable: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>(java.lang.Throwable)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>(r17) in <io.vertx.core.file.impl.FileResolver: java.io.File resolveFile(java.lang.String)> ==> <java.io.File: void <init>(java.lang.String)>
VIRTUAL edge: $z4 = virtualinvoke $r0.<java.io.File: boolean isAbsolute()>() in <io.vertx.core.file.impl.FileResolver: java.io.File resolveFile(java.lang.String)> ==> <java.io.File: boolean isAbsolute()>
SPECIAL edge: specialinvoke $r13.<java.io.File: void <init>(java.io.File,java.lang.String)>($r14, r17) in <io.vertx.core.file.impl.FileResolver: java.io.File resolveFile(java.lang.String)> ==> <java.io.File: void <init>(java.io.File,java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r18.<java.io.File: boolean exists()>() in <io.vertx.core.file.impl.FileResolver: java.io.File resolveFile(java.lang.String)> ==> <java.io.File: boolean exists()>
VIRTUAL edge: r9 = virtualinvoke r18.<java.io.File: java.lang.String getParent()>() in <io.vertx.core.file.impl.FileResolver: java.io.File resolveFile(java.lang.String)> ==> <java.io.File: java.lang.String getParent()>
SPECIAL edge: specialinvoke $r5.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, r17) in <io.vertx.core.file.impl.FileResolver: java.io.File resolveFile(java.lang.String)> ==> <java.io.File: void <init>(java.io.File,java.lang.String)>
VIRTUAL edge: $z3 = virtualinvoke $r5.<java.io.File: boolean exists()>() in <io.vertx.core.file.impl.FileResolver: java.io.File resolveFile(java.lang.String)> ==> <java.io.File: boolean exists()>
SPECIAL edge: r8 = specialinvoke r1.<io.vertx.core.file.impl.FileResolver: java.lang.ClassLoader getClassLoader()>() in <io.vertx.core.file.impl.FileResolver: java.io.File resolveFile(java.lang.String)> ==> <io.vertx.core.file.impl.FileResolver: java.lang.ClassLoader getClassLoader()>
SPECIAL edge: specialinvoke r1.<io.vertx.core.file.impl.FileResolver: java.io.File unpackUrlResource(java.net.URL,java.lang.String,java.lang.ClassLoader,boolean)>(r19, r9, r8, 1) in <io.vertx.core.file.impl.FileResolver: java.io.File resolveFile(java.lang.String)> ==> <io.vertx.core.file.impl.FileResolver: java.io.File unpackUrlResource(java.net.URL,java.lang.String,java.lang.ClassLoader,boolean)>
SPECIAL edge: $r10 = specialinvoke r1.<io.vertx.core.file.impl.FileResolver: java.io.File unpackUrlResource(java.net.URL,java.lang.String,java.lang.ClassLoader,boolean)>(r20, r17, r8, 0) in <io.vertx.core.file.impl.FileResolver: java.io.File resolveFile(java.lang.String)> ==> <io.vertx.core.file.impl.FileResolver: java.io.File unpackUrlResource(java.net.URL,java.lang.String,java.lang.ClassLoader,boolean)>
VIRTUAL edge: r17 = virtualinvoke r17.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>($r12, "/") in <io.vertx.core.file.impl.FileResolver: java.io.File resolveFile(java.lang.String)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: r19 = virtualinvoke r8.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>(r9) in <io.vertx.core.file.impl.FileResolver: java.io.File resolveFile(java.lang.String)> ==> <java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>
VIRTUAL edge: r19 = virtualinvoke r8.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>(r9) in <io.vertx.core.file.impl.FileResolver: java.io.File resolveFile(java.lang.String)> ==> <io.vertx.core.impl.IsolatingClassLoader: java.net.URL getResource(java.lang.String)>
VIRTUAL edge: r20 = virtualinvoke r8.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>(r17) in <io.vertx.core.file.impl.FileResolver: java.io.File resolveFile(java.lang.String)> ==> <java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>
VIRTUAL edge: r20 = virtualinvoke r8.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>(r17) in <io.vertx.core.file.impl.FileResolver: java.io.File resolveFile(java.lang.String)> ==> <io.vertx.core.impl.IsolatingClassLoader: java.net.URL getResource(java.lang.String)>
STATIC edge: $r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() in <io.vertx.core.file.impl.FileResolver: java.lang.ClassLoader getClassLoader()> ==> <java.lang.Thread: java.lang.Thread currentThread()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.util.Iterator iterator()> ==> <java.util.AbstractList: java.util.Iterator iterator()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.util.Iterator iterator()> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.util.Iterator iterator()> ==> <java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.util.Iterator iterator()> ==> <java.util.ArrayList: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.eventbus.impl.HandlerRegistration: void doUnregister(io.vertx.core.Handler)>(null) in <io.vertx.core.eventbus.impl.HandlerRegistration: void unregister()> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void doUnregister(io.vertx.core.Handler)>
STATIC edge: r15 = staticinvoke <io.vertx.core.eventbus.impl.HandlerRegistration$lambda_doUnregister_2__55: io.vertx.core.Handler bootstrap$(io.vertx.core.Handler,io.vertx.core.Handler)>(r17, r15) in <io.vertx.core.eventbus.impl.HandlerRegistration: void doUnregister(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration$lambda_doUnregister_2__55: io.vertx.core.Handler bootstrap$(io.vertx.core.Handler,io.vertx.core.Handler)>
INTERFACE edge: $r4 = interfaceinvoke r1.<io.vertx.core.spi.VerticleFactory: io.vertx.core.Verticle createVerticle(java.lang.String,java.lang.ClassLoader)>(r2, r3) in <io.vertx.core.impl.DeploymentManager: io.vertx.core.Verticle[] createVerticles(io.vertx.core.spi.VerticleFactory,java.lang.String,int,java.lang.ClassLoader)> ==> <io.vertx.core.impl.JavaVerticleFactory: io.vertx.core.Verticle createVerticle(java.lang.String,java.lang.ClassLoader)>
SPECIAL edge: specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("VerticleFactory::createVerticle returned null") in <io.vertx.core.impl.DeploymentManager: io.vertx.core.Verticle[] createVerticles(io.vertx.core.spi.VerticleFactory,java.lang.String,int,java.lang.ClassLoader)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
CLINIT edge: $r3 = new io.vertx.core.impl.verticle.CompilingClassLoader in <io.vertx.core.impl.JavaVerticleFactory: io.vertx.core.Verticle createVerticle(java.lang.String,java.lang.ClassLoader)> ==> <io.vertx.core.impl.verticle.CompilingClassLoader: void <clinit>()>
STATIC edge: r8 = staticinvoke <io.vertx.core.spi.VerticleFactory: java.lang.String removePrefix(java.lang.String)>(r7) in <io.vertx.core.impl.JavaVerticleFactory: io.vertx.core.Verticle createVerticle(java.lang.String,java.lang.ClassLoader)> ==> <io.vertx.core.spi.VerticleFactory: java.lang.String removePrefix(java.lang.String)>
CLINIT edge: $r0 = staticinvoke <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/impl/verticle/CompilingClassLoader;") in <io.vertx.core.impl.verticle.CompilingClassLoader: void <clinit>()> ==> <io.vertx.core.logging.LoggerFactory: void <clinit>()>
STATIC edge: $r6 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r3) in <io.vertx.core.impl.verticle.CompilingClassLoader: void <clinit>()> ==> <java.util.Collections: java.util.List unmodifiableList(java.util.List)>
STATIC edge: r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("vertx.javaCompilerOptions") in <io.vertx.core.impl.verticle.CompilingClassLoader: void <clinit>()> ==> <java.lang.System: java.lang.String getProperty(java.lang.String)>
STATIC edge: $r0 = staticinvoke <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/impl/verticle/CompilingClassLoader;") in <io.vertx.core.impl.verticle.CompilingClassLoader: void <clinit>()> ==> <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>
CLINIT edge: $r6 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r3) in <io.vertx.core.impl.verticle.CompilingClassLoader: void <clinit>()> ==> <java.util.Collections: void <clinit>()>
CLINIT edge: r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("vertx.javaCompilerOptions") in <io.vertx.core.impl.verticle.CompilingClassLoader: void <clinit>()> ==> <java.lang.System: void <clinit>()>
CLINIT edge: <io.vertx.core.impl.verticle.CompilingClassLoader: io.vertx.core.logging.Logger log> = $r0 in <io.vertx.core.impl.verticle.CompilingClassLoader: void <clinit>()> ==> <io.vertx.core.impl.verticle.CompilingClassLoader: void <clinit>()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.DeploymentOptions: io.vertx.core.json.JsonObject getConfig()>() in <io.vertx.core.impl.DeploymentManager: void doDeploy(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,java.lang.ClassLoader,io.vertx.core.Verticle[])> ==> <io.vertx.core.DeploymentOptions: io.vertx.core.json.JsonObject getConfig()>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.DeploymentOptions: io.vertx.core.json.JsonObject getConfig()>() in <io.vertx.core.impl.DeploymentManager: void doDeploy(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,java.lang.ClassLoader,io.vertx.core.Verticle[])> ==> <io.vertx.core.DeploymentOptions: io.vertx.core.json.JsonObject getConfig()>
VIRTUAL edge: r4 = virtualinvoke r0.<io.vertx.core.DeploymentOptions: java.lang.String getWorkerPoolName()>() in <io.vertx.core.impl.DeploymentManager: void doDeploy(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,java.lang.ClassLoader,io.vertx.core.Verticle[])> ==> <io.vertx.core.DeploymentOptions: java.lang.String getWorkerPoolName()>
VIRTUAL edge: $i1 = virtualinvoke r0.<io.vertx.core.DeploymentOptions: int getWorkerPoolSize()>() in <io.vertx.core.impl.DeploymentManager: void doDeploy(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,java.lang.ClassLoader,io.vertx.core.Verticle[])> ==> <io.vertx.core.DeploymentOptions: int getWorkerPoolSize()>
VIRTUAL edge: $l2 = virtualinvoke r0.<io.vertx.core.DeploymentOptions: long getMaxWorkerExecuteTime()>() in <io.vertx.core.impl.DeploymentManager: void doDeploy(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,java.lang.ClassLoader,io.vertx.core.Verticle[])> ==> <io.vertx.core.DeploymentOptions: long getMaxWorkerExecuteTime()>
VIRTUAL edge: $r30 = virtualinvoke r0.<io.vertx.core.DeploymentOptions: java.util.concurrent.TimeUnit getMaxWorkerExecuteTimeUnit()>() in <io.vertx.core.impl.DeploymentManager: void doDeploy(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,java.lang.ClassLoader,io.vertx.core.Verticle[])> ==> <io.vertx.core.DeploymentOptions: java.util.concurrent.TimeUnit getMaxWorkerExecuteTimeUnit()>
VIRTUAL edge: $z0 = virtualinvoke r0.<io.vertx.core.DeploymentOptions: boolean isWorker()>() in <io.vertx.core.impl.DeploymentManager: void doDeploy(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,java.lang.ClassLoader,io.vertx.core.Verticle[])> ==> <io.vertx.core.DeploymentOptions: boolean isWorker()>
VIRTUAL edge: $z1 = virtualinvoke r0.<io.vertx.core.DeploymentOptions: boolean isMultiThreaded()>() in <io.vertx.core.impl.DeploymentManager: void doDeploy(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,java.lang.ClassLoader,io.vertx.core.Verticle[])> ==> <io.vertx.core.DeploymentOptions: boolean isMultiThreaded()>
SPECIAL edge: specialinvoke $r31.<io.vertx.core.json.JsonObject: void <init>()>() in <io.vertx.core.impl.DeploymentManager: void doDeploy(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,java.lang.ClassLoader,io.vertx.core.Verticle[])> ==> <io.vertx.core.json.JsonObject: void <init>()>
VIRTUAL edge: $r31 = virtualinvoke $r2.<io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()>() in <io.vertx.core.impl.DeploymentManager: void doDeploy(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,java.lang.ClassLoader,io.vertx.core.Verticle[])> ==> <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()>
INTERFACE edge: r6 = interfaceinvoke r5.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.Deployment getDeployment()>() in <io.vertx.core.impl.DeploymentManager: void doDeploy(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,java.lang.ClassLoader,io.vertx.core.Verticle[])> ==> <io.vertx.core.impl.ContextImpl: io.vertx.core.impl.Deployment getDeployment()>
INTERFACE edge: r6 = interfaceinvoke r5.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.Deployment getDeployment()>() in <io.vertx.core.impl.DeploymentManager: void doDeploy(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,java.lang.ClassLoader,io.vertx.core.Verticle[])> ==> <io.vertx.core.impl.EventLoopContext: io.vertx.core.impl.Deployment getDeployment()>
SPECIAL edge: r8 = specialinvoke r7.<io.vertx.core.impl.DeploymentManager: java.lang.String generateDeploymentID()>() in <io.vertx.core.impl.DeploymentManager: void doDeploy(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,java.lang.ClassLoader,io.vertx.core.Verticle[])> ==> <io.vertx.core.impl.DeploymentManager: java.lang.String generateDeploymentID()>
SPECIAL edge: specialinvoke $r9.<io.vertx.core.impl.DeploymentManager$DeploymentImpl: void <init>(io.vertx.core.impl.DeploymentManager,io.vertx.core.impl.Deployment,java.lang.String,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.DeploymentManager$1)>(r7, r6, r8, r10, r0, null) in <io.vertx.core.impl.DeploymentManager: void doDeploy(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,java.lang.ClassLoader,io.vertx.core.Verticle[])> ==> <io.vertx.core.impl.DeploymentManager$DeploymentImpl: void <init>(io.vertx.core.impl.DeploymentManager,io.vertx.core.impl.Deployment,java.lang.String,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.DeploymentManager$1)>
VIRTUAL edge: virtualinvoke $r9.<io.vertx.core.impl.DeploymentManager$DeploymentImpl: void addVerticle(io.vertx.core.impl.DeploymentManager$VerticleHolder)>($r24) in <io.vertx.core.impl.DeploymentManager: void doDeploy(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,java.lang.ClassLoader,io.vertx.core.Verticle[])> ==> <io.vertx.core.impl.DeploymentManager$DeploymentImpl: void addVerticle(io.vertx.core.impl.DeploymentManager$VerticleHolder)>
SPECIAL edge: specialinvoke $r12.<java.util.concurrent.atomic.AtomicInteger: void <init>()>() in <io.vertx.core.impl.DeploymentManager: void doDeploy(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,java.lang.ClassLoader,io.vertx.core.Verticle[])> ==> <java.util.concurrent.atomic.AtomicInteger: void <init>()>
SPECIAL edge: specialinvoke $r14.<java.util.concurrent.atomic.AtomicBoolean: void <init>()>() in <io.vertx.core.impl.DeploymentManager: void doDeploy(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,java.lang.ClassLoader,io.vertx.core.Verticle[])> ==> <java.util.concurrent.atomic.AtomicBoolean: void <init>()>
INTERFACE edge: $r32 = interfaceinvoke $r29.<io.vertx.core.impl.VertxInternal: io.vertx.core.impl.WorkerExecutorInternal createSharedWorkerExecutor(java.lang.String,int,long,java.util.concurrent.TimeUnit)>(r4, $i1, $l2, $r30) in <io.vertx.core.impl.DeploymentManager: void doDeploy(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,java.lang.ClassLoader,io.vertx.core.Verticle[])> ==> <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.WorkerExecutorInternal createSharedWorkerExecutor(java.lang.String,int,long,java.util.concurrent.TimeUnit)>
INTERFACE edge: $r33 = interfaceinvoke $r32.<io.vertx.core.impl.WorkerExecutorInternal: io.vertx.core.impl.WorkerPool getPool()>() in <io.vertx.core.impl.DeploymentManager: void doDeploy(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,java.lang.ClassLoader,io.vertx.core.Verticle[])> ==> <io.vertx.core.impl.WorkerExecutorImpl: io.vertx.core.impl.WorkerPool getPool()>
INTERFACE edge: $r34 = interfaceinvoke $r28.<io.vertx.core.impl.VertxInternal: io.vertx.core.impl.ContextImpl createWorkerContext(boolean,java.lang.String,io.vertx.core.impl.WorkerPool,io.vertx.core.json.JsonObject,java.lang.ClassLoader)>($z1, r8, $r33, r3, r21) in <io.vertx.core.impl.DeploymentManager: void doDeploy(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,java.lang.ClassLoader,io.vertx.core.Verticle[])> ==> <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.ContextImpl createWorkerContext(boolean,java.lang.String,io.vertx.core.impl.WorkerPool,io.vertx.core.json.JsonObject,java.lang.ClassLoader)>
INTERFACE edge: $r34 = interfaceinvoke $r22.<io.vertx.core.impl.VertxInternal: io.vertx.core.impl.EventLoopContext createEventLoopContext(java.lang.String,io.vertx.core.impl.WorkerPool,io.vertx.core.json.JsonObject,java.lang.ClassLoader)>(r8, $r33, r3, r21) in <io.vertx.core.impl.DeploymentManager: void doDeploy(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,java.lang.ClassLoader,io.vertx.core.Verticle[])> ==> <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.EventLoopContext createEventLoopContext(java.lang.String,io.vertx.core.impl.WorkerPool,io.vertx.core.json.JsonObject,java.lang.ClassLoader)>
VIRTUAL edge: virtualinvoke $r34.<io.vertx.core.impl.ContextImpl: void addCloseHook(io.vertx.core.Closeable)>(r19) in <io.vertx.core.impl.DeploymentManager: void doDeploy(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,java.lang.ClassLoader,io.vertx.core.Verticle[])> ==> <io.vertx.core.impl.ContextImpl: void addCloseHook(io.vertx.core.Closeable)>
VIRTUAL edge: virtualinvoke $r34.<io.vertx.core.impl.ContextImpl: void addCloseHook(io.vertx.core.Closeable)>(r19) in <io.vertx.core.impl.DeploymentManager: void doDeploy(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,java.lang.ClassLoader,io.vertx.core.Verticle[])> ==> <io.vertx.core.impl.EventLoopContext: void addCloseHook(io.vertx.core.Closeable)>
VIRTUAL edge: virtualinvoke r23.<io.vertx.core.impl.ContextImpl: void setDeployment(io.vertx.core.impl.Deployment)>($r9) in <io.vertx.core.impl.DeploymentManager: void doDeploy(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,java.lang.ClassLoader,io.vertx.core.Verticle[])> ==> <io.vertx.core.impl.ContextImpl: void setDeployment(io.vertx.core.impl.Deployment)>
VIRTUAL edge: virtualinvoke r23.<io.vertx.core.impl.ContextImpl: void setDeployment(io.vertx.core.impl.Deployment)>($r9) in <io.vertx.core.impl.DeploymentManager: void doDeploy(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,java.lang.ClassLoader,io.vertx.core.Verticle[])> ==> <io.vertx.core.impl.EventLoopContext: void setDeployment(io.vertx.core.impl.Deployment)>
VIRTUAL edge: virtualinvoke r23.<io.vertx.core.impl.ContextImpl: void runOnContext(io.vertx.core.Handler)>($r27) in <io.vertx.core.impl.DeploymentManager: void doDeploy(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,java.lang.ClassLoader,io.vertx.core.Verticle[])> ==> <io.vertx.core.impl.ContextImpl: void runOnContext(io.vertx.core.Handler)>
VIRTUAL edge: virtualinvoke r23.<io.vertx.core.impl.ContextImpl: void runOnContext(io.vertx.core.Handler)>($r27) in <io.vertx.core.impl.DeploymentManager: void doDeploy(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,java.lang.ClassLoader,io.vertx.core.Verticle[])> ==> <io.vertx.core.impl.EventLoopContext: void runOnContext(io.vertx.core.Handler)>
SPECIAL edge: specialinvoke $r24.<io.vertx.core.impl.DeploymentManager$VerticleHolder: void <init>(io.vertx.core.Verticle,io.vertx.core.impl.ContextImpl)>(r18, r23) in <io.vertx.core.impl.DeploymentManager: void doDeploy(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,java.lang.ClassLoader,io.vertx.core.Verticle[])> ==> <io.vertx.core.impl.DeploymentManager$VerticleHolder: void <init>(io.vertx.core.Verticle,io.vertx.core.impl.ContextImpl)>
STATIC edge: $r0 = staticinvoke <java.util.UUID: java.util.UUID randomUUID()>() in <io.vertx.core.impl.DeploymentManager: java.lang.String generateDeploymentID()> ==> <java.util.UUID: java.util.UUID randomUUID()>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.impl.VertxImpl: void executeBlocking(io.vertx.core.Handler,boolean,io.vertx.core.Handler)>(r1, 1, r2) in <io.vertx.core.impl.VertxImpl: void executeBlocking(io.vertx.core.Handler,io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl: void executeBlocking(io.vertx.core.Handler,boolean,io.vertx.core.Handler)>
SPECIAL edge: specialinvoke $r11.<io.vertx.core.impl.DeploymentManager$lambda_doDeploy_8__49: void <init>(io.vertx.core.impl.DeploymentManager,io.vertx.core.Verticle,io.vertx.core.impl.ContextImpl,io.vertx.core.impl.Deployment,io.vertx.core.impl.DeploymentManager$DeploymentImpl,java.lang.String,java.util.concurrent.atomic.AtomicInteger,io.vertx.core.Verticle[],io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean)>($r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10) in <io.vertx.core.impl.DeploymentManager$lambda_doDeploy_8__49: io.vertx.core.Handler bootstrap$(io.vertx.core.impl.DeploymentManager,io.vertx.core.Verticle,io.vertx.core.impl.ContextImpl,io.vertx.core.impl.Deployment,io.vertx.core.impl.DeploymentManager$DeploymentImpl,java.lang.String,java.util.concurrent.atomic.AtomicInteger,io.vertx.core.Verticle[],io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean)> ==> <io.vertx.core.impl.DeploymentManager$lambda_doDeploy_8__49: void <init>(io.vertx.core.impl.DeploymentManager,io.vertx.core.Verticle,io.vertx.core.impl.ContextImpl,io.vertx.core.impl.Deployment,io.vertx.core.impl.DeploymentManager$DeploymentImpl,java.lang.String,java.util.concurrent.atomic.AtomicInteger,io.vertx.core.Verticle[],io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.impl.DeploymentManager$lambda_null_1__43: void <init>(io.vertx.core.impl.DeploymentManager,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,java.lang.ClassLoader,java.util.Iterator)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.impl.DeploymentManager$lambda_null_0__42: void <init>(io.vertx.core.impl.DeploymentManager,io.vertx.core.spi.VerticleFactory,java.lang.String,io.vertx.core.DeploymentOptions,java.lang.ClassLoader)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler$lambda_handle_0__37: void <init>(io.vertx.core.parsetools.impl.JsonParserImpl)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.file.impl.FileSystemImpl$16: io.vertx.core.buffer.Buffer perform()>() in <io.vertx.core.file.impl.FileSystemImpl$16: java.lang.Object perform()> ==> <io.vertx.core.file.impl.FileSystemImpl$16: io.vertx.core.buffer.Buffer perform()>
CLINIT edge: r6 = staticinvoke <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer(byte[])>(r5) in <io.vertx.core.file.impl.FileSystemImpl$16: io.vertx.core.buffer.Buffer perform()> ==> <io.vertx.core.buffer.Buffer: void <clinit>()>
STATIC edge: r6 = staticinvoke <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer(byte[])>(r5) in <io.vertx.core.file.impl.FileSystemImpl$16: io.vertx.core.buffer.Buffer perform()> ==> <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer(byte[])>
STATIC edge: r5 = staticinvoke <java.nio.file.Files: byte[] readAllBytes(java.nio.file.Path)>(r9) in <io.vertx.core.file.impl.FileSystemImpl$16: io.vertx.core.buffer.Buffer perform()> ==> <java.nio.file.Files: byte[] readAllBytes(java.nio.file.Path)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.file.impl.FileSystemImpl$17: java.lang.Void perform()>() in <io.vertx.core.file.impl.FileSystemImpl$17: java.lang.Object perform()> ==> <io.vertx.core.file.impl.FileSystemImpl$17: java.lang.Void perform()>
STATIC edge: staticinvoke <java.nio.file.Files: java.nio.file.Path write(java.nio.file.Path,byte[],java.nio.file.OpenOption[])>(r11, $r6, $r7) in <io.vertx.core.file.impl.FileSystemImpl$17: java.lang.Void perform()> ==> <java.nio.file.Files: java.nio.file.Path write(java.nio.file.Path,byte[],java.nio.file.OpenOption[])>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.file.impl.FileSystemImpl$14: java.lang.String perform()>() in <io.vertx.core.file.impl.FileSystemImpl$14: java.lang.Object perform()> ==> <io.vertx.core.file.impl.FileSystemImpl$14: java.lang.String perform()>
STATIC edge: r25 = staticinvoke <java.nio.file.Files: java.nio.file.Path createTempFile(java.nio.file.Path,java.lang.String,java.lang.String,java.nio.file.attribute.FileAttribute[])>(r14, $r22, $r21, $r19) in <io.vertx.core.file.impl.FileSystemImpl$14: java.lang.String perform()> ==> <java.nio.file.Files: java.nio.file.Path createTempFile(java.nio.file.Path,java.lang.String,java.lang.String,java.nio.file.attribute.FileAttribute[])>
STATIC edge: r25 = staticinvoke <java.nio.file.Files: java.nio.file.Path createTempFile(java.lang.String,java.lang.String,java.nio.file.attribute.FileAttribute[])>($r5, $r4, $r3) in <io.vertx.core.file.impl.FileSystemImpl$14: java.lang.String perform()> ==> <java.nio.file.Files: java.nio.file.Path createTempFile(java.lang.String,java.lang.String,java.nio.file.attribute.FileAttribute[])>
STATIC edge: r25 = staticinvoke <java.nio.file.Files: java.nio.file.Path createTempFile(java.lang.String,java.lang.String,java.nio.file.attribute.FileAttribute[])>($r9, $r8, $r6) in <io.vertx.core.file.impl.FileSystemImpl$14: java.lang.String perform()> ==> <java.nio.file.Files: java.nio.file.Path createTempFile(java.lang.String,java.lang.String,java.nio.file.attribute.FileAttribute[])>
STATIC edge: r25 = staticinvoke <java.nio.file.Files: java.nio.file.Path createTempFile(java.nio.file.Path,java.lang.String,java.lang.String,java.nio.file.attribute.FileAttribute[])>(r14, $r18, $r17, $r16) in <io.vertx.core.file.impl.FileSystemImpl$14: java.lang.String perform()> ==> <java.nio.file.Files: java.nio.file.Path createTempFile(java.nio.file.Path,java.lang.String,java.lang.String,java.nio.file.attribute.FileAttribute[])>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.file.impl.FileSystemImpl$15: java.util.List perform()>() in <io.vertx.core.file.impl.FileSystemImpl$15: java.lang.Object perform()> ==> <io.vertx.core.file.impl.FileSystemImpl$15: java.util.List perform()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.file.impl.FileSystemImpl$1: java.lang.Void perform()>() in <io.vertx.core.file.impl.FileSystemImpl$1: java.lang.Object perform()> ==> <io.vertx.core.file.impl.FileSystemImpl$1: java.lang.Void perform()>
STATIC edge: staticinvoke <java.nio.file.Files: java.nio.file.Path copy(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption[])>(r14, r9, $r10) in <io.vertx.core.file.impl.FileSystemImpl$1: java.lang.Void perform()> ==> <java.nio.file.Files: java.nio.file.Path copy(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption[])>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.file.impl.FileSystemImpl$2: java.lang.Void perform()>() in <io.vertx.core.file.impl.FileSystemImpl$2: java.lang.Object perform()> ==> <io.vertx.core.file.impl.FileSystemImpl$2: java.lang.Void perform()>
STATIC edge: $r13 = staticinvoke <java.util.EnumSet: java.util.EnumSet of(java.lang.Enum)>($r22) in <io.vertx.core.file.impl.FileSystemImpl$2: java.lang.Void perform()> ==> <java.util.EnumSet: java.util.EnumSet of(java.lang.Enum)>
STATIC edge: staticinvoke <java.nio.file.Files: java.nio.file.Path copy(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption[])>(r18, r9, $r10) in <io.vertx.core.file.impl.FileSystemImpl$2: java.lang.Void perform()> ==> <java.nio.file.Files: java.nio.file.Path copy(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption[])>
STATIC edge: staticinvoke <java.nio.file.Files: java.nio.file.Path walkFileTree(java.nio.file.Path,java.util.Set,int,java.nio.file.FileVisitor)>(r18, $r13, 2147483647, $r23) in <io.vertx.core.file.impl.FileSystemImpl$2: java.lang.Void perform()> ==> <java.nio.file.Files: java.nio.file.Path walkFileTree(java.nio.file.Path,java.util.Set,int,java.nio.file.FileVisitor)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.file.impl.FileSystemImpl$3: java.lang.Void perform()>() in <io.vertx.core.file.impl.FileSystemImpl$3: java.lang.Object perform()> ==> <io.vertx.core.file.impl.FileSystemImpl$3: java.lang.Void perform()>
STATIC edge: staticinvoke <java.nio.file.Files: java.nio.file.Path move(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption[])>(r14, r9, $r10) in <io.vertx.core.file.impl.FileSystemImpl$3: java.lang.Void perform()> ==> <java.nio.file.Files: java.nio.file.Path move(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption[])>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.file.impl.FileSystemImpl$18: io.vertx.core.file.AsyncFile perform()>() in <io.vertx.core.file.impl.FileSystemImpl$18: java.lang.Object perform()> ==> <io.vertx.core.file.impl.FileSystemImpl$18: io.vertx.core.file.AsyncFile perform()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.file.impl.FileSystemImpl$4: java.lang.Void perform()>() in <io.vertx.core.file.impl.FileSystemImpl$4: java.lang.Object perform()> ==> <io.vertx.core.file.impl.FileSystemImpl$4: java.lang.Void perform()>
CLINIT edge: $r5 = newarray (java.lang.String)[0] in <io.vertx.core.file.impl.FileSystemImpl$4: java.lang.Void perform()> ==> <java.lang.String: void <clinit>()>
STATIC edge: $z0 = staticinvoke <java.nio.file.Files: boolean exists(java.nio.file.Path,java.nio.file.LinkOption[])>($r6, $r7) in <io.vertx.core.file.impl.FileSystemImpl$4: java.lang.Void perform()> ==> <java.nio.file.Files: boolean exists(java.nio.file.Path,java.nio.file.LinkOption[])>
STATIC edge: $r6 = staticinvoke <java.nio.file.Paths: java.nio.file.Path get(java.lang.String,java.lang.String[])>(r21, $r5) in <io.vertx.core.file.impl.FileSystemImpl$4: java.lang.Void perform()> ==> <java.nio.file.Paths: java.nio.file.Path get(java.lang.String,java.lang.String[])>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.file.impl.FileSystemImpl$19: java.lang.Void perform()>() in <io.vertx.core.file.impl.FileSystemImpl$19: java.lang.Object perform()> ==> <io.vertx.core.file.impl.FileSystemImpl$19: java.lang.Void perform()>
STATIC edge: staticinvoke <java.nio.file.Files: java.nio.file.Path createFile(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>(r13, $r8) in <io.vertx.core.file.impl.FileSystemImpl$19: java.lang.Void perform()> ==> <java.nio.file.Files: java.nio.file.Path createFile(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>
STATIC edge: staticinvoke <java.nio.file.Files: java.nio.file.Path createFile(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>(r13, $r6) in <io.vertx.core.file.impl.FileSystemImpl$19: java.lang.Void perform()> ==> <java.nio.file.Files: java.nio.file.Path createFile(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.file.impl.FileSystemImpl$5: java.lang.Void perform()>() in <io.vertx.core.file.impl.FileSystemImpl$5: java.lang.Object perform()> ==> <io.vertx.core.file.impl.FileSystemImpl$5: java.lang.Void perform()>
STATIC edge: staticinvoke <java.nio.file.Files: java.nio.file.Path walkFileTree(java.nio.file.Path,java.nio.file.FileVisitor)>(r19, $r26) in <io.vertx.core.file.impl.FileSystemImpl$5: java.lang.Void perform()> ==> <java.nio.file.Files: java.nio.file.Path walkFileTree(java.nio.file.Path,java.nio.file.FileVisitor)>
STATIC edge: staticinvoke <java.nio.file.Files: java.nio.file.Path setPosixFilePermissions(java.nio.file.Path,java.util.Set)>(r19, $r6) in <io.vertx.core.file.impl.FileSystemImpl$5: java.lang.Void perform()> ==> <java.nio.file.Files: java.nio.file.Path setPosixFilePermissions(java.nio.file.Path,java.util.Set)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.file.impl.FileSystemImpl$6: java.lang.Void perform()>() in <io.vertx.core.file.impl.FileSystemImpl$6: java.lang.Object perform()> ==> <io.vertx.core.file.impl.FileSystemImpl$6: java.lang.Void perform()>
STATIC edge: $r16 = staticinvoke <java.nio.file.Files: java.nio.file.attribute.FileAttributeView getFileAttributeView(java.nio.file.Path,java.lang.Class,java.nio.file.LinkOption[])>(r28, class "Ljava/nio/file/attribute/PosixFileAttributeView;", $r14) in <io.vertx.core.file.impl.FileSystemImpl$6: java.lang.Void perform()> ==> <java.nio.file.Files: java.nio.file.attribute.FileAttributeView getFileAttributeView(java.nio.file.Path,java.lang.Class,java.nio.file.LinkOption[])>
STATIC edge: staticinvoke <java.nio.file.Files: java.nio.file.Path setOwner(java.nio.file.Path,java.nio.file.attribute.UserPrincipal)>(r28, r9) in <io.vertx.core.file.impl.FileSystemImpl$6: java.lang.Void perform()> ==> <java.nio.file.Files: java.nio.file.Path setOwner(java.nio.file.Path,java.nio.file.attribute.UserPrincipal)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.file.impl.FileSystemImpl$7: io.vertx.core.file.FileProps perform()>() in <io.vertx.core.file.impl.FileSystemImpl$7: java.lang.Object perform()> ==> <io.vertx.core.file.impl.FileSystemImpl$7: io.vertx.core.file.FileProps perform()>
STATIC edge: r12 = staticinvoke <java.nio.file.Files: java.nio.file.attribute.BasicFileAttributes readAttributes(java.nio.file.Path,java.lang.Class,java.nio.file.LinkOption[])>(r11, class "Ljava/nio/file/attribute/BasicFileAttributes;", $r8) in <io.vertx.core.file.impl.FileSystemImpl$7: io.vertx.core.file.FileProps perform()> ==> <java.nio.file.Files: java.nio.file.attribute.BasicFileAttributes readAttributes(java.nio.file.Path,java.lang.Class,java.nio.file.LinkOption[])>
STATIC edge: r12 = staticinvoke <java.nio.file.Files: java.nio.file.attribute.BasicFileAttributes readAttributes(java.nio.file.Path,java.lang.Class,java.nio.file.LinkOption[])>(r11, class "Ljava/nio/file/attribute/BasicFileAttributes;", $r5) in <io.vertx.core.file.impl.FileSystemImpl$7: io.vertx.core.file.FileProps perform()> ==> <java.nio.file.Files: java.nio.file.attribute.BasicFileAttributes readAttributes(java.nio.file.Path,java.lang.Class,java.nio.file.LinkOption[])>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.file.impl.FileSystemImpl$8: java.lang.Void perform()>() in <io.vertx.core.file.impl.FileSystemImpl$8: java.lang.Object perform()> ==> <io.vertx.core.file.impl.FileSystemImpl$8: java.lang.Void perform()>
STATIC edge: staticinvoke <java.nio.file.Files: java.nio.file.Path createSymbolicLink(java.nio.file.Path,java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>(r15, r9, $r11) in <io.vertx.core.file.impl.FileSystemImpl$8: java.lang.Void perform()> ==> <java.nio.file.Files: java.nio.file.Path createSymbolicLink(java.nio.file.Path,java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>
STATIC edge: staticinvoke <java.nio.file.Files: java.nio.file.Path createLink(java.nio.file.Path,java.nio.file.Path)>(r15, r9) in <io.vertx.core.file.impl.FileSystemImpl$8: java.lang.Void perform()> ==> <java.nio.file.Files: java.nio.file.Path createLink(java.nio.file.Path,java.nio.file.Path)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.file.impl.FileSystemImpl$9: java.lang.String perform()>() in <io.vertx.core.file.impl.FileSystemImpl$9: java.lang.Object perform()> ==> <io.vertx.core.file.impl.FileSystemImpl$9: java.lang.String perform()>
STATIC edge: $r5 = staticinvoke <java.nio.file.Files: java.nio.file.Path readSymbolicLink(java.nio.file.Path)>(r9) in <io.vertx.core.file.impl.FileSystemImpl$9: java.lang.String perform()> ==> <java.nio.file.Files: java.nio.file.Path readSymbolicLink(java.nio.file.Path)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.file.impl.FileSystemImpl$20: java.lang.Boolean perform()>() in <io.vertx.core.file.impl.FileSystemImpl$20: java.lang.Object perform()> ==> <io.vertx.core.file.impl.FileSystemImpl$20: java.lang.Boolean perform()>
CLINIT edge: $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0) in <io.vertx.core.file.impl.FileSystemImpl$20: java.lang.Boolean perform()> ==> <java.lang.Boolean: void <clinit>()>
STATIC edge: $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0) in <io.vertx.core.file.impl.FileSystemImpl$20: java.lang.Boolean perform()> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.file.impl.FileSystemImpl$12: java.lang.Void perform()>() in <io.vertx.core.file.impl.FileSystemImpl$12: java.lang.Object perform()> ==> <io.vertx.core.file.impl.FileSystemImpl$12: java.lang.Void perform()>
STATIC edge: staticinvoke <java.nio.file.Files: java.nio.file.Path createDirectories(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>(r19, $r14) in <io.vertx.core.file.impl.FileSystemImpl$12: java.lang.Void perform()> ==> <java.nio.file.Files: java.nio.file.Path createDirectories(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>
STATIC edge: staticinvoke <java.nio.file.Files: java.nio.file.Path createDirectory(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>(r19, $r6) in <io.vertx.core.file.impl.FileSystemImpl$12: java.lang.Void perform()> ==> <java.nio.file.Files: java.nio.file.Path createDirectory(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>
STATIC edge: staticinvoke <java.nio.file.Files: java.nio.file.Path createDirectory(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>(r19, $r8) in <io.vertx.core.file.impl.FileSystemImpl$12: java.lang.Void perform()> ==> <java.nio.file.Files: java.nio.file.Path createDirectory(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>
STATIC edge: staticinvoke <java.nio.file.Files: java.nio.file.Path createDirectories(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>(r19, $r12) in <io.vertx.core.file.impl.FileSystemImpl$12: java.lang.Void perform()> ==> <java.nio.file.Files: java.nio.file.Path createDirectories(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.file.impl.FileSystemImpl$13: java.lang.String perform()>() in <io.vertx.core.file.impl.FileSystemImpl$13: java.lang.Object perform()> ==> <io.vertx.core.file.impl.FileSystemImpl$13: java.lang.String perform()>
STATIC edge: r21 = staticinvoke <java.nio.file.Files: java.nio.file.Path createTempDirectory(java.nio.file.Path,java.lang.String,java.nio.file.attribute.FileAttribute[])>(r12, $r18, $r16) in <io.vertx.core.file.impl.FileSystemImpl$13: java.lang.String perform()> ==> <java.nio.file.Files: java.nio.file.Path createTempDirectory(java.nio.file.Path,java.lang.String,java.nio.file.attribute.FileAttribute[])>
STATIC edge: r21 = staticinvoke <java.nio.file.Files: java.nio.file.Path createTempDirectory(java.lang.String,java.nio.file.attribute.FileAttribute[])>($r4, $r3) in <io.vertx.core.file.impl.FileSystemImpl$13: java.lang.String perform()> ==> <java.nio.file.Files: java.nio.file.Path createTempDirectory(java.lang.String,java.nio.file.attribute.FileAttribute[])>
STATIC edge: r21 = staticinvoke <java.nio.file.Files: java.nio.file.Path createTempDirectory(java.lang.String,java.nio.file.attribute.FileAttribute[])>($r7, $r5) in <io.vertx.core.file.impl.FileSystemImpl$13: java.lang.String perform()> ==> <java.nio.file.Files: java.nio.file.Path createTempDirectory(java.lang.String,java.nio.file.attribute.FileAttribute[])>
STATIC edge: r21 = staticinvoke <java.nio.file.Files: java.nio.file.Path createTempDirectory(java.nio.file.Path,java.lang.String,java.nio.file.attribute.FileAttribute[])>(r12, $r15, $r14) in <io.vertx.core.file.impl.FileSystemImpl$13: java.lang.String perform()> ==> <java.nio.file.Files: java.nio.file.Path createTempDirectory(java.nio.file.Path,java.lang.String,java.nio.file.attribute.FileAttribute[])>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.file.impl.WindowsFileSystem$1: java.lang.Void perform()>() in <io.vertx.core.file.impl.WindowsFileSystem$1: java.lang.Object perform()> ==> <io.vertx.core.file.impl.WindowsFileSystem$1: java.lang.Void perform()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.file.impl.FileSystemImpl$21: io.vertx.core.file.FileSystemProps perform()>() in <io.vertx.core.file.impl.FileSystemImpl$21: java.lang.Object perform()> ==> <io.vertx.core.file.impl.FileSystemImpl$21: io.vertx.core.file.FileSystemProps perform()>
STATIC edge: r5 = staticinvoke <java.nio.file.Files: java.nio.file.FileStore getFileStore(java.nio.file.Path)>(r9) in <io.vertx.core.file.impl.FileSystemImpl$21: io.vertx.core.file.FileSystemProps perform()> ==> <java.nio.file.Files: java.nio.file.FileStore getFileStore(java.nio.file.Path)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.file.impl.FileSystemImpl$10: java.lang.Void perform()>() in <io.vertx.core.file.impl.FileSystemImpl$10: java.lang.Object perform()> ==> <io.vertx.core.file.impl.FileSystemImpl$10: java.lang.Void perform()>
CLINIT edge: staticinvoke <io.vertx.core.file.impl.FileSystemImpl: void delete(java.nio.file.Path,boolean)>(r7, $z0) in <io.vertx.core.file.impl.FileSystemImpl$10: java.lang.Void perform()> ==> <io.vertx.core.file.impl.FileSystemImpl: void <clinit>()>
STATIC edge: staticinvoke <io.vertx.core.file.impl.FileSystemImpl: void delete(java.nio.file.Path,boolean)>(r7, $z0) in <io.vertx.core.file.impl.FileSystemImpl$10: java.lang.Void perform()> ==> <io.vertx.core.file.impl.FileSystemImpl: void delete(java.nio.file.Path,boolean)>
STATIC edge: staticinvoke <java.nio.file.Files: java.nio.file.Path walkFileTree(java.nio.file.Path,java.nio.file.FileVisitor)>(r0, $r4) in <io.vertx.core.file.impl.FileSystemImpl: void delete(java.nio.file.Path,boolean)> ==> <java.nio.file.Files: java.nio.file.Path walkFileTree(java.nio.file.Path,java.nio.file.FileVisitor)>
STATIC edge: staticinvoke <java.nio.file.Files: void delete(java.nio.file.Path)>(r0) in <io.vertx.core.file.impl.FileSystemImpl: void delete(java.nio.file.Path,boolean)> ==> <java.nio.file.Files: void delete(java.nio.file.Path)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.eventbus.impl.MessageImpl: void <init>()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void <init>()> ==> <io.vertx.core.eventbus.impl.MessageImpl: void <init>()>
INTERFACE edge: b0 = interfaceinvoke r0.<io.vertx.core.buffer.Buffer: byte getByte(int)>(0) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void readFromWire(io.vertx.core.buffer.Buffer,io.vertx.core.eventbus.impl.CodecManager)> ==> <io.vertx.core.buffer.impl.BufferImpl: byte getByte(int)>
INTERFACE edge: b1 = interfaceinvoke r0.<io.vertx.core.buffer.Buffer: byte getByte(int)>(i9) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void readFromWire(io.vertx.core.buffer.Buffer,io.vertx.core.eventbus.impl.CodecManager)> ==> <io.vertx.core.buffer.impl.BufferImpl: byte getByte(int)>
INTERFACE edge: i11 = interfaceinvoke r0.<io.vertx.core.buffer.Buffer: int getInt(int)>(i10) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void readFromWire(io.vertx.core.buffer.Buffer,io.vertx.core.eventbus.impl.CodecManager)> ==> <io.vertx.core.buffer.impl.BufferImpl: int getInt(int)>
INTERFACE edge: r30 = interfaceinvoke r0.<io.vertx.core.buffer.Buffer: byte[] getBytes(int,int)>(i12, $i7) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void readFromWire(io.vertx.core.buffer.Buffer,io.vertx.core.eventbus.impl.CodecManager)> ==> <io.vertx.core.buffer.impl.BufferImpl: byte[] getBytes(int,int)>
INTERFACE edge: b13 = interfaceinvoke r0.<io.vertx.core.buffer.Buffer: byte getByte(int)>(i10) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void readFromWire(io.vertx.core.buffer.Buffer,io.vertx.core.eventbus.impl.CodecManager)> ==> <io.vertx.core.buffer.impl.BufferImpl: byte getByte(int)>
INTERFACE edge: i15 = interfaceinvoke r0.<io.vertx.core.buffer.Buffer: int getInt(int)>(i14) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void readFromWire(io.vertx.core.buffer.Buffer,io.vertx.core.eventbus.impl.CodecManager)> ==> <io.vertx.core.buffer.impl.BufferImpl: int getInt(int)>
INTERFACE edge: r32 = interfaceinvoke r0.<io.vertx.core.buffer.Buffer: byte[] getBytes(int,int)>(i16, $i2) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void readFromWire(io.vertx.core.buffer.Buffer,io.vertx.core.eventbus.impl.CodecManager)> ==> <io.vertx.core.buffer.impl.BufferImpl: byte[] getBytes(int,int)>
INTERFACE edge: i18 = interfaceinvoke r0.<io.vertx.core.buffer.Buffer: int getInt(int)>(i17) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void readFromWire(io.vertx.core.buffer.Buffer,io.vertx.core.eventbus.impl.CodecManager)> ==> <io.vertx.core.buffer.impl.BufferImpl: int getInt(int)>
INTERFACE edge: r33 = interfaceinvoke r0.<io.vertx.core.buffer.Buffer: byte[] getBytes(int,int)>(i19, $i6) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void readFromWire(io.vertx.core.buffer.Buffer,io.vertx.core.eventbus.impl.CodecManager)> ==> <io.vertx.core.buffer.impl.BufferImpl: byte[] getBytes(int,int)>
INTERFACE edge: i3 = interfaceinvoke r0.<io.vertx.core.buffer.Buffer: int getInt(int)>(i19) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void readFromWire(io.vertx.core.buffer.Buffer,io.vertx.core.eventbus.impl.CodecManager)> ==> <io.vertx.core.buffer.impl.BufferImpl: int getInt(int)>
INTERFACE edge: i21 = interfaceinvoke r0.<io.vertx.core.buffer.Buffer: int getInt(int)>(i20) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void readFromWire(io.vertx.core.buffer.Buffer,io.vertx.core.eventbus.impl.CodecManager)> ==> <io.vertx.core.buffer.impl.BufferImpl: int getInt(int)>
INTERFACE edge: r34 = interfaceinvoke r0.<io.vertx.core.buffer.Buffer: byte[] getBytes(int,int)>(i22, $i4) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void readFromWire(io.vertx.core.buffer.Buffer,io.vertx.core.eventbus.impl.CodecManager)> ==> <io.vertx.core.buffer.impl.BufferImpl: byte[] getBytes(int,int)>
INTERFACE edge: i5 = interfaceinvoke r0.<io.vertx.core.buffer.Buffer: int getInt(int)>(i23) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void readFromWire(io.vertx.core.buffer.Buffer,io.vertx.core.eventbus.impl.CodecManager)> ==> <io.vertx.core.buffer.impl.BufferImpl: int getInt(int)>
SPECIAL edge: specialinvoke $r24.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void readFromWire(io.vertx.core.buffer.Buffer,io.vertx.core.eventbus.impl.CodecManager)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid wire protocol version ") in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void readFromWire(io.vertx.core.buffer.Buffer,io.vertx.core.eventbus.impl.CodecManager)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(b0) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void readFromWire(io.vertx.core.buffer.Buffer,io.vertx.core.eventbus.impl.CodecManager)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" should be <= ") in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void readFromWire(io.vertx.core.buffer.Buffer,io.vertx.core.eventbus.impl.CodecManager)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(1) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void readFromWire(io.vertx.core.buffer.Buffer,io.vertx.core.eventbus.impl.CodecManager)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void readFromWire(io.vertx.core.buffer.Buffer,io.vertx.core.eventbus.impl.CodecManager)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r23.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r29) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void readFromWire(io.vertx.core.buffer.Buffer,io.vertx.core.eventbus.impl.CodecManager)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r14.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>(r30, $r15) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void readFromWire(io.vertx.core.buffer.Buffer,io.vertx.core.eventbus.impl.CodecManager)> ==> <java.lang.String: void <init>(byte[],java.nio.charset.Charset)>
VIRTUAL edge: $r16 = virtualinvoke r2.<io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec getCodec(java.lang.String)>($r14) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void readFromWire(io.vertx.core.buffer.Buffer,io.vertx.core.eventbus.impl.CodecManager)> ==> <io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec getCodec(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r2.<io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec[] systemCodecs()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void readFromWire(io.vertx.core.buffer.Buffer,io.vertx.core.eventbus.impl.CodecManager)> ==> <io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec[] systemCodecs()>
SPECIAL edge: specialinvoke $r19.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void readFromWire(io.vertx.core.buffer.Buffer,io.vertx.core.eventbus.impl.CodecManager)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No message codec registered with name ") in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void readFromWire(io.vertx.core.buffer.Buffer,io.vertx.core.eventbus.impl.CodecManager)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void readFromWire(io.vertx.core.buffer.Buffer,io.vertx.core.eventbus.impl.CodecManager)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void readFromWire(io.vertx.core.buffer.Buffer,io.vertx.core.eventbus.impl.CodecManager)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r18.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r22) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void readFromWire(io.vertx.core.buffer.Buffer,io.vertx.core.eventbus.impl.CodecManager)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r5.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>(r32, $r6) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void readFromWire(io.vertx.core.buffer.Buffer,io.vertx.core.eventbus.impl.CodecManager)> ==> <java.lang.String: void <init>(byte[],java.nio.charset.Charset)>
SPECIAL edge: specialinvoke $r11.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>(r33, $r12) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void readFromWire(io.vertx.core.buffer.Buffer,io.vertx.core.eventbus.impl.CodecManager)> ==> <java.lang.String: void <init>(byte[],java.nio.charset.Charset)>
SPECIAL edge: specialinvoke $r7.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>(r34, $r8) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void readFromWire(io.vertx.core.buffer.Buffer,io.vertx.core.eventbus.impl.CodecManager)> ==> <java.lang.String: void <init>(byte[],java.nio.charset.Charset)>
SPECIAL edge: specialinvoke $r10.<io.vertx.core.net.impl.ServerID: void <init>(int,java.lang.String)>(i3, $r7) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void readFromWire(io.vertx.core.buffer.Buffer,io.vertx.core.eventbus.impl.CodecManager)> ==> <io.vertx.core.net.impl.ServerID: void <init>(int,java.lang.String)>
STATIC edge: staticinvoke <io.vertx.core.impl.Arguments: void require(boolean,java.lang.String)>($z0, "end must be greater or equal than start") in <io.vertx.core.buffer.impl.BufferImpl: byte[] getBytes(int,int)> ==> <io.vertx.core.impl.Arguments: void require(boolean,java.lang.String)>
INTERFACE edge: $r2 = interfaceinvoke r1.<io.vertx.core.buffer.Buffer: io.netty.buffer.ByteBuf getByteBuf()>() in <io.vertx.core.net.impl.NetSocketImpl: io.vertx.core.net.NetSocket write(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.buffer.impl.BufferImpl: io.netty.buffer.ByteBuf getByteBuf()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.impl.NetSocketImpl: void write(io.netty.buffer.ByteBuf)>($r2) in <io.vertx.core.net.impl.NetSocketImpl: io.vertx.core.net.NetSocket write(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.net.impl.NetSocketImpl: void write(io.netty.buffer.ByteBuf)>
INTERFACE edge: $r4 = interfaceinvoke r3.<io.vertx.core.buffer.Buffer: io.netty.buffer.ByteBuf getByteBuf()>() in <io.vertx.core.http.impl.VertxHttp2NetSocket: io.vertx.core.net.NetSocket write(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.buffer.impl.BufferImpl: io.netty.buffer.ByteBuf getByteBuf()>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.http.impl.VertxHttp2NetSocket: void writeData(io.netty.buffer.ByteBuf,boolean)>($r4, 0) in <io.vertx.core.http.impl.VertxHttp2NetSocket: io.vertx.core.net.NetSocket write(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.http.impl.VertxHttp2Stream: void writeData(io.netty.buffer.ByteBuf,boolean)>
SPECIAL edge: specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r1) in <io.vertx.core.impl.Arguments: void require(boolean,java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.eventbus.impl.MessageImpl: void setBus(io.vertx.core.eventbus.impl.EventBusImpl)>(r1) in <io.vertx.core.eventbus.impl.EventBusImpl: boolean deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.eventbus.impl.MessageImpl: void setBus(io.vertx.core.eventbus.impl.EventBusImpl)>
VIRTUAL edge: $r3 = virtualinvoke r0.<io.vertx.core.eventbus.impl.MessageImpl: java.lang.String address()>() in <io.vertx.core.eventbus.impl.EventBusImpl: boolean deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.eventbus.impl.MessageImpl: java.lang.String address()>
VIRTUAL edge: $z2 = virtualinvoke r0.<io.vertx.core.eventbus.impl.MessageImpl: boolean isSend()>() in <io.vertx.core.eventbus.impl.EventBusImpl: boolean deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.eventbus.impl.MessageImpl: boolean isSend()>
VIRTUAL edge: $r18 = virtualinvoke r0.<io.vertx.core.eventbus.impl.MessageImpl: java.lang.String address()>() in <io.vertx.core.eventbus.impl.EventBusImpl: boolean deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.eventbus.impl.MessageImpl: java.lang.String address()>
VIRTUAL edge: $z5 = virtualinvoke r0.<io.vertx.core.eventbus.impl.MessageImpl: boolean isSend()>() in <io.vertx.core.eventbus.impl.EventBusImpl: boolean deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.eventbus.impl.MessageImpl: boolean isSend()>
VIRTUAL edge: $r13 = virtualinvoke r0.<io.vertx.core.eventbus.impl.MessageImpl: java.lang.String address()>() in <io.vertx.core.eventbus.impl.EventBusImpl: boolean deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.eventbus.impl.MessageImpl: java.lang.String address()>
VIRTUAL edge: $z3 = virtualinvoke r0.<io.vertx.core.eventbus.impl.MessageImpl: boolean isSend()>() in <io.vertx.core.eventbus.impl.EventBusImpl: boolean deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.eventbus.impl.MessageImpl: boolean isSend()>
VIRTUAL edge: $r8 = virtualinvoke r0.<io.vertx.core.eventbus.impl.MessageImpl: java.lang.String address()>() in <io.vertx.core.eventbus.impl.EventBusImpl: boolean deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.eventbus.impl.MessageImpl: java.lang.String address()>
VIRTUAL edge: $z0 = virtualinvoke r0.<io.vertx.core.eventbus.impl.MessageImpl: boolean isSend()>() in <io.vertx.core.eventbus.impl.EventBusImpl: boolean deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.eventbus.impl.MessageImpl: boolean isSend()>
INTERFACE edge: $r4 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>($r3) in <io.vertx.core.eventbus.impl.EventBusImpl: boolean deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $r14 = virtualinvoke r5.<io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object next()>() in <io.vertx.core.eventbus.impl.EventBusImpl: boolean deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object next()>
VIRTUAL edge: $i0 = virtualinvoke r5.<io.vertx.core.impl.utils.ConcurrentCyclicSequence: int size()>() in <io.vertx.core.eventbus.impl.EventBusImpl: boolean deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: int size()>
VIRTUAL edge: r19 = virtualinvoke r5.<io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.util.Iterator iterator()>() in <io.vertx.core.eventbus.impl.EventBusImpl: boolean deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.util.Iterator iterator()>
VIRTUAL edge: $z9 = virtualinvoke r1.<io.vertx.core.eventbus.impl.EventBusImpl: boolean isMessageLocal(io.vertx.core.eventbus.impl.MessageImpl)>(r0) in <io.vertx.core.eventbus.impl.EventBusImpl: boolean deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.eventbus.impl.EventBusImpl: boolean isMessageLocal(io.vertx.core.eventbus.impl.MessageImpl)>
VIRTUAL edge: $z9 = virtualinvoke r1.<io.vertx.core.eventbus.impl.EventBusImpl: boolean isMessageLocal(io.vertx.core.eventbus.impl.MessageImpl)>(r0) in <io.vertx.core.eventbus.impl.EventBusImpl: boolean deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: boolean isMessageLocal(io.vertx.core.eventbus.impl.MessageImpl)>
SPECIAL edge: specialinvoke r1.<io.vertx.core.eventbus.impl.EventBusImpl: void deliverToHandler(io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.impl.HandlerHolder)>(r0, r16) in <io.vertx.core.eventbus.impl.EventBusImpl: boolean deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.eventbus.impl.EventBusImpl: void deliverToHandler(io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.impl.HandlerHolder)>
VIRTUAL edge: $z4 = virtualinvoke r1.<io.vertx.core.eventbus.impl.EventBusImpl: boolean isMessageLocal(io.vertx.core.eventbus.impl.MessageImpl)>(r0) in <io.vertx.core.eventbus.impl.EventBusImpl: boolean deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.eventbus.impl.EventBusImpl: boolean isMessageLocal(io.vertx.core.eventbus.impl.MessageImpl)>
VIRTUAL edge: $z4 = virtualinvoke r1.<io.vertx.core.eventbus.impl.EventBusImpl: boolean isMessageLocal(io.vertx.core.eventbus.impl.MessageImpl)>(r0) in <io.vertx.core.eventbus.impl.EventBusImpl: boolean deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: boolean isMessageLocal(io.vertx.core.eventbus.impl.MessageImpl)>
SPECIAL edge: specialinvoke r1.<io.vertx.core.eventbus.impl.EventBusImpl: void deliverToHandler(io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.impl.HandlerHolder)>(r0, r11) in <io.vertx.core.eventbus.impl.EventBusImpl: boolean deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.eventbus.impl.EventBusImpl: void deliverToHandler(io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.impl.HandlerHolder)>
VIRTUAL edge: $z1 = virtualinvoke r1.<io.vertx.core.eventbus.impl.EventBusImpl: boolean isMessageLocal(io.vertx.core.eventbus.impl.MessageImpl)>(r0) in <io.vertx.core.eventbus.impl.EventBusImpl: boolean deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.eventbus.impl.EventBusImpl: boolean isMessageLocal(io.vertx.core.eventbus.impl.MessageImpl)>
VIRTUAL edge: $z1 = virtualinvoke r1.<io.vertx.core.eventbus.impl.EventBusImpl: boolean isMessageLocal(io.vertx.core.eventbus.impl.MessageImpl)>(r0) in <io.vertx.core.eventbus.impl.EventBusImpl: boolean deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: boolean isMessageLocal(io.vertx.core.eventbus.impl.MessageImpl)>
INTERFACE edge: interfaceinvoke $r17.<io.vertx.core.spi.metrics.EventBusMetrics: void messageReceived(java.lang.String,boolean,boolean,int)>($r18, $z8, $z9, $b1) in <io.vertx.core.eventbus.impl.EventBusImpl: boolean deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.spi.metrics.EventBusMetrics: void messageReceived(java.lang.String,boolean,boolean,int)>
INTERFACE edge: interfaceinvoke $r12.<io.vertx.core.spi.metrics.EventBusMetrics: void messageReceived(java.lang.String,boolean,boolean,int)>($r13, $z10, $z4, $i0) in <io.vertx.core.eventbus.impl.EventBusImpl: boolean deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.spi.metrics.EventBusMetrics: void messageReceived(java.lang.String,boolean,boolean,int)>
INTERFACE edge: $z11 = interfaceinvoke r19.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.eventbus.impl.EventBusImpl: boolean deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: boolean hasNext()>
INTERFACE edge: $z11 = interfaceinvoke r19.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.eventbus.impl.EventBusImpl: boolean deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.json.JsonArray$Iter: boolean hasNext()>
INTERFACE edge: $z11 = interfaceinvoke r19.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.eventbus.impl.EventBusImpl: boolean deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.json.JsonObject$Iter: boolean hasNext()>
INTERFACE edge: $z11 = interfaceinvoke r19.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.eventbus.impl.EventBusImpl: boolean deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: boolean hasNext()>
INTERFACE edge: $z11 = interfaceinvoke r19.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.eventbus.impl.EventBusImpl: boolean deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)> ==> <java.util.Scanner: boolean hasNext()>
INTERFACE edge: $z11 = interfaceinvoke r19.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.eventbus.impl.EventBusImpl: boolean deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: boolean hasNext()>
INTERFACE edge: $z11 = interfaceinvoke r19.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.eventbus.impl.EventBusImpl: boolean deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: boolean hasNext()>
INTERFACE edge: $r10 = interfaceinvoke r19.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.eventbus.impl.EventBusImpl: boolean deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object next()>
INTERFACE edge: $r10 = interfaceinvoke r19.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.eventbus.impl.EventBusImpl: boolean deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.json.JsonArray$Iter: java.lang.Object next()>
INTERFACE edge: $r10 = interfaceinvoke r19.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.eventbus.impl.EventBusImpl: boolean deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.json.JsonObject$Iter: java.lang.Object next()>
INTERFACE edge: $r10 = interfaceinvoke r19.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.eventbus.impl.EventBusImpl: boolean deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: java.lang.Object next()>
INTERFACE edge: $r10 = interfaceinvoke r19.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.eventbus.impl.EventBusImpl: boolean deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)> ==> <java.util.Scanner: java.lang.Object next()>
INTERFACE edge: $r10 = interfaceinvoke r19.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.eventbus.impl.EventBusImpl: boolean deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: java.lang.Object next()>
INTERFACE edge: $r10 = interfaceinvoke r19.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.eventbus.impl.EventBusImpl: boolean deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: java.lang.Object next()>
INTERFACE edge: interfaceinvoke $r7.<io.vertx.core.spi.metrics.EventBusMetrics: void messageReceived(java.lang.String,boolean,boolean,int)>($r8, $z12, $z1, 0) in <io.vertx.core.eventbus.impl.EventBusImpl: boolean deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.spi.metrics.EventBusMetrics: void messageReceived(java.lang.String,boolean,boolean,int)>
STATIC edge: $r8 = staticinvoke <io.vertx.core.eventbus.impl.EventBusImpl$lambda_deliverToHandler_5__62: io.vertx.core.Handler bootstrap$(io.vertx.core.eventbus.impl.HandlerHolder,io.vertx.core.eventbus.DeliveryContext)>(r4, $r2) in <io.vertx.core.eventbus.impl.EventBusImpl: void deliverToHandler(io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.impl.HandlerHolder)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_deliverToHandler_5__62: io.vertx.core.Handler bootstrap$(io.vertx.core.eventbus.impl.HandlerHolder,io.vertx.core.eventbus.DeliveryContext)>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.impl.VertxImpl: void executeBlocking(io.vertx.core.Handler,boolean,io.vertx.core.Handler)>($r1, 0, $r4) in <io.vertx.core.impl.VertxImpl: void createHaManager(io.vertx.core.VertxOptions,io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl: void executeBlocking(io.vertx.core.Handler,boolean,io.vertx.core.Handler)>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.impl.VertxImpl$lambda_createHaManager_2__50: void <init>(io.vertx.core.impl.VertxImpl)>($r0) in <io.vertx.core.impl.VertxImpl$lambda_createHaManager_2__50: io.vertx.core.Handler bootstrap$(io.vertx.core.impl.VertxImpl)> ==> <io.vertx.core.impl.VertxImpl$lambda_createHaManager_2__50: void <init>(io.vertx.core.impl.VertxImpl)>
SPECIAL edge: specialinvoke $r3.<io.vertx.core.impl.VertxImpl$lambda_createHaManager_3__51: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.VertxOptions,io.vertx.core.Handler)>($r0, $r1, $r2) in <io.vertx.core.impl.VertxImpl$lambda_createHaManager_3__51: io.vertx.core.Handler bootstrap$(io.vertx.core.impl.VertxImpl,io.vertx.core.VertxOptions,io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl$lambda_createHaManager_3__51: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.VertxOptions,io.vertx.core.Handler)>
SPECIAL edge: specialinvoke $r6.<io.vertx.core.http.impl.Http2HeadersAdaptor: void <init>(io.netty.handler.codec.http2.Http2Headers)>($r7) in <io.vertx.core.http.impl.Http2ServerRequestImpl: io.vertx.core.MultiMap headers()> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor: void <init>(io.netty.handler.codec.http2.Http2Headers)>
STATIC edge: $r5 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector joining(java.lang.CharSequence)>("; ") in <io.vertx.core.http.impl.Http2HeadersAdaptor: void <init>(io.netty.handler.codec.http2.Http2Headers)> ==> <java.util.stream.Collectors: java.util.stream.Collector joining(java.lang.CharSequence)>
VIRTUAL edge: r3 = virtualinvoke $r2.<io.netty.handler.codec.http.DefaultHttpRequest: io.netty.handler.codec.http.HttpHeaders headers()>() in <io.vertx.core.http.impl.HttpServerRequestImpl: io.vertx.core.MultiMap headers()> ==> <io.netty.handler.codec.http.DefaultHttpRequest: io.netty.handler.codec.http.HttpHeaders headers()>
SPECIAL edge: specialinvoke $r4.<io.vertx.core.http.impl.HeadersAdaptor: void <init>(io.netty.handler.codec.http.HttpHeaders)>(r3) in <io.vertx.core.http.impl.HttpServerRequestImpl: io.vertx.core.MultiMap headers()> ==> <io.vertx.core.http.impl.HeadersAdaptor: void <init>(io.netty.handler.codec.http.HttpHeaders)>
INTERFACE edge: r5 = interfaceinvoke r0.<java.lang.CharSequence: java.lang.String toString()>() in <io.vertx.core.MultiMap: boolean contains(java.lang.CharSequence,java.lang.CharSequence,boolean)> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: r5 = interfaceinvoke r0.<java.lang.CharSequence: java.lang.String toString()>() in <io.vertx.core.MultiMap: boolean contains(java.lang.CharSequence,java.lang.CharSequence,boolean)> ==> <java.lang.String: java.lang.String toString()>
INTERFACE edge: r5 = interfaceinvoke r0.<java.lang.CharSequence: java.lang.String toString()>() in <io.vertx.core.MultiMap: boolean contains(java.lang.CharSequence,java.lang.CharSequence,boolean)> ==> <java.lang.StringBuffer: java.lang.String toString()>
INTERFACE edge: $r3 = interfaceinvoke r1.<io.vertx.core.MultiMap: java.util.List getAll(java.lang.CharSequence)>(r2) in <io.vertx.core.MultiMap: boolean contains(java.lang.CharSequence,java.lang.CharSequence,boolean)> ==> <io.vertx.core.http.impl.HeadersAdaptor: java.util.List getAll(java.lang.CharSequence)>
INTERFACE edge: $r3 = interfaceinvoke r1.<io.vertx.core.MultiMap: java.util.List getAll(java.lang.CharSequence)>(r2) in <io.vertx.core.MultiMap: boolean contains(java.lang.CharSequence,java.lang.CharSequence,boolean)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor: java.util.List getAll(java.lang.CharSequence)>
INTERFACE edge: $r3 = interfaceinvoke r1.<io.vertx.core.MultiMap: java.util.List getAll(java.lang.CharSequence)>(r2) in <io.vertx.core.MultiMap: boolean contains(java.lang.CharSequence,java.lang.CharSequence,boolean)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders: java.util.List getAll(java.lang.CharSequence)>
INTERFACE edge: $r3 = interfaceinvoke r1.<io.vertx.core.MultiMap: java.util.List getAll(java.lang.CharSequence)>(r2) in <io.vertx.core.MultiMap: boolean contains(java.lang.CharSequence,java.lang.CharSequence,boolean)> ==> <io.vertx.core.http.CaseInsensitiveHeaders: java.util.List getAll(java.lang.CharSequence)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.List: java.util.stream.Stream stream()>() in <io.vertx.core.MultiMap: boolean contains(java.lang.CharSequence,java.lang.CharSequence,boolean)> ==> <java.util.List: java.util.stream.Stream stream()>
STATIC edge: $r3 = staticinvoke <io.vertx.core.http.impl.Http2HeadersAdaptor: java.lang.CharSequence toLowerCase(java.lang.CharSequence)>(r1) in <io.vertx.core.http.impl.Http2HeadersAdaptor: java.util.List getAll(java.lang.CharSequence)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor: java.lang.CharSequence toLowerCase(java.lang.CharSequence)>
STATIC edge: $r8 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>() in <io.vertx.core.http.impl.Http2HeadersAdaptor: java.util.List getAll(java.lang.CharSequence)> ==> <java.util.stream.Collectors: java.util.stream.Collector toList()>
STATIC edge: $r6 = staticinvoke <io.vertx.core.http.impl.Http2HeadersAdaptor$toString__475: java.util.function.Function bootstrap$()>() in <io.vertx.core.http.impl.Http2HeadersAdaptor: java.util.List getAll(java.lang.CharSequence)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$toString__475: java.util.function.Function bootstrap$()>
STATIC edge: staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r0, "name") in <io.vertx.core.http.impl.headers.VertxHttpHeaders: java.util.List getAll(java.lang.CharSequence)> ==> <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>
STATIC edge: $z0 = staticinvoke <io.netty.util.AsciiString: boolean contentEqualsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>(r0, r6) in <io.vertx.core.http.impl.headers.VertxHttpHeaders: java.util.List getAll(java.lang.CharSequence)> ==> <io.netty.util.AsciiString: boolean contentEqualsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>
STATIC edge: i0 = staticinvoke <io.netty.util.AsciiString: int hashCode(java.lang.CharSequence)>(r0) in <io.vertx.core.http.impl.headers.VertxHttpHeaders: java.util.List getAll(java.lang.CharSequence)> ==> <io.netty.util.AsciiString: int hashCode(java.lang.CharSequence)>
VIRTUAL edge: $z1 = virtualinvoke $r3.<io.netty.handler.codec.http.HttpHeaders: boolean contains(java.lang.CharSequence,java.lang.CharSequence,boolean)>(r1, r2, z0) in <io.vertx.core.http.impl.HeadersAdaptor: boolean contains(java.lang.CharSequence,java.lang.CharSequence,boolean)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders: boolean contains(java.lang.CharSequence,java.lang.CharSequence,boolean)>
VIRTUAL edge: $r6 = virtualinvoke r7.<io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.CharSequence getValue()>() in <io.vertx.core.http.impl.headers.VertxHttpHeaders: boolean contains(java.lang.CharSequence,java.lang.CharSequence,boolean)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.CharSequence getValue()>
VIRTUAL edge: virtualinvoke r2.<io.vertx.core.http.impl.HttpServerRequestImpl: io.vertx.core.http.HttpServerRequest handler(io.vertx.core.Handler)>($r3) in <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(io.vertx.core.http.impl.HttpServerRequestImpl)> ==> <io.vertx.core.http.impl.HttpServerRequestImpl: io.vertx.core.http.HttpServerRequest handler(io.vertx.core.Handler)>
VIRTUAL edge: virtualinvoke r2.<io.vertx.core.http.impl.HttpServerRequestImpl: io.vertx.core.http.HttpServerRequest endHandler(io.vertx.core.Handler)>($r6) in <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(io.vertx.core.http.impl.HttpServerRequestImpl)> ==> <io.vertx.core.http.impl.HttpServerRequestImpl: io.vertx.core.http.HttpServerRequest endHandler(io.vertx.core.Handler)>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.MultiMap$lambda_contains_1__449: void <init>(java.lang.String)>($r0) in <io.vertx.core.MultiMap$lambda_contains_1__449: java.util.function.Predicate bootstrap$(java.lang.String)> ==> <io.vertx.core.MultiMap$lambda_contains_1__449: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.MultiMap$lambda_contains_2__448: void <init>(java.lang.CharSequence)>($r0) in <io.vertx.core.MultiMap$lambda_contains_2__448: java.util.function.Predicate bootstrap$(java.lang.CharSequence)> ==> <io.vertx.core.MultiMap$lambda_contains_2__448: void <init>(java.lang.CharSequence)>
INTERFACE edge: i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>() in <io.vertx.core.http.impl.Http2HeadersAdaptor: java.lang.CharSequence toLowerCase(java.lang.CharSequence)> ==> <java.lang.StringBuilder: int length()>
INTERFACE edge: i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>() in <io.vertx.core.http.impl.Http2HeadersAdaptor: java.lang.CharSequence toLowerCase(java.lang.CharSequence)> ==> <java.lang.String: int length()>
INTERFACE edge: i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>() in <io.vertx.core.http.impl.Http2HeadersAdaptor: java.lang.CharSequence toLowerCase(java.lang.CharSequence)> ==> <java.lang.StringBuffer: int length()>
INTERFACE edge: c1 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i4) in <io.vertx.core.http.impl.Http2HeadersAdaptor: java.lang.CharSequence toLowerCase(java.lang.CharSequence)> ==> <java.lang.StringBuilder: char charAt(int)>
INTERFACE edge: c1 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i4) in <io.vertx.core.http.impl.Http2HeadersAdaptor: java.lang.CharSequence toLowerCase(java.lang.CharSequence)> ==> <java.lang.String: char charAt(int)>
INTERFACE edge: c1 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i4) in <io.vertx.core.http.impl.Http2HeadersAdaptor: java.lang.CharSequence toLowerCase(java.lang.CharSequence)> ==> <java.lang.StringBuffer: char charAt(int)>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.CharSequence)>(r0) in <io.vertx.core.http.impl.Http2HeadersAdaptor: java.lang.CharSequence toLowerCase(java.lang.CharSequence)> ==> <java.lang.StringBuilder: void <init>(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke r3.<java.lang.StringBuilder: void setCharAt(int,char)>(i4, $c3) in <io.vertx.core.http.impl.Http2HeadersAdaptor: java.lang.CharSequence toLowerCase(java.lang.CharSequence)> ==> <java.lang.StringBuilder: void setCharAt(int,char)>
VIRTUAL edge: $r1 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.http.impl.Http2HeadersAdaptor: java.lang.CharSequence toLowerCase(java.lang.CharSequence)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r4.<io.vertx.core.http.impl.WebSocketRequestHandler$lambda_handle_1__53: void <init>(io.vertx.core.http.impl.WebSocketRequestHandler,boolean[],io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.buffer.Buffer)>($r0, $r1, $r2, $r3) in <io.vertx.core.http.impl.WebSocketRequestHandler$lambda_handle_1__53: io.vertx.core.Handler bootstrap$(io.vertx.core.http.impl.WebSocketRequestHandler,boolean[],io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.http.impl.WebSocketRequestHandler$lambda_handle_1__53: void <init>(io.vertx.core.http.impl.WebSocketRequestHandler,boolean[],io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.buffer.Buffer)>
SPECIAL edge: specialinvoke $r3.<io.vertx.core.http.impl.WebSocketRequestHandler$lambda_handle_0__52: void <init>(boolean[],io.vertx.core.buffer.Buffer,io.vertx.core.http.impl.HttpServerRequestImpl)>($r0, $r1, $r2) in <io.vertx.core.http.impl.WebSocketRequestHandler$lambda_handle_0__52: io.vertx.core.Handler bootstrap$(boolean[],io.vertx.core.buffer.Buffer,io.vertx.core.http.impl.HttpServerRequestImpl)> ==> <io.vertx.core.http.impl.WebSocketRequestHandler$lambda_handle_0__52: void <init>(boolean[],io.vertx.core.buffer.Buffer,io.vertx.core.http.impl.HttpServerRequestImpl)>
INTERFACE edge: $r1 = interfaceinvoke $r0.<io.vertx.core.spi.BufferFactory: io.vertx.core.buffer.Buffer buffer()>() in <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer()> ==> <io.vertx.core.buffer.impl.BufferFactoryImpl: io.vertx.core.buffer.Buffer buffer()>
INTERFACE edge: interfaceinvoke $r1.<io.vertx.core.Vertx: void close()>() in <io.vertx.core.Starter: void handleDeployFailed()> ==> <io.vertx.core.impl.VertxImpl: void close()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.impl.NetSocketImpl: io.vertx.core.spi.metrics.TCPMetrics metrics()>() in <io.vertx.core.net.impl.NetSocketImpl: io.vertx.core.spi.metrics.NetworkMetrics metrics()> ==> <io.vertx.core.net.impl.NetSocketImpl: io.vertx.core.spi.metrics.TCPMetrics metrics()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.impl.Http2ServerConnection: io.vertx.core.spi.metrics.HttpServerMetrics metrics()>() in <io.vertx.core.http.impl.Http2ServerConnection: io.vertx.core.spi.metrics.NetworkMetrics metrics()> ==> <io.vertx.core.http.impl.Http2ServerConnection: io.vertx.core.spi.metrics.HttpServerMetrics metrics()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.impl.Http2ClientConnection: io.vertx.core.spi.metrics.HttpClientMetrics metrics()>() in <io.vertx.core.http.impl.Http2ClientConnection: io.vertx.core.spi.metrics.NetworkMetrics metrics()> ==> <io.vertx.core.http.impl.Http2ClientConnection: io.vertx.core.spi.metrics.HttpClientMetrics metrics()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.impl.Http1xServerConnection: io.vertx.core.spi.metrics.HttpServerMetrics metrics()>() in <io.vertx.core.http.impl.Http1xServerConnection: io.vertx.core.spi.metrics.NetworkMetrics metrics()> ==> <io.vertx.core.http.impl.Http1xServerConnection: io.vertx.core.spi.metrics.HttpServerMetrics metrics()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.impl.Http1xClientConnection: io.vertx.core.spi.metrics.HttpClientMetrics metrics()>() in <io.vertx.core.http.impl.Http1xClientConnection: io.vertx.core.spi.metrics.NetworkMetrics metrics()> ==> <io.vertx.core.http.impl.Http1xClientConnection: io.vertx.core.spi.metrics.HttpClientMetrics metrics()>
SPECIAL edge: $r1 = specialinvoke r0.<io.vertx.core.net.impl.ConnectionBase: io.vertx.core.net.SocketAddress remoteAddress()>() in <io.vertx.core.net.impl.NetSocketImpl: io.vertx.core.net.SocketAddress remoteAddress()> ==> <io.vertx.core.net.impl.ConnectionBase: io.vertx.core.net.SocketAddress remoteAddress()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>() in <io.vertx.core.net.impl.ConnectionBase: io.vertx.core.net.SocketAddress remoteAddress()> ==> <io.vertx.core.net.impl.PartialPooledByteBufAllocator$PooledChannelHandlerContext: io.netty.channel.Channel channel()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>() in <io.vertx.core.net.impl.ConnectionBase: io.vertx.core.net.SocketAddress remoteAddress()> ==> <io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>
SPECIAL edge: specialinvoke $r5.<io.vertx.core.net.impl.SocketAddressImpl: void <init>(java.net.InetSocketAddress)>(r4) in <io.vertx.core.net.impl.ConnectionBase: io.vertx.core.net.SocketAddress remoteAddress()> ==> <io.vertx.core.net.impl.SocketAddressImpl: void <init>(java.net.InetSocketAddress)>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.impl.SucceededFuture: void <init>(java.lang.Object)>(r1) in <io.vertx.core.impl.FutureFactoryImpl: io.vertx.core.Future succeededFuture(java.lang.Object)> ==> <io.vertx.core.impl.SucceededFuture: void <init>(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke r1.<io.vertx.core.buffer.Buffer: io.netty.buffer.ByteBuf getByteBuf()>() in <io.vertx.core.buffer.impl.BufferImpl: io.vertx.core.buffer.Buffer appendBuffer(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.buffer.impl.BufferImpl: io.netty.buffer.ByteBuf getByteBuf()>
VIRTUAL edge: virtualinvoke $r2.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf)>($r3) in <io.vertx.core.buffer.impl.BufferImpl: io.vertx.core.buffer.Buffer appendBuffer(io.vertx.core.buffer.Buffer)> ==> <io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf)>
SPECIAL edge: i12 = specialinvoke r0.<io.vertx.core.parsetools.impl.RecordParserImpl: int parseDelimited()>() in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: int parseDelimited()>
SPECIAL edge: i12 = specialinvoke r0.<io.vertx.core.parsetools.impl.RecordParserImpl: int parseFixed()>() in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: int parseFixed()>
INTERFACE edge: interfaceinvoke r9.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream resume()>() in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.datagram.impl.DatagramSocketImpl: io.vertx.core.streams.ReadStream resume()>
INTERFACE edge: interfaceinvoke r9.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream resume()>() in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.net.impl.NetSocketImpl: io.vertx.core.streams.ReadStream resume()>
INTERFACE edge: interfaceinvoke r9.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream resume()>() in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.file.impl.AsyncFileImpl: io.vertx.core.streams.ReadStream resume()>
INTERFACE edge: interfaceinvoke r9.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream resume()>() in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.http.impl.Http2ServerRequestImpl: io.vertx.core.streams.ReadStream resume()>
INTERFACE edge: interfaceinvoke r9.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream resume()>() in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: io.vertx.core.streams.ReadStream resume()>
INTERFACE edge: interfaceinvoke r9.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream resume()>() in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.http.impl.HttpClientImpl$WebSocketStream: io.vertx.core.streams.ReadStream resume()>
INTERFACE edge: interfaceinvoke r9.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream resume()>() in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.http.impl.VertxHttp2NetSocket: io.vertx.core.streams.ReadStream resume()>
INTERFACE edge: interfaceinvoke r9.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream resume()>() in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.http.impl.HttpServerFileUploadImpl: io.vertx.core.streams.ReadStream resume()>
INTERFACE edge: interfaceinvoke r9.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream resume()>() in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: io.vertx.core.streams.ReadStream resume()>
INTERFACE edge: interfaceinvoke r9.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream resume()>() in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: io.vertx.core.streams.ReadStream resume()>
INTERFACE edge: interfaceinvoke r9.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream resume()>() in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.http.impl.HttpServerRequestImpl: io.vertx.core.streams.ReadStream resume()>
INTERFACE edge: interfaceinvoke r9.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream resume()>() in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.http.impl.Http1xClientConnection$1: io.vertx.core.streams.ReadStream resume()>
INTERFACE edge: interfaceinvoke r9.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream resume()>() in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.streams.ReadStream resume()>
INTERFACE edge: interfaceinvoke r9.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream resume()>() in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.net.impl.NetServerImpl$NetSocketStream: io.vertx.core.streams.ReadStream resume()>
INTERFACE edge: interfaceinvoke r9.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream resume()>() in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.http.impl.HttpClientRequestBase: io.vertx.core.streams.ReadStream resume()>
INTERFACE edge: interfaceinvoke r9.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream resume()>() in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.http.impl.HttpServerImpl$HttpStreamHandler: io.vertx.core.streams.ReadStream resume()>
INTERFACE edge: interfaceinvoke r9.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream resume()>() in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.http.impl.WebSocketImplBase: io.vertx.core.streams.ReadStream resume()>
INTERFACE edge: interfaceinvoke r9.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream resume()>() in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: io.vertx.core.streams.ReadStream resume()>
INTERFACE edge: interfaceinvoke r9.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream resume()>() in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.eventbus.impl.BodyReadStream: io.vertx.core.streams.ReadStream resume()>
INTERFACE edge: r10 = interfaceinvoke $r6.<io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer getBuffer(int,int)>($i8, i12) in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.buffer.impl.BufferImpl: io.vertx.core.buffer.Buffer getBuffer(int,int)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Handler: void handle(java.lang.Object)>(r10) in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.impl.DeploymentManager$lambda_doDeployVerticle_2__17: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Handler: void handle(java.lang.Object)>(r10) in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Handler: void handle(java.lang.Object)>(r10) in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.impl.FutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Handler: void handle(java.lang.Object)>(r10) in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Handler: void handle(java.lang.Object)>(r10) in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.impl.SucceededFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Handler: void handle(java.lang.Object)>(r10) in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Handler: void handle(java.lang.Object)>(r10) in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Handler: void handle(java.lang.Object)>(r10) in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.impl.VertxImpl$lambda_joinCluster_1__10: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Handler: void handle(java.lang.Object)>(r10) in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Handler: void handle(java.lang.Object)>(r10) in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.Starter$lambda_runVerticle_1__1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Handler: void handle(java.lang.Object)>(r10) in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Handler: void handle(java.lang.Object)>(r10) in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Handler: void handle(java.lang.Object)>(r10) in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Handler: void handle(java.lang.Object)>(r10) in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.Starter$lambda_startVertx_0__2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Handler: void handle(java.lang.Object)>(r10) in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Handler: void handle(java.lang.Object)>(r10) in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Handler: void handle(java.lang.Object)>(r10) in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_start_3__19: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Handler: void handle(java.lang.Object)>(r10) in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.impl.HAManager$lambda_doDeployVerticle_4__7: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Handler: void handle(java.lang.Object)>(r10) in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_close_0__29: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Handler: void handle(java.lang.Object)>(r10) in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Handler: void handle(java.lang.Object)>(r10) in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Handler: void handle(java.lang.Object)>(r10) in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Handler: void handle(java.lang.Object)>(r10) in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.Starter$lambda_createLoggingHandler_2__3: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Handler: void handle(java.lang.Object)>(r10) in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.impl.CompositeFutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Handler: void handle(java.lang.Object)>(r10) in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Handler: void handle(java.lang.Object)>(r10) in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_finalize_6__18: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Handler: void handle(java.lang.Object)>(r10) in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Handler: void handle(java.lang.Object)>(r10) in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.impl.VertxImpl$lambda_init_0__9: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Handler: void handle(java.lang.Object)>(r10) in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.impl.FailedFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Handler: void handle(java.lang.Object)>(r10) in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r7.<io.vertx.core.Handler: void handle(java.lang.Object)>(r10) in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_close_5__30: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r11.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream pause()>() in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.datagram.impl.DatagramSocketImpl: io.vertx.core.streams.ReadStream pause()>
INTERFACE edge: interfaceinvoke r11.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream pause()>() in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.net.impl.NetSocketImpl: io.vertx.core.streams.ReadStream pause()>
INTERFACE edge: interfaceinvoke r11.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream pause()>() in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.file.impl.AsyncFileImpl: io.vertx.core.streams.ReadStream pause()>
INTERFACE edge: interfaceinvoke r11.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream pause()>() in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.http.impl.Http2ServerRequestImpl: io.vertx.core.streams.ReadStream pause()>
INTERFACE edge: interfaceinvoke r11.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream pause()>() in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: io.vertx.core.streams.ReadStream pause()>
INTERFACE edge: interfaceinvoke r11.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream pause()>() in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.http.impl.HttpClientImpl$WebSocketStream: io.vertx.core.streams.ReadStream pause()>
INTERFACE edge: interfaceinvoke r11.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream pause()>() in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.http.impl.VertxHttp2NetSocket: io.vertx.core.streams.ReadStream pause()>
INTERFACE edge: interfaceinvoke r11.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream pause()>() in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.http.impl.HttpServerFileUploadImpl: io.vertx.core.streams.ReadStream pause()>
INTERFACE edge: interfaceinvoke r11.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream pause()>() in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: io.vertx.core.streams.ReadStream pause()>
INTERFACE edge: interfaceinvoke r11.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream pause()>() in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: io.vertx.core.streams.ReadStream pause()>
INTERFACE edge: interfaceinvoke r11.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream pause()>() in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.http.impl.HttpServerRequestImpl: io.vertx.core.streams.ReadStream pause()>
INTERFACE edge: interfaceinvoke r11.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream pause()>() in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.http.impl.Http1xClientConnection$1: io.vertx.core.streams.ReadStream pause()>
INTERFACE edge: interfaceinvoke r11.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream pause()>() in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.streams.ReadStream pause()>
INTERFACE edge: interfaceinvoke r11.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream pause()>() in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.net.impl.NetServerImpl$NetSocketStream: io.vertx.core.streams.ReadStream pause()>
INTERFACE edge: interfaceinvoke r11.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream pause()>() in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.http.impl.HttpClientRequestBase: io.vertx.core.streams.ReadStream pause()>
INTERFACE edge: interfaceinvoke r11.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream pause()>() in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.http.impl.HttpServerImpl$HttpStreamHandler: io.vertx.core.streams.ReadStream pause()>
INTERFACE edge: interfaceinvoke r11.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream pause()>() in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.http.impl.WebSocketImplBase: io.vertx.core.streams.ReadStream pause()>
INTERFACE edge: interfaceinvoke r11.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream pause()>() in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: io.vertx.core.streams.ReadStream pause()>
INTERFACE edge: interfaceinvoke r11.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream pause()>() in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.eventbus.impl.BodyReadStream: io.vertx.core.streams.ReadStream pause()>
INTERFACE edge: i13 = interfaceinvoke $r12.<io.vertx.core.buffer.Buffer: int length()>() in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.buffer.impl.BufferImpl: int length()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer getBuffer(int,int)>($i2, i13) in <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()> ==> <io.vertx.core.buffer.impl.BufferImpl: io.vertx.core.buffer.Buffer getBuffer(int,int)>
VIRTUAL edge: r21 = virtualinvoke $r11.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParser: com.fasterxml.jackson.core.JsonToken nextToken()>() in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <com.fasterxml.jackson.core.json.async.NonBlockingJsonParser: com.fasterxml.jackson.core.JsonToken nextToken()>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.impl.DeploymentManager$lambda_doDeployVerticle_2__17: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.impl.FutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.impl.SucceededFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.impl.VertxImpl$lambda_joinCluster_1__10: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.Starter$lambda_runVerticle_1__1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.Starter$lambda_startVertx_0__2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_start_3__19: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.impl.HAManager$lambda_doDeployVerticle_4__7: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_close_0__29: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.Starter$lambda_createLoggingHandler_2__3: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.impl.CompositeFutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_finalize_6__18: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.impl.VertxImpl$lambda_init_0__9: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.impl.FailedFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_close_5__30: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(r23) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.impl.DeploymentManager$lambda_doDeployVerticle_2__17: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(r23) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(r23) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.impl.FutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(r23) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(r23) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.impl.SucceededFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(r23) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(r23) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(r23) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.impl.VertxImpl$lambda_joinCluster_1__10: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(r23) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(r23) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.Starter$lambda_runVerticle_1__1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(r23) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(r23) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(r23) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(r23) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.Starter$lambda_startVertx_0__2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(r23) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(r23) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(r23) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_start_3__19: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(r23) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.impl.HAManager$lambda_doDeployVerticle_4__7: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(r23) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_close_0__29: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(r23) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(r23) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(r23) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(r23) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.Starter$lambda_createLoggingHandler_2__3: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(r23) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.impl.CompositeFutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(r23) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(r23) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_finalize_6__18: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(r23) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(r23) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.impl.VertxImpl$lambda_init_0__9: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(r23) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.impl.FailedFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(r23) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(r23) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_close_5__30: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream pause()>() in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.datagram.impl.DatagramSocketImpl: io.vertx.core.streams.ReadStream pause()>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream pause()>() in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.net.impl.NetSocketImpl: io.vertx.core.streams.ReadStream pause()>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream pause()>() in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.file.impl.AsyncFileImpl: io.vertx.core.streams.ReadStream pause()>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream pause()>() in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.http.impl.Http2ServerRequestImpl: io.vertx.core.streams.ReadStream pause()>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream pause()>() in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: io.vertx.core.streams.ReadStream pause()>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream pause()>() in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.http.impl.HttpClientImpl$WebSocketStream: io.vertx.core.streams.ReadStream pause()>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream pause()>() in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.http.impl.VertxHttp2NetSocket: io.vertx.core.streams.ReadStream pause()>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream pause()>() in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.http.impl.HttpServerFileUploadImpl: io.vertx.core.streams.ReadStream pause()>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream pause()>() in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: io.vertx.core.streams.ReadStream pause()>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream pause()>() in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: io.vertx.core.streams.ReadStream pause()>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream pause()>() in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.http.impl.HttpServerRequestImpl: io.vertx.core.streams.ReadStream pause()>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream pause()>() in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.http.impl.Http1xClientConnection$1: io.vertx.core.streams.ReadStream pause()>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream pause()>() in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.streams.ReadStream pause()>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream pause()>() in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.net.impl.NetServerImpl$NetSocketStream: io.vertx.core.streams.ReadStream pause()>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream pause()>() in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.http.impl.HttpClientRequestBase: io.vertx.core.streams.ReadStream pause()>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream pause()>() in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.http.impl.HttpServerImpl$HttpStreamHandler: io.vertx.core.streams.ReadStream pause()>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream pause()>() in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.http.impl.WebSocketImplBase: io.vertx.core.streams.ReadStream pause()>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream pause()>() in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: io.vertx.core.streams.ReadStream pause()>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream pause()>() in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.eventbus.impl.BodyReadStream: io.vertx.core.streams.ReadStream pause()>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream resume()>() in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.datagram.impl.DatagramSocketImpl: io.vertx.core.streams.ReadStream resume()>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream resume()>() in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.net.impl.NetSocketImpl: io.vertx.core.streams.ReadStream resume()>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream resume()>() in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.file.impl.AsyncFileImpl: io.vertx.core.streams.ReadStream resume()>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream resume()>() in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.http.impl.Http2ServerRequestImpl: io.vertx.core.streams.ReadStream resume()>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream resume()>() in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: io.vertx.core.streams.ReadStream resume()>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream resume()>() in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.http.impl.HttpClientImpl$WebSocketStream: io.vertx.core.streams.ReadStream resume()>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream resume()>() in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.http.impl.VertxHttp2NetSocket: io.vertx.core.streams.ReadStream resume()>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream resume()>() in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.http.impl.HttpServerFileUploadImpl: io.vertx.core.streams.ReadStream resume()>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream resume()>() in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: io.vertx.core.streams.ReadStream resume()>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream resume()>() in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: io.vertx.core.streams.ReadStream resume()>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream resume()>() in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.http.impl.HttpServerRequestImpl: io.vertx.core.streams.ReadStream resume()>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream resume()>() in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.http.impl.Http1xClientConnection$1: io.vertx.core.streams.ReadStream resume()>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream resume()>() in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.streams.ReadStream resume()>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream resume()>() in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.net.impl.NetServerImpl$NetSocketStream: io.vertx.core.streams.ReadStream resume()>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream resume()>() in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.http.impl.HttpClientRequestBase: io.vertx.core.streams.ReadStream resume()>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream resume()>() in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.http.impl.HttpServerImpl$HttpStreamHandler: io.vertx.core.streams.ReadStream resume()>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream resume()>() in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.http.impl.WebSocketImplBase: io.vertx.core.streams.ReadStream resume()>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream resume()>() in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: io.vertx.core.streams.ReadStream resume()>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream resume()>() in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.eventbus.impl.BodyReadStream: io.vertx.core.streams.ReadStream resume()>
INTERFACE edge: interfaceinvoke $r20.<io.vertx.core.Handler: void handle(java.lang.Object)>($r16) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.impl.DeploymentManager$lambda_doDeployVerticle_2__17: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r20.<io.vertx.core.Handler: void handle(java.lang.Object)>($r16) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r20.<io.vertx.core.Handler: void handle(java.lang.Object)>($r16) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.impl.FutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r20.<io.vertx.core.Handler: void handle(java.lang.Object)>($r16) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r20.<io.vertx.core.Handler: void handle(java.lang.Object)>($r16) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.impl.SucceededFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r20.<io.vertx.core.Handler: void handle(java.lang.Object)>($r16) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r20.<io.vertx.core.Handler: void handle(java.lang.Object)>($r16) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r20.<io.vertx.core.Handler: void handle(java.lang.Object)>($r16) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.impl.VertxImpl$lambda_joinCluster_1__10: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r20.<io.vertx.core.Handler: void handle(java.lang.Object)>($r16) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r20.<io.vertx.core.Handler: void handle(java.lang.Object)>($r16) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.Starter$lambda_runVerticle_1__1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r20.<io.vertx.core.Handler: void handle(java.lang.Object)>($r16) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r20.<io.vertx.core.Handler: void handle(java.lang.Object)>($r16) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r20.<io.vertx.core.Handler: void handle(java.lang.Object)>($r16) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r20.<io.vertx.core.Handler: void handle(java.lang.Object)>($r16) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.Starter$lambda_startVertx_0__2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r20.<io.vertx.core.Handler: void handle(java.lang.Object)>($r16) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r20.<io.vertx.core.Handler: void handle(java.lang.Object)>($r16) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r20.<io.vertx.core.Handler: void handle(java.lang.Object)>($r16) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_start_3__19: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r20.<io.vertx.core.Handler: void handle(java.lang.Object)>($r16) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.impl.HAManager$lambda_doDeployVerticle_4__7: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r20.<io.vertx.core.Handler: void handle(java.lang.Object)>($r16) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_close_0__29: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r20.<io.vertx.core.Handler: void handle(java.lang.Object)>($r16) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r20.<io.vertx.core.Handler: void handle(java.lang.Object)>($r16) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r20.<io.vertx.core.Handler: void handle(java.lang.Object)>($r16) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r20.<io.vertx.core.Handler: void handle(java.lang.Object)>($r16) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.Starter$lambda_createLoggingHandler_2__3: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r20.<io.vertx.core.Handler: void handle(java.lang.Object)>($r16) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.impl.CompositeFutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r20.<io.vertx.core.Handler: void handle(java.lang.Object)>($r16) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r20.<io.vertx.core.Handler: void handle(java.lang.Object)>($r16) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_finalize_6__18: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r20.<io.vertx.core.Handler: void handle(java.lang.Object)>($r16) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r20.<io.vertx.core.Handler: void handle(java.lang.Object)>($r16) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.impl.VertxImpl$lambda_init_0__9: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r20.<io.vertx.core.Handler: void handle(java.lang.Object)>($r16) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.impl.FailedFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r20.<io.vertx.core.Handler: void handle(java.lang.Object)>($r16) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r20.<io.vertx.core.Handler: void handle(java.lang.Object)>($r16) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_close_5__30: void handle(java.lang.Object)>
VIRTUAL edge: $r19 = virtualinvoke $r27.<java.io.IOException: java.lang.String getMessage()>() in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <java.lang.Throwable: java.lang.String getMessage()>
VIRTUAL edge: $r19 = virtualinvoke $r27.<java.io.IOException: java.lang.String getMessage()>() in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <java.nio.charset.MalformedInputException: java.lang.String getMessage()>
VIRTUAL edge: $r19 = virtualinvoke $r27.<java.io.IOException: java.lang.String getMessage()>() in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
SPECIAL edge: specialinvoke $r26.<io.vertx.core.json.DecodeException: void <init>(java.lang.String)>($r19) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.json.DecodeException: void <init>(java.lang.String)>
INTERFACE edge: interfaceinvoke $r15.<io.vertx.core.Handler: void handle(java.lang.Object)>($r13) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.impl.DeploymentManager$lambda_doDeployVerticle_2__17: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r15.<io.vertx.core.Handler: void handle(java.lang.Object)>($r13) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r15.<io.vertx.core.Handler: void handle(java.lang.Object)>($r13) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.impl.FutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r15.<io.vertx.core.Handler: void handle(java.lang.Object)>($r13) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r15.<io.vertx.core.Handler: void handle(java.lang.Object)>($r13) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.impl.SucceededFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r15.<io.vertx.core.Handler: void handle(java.lang.Object)>($r13) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r15.<io.vertx.core.Handler: void handle(java.lang.Object)>($r13) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r15.<io.vertx.core.Handler: void handle(java.lang.Object)>($r13) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.impl.VertxImpl$lambda_joinCluster_1__10: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r15.<io.vertx.core.Handler: void handle(java.lang.Object)>($r13) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r15.<io.vertx.core.Handler: void handle(java.lang.Object)>($r13) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.Starter$lambda_runVerticle_1__1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r15.<io.vertx.core.Handler: void handle(java.lang.Object)>($r13) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r15.<io.vertx.core.Handler: void handle(java.lang.Object)>($r13) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r15.<io.vertx.core.Handler: void handle(java.lang.Object)>($r13) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r15.<io.vertx.core.Handler: void handle(java.lang.Object)>($r13) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.Starter$lambda_startVertx_0__2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r15.<io.vertx.core.Handler: void handle(java.lang.Object)>($r13) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r15.<io.vertx.core.Handler: void handle(java.lang.Object)>($r13) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r15.<io.vertx.core.Handler: void handle(java.lang.Object)>($r13) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_start_3__19: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r15.<io.vertx.core.Handler: void handle(java.lang.Object)>($r13) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.impl.HAManager$lambda_doDeployVerticle_4__7: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r15.<io.vertx.core.Handler: void handle(java.lang.Object)>($r13) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_close_0__29: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r15.<io.vertx.core.Handler: void handle(java.lang.Object)>($r13) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r15.<io.vertx.core.Handler: void handle(java.lang.Object)>($r13) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r15.<io.vertx.core.Handler: void handle(java.lang.Object)>($r13) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r15.<io.vertx.core.Handler: void handle(java.lang.Object)>($r13) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.Starter$lambda_createLoggingHandler_2__3: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r15.<io.vertx.core.Handler: void handle(java.lang.Object)>($r13) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.impl.CompositeFutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r15.<io.vertx.core.Handler: void handle(java.lang.Object)>($r13) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r15.<io.vertx.core.Handler: void handle(java.lang.Object)>($r13) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_finalize_6__18: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r15.<io.vertx.core.Handler: void handle(java.lang.Object)>($r13) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r15.<io.vertx.core.Handler: void handle(java.lang.Object)>($r13) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.impl.VertxImpl$lambda_init_0__9: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r15.<io.vertx.core.Handler: void handle(java.lang.Object)>($r13) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.impl.FailedFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r15.<io.vertx.core.Handler: void handle(java.lang.Object)>($r13) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r15.<io.vertx.core.Handler: void handle(java.lang.Object)>($r13) in <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_close_5__30: void handle(java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.json.JsonObject toJson()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: io.vertx.core.net.NetServerOptions getServerOptions()> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.json.JsonObject toJson()>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.net.NetServerOptions: void <init>(io.vertx.core.json.JsonObject)>($r3) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: io.vertx.core.net.NetServerOptions getServerOptions()> ==> <io.vertx.core.net.NetServerOptions: void <init>(io.vertx.core.json.JsonObject)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.KeyCertOptions getKeyCertOptions()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: io.vertx.core.net.NetServerOptions getServerOptions()> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.KeyCertOptions getKeyCertOptions()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.TrustOptions getTrustOptions()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: io.vertx.core.net.NetServerOptions getServerOptions()> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TrustOptions getTrustOptions()>
STATIC edge: staticinvoke <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)>(r1, r0) in <io.vertx.core.net.NetServerOptions: void <init>(io.vertx.core.json.JsonObject)> ==> <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)>
CLINIT edge: $r26 = staticinvoke <io.vertx.core.http.ClientAuth: io.vertx.core.http.ClientAuth valueOf(java.lang.String)>($r25) in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.http.ClientAuth: void <clinit>()>
STATIC edge: $r26 = staticinvoke <io.vertx.core.http.ClientAuth: io.vertx.core.http.ClientAuth valueOf(java.lang.String)>($r25) in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.http.ClientAuth: io.vertx.core.http.ClientAuth valueOf(java.lang.String)>
STATIC edge: $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lio/vertx/core/http/ClientAuth;", r0) in <io.vertx.core.http.ClientAuth: io.vertx.core.http.ClientAuth valueOf(java.lang.String)> ==> <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.net.impl.NetServerImpl: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.net.NetServerOptions)>(r1, r2) in <io.vertx.core.impl.VertxImpl: io.vertx.core.net.NetServer createNetServer(io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.net.impl.NetServerImpl: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.net.NetServerOptions)>
FINALIZE edge: null in <io.vertx.core.net.impl.NetServerImpl: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.net.impl.NetServerImpl: void finalize()>
CLINIT edge: $r9 = new io.vertx.core.net.impl.SSLHelper in <io.vertx.core.net.impl.NetServerImpl: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.net.impl.SSLHelper: void <clinit>()>
CLINIT edge: $r7 = new io.vertx.core.net.NetServerOptions in <io.vertx.core.net.impl.NetServerImpl: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.net.TCPSSLOptions: void <clinit>()>
CLINIT edge: $r7 = new io.vertx.core.net.NetServerOptions in <io.vertx.core.net.impl.NetServerImpl: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.net.NetServerOptions: void <clinit>()>
CLINIT edge: $r3 = new io.vertx.core.net.impl.HandlerManager in <io.vertx.core.net.impl.NetServerImpl: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.net.impl.HandlerManager: void <clinit>()>
CLINIT edge: <io.vertx.core.net.impl.SSLHelper: java.util.Map PROTOCOL_NAME_MAPPING> = $r0 in <io.vertx.core.net.impl.SSLHelper: void <clinit>()> ==> <io.vertx.core.net.impl.SSLHelper: void <clinit>()>
STATIC edge: $r13 = staticinvoke <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/net/impl/SSLHelper;") in <io.vertx.core.net.impl.SSLHelper: void <clinit>()> ==> <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>
STATIC edge: $r18 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(r15) in <io.vertx.core.net.impl.SSLHelper: void <clinit>()> ==> <java.util.Collections: java.util.List unmodifiableList(java.util.List)>
STATIC edge: staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>($r1, $r3) in <io.vertx.core.net.impl.SSLHelper: void <clinit>()> ==> <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>
STATIC edge: r16 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>("TLS") in <io.vertx.core.net.impl.SSLHelper: void <clinit>()> ==> <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>
CLINIT edge: $r13 = staticinvoke <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/net/impl/SSLHelper;") in <io.vertx.core.net.impl.SSLHelper: void <clinit>()> ==> <io.vertx.core.logging.LoggerFactory: void <clinit>()>
CLINIT edge: $r4 = <io.vertx.core.http.HttpVersion: io.vertx.core.http.HttpVersion HTTP_2> in <io.vertx.core.net.impl.SSLHelper: void <clinit>()> ==> <io.vertx.core.http.HttpVersion: void <clinit>()>
CLINIT edge: <io.vertx.core.net.impl.SSLHelper: java.util.List DEFAULT_JDK_CIPHER_SUITE> = $r18 in <io.vertx.core.net.impl.SSLHelper: void <clinit>()> ==> <io.vertx.core.net.impl.SSLHelper: void <clinit>()>
CLINIT edge: $r18 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(r15) in <io.vertx.core.net.impl.SSLHelper: void <clinit>()> ==> <java.util.Collections: void <clinit>()>
CLINIT edge: staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>($r1, $r3) in <io.vertx.core.net.impl.SSLHelper: void <clinit>()> ==> <java.util.Collections: void <clinit>()>
CLINIT edge: $r0 = staticinvoke <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/net/impl/HandlerManager;") in <io.vertx.core.net.impl.HandlerManager: void <clinit>()> ==> <io.vertx.core.logging.LoggerFactory: void <clinit>()>
STATIC edge: $r0 = staticinvoke <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/net/impl/HandlerManager;") in <io.vertx.core.net.impl.HandlerManager: void <clinit>()> ==> <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>
CLINIT edge: <io.vertx.core.net.impl.HandlerManager: io.vertx.core.logging.Logger log> = $r0 in <io.vertx.core.net.impl.HandlerManager: void <clinit>()> ==> <io.vertx.core.net.impl.HandlerManager: void <clinit>()>
VIRTUAL edge: $z0 = virtualinvoke r0.<io.vertx.core.net.impl.NetServerImpl: boolean isListening()>() in <io.vertx.core.net.impl.NetServerImpl: io.vertx.core.net.NetServer connectHandler(io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.NetServerImpl: boolean isListening()>
SPECIAL edge: specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot set connectHandler when server is listening") in <io.vertx.core.net.impl.NetServerImpl: io.vertx.core.net.NetServer connectHandler(io.vertx.core.Handler)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<io.vertx.core.net.NetServerOptions: int getPort()>() in <io.vertx.core.net.impl.NetServerImpl: io.vertx.core.net.NetServer listen(io.vertx.core.Handler)> ==> <io.vertx.core.net.NetServerOptions: int getPort()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<io.vertx.core.net.NetServerOptions: java.lang.String getHost()>() in <io.vertx.core.net.impl.NetServerImpl: io.vertx.core.net.NetServer listen(io.vertx.core.Handler)> ==> <io.vertx.core.net.NetServerOptions: java.lang.String getHost()>
VIRTUAL edge: $r5 = virtualinvoke r0.<io.vertx.core.net.impl.NetServerImpl: io.vertx.core.net.NetServer listen(int,java.lang.String,io.vertx.core.Handler)>($i0, $r3, r4) in <io.vertx.core.net.impl.NetServerImpl: io.vertx.core.net.NetServer listen(io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.NetServerImpl: io.vertx.core.net.NetServer listen(int,java.lang.String,io.vertx.core.Handler)>
STATIC edge: $r2 = staticinvoke <io.vertx.core.net.SocketAddress: io.vertx.core.net.SocketAddress inetSocketAddress(int,java.lang.String)>(i0, r1) in <io.vertx.core.net.impl.NetServerImpl: io.vertx.core.net.NetServer listen(int,java.lang.String,io.vertx.core.Handler)> ==> <io.vertx.core.net.SocketAddress: io.vertx.core.net.SocketAddress inetSocketAddress(int,java.lang.String)>
VIRTUAL edge: virtualinvoke r1.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTrustStoreOptions(io.vertx.core.net.JksOptions)>($r6) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void setTrustOptions(io.vertx.core.net.TCPSSLOptions,io.vertx.core.net.TrustOptions)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTrustStoreOptions(io.vertx.core.net.JksOptions)>
VIRTUAL edge: virtualinvoke r1.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTrustStoreOptions(io.vertx.core.net.JksOptions)>($r6) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void setTrustOptions(io.vertx.core.net.TCPSSLOptions,io.vertx.core.net.TrustOptions)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setTrustStoreOptions(io.vertx.core.net.JksOptions)>
VIRTUAL edge: virtualinvoke r1.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTrustStoreOptions(io.vertx.core.net.JksOptions)>($r6) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void setTrustOptions(io.vertx.core.net.TCPSSLOptions,io.vertx.core.net.TrustOptions)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.TCPSSLOptions setTrustStoreOptions(io.vertx.core.net.JksOptions)>
VIRTUAL edge: virtualinvoke r1.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTrustStoreOptions(io.vertx.core.net.JksOptions)>($r6) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void setTrustOptions(io.vertx.core.net.TCPSSLOptions,io.vertx.core.net.TrustOptions)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.TCPSSLOptions setTrustStoreOptions(io.vertx.core.net.JksOptions)>
VIRTUAL edge: virtualinvoke r1.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTrustStoreOptions(io.vertx.core.net.JksOptions)>($r6) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void setTrustOptions(io.vertx.core.net.TCPSSLOptions,io.vertx.core.net.TrustOptions)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.TCPSSLOptions setTrustStoreOptions(io.vertx.core.net.JksOptions)>
VIRTUAL edge: virtualinvoke r1.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTrustStoreOptions(io.vertx.core.net.JksOptions)>($r6) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void setTrustOptions(io.vertx.core.net.TCPSSLOptions,io.vertx.core.net.TrustOptions)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.TCPSSLOptions setTrustStoreOptions(io.vertx.core.net.JksOptions)>
VIRTUAL edge: virtualinvoke r1.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPfxTrustOptions(io.vertx.core.net.PfxOptions)>($r4) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void setTrustOptions(io.vertx.core.net.TCPSSLOptions,io.vertx.core.net.TrustOptions)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPfxTrustOptions(io.vertx.core.net.PfxOptions)>
VIRTUAL edge: virtualinvoke r1.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPfxTrustOptions(io.vertx.core.net.PfxOptions)>($r4) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void setTrustOptions(io.vertx.core.net.TCPSSLOptions,io.vertx.core.net.TrustOptions)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setPfxTrustOptions(io.vertx.core.net.PfxOptions)>
VIRTUAL edge: virtualinvoke r1.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPfxTrustOptions(io.vertx.core.net.PfxOptions)>($r4) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void setTrustOptions(io.vertx.core.net.TCPSSLOptions,io.vertx.core.net.TrustOptions)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.TCPSSLOptions setPfxTrustOptions(io.vertx.core.net.PfxOptions)>
VIRTUAL edge: virtualinvoke r1.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPfxTrustOptions(io.vertx.core.net.PfxOptions)>($r4) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void setTrustOptions(io.vertx.core.net.TCPSSLOptions,io.vertx.core.net.TrustOptions)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.TCPSSLOptions setPfxTrustOptions(io.vertx.core.net.PfxOptions)>
VIRTUAL edge: virtualinvoke r1.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPfxTrustOptions(io.vertx.core.net.PfxOptions)>($r4) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void setTrustOptions(io.vertx.core.net.TCPSSLOptions,io.vertx.core.net.TrustOptions)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.TCPSSLOptions setPfxTrustOptions(io.vertx.core.net.PfxOptions)>
VIRTUAL edge: virtualinvoke r1.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPfxTrustOptions(io.vertx.core.net.PfxOptions)>($r4) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void setTrustOptions(io.vertx.core.net.TCPSSLOptions,io.vertx.core.net.TrustOptions)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.TCPSSLOptions setPfxTrustOptions(io.vertx.core.net.PfxOptions)>
VIRTUAL edge: virtualinvoke r1.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPemTrustOptions(io.vertx.core.net.PemTrustOptions)>($r2) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void setTrustOptions(io.vertx.core.net.TCPSSLOptions,io.vertx.core.net.TrustOptions)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPemTrustOptions(io.vertx.core.net.PemTrustOptions)>
VIRTUAL edge: virtualinvoke r1.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPemTrustOptions(io.vertx.core.net.PemTrustOptions)>($r2) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void setTrustOptions(io.vertx.core.net.TCPSSLOptions,io.vertx.core.net.TrustOptions)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setPemTrustOptions(io.vertx.core.net.PemTrustOptions)>
VIRTUAL edge: virtualinvoke r1.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPemTrustOptions(io.vertx.core.net.PemTrustOptions)>($r2) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void setTrustOptions(io.vertx.core.net.TCPSSLOptions,io.vertx.core.net.TrustOptions)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.TCPSSLOptions setPemTrustOptions(io.vertx.core.net.PemTrustOptions)>
VIRTUAL edge: virtualinvoke r1.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPemTrustOptions(io.vertx.core.net.PemTrustOptions)>($r2) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void setTrustOptions(io.vertx.core.net.TCPSSLOptions,io.vertx.core.net.TrustOptions)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.TCPSSLOptions setPemTrustOptions(io.vertx.core.net.PemTrustOptions)>
VIRTUAL edge: virtualinvoke r1.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPemTrustOptions(io.vertx.core.net.PemTrustOptions)>($r2) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void setTrustOptions(io.vertx.core.net.TCPSSLOptions,io.vertx.core.net.TrustOptions)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.TCPSSLOptions setPemTrustOptions(io.vertx.core.net.PemTrustOptions)>
VIRTUAL edge: virtualinvoke r1.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPemTrustOptions(io.vertx.core.net.PemTrustOptions)>($r2) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void setTrustOptions(io.vertx.core.net.TCPSSLOptions,io.vertx.core.net.TrustOptions)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.TCPSSLOptions setPemTrustOptions(io.vertx.core.net.PemTrustOptions)>
VIRTUAL edge: virtualinvoke r1.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setKeyStoreOptions(io.vertx.core.net.JksOptions)>($r6) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void setCertOptions(io.vertx.core.net.TCPSSLOptions,io.vertx.core.net.KeyCertOptions)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setKeyStoreOptions(io.vertx.core.net.JksOptions)>
VIRTUAL edge: virtualinvoke r1.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setKeyStoreOptions(io.vertx.core.net.JksOptions)>($r6) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void setCertOptions(io.vertx.core.net.TCPSSLOptions,io.vertx.core.net.KeyCertOptions)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setKeyStoreOptions(io.vertx.core.net.JksOptions)>
VIRTUAL edge: virtualinvoke r1.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setKeyStoreOptions(io.vertx.core.net.JksOptions)>($r6) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void setCertOptions(io.vertx.core.net.TCPSSLOptions,io.vertx.core.net.KeyCertOptions)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.TCPSSLOptions setKeyStoreOptions(io.vertx.core.net.JksOptions)>
VIRTUAL edge: virtualinvoke r1.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setKeyStoreOptions(io.vertx.core.net.JksOptions)>($r6) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void setCertOptions(io.vertx.core.net.TCPSSLOptions,io.vertx.core.net.KeyCertOptions)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.TCPSSLOptions setKeyStoreOptions(io.vertx.core.net.JksOptions)>
VIRTUAL edge: virtualinvoke r1.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setKeyStoreOptions(io.vertx.core.net.JksOptions)>($r6) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void setCertOptions(io.vertx.core.net.TCPSSLOptions,io.vertx.core.net.KeyCertOptions)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.TCPSSLOptions setKeyStoreOptions(io.vertx.core.net.JksOptions)>
VIRTUAL edge: virtualinvoke r1.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setKeyStoreOptions(io.vertx.core.net.JksOptions)>($r6) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void setCertOptions(io.vertx.core.net.TCPSSLOptions,io.vertx.core.net.KeyCertOptions)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.TCPSSLOptions setKeyStoreOptions(io.vertx.core.net.JksOptions)>
VIRTUAL edge: virtualinvoke r1.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)>($r4) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void setCertOptions(io.vertx.core.net.TCPSSLOptions,io.vertx.core.net.KeyCertOptions)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)>
VIRTUAL edge: virtualinvoke r1.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)>($r4) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void setCertOptions(io.vertx.core.net.TCPSSLOptions,io.vertx.core.net.KeyCertOptions)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)>
VIRTUAL edge: virtualinvoke r1.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)>($r4) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void setCertOptions(io.vertx.core.net.TCPSSLOptions,io.vertx.core.net.KeyCertOptions)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.TCPSSLOptions setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)>
VIRTUAL edge: virtualinvoke r1.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)>($r4) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void setCertOptions(io.vertx.core.net.TCPSSLOptions,io.vertx.core.net.KeyCertOptions)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.TCPSSLOptions setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)>
VIRTUAL edge: virtualinvoke r1.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)>($r4) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void setCertOptions(io.vertx.core.net.TCPSSLOptions,io.vertx.core.net.KeyCertOptions)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.TCPSSLOptions setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)>
VIRTUAL edge: virtualinvoke r1.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)>($r4) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void setCertOptions(io.vertx.core.net.TCPSSLOptions,io.vertx.core.net.KeyCertOptions)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.TCPSSLOptions setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)>
VIRTUAL edge: virtualinvoke r1.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)>($r2) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void setCertOptions(io.vertx.core.net.TCPSSLOptions,io.vertx.core.net.KeyCertOptions)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)>
VIRTUAL edge: virtualinvoke r1.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)>($r2) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void setCertOptions(io.vertx.core.net.TCPSSLOptions,io.vertx.core.net.KeyCertOptions)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)>
VIRTUAL edge: virtualinvoke r1.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)>($r2) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void setCertOptions(io.vertx.core.net.TCPSSLOptions,io.vertx.core.net.KeyCertOptions)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.TCPSSLOptions setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)>
VIRTUAL edge: virtualinvoke r1.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)>($r2) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void setCertOptions(io.vertx.core.net.TCPSSLOptions,io.vertx.core.net.KeyCertOptions)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.TCPSSLOptions setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)>
VIRTUAL edge: virtualinvoke r1.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)>($r2) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void setCertOptions(io.vertx.core.net.TCPSSLOptions,io.vertx.core.net.KeyCertOptions)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.TCPSSLOptions setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)>
VIRTUAL edge: virtualinvoke r1.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)>($r2) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void setCertOptions(io.vertx.core.net.TCPSSLOptions,io.vertx.core.net.KeyCertOptions)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.TCPSSLOptions setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_getServerHandler_13__46: void <init>(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus)>($r0) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_getServerHandler_13__46: io.vertx.core.Handler bootstrap$(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_getServerHandler_13__46: void <init>(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_null_2__34: void <init>(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus,io.vertx.core.impl.HAManager,io.vertx.core.Handler)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: r1 = virtualinvoke r0.<io.vertx.core.impl.VertxImpl: io.vertx.core.impl.ContextImpl getOrCreateContext()>() in <io.vertx.core.impl.VertxImpl: void executeBlocking(io.vertx.core.Handler,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.ContextImpl getOrCreateContext()>
VIRTUAL edge: virtualinvoke r1.<io.vertx.core.impl.ContextImpl: void executeBlocking(io.vertx.core.Handler,boolean,io.vertx.core.Handler)>(r2, z0, r3) in <io.vertx.core.impl.VertxImpl: void executeBlocking(io.vertx.core.Handler,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.impl.ContextImpl: void executeBlocking(io.vertx.core.Handler,boolean,io.vertx.core.Handler)>
VIRTUAL edge: virtualinvoke r1.<io.vertx.core.impl.ContextImpl: void executeBlocking(io.vertx.core.Handler,boolean,io.vertx.core.Handler)>(r2, z0, r3) in <io.vertx.core.impl.VertxImpl: void executeBlocking(io.vertx.core.Handler,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.impl.EventLoopContext: void executeBlocking(io.vertx.core.Handler,boolean,io.vertx.core.Handler)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.impl.HAManager$lambda_null_2__35: void <init>(io.vertx.core.impl.HAManager,io.vertx.core.AsyncResult,java.lang.String,io.vertx.core.DeploymentOptions)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.impl.HAManager$lambda_null_3__36: void <init>(io.vertx.core.Handler)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: int ordinal()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
INTERFACE edge: $r1 = interfaceinvoke r0.<io.vertx.core.http.impl.ws.WebSocketFrameInternal: io.netty.buffer.ByteBuf getBinaryData()>() in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleTextFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.http.impl.ws.WebSocketFrameImpl: io.netty.buffer.ByteBuf getBinaryData()>
INTERFACE edge: $z0 = interfaceinvoke r0.<io.vertx.core.http.impl.ws.WebSocketFrameInternal: boolean isFinal()>() in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleTextFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.http.impl.ws.WebSocketFrameImpl: boolean isFinal()>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer appendBuffer(io.vertx.core.buffer.Buffer)>(r2) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleTextFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.buffer.impl.BufferImpl: io.vertx.core.buffer.Buffer appendBuffer(io.vertx.core.buffer.Buffer)>
INTERFACE edge: $i0 = interfaceinvoke $r7.<io.vertx.core.buffer.Buffer: int length()>() in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleTextFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.buffer.impl.BufferImpl: int length()>
INTERFACE edge: $i2 = interfaceinvoke $r12.<io.vertx.core.buffer.Buffer: int length()>() in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleTextFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.buffer.impl.BufferImpl: int length()>
INTERFACE edge: $i3 = interfaceinvoke r2.<io.vertx.core.buffer.Buffer: int length()>() in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleTextFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.buffer.impl.BufferImpl: int length()>
INTERFACE edge: $i4 = interfaceinvoke r2.<io.vertx.core.buffer.Buffer: int length()>() in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleTextFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.buffer.impl.BufferImpl: int length()>
SPECIAL edge: specialinvoke $r13.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleTextFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot process text frame of size ") in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleTextFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleTextFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", it would cause message buffer (size ") in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleTextFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleTextFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") to overflow max message size of ") in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleTextFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleTextFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleTextFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r22.<java.lang.IllegalStateException: void <init>(java.lang.String)>(r21) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleTextFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r23.<io.vertx.core.http.impl.WebSocketImplBase: void handleException(java.lang.Throwable)>($r22) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleTextFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.http.impl.WebSocketImplBase: void handleException(java.lang.Throwable)>
INTERFACE edge: r24 = interfaceinvoke $r9.<io.vertx.core.buffer.Buffer: java.lang.String toString()>() in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleTextFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.buffer.impl.BufferImpl: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r24) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleTextFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.impl.DeploymentManager$lambda_doDeployVerticle_2__17: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r24) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleTextFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r24) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleTextFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.impl.FutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r24) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleTextFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r24) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleTextFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.impl.SucceededFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r24) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleTextFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r24) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleTextFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r24) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleTextFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.impl.VertxImpl$lambda_joinCluster_1__10: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r24) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleTextFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r24) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleTextFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.Starter$lambda_runVerticle_1__1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r24) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleTextFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r24) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleTextFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r24) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleTextFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r24) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleTextFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.Starter$lambda_startVertx_0__2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r24) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleTextFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r24) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleTextFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r24) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleTextFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_start_3__19: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r24) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleTextFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.impl.HAManager$lambda_doDeployVerticle_4__7: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r24) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleTextFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_close_0__29: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r24) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleTextFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r24) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleTextFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r24) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleTextFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r24) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleTextFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.Starter$lambda_createLoggingHandler_2__3: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r24) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleTextFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.impl.CompositeFutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r24) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleTextFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r24) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleTextFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_finalize_6__18: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r24) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleTextFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r24) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleTextFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.impl.VertxImpl$lambda_init_0__9: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r24) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleTextFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.impl.FailedFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r24) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleTextFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r24) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleTextFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_close_5__30: void handle(java.lang.Object)>
INTERFACE edge: $r1 = interfaceinvoke r0.<io.vertx.core.http.impl.ws.WebSocketFrameInternal: io.netty.buffer.ByteBuf getBinaryData()>() in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleBinaryFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.http.impl.ws.WebSocketFrameImpl: io.netty.buffer.ByteBuf getBinaryData()>
INTERFACE edge: $z0 = interfaceinvoke r0.<io.vertx.core.http.impl.ws.WebSocketFrameInternal: boolean isFinal()>() in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleBinaryFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.http.impl.ws.WebSocketFrameImpl: boolean isFinal()>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer appendBuffer(io.vertx.core.buffer.Buffer)>(r2) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleBinaryFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.buffer.impl.BufferImpl: io.vertx.core.buffer.Buffer appendBuffer(io.vertx.core.buffer.Buffer)>
INTERFACE edge: $i0 = interfaceinvoke $r7.<io.vertx.core.buffer.Buffer: int length()>() in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleBinaryFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.buffer.impl.BufferImpl: int length()>
INTERFACE edge: $i2 = interfaceinvoke $r12.<io.vertx.core.buffer.Buffer: int length()>() in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleBinaryFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.buffer.impl.BufferImpl: int length()>
INTERFACE edge: $i3 = interfaceinvoke r2.<io.vertx.core.buffer.Buffer: int length()>() in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleBinaryFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.buffer.impl.BufferImpl: int length()>
INTERFACE edge: $i4 = interfaceinvoke r2.<io.vertx.core.buffer.Buffer: int length()>() in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleBinaryFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.buffer.impl.BufferImpl: int length()>
SPECIAL edge: specialinvoke $r13.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleBinaryFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot process binary frame of size ") in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleBinaryFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleBinaryFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", it would cause message buffer (size ") in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleBinaryFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleBinaryFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") to overflow max message size of ") in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleBinaryFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleBinaryFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleBinaryFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r22.<java.lang.IllegalStateException: void <init>(java.lang.String)>(r21) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleBinaryFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r23.<io.vertx.core.http.impl.WebSocketImplBase: void handleException(java.lang.Throwable)>($r22) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleBinaryFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.http.impl.WebSocketImplBase: void handleException(java.lang.Throwable)>
INTERFACE edge: r24 = interfaceinvoke $r9.<io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer copy()>() in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleBinaryFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.buffer.impl.BufferImpl: io.vertx.core.buffer.Buffer copy()>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r24) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleBinaryFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.impl.DeploymentManager$lambda_doDeployVerticle_2__17: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r24) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleBinaryFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r24) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleBinaryFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.impl.FutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r24) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleBinaryFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r24) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleBinaryFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.impl.SucceededFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r24) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleBinaryFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r24) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleBinaryFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r24) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleBinaryFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.impl.VertxImpl$lambda_joinCluster_1__10: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r24) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleBinaryFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r24) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleBinaryFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.Starter$lambda_runVerticle_1__1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r24) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleBinaryFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r24) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleBinaryFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r24) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleBinaryFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r24) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleBinaryFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.Starter$lambda_startVertx_0__2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r24) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleBinaryFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r24) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleBinaryFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r24) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleBinaryFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_start_3__19: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r24) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleBinaryFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.impl.HAManager$lambda_doDeployVerticle_4__7: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r24) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleBinaryFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_close_0__29: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r24) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleBinaryFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r24) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleBinaryFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r24) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleBinaryFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r24) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleBinaryFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.Starter$lambda_createLoggingHandler_2__3: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r24) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleBinaryFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.impl.CompositeFutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r24) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleBinaryFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r24) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleBinaryFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_finalize_6__18: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r24) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleBinaryFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r24) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleBinaryFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.impl.VertxImpl$lambda_init_0__9: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r24) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleBinaryFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.impl.FailedFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r24) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleBinaryFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<io.vertx.core.Handler: void handle(java.lang.Object)>(r24) in <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handleBinaryFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_close_5__30: void handle(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0) in <io.vertx.core.http.impl.FrameType: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: java.lang.Object clone()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.PemTrustOptions: io.vertx.core.net.PemTrustOptions clone()>() in <io.vertx.core.net.PemTrustOptions: java.lang.Object clone()> ==> <io.vertx.core.net.PemTrustOptions: io.vertx.core.net.PemTrustOptions clone()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: java.lang.Object clone()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions clone()>() in <io.vertx.core.net.PemKeyCertOptions: java.lang.Object clone()> ==> <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions clone()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.JdkSSLEngineOptions: io.vertx.core.net.SSLEngineOptions clone()>() in <io.vertx.core.net.JdkSSLEngineOptions: java.lang.Object clone()> ==> <io.vertx.core.net.JdkSSLEngineOptions: io.vertx.core.net.SSLEngineOptions clone()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.JksOptions: io.vertx.core.net.JksOptions clone()>() in <io.vertx.core.net.JksOptions: java.lang.Object clone()> ==> <io.vertx.core.net.JksOptions: io.vertx.core.net.JksOptions clone()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.OpenSSLEngineOptions: io.vertx.core.net.OpenSSLEngineOptions clone()>() in <io.vertx.core.net.OpenSSLEngineOptions: java.lang.Object clone()> ==> <io.vertx.core.net.OpenSSLEngineOptions: io.vertx.core.net.OpenSSLEngineOptions clone()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.PfxOptions: io.vertx.core.net.PfxOptions clone()>() in <io.vertx.core.net.PfxOptions: java.lang.Object clone()> ==> <io.vertx.core.net.PfxOptions: io.vertx.core.net.PfxOptions clone()>
INTERFACE edge: interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: java.lang.Object remove(java.lang.Object)>($r3) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void cleanupNonPeriodic()> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.spi.metrics.VertxMetrics: void timerEnded(long,boolean)>($l1, 0) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void cleanupNonPeriodic()> ==> <io.vertx.core.spi.metrics.VertxMetrics: void timerEnded(long,boolean)>
VIRTUAL edge: r8 = virtualinvoke $r7.<io.vertx.core.impl.VertxImpl: io.vertx.core.impl.ContextImpl getContext()>() in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void cleanupNonPeriodic()> ==> <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.ContextImpl getContext()>
VIRTUAL edge: virtualinvoke r8.<io.vertx.core.impl.ContextImpl: void removeCloseHook(io.vertx.core.Closeable)>(r0) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void cleanupNonPeriodic()> ==> <io.vertx.core.impl.ContextImpl: void removeCloseHook(io.vertx.core.Closeable)>
VIRTUAL edge: virtualinvoke r8.<io.vertx.core.impl.ContextImpl: void removeCloseHook(io.vertx.core.Closeable)>(r0) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void cleanupNonPeriodic()> ==> <io.vertx.core.impl.EventLoopContext: void removeCloseHook(io.vertx.core.Closeable)>
VIRTUAL edge: $z1 = virtualinvoke r24.<io.vertx.core.eventbus.impl.clustered.ClusteredMessage: boolean isFromWire()>() in <io.vertx.core.eventbus.impl.HandlerRegistration: void deliver(io.vertx.core.Handler,io.vertx.core.eventbus.Message,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: boolean isFromWire()>
INTERFACE edge: $r25 = interfaceinvoke r0.<io.vertx.core.eventbus.Message: io.vertx.core.MultiMap headers()>() in <io.vertx.core.eventbus.impl.HandlerRegistration: void deliver(io.vertx.core.Handler,io.vertx.core.eventbus.Message,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.eventbus.impl.MessageImpl: io.vertx.core.MultiMap headers()>
INTERFACE edge: $r25 = interfaceinvoke r0.<io.vertx.core.eventbus.Message: io.vertx.core.MultiMap headers()>() in <io.vertx.core.eventbus.impl.HandlerRegistration: void deliver(io.vertx.core.Handler,io.vertx.core.eventbus.Message,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: io.vertx.core.MultiMap headers()>
INTERFACE edge: $r17 = interfaceinvoke r0.<io.vertx.core.eventbus.Message: java.lang.String address()>() in <io.vertx.core.eventbus.impl.HandlerRegistration: void deliver(io.vertx.core.Handler,io.vertx.core.eventbus.Message,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.eventbus.impl.MessageImpl: java.lang.String address()>
INTERFACE edge: r26 = interfaceinvoke $r25.<io.vertx.core.MultiMap: java.lang.String get(java.lang.String)>("__vertx.credit") in <io.vertx.core.eventbus.impl.HandlerRegistration: void deliver(io.vertx.core.Handler,io.vertx.core.eventbus.Message,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.http.impl.HeadersAdaptor: java.lang.String get(java.lang.String)>
INTERFACE edge: r26 = interfaceinvoke $r25.<io.vertx.core.MultiMap: java.lang.String get(java.lang.String)>("__vertx.credit") in <io.vertx.core.eventbus.impl.HandlerRegistration: void deliver(io.vertx.core.Handler,io.vertx.core.eventbus.Message,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor: java.lang.String get(java.lang.String)>
INTERFACE edge: r26 = interfaceinvoke $r25.<io.vertx.core.MultiMap: java.lang.String get(java.lang.String)>("__vertx.credit") in <io.vertx.core.eventbus.impl.HandlerRegistration: void deliver(io.vertx.core.Handler,io.vertx.core.eventbus.Message,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders: java.lang.String get(java.lang.String)>
INTERFACE edge: r26 = interfaceinvoke $r25.<io.vertx.core.MultiMap: java.lang.String get(java.lang.String)>("__vertx.credit") in <io.vertx.core.eventbus.impl.HandlerRegistration: void deliver(io.vertx.core.Handler,io.vertx.core.eventbus.Message,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.http.CaseInsensitiveHeaders: java.lang.String get(java.lang.String)>
VIRTUAL edge: virtualinvoke $r9.<io.vertx.core.eventbus.impl.EventBusImpl: io.vertx.core.eventbus.EventBus send(java.lang.String,java.lang.Object)>(r26, $r10) in <io.vertx.core.eventbus.impl.HandlerRegistration: void deliver(io.vertx.core.Handler,io.vertx.core.eventbus.Message,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.eventbus.impl.EventBusImpl: io.vertx.core.eventbus.EventBus send(java.lang.String,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.spi.metrics.EventBusMetrics: void beginHandleMessage(java.lang.Object,boolean)>($r7, z2) in <io.vertx.core.eventbus.impl.HandlerRegistration: void deliver(io.vertx.core.Handler,io.vertx.core.eventbus.Message,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.spi.metrics.EventBusMetrics: void beginHandleMessage(java.lang.Object,boolean)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.eventbus.impl.HandlerRegistration: void deliver(io.vertx.core.Handler,io.vertx.core.eventbus.Message,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.impl.DeploymentManager$lambda_doDeployVerticle_2__17: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.eventbus.impl.HandlerRegistration: void deliver(io.vertx.core.Handler,io.vertx.core.eventbus.Message,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.eventbus.impl.HandlerRegistration: void deliver(io.vertx.core.Handler,io.vertx.core.eventbus.Message,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.impl.FutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.eventbus.impl.HandlerRegistration: void deliver(io.vertx.core.Handler,io.vertx.core.eventbus.Message,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.eventbus.impl.HandlerRegistration: void deliver(io.vertx.core.Handler,io.vertx.core.eventbus.Message,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.impl.SucceededFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.eventbus.impl.HandlerRegistration: void deliver(io.vertx.core.Handler,io.vertx.core.eventbus.Message,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.eventbus.impl.HandlerRegistration: void deliver(io.vertx.core.Handler,io.vertx.core.eventbus.Message,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.eventbus.impl.HandlerRegistration: void deliver(io.vertx.core.Handler,io.vertx.core.eventbus.Message,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.impl.VertxImpl$lambda_joinCluster_1__10: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.eventbus.impl.HandlerRegistration: void deliver(io.vertx.core.Handler,io.vertx.core.eventbus.Message,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.eventbus.impl.HandlerRegistration: void deliver(io.vertx.core.Handler,io.vertx.core.eventbus.Message,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.Starter$lambda_runVerticle_1__1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.eventbus.impl.HandlerRegistration: void deliver(io.vertx.core.Handler,io.vertx.core.eventbus.Message,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.eventbus.impl.HandlerRegistration: void deliver(io.vertx.core.Handler,io.vertx.core.eventbus.Message,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.eventbus.impl.HandlerRegistration: void deliver(io.vertx.core.Handler,io.vertx.core.eventbus.Message,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.eventbus.impl.HandlerRegistration: void deliver(io.vertx.core.Handler,io.vertx.core.eventbus.Message,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.Starter$lambda_startVertx_0__2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.eventbus.impl.HandlerRegistration: void deliver(io.vertx.core.Handler,io.vertx.core.eventbus.Message,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.eventbus.impl.HandlerRegistration: void deliver(io.vertx.core.Handler,io.vertx.core.eventbus.Message,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.eventbus.impl.HandlerRegistration: void deliver(io.vertx.core.Handler,io.vertx.core.eventbus.Message,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_start_3__19: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.eventbus.impl.HandlerRegistration: void deliver(io.vertx.core.Handler,io.vertx.core.eventbus.Message,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.impl.HAManager$lambda_doDeployVerticle_4__7: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.eventbus.impl.HandlerRegistration: void deliver(io.vertx.core.Handler,io.vertx.core.eventbus.Message,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_close_0__29: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.eventbus.impl.HandlerRegistration: void deliver(io.vertx.core.Handler,io.vertx.core.eventbus.Message,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.eventbus.impl.HandlerRegistration: void deliver(io.vertx.core.Handler,io.vertx.core.eventbus.Message,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.eventbus.impl.HandlerRegistration: void deliver(io.vertx.core.Handler,io.vertx.core.eventbus.Message,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.eventbus.impl.HandlerRegistration: void deliver(io.vertx.core.Handler,io.vertx.core.eventbus.Message,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.Starter$lambda_createLoggingHandler_2__3: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.eventbus.impl.HandlerRegistration: void deliver(io.vertx.core.Handler,io.vertx.core.eventbus.Message,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.impl.CompositeFutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.eventbus.impl.HandlerRegistration: void deliver(io.vertx.core.Handler,io.vertx.core.eventbus.Message,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.eventbus.impl.HandlerRegistration: void deliver(io.vertx.core.Handler,io.vertx.core.eventbus.Message,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_finalize_6__18: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.eventbus.impl.HandlerRegistration: void deliver(io.vertx.core.Handler,io.vertx.core.eventbus.Message,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.eventbus.impl.HandlerRegistration: void deliver(io.vertx.core.Handler,io.vertx.core.eventbus.Message,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.impl.VertxImpl$lambda_init_0__9: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.eventbus.impl.HandlerRegistration: void deliver(io.vertx.core.Handler,io.vertx.core.eventbus.Message,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.impl.FailedFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.eventbus.impl.HandlerRegistration: void deliver(io.vertx.core.Handler,io.vertx.core.eventbus.Message,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.eventbus.impl.HandlerRegistration: void deliver(io.vertx.core.Handler,io.vertx.core.eventbus.Message,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_close_5__30: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.spi.metrics.EventBusMetrics: void endHandleMessage(java.lang.Object,java.lang.Throwable)>($r5, null) in <io.vertx.core.eventbus.impl.HandlerRegistration: void deliver(io.vertx.core.Handler,io.vertx.core.eventbus.Message,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.spi.metrics.EventBusMetrics: void endHandleMessage(java.lang.Object,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r14.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.eventbus.impl.HandlerRegistration: void deliver(io.vertx.core.Handler,io.vertx.core.eventbus.Message,io.vertx.core.impl.ContextInternal)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to handleMessage. address: ") in <io.vertx.core.eventbus.impl.HandlerRegistration: void deliver(io.vertx.core.Handler,io.vertx.core.eventbus.Message,io.vertx.core.impl.ContextInternal)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17) in <io.vertx.core.eventbus.impl.HandlerRegistration: void deliver(io.vertx.core.Handler,io.vertx.core.eventbus.Message,io.vertx.core.impl.ContextInternal)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.eventbus.impl.HandlerRegistration: void deliver(io.vertx.core.Handler,io.vertx.core.eventbus.Message,io.vertx.core.impl.ContextInternal)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r15.<io.vertx.core.logging.Logger: void error(java.lang.Object,java.lang.Throwable)>($r19, $r12) in <io.vertx.core.eventbus.impl.HandlerRegistration: void deliver(io.vertx.core.Handler,io.vertx.core.eventbus.Message,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.logging.Logger: void error(java.lang.Object,java.lang.Throwable)>
INTERFACE edge: interfaceinvoke $r23.<io.vertx.core.spi.metrics.EventBusMetrics: void endHandleMessage(java.lang.Object,java.lang.Throwable)>($r22, $r12) in <io.vertx.core.eventbus.impl.HandlerRegistration: void deliver(io.vertx.core.Handler,io.vertx.core.eventbus.Message,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.spi.metrics.EventBusMetrics: void endHandleMessage(java.lang.Object,java.lang.Throwable)>
INTERFACE edge: interfaceinvoke r21.<io.vertx.core.impl.ContextInternal: void reportException(java.lang.Throwable)>($r12) in <io.vertx.core.eventbus.impl.HandlerRegistration: void deliver(io.vertx.core.Handler,io.vertx.core.eventbus.Message,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.impl.ContextImpl: void reportException(java.lang.Throwable)>
INTERFACE edge: interfaceinvoke r21.<io.vertx.core.impl.ContextInternal: void reportException(java.lang.Throwable)>($r12) in <io.vertx.core.eventbus.impl.HandlerRegistration: void deliver(io.vertx.core.Handler,io.vertx.core.eventbus.Message,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.impl.EventLoopContext: void reportException(java.lang.Throwable)>
SPECIAL edge: specialinvoke r1.<io.vertx.core.eventbus.impl.HandlerRegistration: void checkNextTick()>() in <io.vertx.core.eventbus.impl.HandlerRegistration: void deliver(io.vertx.core.Handler,io.vertx.core.eventbus.Message,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void checkNextTick()>
STATIC edge: $r3 = staticinvoke <io.vertx.core.http.impl.Http2HeadersAdaptor: java.lang.CharSequence toLowerCase(java.lang.CharSequence)>(r1) in <io.vertx.core.http.impl.Http2HeadersAdaptor: java.lang.String get(java.lang.String)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor: java.lang.CharSequence toLowerCase(java.lang.CharSequence)>
STATIC edge: staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r0, "name") in <io.vertx.core.http.CaseInsensitiveHeaders: java.lang.String get(java.lang.String)> ==> <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>
STATIC edge: $z0 = staticinvoke <io.vertx.core.http.CaseInsensitiveHeaders: boolean eq(java.lang.String,java.lang.String)>(r0, $r4) in <io.vertx.core.http.CaseInsensitiveHeaders: java.lang.String get(java.lang.String)> ==> <io.vertx.core.http.CaseInsensitiveHeaders: boolean eq(java.lang.String,java.lang.String)>
STATIC edge: i1 = staticinvoke <io.vertx.core.http.CaseInsensitiveHeaders: int index(int)>(i0) in <io.vertx.core.http.CaseInsensitiveHeaders: java.lang.String get(java.lang.String)> ==> <io.vertx.core.http.CaseInsensitiveHeaders: int index(int)>
STATIC edge: i0 = staticinvoke <io.vertx.core.http.CaseInsensitiveHeaders: int hash(java.lang.String)>(r0) in <io.vertx.core.http.CaseInsensitiveHeaders: java.lang.String get(java.lang.String)> ==> <io.vertx.core.http.CaseInsensitiveHeaders: int hash(java.lang.String)>
CLINIT edge: $r2 = <io.vertx.core.impl.ContextImpl: io.vertx.core.logging.Logger log> in <io.vertx.core.impl.ContextImpl: void reportException(java.lang.Throwable)> ==> <io.vertx.core.impl.ContextImpl: void <clinit>()>
STATIC edge: $r3 = staticinvoke <io.vertx.core.eventbus.impl.HandlerRegistration$lambda_checkNextTick_5__59: io.vertx.core.Handler bootstrap$(io.vertx.core.eventbus.impl.HandlerRegistration)>(r0) in <io.vertx.core.eventbus.impl.HandlerRegistration: void checkNextTick()> ==> <io.vertx.core.eventbus.impl.HandlerRegistration$lambda_checkNextTick_5__59: io.vertx.core.Handler bootstrap$(io.vertx.core.eventbus.impl.HandlerRegistration)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.http.impl.VertxHttp2Stream: void <init>(io.vertx.core.http.impl.Http2ConnectionBase,io.netty.handler.codec.http2.Http2Stream,boolean)>(r1, r2, z0) in <io.vertx.core.http.impl.Http2ServerConnection$Push: void <init>(io.vertx.core.http.impl.Http2ServerConnection,io.netty.handler.codec.http2.Http2Stream,java.lang.String,io.vertx.core.http.HttpMethod,java.lang.String,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.VertxHttp2Stream: void <init>(io.vertx.core.http.impl.Http2ConnectionBase,io.netty.handler.codec.http2.Http2Stream,boolean)>
INTERFACE edge: $r8 = interfaceinvoke $r6.<io.vertx.core.Future: io.vertx.core.Future setHandler(io.vertx.core.Handler)>(r7) in <io.vertx.core.http.impl.Http2ServerConnection$Push: void <init>(io.vertx.core.http.impl.Http2ServerConnection,io.netty.handler.codec.http2.Http2Stream,java.lang.String,io.vertx.core.http.HttpMethod,java.lang.String,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.impl.CompositeFutureImpl: io.vertx.core.Future setHandler(io.vertx.core.Handler)>
INTERFACE edge: $r8 = interfaceinvoke $r6.<io.vertx.core.Future: io.vertx.core.Future setHandler(io.vertx.core.Handler)>(r7) in <io.vertx.core.http.impl.Http2ServerConnection$Push: void <init>(io.vertx.core.http.impl.Http2ServerConnection,io.netty.handler.codec.http2.Http2Stream,java.lang.String,io.vertx.core.http.HttpMethod,java.lang.String,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.impl.SucceededFuture: io.vertx.core.Future setHandler(io.vertx.core.Handler)>
INTERFACE edge: $r8 = interfaceinvoke $r6.<io.vertx.core.Future: io.vertx.core.Future setHandler(io.vertx.core.Handler)>(r7) in <io.vertx.core.http.impl.Http2ServerConnection$Push: void <init>(io.vertx.core.http.impl.Http2ServerConnection,io.netty.handler.codec.http2.Http2Stream,java.lang.String,io.vertx.core.http.HttpMethod,java.lang.String,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.impl.FutureImpl: io.vertx.core.Future setHandler(io.vertx.core.Handler)>
INTERFACE edge: $r8 = interfaceinvoke $r6.<io.vertx.core.Future: io.vertx.core.Future setHandler(io.vertx.core.Handler)>(r7) in <io.vertx.core.http.impl.Http2ServerConnection$Push: void <init>(io.vertx.core.http.impl.Http2ServerConnection,io.netty.handler.codec.http2.Http2Stream,java.lang.String,io.vertx.core.http.HttpMethod,java.lang.String,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.impl.FailedFuture: io.vertx.core.Future setHandler(io.vertx.core.Handler)>
CLINIT edge: $r6 = new io.vertx.core.streams.impl.InboundBuffer in <io.vertx.core.http.impl.VertxHttp2Stream: void <init>(io.vertx.core.http.impl.Http2ConnectionBase,io.netty.handler.codec.http2.Http2Stream,boolean)> ==> <io.vertx.core.streams.impl.InboundBuffer: void <clinit>()>
STATIC edge: $r20 = staticinvoke <io.vertx.core.http.impl.VertxHttp2Stream$lambda_new_1__58: io.vertx.core.Handler bootstrap$(io.vertx.core.http.impl.VertxHttp2Stream)>(r0) in <io.vertx.core.http.impl.VertxHttp2Stream: void <init>(io.vertx.core.http.impl.Http2ConnectionBase,io.netty.handler.codec.http2.Http2Stream,boolean)> ==> <io.vertx.core.http.impl.VertxHttp2Stream$lambda_new_1__58: io.vertx.core.Handler bootstrap$(io.vertx.core.http.impl.VertxHttp2Stream)>
STATIC edge: $r13 = staticinvoke <io.vertx.core.http.impl.VertxHttp2Stream$handleData__57: io.vertx.core.Handler bootstrap$(io.vertx.core.http.impl.VertxHttp2Stream)>(r0) in <io.vertx.core.http.impl.VertxHttp2Stream: void <init>(io.vertx.core.http.impl.Http2ConnectionBase,io.netty.handler.codec.http2.Http2Stream,boolean)> ==> <io.vertx.core.http.impl.VertxHttp2Stream$handleData__57: io.vertx.core.Handler bootstrap$(io.vertx.core.http.impl.VertxHttp2Stream)>
STATIC edge: $r10 = staticinvoke <io.vertx.core.http.impl.VertxHttp2Stream$lambda_new_0__56: io.vertx.core.Handler bootstrap$(io.vertx.core.http.impl.VertxHttp2Stream,io.vertx.core.http.impl.Http2ConnectionBase,io.netty.handler.codec.http2.Http2Stream)>(r0, r1, r4) in <io.vertx.core.http.impl.VertxHttp2Stream: void <init>(io.vertx.core.http.impl.Http2ConnectionBase,io.netty.handler.codec.http2.Http2Stream,boolean)> ==> <io.vertx.core.http.impl.VertxHttp2Stream$lambda_new_0__56: io.vertx.core.Handler bootstrap$(io.vertx.core.http.impl.VertxHttp2Stream,io.vertx.core.http.impl.Http2ConnectionBase,io.netty.handler.codec.http2.Http2Stream)>
CLINIT edge: $r8 = <io.vertx.core.http.impl.HttpUtils: io.vertx.core.http.StreamPriority DEFAULT_STREAM_PRIORITY> in <io.vertx.core.http.impl.VertxHttp2Stream: void <init>(io.vertx.core.http.impl.Http2ConnectionBase,io.netty.handler.codec.http2.Http2Stream,boolean)> ==> <io.vertx.core.http.impl.HttpUtils: void <clinit>()>
CLINIT edge: <io.vertx.core.streams.impl.InboundBuffer: boolean $assertionsDisabled> = $z1 in <io.vertx.core.streams.impl.InboundBuffer: void <clinit>()> ==> <io.vertx.core.streams.impl.InboundBuffer: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.impl.ContextImpl: void executeFromIO(java.lang.Object,io.vertx.core.Handler)>(null, r1) in <io.vertx.core.impl.ContextImpl: void executeFromIO(io.vertx.core.Handler)> ==> <io.vertx.core.impl.ContextImpl: void executeFromIO(java.lang.Object,io.vertx.core.Handler)>
CLINIT edge: $z0 = <io.vertx.core.impl.ContextImpl: boolean THREAD_CHECKS> in <io.vertx.core.impl.ContextImpl: void executeFromIO(java.lang.Object,io.vertx.core.Handler)> ==> <io.vertx.core.impl.ContextImpl: void <clinit>()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.http.StreamPriority: void <init>()>() in <io.vertx.core.http.impl.HttpUtils$1: void <init>()> ==> <io.vertx.core.http.StreamPriority: void <init>()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.http.impl.HttpUtils$CustomCompressor: void <init>()>() in <io.vertx.core.http.impl.HttpUtils$CustomCompressor: void <init>(io.vertx.core.http.impl.HttpUtils$1)> ==> <io.vertx.core.http.impl.HttpUtils$CustomCompressor: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.http.impl.Http2ServerConnection$1$lambda_handle_1__38: void <init>(io.vertx.core.Handler,io.vertx.core.AsyncResult)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.http.impl.Http2ServerConnection$1$lambda_handle_0__39: void <init>(io.vertx.core.http.impl.Http2ServerConnection$Push)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: $r2 = specialinvoke r0.<io.netty.handler.codec.http.HttpContentCompressor: io.netty.handler.codec.compression.ZlibWrapper determineWrapper(java.lang.String)>(r1) in <io.vertx.core.http.impl.HttpUtils$CustomCompressor: io.netty.handler.codec.compression.ZlibWrapper determineWrapper(java.lang.String)> ==> <io.netty.handler.codec.http.HttpContentCompressor: io.netty.handler.codec.compression.ZlibWrapper determineWrapper(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.http.impl.HttpUtils$validateHeaderValue__40: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0) in <io.vertx.core.http.HttpVersion: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0) in <io.vertx.core.http.HttpMethod: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
INTERFACE edge: interfaceinvoke $r19.<io.vertx.core.impl.ContextInternal: void removeCloseHook(io.vertx.core.Closeable)>(r0) in <io.vertx.core.net.impl.NetServerImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.impl.ContextImpl: void removeCloseHook(io.vertx.core.Closeable)>
INTERFACE edge: interfaceinvoke $r19.<io.vertx.core.impl.ContextInternal: void removeCloseHook(io.vertx.core.Closeable)>(r0) in <io.vertx.core.net.impl.NetServerImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.impl.EventLoopContext: void removeCloseHook(io.vertx.core.Closeable)>
INTERFACE edge: r24 = interfaceinvoke $r4.<io.vertx.core.impl.VertxInternal: io.vertx.core.impl.ContextInternal getOrCreateContext()>() in <io.vertx.core.net.impl.NetServerImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.ContextInternal getOrCreateContext()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.impl.NetServerImpl: void executeCloseDone(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,java.lang.Exception)>(r24, r23, null) in <io.vertx.core.net.impl.NetServerImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.NetServerImpl: void executeCloseDone(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,java.lang.Exception)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.impl.NetServerImpl: void executeCloseDone(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,java.lang.Exception)>(r24, r23, null) in <io.vertx.core.net.impl.NetServerImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.NetServerImpl: void executeCloseDone(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,java.lang.Exception)>
INTERFACE edge: $r6 = interfaceinvoke $r5.<io.vertx.core.impl.VertxInternal: java.util.Map sharedNetServers()>() in <io.vertx.core.net.impl.NetServerImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl: java.util.Map sharedNetServers()>
SPECIAL edge: specialinvoke $r11.<io.vertx.core.net.impl.NetServerImpl$Handlers: void <init>(io.vertx.core.net.NetServer,io.vertx.core.Handler,io.vertx.core.Handler)>(r0, $r13, $r12) in <io.vertx.core.net.impl.NetServerImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.NetServerImpl$Handlers: void <init>(io.vertx.core.net.NetServer,io.vertx.core.Handler,io.vertx.core.Handler)>
VIRTUAL edge: virtualinvoke $r14.<io.vertx.core.net.impl.HandlerManager: void removeHandler(java.lang.Object,io.vertx.core.impl.ContextInternal)>($r11, $r15) in <io.vertx.core.net.impl.NetServerImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.HandlerManager: void removeHandler(java.lang.Object,io.vertx.core.impl.ContextInternal)>
VIRTUAL edge: $z1 = virtualinvoke $r17.<io.vertx.core.net.impl.HandlerManager: boolean hasHandlers()>() in <io.vertx.core.net.impl.NetServerImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.HandlerManager: boolean hasHandlers()>
SPECIAL edge: specialinvoke $r18.<io.vertx.core.net.impl.NetServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)>(r24, r23) in <io.vertx.core.net.impl.NetServerImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.NetServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)>
INTERFACE edge: interfaceinvoke r24.<io.vertx.core.impl.ContextInternal: void runOnContext(io.vertx.core.Handler)>($r9) in <io.vertx.core.net.impl.NetServerImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.impl.ContextImpl: void runOnContext(io.vertx.core.Handler)>
INTERFACE edge: interfaceinvoke r24.<io.vertx.core.impl.ContextInternal: void runOnContext(io.vertx.core.Handler)>($r9) in <io.vertx.core.net.impl.NetServerImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.impl.EventLoopContext: void runOnContext(io.vertx.core.Handler)>
CLINIT edge: $r6 = staticinvoke <io.vertx.core.Future: io.vertx.core.Future succeededFuture()>() in <io.vertx.core.net.impl.NetServerImpl: void executeCloseDone(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,java.lang.Exception)> ==> <io.vertx.core.Future: void <clinit>()>
STATIC edge: $r4 = staticinvoke <io.vertx.core.net.impl.NetServerImpl$lambda_executeCloseDone_14__60: io.vertx.core.Handler bootstrap$(io.vertx.core.Handler,io.vertx.core.Future)>(r0, $r6) in <io.vertx.core.net.impl.NetServerImpl: void executeCloseDone(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,java.lang.Exception)> ==> <io.vertx.core.net.impl.NetServerImpl$lambda_executeCloseDone_14__60: io.vertx.core.Handler bootstrap$(io.vertx.core.Handler,io.vertx.core.Future)>
STATIC edge: $r6 = staticinvoke <io.vertx.core.Future: io.vertx.core.Future failedFuture(java.lang.Throwable)>(r1) in <io.vertx.core.net.impl.NetServerImpl: void executeCloseDone(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,java.lang.Exception)> ==> <io.vertx.core.Future: io.vertx.core.Future failedFuture(java.lang.Throwable)>
STATIC edge: $r6 = staticinvoke <io.vertx.core.Future: io.vertx.core.Future succeededFuture()>() in <io.vertx.core.net.impl.NetServerImpl: void executeCloseDone(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,java.lang.Exception)> ==> <io.vertx.core.Future: io.vertx.core.Future succeededFuture()>
CLINIT edge: $r6 = staticinvoke <io.vertx.core.Future: io.vertx.core.Future failedFuture(java.lang.Throwable)>(r1) in <io.vertx.core.net.impl.NetServerImpl: void executeCloseDone(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,java.lang.Exception)> ==> <io.vertx.core.Future: void <clinit>()>
STATIC edge: $r11 = staticinvoke <io.vertx.core.net.impl.NetServerImpl$lambda_actualClose_9__61: io.netty.util.concurrent.GenericFutureListener bootstrap$(io.vertx.core.net.impl.NetServerImpl,io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,io.netty.channel.group.ChannelGroupFuture)>(r0, r9, r10, r21) in <io.vertx.core.net.impl.NetServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.NetServerImpl$lambda_actualClose_9__61: io.netty.util.concurrent.GenericFutureListener bootstrap$(io.vertx.core.net.impl.NetServerImpl,io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,io.netty.channel.group.ChannelGroupFuture)>
SPECIAL edge: specialinvoke $r2.<io.vertx.core.net.impl.NetServerImpl$lambda_close_7__48: void <init>(io.vertx.core.Handler,io.vertx.core.Handler)>($r0, $r1) in <io.vertx.core.net.impl.NetServerImpl$lambda_close_7__48: io.vertx.core.Handler bootstrap$(io.vertx.core.Handler,io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.NetServerImpl$lambda_close_7__48: void <init>(io.vertx.core.Handler,io.vertx.core.Handler)>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.net.impl.NetServerImpl$lambda_close_8__47: void <init>(io.vertx.core.Handler)>($r0) in <io.vertx.core.net.impl.NetServerImpl$lambda_close_8__47: io.vertx.core.Handler bootstrap$(io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.NetServerImpl$lambda_close_8__47: void <init>(io.vertx.core.Handler)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_null_4__41: void <init>(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus,io.vertx.core.Handler)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.impl.PartialPooledByteBufAllocator: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.impl.ContextImpl: void <init>(io.vertx.core.impl.VertxInternal,io.netty.channel.EventLoop,io.vertx.core.impl.WorkerPool,io.vertx.core.impl.WorkerPool,java.lang.String,io.vertx.core.json.JsonObject,java.lang.ClassLoader)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r9.<io.vertx.core.logging.Logger: void warn(java.lang.Object)>("You have disabled TCCL checks but you have a custom TCCL to set.") in <io.vertx.core.impl.ContextImpl: void <init>(io.vertx.core.impl.VertxInternal,io.netty.channel.EventLoop,io.vertx.core.impl.WorkerPool,io.vertx.core.impl.WorkerPool,java.lang.String,io.vertx.core.json.JsonObject,java.lang.ClassLoader)> ==> <io.vertx.core.logging.Logger: void warn(java.lang.Object)>
SPECIAL edge: specialinvoke $r10.<io.vertx.core.impl.TaskQueue: void <init>()>() in <io.vertx.core.impl.ContextImpl: void <init>(io.vertx.core.impl.VertxInternal,io.netty.channel.EventLoop,io.vertx.core.impl.WorkerPool,io.vertx.core.impl.WorkerPool,java.lang.String,io.vertx.core.json.JsonObject,java.lang.ClassLoader)> ==> <io.vertx.core.impl.TaskQueue: void <init>()>
SPECIAL edge: specialinvoke $r11.<io.vertx.core.impl.TaskQueue: void <init>()>() in <io.vertx.core.impl.ContextImpl: void <init>(io.vertx.core.impl.VertxInternal,io.netty.channel.EventLoop,io.vertx.core.impl.WorkerPool,io.vertx.core.impl.WorkerPool,java.lang.String,io.vertx.core.json.JsonObject,java.lang.ClassLoader)> ==> <io.vertx.core.impl.TaskQueue: void <init>()>
SPECIAL edge: specialinvoke $r12.<io.vertx.core.impl.CloseHooks: void <init>(io.vertx.core.logging.Logger)>($r13) in <io.vertx.core.impl.ContextImpl: void <init>(io.vertx.core.impl.VertxInternal,io.netty.channel.EventLoop,io.vertx.core.impl.WorkerPool,io.vertx.core.impl.WorkerPool,java.lang.String,io.vertx.core.json.JsonObject,java.lang.ClassLoader)> ==> <io.vertx.core.impl.CloseHooks: void <init>(io.vertx.core.logging.Logger)>
STATIC edge: $r2 = staticinvoke <io.vertx.core.impl.TaskQueue$run__63: java.lang.Runnable bootstrap$(io.vertx.core.impl.TaskQueue)>(r0) in <io.vertx.core.impl.TaskQueue: void <init>()> ==> <io.vertx.core.impl.TaskQueue$run__63: java.lang.Runnable bootstrap$(io.vertx.core.impl.TaskQueue)>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>() in <io.vertx.core.net.impl.VertxEventLoopGroup: io.netty.channel.EventLoop next()> ==> <java.util.AbstractCollection: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>() in <io.vertx.core.net.impl.VertxEventLoopGroup: io.netty.channel.EventLoop next()> ==> <java.util.concurrent.CopyOnWriteArrayList: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>() in <io.vertx.core.net.impl.VertxEventLoopGroup: io.netty.channel.EventLoop next()> ==> <java.util.ArrayList: boolean isEmpty()>
SPECIAL edge: specialinvoke $r6.<java.lang.IllegalStateException: void <init>()>() in <io.vertx.core.net.impl.VertxEventLoopGroup: io.netty.channel.EventLoop next()> ==> <java.lang.IllegalStateException: void <init>()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i0) in <io.vertx.core.net.impl.VertxEventLoopGroup: io.netty.channel.EventLoop next()> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$1: java.lang.Object get(int)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i0) in <io.vertx.core.net.impl.VertxEventLoopGroup: io.netty.channel.EventLoop next()> ==> <java.util.LinkedList: java.lang.Object get(int)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i0) in <io.vertx.core.net.impl.VertxEventLoopGroup: io.netty.channel.EventLoop next()> ==> <java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i0) in <io.vertx.core.net.impl.VertxEventLoopGroup: io.netty.channel.EventLoop next()> ==> <java.util.ArrayList: java.lang.Object get(int)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.impl.VertxEventLoopGroup: void checkPos()>() in <io.vertx.core.net.impl.VertxEventLoopGroup: io.netty.channel.EventLoop next()> ==> <io.vertx.core.net.impl.VertxEventLoopGroup: void checkPos()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.impl.CompositeFutureImpl$lambda_static_3__45: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.impl.CompositeFutureImpl$lambda_static_0__44: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.impl.WorkerContext: void execute(java.lang.Object,io.vertx.core.Handler)>(null, r1) in <io.vertx.core.impl.WorkerContext: void executeAsync(io.vertx.core.Handler)> ==> <io.vertx.core.impl.WorkerContext: void execute(java.lang.Object,io.vertx.core.Handler)>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.impl.WorkerContext: void execute(java.lang.Object,io.vertx.core.Handler)>(null, r1) in <io.vertx.core.impl.WorkerContext: void executeAsync(io.vertx.core.Handler)> ==> <io.vertx.core.impl.MultiThreadedWorkerContext: void execute(java.lang.Object,io.vertx.core.Handler)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.impl.EventLoopContext: io.netty.channel.EventLoop nettyEventLoop()>() in <io.vertx.core.impl.EventLoopContext: void executeAsync(io.vertx.core.Handler)> ==> <io.vertx.core.impl.EventLoopContext: io.netty.channel.EventLoop nettyEventLoop()>
EXECUTOR edge: interfaceinvoke $r1.<io.netty.channel.EventLoop: void execute(java.lang.Runnable)>($r3) in <io.vertx.core.impl.EventLoopContext: void executeAsync(io.vertx.core.Handler)> ==> <io.vertx.core.impl.BlockedThreadChecker$1: void run()>
EXECUTOR edge: interfaceinvoke $r1.<io.netty.channel.EventLoop: void execute(java.lang.Runnable)>($r3) in <io.vertx.core.impl.EventLoopContext: void executeAsync(io.vertx.core.Handler)> ==> <io.vertx.core.impl.launcher.commands.Watcher: void run()>
EXECUTOR edge: interfaceinvoke $r1.<io.netty.channel.EventLoop: void execute(java.lang.Runnable)>($r3) in <io.vertx.core.impl.EventLoopContext: void executeAsync(io.vertx.core.Handler)> ==> <io.vertx.core.file.impl.FileResolver$lambda_setupCacheDir_1__26: void run()>
EXECUTOR edge: interfaceinvoke $r1.<io.netty.channel.EventLoop: void execute(java.lang.Runnable)>($r3) in <io.vertx.core.impl.EventLoopContext: void executeAsync(io.vertx.core.Handler)> ==> <io.vertx.core.impl.EventLoopContext$lambda_executeAsync_0__54: void run()>
EXECUTOR edge: interfaceinvoke $r1.<io.netty.channel.EventLoop: void execute(java.lang.Runnable)>($r3) in <io.vertx.core.impl.EventLoopContext: void executeAsync(io.vertx.core.Handler)> ==> <io.vertx.core.Starter$1: void run()>
EXECUTOR edge: interfaceinvoke $r1.<io.netty.channel.EventLoop: void execute(java.lang.Runnable)>($r3) in <io.vertx.core.impl.EventLoopContext: void executeAsync(io.vertx.core.Handler)> ==> <java.lang.Thread: void run()>
EXECUTOR edge: interfaceinvoke $r1.<io.netty.channel.EventLoop: void execute(java.lang.Runnable)>($r3) in <io.vertx.core.impl.EventLoopContext: void executeAsync(io.vertx.core.Handler)> ==> <io.vertx.core.impl.TaskQueue$run__63: void run()>
EXECUTOR edge: interfaceinvoke $r1.<io.netty.channel.EventLoop: void execute(java.lang.Runnable)>($r3) in <io.vertx.core.impl.EventLoopContext: void executeAsync(io.vertx.core.Handler)> ==> <io.vertx.core.impl.launcher.commands.RunCommand$1: void run()>
EXECUTOR edge: interfaceinvoke $r1.<io.netty.channel.EventLoop: void execute(java.lang.Runnable)>($r3) in <io.vertx.core.impl.EventLoopContext: void executeAsync(io.vertx.core.Handler)> ==> <io.vertx.core.impl.HAManager$lambda_addToHADeployList_7__8: void run()>
CLINIT edge: l0 = staticinvoke <java.lang.System: long nanoTime()>() in <io.vertx.core.impl.BlockedThreadChecker$1: void run()> ==> <java.lang.System: void <clinit>()>
STATIC edge: $r26 = staticinvoke <io.vertx.core.impl.BlockedThreadChecker: io.vertx.core.logging.Logger access$100()>() in <io.vertx.core.impl.BlockedThreadChecker$1: void run()> ==> <io.vertx.core.impl.BlockedThreadChecker: io.vertx.core.logging.Logger access$100()>
STATIC edge: $r27 = staticinvoke <io.vertx.core.impl.BlockedThreadChecker: io.vertx.core.logging.Logger access$100()>() in <io.vertx.core.impl.BlockedThreadChecker$1: void run()> ==> <io.vertx.core.impl.BlockedThreadChecker: io.vertx.core.logging.Logger access$100()>
STATIC edge: $r4 = staticinvoke <io.vertx.core.impl.BlockedThreadChecker: java.util.Map access$000(io.vertx.core.impl.BlockedThreadChecker)>($r3) in <io.vertx.core.impl.BlockedThreadChecker$1: void run()> ==> <io.vertx.core.impl.BlockedThreadChecker: java.util.Map access$000(io.vertx.core.impl.BlockedThreadChecker)>
STATIC edge: l0 = staticinvoke <java.lang.System: long nanoTime()>() in <io.vertx.core.impl.BlockedThreadChecker$1: void run()> ==> <java.lang.System: long nanoTime()>
CLINIT edge: $r10 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS> in <io.vertx.core.impl.BlockedThreadChecker$1: void run()> ==> <java.util.concurrent.TimeUnit: void <clinit>()>
CLINIT edge: $r4 = staticinvoke <io.vertx.core.impl.BlockedThreadChecker: java.util.Map access$000(io.vertx.core.impl.BlockedThreadChecker)>($r3) in <io.vertx.core.impl.BlockedThreadChecker$1: void run()> ==> <io.vertx.core.impl.BlockedThreadChecker: void <clinit>()>
CLINIT edge: $r3 = <io.vertx.core.impl.launcher.commands.Watcher: io.vertx.core.logging.Logger LOGGER> in <io.vertx.core.impl.launcher.commands.Watcher: void run()> ==> <io.vertx.core.impl.launcher.commands.Watcher: void <clinit>()>
STATIC edge: staticinvoke <java.lang.Thread: void sleep(long)>($l0) in <io.vertx.core.impl.launcher.commands.Watcher: void run()> ==> <java.lang.Thread: void sleep(long)>
CLINIT edge: $r6 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES> in <io.vertx.core.Starter$1: void run()> ==> <java.util.concurrent.TimeUnit: void <clinit>()>
STATIC edge: $r7 = staticinvoke <io.vertx.core.Starter: io.vertx.core.logging.Logger access$000()>() in <io.vertx.core.Starter$1: void run()> ==> <io.vertx.core.Starter: io.vertx.core.logging.Logger access$000()>
STATIC edge: $r5 = staticinvoke <io.vertx.core.Starter$1$lambda_run_0__64: io.vertx.core.Handler bootstrap$(java.util.concurrent.CountDownLatch)>($r0) in <io.vertx.core.Starter$1: void run()> ==> <io.vertx.core.Starter$1$lambda_run_0__64: io.vertx.core.Handler bootstrap$(java.util.concurrent.CountDownLatch)>
CLINIT edge: $r7 = staticinvoke <io.vertx.core.Starter: io.vertx.core.logging.Logger access$000()>() in <io.vertx.core.Starter$1: void run()> ==> <io.vertx.core.Starter: void <clinit>()>
CLINIT edge: $r0 = <io.vertx.core.impl.BlockedThreadChecker: io.vertx.core.logging.Logger log> in <io.vertx.core.impl.BlockedThreadChecker: io.vertx.core.logging.Logger access$100()> ==> <io.vertx.core.impl.BlockedThreadChecker: void <clinit>()>
CLINIT edge: $r0 = staticinvoke <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/impl/launcher/commands/Watcher;") in <io.vertx.core.impl.launcher.commands.Watcher: void <clinit>()> ==> <io.vertx.core.logging.LoggerFactory: void <clinit>()>
STATIC edge: $r0 = staticinvoke <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/impl/launcher/commands/Watcher;") in <io.vertx.core.impl.launcher.commands.Watcher: void <clinit>()> ==> <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>
CLINIT edge: <io.vertx.core.impl.launcher.commands.Watcher: io.vertx.core.logging.Logger LOGGER> = $r0 in <io.vertx.core.impl.launcher.commands.Watcher: void <clinit>()> ==> <io.vertx.core.impl.launcher.commands.Watcher: void <clinit>()>
CLINIT edge: $r0 = <io.vertx.core.Starter: io.vertx.core.logging.Logger log> in <io.vertx.core.Starter: io.vertx.core.logging.Logger access$000()> ==> <io.vertx.core.Starter: void <clinit>()>
SPECIAL edge: specialinvoke $r2.<io.vertx.core.impl.EventLoopContext$lambda_executeAsync_0__54: void <init>(io.vertx.core.impl.EventLoopContext,io.vertx.core.Handler)>($r0, $r1) in <io.vertx.core.impl.EventLoopContext$lambda_executeAsync_0__54: java.lang.Runnable bootstrap$(io.vertx.core.impl.EventLoopContext,io.vertx.core.Handler)> ==> <io.vertx.core.impl.EventLoopContext$lambda_executeAsync_0__54: void <init>(io.vertx.core.impl.EventLoopContext,io.vertx.core.Handler)>
VIRTUAL edge: r4 = virtualinvoke $r0.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>() in <io.vertx.core.file.impl.FileResolver: java.lang.ClassLoader getClassLoader()> ==> <java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>
VIRTUAL edge: $r3 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>() in <io.vertx.core.file.impl.FileResolver: java.lang.ClassLoader getClassLoader()> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: r4 = virtualinvoke $r3.<java.lang.Class: java.lang.ClassLoader getClassLoader()>() in <io.vertx.core.file.impl.FileResolver: java.lang.ClassLoader getClassLoader()> ==> <java.lang.Class: java.lang.ClassLoader getClassLoader()>
VIRTUAL edge: r4 = virtualinvoke $r1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>() in <io.vertx.core.file.impl.FileResolver: java.lang.ClassLoader getClassLoader()> ==> <java.lang.Class: java.lang.ClassLoader getClassLoader()>
VIRTUAL edge: r1 = virtualinvoke r0.<java.net.URL: java.lang.String getProtocol()>() in <io.vertx.core.file.impl.FileResolver: java.io.File unpackUrlResource(java.net.URL,java.lang.String,java.lang.ClassLoader,boolean)> ==> <java.net.URL: java.lang.String getProtocol()>
VIRTUAL edge: $i0 = virtualinvoke r1.<java.lang.String: int hashCode()>() in <io.vertx.core.file.impl.FileResolver: java.io.File unpackUrlResource(java.net.URL,java.lang.String,java.lang.ClassLoader,boolean)> ==> <java.lang.String: int hashCode()>
VIRTUAL edge: $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("file") in <io.vertx.core.file.impl.FileResolver: java.io.File unpackUrlResource(java.net.URL,java.lang.String,java.lang.ClassLoader,boolean)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z3 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("jar") in <io.vertx.core.file.impl.FileResolver: java.io.File unpackUrlResource(java.net.URL,java.lang.String,java.lang.ClassLoader,boolean)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z6 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("bundle") in <io.vertx.core.file.impl.FileResolver: java.io.File unpackUrlResource(java.net.URL,java.lang.String,java.lang.ClassLoader,boolean)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z4 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("bundleentry") in <io.vertx.core.file.impl.FileResolver: java.io.File unpackUrlResource(java.net.URL,java.lang.String,java.lang.ClassLoader,boolean)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("bundleresource") in <io.vertx.core.file.impl.FileResolver: java.io.File unpackUrlResource(java.net.URL,java.lang.String,java.lang.ClassLoader,boolean)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z5 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("resource") in <io.vertx.core.file.impl.FileResolver: java.io.File unpackUrlResource(java.net.URL,java.lang.String,java.lang.ClassLoader,boolean)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: $r8 = specialinvoke r3.<io.vertx.core.file.impl.FileResolver: java.io.File unpackFromFileURL(java.net.URL,java.lang.String,java.lang.ClassLoader)>(r0, r5, r6) in <io.vertx.core.file.impl.FileResolver: java.io.File unpackUrlResource(java.net.URL,java.lang.String,java.lang.ClassLoader,boolean)> ==> <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromFileURL(java.net.URL,java.lang.String,java.lang.ClassLoader)>
SPECIAL edge: $r7 = specialinvoke r3.<io.vertx.core.file.impl.FileResolver: java.io.File unpackFromJarURL(java.net.URL,java.lang.String,java.lang.ClassLoader)>(r0, r5, r6) in <io.vertx.core.file.impl.FileResolver: java.io.File unpackUrlResource(java.net.URL,java.lang.String,java.lang.ClassLoader,boolean)> ==> <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromJarURL(java.net.URL,java.lang.String,java.lang.ClassLoader)>
SPECIAL edge: $r4 = specialinvoke r3.<io.vertx.core.file.impl.FileResolver: java.io.File unpackFromBundleURL(java.net.URL,boolean)>(r0, z1) in <io.vertx.core.file.impl.FileResolver: java.io.File unpackUrlResource(java.net.URL,java.lang.String,java.lang.ClassLoader,boolean)> ==> <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromBundleURL(java.net.URL,boolean)>
SPECIAL edge: specialinvoke $r10.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.file.impl.FileResolver: java.io.File unpackUrlResource(java.net.URL,java.lang.String,java.lang.ClassLoader,boolean)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid url protocol: ") in <io.vertx.core.file.impl.FileResolver: java.io.File unpackUrlResource(java.net.URL,java.lang.String,java.lang.ClassLoader,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <io.vertx.core.file.impl.FileResolver: java.io.File unpackUrlResource(java.net.URL,java.lang.String,java.lang.ClassLoader,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.file.impl.FileResolver: java.io.File unpackUrlResource(java.net.URL,java.lang.String,java.lang.ClassLoader,boolean)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r13) in <io.vertx.core.file.impl.FileResolver: java.io.File unpackUrlResource(java.net.URL,java.lang.String,java.lang.ClassLoader,boolean)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
CLINIT edge: $r36 = new java.io.File in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromFileURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.io.File: void <clinit>()>
STATIC edge: staticinvoke <java.nio.file.Files: java.nio.file.Path copy(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption[])>($r21, $r22, $r40) in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromFileURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.nio.file.Files: java.nio.file.Path copy(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption[])>
STATIC edge: staticinvoke <java.nio.file.Files: java.nio.file.Path copy(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption[])>($r26, $r27, $r28) in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromFileURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.nio.file.Files: java.nio.file.Path copy(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption[])>
STATIC edge: $r3 = staticinvoke <io.vertx.core.net.impl.URIDecoder: java.lang.String decodeURIComponent(java.lang.String,boolean)>($r2, 0) in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromFileURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <io.vertx.core.net.impl.URIDecoder: java.lang.String decodeURIComponent(java.lang.String,boolean)>
CLINIT edge: $r58 = new java.io.File in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromJarURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.io.File: void <clinit>()>
STATIC edge: staticinvoke <java.nio.file.Files: long copy(java.io.InputStream,java.nio.file.Path,java.nio.file.CopyOption[])>(r54, $r20, $r66) in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromJarURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.nio.file.Files: long copy(java.io.InputStream,java.nio.file.Path,java.nio.file.CopyOption[])>
STATIC edge: staticinvoke <java.nio.file.Files: long copy(java.io.InputStream,java.nio.file.Path,java.nio.file.CopyOption[])>(r54, $r23, $r24) in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromJarURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.nio.file.Files: long copy(java.io.InputStream,java.nio.file.Path,java.nio.file.CopyOption[])>
STATIC edge: $r30 = staticinvoke <io.vertx.core.net.impl.URIDecoder: java.lang.String decodeURIComponent(java.lang.String,boolean)>($r29, 0) in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromJarURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <io.vertx.core.net.impl.URIDecoder: java.lang.String decodeURIComponent(java.lang.String,boolean)>
CLINIT edge: $r65 = new java.io.File in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromJarURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.io.File: void <clinit>()>
CLINIT edge: $r63 = new java.io.File in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromJarURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.io.File: void <clinit>()>
CLINIT edge: $r3 = <io.vertx.core.file.impl.FileResolver: java.util.regex.Pattern JAR_URL_SEP_PATTERN> in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromJarURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <io.vertx.core.file.impl.FileResolver: void <clinit>()>
CLINIT edge: $r45 = new java.io.File in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromBundleURL(java.net.URL,boolean)> ==> <java.io.File: void <clinit>()>
STATIC edge: staticinvoke <java.nio.file.Files: long copy(java.io.InputStream,java.nio.file.Path,java.nio.file.CopyOption[])>(r40, $r15, $r49) in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromBundleURL(java.net.URL,boolean)> ==> <java.nio.file.Files: long copy(java.io.InputStream,java.nio.file.Path,java.nio.file.CopyOption[])>
STATIC edge: staticinvoke <java.nio.file.Files: long copy(java.io.InputStream,java.nio.file.Path,java.nio.file.CopyOption[])>(r40, $r28, $r29) in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromBundleURL(java.net.URL,boolean)> ==> <java.nio.file.Files: long copy(java.io.InputStream,java.nio.file.Path,java.nio.file.CopyOption[])>
CLINIT edge: $r48 = new java.io.File in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromBundleURL(java.net.URL,boolean)> ==> <java.io.File: void <clinit>()>
CLINIT edge: $r2 = new java.lang.String in <io.vertx.core.net.impl.URIDecoder: java.lang.String decodeURIComponent(java.lang.String,boolean)> ==> <java.lang.String: void <clinit>()>
STATIC edge: c4 = staticinvoke <io.vertx.core.net.impl.URIDecoder: char decodeHexNibble(char)>($c3) in <io.vertx.core.net.impl.URIDecoder: java.lang.String decodeURIComponent(java.lang.String,boolean)> ==> <io.vertx.core.net.impl.URIDecoder: char decodeHexNibble(char)>
STATIC edge: c20 = staticinvoke <io.vertx.core.net.impl.URIDecoder: char decodeHexNibble(char)>(c19) in <io.vertx.core.net.impl.URIDecoder: java.lang.String decodeURIComponent(java.lang.String,boolean)> ==> <io.vertx.core.net.impl.URIDecoder: char decodeHexNibble(char)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: r2 = virtualinvoke r0.<io.vertx.core.impl.IsolatingClassLoader: java.net.URL findResource(java.lang.String)>(r1) in <io.vertx.core.impl.IsolatingClassLoader: java.net.URL getResource(java.lang.String)> ==> <java.net.URLClassLoader: java.net.URL findResource(java.lang.String)>
SPECIAL edge: r2 = specialinvoke r0.<java.net.URLClassLoader: java.net.URL getResource(java.lang.String)>(r1) in <io.vertx.core.impl.IsolatingClassLoader: java.net.URL getResource(java.lang.String)> ==> <java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>
INTERFACE edge: interfaceinvoke $r12.<io.vertx.core.Vertx: boolean cancelTimer(long)>($l3) in <io.vertx.core.eventbus.impl.HandlerRegistration: void doUnregister(io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl: boolean cancelTimer(long)>
INTERFACE edge: $i2 = interfaceinvoke $r3.<java.util.Queue: int size()>() in <io.vertx.core.eventbus.impl.HandlerRegistration: void doUnregister(io.vertx.core.Handler)> ==> <java.util.Queue: int size()>
INTERFACE edge: $i2 = interfaceinvoke $r3.<java.util.Queue: int size()>() in <io.vertx.core.eventbus.impl.HandlerRegistration: void doUnregister(io.vertx.core.Handler)> ==> <java.util.ArrayDeque: int size()>
INTERFACE edge: $i2 = interfaceinvoke $r3.<java.util.Queue: int size()>() in <io.vertx.core.eventbus.impl.HandlerRegistration: void doUnregister(io.vertx.core.Handler)> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i2 = interfaceinvoke $r3.<java.util.Queue: int size()>() in <io.vertx.core.eventbus.impl.HandlerRegistration: void doUnregister(io.vertx.core.Handler)> ==> <java.util.concurrent.ConcurrentLinkedQueue: int size()>
SPECIAL edge: specialinvoke $r8.<java.util.ArrayDeque: void <init>(java.util.Collection)>($r9) in <io.vertx.core.eventbus.impl.HandlerRegistration: void doUnregister(io.vertx.core.Handler)> ==> <java.util.ArrayDeque: void <init>(java.util.Collection)>
INTERFACE edge: interfaceinvoke $r10.<java.util.Queue: void clear()>() in <io.vertx.core.eventbus.impl.HandlerRegistration: void doUnregister(io.vertx.core.Handler)> ==> <java.util.Queue: void clear()>
INTERFACE edge: interfaceinvoke $r10.<java.util.Queue: void clear()>() in <io.vertx.core.eventbus.impl.HandlerRegistration: void doUnregister(io.vertx.core.Handler)> ==> <java.util.ArrayDeque: void clear()>
INTERFACE edge: interfaceinvoke $r10.<java.util.Queue: void clear()>() in <io.vertx.core.eventbus.impl.HandlerRegistration: void doUnregister(io.vertx.core.Handler)> ==> <java.util.LinkedList: void clear()>
INTERFACE edge: interfaceinvoke $r10.<java.util.Queue: void clear()>() in <io.vertx.core.eventbus.impl.HandlerRegistration: void doUnregister(io.vertx.core.Handler)> ==> <java.util.AbstractQueue: void clear()>
VIRTUAL edge: virtualinvoke $r7.<io.vertx.core.eventbus.impl.EventBusImpl: void removeRegistration(io.vertx.core.eventbus.impl.HandlerHolder,io.vertx.core.Handler)>(r18, r15) in <io.vertx.core.eventbus.impl.HandlerRegistration: void doUnregister(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.EventBusImpl: void removeRegistration(io.vertx.core.eventbus.impl.HandlerHolder,io.vertx.core.Handler)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.eventbus.impl.HandlerRegistration: void callCompletionHandlerAsync(io.vertx.core.Handler)>(r15) in <io.vertx.core.eventbus.impl.HandlerRegistration: void doUnregister(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void callCompletionHandlerAsync(io.vertx.core.Handler)>
INTERFACE edge: $r5 = interfaceinvoke r19.<java.util.Deque: java.lang.Object poll()>() in <io.vertx.core.eventbus.impl.HandlerRegistration: void doUnregister(io.vertx.core.Handler)> ==> <java.util.ArrayDeque: java.lang.Object poll()>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.eventbus.impl.HandlerRegistration: void doUnregister(io.vertx.core.Handler)> ==> <io.vertx.core.impl.DeploymentManager$lambda_doDeployVerticle_2__17: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.eventbus.impl.HandlerRegistration: void doUnregister(io.vertx.core.Handler)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.eventbus.impl.HandlerRegistration: void doUnregister(io.vertx.core.Handler)> ==> <io.vertx.core.impl.FutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.eventbus.impl.HandlerRegistration: void doUnregister(io.vertx.core.Handler)> ==> <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.eventbus.impl.HandlerRegistration: void doUnregister(io.vertx.core.Handler)> ==> <io.vertx.core.impl.SucceededFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.eventbus.impl.HandlerRegistration: void doUnregister(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.eventbus.impl.HandlerRegistration: void doUnregister(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.eventbus.impl.HandlerRegistration: void doUnregister(io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl$lambda_joinCluster_1__10: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.eventbus.impl.HandlerRegistration: void doUnregister(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.eventbus.impl.HandlerRegistration: void doUnregister(io.vertx.core.Handler)> ==> <io.vertx.core.Starter$lambda_runVerticle_1__1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.eventbus.impl.HandlerRegistration: void doUnregister(io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.eventbus.impl.HandlerRegistration: void doUnregister(io.vertx.core.Handler)> ==> <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.eventbus.impl.HandlerRegistration: void doUnregister(io.vertx.core.Handler)> ==> <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.eventbus.impl.HandlerRegistration: void doUnregister(io.vertx.core.Handler)> ==> <io.vertx.core.Starter$lambda_startVertx_0__2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.eventbus.impl.HandlerRegistration: void doUnregister(io.vertx.core.Handler)> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.eventbus.impl.HandlerRegistration: void doUnregister(io.vertx.core.Handler)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.eventbus.impl.HandlerRegistration: void doUnregister(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_start_3__19: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.eventbus.impl.HandlerRegistration: void doUnregister(io.vertx.core.Handler)> ==> <io.vertx.core.impl.HAManager$lambda_doDeployVerticle_4__7: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.eventbus.impl.HandlerRegistration: void doUnregister(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_close_0__29: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.eventbus.impl.HandlerRegistration: void doUnregister(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.eventbus.impl.HandlerRegistration: void doUnregister(io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.eventbus.impl.HandlerRegistration: void doUnregister(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.eventbus.impl.HandlerRegistration: void doUnregister(io.vertx.core.Handler)> ==> <io.vertx.core.Starter$lambda_createLoggingHandler_2__3: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.eventbus.impl.HandlerRegistration: void doUnregister(io.vertx.core.Handler)> ==> <io.vertx.core.impl.CompositeFutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.eventbus.impl.HandlerRegistration: void doUnregister(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.eventbus.impl.HandlerRegistration: void doUnregister(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_finalize_6__18: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.eventbus.impl.HandlerRegistration: void doUnregister(io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.eventbus.impl.HandlerRegistration: void doUnregister(io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl$lambda_init_0__9: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.eventbus.impl.HandlerRegistration: void doUnregister(io.vertx.core.Handler)> ==> <io.vertx.core.impl.FailedFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.eventbus.impl.HandlerRegistration: void doUnregister(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.eventbus.impl.HandlerRegistration: void doUnregister(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_close_5__30: void handle(java.lang.Object)>
CLINIT edge: $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0) in <io.vertx.core.impl.VertxImpl: boolean cancelTimer(long)> ==> <java.lang.Long: void <clinit>()>
STATIC edge: $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0) in <io.vertx.core.impl.VertxImpl: boolean cancelTimer(long)> ==> <java.lang.Long: java.lang.Long valueOf(long)>
STATIC edge: $r3 = staticinvoke <io.vertx.core.eventbus.impl.HandlerRegistration$lambda_callCompletionHandlerAsync_3__65: io.vertx.core.Handler bootstrap$(io.vertx.core.Handler)>(r0) in <io.vertx.core.eventbus.impl.HandlerRegistration: void callCompletionHandlerAsync(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration$lambda_callCompletionHandlerAsync_3__65: io.vertx.core.Handler bootstrap$(io.vertx.core.Handler)>
SPECIAL edge: specialinvoke $r2.<io.vertx.core.eventbus.impl.HandlerRegistration$lambda_doUnregister_2__55: void <init>(io.vertx.core.Handler,io.vertx.core.Handler)>($r0, $r1) in <io.vertx.core.eventbus.impl.HandlerRegistration$lambda_doUnregister_2__55: io.vertx.core.Handler bootstrap$(io.vertx.core.Handler,io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration$lambda_doUnregister_2__55: void <init>(io.vertx.core.Handler,io.vertx.core.Handler)>
VIRTUAL edge: $z0 = virtualinvoke r8.<java.lang.String: boolean endsWith(java.lang.String)>(".java") in <io.vertx.core.impl.JavaVerticleFactory: io.vertx.core.Verticle createVerticle(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.String: boolean endsWith(java.lang.String)>
SPECIAL edge: specialinvoke $r3.<io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)>(r0, r8) in <io.vertx.core.impl.JavaVerticleFactory: io.vertx.core.Verticle createVerticle(java.lang.String,java.lang.ClassLoader)> ==> <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke $r3.<io.vertx.core.impl.verticle.CompilingClassLoader: java.lang.String resolveMainClassName()>() in <io.vertx.core.impl.JavaVerticleFactory: io.vertx.core.Verticle createVerticle(java.lang.String,java.lang.ClassLoader)> ==> <io.vertx.core.impl.verticle.CompilingClassLoader: java.lang.String resolveMainClassName()>
VIRTUAL edge: r9 = virtualinvoke $r3.<io.vertx.core.impl.verticle.CompilingClassLoader: java.lang.Class loadClass(java.lang.String)>(r5) in <io.vertx.core.impl.JavaVerticleFactory: io.vertx.core.Verticle createVerticle(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>
VIRTUAL edge: r9 = virtualinvoke r0.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r8) in <io.vertx.core.impl.JavaVerticleFactory: io.vertx.core.Verticle createVerticle(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r9.<java.lang.Class: java.lang.Object newInstance()>() in <io.vertx.core.impl.JavaVerticleFactory: io.vertx.core.Verticle createVerticle(java.lang.String,java.lang.ClassLoader)> ==> <java.lang.Class: java.lang.Object newInstance()>
CLINIT edge: $r61 = new java.io.File in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <java.io.File: void <clinit>()>
STATIC edge: $r23 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(r20) in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <java.util.Collections: java.util.Set singleton(java.lang.Object)>
STATIC edge: $r15 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>($r14) in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <java.util.Collections: java.util.Set singleton(java.lang.Object)>
STATIC edge: r10 = staticinvoke <javax.tools.ToolProvider: javax.tools.JavaCompiler getSystemJavaCompiler()>() in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <javax.tools.ToolProvider: javax.tools.JavaCompiler getSystemJavaCompiler()>
STATIC edge: $r6 = staticinvoke <io.vertx.core.net.impl.URIDecoder: java.lang.String decodeURIComponent(java.lang.String,boolean)>($r5, 0) in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <io.vertx.core.net.impl.URIDecoder: java.lang.String decodeURIComponent(java.lang.String,boolean)>
CLINIT edge: $r22 = <io.vertx.core.impl.verticle.CompilingClassLoader: java.util.List COMPILER_OPTIONS> in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <io.vertx.core.impl.verticle.CompilingClassLoader: void <clinit>()>
CLINIT edge: $r15 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>($r14) in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <java.util.Collections: void <clinit>()>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.NullPointerException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NullPointerException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: r2 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>(",") in <io.vertx.core.impl.verticle.CompilingClassLoader: void <clinit>()> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
SPECIAL edge: specialinvoke $r3.<java.util.ArrayList: void <init>(int)>($i0) in <io.vertx.core.impl.verticle.CompilingClassLoader: void <clinit>()> ==> <java.util.ArrayList: void <init>(int)>
INTERFACE edge: interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r8) in <io.vertx.core.impl.verticle.CompilingClassLoader: void <clinit>()> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: $r8 = virtualinvoke r7.<java.lang.String: java.lang.String trim()>() in <io.vertx.core.impl.verticle.CompilingClassLoader: void <clinit>()> ==> <java.lang.String: java.lang.String trim()>
VIRTUAL edge: i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(58) in <io.vertx.core.spi.VerticleFactory: java.lang.String removePrefix(java.lang.String)> ==> <java.lang.String: int indexOf(int)>
VIRTUAL edge: $i1 = virtualinvoke r0.<java.lang.String: int length()>() in <io.vertx.core.spi.VerticleFactory: java.lang.String removePrefix(java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i3) in <io.vertx.core.spi.VerticleFactory: java.lang.String removePrefix(java.lang.String)> ==> <java.lang.String: java.lang.String substring(int)>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.spi.VerticleFactory: java.lang.String removePrefix(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid identifier: ") in <io.vertx.core.spi.VerticleFactory: java.lang.String removePrefix(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0) in <io.vertx.core.spi.VerticleFactory: java.lang.String removePrefix(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.spi.VerticleFactory: java.lang.String removePrefix(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6) in <io.vertx.core.spi.VerticleFactory: java.lang.String removePrefix(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: $r1 = specialinvoke r0.<io.vertx.core.impl.ContextImpl: io.vertx.core.impl.Deployment getDeployment()>() in <io.vertx.core.impl.EventLoopContext: io.vertx.core.impl.Deployment getDeployment()> ==> <io.vertx.core.impl.ContextImpl: io.vertx.core.impl.Deployment getDeployment()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.util.UUID: java.lang.String toString()>() in <io.vertx.core.impl.DeploymentManager: java.lang.String generateDeploymentID()> ==> <java.util.UUID: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.impl.DeploymentManager$DeploymentImpl: void <init>(io.vertx.core.impl.DeploymentManager,io.vertx.core.impl.Deployment,java.lang.String,java.lang.String,io.vertx.core.DeploymentOptions)>(r1, r2, r3, r4, r5) in <io.vertx.core.impl.DeploymentManager$DeploymentImpl: void <init>(io.vertx.core.impl.DeploymentManager,io.vertx.core.impl.Deployment,java.lang.String,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.DeploymentManager$1)> ==> <io.vertx.core.impl.DeploymentManager$DeploymentImpl: void <init>(io.vertx.core.impl.DeploymentManager,io.vertx.core.impl.Deployment,java.lang.String,java.lang.String,io.vertx.core.DeploymentOptions)>
CLINIT edge: $r3 = new io.vertx.core.impl.ConcurrentHashSet in <io.vertx.core.impl.DeploymentManager$DeploymentImpl: void <init>(io.vertx.core.impl.DeploymentManager,io.vertx.core.impl.Deployment,java.lang.String,java.lang.String,io.vertx.core.DeploymentOptions)> ==> <io.vertx.core.impl.ConcurrentHashSet: void <clinit>()>
INTERFACE edge: interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1) in <io.vertx.core.impl.DeploymentManager$DeploymentImpl: void addVerticle(io.vertx.core.impl.DeploymentManager$VerticleHolder)> ==> <java.util.AbstractList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1) in <io.vertx.core.impl.DeploymentManager$DeploymentImpl: void addVerticle(io.vertx.core.impl.DeploymentManager$VerticleHolder)> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1) in <io.vertx.core.impl.DeploymentManager$DeploymentImpl: void addVerticle(io.vertx.core.impl.DeploymentManager$VerticleHolder)> ==> <java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1) in <io.vertx.core.impl.DeploymentManager$DeploymentImpl: void addVerticle(io.vertx.core.impl.DeploymentManager$VerticleHolder)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke r0.<io.vertx.core.impl.VertxImpl: io.vertx.core.impl.WorkerExecutorImpl createSharedWorkerExecutor(java.lang.String,int,long,java.util.concurrent.TimeUnit)>(r1, i0, l1, r2) in <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.WorkerExecutorInternal createSharedWorkerExecutor(java.lang.String,int,long,java.util.concurrent.TimeUnit)> ==> <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.WorkerExecutorImpl createSharedWorkerExecutor(java.lang.String,int,long,java.util.concurrent.TimeUnit)>
CLINIT edge: $r5 = new io.vertx.core.impl.VertxThreadFactory in <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.WorkerExecutorImpl createSharedWorkerExecutor(java.lang.String,int,long,java.util.concurrent.TimeUnit)> ==> <io.vertx.core.impl.VertxThreadFactory: void <clinit>()>
STATIC edge: staticinvoke <io.vertx.core.impl.VertxImpl$SharedWorkerPool: int access$408(io.vertx.core.impl.VertxImpl$SharedWorkerPool)>(r19) in <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.WorkerExecutorImpl createSharedWorkerExecutor(java.lang.String,int,long,java.util.concurrent.TimeUnit)> ==> <io.vertx.core.impl.VertxImpl$SharedWorkerPool: int access$408(io.vertx.core.impl.VertxImpl$SharedWorkerPool)>
STATIC edge: r20 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newFixedThreadPool(int,java.util.concurrent.ThreadFactory)>(i0, $r5) in <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.WorkerExecutorImpl createSharedWorkerExecutor(java.lang.String,int,long,java.util.concurrent.TimeUnit)> ==> <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newFixedThreadPool(int,java.util.concurrent.ThreadFactory)>
SPECIAL edge: specialinvoke $r6.<io.vertx.core.impl.MultiThreadedWorkerContext: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.impl.WorkerPool,io.vertx.core.impl.WorkerPool,java.lang.String,io.vertx.core.json.JsonObject,java.lang.ClassLoader)>(r1, $r7, r8, r2, r3, r4) in <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.ContextImpl createWorkerContext(boolean,java.lang.String,io.vertx.core.impl.WorkerPool,io.vertx.core.json.JsonObject,java.lang.ClassLoader)> ==> <io.vertx.core.impl.MultiThreadedWorkerContext: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.impl.WorkerPool,io.vertx.core.impl.WorkerPool,java.lang.String,io.vertx.core.json.JsonObject,java.lang.ClassLoader)>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.impl.WorkerContext: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.impl.WorkerPool,io.vertx.core.impl.WorkerPool,java.lang.String,io.vertx.core.json.JsonObject,java.lang.ClassLoader)>(r1, $r5, r8, r2, r3, r4) in <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.ContextImpl createWorkerContext(boolean,java.lang.String,io.vertx.core.impl.WorkerPool,io.vertx.core.json.JsonObject,java.lang.ClassLoader)> ==> <io.vertx.core.impl.WorkerContext: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.impl.WorkerPool,io.vertx.core.impl.WorkerPool,java.lang.String,io.vertx.core.json.JsonObject,java.lang.ClassLoader)>
VIRTUAL edge: virtualinvoke $r2.<io.vertx.core.impl.CloseHooks: void add(io.vertx.core.Closeable)>(r1) in <io.vertx.core.impl.ContextImpl: void addCloseHook(io.vertx.core.Closeable)> ==> <io.vertx.core.impl.CloseHooks: void add(io.vertx.core.Closeable)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.impl.ContextImpl: void addCloseHook(io.vertx.core.Closeable)>(r1) in <io.vertx.core.impl.EventLoopContext: void addCloseHook(io.vertx.core.Closeable)> ==> <io.vertx.core.impl.ContextImpl: void addCloseHook(io.vertx.core.Closeable)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.impl.ContextImpl: void setDeployment(io.vertx.core.impl.Deployment)>(r1) in <io.vertx.core.impl.EventLoopContext: void setDeployment(io.vertx.core.impl.Deployment)> ==> <io.vertx.core.impl.ContextImpl: void setDeployment(io.vertx.core.impl.Deployment)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.impl.DeploymentManager$VerticleHolder: void <init>(io.vertx.core.Verticle,io.vertx.core.impl.ContextImpl)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.impl.DeploymentManager$lambda_doDeploy_8__49: void <init>(io.vertx.core.impl.DeploymentManager,io.vertx.core.Verticle,io.vertx.core.impl.ContextImpl,io.vertx.core.impl.Deployment,io.vertx.core.impl.DeploymentManager$DeploymentImpl,java.lang.String,java.util.concurrent.atomic.AtomicInteger,io.vertx.core.Verticle[],io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<io.vertx.core.impl.VertxInternal: java.io.File resolveFile(java.lang.String)>($r2) in <io.vertx.core.file.impl.FileSystemImpl$16: io.vertx.core.buffer.Buffer perform()> ==> <io.vertx.core.impl.VertxImpl: java.io.File resolveFile(java.lang.String)>
VIRTUAL edge: r9 = virtualinvoke $r4.<java.io.File: java.nio.file.Path toPath()>() in <io.vertx.core.file.impl.FileSystemImpl$16: io.vertx.core.buffer.Buffer perform()> ==> <java.io.File: java.nio.file.Path toPath()>
SPECIAL edge: specialinvoke $r8.<io.vertx.core.file.FileSystemException: void <init>(java.lang.Throwable)>($r7) in <io.vertx.core.file.impl.FileSystemImpl$16: io.vertx.core.buffer.Buffer perform()> ==> <io.vertx.core.file.FileSystemException: void <init>(java.lang.Throwable)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<io.vertx.core.impl.VertxInternal: java.io.File resolveFile(java.lang.String)>($r2) in <io.vertx.core.file.impl.FileSystemImpl$17: java.lang.Void perform()> ==> <io.vertx.core.impl.VertxImpl: java.io.File resolveFile(java.lang.String)>
VIRTUAL edge: r11 = virtualinvoke $r4.<java.io.File: java.nio.file.Path toPath()>() in <io.vertx.core.file.impl.FileSystemImpl$17: java.lang.Void perform()> ==> <java.io.File: java.nio.file.Path toPath()>
INTERFACE edge: $r6 = interfaceinvoke $r5.<io.vertx.core.buffer.Buffer: byte[] getBytes()>() in <io.vertx.core.file.impl.FileSystemImpl$17: java.lang.Void perform()> ==> <io.vertx.core.buffer.impl.BufferImpl: byte[] getBytes()>
SPECIAL edge: specialinvoke $r10.<io.vertx.core.file.FileSystemException: void <init>(java.lang.Throwable)>($r9) in <io.vertx.core.file.impl.FileSystemImpl$17: java.lang.Void perform()> ==> <io.vertx.core.file.FileSystemException: void <init>(java.lang.Throwable)>
INTERFACE edge: $r13 = interfaceinvoke $r12.<io.vertx.core.impl.VertxInternal: java.io.File resolveFile(java.lang.String)>($r11) in <io.vertx.core.file.impl.FileSystemImpl$14: java.lang.String perform()> ==> <io.vertx.core.impl.VertxImpl: java.io.File resolveFile(java.lang.String)>
VIRTUAL edge: r14 = virtualinvoke $r13.<java.io.File: java.nio.file.Path toPath()>() in <io.vertx.core.file.impl.FileSystemImpl$14: java.lang.String perform()> ==> <java.io.File: java.nio.file.Path toPath()>
INTERFACE edge: $r26 = interfaceinvoke r25.<java.nio.file.Path: java.io.File toFile()>() in <io.vertx.core.file.impl.FileSystemImpl$14: java.lang.String perform()> ==> <java.nio.file.Path: java.io.File toFile()>
VIRTUAL edge: $r27 = virtualinvoke $r26.<java.io.File: java.lang.String getAbsolutePath()>() in <io.vertx.core.file.impl.FileSystemImpl$14: java.lang.String perform()> ==> <java.io.File: java.lang.String getAbsolutePath()>
SPECIAL edge: specialinvoke $r24.<io.vertx.core.file.FileSystemException: void <init>(java.lang.Throwable)>($r23) in <io.vertx.core.file.impl.FileSystemImpl$14: java.lang.String perform()> ==> <io.vertx.core.file.FileSystemException: void <init>(java.lang.Throwable)>
INTERFACE edge: r25 = interfaceinvoke $r3.<io.vertx.core.impl.VertxInternal: java.io.File resolveFile(java.lang.String)>($r2) in <io.vertx.core.file.impl.FileSystemImpl$15: java.util.List perform()> ==> <io.vertx.core.impl.VertxImpl: java.io.File resolveFile(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r25.<java.io.File: boolean exists()>() in <io.vertx.core.file.impl.FileSystemImpl$15: java.util.List perform()> ==> <java.io.File: boolean exists()>
VIRTUAL edge: $z1 = virtualinvoke r25.<java.io.File: boolean isDirectory()>() in <io.vertx.core.file.impl.FileSystemImpl$15: java.util.List perform()> ==> <java.io.File: boolean isDirectory()>
VIRTUAL edge: r27 = virtualinvoke r25.<java.io.File: java.io.File[] listFiles()>() in <io.vertx.core.file.impl.FileSystemImpl$15: java.util.List perform()> ==> <java.io.File: java.io.File[] listFiles()>
VIRTUAL edge: r27 = virtualinvoke r25.<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>(r26) in <io.vertx.core.file.impl.FileSystemImpl$15: java.util.List perform()> ==> <java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>
SPECIAL edge: specialinvoke $r18.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.file.impl.FileSystemImpl$15: java.util.List perform()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot read directory ") in <io.vertx.core.file.impl.FileSystemImpl$15: java.util.List perform()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r25) in <io.vertx.core.file.impl.FileSystemImpl$15: java.util.List perform()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Does not exist") in <io.vertx.core.file.impl.FileSystemImpl$15: java.util.List perform()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.file.impl.FileSystemImpl$15: java.util.List perform()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r17.<io.vertx.core.file.FileSystemException: void <init>(java.lang.String)>($r22) in <io.vertx.core.file.impl.FileSystemImpl$15: java.util.List perform()> ==> <io.vertx.core.file.FileSystemException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r12.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.file.impl.FileSystemImpl$15: java.util.List perform()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot read directory ") in <io.vertx.core.file.impl.FileSystemImpl$15: java.util.List perform()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r25) in <io.vertx.core.file.impl.FileSystemImpl$15: java.util.List perform()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". It\'s not a directory") in <io.vertx.core.file.impl.FileSystemImpl$15: java.util.List perform()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.file.impl.FileSystemImpl$15: java.util.List perform()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r11.<io.vertx.core.file.FileSystemException: void <init>(java.lang.String)>($r16) in <io.vertx.core.file.impl.FileSystemImpl$15: java.util.List perform()> ==> <io.vertx.core.file.FileSystemException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r10.<io.vertx.core.file.impl.FileSystemImpl$15$1: void <init>(io.vertx.core.file.impl.FileSystemImpl$15)>(r0) in <io.vertx.core.file.impl.FileSystemImpl$15: java.util.List perform()> ==> <io.vertx.core.file.impl.FileSystemImpl$15$1: void <init>(io.vertx.core.file.impl.FileSystemImpl$15)>
SPECIAL edge: specialinvoke $r5.<java.util.ArrayList: void <init>(int)>($i0) in <io.vertx.core.file.impl.FileSystemImpl$15: java.util.List perform()> ==> <java.util.ArrayList: void <init>(int)>
INTERFACE edge: interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r9) in <io.vertx.core.file.impl.FileSystemImpl$15: java.util.List perform()> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: $r9 = virtualinvoke r8.<java.io.File: java.lang.String getCanonicalPath()>() in <io.vertx.core.file.impl.FileSystemImpl$15: java.util.List perform()> ==> <java.io.File: java.lang.String getCanonicalPath()>
SPECIAL edge: specialinvoke $r24.<io.vertx.core.file.FileSystemException: void <init>(java.lang.Throwable)>($r23) in <io.vertx.core.file.impl.FileSystemImpl$15: java.util.List perform()> ==> <io.vertx.core.file.FileSystemException: void <init>(java.lang.Throwable)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<io.vertx.core.impl.VertxInternal: java.io.File resolveFile(java.lang.String)>($r2) in <io.vertx.core.file.impl.FileSystemImpl$1: java.lang.Void perform()> ==> <io.vertx.core.impl.VertxImpl: java.io.File resolveFile(java.lang.String)>
VIRTUAL edge: r14 = virtualinvoke $r4.<java.io.File: java.nio.file.Path toPath()>() in <io.vertx.core.file.impl.FileSystemImpl$1: java.lang.Void perform()> ==> <java.io.File: java.nio.file.Path toPath()>
INTERFACE edge: $r8 = interfaceinvoke $r7.<io.vertx.core.impl.VertxInternal: java.io.File resolveFile(java.lang.String)>($r6) in <io.vertx.core.file.impl.FileSystemImpl$1: java.lang.Void perform()> ==> <io.vertx.core.impl.VertxImpl: java.io.File resolveFile(java.lang.String)>
VIRTUAL edge: r9 = virtualinvoke $r8.<java.io.File: java.nio.file.Path toPath()>() in <io.vertx.core.file.impl.FileSystemImpl$1: java.lang.Void perform()> ==> <java.io.File: java.nio.file.Path toPath()>
SPECIAL edge: specialinvoke $r13.<io.vertx.core.file.FileSystemException: void <init>(java.lang.Throwable)>($r12) in <io.vertx.core.file.impl.FileSystemImpl$1: java.lang.Void perform()> ==> <io.vertx.core.file.FileSystemException: void <init>(java.lang.Throwable)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<io.vertx.core.impl.VertxInternal: java.io.File resolveFile(java.lang.String)>($r2) in <io.vertx.core.file.impl.FileSystemImpl$2: java.lang.Void perform()> ==> <io.vertx.core.impl.VertxImpl: java.io.File resolveFile(java.lang.String)>
VIRTUAL edge: r18 = virtualinvoke $r4.<java.io.File: java.nio.file.Path toPath()>() in <io.vertx.core.file.impl.FileSystemImpl$2: java.lang.Void perform()> ==> <java.io.File: java.nio.file.Path toPath()>
INTERFACE edge: $r8 = interfaceinvoke $r7.<io.vertx.core.impl.VertxInternal: java.io.File resolveFile(java.lang.String)>($r6) in <io.vertx.core.file.impl.FileSystemImpl$2: java.lang.Void perform()> ==> <io.vertx.core.impl.VertxImpl: java.io.File resolveFile(java.lang.String)>
VIRTUAL edge: r9 = virtualinvoke $r8.<java.io.File: java.nio.file.Path toPath()>() in <io.vertx.core.file.impl.FileSystemImpl$2: java.lang.Void perform()> ==> <java.io.File: java.nio.file.Path toPath()>
SPECIAL edge: specialinvoke $r20.<io.vertx.core.file.impl.FileSystemImpl$2$1: void <init>(io.vertx.core.file.impl.FileSystemImpl$2,java.nio.file.Path,java.nio.file.Path)>(r0, r9, r18) in <io.vertx.core.file.impl.FileSystemImpl$2: java.lang.Void perform()> ==> <io.vertx.core.file.impl.FileSystemImpl$2$1: void <init>(io.vertx.core.file.impl.FileSystemImpl$2,java.nio.file.Path,java.nio.file.Path)>
SPECIAL edge: specialinvoke $r21.<io.vertx.core.file.FileSystemException: void <init>(java.lang.Throwable)>($r16) in <io.vertx.core.file.impl.FileSystemImpl$2: java.lang.Void perform()> ==> <io.vertx.core.file.FileSystemException: void <init>(java.lang.Throwable)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<io.vertx.core.impl.VertxInternal: java.io.File resolveFile(java.lang.String)>($r2) in <io.vertx.core.file.impl.FileSystemImpl$3: java.lang.Void perform()> ==> <io.vertx.core.impl.VertxImpl: java.io.File resolveFile(java.lang.String)>
VIRTUAL edge: r14 = virtualinvoke $r4.<java.io.File: java.nio.file.Path toPath()>() in <io.vertx.core.file.impl.FileSystemImpl$3: java.lang.Void perform()> ==> <java.io.File: java.nio.file.Path toPath()>
INTERFACE edge: $r8 = interfaceinvoke $r7.<io.vertx.core.impl.VertxInternal: java.io.File resolveFile(java.lang.String)>($r6) in <io.vertx.core.file.impl.FileSystemImpl$3: java.lang.Void perform()> ==> <io.vertx.core.impl.VertxImpl: java.io.File resolveFile(java.lang.String)>
VIRTUAL edge: r9 = virtualinvoke $r8.<java.io.File: java.nio.file.Path toPath()>() in <io.vertx.core.file.impl.FileSystemImpl$3: java.lang.Void perform()> ==> <java.io.File: java.nio.file.Path toPath()>
SPECIAL edge: specialinvoke $r13.<io.vertx.core.file.FileSystemException: void <init>(java.lang.Throwable)>($r12) in <io.vertx.core.file.impl.FileSystemImpl$3: java.lang.Void perform()> ==> <io.vertx.core.file.FileSystemException: void <init>(java.lang.Throwable)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<io.vertx.core.impl.VertxInternal: java.io.File resolveFile(java.lang.String)>($r2) in <io.vertx.core.file.impl.FileSystemImpl$18: io.vertx.core.file.AsyncFile perform()> ==> <io.vertx.core.impl.VertxImpl: java.io.File resolveFile(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke $r4.<java.io.File: java.lang.String getAbsolutePath()>() in <io.vertx.core.file.impl.FileSystemImpl$18: io.vertx.core.file.AsyncFile perform()> ==> <java.io.File: java.lang.String getAbsolutePath()>
VIRTUAL edge: $r9 = virtualinvoke $r8.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.AsyncFile doOpen(java.lang.String,io.vertx.core.file.OpenOptions,io.vertx.core.impl.ContextInternal)>(r5, $r7, $r6) in <io.vertx.core.file.impl.FileSystemImpl$18: io.vertx.core.file.AsyncFile perform()> ==> <io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.AsyncFile doOpen(java.lang.String,io.vertx.core.file.OpenOptions,io.vertx.core.impl.ContextInternal)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.AsyncFile doOpen(java.lang.String,io.vertx.core.file.OpenOptions,io.vertx.core.impl.ContextInternal)>(r5, $r7, $r6) in <io.vertx.core.file.impl.FileSystemImpl$18: io.vertx.core.file.AsyncFile perform()> ==> <io.vertx.core.file.impl.WindowsFileSystem: io.vertx.core.file.AsyncFile doOpen(java.lang.String,io.vertx.core.file.OpenOptions,io.vertx.core.impl.ContextInternal)>
CLINIT edge: $r0 = new io.vertx.core.file.impl.AsyncFileImpl in <io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.AsyncFile doOpen(java.lang.String,io.vertx.core.file.OpenOptions,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.file.impl.AsyncFileImpl: void <clinit>()>
CLINIT edge: staticinvoke <io.vertx.core.file.impl.WindowsFileSystem: void logInternal(java.lang.String)>($r1) in <io.vertx.core.file.impl.WindowsFileSystem: io.vertx.core.file.AsyncFile doOpen(java.lang.String,io.vertx.core.file.OpenOptions,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.file.impl.WindowsFileSystem: void <clinit>()>
STATIC edge: staticinvoke <io.vertx.core.file.impl.WindowsFileSystem: void logInternal(java.lang.String)>($r1) in <io.vertx.core.file.impl.WindowsFileSystem: io.vertx.core.file.AsyncFile doOpen(java.lang.String,io.vertx.core.file.OpenOptions,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.file.impl.WindowsFileSystem: void logInternal(java.lang.String)>
CLINIT edge: $r2 = new io.vertx.core.file.impl.AsyncFileImpl in <io.vertx.core.file.impl.WindowsFileSystem: io.vertx.core.file.AsyncFile doOpen(java.lang.String,io.vertx.core.file.OpenOptions,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.file.impl.AsyncFileImpl: void <clinit>()>
CLINIT edge: staticinvoke <io.vertx.core.file.impl.WindowsFileSystem: void logInternal(java.lang.String)>($r1) in <io.vertx.core.file.impl.WindowsFileSystem: io.vertx.core.file.AsyncFile doOpen(java.lang.String,io.vertx.core.file.OpenOptions,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.file.impl.FileSystemImpl: void <clinit>()>
CLINIT edge: $r0 = staticinvoke <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/file/AsyncFile;") in <io.vertx.core.file.impl.AsyncFileImpl: void <clinit>()> ==> <io.vertx.core.logging.LoggerFactory: void <clinit>()>
STATIC edge: $r0 = staticinvoke <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/file/AsyncFile;") in <io.vertx.core.file.impl.AsyncFileImpl: void <clinit>()> ==> <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>
CLINIT edge: <io.vertx.core.file.impl.AsyncFileImpl: io.vertx.core.logging.Logger log> = $r0 in <io.vertx.core.file.impl.AsyncFileImpl: void <clinit>()> ==> <io.vertx.core.file.impl.AsyncFileImpl: void <clinit>()>
CLINIT edge: $r1 = <io.vertx.core.file.impl.WindowsFileSystem: io.vertx.core.logging.Logger log> in <io.vertx.core.file.impl.WindowsFileSystem: void logInternal(java.lang.String)> ==> <io.vertx.core.file.impl.WindowsFileSystem: void <clinit>()>
CLINIT edge: $r1 = <io.vertx.core.file.impl.WindowsFileSystem: io.vertx.core.logging.Logger log> in <io.vertx.core.file.impl.WindowsFileSystem: void logInternal(java.lang.String)> ==> <io.vertx.core.file.impl.FileSystemImpl: void <clinit>()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<io.vertx.core.impl.VertxInternal: java.io.File resolveFile(java.lang.String)>($r2) in <io.vertx.core.file.impl.FileSystemImpl$4: java.lang.Void perform()> ==> <io.vertx.core.impl.VertxImpl: java.io.File resolveFile(java.lang.String)>
VIRTUAL edge: r21 = virtualinvoke $r4.<java.io.File: java.lang.String getAbsolutePath()>() in <io.vertx.core.file.impl.FileSystemImpl$4: java.lang.Void perform()> ==> <java.io.File: java.lang.String getAbsolutePath()>
SPECIAL edge: specialinvoke $r15.<io.vertx.core.file.FileSystemException: void <init>(java.lang.String)>("Cannot truncate file to size < 0") in <io.vertx.core.file.impl.FileSystemImpl$4: java.lang.Void perform()> ==> <io.vertx.core.file.FileSystemException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r10.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.file.impl.FileSystemImpl$4: java.lang.Void perform()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot truncate file ") in <io.vertx.core.file.impl.FileSystemImpl$4: java.lang.Void perform()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r21) in <io.vertx.core.file.impl.FileSystemImpl$4: java.lang.Void perform()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Does not exist") in <io.vertx.core.file.impl.FileSystemImpl$4: java.lang.Void perform()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.file.impl.FileSystemImpl$4: java.lang.Void perform()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r9.<io.vertx.core.file.FileSystemException: void <init>(java.lang.String)>($r14) in <io.vertx.core.file.impl.FileSystemImpl$4: java.lang.Void perform()> ==> <io.vertx.core.file.FileSystemException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r8.<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>(r21, "rw") in <io.vertx.core.file.impl.FileSystemImpl$4: java.lang.Void perform()> ==> <java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>
VIRTUAL edge: virtualinvoke $r8.<java.io.RandomAccessFile: void setLength(long)>($l2) in <io.vertx.core.file.impl.FileSystemImpl$4: java.lang.Void perform()> ==> <java.io.RandomAccessFile: void setLength(long)>
VIRTUAL edge: virtualinvoke $r8.<java.io.RandomAccessFile: void close()>() in <io.vertx.core.file.impl.FileSystemImpl$4: java.lang.Void perform()> ==> <java.io.RandomAccessFile: void close()>
VIRTUAL edge: virtualinvoke r20.<java.io.RandomAccessFile: void close()>() in <io.vertx.core.file.impl.FileSystemImpl$4: java.lang.Void perform()> ==> <java.io.RandomAccessFile: void close()>
SPECIAL edge: specialinvoke $r17.<io.vertx.core.file.FileSystemException: void <init>(java.lang.Throwable)>($r16) in <io.vertx.core.file.impl.FileSystemImpl$4: java.lang.Void perform()> ==> <io.vertx.core.file.FileSystemException: void <init>(java.lang.Throwable)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<io.vertx.core.impl.VertxInternal: java.io.File resolveFile(java.lang.String)>($r2) in <io.vertx.core.file.impl.FileSystemImpl$19: java.lang.Void perform()> ==> <io.vertx.core.impl.VertxImpl: java.io.File resolveFile(java.lang.String)>
VIRTUAL edge: r13 = virtualinvoke $r4.<java.io.File: java.nio.file.Path toPath()>() in <io.vertx.core.file.impl.FileSystemImpl$19: java.lang.Void perform()> ==> <java.io.File: java.nio.file.Path toPath()>
SPECIAL edge: specialinvoke $r12.<io.vertx.core.file.FileSystemException: void <init>(java.lang.Throwable)>($r11) in <io.vertx.core.file.impl.FileSystemImpl$19: java.lang.Void perform()> ==> <io.vertx.core.file.FileSystemException: void <init>(java.lang.Throwable)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<io.vertx.core.impl.VertxInternal: java.io.File resolveFile(java.lang.String)>($r2) in <io.vertx.core.file.impl.FileSystemImpl$5: java.lang.Void perform()> ==> <io.vertx.core.impl.VertxImpl: java.io.File resolveFile(java.lang.String)>
VIRTUAL edge: r19 = virtualinvoke $r4.<java.io.File: java.nio.file.Path toPath()>() in <io.vertx.core.file.impl.FileSystemImpl$5: java.lang.Void perform()> ==> <java.io.File: java.nio.file.Path toPath()>
SPECIAL edge: specialinvoke $r22.<io.vertx.core.file.impl.FileSystemImpl$5$1: void <init>(io.vertx.core.file.impl.FileSystemImpl$5)>(r0) in <io.vertx.core.file.impl.FileSystemImpl$5: java.lang.Void perform()> ==> <io.vertx.core.file.impl.FileSystemImpl$5$1: void <init>(io.vertx.core.file.impl.FileSystemImpl$5)>
SPECIAL edge: specialinvoke $r23.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.file.impl.FileSystemImpl$5: java.lang.Void perform()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r15 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Accessed denied for chmod on ") in <io.vertx.core.file.impl.FileSystemImpl$5: java.lang.Void perform()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16) in <io.vertx.core.file.impl.FileSystemImpl$5: java.lang.Void perform()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.file.impl.FileSystemImpl$5: java.lang.Void perform()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r24.<io.vertx.core.file.FileSystemException: void <init>(java.lang.String)>($r18) in <io.vertx.core.file.impl.FileSystemImpl$5: java.lang.Void perform()> ==> <io.vertx.core.file.FileSystemException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r25.<io.vertx.core.file.FileSystemException: void <init>(java.lang.Throwable)>($r10) in <io.vertx.core.file.impl.FileSystemImpl$5: java.lang.Void perform()> ==> <io.vertx.core.file.FileSystemException: void <init>(java.lang.Throwable)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<io.vertx.core.impl.VertxInternal: java.io.File resolveFile(java.lang.String)>($r2) in <io.vertx.core.file.impl.FileSystemImpl$6: java.lang.Void perform()> ==> <io.vertx.core.impl.VertxImpl: java.io.File resolveFile(java.lang.String)>
VIRTUAL edge: r28 = virtualinvoke $r4.<java.io.File: java.nio.file.Path toPath()>() in <io.vertx.core.file.impl.FileSystemImpl$6: java.lang.Void perform()> ==> <java.io.File: java.nio.file.Path toPath()>
INTERFACE edge: $r5 = interfaceinvoke r28.<java.nio.file.Path: java.nio.file.FileSystem getFileSystem()>() in <io.vertx.core.file.impl.FileSystemImpl$6: java.lang.Void perform()> ==> <java.nio.file.Path: java.nio.file.FileSystem getFileSystem()>
VIRTUAL edge: r6 = virtualinvoke $r5.<java.nio.file.FileSystem: java.nio.file.attribute.UserPrincipalLookupService getUserPrincipalLookupService()>() in <io.vertx.core.file.impl.FileSystemImpl$6: java.lang.Void perform()> ==> <java.nio.file.FileSystem: java.nio.file.attribute.UserPrincipalLookupService getUserPrincipalLookupService()>
VIRTUAL edge: $r29 = virtualinvoke r6.<java.nio.file.attribute.UserPrincipalLookupService: java.nio.file.attribute.UserPrincipal lookupPrincipalByName(java.lang.String)>($r8) in <io.vertx.core.file.impl.FileSystemImpl$6: java.lang.Void perform()> ==> <java.nio.file.attribute.UserPrincipalLookupService: java.nio.file.attribute.UserPrincipal lookupPrincipalByName(java.lang.String)>
VIRTUAL edge: $r30 = virtualinvoke r6.<java.nio.file.attribute.UserPrincipalLookupService: java.nio.file.attribute.GroupPrincipal lookupPrincipalByGroupName(java.lang.String)>($r11) in <io.vertx.core.file.impl.FileSystemImpl$6: java.lang.Void perform()> ==> <java.nio.file.attribute.UserPrincipalLookupService: java.nio.file.attribute.GroupPrincipal lookupPrincipalByGroupName(java.lang.String)>
SPECIAL edge: specialinvoke $r18.<io.vertx.core.file.FileSystemException: void <init>(java.lang.String)>("Change group of file not supported") in <io.vertx.core.file.impl.FileSystemImpl$6: java.lang.Void perform()> ==> <io.vertx.core.file.FileSystemException: void <init>(java.lang.String)>
INTERFACE edge: interfaceinvoke r17.<java.nio.file.attribute.PosixFileAttributeView: void setGroup(java.nio.file.attribute.GroupPrincipal)>($r30) in <io.vertx.core.file.impl.FileSystemImpl$6: java.lang.Void perform()> ==> <java.nio.file.attribute.PosixFileAttributeView: void setGroup(java.nio.file.attribute.GroupPrincipal)>
SPECIAL edge: specialinvoke $r23.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.file.impl.FileSystemImpl$6: java.lang.Void perform()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Accessed denied for chown on ") in <io.vertx.core.file.impl.FileSystemImpl$6: java.lang.Void perform()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25) in <io.vertx.core.file.impl.FileSystemImpl$6: java.lang.Void perform()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.file.impl.FileSystemImpl$6: java.lang.Void perform()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r22.<io.vertx.core.file.FileSystemException: void <init>(java.lang.String)>($r27) in <io.vertx.core.file.impl.FileSystemImpl$6: java.lang.Void perform()> ==> <io.vertx.core.file.FileSystemException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r20.<io.vertx.core.file.FileSystemException: void <init>(java.lang.Throwable)>($r19) in <io.vertx.core.file.impl.FileSystemImpl$6: java.lang.Void perform()> ==> <io.vertx.core.file.FileSystemException: void <init>(java.lang.Throwable)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<io.vertx.core.impl.VertxInternal: java.io.File resolveFile(java.lang.String)>($r2) in <io.vertx.core.file.impl.FileSystemImpl$7: io.vertx.core.file.FileProps perform()> ==> <io.vertx.core.impl.VertxImpl: java.io.File resolveFile(java.lang.String)>
VIRTUAL edge: r11 = virtualinvoke $r4.<java.io.File: java.nio.file.Path toPath()>() in <io.vertx.core.file.impl.FileSystemImpl$7: io.vertx.core.file.FileProps perform()> ==> <java.io.File: java.nio.file.Path toPath()>
SPECIAL edge: specialinvoke $r7.<io.vertx.core.file.impl.FilePropsImpl: void <init>(java.nio.file.attribute.BasicFileAttributes)>(r12) in <io.vertx.core.file.impl.FileSystemImpl$7: io.vertx.core.file.FileProps perform()> ==> <io.vertx.core.file.impl.FilePropsImpl: void <init>(java.nio.file.attribute.BasicFileAttributes)>
SPECIAL edge: specialinvoke $r10.<io.vertx.core.file.FileSystemException: void <init>(java.lang.Throwable)>($r9) in <io.vertx.core.file.impl.FileSystemImpl$7: io.vertx.core.file.FileProps perform()> ==> <io.vertx.core.file.FileSystemException: void <init>(java.lang.Throwable)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<io.vertx.core.impl.VertxInternal: java.io.File resolveFile(java.lang.String)>($r2) in <io.vertx.core.file.impl.FileSystemImpl$8: java.lang.Void perform()> ==> <io.vertx.core.impl.VertxImpl: java.io.File resolveFile(java.lang.String)>
VIRTUAL edge: r15 = virtualinvoke $r4.<java.io.File: java.nio.file.Path toPath()>() in <io.vertx.core.file.impl.FileSystemImpl$8: java.lang.Void perform()> ==> <java.io.File: java.nio.file.Path toPath()>
INTERFACE edge: $r8 = interfaceinvoke $r7.<io.vertx.core.impl.VertxInternal: java.io.File resolveFile(java.lang.String)>($r6) in <io.vertx.core.file.impl.FileSystemImpl$8: java.lang.Void perform()> ==> <io.vertx.core.impl.VertxImpl: java.io.File resolveFile(java.lang.String)>
VIRTUAL edge: r9 = virtualinvoke $r8.<java.io.File: java.nio.file.Path toPath()>() in <io.vertx.core.file.impl.FileSystemImpl$8: java.lang.Void perform()> ==> <java.io.File: java.nio.file.Path toPath()>
SPECIAL edge: specialinvoke $r14.<io.vertx.core.file.FileSystemException: void <init>(java.lang.Throwable)>($r13) in <io.vertx.core.file.impl.FileSystemImpl$8: java.lang.Void perform()> ==> <io.vertx.core.file.FileSystemException: void <init>(java.lang.Throwable)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<io.vertx.core.impl.VertxInternal: java.io.File resolveFile(java.lang.String)>($r2) in <io.vertx.core.file.impl.FileSystemImpl$9: java.lang.String perform()> ==> <io.vertx.core.impl.VertxImpl: java.io.File resolveFile(java.lang.String)>
VIRTUAL edge: r9 = virtualinvoke $r4.<java.io.File: java.nio.file.Path toPath()>() in <io.vertx.core.file.impl.FileSystemImpl$9: java.lang.String perform()> ==> <java.io.File: java.nio.file.Path toPath()>
INTERFACE edge: $r6 = interfaceinvoke $r5.<java.nio.file.Path: java.lang.String toString()>() in <io.vertx.core.file.impl.FileSystemImpl$9: java.lang.String perform()> ==> <java.nio.file.Path: java.lang.String toString()>
SPECIAL edge: specialinvoke $r8.<io.vertx.core.file.FileSystemException: void <init>(java.lang.Throwable)>($r7) in <io.vertx.core.file.impl.FileSystemImpl$9: java.lang.String perform()> ==> <io.vertx.core.file.FileSystemException: void <init>(java.lang.Throwable)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>() in <io.vertx.core.file.impl.FileSystemImpl$20: java.lang.Boolean perform()> ==> <java.io.File: boolean exists()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<io.vertx.core.impl.VertxInternal: java.io.File resolveFile(java.lang.String)>($r2) in <io.vertx.core.file.impl.FileSystemImpl$12: java.lang.Void perform()> ==> <io.vertx.core.impl.VertxImpl: java.io.File resolveFile(java.lang.String)>
VIRTUAL edge: r19 = virtualinvoke $r4.<java.io.File: java.nio.file.Path toPath()>() in <io.vertx.core.file.impl.FileSystemImpl$12: java.lang.Void perform()> ==> <java.io.File: java.nio.file.Path toPath()>
SPECIAL edge: specialinvoke $r18.<io.vertx.core.file.FileSystemException: void <init>(java.lang.Throwable)>($r17) in <io.vertx.core.file.impl.FileSystemImpl$12: java.lang.Void perform()> ==> <io.vertx.core.file.FileSystemException: void <init>(java.lang.Throwable)>
INTERFACE edge: $r11 = interfaceinvoke $r10.<io.vertx.core.impl.VertxInternal: java.io.File resolveFile(java.lang.String)>($r9) in <io.vertx.core.file.impl.FileSystemImpl$13: java.lang.String perform()> ==> <io.vertx.core.impl.VertxImpl: java.io.File resolveFile(java.lang.String)>
VIRTUAL edge: r12 = virtualinvoke $r11.<java.io.File: java.nio.file.Path toPath()>() in <io.vertx.core.file.impl.FileSystemImpl$13: java.lang.String perform()> ==> <java.io.File: java.nio.file.Path toPath()>
INTERFACE edge: $r22 = interfaceinvoke r21.<java.nio.file.Path: java.io.File toFile()>() in <io.vertx.core.file.impl.FileSystemImpl$13: java.lang.String perform()> ==> <java.nio.file.Path: java.io.File toFile()>
VIRTUAL edge: $r23 = virtualinvoke $r22.<java.io.File: java.lang.String getAbsolutePath()>() in <io.vertx.core.file.impl.FileSystemImpl$13: java.lang.String perform()> ==> <java.io.File: java.lang.String getAbsolutePath()>
SPECIAL edge: specialinvoke $r20.<io.vertx.core.file.FileSystemException: void <init>(java.lang.Throwable)>($r19) in <io.vertx.core.file.impl.FileSystemImpl$13: java.lang.String perform()> ==> <io.vertx.core.file.FileSystemException: void <init>(java.lang.Throwable)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<io.vertx.core.impl.VertxInternal: java.io.File resolveFile(java.lang.String)>($r2) in <io.vertx.core.file.impl.FileSystemImpl$21: io.vertx.core.file.FileSystemProps perform()> ==> <io.vertx.core.impl.VertxImpl: java.io.File resolveFile(java.lang.String)>
VIRTUAL edge: r9 = virtualinvoke $r4.<java.io.File: java.nio.file.Path toPath()>() in <io.vertx.core.file.impl.FileSystemImpl$21: io.vertx.core.file.FileSystemProps perform()> ==> <java.io.File: java.nio.file.Path toPath()>
VIRTUAL edge: $l0 = virtualinvoke r5.<java.nio.file.FileStore: long getTotalSpace()>() in <io.vertx.core.file.impl.FileSystemImpl$21: io.vertx.core.file.FileSystemProps perform()> ==> <java.nio.file.FileStore: long getTotalSpace()>
VIRTUAL edge: $l1 = virtualinvoke r5.<java.nio.file.FileStore: long getUnallocatedSpace()>() in <io.vertx.core.file.impl.FileSystemImpl$21: io.vertx.core.file.FileSystemProps perform()> ==> <java.nio.file.FileStore: long getUnallocatedSpace()>
VIRTUAL edge: $l2 = virtualinvoke r5.<java.nio.file.FileStore: long getUsableSpace()>() in <io.vertx.core.file.impl.FileSystemImpl$21: io.vertx.core.file.FileSystemProps perform()> ==> <java.nio.file.FileStore: long getUsableSpace()>
SPECIAL edge: specialinvoke $r6.<io.vertx.core.file.impl.FileSystemPropsImpl: void <init>(long,long,long)>($l0, $l1, $l2) in <io.vertx.core.file.impl.FileSystemImpl$21: io.vertx.core.file.FileSystemProps perform()> ==> <io.vertx.core.file.impl.FileSystemPropsImpl: void <init>(long,long,long)>
SPECIAL edge: specialinvoke $r8.<io.vertx.core.file.FileSystemException: void <init>(java.lang.Throwable)>($r7) in <io.vertx.core.file.impl.FileSystemImpl$21: io.vertx.core.file.FileSystemProps perform()> ==> <io.vertx.core.file.FileSystemException: void <init>(java.lang.Throwable)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<io.vertx.core.impl.VertxInternal: java.io.File resolveFile(java.lang.String)>($r2) in <io.vertx.core.file.impl.FileSystemImpl$10: java.lang.Void perform()> ==> <io.vertx.core.impl.VertxImpl: java.io.File resolveFile(java.lang.String)>
VIRTUAL edge: r7 = virtualinvoke $r4.<java.io.File: java.nio.file.Path toPath()>() in <io.vertx.core.file.impl.FileSystemImpl$10: java.lang.Void perform()> ==> <java.io.File: java.nio.file.Path toPath()>
SPECIAL edge: specialinvoke $r6.<io.vertx.core.file.FileSystemException: void <init>(java.lang.Throwable)>($r5) in <io.vertx.core.file.impl.FileSystemImpl$10: java.lang.Void perform()> ==> <io.vertx.core.file.FileSystemException: void <init>(java.lang.Throwable)>
SPECIAL edge: specialinvoke $r3.<io.vertx.core.file.impl.FileSystemImpl$11: void <init>()>() in <io.vertx.core.file.impl.FileSystemImpl: void delete(java.nio.file.Path,boolean)> ==> <io.vertx.core.file.impl.FileSystemImpl$11: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.eventbus.impl.MessageImpl: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],java.nio.charset.Charset)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],java.nio.charset.Charset)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r1) in <io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec getCodec(java.lang.String)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.impl.ServerID: void <init>(int,java.lang.String)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke r1.<io.netty.buffer.ByteBuf: int readableBytes()>() in <io.vertx.core.net.impl.NetSocketImpl: void write(io.netty.buffer.ByteBuf)> ==> <io.netty.buffer.ByteBuf: int readableBytes()>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.net.impl.NetSocketImpl: void reportBytesWritten(long)>($l1) in <io.vertx.core.net.impl.NetSocketImpl: void write(io.netty.buffer.ByteBuf)> ==> <io.vertx.core.net.impl.ConnectionBase: void reportBytesWritten(long)>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.net.impl.NetSocketImpl: io.vertx.core.impl.NetSocketInternal writeMessage(java.lang.Object)>(r1) in <io.vertx.core.net.impl.NetSocketImpl: void write(io.netty.buffer.ByteBuf)> ==> <io.vertx.core.net.impl.NetSocketImpl: io.vertx.core.impl.NetSocketInternal writeMessage(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r4.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: void writeData(io.netty.handler.codec.http2.Http2Stream,io.netty.buffer.ByteBuf,boolean,io.vertx.core.Handler)>($r3, r2, z0, null) in <io.vertx.core.http.impl.VertxHttp2Stream: void writeData(io.netty.buffer.ByteBuf,boolean)> ==> <io.vertx.core.http.impl.VertxHttp2ConnectionHandler: void writeData(io.netty.handler.codec.http2.Http2Stream,io.netty.buffer.ByteBuf,boolean,io.vertx.core.Handler)>
STATIC edge: $r9 = staticinvoke <io.vertx.core.http.impl.VertxHttp2ConnectionHandler$lambda_writeData_5__74: io.netty.util.concurrent.GenericFutureListener bootstrap$(io.vertx.core.Handler)>(r5) in <io.vertx.core.http.impl.VertxHttp2ConnectionHandler: void writeData(io.netty.handler.codec.http2.Http2Stream,io.netty.buffer.ByteBuf,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.VertxHttp2ConnectionHandler$lambda_writeData_5__74: io.netty.util.concurrent.GenericFutureListener bootstrap$(io.vertx.core.Handler)>
STATIC edge: $r8 = staticinvoke <io.vertx.core.http.impl.VertxHttp2ConnectionHandler$lambda_writeData_6__73: java.lang.Runnable bootstrap$(io.vertx.core.http.impl.VertxHttp2ConnectionHandler,io.netty.handler.codec.http2.Http2Stream,io.netty.buffer.ByteBuf,boolean,io.netty.channel.ChannelPromise)>(r0, r6, r7, z1, r4) in <io.vertx.core.http.impl.VertxHttp2ConnectionHandler: void writeData(io.netty.handler.codec.http2.Http2Stream,io.netty.buffer.ByteBuf,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.VertxHttp2ConnectionHandler$lambda_writeData_6__73: java.lang.Runnable bootstrap$(io.vertx.core.http.impl.VertxHttp2ConnectionHandler,io.netty.handler.codec.http2.Http2Stream,io.netty.buffer.ByteBuf,boolean,io.netty.channel.ChannelPromise)>
VIRTUAL edge: $z0 = virtualinvoke r1.<io.vertx.core.eventbus.impl.clustered.ClusteredMessage: boolean isFromWire()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: boolean isMessageLocal(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: boolean isFromWire()>
VIRTUAL edge: r1 = virtualinvoke r0.<io.vertx.core.eventbus.impl.MessageImpl: io.vertx.core.eventbus.impl.MessageImpl copyBeforeReceive()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void deliverToHandler(io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.impl.HandlerHolder)> ==> <io.vertx.core.eventbus.impl.MessageImpl: io.vertx.core.eventbus.impl.MessageImpl copyBeforeReceive()>
VIRTUAL edge: r1 = virtualinvoke r0.<io.vertx.core.eventbus.impl.MessageImpl: io.vertx.core.eventbus.impl.MessageImpl copyBeforeReceive()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void deliverToHandler(io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.impl.HandlerHolder)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: io.vertx.core.eventbus.impl.MessageImpl copyBeforeReceive()>
VIRTUAL edge: $z0 = virtualinvoke r0.<io.vertx.core.eventbus.impl.MessageImpl: boolean isLocal()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void deliverToHandler(io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.impl.HandlerHolder)> ==> <io.vertx.core.eventbus.impl.MessageImpl: boolean isLocal()>
VIRTUAL edge: $z0 = virtualinvoke r0.<io.vertx.core.eventbus.impl.MessageImpl: boolean isLocal()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void deliverToHandler(io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.impl.HandlerHolder)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: boolean isLocal()>
SPECIAL edge: specialinvoke $r2.<io.vertx.core.eventbus.impl.EventBusImpl$InboundDeliveryContext: void <init>(io.vertx.core.eventbus.impl.EventBusImpl,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.impl.HandlerHolder,io.vertx.core.eventbus.impl.EventBusImpl$1)>(r3, r1, r4, null) in <io.vertx.core.eventbus.impl.EventBusImpl: void deliverToHandler(io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.impl.HandlerHolder)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$InboundDeliveryContext: void <init>(io.vertx.core.eventbus.impl.EventBusImpl,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.impl.HandlerHolder,io.vertx.core.eventbus.impl.EventBusImpl$1)>
VIRTUAL edge: $r10 = virtualinvoke r4.<io.vertx.core.eventbus.impl.HandlerHolder: io.vertx.core.eventbus.impl.HandlerRegistration getHandler()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void deliverToHandler(io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.impl.HandlerHolder)> ==> <io.vertx.core.eventbus.impl.HandlerHolder: io.vertx.core.eventbus.impl.HandlerRegistration getHandler()>
VIRTUAL edge: $r7 = virtualinvoke r4.<io.vertx.core.eventbus.impl.HandlerHolder: io.vertx.core.Context getContext()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void deliverToHandler(io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.impl.HandlerHolder)> ==> <io.vertx.core.eventbus.impl.HandlerHolder: io.vertx.core.Context getContext()>
VIRTUAL edge: $r11 = virtualinvoke $r10.<io.vertx.core.eventbus.impl.HandlerRegistration: java.lang.Object getMetric()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void deliverToHandler(io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.impl.HandlerHolder)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: java.lang.Object getMetric()>
INTERFACE edge: interfaceinvoke $r9.<io.vertx.core.spi.metrics.EventBusMetrics: void scheduleMessage(java.lang.Object,boolean)>($r11, $z0) in <io.vertx.core.eventbus.impl.EventBusImpl: void deliverToHandler(io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.impl.HandlerHolder)> ==> <io.vertx.core.spi.metrics.EventBusMetrics: void scheduleMessage(java.lang.Object,boolean)>
INTERFACE edge: interfaceinvoke $r7.<io.vertx.core.Context: void runOnContext(io.vertx.core.Handler)>($r8) in <io.vertx.core.eventbus.impl.EventBusImpl: void deliverToHandler(io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.impl.HandlerHolder)> ==> <io.vertx.core.impl.ContextImpl: void runOnContext(io.vertx.core.Handler)>
INTERFACE edge: interfaceinvoke $r7.<io.vertx.core.Context: void runOnContext(io.vertx.core.Handler)>($r8) in <io.vertx.core.eventbus.impl.EventBusImpl: void deliverToHandler(io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.impl.HandlerHolder)> ==> <io.vertx.core.impl.EventLoopContext: void runOnContext(io.vertx.core.Handler)>
CLINIT edge: $r0 = new io.vertx.core.eventbus.impl.MessageImpl in <io.vertx.core.eventbus.impl.MessageImpl: io.vertx.core.eventbus.impl.MessageImpl copyBeforeReceive()> ==> <io.vertx.core.eventbus.impl.MessageImpl: void <clinit>()>
SPECIAL edge: specialinvoke $r2.<io.vertx.core.eventbus.impl.EventBusImpl$lambda_deliverToHandler_5__62: void <init>(io.vertx.core.eventbus.impl.HandlerHolder,io.vertx.core.eventbus.DeliveryContext)>($r0, $r1) in <io.vertx.core.eventbus.impl.EventBusImpl$lambda_deliverToHandler_5__62: io.vertx.core.Handler bootstrap$(io.vertx.core.eventbus.impl.HandlerHolder,io.vertx.core.eventbus.DeliveryContext)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_deliverToHandler_5__62: void <init>(io.vertx.core.eventbus.impl.HandlerHolder,io.vertx.core.eventbus.DeliveryContext)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.impl.VertxImpl$lambda_createHaManager_2__50: void <init>(io.vertx.core.impl.VertxImpl)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.impl.VertxImpl$lambda_createHaManager_3__51: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.VertxOptions,io.vertx.core.Handler)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.http.impl.Http2HeadersAdaptor: void <init>(io.netty.handler.codec.http2.Http2Headers)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $i0 = interfaceinvoke r3.<java.util.List: int size()>() in <io.vertx.core.http.impl.Http2HeadersAdaptor: void <init>(io.netty.handler.codec.http2.Http2Headers)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$1: int size()>
INTERFACE edge: $i0 = interfaceinvoke r3.<java.util.List: int size()>() in <io.vertx.core.http.impl.Http2HeadersAdaptor: void <init>(io.netty.handler.codec.http2.Http2Headers)> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i0 = interfaceinvoke r3.<java.util.List: int size()>() in <io.vertx.core.http.impl.Http2HeadersAdaptor: void <init>(io.netty.handler.codec.http2.Http2Headers)> ==> <java.util.concurrent.CopyOnWriteArrayList: int size()>
INTERFACE edge: $i0 = interfaceinvoke r3.<java.util.List: int size()>() in <io.vertx.core.http.impl.Http2HeadersAdaptor: void <init>(io.netty.handler.codec.http2.Http2Headers)> ==> <java.util.ArrayList: int size()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.List: java.util.stream.Stream stream()>() in <io.vertx.core.http.impl.Http2HeadersAdaptor: void <init>(io.netty.handler.codec.http2.Http2Headers)> ==> <java.util.List: java.util.stream.Stream stream()>
INTERFACE edge: $r6 = interfaceinvoke $r4.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r5) in <io.vertx.core.http.impl.Http2HeadersAdaptor: void <init>(io.netty.handler.codec.http2.Http2Headers)> ==> <java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.http.impl.HeadersAdaptor: void <init>(io.netty.handler.codec.http.HttpHeaders)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<io.netty.handler.codec.http.HttpHeaders: java.util.List getAll(java.lang.CharSequence)>(r1) in <io.vertx.core.http.impl.HeadersAdaptor: java.util.List getAll(java.lang.CharSequence)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders: java.util.List getAll(java.lang.CharSequence)>
INTERFACE edge: $r5 = interfaceinvoke r4.<java.util.List: java.util.stream.Stream stream()>() in <io.vertx.core.http.impl.Http2HeadersAdaptor: java.util.List getAll(java.lang.CharSequence)> ==> <java.util.List: java.util.stream.Stream stream()>
INTERFACE edge: $r7 = interfaceinvoke $r5.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r6) in <io.vertx.core.http.impl.Http2HeadersAdaptor: java.util.List getAll(java.lang.CharSequence)> ==> <java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>
INTERFACE edge: $r9 = interfaceinvoke $r7.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r8) in <io.vertx.core.http.impl.Http2HeadersAdaptor: java.util.List getAll(java.lang.CharSequence)> ==> <java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>
SPECIAL edge: specialinvoke $r2.<java.util.LinkedList: void <init>()>() in <io.vertx.core.http.impl.headers.VertxHttpHeaders: java.util.List getAll(java.lang.CharSequence)> ==> <java.util.LinkedList: void <init>()>
VIRTUAL edge: virtualinvoke $r2.<java.util.LinkedList: void addFirst(java.lang.Object)>($r8) in <io.vertx.core.http.impl.headers.VertxHttpHeaders: java.util.List getAll(java.lang.CharSequence)> ==> <java.util.LinkedList: void addFirst(java.lang.Object)>
VIRTUAL edge: $r7 = virtualinvoke r9.<io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.CharSequence getValue()>() in <io.vertx.core.http.impl.headers.VertxHttpHeaders: java.util.List getAll(java.lang.CharSequence)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.CharSequence getValue()>
INTERFACE edge: $r8 = interfaceinvoke $r7.<java.lang.CharSequence: java.lang.String toString()>() in <io.vertx.core.http.impl.headers.VertxHttpHeaders: java.util.List getAll(java.lang.CharSequence)> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: $r8 = interfaceinvoke $r7.<java.lang.CharSequence: java.lang.String toString()>() in <io.vertx.core.http.impl.headers.VertxHttpHeaders: java.util.List getAll(java.lang.CharSequence)> ==> <java.lang.String: java.lang.String toString()>
INTERFACE edge: $r8 = interfaceinvoke $r7.<java.lang.CharSequence: java.lang.String toString()>() in <io.vertx.core.http.impl.headers.VertxHttpHeaders: java.util.List getAll(java.lang.CharSequence)> ==> <java.lang.StringBuffer: java.lang.String toString()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.lang.CharSequence: java.lang.String toString()>() in <io.vertx.core.http.CaseInsensitiveHeaders: java.util.List getAll(java.lang.CharSequence)> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.lang.CharSequence: java.lang.String toString()>() in <io.vertx.core.http.CaseInsensitiveHeaders: java.util.List getAll(java.lang.CharSequence)> ==> <java.lang.String: java.lang.String toString()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.lang.CharSequence: java.lang.String toString()>() in <io.vertx.core.http.CaseInsensitiveHeaders: java.util.List getAll(java.lang.CharSequence)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke r0.<io.vertx.core.http.CaseInsensitiveHeaders: java.util.List getAll(java.lang.String)>($r2) in <io.vertx.core.http.CaseInsensitiveHeaders: java.util.List getAll(java.lang.CharSequence)> ==> <io.vertx.core.http.CaseInsensitiveHeaders: java.util.List getAll(java.lang.String)>
STATIC edge: staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r0, "name") in <io.vertx.core.http.CaseInsensitiveHeaders: java.util.List getAll(java.lang.String)> ==> <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>
STATIC edge: $z0 = staticinvoke <io.vertx.core.http.CaseInsensitiveHeaders: boolean eq(java.lang.String,java.lang.String)>(r0, $r6) in <io.vertx.core.http.CaseInsensitiveHeaders: java.util.List getAll(java.lang.String)> ==> <io.vertx.core.http.CaseInsensitiveHeaders: boolean eq(java.lang.String,java.lang.String)>
STATIC edge: i1 = staticinvoke <io.vertx.core.http.CaseInsensitiveHeaders: int index(int)>(i0) in <io.vertx.core.http.CaseInsensitiveHeaders: java.util.List getAll(java.lang.String)> ==> <io.vertx.core.http.CaseInsensitiveHeaders: int index(int)>
STATIC edge: i0 = staticinvoke <io.vertx.core.http.CaseInsensitiveHeaders: int hash(java.lang.String)>(r0) in <io.vertx.core.http.CaseInsensitiveHeaders: java.util.List getAll(java.lang.String)> ==> <io.vertx.core.http.CaseInsensitiveHeaders: int hash(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.http.impl.Http2HeadersAdaptor$toString__475: void <init>()>() in <io.vertx.core.http.impl.Http2HeadersAdaptor$toString__475: java.util.function.Function bootstrap$()> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$toString__475: void <init>()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.http.impl.HttpServerRequestImpl: void checkEnded()>() in <io.vertx.core.http.impl.HttpServerRequestImpl: io.vertx.core.http.HttpServerRequest handler(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.HttpServerRequestImpl: void checkEnded()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.http.impl.HttpServerRequestImpl: void checkEnded()>() in <io.vertx.core.http.impl.HttpServerRequestImpl: io.vertx.core.http.HttpServerRequest endHandler(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.HttpServerRequestImpl: void checkEnded()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.MultiMap$lambda_contains_1__449: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.MultiMap$lambda_contains_2__448: void <init>(java.lang.CharSequence)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: $i0 = specialinvoke r0.<java.lang.AbstractStringBuilder: int length()>() in <java.lang.StringBuffer: int length()> ==> <java.lang.AbstractStringBuilder: int length()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: char charAt(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.http.impl.WebSocketRequestHandler$lambda_handle_1__53: void <init>(io.vertx.core.http.impl.WebSocketRequestHandler,boolean[],io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.buffer.Buffer)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.http.impl.WebSocketRequestHandler$lambda_handle_0__52: void <init>(boolean[],io.vertx.core.buffer.Buffer,io.vertx.core.http.impl.HttpServerRequestImpl)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.buffer.impl.BufferImpl: void <init>()>() in <io.vertx.core.buffer.impl.BufferFactoryImpl: io.vertx.core.buffer.Buffer buffer()> ==> <io.vertx.core.buffer.impl.BufferImpl: void <init>()>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.impl.VertxImpl: void close(io.vertx.core.Handler)>(null) in <io.vertx.core.impl.VertxImpl: void close()> ==> <io.vertx.core.impl.VertxImpl: void close(io.vertx.core.Handler)>
CLINIT edge: $r2 = staticinvoke <io.vertx.core.Future: io.vertx.core.Future succeededFuture()>() in <io.vertx.core.impl.VertxImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.Future: void <clinit>()>
STATIC edge: $r5 = staticinvoke <io.vertx.core.impl.VertxImpl$lambda_close_17__66: io.vertx.core.Handler bootstrap$(io.vertx.core.impl.VertxImpl,io.vertx.core.Handler)>(r0, r1) in <io.vertx.core.impl.VertxImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl$lambda_close_17__66: io.vertx.core.Handler bootstrap$(io.vertx.core.impl.VertxImpl,io.vertx.core.Handler)>
STATIC edge: $r2 = staticinvoke <io.vertx.core.Future: io.vertx.core.Future succeededFuture()>() in <io.vertx.core.impl.VertxImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.Future: io.vertx.core.Future succeededFuture()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>() in <io.vertx.core.net.impl.PartialPooledByteBufAllocator$PooledChannelHandlerContext: io.netty.channel.Channel channel()> ==> <io.vertx.core.net.impl.PartialPooledByteBufAllocator$PooledChannelHandlerContext: io.netty.channel.Channel channel()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>() in <io.vertx.core.net.impl.PartialPooledByteBufAllocator$PooledChannelHandlerContext: io.netty.channel.Channel channel()> ==> <io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>
VIRTUAL edge: $i0 = virtualinvoke r1.<java.net.InetSocketAddress: int getPort()>() in <io.vertx.core.net.impl.SocketAddressImpl: void <init>(java.net.InetSocketAddress)> ==> <java.net.InetSocketAddress: int getPort()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>() in <io.vertx.core.net.impl.SocketAddressImpl: void <init>(java.net.InetSocketAddress)> ==> <java.net.InetSocketAddress: java.net.InetAddress getAddress()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.net.InetAddress: java.lang.String getHostAddress()>() in <io.vertx.core.net.impl.SocketAddressImpl: void <init>(java.net.InetSocketAddress)> ==> <java.net.InetAddress: java.lang.String getHostAddress()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.impl.SocketAddressImpl: void <init>(int,java.lang.String)>($i0, $r3) in <io.vertx.core.net.impl.SocketAddressImpl: void <init>(java.net.InetSocketAddress)> ==> <io.vertx.core.net.impl.SocketAddressImpl: void <init>(int,java.lang.String)>
STATIC edge: staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "no null host accepted") in <io.vertx.core.net.impl.SocketAddressImpl: void <init>(int,java.lang.String)> ==> <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <io.vertx.core.impl.Arguments: void requireInRange(int,int,int,java.lang.String)>(i0, 0, 65535, "port p must be in range 0 <= p <= 65535") in <io.vertx.core.net.impl.SocketAddressImpl: void <init>(int,java.lang.String)> ==> <io.vertx.core.impl.Arguments: void requireInRange(int,int,int,java.lang.String)>
STATIC edge: staticinvoke <io.vertx.core.impl.Arguments: void require(boolean,java.lang.String)>($z1, "no empty host accepted") in <io.vertx.core.net.impl.SocketAddressImpl: void <init>(int,java.lang.String)> ==> <io.vertx.core.impl.Arguments: void require(boolean,java.lang.String)>
INTERFACE edge: i0 = interfaceinvoke $r1.<io.vertx.core.buffer.Buffer: int length()>() in <io.vertx.core.parsetools.impl.RecordParserImpl: int parseDelimited()> ==> <io.vertx.core.buffer.impl.BufferImpl: int length()>
INTERFACE edge: $b3 = interfaceinvoke $r2.<io.vertx.core.buffer.Buffer: byte getByte(int)>($i2) in <io.vertx.core.parsetools.impl.RecordParserImpl: int parseDelimited()> ==> <io.vertx.core.buffer.impl.BufferImpl: byte getByte(int)>
INTERFACE edge: i0 = interfaceinvoke $r1.<io.vertx.core.buffer.Buffer: int length()>() in <io.vertx.core.parsetools.impl.RecordParserImpl: int parseFixed()> ==> <io.vertx.core.buffer.impl.BufferImpl: int length()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.datagram.impl.DatagramSocketImpl: io.vertx.core.datagram.DatagramSocket resume()>() in <io.vertx.core.datagram.impl.DatagramSocketImpl: io.vertx.core.streams.ReadStream resume()> ==> <io.vertx.core.datagram.impl.DatagramSocketImpl: io.vertx.core.datagram.DatagramSocket resume()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.impl.NetSocketImpl: io.vertx.core.net.NetSocket resume()>() in <io.vertx.core.net.impl.NetSocketImpl: io.vertx.core.streams.ReadStream resume()> ==> <io.vertx.core.net.impl.NetSocketImpl: io.vertx.core.net.NetSocket resume()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.impl.NetSocketImpl: io.vertx.core.net.NetSocket resume()>() in <io.vertx.core.net.impl.NetSocketImpl: io.vertx.core.streams.ReadStream resume()> ==> <io.vertx.core.http.impl.Http1xClientConnection$1: io.vertx.core.net.NetSocket resume()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.file.impl.AsyncFileImpl: io.vertx.core.file.AsyncFile resume()>() in <io.vertx.core.file.impl.AsyncFileImpl: io.vertx.core.streams.ReadStream resume()> ==> <io.vertx.core.file.impl.AsyncFileImpl: io.vertx.core.file.AsyncFile resume()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.impl.Http2ServerRequestImpl: io.vertx.core.http.HttpServerRequest resume()>() in <io.vertx.core.http.impl.Http2ServerRequestImpl: io.vertx.core.streams.ReadStream resume()> ==> <io.vertx.core.http.impl.Http2ServerRequestImpl: io.vertx.core.http.HttpServerRequest resume()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.parsetools.impl.RecordParserImpl: io.vertx.core.parsetools.RecordParser resume()>() in <io.vertx.core.parsetools.impl.RecordParserImpl: io.vertx.core.streams.ReadStream resume()> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: io.vertx.core.parsetools.RecordParser resume()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.impl.VertxHttp2NetSocket: io.vertx.core.net.NetSocket resume()>() in <io.vertx.core.http.impl.VertxHttp2NetSocket: io.vertx.core.streams.ReadStream resume()> ==> <io.vertx.core.http.impl.VertxHttp2NetSocket: io.vertx.core.net.NetSocket resume()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.impl.HttpServerFileUploadImpl: io.vertx.core.http.HttpServerFileUpload resume()>() in <io.vertx.core.http.impl.HttpServerFileUploadImpl: io.vertx.core.streams.ReadStream resume()> ==> <io.vertx.core.http.impl.HttpServerFileUploadImpl: io.vertx.core.http.HttpServerFileUpload resume()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: io.vertx.core.TimeoutStream resume()>() in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: io.vertx.core.streams.ReadStream resume()> ==> <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: io.vertx.core.TimeoutStream resume()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.parsetools.impl.JsonParserImpl: io.vertx.core.parsetools.JsonParser resume()>() in <io.vertx.core.parsetools.impl.JsonParserImpl: io.vertx.core.streams.ReadStream resume()> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: io.vertx.core.parsetools.JsonParser resume()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.impl.HttpServerRequestImpl: io.vertx.core.http.HttpServerRequest resume()>() in <io.vertx.core.http.impl.HttpServerRequestImpl: io.vertx.core.streams.ReadStream resume()> ==> <io.vertx.core.http.impl.HttpServerRequestImpl: io.vertx.core.http.HttpServerRequest resume()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.impl.Http1xClientConnection$1: io.vertx.core.net.NetSocket resume()>() in <io.vertx.core.http.impl.Http1xClientConnection$1: io.vertx.core.streams.ReadStream resume()> ==> <io.vertx.core.http.impl.Http1xClientConnection$1: io.vertx.core.net.NetSocket resume()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.http.HttpClientResponse resume()>() in <io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.streams.ReadStream resume()> ==> <io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.http.HttpClientResponse resume()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.impl.NetServerImpl$NetSocketStream: io.vertx.core.net.impl.NetServerImpl$NetSocketStream resume()>() in <io.vertx.core.net.impl.NetServerImpl$NetSocketStream: io.vertx.core.streams.ReadStream resume()> ==> <io.vertx.core.net.impl.NetServerImpl$NetSocketStream: io.vertx.core.net.impl.NetServerImpl$NetSocketStream resume()>
CLINIT edge: staticinvoke <io.vertx.core.net.impl.NetServerImpl: void access$500(io.vertx.core.net.impl.NetServerImpl)>($r1) in <io.vertx.core.net.impl.NetServerImpl$NetSocketStream: io.vertx.core.net.impl.NetServerImpl$NetSocketStream resume()> ==> <io.vertx.core.net.impl.NetServerImpl: void <clinit>()>
STATIC edge: staticinvoke <io.vertx.core.net.impl.NetServerImpl: void access$500(io.vertx.core.net.impl.NetServerImpl)>($r1) in <io.vertx.core.net.impl.NetServerImpl$NetSocketStream: io.vertx.core.net.impl.NetServerImpl$NetSocketStream resume()> ==> <io.vertx.core.net.impl.NetServerImpl: void access$500(io.vertx.core.net.impl.NetServerImpl)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.impl.HttpClientRequestBase: io.vertx.core.http.HttpClientRequest resume()>() in <io.vertx.core.http.impl.HttpClientRequestBase: io.vertx.core.streams.ReadStream resume()> ==> <io.vertx.core.http.impl.HttpClientRequestBase: io.vertx.core.http.HttpClientRequest resume()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.impl.WebSocketImplBase: io.vertx.core.http.WebSocketBase resume()>() in <io.vertx.core.http.impl.WebSocketImplBase: io.vertx.core.streams.ReadStream resume()> ==> <io.vertx.core.http.impl.WebSocketImplBase: io.vertx.core.http.WebSocketBase resume()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.eventbus.impl.HandlerRegistration: io.vertx.core.eventbus.MessageConsumer resume()>() in <io.vertx.core.eventbus.impl.HandlerRegistration: io.vertx.core.streams.ReadStream resume()> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: io.vertx.core.eventbus.MessageConsumer resume()>
INTERFACE edge: interfaceinvoke $r1.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream resume()>() in <io.vertx.core.eventbus.impl.BodyReadStream: io.vertx.core.streams.ReadStream resume()> ==> <io.vertx.core.datagram.impl.DatagramSocketImpl: io.vertx.core.streams.ReadStream resume()>
INTERFACE edge: interfaceinvoke $r1.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream resume()>() in <io.vertx.core.eventbus.impl.BodyReadStream: io.vertx.core.streams.ReadStream resume()> ==> <io.vertx.core.net.impl.NetSocketImpl: io.vertx.core.streams.ReadStream resume()>
INTERFACE edge: interfaceinvoke $r1.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream resume()>() in <io.vertx.core.eventbus.impl.BodyReadStream: io.vertx.core.streams.ReadStream resume()> ==> <io.vertx.core.file.impl.AsyncFileImpl: io.vertx.core.streams.ReadStream resume()>
INTERFACE edge: interfaceinvoke $r1.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream resume()>() in <io.vertx.core.eventbus.impl.BodyReadStream: io.vertx.core.streams.ReadStream resume()> ==> <io.vertx.core.http.impl.Http2ServerRequestImpl: io.vertx.core.streams.ReadStream resume()>
INTERFACE edge: interfaceinvoke $r1.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream resume()>() in <io.vertx.core.eventbus.impl.BodyReadStream: io.vertx.core.streams.ReadStream resume()> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: io.vertx.core.streams.ReadStream resume()>
INTERFACE edge: interfaceinvoke $r1.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream resume()>() in <io.vertx.core.eventbus.impl.BodyReadStream: io.vertx.core.streams.ReadStream resume()> ==> <io.vertx.core.http.impl.HttpClientImpl$WebSocketStream: io.vertx.core.streams.ReadStream resume()>
INTERFACE edge: interfaceinvoke $r1.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream resume()>() in <io.vertx.core.eventbus.impl.BodyReadStream: io.vertx.core.streams.ReadStream resume()> ==> <io.vertx.core.http.impl.VertxHttp2NetSocket: io.vertx.core.streams.ReadStream resume()>
INTERFACE edge: interfaceinvoke $r1.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream resume()>() in <io.vertx.core.eventbus.impl.BodyReadStream: io.vertx.core.streams.ReadStream resume()> ==> <io.vertx.core.http.impl.HttpServerFileUploadImpl: io.vertx.core.streams.ReadStream resume()>
INTERFACE edge: interfaceinvoke $r1.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream resume()>() in <io.vertx.core.eventbus.impl.BodyReadStream: io.vertx.core.streams.ReadStream resume()> ==> <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: io.vertx.core.streams.ReadStream resume()>
INTERFACE edge: interfaceinvoke $r1.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream resume()>() in <io.vertx.core.eventbus.impl.BodyReadStream: io.vertx.core.streams.ReadStream resume()> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: io.vertx.core.streams.ReadStream resume()>
INTERFACE edge: interfaceinvoke $r1.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream resume()>() in <io.vertx.core.eventbus.impl.BodyReadStream: io.vertx.core.streams.ReadStream resume()> ==> <io.vertx.core.http.impl.HttpServerRequestImpl: io.vertx.core.streams.ReadStream resume()>
INTERFACE edge: interfaceinvoke $r1.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream resume()>() in <io.vertx.core.eventbus.impl.BodyReadStream: io.vertx.core.streams.ReadStream resume()> ==> <io.vertx.core.http.impl.Http1xClientConnection$1: io.vertx.core.streams.ReadStream resume()>
INTERFACE edge: interfaceinvoke $r1.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream resume()>() in <io.vertx.core.eventbus.impl.BodyReadStream: io.vertx.core.streams.ReadStream resume()> ==> <io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.streams.ReadStream resume()>
INTERFACE edge: interfaceinvoke $r1.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream resume()>() in <io.vertx.core.eventbus.impl.BodyReadStream: io.vertx.core.streams.ReadStream resume()> ==> <io.vertx.core.net.impl.NetServerImpl$NetSocketStream: io.vertx.core.streams.ReadStream resume()>
INTERFACE edge: interfaceinvoke $r1.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream resume()>() in <io.vertx.core.eventbus.impl.BodyReadStream: io.vertx.core.streams.ReadStream resume()> ==> <io.vertx.core.http.impl.HttpClientRequestBase: io.vertx.core.streams.ReadStream resume()>
INTERFACE edge: interfaceinvoke $r1.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream resume()>() in <io.vertx.core.eventbus.impl.BodyReadStream: io.vertx.core.streams.ReadStream resume()> ==> <io.vertx.core.http.impl.HttpServerImpl$HttpStreamHandler: io.vertx.core.streams.ReadStream resume()>
INTERFACE edge: interfaceinvoke $r1.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream resume()>() in <io.vertx.core.eventbus.impl.BodyReadStream: io.vertx.core.streams.ReadStream resume()> ==> <io.vertx.core.http.impl.WebSocketImplBase: io.vertx.core.streams.ReadStream resume()>
INTERFACE edge: interfaceinvoke $r1.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream resume()>() in <io.vertx.core.eventbus.impl.BodyReadStream: io.vertx.core.streams.ReadStream resume()> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: io.vertx.core.streams.ReadStream resume()>
INTERFACE edge: interfaceinvoke $r1.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream resume()>() in <io.vertx.core.eventbus.impl.BodyReadStream: io.vertx.core.streams.ReadStream resume()> ==> <io.vertx.core.eventbus.impl.BodyReadStream: io.vertx.core.streams.ReadStream resume()>
VIRTUAL edge: $r2 = virtualinvoke r1.<io.vertx.core.buffer.impl.BufferImpl: byte[] getBytes(int,int)>(i0, i1) in <io.vertx.core.buffer.impl.BufferImpl: io.vertx.core.buffer.Buffer getBuffer(int,int)> ==> <io.vertx.core.buffer.impl.BufferImpl: byte[] getBytes(int,int)>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.buffer.impl.BufferImpl: void <init>(byte[])>($r2) in <io.vertx.core.buffer.impl.BufferImpl: io.vertx.core.buffer.Buffer getBuffer(int,int)> ==> <io.vertx.core.buffer.impl.BufferImpl: void <init>(byte[])>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.datagram.impl.DatagramSocketImpl: io.vertx.core.datagram.DatagramSocket pause()>() in <io.vertx.core.datagram.impl.DatagramSocketImpl: io.vertx.core.streams.ReadStream pause()> ==> <io.vertx.core.datagram.impl.DatagramSocketImpl: io.vertx.core.datagram.DatagramSocket pause()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.impl.NetSocketImpl: io.vertx.core.net.NetSocket pause()>() in <io.vertx.core.net.impl.NetSocketImpl: io.vertx.core.streams.ReadStream pause()> ==> <io.vertx.core.net.impl.NetSocketImpl: io.vertx.core.net.NetSocket pause()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.impl.NetSocketImpl: io.vertx.core.net.NetSocket pause()>() in <io.vertx.core.net.impl.NetSocketImpl: io.vertx.core.streams.ReadStream pause()> ==> <io.vertx.core.http.impl.Http1xClientConnection$1: io.vertx.core.net.NetSocket pause()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.file.impl.AsyncFileImpl: io.vertx.core.file.AsyncFile pause()>() in <io.vertx.core.file.impl.AsyncFileImpl: io.vertx.core.streams.ReadStream pause()> ==> <io.vertx.core.file.impl.AsyncFileImpl: io.vertx.core.file.AsyncFile pause()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.impl.Http2ServerRequestImpl: io.vertx.core.http.HttpServerRequest pause()>() in <io.vertx.core.http.impl.Http2ServerRequestImpl: io.vertx.core.streams.ReadStream pause()> ==> <io.vertx.core.http.impl.Http2ServerRequestImpl: io.vertx.core.http.HttpServerRequest pause()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.parsetools.impl.RecordParserImpl: io.vertx.core.parsetools.RecordParser pause()>() in <io.vertx.core.parsetools.impl.RecordParserImpl: io.vertx.core.streams.ReadStream pause()> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: io.vertx.core.parsetools.RecordParser pause()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.impl.VertxHttp2NetSocket: io.vertx.core.net.NetSocket pause()>() in <io.vertx.core.http.impl.VertxHttp2NetSocket: io.vertx.core.streams.ReadStream pause()> ==> <io.vertx.core.http.impl.VertxHttp2NetSocket: io.vertx.core.net.NetSocket pause()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.impl.HttpServerFileUploadImpl: io.vertx.core.http.HttpServerFileUpload pause()>() in <io.vertx.core.http.impl.HttpServerFileUploadImpl: io.vertx.core.streams.ReadStream pause()> ==> <io.vertx.core.http.impl.HttpServerFileUploadImpl: io.vertx.core.http.HttpServerFileUpload pause()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: io.vertx.core.TimeoutStream pause()>() in <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: io.vertx.core.streams.ReadStream pause()> ==> <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: io.vertx.core.TimeoutStream pause()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.parsetools.impl.JsonParserImpl: io.vertx.core.parsetools.JsonParser pause()>() in <io.vertx.core.parsetools.impl.JsonParserImpl: io.vertx.core.streams.ReadStream pause()> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: io.vertx.core.parsetools.JsonParser pause()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.impl.HttpServerRequestImpl: io.vertx.core.http.HttpServerRequest pause()>() in <io.vertx.core.http.impl.HttpServerRequestImpl: io.vertx.core.streams.ReadStream pause()> ==> <io.vertx.core.http.impl.HttpServerRequestImpl: io.vertx.core.http.HttpServerRequest pause()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.impl.Http1xClientConnection$1: io.vertx.core.net.NetSocket pause()>() in <io.vertx.core.http.impl.Http1xClientConnection$1: io.vertx.core.streams.ReadStream pause()> ==> <io.vertx.core.http.impl.Http1xClientConnection$1: io.vertx.core.net.NetSocket pause()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.http.HttpClientResponse pause()>() in <io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.streams.ReadStream pause()> ==> <io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.http.HttpClientResponse pause()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.impl.NetServerImpl$NetSocketStream: io.vertx.core.net.impl.NetServerImpl$NetSocketStream pause()>() in <io.vertx.core.net.impl.NetServerImpl$NetSocketStream: io.vertx.core.streams.ReadStream pause()> ==> <io.vertx.core.net.impl.NetServerImpl$NetSocketStream: io.vertx.core.net.impl.NetServerImpl$NetSocketStream pause()>
CLINIT edge: staticinvoke <io.vertx.core.net.impl.NetServerImpl: void access$400(io.vertx.core.net.impl.NetServerImpl)>($r1) in <io.vertx.core.net.impl.NetServerImpl$NetSocketStream: io.vertx.core.net.impl.NetServerImpl$NetSocketStream pause()> ==> <io.vertx.core.net.impl.NetServerImpl: void <clinit>()>
STATIC edge: staticinvoke <io.vertx.core.net.impl.NetServerImpl: void access$400(io.vertx.core.net.impl.NetServerImpl)>($r1) in <io.vertx.core.net.impl.NetServerImpl$NetSocketStream: io.vertx.core.net.impl.NetServerImpl$NetSocketStream pause()> ==> <io.vertx.core.net.impl.NetServerImpl: void access$400(io.vertx.core.net.impl.NetServerImpl)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.impl.HttpClientRequestBase: io.vertx.core.http.HttpClientRequest pause()>() in <io.vertx.core.http.impl.HttpClientRequestBase: io.vertx.core.streams.ReadStream pause()> ==> <io.vertx.core.http.impl.HttpClientRequestBase: io.vertx.core.http.HttpClientRequest pause()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.impl.WebSocketImplBase: io.vertx.core.http.WebSocketBase pause()>() in <io.vertx.core.http.impl.WebSocketImplBase: io.vertx.core.streams.ReadStream pause()> ==> <io.vertx.core.http.impl.WebSocketImplBase: io.vertx.core.http.WebSocketBase pause()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.eventbus.impl.HandlerRegistration: io.vertx.core.eventbus.MessageConsumer pause()>() in <io.vertx.core.eventbus.impl.HandlerRegistration: io.vertx.core.streams.ReadStream pause()> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: io.vertx.core.eventbus.MessageConsumer pause()>
INTERFACE edge: interfaceinvoke $r1.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream pause()>() in <io.vertx.core.eventbus.impl.BodyReadStream: io.vertx.core.streams.ReadStream pause()> ==> <io.vertx.core.datagram.impl.DatagramSocketImpl: io.vertx.core.streams.ReadStream pause()>
INTERFACE edge: interfaceinvoke $r1.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream pause()>() in <io.vertx.core.eventbus.impl.BodyReadStream: io.vertx.core.streams.ReadStream pause()> ==> <io.vertx.core.net.impl.NetSocketImpl: io.vertx.core.streams.ReadStream pause()>
INTERFACE edge: interfaceinvoke $r1.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream pause()>() in <io.vertx.core.eventbus.impl.BodyReadStream: io.vertx.core.streams.ReadStream pause()> ==> <io.vertx.core.file.impl.AsyncFileImpl: io.vertx.core.streams.ReadStream pause()>
INTERFACE edge: interfaceinvoke $r1.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream pause()>() in <io.vertx.core.eventbus.impl.BodyReadStream: io.vertx.core.streams.ReadStream pause()> ==> <io.vertx.core.http.impl.Http2ServerRequestImpl: io.vertx.core.streams.ReadStream pause()>
INTERFACE edge: interfaceinvoke $r1.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream pause()>() in <io.vertx.core.eventbus.impl.BodyReadStream: io.vertx.core.streams.ReadStream pause()> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: io.vertx.core.streams.ReadStream pause()>
INTERFACE edge: interfaceinvoke $r1.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream pause()>() in <io.vertx.core.eventbus.impl.BodyReadStream: io.vertx.core.streams.ReadStream pause()> ==> <io.vertx.core.http.impl.HttpClientImpl$WebSocketStream: io.vertx.core.streams.ReadStream pause()>
INTERFACE edge: interfaceinvoke $r1.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream pause()>() in <io.vertx.core.eventbus.impl.BodyReadStream: io.vertx.core.streams.ReadStream pause()> ==> <io.vertx.core.http.impl.VertxHttp2NetSocket: io.vertx.core.streams.ReadStream pause()>
INTERFACE edge: interfaceinvoke $r1.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream pause()>() in <io.vertx.core.eventbus.impl.BodyReadStream: io.vertx.core.streams.ReadStream pause()> ==> <io.vertx.core.http.impl.HttpServerFileUploadImpl: io.vertx.core.streams.ReadStream pause()>
INTERFACE edge: interfaceinvoke $r1.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream pause()>() in <io.vertx.core.eventbus.impl.BodyReadStream: io.vertx.core.streams.ReadStream pause()> ==> <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: io.vertx.core.streams.ReadStream pause()>
INTERFACE edge: interfaceinvoke $r1.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream pause()>() in <io.vertx.core.eventbus.impl.BodyReadStream: io.vertx.core.streams.ReadStream pause()> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: io.vertx.core.streams.ReadStream pause()>
INTERFACE edge: interfaceinvoke $r1.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream pause()>() in <io.vertx.core.eventbus.impl.BodyReadStream: io.vertx.core.streams.ReadStream pause()> ==> <io.vertx.core.http.impl.HttpServerRequestImpl: io.vertx.core.streams.ReadStream pause()>
INTERFACE edge: interfaceinvoke $r1.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream pause()>() in <io.vertx.core.eventbus.impl.BodyReadStream: io.vertx.core.streams.ReadStream pause()> ==> <io.vertx.core.http.impl.Http1xClientConnection$1: io.vertx.core.streams.ReadStream pause()>
INTERFACE edge: interfaceinvoke $r1.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream pause()>() in <io.vertx.core.eventbus.impl.BodyReadStream: io.vertx.core.streams.ReadStream pause()> ==> <io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.streams.ReadStream pause()>
INTERFACE edge: interfaceinvoke $r1.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream pause()>() in <io.vertx.core.eventbus.impl.BodyReadStream: io.vertx.core.streams.ReadStream pause()> ==> <io.vertx.core.net.impl.NetServerImpl$NetSocketStream: io.vertx.core.streams.ReadStream pause()>
INTERFACE edge: interfaceinvoke $r1.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream pause()>() in <io.vertx.core.eventbus.impl.BodyReadStream: io.vertx.core.streams.ReadStream pause()> ==> <io.vertx.core.http.impl.HttpClientRequestBase: io.vertx.core.streams.ReadStream pause()>
INTERFACE edge: interfaceinvoke $r1.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream pause()>() in <io.vertx.core.eventbus.impl.BodyReadStream: io.vertx.core.streams.ReadStream pause()> ==> <io.vertx.core.http.impl.HttpServerImpl$HttpStreamHandler: io.vertx.core.streams.ReadStream pause()>
INTERFACE edge: interfaceinvoke $r1.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream pause()>() in <io.vertx.core.eventbus.impl.BodyReadStream: io.vertx.core.streams.ReadStream pause()> ==> <io.vertx.core.http.impl.WebSocketImplBase: io.vertx.core.streams.ReadStream pause()>
INTERFACE edge: interfaceinvoke $r1.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream pause()>() in <io.vertx.core.eventbus.impl.BodyReadStream: io.vertx.core.streams.ReadStream pause()> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: io.vertx.core.streams.ReadStream pause()>
INTERFACE edge: interfaceinvoke $r1.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream pause()>() in <io.vertx.core.eventbus.impl.BodyReadStream: io.vertx.core.streams.ReadStream pause()> ==> <io.vertx.core.eventbus.impl.BodyReadStream: io.vertx.core.streams.ReadStream pause()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: void <init>(io.vertx.core.json.JsonObject)>(r1) in <io.vertx.core.net.NetServerOptions: void <init>(io.vertx.core.json.JsonObject)> ==> <io.vertx.core.net.TCPSSLOptions: void <init>(io.vertx.core.json.JsonObject)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.NetServerOptions: void init()>() in <io.vertx.core.net.NetServerOptions: void <init>(io.vertx.core.json.JsonObject)> ==> <io.vertx.core.net.NetServerOptions: void init()>
STATIC edge: staticinvoke <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)>(r1, r0) in <io.vertx.core.net.TCPSSLOptions: void <init>(io.vertx.core.json.JsonObject)> ==> <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)>
CLINIT edge: $r1 = <io.vertx.core.net.NetServerOptions: io.vertx.core.http.ClientAuth DEFAULT_CLIENT_AUTH> in <io.vertx.core.net.NetServerOptions: void init()> ==> <io.vertx.core.net.NetServerOptions: void <clinit>()>
CLINIT edge: $r1 = <io.vertx.core.net.NetServerOptions: io.vertx.core.http.ClientAuth DEFAULT_CLIENT_AUTH> in <io.vertx.core.net.NetServerOptions: void init()> ==> <io.vertx.core.net.TCPSSLOptions: void <clinit>()>
CLINIT edge: $r86 = staticinvoke <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit valueOf(java.lang.String)>($r85) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.util.concurrent.TimeUnit: void <clinit>()>
STATIC edge: $r86 = staticinvoke <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit valueOf(java.lang.String)>($r85) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit valueOf(java.lang.String)>
STATIC edge: $r97 = staticinvoke <io.vertx.core.net.TCPSSLOptionsConverter$lambda_fromJson_3__67: java.util.function.Consumer bootstrap$(java.util.LinkedHashSet)>($r93) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.TCPSSLOptionsConverter$lambda_fromJson_3__67: java.util.function.Consumer bootstrap$(java.util.LinkedHashSet)>
STATIC edge: $r102 = staticinvoke <io.vertx.core.net.TCPSSLOptionsConverter$lambda_fromJson_2__68: java.util.function.Consumer bootstrap$(io.vertx.core.net.TCPSSLOptions)>(r7) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.TCPSSLOptionsConverter$lambda_fromJson_2__68: java.util.function.Consumer bootstrap$(io.vertx.core.net.TCPSSLOptions)>
STATIC edge: $r106 = staticinvoke <io.vertx.core.net.TCPSSLOptionsConverter$lambda_fromJson_1__69: java.util.function.Consumer bootstrap$(io.vertx.core.net.TCPSSLOptions)>(r7) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.TCPSSLOptionsConverter$lambda_fromJson_1__69: java.util.function.Consumer bootstrap$(io.vertx.core.net.TCPSSLOptions)>
STATIC edge: $r110 = staticinvoke <io.vertx.core.net.TCPSSLOptionsConverter$lambda_fromJson_0__70: java.util.function.Consumer bootstrap$(io.vertx.core.net.TCPSSLOptions)>(r7) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.TCPSSLOptionsConverter$lambda_fromJson_0__70: java.util.function.Consumer bootstrap$(io.vertx.core.net.TCPSSLOptions)>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.http.impl.HeadersAdaptor: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.impl.ConcurrentHashSet: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <java.util.ServiceLoader: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.json.JsonArray: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <java.util.AbstractList: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.json.JsonObject: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$1: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <java.util.concurrent.ConcurrentLinkedQueue: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.json.JsonArray$Iter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.json.JsonObject$Iter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <java.util.Scanner: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: boolean hasNext()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.json.JsonArray$Iter: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.json.JsonObject$Iter: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <java.util.Scanner: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: java.lang.Object next()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getKey()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getKey()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getKey()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getKey()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getKey()>
INTERFACE edge: $r28 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r28 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r28 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r28 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r28 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r28 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r29 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r29 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r29 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r29 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r29 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r29 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r23 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r23 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r23 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r23 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r23 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r23 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r24 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r24 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r24 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r24 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r24 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r24 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r19 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r19 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r19 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r19 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r19 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r19 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r20 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r20 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r20 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r20 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r20 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r20 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r15 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r15 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r15 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r15 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r15 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r15 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r16 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r16 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r16 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r16 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r16 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r16 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r11 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r11 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r11 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r11 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r11 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r11 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r12 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r12 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r12 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r12 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r12 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r12 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
VIRTUAL edge: $i0 = virtualinvoke r5.<java.lang.String: int hashCode()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <java.lang.String: int hashCode()>
VIRTUAL edge: $z14 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("acceptBacklog") in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("clientAuth") in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z13 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("clientAuthRequired") in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z11 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("host") in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z10 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("port") in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z12 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("sni") in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $i2 = virtualinvoke $r30.<java.lang.Number: int intValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <java.util.concurrent.atomic.AtomicLong: int intValue()>
VIRTUAL edge: $i2 = virtualinvoke $r30.<java.lang.Number: int intValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <java.lang.Float: int intValue()>
VIRTUAL edge: $i2 = virtualinvoke $r30.<java.lang.Number: int intValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <java.math.BigDecimal: int intValue()>
VIRTUAL edge: $i2 = virtualinvoke $r30.<java.lang.Number: int intValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <java.lang.Double: int intValue()>
VIRTUAL edge: $i2 = virtualinvoke $r30.<java.lang.Number: int intValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <java.lang.Long: int intValue()>
VIRTUAL edge: $i2 = virtualinvoke $r30.<java.lang.Number: int intValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <java.util.concurrent.atomic.AtomicInteger: int intValue()>
VIRTUAL edge: $i2 = virtualinvoke $r30.<java.lang.Number: int intValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <java.lang.Short: int intValue()>
VIRTUAL edge: $i2 = virtualinvoke $r30.<java.lang.Number: int intValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <java.math.BigInteger: int intValue()>
VIRTUAL edge: $i2 = virtualinvoke $r30.<java.lang.Number: int intValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <java.lang.Byte: int intValue()>
VIRTUAL edge: $i2 = virtualinvoke $r30.<java.lang.Number: int intValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <java.lang.Integer: int intValue()>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setAcceptBacklog(int)>($i2) in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetServerOptions setAcceptBacklog(int)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setAcceptBacklog(int)>($i2) in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setAcceptBacklog(int)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setClientAuth(io.vertx.core.http.ClientAuth)>($r26) in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetServerOptions setClientAuth(io.vertx.core.http.ClientAuth)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setClientAuth(io.vertx.core.http.ClientAuth)>($r26) in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setClientAuth(io.vertx.core.http.ClientAuth)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setClientAuthRequired(boolean)>($z7) in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetServerOptions setClientAuthRequired(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setClientAuthRequired(boolean)>($z7) in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setClientAuthRequired(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setHost(java.lang.String)>($r17) in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetServerOptions setHost(java.lang.String)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setHost(java.lang.String)>($r17) in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setHost(java.lang.String)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setPort(int)>($i1) in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetServerOptions setPort(int)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setPort(int)>($i1) in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setPort(int)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setSni(boolean)>($z3) in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetServerOptions setSni(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setSni(boolean)>($z3) in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setSni(boolean)>
VIRTUAL edge: $z7 = virtualinvoke $r21.<java.lang.Boolean: boolean booleanValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <java.lang.Boolean: boolean booleanValue()>
VIRTUAL edge: $i1 = virtualinvoke $r13.<java.lang.Number: int intValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <java.util.concurrent.atomic.AtomicLong: int intValue()>
VIRTUAL edge: $i1 = virtualinvoke $r13.<java.lang.Number: int intValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <java.lang.Float: int intValue()>
VIRTUAL edge: $i1 = virtualinvoke $r13.<java.lang.Number: int intValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <java.math.BigDecimal: int intValue()>
VIRTUAL edge: $i1 = virtualinvoke $r13.<java.lang.Number: int intValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <java.lang.Double: int intValue()>
VIRTUAL edge: $i1 = virtualinvoke $r13.<java.lang.Number: int intValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <java.lang.Long: int intValue()>
VIRTUAL edge: $i1 = virtualinvoke $r13.<java.lang.Number: int intValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <java.util.concurrent.atomic.AtomicInteger: int intValue()>
VIRTUAL edge: $i1 = virtualinvoke $r13.<java.lang.Number: int intValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <java.lang.Short: int intValue()>
VIRTUAL edge: $i1 = virtualinvoke $r13.<java.lang.Number: int intValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <java.math.BigInteger: int intValue()>
VIRTUAL edge: $i1 = virtualinvoke $r13.<java.lang.Number: int intValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <java.lang.Byte: int intValue()>
VIRTUAL edge: $i1 = virtualinvoke $r13.<java.lang.Number: int intValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <java.lang.Integer: int intValue()>
VIRTUAL edge: $z3 = virtualinvoke $r9.<java.lang.Boolean: boolean booleanValue()>() in <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)> ==> <java.lang.Boolean: boolean booleanValue()>
CLINIT edge: $r2 = <io.vertx.core.http.ClientAuth: io.vertx.core.http.ClientAuth REQUIRED> in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setClientAuthRequired(boolean)> ==> <io.vertx.core.http.ClientAuth: void <clinit>()>
CLINIT edge: $r2 = <io.vertx.core.http.ClientAuth: io.vertx.core.http.ClientAuth NONE> in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setClientAuthRequired(boolean)> ==> <io.vertx.core.http.ClientAuth: void <clinit>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.impl.NetServerImpl: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.net.NetServerOptions)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>() in <io.vertx.core.net.impl.NetServerImpl: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.net.NetServerOptions)> ==> <java.util.concurrent.ConcurrentHashMap: void <init>()>
SPECIAL edge: specialinvoke $r2.<io.vertx.core.net.impl.VertxEventLoopGroup: void <init>()>() in <io.vertx.core.net.impl.NetServerImpl: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup: void <init>()>
SPECIAL edge: specialinvoke $r3.<io.vertx.core.net.impl.HandlerManager: void <init>(io.vertx.core.net.impl.VertxEventLoopGroup)>($r4) in <io.vertx.core.net.impl.NetServerImpl: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.net.impl.HandlerManager: void <init>(io.vertx.core.net.impl.VertxEventLoopGroup)>
SPECIAL edge: specialinvoke $r5.<io.vertx.core.net.impl.NetServerImpl$NetSocketStream: void <init>(io.vertx.core.net.impl.NetServerImpl,io.vertx.core.net.impl.NetServerImpl$1)>(r0, null) in <io.vertx.core.net.impl.NetServerImpl: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.net.impl.NetServerImpl$NetSocketStream: void <init>(io.vertx.core.net.impl.NetServerImpl,io.vertx.core.net.impl.NetServerImpl$1)>
SPECIAL edge: specialinvoke $r7.<io.vertx.core.net.NetServerOptions: void <init>(io.vertx.core.net.NetServerOptions)>(r8) in <io.vertx.core.net.impl.NetServerImpl: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.net.NetServerOptions: void <init>(io.vertx.core.net.NetServerOptions)>
VIRTUAL edge: $r10 = virtualinvoke r8.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.KeyCertOptions getKeyCertOptions()>() in <io.vertx.core.net.impl.NetServerImpl: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.KeyCertOptions getKeyCertOptions()>
VIRTUAL edge: $r11 = virtualinvoke r8.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.TrustOptions getTrustOptions()>() in <io.vertx.core.net.impl.NetServerImpl: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TrustOptions getTrustOptions()>
VIRTUAL edge: $z0 = virtualinvoke r8.<io.vertx.core.net.NetServerOptions: boolean getLogActivity()>() in <io.vertx.core.net.impl.NetServerImpl: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.net.NetworkOptions: boolean getLogActivity()>
SPECIAL edge: specialinvoke $r9.<io.vertx.core.net.impl.SSLHelper: void <init>(io.vertx.core.net.NetServerOptions,io.vertx.core.net.KeyCertOptions,io.vertx.core.net.TrustOptions)>(r8, $r10, $r11) in <io.vertx.core.net.impl.NetServerImpl: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.net.impl.SSLHelper: void <init>(io.vertx.core.net.NetServerOptions,io.vertx.core.net.KeyCertOptions,io.vertx.core.net.TrustOptions)>
INTERFACE edge: $r12 = interfaceinvoke r6.<io.vertx.core.impl.VertxInternal: io.vertx.core.impl.ContextInternal getContext()>() in <io.vertx.core.net.impl.NetServerImpl: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.ContextInternal getContext()>
INTERFACE edge: $z1 = interfaceinvoke $r14.<io.vertx.core.impl.ContextInternal: boolean isMultiThreadedWorkerContext()>() in <io.vertx.core.net.impl.NetServerImpl: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.impl.WorkerContext: boolean isMultiThreadedWorkerContext()>
INTERFACE edge: $z1 = interfaceinvoke $r14.<io.vertx.core.impl.ContextInternal: boolean isMultiThreadedWorkerContext()>() in <io.vertx.core.net.impl.NetServerImpl: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.impl.EventLoopContext: boolean isMultiThreadedWorkerContext()>
INTERFACE edge: $z1 = interfaceinvoke $r14.<io.vertx.core.impl.ContextInternal: boolean isMultiThreadedWorkerContext()>() in <io.vertx.core.net.impl.NetServerImpl: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.impl.MultiThreadedWorkerContext: boolean isMultiThreadedWorkerContext()>
SPECIAL edge: specialinvoke $r16.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot use NetServer in a multi-threaded worker verticle") in <io.vertx.core.net.impl.NetServerImpl: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.net.NetServerOptions)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
INTERFACE edge: interfaceinvoke $r15.<io.vertx.core.impl.ContextInternal: void addCloseHook(io.vertx.core.Closeable)>(r0) in <io.vertx.core.net.impl.NetServerImpl: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.impl.ContextImpl: void addCloseHook(io.vertx.core.Closeable)>
INTERFACE edge: interfaceinvoke $r15.<io.vertx.core.impl.ContextInternal: void addCloseHook(io.vertx.core.Closeable)>(r0) in <io.vertx.core.net.impl.NetServerImpl: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.impl.EventLoopContext: void addCloseHook(io.vertx.core.Closeable)>
CLINIT edge: $r1 = <io.vertx.core.http.ClientAuth: io.vertx.core.http.ClientAuth NONE> in <io.vertx.core.net.impl.SSLHelper: void <init>(io.vertx.core.net.NetServerOptions,io.vertx.core.net.KeyCertOptions,io.vertx.core.net.TrustOptions)> ==> <io.vertx.core.http.ClientAuth: void <clinit>()>
STATIC edge: r4 = staticinvoke <io.vertx.core.net.impl.SSLHelper: io.vertx.core.net.SSLEngineOptions resolveEngineOptions(io.vertx.core.net.TCPSSLOptions)>(r3) in <io.vertx.core.net.impl.SSLHelper: void <init>(io.vertx.core.net.NetServerOptions,io.vertx.core.net.KeyCertOptions,io.vertx.core.net.TrustOptions)> ==> <io.vertx.core.net.impl.SSLHelper: io.vertx.core.net.SSLEngineOptions resolveEngineOptions(io.vertx.core.net.TCPSSLOptions)>
CLINIT edge: r4 = staticinvoke <io.vertx.core.net.impl.SSLHelper: io.vertx.core.net.SSLEngineOptions resolveEngineOptions(io.vertx.core.net.TCPSSLOptions)>(r3) in <io.vertx.core.net.impl.SSLHelper: void <init>(io.vertx.core.net.NetServerOptions,io.vertx.core.net.KeyCertOptions,io.vertx.core.net.TrustOptions)> ==> <io.vertx.core.net.impl.SSLHelper: void <clinit>()>
STATIC edge: $z7 = staticinvoke <io.vertx.core.net.JdkSSLEngineOptions: boolean isAlpnAvailable()>() in <io.vertx.core.net.impl.SSLHelper: io.vertx.core.net.SSLEngineOptions resolveEngineOptions(io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.JdkSSLEngineOptions: boolean isAlpnAvailable()>
STATIC edge: $z3 = staticinvoke <io.vertx.core.net.OpenSSLEngineOptions: boolean isAlpnAvailable()>() in <io.vertx.core.net.impl.SSLHelper: io.vertx.core.net.SSLEngineOptions resolveEngineOptions(io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.OpenSSLEngineOptions: boolean isAlpnAvailable()>
STATIC edge: $z4 = staticinvoke <io.vertx.core.net.JdkSSLEngineOptions: boolean isAlpnAvailable()>() in <io.vertx.core.net.impl.SSLHelper: io.vertx.core.net.SSLEngineOptions resolveEngineOptions(io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.JdkSSLEngineOptions: boolean isAlpnAvailable()>
STATIC edge: r5 = staticinvoke <io.netty.handler.ssl.OpenSsl: java.lang.Throwable unavailabilityCause()>() in <io.vertx.core.net.impl.SSLHelper: io.vertx.core.net.SSLEngineOptions resolveEngineOptions(io.vertx.core.net.TCPSSLOptions)> ==> <io.netty.handler.ssl.OpenSsl: java.lang.Throwable unavailabilityCause()>
STATIC edge: $z5 = staticinvoke <io.netty.handler.ssl.OpenSsl: boolean isAvailable()>() in <io.vertx.core.net.impl.SSLHelper: io.vertx.core.net.SSLEngineOptions resolveEngineOptions(io.vertx.core.net.TCPSSLOptions)> ==> <io.netty.handler.ssl.OpenSsl: boolean isAvailable()>
STATIC edge: $z8 = staticinvoke <io.vertx.core.net.OpenSSLEngineOptions: boolean isAlpnAvailable()>() in <io.vertx.core.net.impl.SSLHelper: io.vertx.core.net.SSLEngineOptions resolveEngineOptions(io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.OpenSSLEngineOptions: boolean isAlpnAvailable()>
CLINIT edge: $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1) in <io.vertx.core.net.JdkSSLEngineOptions: boolean isAlpnAvailable()> ==> <java.lang.Boolean: void <clinit>()>
STATIC edge: $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0) in <io.vertx.core.net.JdkSSLEngineOptions: boolean isAlpnAvailable()> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
STATIC edge: $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0) in <io.vertx.core.net.JdkSSLEngineOptions: boolean isAlpnAvailable()> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
STATIC edge: $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1) in <io.vertx.core.net.JdkSSLEngineOptions: boolean isAlpnAvailable()> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
CLINIT edge: $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0) in <io.vertx.core.net.JdkSSLEngineOptions: boolean isAlpnAvailable()> ==> <java.lang.Boolean: void <clinit>()>
CLINIT edge: $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0) in <io.vertx.core.net.JdkSSLEngineOptions: boolean isAlpnAvailable()> ==> <java.lang.Boolean: void <clinit>()>
STATIC edge: $z0 = staticinvoke <io.netty.handler.ssl.OpenSsl: boolean isAlpnSupported()>() in <io.vertx.core.net.OpenSSLEngineOptions: boolean isAlpnAvailable()> ==> <io.netty.handler.ssl.OpenSsl: boolean isAlpnSupported()>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.net.impl.NetServerImpl: void close()>() in <io.vertx.core.net.impl.NetServerImpl: void finalize()> ==> <io.vertx.core.net.impl.NetServerImpl: void close()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void finalize()>() in <io.vertx.core.net.impl.NetServerImpl: void finalize()> ==> <java.lang.Object: void finalize()>
SPECIAL edge: specialinvoke $r0.<java.util.EnumMap: void <init>(java.lang.Class)>(class "Lio/vertx/core/http/HttpVersion;") in <io.vertx.core.net.impl.SSLHelper: void <clinit>()> ==> <java.util.EnumMap: void <init>(java.lang.Class)>
SPECIAL edge: specialinvoke $r1.<java.util.ArrayList: void <init>()>() in <io.vertx.core.net.impl.SSLHelper: void <clinit>()> ==> <java.util.ArrayList: void <init>()>
VIRTUAL edge: virtualinvoke r16.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(null, null, null) in <io.vertx.core.net.impl.SSLHelper: void <clinit>()> ==> <javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>
VIRTUAL edge: r2 = virtualinvoke r16.<javax.net.ssl.SSLContext: javax.net.ssl.SSLEngine createSSLEngine()>() in <io.vertx.core.net.impl.SSLHelper: void <clinit>()> ==> <javax.net.ssl.SSLContext: javax.net.ssl.SSLEngine createSSLEngine()>
INTERFACE edge: interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, "h2") in <io.vertx.core.net.impl.SSLHelper: void <clinit>()> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, "h2") in <io.vertx.core.net.impl.SSLHelper: void <clinit>()> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, "h2") in <io.vertx.core.net.impl.SSLHelper: void <clinit>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, "h2") in <io.vertx.core.net.impl.SSLHelper: void <clinit>()> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, "h2") in <io.vertx.core.net.impl.SSLHelper: void <clinit>()> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, "h2") in <io.vertx.core.net.impl.SSLHelper: void <clinit>()> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, "h2") in <io.vertx.core.net.impl.SSLHelper: void <clinit>()> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, "h2") in <io.vertx.core.net.impl.SSLHelper: void <clinit>()> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, "h2") in <io.vertx.core.net.impl.SSLHelper: void <clinit>()> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, "h2") in <io.vertx.core.net.impl.SSLHelper: void <clinit>()> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, "http/1.1") in <io.vertx.core.net.impl.SSLHelper: void <clinit>()> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, "http/1.1") in <io.vertx.core.net.impl.SSLHelper: void <clinit>()> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, "http/1.1") in <io.vertx.core.net.impl.SSLHelper: void <clinit>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, "http/1.1") in <io.vertx.core.net.impl.SSLHelper: void <clinit>()> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, "http/1.1") in <io.vertx.core.net.impl.SSLHelper: void <clinit>()> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, "http/1.1") in <io.vertx.core.net.impl.SSLHelper: void <clinit>()> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, "http/1.1") in <io.vertx.core.net.impl.SSLHelper: void <clinit>()> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, "http/1.1") in <io.vertx.core.net.impl.SSLHelper: void <clinit>()> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, "http/1.1") in <io.vertx.core.net.impl.SSLHelper: void <clinit>()> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, "http/1.1") in <io.vertx.core.net.impl.SSLHelper: void <clinit>()> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, "http/1.0") in <io.vertx.core.net.impl.SSLHelper: void <clinit>()> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, "http/1.0") in <io.vertx.core.net.impl.SSLHelper: void <clinit>()> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, "http/1.0") in <io.vertx.core.net.impl.SSLHelper: void <clinit>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, "http/1.0") in <io.vertx.core.net.impl.SSLHelper: void <clinit>()> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, "http/1.0") in <io.vertx.core.net.impl.SSLHelper: void <clinit>()> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, "http/1.0") in <io.vertx.core.net.impl.SSLHelper: void <clinit>()> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, "http/1.0") in <io.vertx.core.net.impl.SSLHelper: void <clinit>()> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, "http/1.0") in <io.vertx.core.net.impl.SSLHelper: void <clinit>()> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, "http/1.0") in <io.vertx.core.net.impl.SSLHelper: void <clinit>()> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, "http/1.0") in <io.vertx.core.net.impl.SSLHelper: void <clinit>()> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r4 = virtualinvoke r0.<io.vertx.core.net.impl.NetServerImpl: io.vertx.core.net.NetServer listen(io.vertx.core.net.SocketAddress,io.vertx.core.Handler)>($r2, r3) in <io.vertx.core.net.impl.NetServerImpl: io.vertx.core.net.NetServer listen(int,java.lang.String,io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.NetServerImpl: io.vertx.core.net.NetServer listen(io.vertx.core.net.SocketAddress,io.vertx.core.Handler)>
STATIC edge: $r4 = staticinvoke <io.vertx.core.net.impl.NetServerImpl$lambda_listen_4__71: io.vertx.core.Handler bootstrap$(io.vertx.core.net.impl.NetServerImpl,io.vertx.core.Handler)>(r0, r2) in <io.vertx.core.net.impl.NetServerImpl: io.vertx.core.net.NetServer listen(io.vertx.core.net.SocketAddress,io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.NetServerImpl$lambda_listen_4__71: io.vertx.core.Handler bootstrap$(io.vertx.core.net.impl.NetServerImpl,io.vertx.core.Handler)>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.net.impl.SocketAddressImpl: void <init>(int,java.lang.String)>(i0, r1) in <io.vertx.core.net.SocketAddress: io.vertx.core.net.SocketAddress inetSocketAddress(int,java.lang.String)> ==> <io.vertx.core.net.impl.SocketAddressImpl: void <init>(int,java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setTrustStoreOptions(io.vertx.core.net.JksOptions)>(r1) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setTrustStoreOptions(io.vertx.core.net.JksOptions)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetServerOptions setTrustStoreOptions(io.vertx.core.net.JksOptions)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setTrustStoreOptions(io.vertx.core.net.JksOptions)>(r1) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setTrustStoreOptions(io.vertx.core.net.JksOptions)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setTrustStoreOptions(io.vertx.core.net.JksOptions)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setTrustStoreOptions(io.vertx.core.net.JksOptions)>(r1) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.TCPSSLOptions setTrustStoreOptions(io.vertx.core.net.JksOptions)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setTrustStoreOptions(io.vertx.core.net.JksOptions)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setTrustStoreOptions(io.vertx.core.net.JksOptions)>(r1) in <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.TCPSSLOptions setTrustStoreOptions(io.vertx.core.net.JksOptions)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setTrustStoreOptions(io.vertx.core.net.JksOptions)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setTrustStoreOptions(io.vertx.core.net.JksOptions)>(r1) in <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.TCPSSLOptions setTrustStoreOptions(io.vertx.core.net.JksOptions)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setTrustStoreOptions(io.vertx.core.net.JksOptions)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setTrustStoreOptions(io.vertx.core.net.JksOptions)>(r1) in <io.vertx.core.net.NetClientOptions: io.vertx.core.net.TCPSSLOptions setTrustStoreOptions(io.vertx.core.net.JksOptions)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setTrustStoreOptions(io.vertx.core.net.JksOptions)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setPfxTrustOptions(io.vertx.core.net.PfxOptions)>(r1) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setPfxTrustOptions(io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetServerOptions setPfxTrustOptions(io.vertx.core.net.PfxOptions)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setPfxTrustOptions(io.vertx.core.net.PfxOptions)>(r1) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setPfxTrustOptions(io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setPfxTrustOptions(io.vertx.core.net.PfxOptions)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setPfxTrustOptions(io.vertx.core.net.PfxOptions)>(r1) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.TCPSSLOptions setPfxTrustOptions(io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setPfxTrustOptions(io.vertx.core.net.PfxOptions)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setPfxTrustOptions(io.vertx.core.net.PfxOptions)>(r1) in <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.TCPSSLOptions setPfxTrustOptions(io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setPfxTrustOptions(io.vertx.core.net.PfxOptions)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setPfxTrustOptions(io.vertx.core.net.PfxOptions)>(r1) in <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.TCPSSLOptions setPfxTrustOptions(io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setPfxTrustOptions(io.vertx.core.net.PfxOptions)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setPfxTrustOptions(io.vertx.core.net.PfxOptions)>(r1) in <io.vertx.core.net.NetClientOptions: io.vertx.core.net.TCPSSLOptions setPfxTrustOptions(io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setPfxTrustOptions(io.vertx.core.net.PfxOptions)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setPemTrustOptions(io.vertx.core.net.PemTrustOptions)>(r1) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setPemTrustOptions(io.vertx.core.net.PemTrustOptions)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetServerOptions setPemTrustOptions(io.vertx.core.net.PemTrustOptions)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setPemTrustOptions(io.vertx.core.net.PemTrustOptions)>(r1) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setPemTrustOptions(io.vertx.core.net.PemTrustOptions)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setPemTrustOptions(io.vertx.core.net.PemTrustOptions)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setPemTrustOptions(io.vertx.core.net.PemTrustOptions)>(r1) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.TCPSSLOptions setPemTrustOptions(io.vertx.core.net.PemTrustOptions)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setPemTrustOptions(io.vertx.core.net.PemTrustOptions)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setPemTrustOptions(io.vertx.core.net.PemTrustOptions)>(r1) in <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.TCPSSLOptions setPemTrustOptions(io.vertx.core.net.PemTrustOptions)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setPemTrustOptions(io.vertx.core.net.PemTrustOptions)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setPemTrustOptions(io.vertx.core.net.PemTrustOptions)>(r1) in <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.TCPSSLOptions setPemTrustOptions(io.vertx.core.net.PemTrustOptions)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setPemTrustOptions(io.vertx.core.net.PemTrustOptions)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setPemTrustOptions(io.vertx.core.net.PemTrustOptions)>(r1) in <io.vertx.core.net.NetClientOptions: io.vertx.core.net.TCPSSLOptions setPemTrustOptions(io.vertx.core.net.PemTrustOptions)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setPemTrustOptions(io.vertx.core.net.PemTrustOptions)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setKeyStoreOptions(io.vertx.core.net.JksOptions)>(r1) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setKeyStoreOptions(io.vertx.core.net.JksOptions)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetServerOptions setKeyStoreOptions(io.vertx.core.net.JksOptions)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setKeyStoreOptions(io.vertx.core.net.JksOptions)>(r1) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setKeyStoreOptions(io.vertx.core.net.JksOptions)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setKeyStoreOptions(io.vertx.core.net.JksOptions)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setKeyStoreOptions(io.vertx.core.net.JksOptions)>(r1) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.TCPSSLOptions setKeyStoreOptions(io.vertx.core.net.JksOptions)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setKeyStoreOptions(io.vertx.core.net.JksOptions)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setKeyStoreOptions(io.vertx.core.net.JksOptions)>(r1) in <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.TCPSSLOptions setKeyStoreOptions(io.vertx.core.net.JksOptions)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setKeyStoreOptions(io.vertx.core.net.JksOptions)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setKeyStoreOptions(io.vertx.core.net.JksOptions)>(r1) in <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.TCPSSLOptions setKeyStoreOptions(io.vertx.core.net.JksOptions)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setKeyStoreOptions(io.vertx.core.net.JksOptions)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setKeyStoreOptions(io.vertx.core.net.JksOptions)>(r1) in <io.vertx.core.net.NetClientOptions: io.vertx.core.net.TCPSSLOptions setKeyStoreOptions(io.vertx.core.net.JksOptions)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setKeyStoreOptions(io.vertx.core.net.JksOptions)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)>(r1) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetServerOptions setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)>(r1) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)>(r1) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.TCPSSLOptions setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)>(r1) in <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.TCPSSLOptions setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)>(r1) in <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.TCPSSLOptions setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)>(r1) in <io.vertx.core.net.NetClientOptions: io.vertx.core.net.TCPSSLOptions setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)>(r1) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetServerOptions setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)>(r1) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)>(r1) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.TCPSSLOptions setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)>(r1) in <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.TCPSSLOptions setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)>(r1) in <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.TCPSSLOptions setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)>(r1) in <io.vertx.core.net.NetClientOptions: io.vertx.core.net.TCPSSLOptions setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_getServerHandler_13__46: void <init>(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<io.vertx.core.impl.WorkerPool: java.util.concurrent.ExecutorService executor()>() in <io.vertx.core.impl.ContextImpl: void executeBlocking(io.vertx.core.Handler,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.impl.WorkerPool: java.util.concurrent.ExecutorService executor()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<io.vertx.core.impl.WorkerPool: io.vertx.core.spi.metrics.PoolMetrics metrics()>() in <io.vertx.core.impl.ContextImpl: void executeBlocking(io.vertx.core.Handler,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.impl.WorkerPool: io.vertx.core.spi.metrics.PoolMetrics metrics()>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.impl.ContextImpl: void executeBlocking(io.vertx.core.Handler,io.vertx.core.Handler,java.util.concurrent.Executor,io.vertx.core.impl.TaskQueue,io.vertx.core.spi.metrics.PoolMetrics)>(r1, r2, $r4, $r10, $r6) in <io.vertx.core.impl.ContextImpl: void executeBlocking(io.vertx.core.Handler,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.impl.ContextImpl: void executeBlocking(io.vertx.core.Handler,io.vertx.core.Handler,java.util.concurrent.Executor,io.vertx.core.impl.TaskQueue,io.vertx.core.spi.metrics.PoolMetrics)>
STATIC edge: r9 = staticinvoke <io.vertx.core.impl.ContextImpl$lambda_executeBlocking_2__72: java.lang.Runnable bootstrap$(io.vertx.core.impl.ContextImpl,io.vertx.core.spi.metrics.PoolMetrics,java.lang.Object,io.vertx.core.Handler,io.vertx.core.Handler)>(r2, r0, $r8, r3, r4) in <io.vertx.core.impl.ContextImpl: void executeBlocking(io.vertx.core.Handler,io.vertx.core.Handler,java.util.concurrent.Executor,io.vertx.core.impl.TaskQueue,io.vertx.core.spi.metrics.PoolMetrics)> ==> <io.vertx.core.impl.ContextImpl$lambda_executeBlocking_2__72: java.lang.Runnable bootstrap$(io.vertx.core.impl.ContextImpl,io.vertx.core.spi.metrics.PoolMetrics,java.lang.Object,io.vertx.core.Handler,io.vertx.core.Handler)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.impl.ContextImpl: void executeBlocking(io.vertx.core.Handler,boolean,io.vertx.core.Handler)>(r1, z0, r2) in <io.vertx.core.impl.EventLoopContext: void executeBlocking(io.vertx.core.Handler,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.impl.ContextImpl: void executeBlocking(io.vertx.core.Handler,boolean,io.vertx.core.Handler)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(r4) in <io.vertx.core.http.impl.WebSocketImplBase: void handleException(java.lang.Throwable)> ==> <io.vertx.core.impl.DeploymentManager$lambda_doDeployVerticle_2__17: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(r4) in <io.vertx.core.http.impl.WebSocketImplBase: void handleException(java.lang.Throwable)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(r4) in <io.vertx.core.http.impl.WebSocketImplBase: void handleException(java.lang.Throwable)> ==> <io.vertx.core.impl.FutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(r4) in <io.vertx.core.http.impl.WebSocketImplBase: void handleException(java.lang.Throwable)> ==> <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(r4) in <io.vertx.core.http.impl.WebSocketImplBase: void handleException(java.lang.Throwable)> ==> <io.vertx.core.impl.SucceededFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(r4) in <io.vertx.core.http.impl.WebSocketImplBase: void handleException(java.lang.Throwable)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(r4) in <io.vertx.core.http.impl.WebSocketImplBase: void handleException(java.lang.Throwable)> ==> <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(r4) in <io.vertx.core.http.impl.WebSocketImplBase: void handleException(java.lang.Throwable)> ==> <io.vertx.core.impl.VertxImpl$lambda_joinCluster_1__10: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(r4) in <io.vertx.core.http.impl.WebSocketImplBase: void handleException(java.lang.Throwable)> ==> <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(r4) in <io.vertx.core.http.impl.WebSocketImplBase: void handleException(java.lang.Throwable)> ==> <io.vertx.core.Starter$lambda_runVerticle_1__1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(r4) in <io.vertx.core.http.impl.WebSocketImplBase: void handleException(java.lang.Throwable)> ==> <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(r4) in <io.vertx.core.http.impl.WebSocketImplBase: void handleException(java.lang.Throwable)> ==> <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(r4) in <io.vertx.core.http.impl.WebSocketImplBase: void handleException(java.lang.Throwable)> ==> <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(r4) in <io.vertx.core.http.impl.WebSocketImplBase: void handleException(java.lang.Throwable)> ==> <io.vertx.core.Starter$lambda_startVertx_0__2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(r4) in <io.vertx.core.http.impl.WebSocketImplBase: void handleException(java.lang.Throwable)> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(r4) in <io.vertx.core.http.impl.WebSocketImplBase: void handleException(java.lang.Throwable)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(r4) in <io.vertx.core.http.impl.WebSocketImplBase: void handleException(java.lang.Throwable)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_start_3__19: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(r4) in <io.vertx.core.http.impl.WebSocketImplBase: void handleException(java.lang.Throwable)> ==> <io.vertx.core.impl.HAManager$lambda_doDeployVerticle_4__7: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(r4) in <io.vertx.core.http.impl.WebSocketImplBase: void handleException(java.lang.Throwable)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_close_0__29: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(r4) in <io.vertx.core.http.impl.WebSocketImplBase: void handleException(java.lang.Throwable)> ==> <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(r4) in <io.vertx.core.http.impl.WebSocketImplBase: void handleException(java.lang.Throwable)> ==> <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(r4) in <io.vertx.core.http.impl.WebSocketImplBase: void handleException(java.lang.Throwable)> ==> <io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(r4) in <io.vertx.core.http.impl.WebSocketImplBase: void handleException(java.lang.Throwable)> ==> <io.vertx.core.Starter$lambda_createLoggingHandler_2__3: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(r4) in <io.vertx.core.http.impl.WebSocketImplBase: void handleException(java.lang.Throwable)> ==> <io.vertx.core.impl.CompositeFutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(r4) in <io.vertx.core.http.impl.WebSocketImplBase: void handleException(java.lang.Throwable)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(r4) in <io.vertx.core.http.impl.WebSocketImplBase: void handleException(java.lang.Throwable)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_finalize_6__18: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(r4) in <io.vertx.core.http.impl.WebSocketImplBase: void handleException(java.lang.Throwable)> ==> <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(r4) in <io.vertx.core.http.impl.WebSocketImplBase: void handleException(java.lang.Throwable)> ==> <io.vertx.core.impl.VertxImpl$lambda_init_0__9: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(r4) in <io.vertx.core.http.impl.WebSocketImplBase: void handleException(java.lang.Throwable)> ==> <io.vertx.core.impl.FailedFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(r4) in <io.vertx.core.http.impl.WebSocketImplBase: void handleException(java.lang.Throwable)> ==> <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(r4) in <io.vertx.core.http.impl.WebSocketImplBase: void handleException(java.lang.Throwable)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_close_5__30: void handle(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.net.PemTrustOptions: void <init>(io.vertx.core.net.PemTrustOptions)>(r1) in <io.vertx.core.net.PemTrustOptions: io.vertx.core.net.PemTrustOptions clone()> ==> <io.vertx.core.net.PemTrustOptions: void <init>(io.vertx.core.net.PemTrustOptions)>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.net.PemKeyCertOptions: void <init>(io.vertx.core.net.PemKeyCertOptions)>(r1) in <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions clone()> ==> <io.vertx.core.net.PemKeyCertOptions: void <init>(io.vertx.core.net.PemKeyCertOptions)>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.net.JdkSSLEngineOptions: void <init>()>() in <io.vertx.core.net.JdkSSLEngineOptions: io.vertx.core.net.SSLEngineOptions clone()> ==> <io.vertx.core.net.JdkSSLEngineOptions: void <init>()>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.net.JksOptions: void <init>(io.vertx.core.net.JksOptions)>(r1) in <io.vertx.core.net.JksOptions: io.vertx.core.net.JksOptions clone()> ==> <io.vertx.core.net.JksOptions: void <init>(io.vertx.core.net.JksOptions)>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.net.OpenSSLEngineOptions: void <init>(io.vertx.core.net.OpenSSLEngineOptions)>(r1) in <io.vertx.core.net.OpenSSLEngineOptions: io.vertx.core.net.OpenSSLEngineOptions clone()> ==> <io.vertx.core.net.OpenSSLEngineOptions: void <init>(io.vertx.core.net.OpenSSLEngineOptions)>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.net.PfxOptions: void <init>(io.vertx.core.net.PfxOptions)>(r1) in <io.vertx.core.net.PfxOptions: io.vertx.core.net.PfxOptions clone()> ==> <io.vertx.core.net.PfxOptions: void <init>(io.vertx.core.net.PfxOptions)>
VIRTUAL edge: virtualinvoke $r2.<io.vertx.core.impl.CloseHooks: void remove(io.vertx.core.Closeable)>(r1) in <io.vertx.core.impl.ContextImpl: void removeCloseHook(io.vertx.core.Closeable)> ==> <io.vertx.core.impl.CloseHooks: void remove(io.vertx.core.Closeable)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.impl.ContextImpl: void removeCloseHook(io.vertx.core.Closeable)>(r1) in <io.vertx.core.impl.EventLoopContext: void removeCloseHook(io.vertx.core.Closeable)> ==> <io.vertx.core.impl.ContextImpl: void removeCloseHook(io.vertx.core.Closeable)>
SPECIAL edge: specialinvoke $r3.<io.vertx.core.http.CaseInsensitiveHeaders: void <init>()>() in <io.vertx.core.eventbus.impl.MessageImpl: io.vertx.core.MultiMap headers()> ==> <io.vertx.core.http.CaseInsensitiveHeaders: void <init>()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void decodeHeaders()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: io.vertx.core.MultiMap headers()> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void decodeHeaders()>
SPECIAL edge: specialinvoke $r3.<io.vertx.core.http.CaseInsensitiveHeaders: void <init>()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: io.vertx.core.MultiMap headers()> ==> <io.vertx.core.http.CaseInsensitiveHeaders: void <init>()>
CLINIT edge: $r6 = new java.lang.String in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void decodeHeaders()> ==> <java.lang.String: void <clinit>()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<io.netty.handler.codec.http.HttpHeaders: java.lang.String get(java.lang.String)>(r1) in <io.vertx.core.http.impl.HeadersAdaptor: java.lang.String get(java.lang.String)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders: java.lang.String get(java.lang.String)>
INTERFACE edge: $r4 = interfaceinvoke $r2.<io.netty.handler.codec.http2.Http2Headers: java.lang.Object get(java.lang.Object)>($r3) in <io.vertx.core.http.impl.Http2HeadersAdaptor: java.lang.String get(java.lang.String)> ==> <io.netty.handler.codec.http2.Http2Headers: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r6 = interfaceinvoke r5.<java.lang.CharSequence: java.lang.String toString()>() in <io.vertx.core.http.impl.Http2HeadersAdaptor: java.lang.String get(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: $r6 = interfaceinvoke r5.<java.lang.CharSequence: java.lang.String toString()>() in <io.vertx.core.http.impl.Http2HeadersAdaptor: java.lang.String get(java.lang.String)> ==> <java.lang.String: java.lang.String toString()>
INTERFACE edge: $r6 = interfaceinvoke r5.<java.lang.CharSequence: java.lang.String toString()>() in <io.vertx.core.http.impl.Http2HeadersAdaptor: java.lang.String get(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.http.impl.headers.VertxHttpHeaders: java.lang.String get(java.lang.CharSequence)>(r1) in <io.vertx.core.http.impl.headers.VertxHttpHeaders: java.lang.String get(java.lang.String)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders: java.lang.String get(java.lang.CharSequence)>
STATIC edge: staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r0, "name") in <io.vertx.core.http.impl.headers.VertxHttpHeaders: java.lang.String get(java.lang.CharSequence)> ==> <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>
VIRTUAL edge: r6 = virtualinvoke r5.<io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.String getValue()>() in <io.vertx.core.http.CaseInsensitiveHeaders: java.lang.String get(java.lang.String)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.String getValue()>
SPECIAL edge: specialinvoke $r3.<io.vertx.core.eventbus.DeliveryOptions: void <init>()>() in <io.vertx.core.eventbus.impl.EventBusImpl: io.vertx.core.eventbus.EventBus send(java.lang.String,java.lang.Object)> ==> <io.vertx.core.eventbus.DeliveryOptions: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke r0.<io.vertx.core.eventbus.impl.EventBusImpl: io.vertx.core.eventbus.EventBus send(java.lang.String,java.lang.Object,io.vertx.core.eventbus.DeliveryOptions,io.vertx.core.Handler)>(r1, r2, $r3, null) in <io.vertx.core.eventbus.impl.EventBusImpl: io.vertx.core.eventbus.EventBus send(java.lang.String,java.lang.Object)> ==> <io.vertx.core.eventbus.impl.EventBusImpl: io.vertx.core.eventbus.EventBus send(java.lang.String,java.lang.Object,io.vertx.core.eventbus.DeliveryOptions,io.vertx.core.Handler)>
INTERFACE edge: r4 = interfaceinvoke $r3.<io.vertx.core.impl.VertxInternal: io.vertx.core.Handler exceptionHandler()>() in <io.vertx.core.impl.ContextImpl: void reportException(java.lang.Throwable)> ==> <io.vertx.core.impl.VertxImpl: io.vertx.core.Handler exceptionHandler()>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.ContextImpl: void reportException(java.lang.Throwable)> ==> <io.vertx.core.impl.DeploymentManager$lambda_doDeployVerticle_2__17: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.ContextImpl: void reportException(java.lang.Throwable)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.ContextImpl: void reportException(java.lang.Throwable)> ==> <io.vertx.core.impl.FutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.ContextImpl: void reportException(java.lang.Throwable)> ==> <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.ContextImpl: void reportException(java.lang.Throwable)> ==> <io.vertx.core.impl.SucceededFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.ContextImpl: void reportException(java.lang.Throwable)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.ContextImpl: void reportException(java.lang.Throwable)> ==> <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.ContextImpl: void reportException(java.lang.Throwable)> ==> <io.vertx.core.impl.VertxImpl$lambda_joinCluster_1__10: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.ContextImpl: void reportException(java.lang.Throwable)> ==> <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.ContextImpl: void reportException(java.lang.Throwable)> ==> <io.vertx.core.Starter$lambda_runVerticle_1__1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.ContextImpl: void reportException(java.lang.Throwable)> ==> <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.ContextImpl: void reportException(java.lang.Throwable)> ==> <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.ContextImpl: void reportException(java.lang.Throwable)> ==> <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.ContextImpl: void reportException(java.lang.Throwable)> ==> <io.vertx.core.Starter$lambda_startVertx_0__2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.ContextImpl: void reportException(java.lang.Throwable)> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.ContextImpl: void reportException(java.lang.Throwable)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.ContextImpl: void reportException(java.lang.Throwable)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_start_3__19: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.ContextImpl: void reportException(java.lang.Throwable)> ==> <io.vertx.core.impl.HAManager$lambda_doDeployVerticle_4__7: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.ContextImpl: void reportException(java.lang.Throwable)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_close_0__29: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.ContextImpl: void reportException(java.lang.Throwable)> ==> <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.ContextImpl: void reportException(java.lang.Throwable)> ==> <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.ContextImpl: void reportException(java.lang.Throwable)> ==> <io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.ContextImpl: void reportException(java.lang.Throwable)> ==> <io.vertx.core.Starter$lambda_createLoggingHandler_2__3: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.ContextImpl: void reportException(java.lang.Throwable)> ==> <io.vertx.core.impl.CompositeFutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.ContextImpl: void reportException(java.lang.Throwable)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.ContextImpl: void reportException(java.lang.Throwable)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_finalize_6__18: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.ContextImpl: void reportException(java.lang.Throwable)> ==> <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.ContextImpl: void reportException(java.lang.Throwable)> ==> <io.vertx.core.impl.VertxImpl$lambda_init_0__9: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.ContextImpl: void reportException(java.lang.Throwable)> ==> <io.vertx.core.impl.FailedFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.ContextImpl: void reportException(java.lang.Throwable)> ==> <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<io.vertx.core.Handler: void handle(java.lang.Object)>(r1) in <io.vertx.core.impl.ContextImpl: void reportException(java.lang.Throwable)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_close_5__30: void handle(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r2.<io.vertx.core.logging.Logger: void error(java.lang.Object,java.lang.Throwable)>("Unhandled exception", r1) in <io.vertx.core.impl.ContextImpl: void reportException(java.lang.Throwable)> ==> <io.vertx.core.logging.Logger: void error(java.lang.Object,java.lang.Throwable)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.impl.ContextImpl: void reportException(java.lang.Throwable)>(r1) in <io.vertx.core.impl.EventLoopContext: void reportException(java.lang.Throwable)> ==> <io.vertx.core.impl.ContextImpl: void reportException(java.lang.Throwable)>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Queue: boolean isEmpty()>() in <io.vertx.core.eventbus.impl.HandlerRegistration: void checkNextTick()> ==> <java.util.ArrayDeque: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Queue: boolean isEmpty()>() in <io.vertx.core.eventbus.impl.HandlerRegistration: void checkNextTick()> ==> <java.util.AbstractCollection: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Queue: boolean isEmpty()>() in <io.vertx.core.eventbus.impl.HandlerRegistration: void checkNextTick()> ==> <java.util.concurrent.ConcurrentLinkedQueue: boolean isEmpty()>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.impl.ContextInternal: void runOnContext(io.vertx.core.Handler)>($r3) in <io.vertx.core.eventbus.impl.HandlerRegistration: void checkNextTick()> ==> <io.vertx.core.impl.ContextImpl: void runOnContext(io.vertx.core.Handler)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.impl.ContextInternal: void runOnContext(io.vertx.core.Handler)>($r3) in <io.vertx.core.eventbus.impl.HandlerRegistration: void checkNextTick()> ==> <io.vertx.core.impl.EventLoopContext: void runOnContext(io.vertx.core.Handler)>
VIRTUAL edge: i0 = virtualinvoke r0.<java.lang.String: int length()>() in <io.vertx.core.http.CaseInsensitiveHeaders: boolean eq(java.lang.String,java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: c5 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i4) in <io.vertx.core.http.CaseInsensitiveHeaders: boolean eq(java.lang.String,java.lang.String)> ==> <java.lang.String: char charAt(int)>
VIRTUAL edge: $i1 = virtualinvoke r1.<java.lang.String: int length()>() in <io.vertx.core.http.CaseInsensitiveHeaders: boolean eq(java.lang.String,java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: c6 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i4) in <io.vertx.core.http.CaseInsensitiveHeaders: boolean eq(java.lang.String,java.lang.String)> ==> <java.lang.String: char charAt(int)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.String: int length()>() in <io.vertx.core.http.CaseInsensitiveHeaders: int hash(java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: c5 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i4) in <io.vertx.core.http.CaseInsensitiveHeaders: int hash(java.lang.String)> ==> <java.lang.String: char charAt(int)>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.eventbus.impl.HandlerRegistration$lambda_checkNextTick_5__59: void <init>(io.vertx.core.eventbus.impl.HandlerRegistration)>($r0) in <io.vertx.core.eventbus.impl.HandlerRegistration$lambda_checkNextTick_5__59: io.vertx.core.Handler bootstrap$(io.vertx.core.eventbus.impl.HandlerRegistration)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration$lambda_checkNextTick_5__59: void <init>(io.vertx.core.eventbus.impl.HandlerRegistration)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.http.impl.VertxHttp2Stream: void <init>(io.vertx.core.http.impl.Http2ConnectionBase,io.netty.handler.codec.http2.Http2Stream,boolean)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke r1.<io.vertx.core.http.impl.Http2ConnectionBase: io.vertx.core.impl.VertxInternal vertx()>() in <io.vertx.core.http.impl.VertxHttp2Stream: void <init>(io.vertx.core.http.impl.Http2ConnectionBase,io.netty.handler.codec.http2.Http2Stream,boolean)> ==> <io.vertx.core.http.impl.Http2ConnectionBase: io.vertx.core.impl.VertxInternal vertx()>
VIRTUAL edge: $r5 = virtualinvoke r1.<io.vertx.core.http.impl.Http2ConnectionBase: io.vertx.core.impl.ContextInternal getContext()>() in <io.vertx.core.http.impl.VertxHttp2Stream: void <init>(io.vertx.core.http.impl.Http2ConnectionBase,io.netty.handler.codec.http2.Http2Stream,boolean)> ==> <io.vertx.core.net.impl.ConnectionBase: io.vertx.core.impl.ContextInternal getContext()>
SPECIAL edge: specialinvoke $r6.<io.vertx.core.streams.impl.InboundBuffer: void <init>(io.vertx.core.Context,long)>($r7, 5L) in <io.vertx.core.http.impl.VertxHttp2Stream: void <init>(io.vertx.core.http.impl.Http2ConnectionBase,io.netty.handler.codec.http2.Http2Stream,boolean)> ==> <io.vertx.core.streams.impl.InboundBuffer: void <init>(io.vertx.core.Context,long)>
VIRTUAL edge: virtualinvoke $r9.<io.vertx.core.streams.impl.InboundBuffer: io.vertx.core.streams.impl.InboundBuffer drainHandler(io.vertx.core.Handler)>($r10) in <io.vertx.core.http.impl.VertxHttp2Stream: void <init>(io.vertx.core.http.impl.Http2ConnectionBase,io.netty.handler.codec.http2.Http2Stream,boolean)> ==> <io.vertx.core.streams.impl.InboundBuffer: io.vertx.core.streams.impl.InboundBuffer drainHandler(io.vertx.core.Handler)>
VIRTUAL edge: virtualinvoke $r12.<io.vertx.core.streams.impl.InboundBuffer: io.vertx.core.streams.impl.InboundBuffer handler(io.vertx.core.Handler)>($r13) in <io.vertx.core.http.impl.VertxHttp2Stream: void <init>(io.vertx.core.http.impl.Http2ConnectionBase,io.netty.handler.codec.http2.Http2Stream,boolean)> ==> <io.vertx.core.streams.impl.InboundBuffer: io.vertx.core.streams.impl.InboundBuffer handler(io.vertx.core.Handler)>
INTERFACE edge: $r17 = interfaceinvoke $r15.<io.vertx.core.impl.ContextInternal: io.vertx.core.Handler exceptionHandler()>() in <io.vertx.core.http.impl.VertxHttp2Stream: void <init>(io.vertx.core.http.impl.Http2ConnectionBase,io.netty.handler.codec.http2.Http2Stream,boolean)> ==> <io.vertx.core.impl.ContextImpl: io.vertx.core.Handler exceptionHandler()>
INTERFACE edge: $r17 = interfaceinvoke $r15.<io.vertx.core.impl.ContextInternal: io.vertx.core.Handler exceptionHandler()>() in <io.vertx.core.http.impl.VertxHttp2Stream: void <init>(io.vertx.core.http.impl.Http2ConnectionBase,io.netty.handler.codec.http2.Http2Stream,boolean)> ==> <io.vertx.core.impl.EventLoopContext: io.vertx.core.Handler exceptionHandler()>
VIRTUAL edge: virtualinvoke $r16.<io.vertx.core.streams.impl.InboundBuffer: io.vertx.core.streams.impl.InboundBuffer exceptionHandler(io.vertx.core.Handler)>($r17) in <io.vertx.core.http.impl.VertxHttp2Stream: void <init>(io.vertx.core.http.impl.Http2ConnectionBase,io.netty.handler.codec.http2.Http2Stream,boolean)> ==> <io.vertx.core.streams.impl.InboundBuffer: io.vertx.core.streams.impl.InboundBuffer exceptionHandler(io.vertx.core.Handler)>
VIRTUAL edge: virtualinvoke $r19.<io.vertx.core.streams.impl.InboundBuffer: io.vertx.core.streams.impl.InboundBuffer emptyHandler(io.vertx.core.Handler)>($r20) in <io.vertx.core.http.impl.VertxHttp2Stream: void <init>(io.vertx.core.http.impl.Http2ConnectionBase,io.netty.handler.codec.http2.Http2Stream,boolean)> ==> <io.vertx.core.streams.impl.InboundBuffer: io.vertx.core.streams.impl.InboundBuffer emptyHandler(io.vertx.core.Handler)>
VIRTUAL edge: virtualinvoke $r22.<io.vertx.core.streams.impl.InboundBuffer: io.vertx.core.streams.impl.InboundBuffer resume()>() in <io.vertx.core.http.impl.VertxHttp2Stream: void <init>(io.vertx.core.http.impl.Http2ConnectionBase,io.netty.handler.codec.http2.Http2Stream,boolean)> ==> <io.vertx.core.streams.impl.InboundBuffer: io.vertx.core.streams.impl.InboundBuffer resume()>
STATIC edge: staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "context must not be null") in <io.vertx.core.streams.impl.InboundBuffer: void <init>(io.vertx.core.Context,long)> ==> <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <io.vertx.core.impl.Arguments: void require(boolean,java.lang.String)>($z0, $r7) in <io.vertx.core.streams.impl.InboundBuffer: void <init>(io.vertx.core.Context,long)> ==> <io.vertx.core.impl.Arguments: void require(boolean,java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>() in <io.vertx.core.streams.impl.InboundBuffer: void <clinit>()> ==> <java.lang.Class: boolean desiredAssertionStatus()>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.http.impl.VertxHttp2Stream$lambda_new_1__58: void <init>(io.vertx.core.http.impl.VertxHttp2Stream)>($r0) in <io.vertx.core.http.impl.VertxHttp2Stream$lambda_new_1__58: io.vertx.core.Handler bootstrap$(io.vertx.core.http.impl.VertxHttp2Stream)> ==> <io.vertx.core.http.impl.VertxHttp2Stream$lambda_new_1__58: void <init>(io.vertx.core.http.impl.VertxHttp2Stream)>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.http.impl.VertxHttp2Stream$handleData__57: void <init>(io.vertx.core.http.impl.VertxHttp2Stream)>($r0) in <io.vertx.core.http.impl.VertxHttp2Stream$handleData__57: io.vertx.core.Handler bootstrap$(io.vertx.core.http.impl.VertxHttp2Stream)> ==> <io.vertx.core.http.impl.VertxHttp2Stream$handleData__57: void <init>(io.vertx.core.http.impl.VertxHttp2Stream)>
SPECIAL edge: specialinvoke $r3.<io.vertx.core.http.impl.VertxHttp2Stream$lambda_new_0__56: void <init>(io.vertx.core.http.impl.VertxHttp2Stream,io.vertx.core.http.impl.Http2ConnectionBase,io.netty.handler.codec.http2.Http2Stream)>($r0, $r1, $r2) in <io.vertx.core.http.impl.VertxHttp2Stream$lambda_new_0__56: io.vertx.core.Handler bootstrap$(io.vertx.core.http.impl.VertxHttp2Stream,io.vertx.core.http.impl.Http2ConnectionBase,io.netty.handler.codec.http2.Http2Stream)> ==> <io.vertx.core.http.impl.VertxHttp2Stream$lambda_new_0__56: void <init>(io.vertx.core.http.impl.VertxHttp2Stream,io.vertx.core.http.impl.Http2ConnectionBase,io.netty.handler.codec.http2.Http2Stream)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.impl.ContextImpl: void checkEventLoopThread()>() in <io.vertx.core.impl.ContextImpl: void executeFromIO(java.lang.Object,io.vertx.core.Handler)> ==> <io.vertx.core.impl.ContextImpl: void checkEventLoopThread()>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.impl.ContextImpl: void execute(java.lang.Object,io.vertx.core.Handler)>(r1, r2) in <io.vertx.core.impl.ContextImpl: void executeFromIO(java.lang.Object,io.vertx.core.Handler)> ==> <io.vertx.core.impl.WorkerContext: void execute(java.lang.Object,io.vertx.core.Handler)>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.impl.ContextImpl: void execute(java.lang.Object,io.vertx.core.Handler)>(r1, r2) in <io.vertx.core.impl.ContextImpl: void executeFromIO(java.lang.Object,io.vertx.core.Handler)> ==> <io.vertx.core.impl.EventLoopContext: void execute(java.lang.Object,io.vertx.core.Handler)>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.impl.ContextImpl: void execute(java.lang.Object,io.vertx.core.Handler)>(r1, r2) in <io.vertx.core.impl.ContextImpl: void executeFromIO(java.lang.Object,io.vertx.core.Handler)> ==> <io.vertx.core.impl.MultiThreadedWorkerContext: void execute(java.lang.Object,io.vertx.core.Handler)>
STATIC edge: r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() in <io.vertx.core.impl.ContextImpl: void checkEventLoopThread()> ==> <java.lang.Thread: java.lang.Thread currentThread()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.http.StreamPriority: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<io.netty.handler.codec.http.HttpContentCompressor: void <init>()>() in <io.vertx.core.http.impl.HttpUtils$CustomCompressor: void <init>()> ==> <io.netty.handler.codec.http.HttpContentCompressor: void <init>()>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.impl.ContextInternal: void runOnContext(io.vertx.core.Handler)>($r4) in <io.vertx.core.net.impl.NetServerImpl: void executeCloseDone(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,java.lang.Exception)> ==> <io.vertx.core.impl.ContextImpl: void runOnContext(io.vertx.core.Handler)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.impl.ContextInternal: void runOnContext(io.vertx.core.Handler)>($r4) in <io.vertx.core.net.impl.NetServerImpl: void executeCloseDone(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,java.lang.Exception)> ==> <io.vertx.core.impl.EventLoopContext: void runOnContext(io.vertx.core.Handler)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.impl.NetServerImpl$Handlers: void <init>(io.vertx.core.net.NetServer,io.vertx.core.Handler,io.vertx.core.Handler)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: r1 = interfaceinvoke r0.<io.vertx.core.impl.ContextInternal: io.netty.channel.EventLoop nettyEventLoop()>() in <io.vertx.core.net.impl.HandlerManager: void removeHandler(java.lang.Object,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.impl.ContextImpl: io.netty.channel.EventLoop nettyEventLoop()>
INTERFACE edge: r1 = interfaceinvoke r0.<io.vertx.core.impl.ContextInternal: io.netty.channel.EventLoop nettyEventLoop()>() in <io.vertx.core.net.impl.HandlerManager: void removeHandler(java.lang.Object,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.impl.EventLoopContext: io.netty.channel.EventLoop nettyEventLoop()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r1) in <io.vertx.core.net.impl.HandlerManager: void removeHandler(java.lang.Object,io.vertx.core.impl.ContextInternal)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
SPECIAL edge: specialinvoke $r6.<io.vertx.core.net.impl.HandlerHolder: void <init>(io.vertx.core.impl.ContextInternal,java.lang.Object)>(r0, r7) in <io.vertx.core.net.impl.HandlerManager: void removeHandler(java.lang.Object,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.net.impl.HandlerHolder: void <init>(io.vertx.core.impl.ContextInternal,java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r5.<io.vertx.core.net.impl.HandlerManager$Handlers: boolean removeHandler(io.vertx.core.net.impl.HandlerHolder)>($r6) in <io.vertx.core.net.impl.HandlerManager: void removeHandler(java.lang.Object,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.net.impl.HandlerManager$Handlers: boolean removeHandler(io.vertx.core.net.impl.HandlerHolder)>
VIRTUAL edge: $z1 = virtualinvoke r5.<io.vertx.core.net.impl.HandlerManager$Handlers: boolean isEmpty()>() in <io.vertx.core.net.impl.HandlerManager: void removeHandler(java.lang.Object,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.net.impl.HandlerManager$Handlers: boolean isEmpty()>
SPECIAL edge: specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Can\'t find handler") in <io.vertx.core.net.impl.HandlerManager: void removeHandler(java.lang.Object,io.vertx.core.impl.ContextInternal)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
INTERFACE edge: interfaceinvoke $r10.<java.util.concurrent.ConcurrentMap: java.lang.Object remove(java.lang.Object)>(r1) in <io.vertx.core.net.impl.HandlerManager: void removeHandler(java.lang.Object,io.vertx.core.impl.ContextInternal)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: $z2 = interfaceinvoke $r8.<java.util.concurrent.ConcurrentMap: boolean isEmpty()>() in <io.vertx.core.net.impl.HandlerManager: void removeHandler(java.lang.Object,io.vertx.core.impl.ContextInternal)> ==> <java.util.concurrent.ConcurrentHashMap: boolean isEmpty()>
VIRTUAL edge: virtualinvoke $r9.<io.vertx.core.net.impl.VertxEventLoopGroup: void removeWorker(io.netty.channel.EventLoop)>(r1) in <io.vertx.core.net.impl.HandlerManager: void removeHandler(java.lang.Object,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup: void removeWorker(io.netty.channel.EventLoop)>
INTERFACE edge: $r17 = interfaceinvoke $r16.<io.vertx.core.impl.VertxInternal: java.util.Map sharedNetServers()>() in <io.vertx.core.net.impl.NetServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl: java.util.Map sharedNetServers()>
INTERFACE edge: interfaceinvoke $r17.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r18) in <io.vertx.core.net.impl.NetServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <java.util.HashMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r17.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r18) in <io.vertx.core.net.impl.NetServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <java.util.IdentityHashMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r17.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r18) in <io.vertx.core.net.impl.NetServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <java.util.Hashtable: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r17.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r18) in <io.vertx.core.net.impl.NetServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <java.util.EnumMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r17.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r18) in <io.vertx.core.net.impl.NetServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r17.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r18) in <io.vertx.core.net.impl.NetServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <java.security.Provider: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r17.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r18) in <io.vertx.core.net.impl.NetServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <java.util.jar.Attributes: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r17.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r18) in <io.vertx.core.net.impl.NetServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <java.util.TreeMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r17.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r18) in <io.vertx.core.net.impl.NetServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r17.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r18) in <io.vertx.core.net.impl.NetServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <java.util.WeakHashMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: r3 = interfaceinvoke $r2.<io.vertx.core.impl.VertxInternal: io.vertx.core.impl.ContextInternal getContext()>() in <io.vertx.core.net.impl.NetServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.ContextInternal getContext()>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Collection values()>() in <io.vertx.core.net.impl.NetServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <java.util.HashMap: java.util.Collection values()>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Collection values()>() in <io.vertx.core.net.impl.NetServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <java.util.IdentityHashMap: java.util.Collection values()>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Collection values()>() in <io.vertx.core.net.impl.NetServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <java.util.Hashtable: java.util.Collection values()>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Collection values()>() in <io.vertx.core.net.impl.NetServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <java.util.EnumMap: java.util.Collection values()>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Collection values()>() in <io.vertx.core.net.impl.NetServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Collection values()>() in <io.vertx.core.net.impl.NetServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <java.security.Provider: java.util.Collection values()>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Collection values()>() in <io.vertx.core.net.impl.NetServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <java.util.jar.Attributes: java.util.Collection values()>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Collection values()>() in <io.vertx.core.net.impl.NetServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <java.util.AbstractMap: java.util.Collection values()>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Collection values()>() in <io.vertx.core.net.impl.NetServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Collection values()>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Collection values()>() in <io.vertx.core.net.impl.NetServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <java.util.WeakHashMap: java.util.Collection values()>
INTERFACE edge: r20 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.NetServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <io.vertx.core.impl.ConcurrentHashSet: java.util.Iterator iterator()>
INTERFACE edge: r20 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.NetServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: r20 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.NetServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: r20 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.NetServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r20 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.NetServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <java.util.AbstractList: java.util.Iterator iterator()>
INTERFACE edge: r20 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.NetServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2: java.util.Iterator iterator()>
INTERFACE edge: r20 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.NetServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$1: java.util.Iterator iterator()>
INTERFACE edge: r20 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.NetServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r20 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.NetServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r20 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.NetServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
INTERFACE edge: r20 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.NetServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <java.util.concurrent.ConcurrentLinkedQueue: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.NetServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.NetServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <io.vertx.core.json.JsonArray$Iter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.NetServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <io.vertx.core.json.JsonObject$Iter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.NetServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.NetServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <java.util.Scanner: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.NetServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.NetServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: boolean hasNext()>
INTERFACE edge: $r14 = interfaceinvoke r20.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.NetServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object next()>
INTERFACE edge: $r14 = interfaceinvoke r20.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.NetServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <io.vertx.core.json.JsonArray$Iter: java.lang.Object next()>
INTERFACE edge: $r14 = interfaceinvoke r20.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.NetServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <io.vertx.core.json.JsonObject$Iter: java.lang.Object next()>
INTERFACE edge: $r14 = interfaceinvoke r20.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.NetServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: java.lang.Object next()>
INTERFACE edge: $r14 = interfaceinvoke r20.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.NetServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <java.util.Scanner: java.lang.Object next()>
INTERFACE edge: $r14 = interfaceinvoke r20.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.NetServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: java.lang.Object next()>
INTERFACE edge: $r14 = interfaceinvoke r20.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.NetServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: java.lang.Object next()>
VIRTUAL edge: virtualinvoke r15.<io.vertx.core.net.impl.NetSocketImpl: void close()>() in <io.vertx.core.net.impl.NetServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.NetSocketImpl: void close()>
INTERFACE edge: $r7 = interfaceinvoke $r6.<io.vertx.core.impl.VertxInternal: io.vertx.core.impl.ContextInternal getContext()>() in <io.vertx.core.net.impl.NetServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.ContextInternal getContext()>
SPECIAL edge: specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Context was changed") in <io.vertx.core.net.impl.NetServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
STATIC edge: $r4 = staticinvoke <io.vertx.core.shareddata.impl.Checker: java.lang.Object copyIfRequired(java.lang.Object)>($r3) in <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object remove(java.lang.Object)> ==> <io.vertx.core.shareddata.impl.Checker: java.lang.Object copyIfRequired(java.lang.Object)>
STATIC edge: $r8 = staticinvoke <io.vertx.core.shareddata.impl.Checker: java.lang.Object copyIfRequired(java.lang.Object)>(r7) in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Collection values()> ==> <io.vertx.core.shareddata.impl.Checker: java.lang.Object copyIfRequired(java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<io.vertx.core.net.impl.NetServerImpl$lambda_executeCloseDone_14__60: void <init>(io.vertx.core.Handler,io.vertx.core.Future)>($r0, $r1) in <io.vertx.core.net.impl.NetServerImpl$lambda_executeCloseDone_14__60: io.vertx.core.Handler bootstrap$(io.vertx.core.Handler,io.vertx.core.Future)> ==> <io.vertx.core.net.impl.NetServerImpl$lambda_executeCloseDone_14__60: void <init>(io.vertx.core.Handler,io.vertx.core.Future)>
SPECIAL edge: specialinvoke $r4.<io.vertx.core.net.impl.NetServerImpl$lambda_actualClose_9__61: void <init>(io.vertx.core.net.impl.NetServerImpl,io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,io.netty.channel.group.ChannelGroupFuture)>($r0, $r1, $r2, $r3) in <io.vertx.core.net.impl.NetServerImpl$lambda_actualClose_9__61: io.netty.util.concurrent.GenericFutureListener bootstrap$(io.vertx.core.net.impl.NetServerImpl,io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,io.netty.channel.group.ChannelGroupFuture)> ==> <io.vertx.core.net.impl.NetServerImpl$lambda_actualClose_9__61: void <init>(io.vertx.core.net.impl.NetServerImpl,io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,io.netty.channel.group.ChannelGroupFuture)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.impl.NetServerImpl$lambda_close_7__48: void <init>(io.vertx.core.Handler,io.vertx.core.Handler)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.impl.NetServerImpl$lambda_close_8__47: void <init>(io.vertx.core.Handler)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.impl.TaskQueue: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.LinkedList: void <init>()>() in <io.vertx.core.impl.TaskQueue: void <init>()> ==> <java.util.LinkedList: void <init>()>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.impl.TaskQueue$run__63: void <init>(io.vertx.core.impl.TaskQueue)>($r0) in <io.vertx.core.impl.TaskQueue$run__63: java.lang.Runnable bootstrap$(io.vertx.core.impl.TaskQueue)> ==> <io.vertx.core.impl.TaskQueue$run__63: void <init>(io.vertx.core.impl.TaskQueue)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.impl.Http2HeadersAdaptor$1: java.lang.String get(int)>(i0) in <io.vertx.core.http.impl.Http2HeadersAdaptor$1: java.lang.Object get(int)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$1: java.lang.String get(int)>
INTERFACE edge: $i1 = interfaceinvoke $r1.<java.util.List: int size()>() in <io.vertx.core.net.impl.VertxEventLoopGroup: void checkPos()> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$1: int size()>
INTERFACE edge: $i1 = interfaceinvoke $r1.<java.util.List: int size()>() in <io.vertx.core.net.impl.VertxEventLoopGroup: void checkPos()> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i1 = interfaceinvoke $r1.<java.util.List: int size()>() in <io.vertx.core.net.impl.VertxEventLoopGroup: void checkPos()> ==> <java.util.concurrent.CopyOnWriteArrayList: int size()>
INTERFACE edge: $i1 = interfaceinvoke $r1.<java.util.List: int size()>() in <io.vertx.core.net.impl.VertxEventLoopGroup: void checkPos()> ==> <java.util.ArrayList: int size()>
VIRTUAL edge: $r5 = virtualinvoke $r3.<io.vertx.core.impl.WorkerPool: io.vertx.core.spi.metrics.PoolMetrics metrics()>() in <io.vertx.core.impl.WorkerContext: void execute(java.lang.Object,io.vertx.core.Handler)> ==> <io.vertx.core.impl.WorkerPool: io.vertx.core.spi.metrics.PoolMetrics metrics()>
VIRTUAL edge: $r6 = virtualinvoke r0.<io.vertx.core.impl.WorkerContext: java.lang.Runnable wrapTask(java.lang.Object,io.vertx.core.Handler,io.vertx.core.spi.metrics.PoolMetrics)>(r1, r2, $r5) in <io.vertx.core.impl.WorkerContext: void execute(java.lang.Object,io.vertx.core.Handler)> ==> <io.vertx.core.impl.WorkerContext: java.lang.Runnable wrapTask(java.lang.Object,io.vertx.core.Handler,io.vertx.core.spi.metrics.PoolMetrics)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<io.vertx.core.impl.WorkerPool: java.util.concurrent.ExecutorService executor()>() in <io.vertx.core.impl.WorkerContext: void execute(java.lang.Object,io.vertx.core.Handler)> ==> <io.vertx.core.impl.WorkerPool: java.util.concurrent.ExecutorService executor()>
VIRTUAL edge: virtualinvoke $r4.<io.vertx.core.impl.TaskQueue: void execute(java.lang.Runnable,java.util.concurrent.Executor)>($r6, $r8) in <io.vertx.core.impl.WorkerContext: void execute(java.lang.Object,io.vertx.core.Handler)> ==> <io.vertx.core.impl.TaskQueue: void execute(java.lang.Runnable,java.util.concurrent.Executor)>
STATIC edge: $r5 = staticinvoke <io.vertx.core.impl.WorkerContext$lambda_wrapTask_0__75: java.lang.Runnable bootstrap$(io.vertx.core.impl.WorkerContext,io.vertx.core.spi.metrics.PoolMetrics,java.lang.Object,java.lang.Object,io.vertx.core.Handler)>(r2, r0, $r6, r3, r4) in <io.vertx.core.impl.WorkerContext: java.lang.Runnable wrapTask(java.lang.Object,io.vertx.core.Handler,io.vertx.core.spi.metrics.PoolMetrics)> ==> <io.vertx.core.impl.WorkerContext$lambda_wrapTask_0__75: java.lang.Runnable bootstrap$(io.vertx.core.impl.WorkerContext,io.vertx.core.spi.metrics.PoolMetrics,java.lang.Object,java.lang.Object,io.vertx.core.Handler)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<io.vertx.core.impl.WorkerPool: java.util.concurrent.ExecutorService executor()>() in <io.vertx.core.impl.MultiThreadedWorkerContext: void execute(java.lang.Object,io.vertx.core.Handler)> ==> <io.vertx.core.impl.WorkerPool: java.util.concurrent.ExecutorService executor()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<io.vertx.core.impl.WorkerPool: io.vertx.core.spi.metrics.PoolMetrics metrics()>() in <io.vertx.core.impl.MultiThreadedWorkerContext: void execute(java.lang.Object,io.vertx.core.Handler)> ==> <io.vertx.core.impl.WorkerPool: io.vertx.core.spi.metrics.PoolMetrics metrics()>
VIRTUAL edge: $r7 = virtualinvoke r0.<io.vertx.core.impl.MultiThreadedWorkerContext: java.lang.Runnable wrapTask(java.lang.Object,io.vertx.core.Handler,io.vertx.core.spi.metrics.PoolMetrics)>(r3, r4, $r6) in <io.vertx.core.impl.MultiThreadedWorkerContext: void execute(java.lang.Object,io.vertx.core.Handler)> ==> <io.vertx.core.impl.WorkerContext: java.lang.Runnable wrapTask(java.lang.Object,io.vertx.core.Handler,io.vertx.core.spi.metrics.PoolMetrics)>
EXECUTOR edge: interfaceinvoke $r2.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>($r7) in <io.vertx.core.impl.MultiThreadedWorkerContext: void execute(java.lang.Object,io.vertx.core.Handler)> ==> <io.vertx.core.impl.BlockedThreadChecker$1: void run()>
EXECUTOR edge: interfaceinvoke $r2.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>($r7) in <io.vertx.core.impl.MultiThreadedWorkerContext: void execute(java.lang.Object,io.vertx.core.Handler)> ==> <io.vertx.core.impl.launcher.commands.Watcher: void run()>
EXECUTOR edge: interfaceinvoke $r2.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>($r7) in <io.vertx.core.impl.MultiThreadedWorkerContext: void execute(java.lang.Object,io.vertx.core.Handler)> ==> <io.vertx.core.file.impl.FileResolver$lambda_setupCacheDir_1__26: void run()>
EXECUTOR edge: interfaceinvoke $r2.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>($r7) in <io.vertx.core.impl.MultiThreadedWorkerContext: void execute(java.lang.Object,io.vertx.core.Handler)> ==> <io.vertx.core.impl.EventLoopContext$lambda_executeAsync_0__54: void run()>
EXECUTOR edge: interfaceinvoke $r2.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>($r7) in <io.vertx.core.impl.MultiThreadedWorkerContext: void execute(java.lang.Object,io.vertx.core.Handler)> ==> <io.vertx.core.Starter$1: void run()>
EXECUTOR edge: interfaceinvoke $r2.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>($r7) in <io.vertx.core.impl.MultiThreadedWorkerContext: void execute(java.lang.Object,io.vertx.core.Handler)> ==> <java.lang.Thread: void run()>
EXECUTOR edge: interfaceinvoke $r2.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>($r7) in <io.vertx.core.impl.MultiThreadedWorkerContext: void execute(java.lang.Object,io.vertx.core.Handler)> ==> <io.vertx.core.impl.TaskQueue$run__63: void run()>
EXECUTOR edge: interfaceinvoke $r2.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>($r7) in <io.vertx.core.impl.MultiThreadedWorkerContext: void execute(java.lang.Object,io.vertx.core.Handler)> ==> <io.vertx.core.impl.launcher.commands.RunCommand$1: void run()>
EXECUTOR edge: interfaceinvoke $r2.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>($r7) in <io.vertx.core.impl.MultiThreadedWorkerContext: void execute(java.lang.Object,io.vertx.core.Handler)> ==> <io.vertx.core.impl.HAManager$lambda_addToHADeployList_7__8: void run()>
SPECIAL edge: $r1 = specialinvoke r0.<io.vertx.core.impl.ContextImpl: io.netty.channel.EventLoop nettyEventLoop()>() in <io.vertx.core.impl.EventLoopContext: io.netty.channel.EventLoop nettyEventLoop()> ==> <io.vertx.core.impl.ContextImpl: io.netty.channel.EventLoop nettyEventLoop()>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Set keySet()>() in <io.vertx.core.impl.BlockedThreadChecker$1: void run()> ==> <java.util.HashMap: java.util.Set keySet()>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Set keySet()>() in <io.vertx.core.impl.BlockedThreadChecker$1: void run()> ==> <java.util.IdentityHashMap: java.util.Set keySet()>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Set keySet()>() in <io.vertx.core.impl.BlockedThreadChecker$1: void run()> ==> <java.util.Hashtable: java.util.Set keySet()>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Set keySet()>() in <io.vertx.core.impl.BlockedThreadChecker$1: void run()> ==> <java.util.EnumMap: java.util.Set keySet()>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Set keySet()>() in <io.vertx.core.impl.BlockedThreadChecker$1: void run()> ==> <java.util.concurrent.ConcurrentHashMap: java.util.Set keySet()>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Set keySet()>() in <io.vertx.core.impl.BlockedThreadChecker$1: void run()> ==> <java.security.Provider: java.util.Set keySet()>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Set keySet()>() in <io.vertx.core.impl.BlockedThreadChecker$1: void run()> ==> <java.util.jar.Attributes: java.util.Set keySet()>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Set keySet()>() in <io.vertx.core.impl.BlockedThreadChecker$1: void run()> ==> <java.util.TreeMap: java.util.Set keySet()>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Set keySet()>() in <io.vertx.core.impl.BlockedThreadChecker$1: void run()> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Set keySet()>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Set keySet()>() in <io.vertx.core.impl.BlockedThreadChecker$1: void run()> ==> <java.util.WeakHashMap: java.util.Set keySet()>
INTERFACE edge: r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>() in <io.vertx.core.impl.BlockedThreadChecker$1: void run()> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>() in <io.vertx.core.impl.BlockedThreadChecker$1: void run()> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2: java.util.Iterator iterator()>
INTERFACE edge: r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>() in <io.vertx.core.impl.BlockedThreadChecker$1: void run()> ==> <io.vertx.core.impl.ConcurrentHashSet: java.util.Iterator iterator()>
INTERFACE edge: r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>() in <io.vertx.core.impl.BlockedThreadChecker$1: void run()> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$1: java.util.Iterator iterator()>
INTERFACE edge: r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>() in <io.vertx.core.impl.BlockedThreadChecker$1: void run()> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.BlockedThreadChecker$1: void run()> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.BlockedThreadChecker$1: void run()> ==> <io.vertx.core.json.JsonArray$Iter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.BlockedThreadChecker$1: void run()> ==> <io.vertx.core.json.JsonObject$Iter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.BlockedThreadChecker$1: void run()> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.BlockedThreadChecker$1: void run()> ==> <java.util.Scanner: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.BlockedThreadChecker$1: void run()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.BlockedThreadChecker$1: void run()> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: boolean hasNext()>
INTERFACE edge: $r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.BlockedThreadChecker$1: void run()> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object next()>
INTERFACE edge: $r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.BlockedThreadChecker$1: void run()> ==> <io.vertx.core.json.JsonArray$Iter: java.lang.Object next()>
INTERFACE edge: $r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.BlockedThreadChecker$1: void run()> ==> <io.vertx.core.json.JsonObject$Iter: java.lang.Object next()>
INTERFACE edge: $r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.BlockedThreadChecker$1: void run()> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: java.lang.Object next()>
INTERFACE edge: $r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.BlockedThreadChecker$1: void run()> ==> <java.util.Scanner: java.lang.Object next()>
INTERFACE edge: $r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.BlockedThreadChecker$1: void run()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: java.lang.Object next()>
INTERFACE edge: $r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.BlockedThreadChecker$1: void run()> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: java.lang.Object next()>
VIRTUAL edge: l1 = virtualinvoke r8.<io.vertx.core.impl.VertxThread: long startTime()>() in <io.vertx.core.impl.BlockedThreadChecker$1: void run()> ==> <io.vertx.core.impl.VertxThread: long startTime()>
VIRTUAL edge: l3 = virtualinvoke r8.<io.vertx.core.impl.VertxThread: long getMaxExecTime()>() in <io.vertx.core.impl.BlockedThreadChecker$1: void run()> ==> <io.vertx.core.impl.VertxThread: long getMaxExecTime()>
VIRTUAL edge: r9 = virtualinvoke r8.<io.vertx.core.impl.VertxThread: java.util.concurrent.TimeUnit getMaxExecTimeUnit()>() in <io.vertx.core.impl.BlockedThreadChecker$1: void run()> ==> <io.vertx.core.impl.VertxThread: java.util.concurrent.TimeUnit getMaxExecTimeUnit()>
VIRTUAL edge: $r25 = virtualinvoke r8.<io.vertx.core.impl.VertxThread: java.lang.StackTraceElement[] getStackTrace()>() in <io.vertx.core.impl.BlockedThreadChecker$1: void run()> ==> <io.netty.util.concurrent.FastThreadLocalThread: java.lang.StackTraceElement[] getStackTrace()>
VIRTUAL edge: l4 = virtualinvoke r9.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>(l2, $r10) in <io.vertx.core.impl.BlockedThreadChecker$1: void run()> ==> <java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>
SPECIAL edge: specialinvoke $r11.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.impl.BlockedThreadChecker$1: void run()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Thread ") in <io.vertx.core.impl.BlockedThreadChecker$1: void run()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r8) in <io.vertx.core.impl.BlockedThreadChecker$1: void run()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has been blocked for ") in <io.vertx.core.impl.BlockedThreadChecker$1: void run()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l7) in <io.vertx.core.impl.BlockedThreadChecker$1: void run()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(long)>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ms, time limit is ") in <io.vertx.core.impl.BlockedThreadChecker$1: void run()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $l8 = virtualinvoke $r17.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>(l3, r9) in <io.vertx.core.impl.BlockedThreadChecker$1: void run()> ==> <java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>
VIRTUAL edge: $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l8) in <io.vertx.core.impl.BlockedThreadChecker$1: void run()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(long)>
VIRTUAL edge: $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ms") in <io.vertx.core.impl.BlockedThreadChecker$1: void run()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.impl.BlockedThreadChecker$1: void run()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $l9 = virtualinvoke $r22.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>(l2, $r21) in <io.vertx.core.impl.BlockedThreadChecker$1: void run()> ==> <java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>
VIRTUAL edge: virtualinvoke $r27.<io.vertx.core.logging.Logger: void warn(java.lang.Object)>(r20) in <io.vertx.core.impl.BlockedThreadChecker$1: void run()> ==> <io.vertx.core.logging.Logger: void warn(java.lang.Object)>
SPECIAL edge: specialinvoke $r23.<io.vertx.core.VertxException: void <init>(java.lang.String)>("Thread blocked") in <io.vertx.core.impl.BlockedThreadChecker$1: void run()> ==> <io.vertx.core.VertxException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r23.<io.vertx.core.VertxException: void setStackTrace(java.lang.StackTraceElement[])>($r25) in <io.vertx.core.impl.BlockedThreadChecker$1: void run()> ==> <java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])>
VIRTUAL edge: virtualinvoke $r26.<io.vertx.core.logging.Logger: void warn(java.lang.Object,java.lang.Throwable)>(r20, $r23) in <io.vertx.core.impl.BlockedThreadChecker$1: void run()> ==> <io.vertx.core.logging.Logger: void warn(java.lang.Object,java.lang.Throwable)>
SPECIAL edge: $z1 = specialinvoke r0.<io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()>() in <io.vertx.core.impl.launcher.commands.Watcher: void run()> ==> <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.impl.launcher.commands.Watcher: void trigger()>() in <io.vertx.core.impl.launcher.commands.Watcher: void run()> ==> <io.vertx.core.impl.launcher.commands.Watcher: void trigger()>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.impl.launcher.commands.Watcher: void close()>() in <io.vertx.core.impl.launcher.commands.Watcher: void run()> ==> <io.vertx.core.impl.launcher.commands.Watcher: void close()>
VIRTUAL edge: virtualinvoke $r3.<io.vertx.core.logging.Logger: void error(java.lang.Object,java.lang.Throwable)>("An error have been encountered while watching resources - leaving the redeploy mode", $r1) in <io.vertx.core.impl.launcher.commands.Watcher: void run()> ==> <io.vertx.core.logging.Logger: void error(java.lang.Object,java.lang.Throwable)>
CLINIT edge: $r47 = newarray (java.io.File)[0] in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.io.File: void <clinit>()>
STATIC edge: l18 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.lang.System: long currentTimeMillis()>
CLINIT edge: l18 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.lang.System: void <clinit>()>
CLINIT edge: $r17 = <io.vertx.core.impl.launcher.commands.Watcher: io.vertx.core.logging.Logger LOGGER> in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <io.vertx.core.impl.launcher.commands.Watcher: void <clinit>()>
CLINIT edge: $r29 = <io.vertx.core.impl.launcher.commands.Watcher: io.vertx.core.logging.Logger LOGGER> in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <io.vertx.core.impl.launcher.commands.Watcher: void <clinit>()>
CLINIT edge: $r36 = <io.vertx.core.impl.launcher.commands.Watcher: io.vertx.core.logging.Logger LOGGER> in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <io.vertx.core.impl.launcher.commands.Watcher: void <clinit>()>
CLINIT edge: l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <io.vertx.core.impl.launcher.commands.Watcher: void trigger()> ==> <java.lang.System: void <clinit>()>
STATIC edge: $r3 = staticinvoke <io.vertx.core.impl.launcher.commands.Watcher$lambda_trigger_4__76: io.vertx.core.Handler bootstrap$(io.vertx.core.impl.launcher.commands.Watcher,long)>(r1, l0) in <io.vertx.core.impl.launcher.commands.Watcher: void trigger()> ==> <io.vertx.core.impl.launcher.commands.Watcher$lambda_trigger_4__76: io.vertx.core.Handler bootstrap$(io.vertx.core.impl.launcher.commands.Watcher,long)>
STATIC edge: l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <io.vertx.core.impl.launcher.commands.Watcher: void trigger()> ==> <java.lang.System: long currentTimeMillis()>
CLINIT edge: $r0 = <io.vertx.core.impl.launcher.commands.Watcher: io.vertx.core.logging.Logger LOGGER> in <io.vertx.core.impl.launcher.commands.Watcher: void trigger()> ==> <io.vertx.core.impl.launcher.commands.Watcher: void <clinit>()>
CLINIT edge: $r0 = <io.vertx.core.impl.launcher.commands.Watcher: io.vertx.core.logging.Logger LOGGER> in <io.vertx.core.impl.launcher.commands.Watcher: void close()> ==> <io.vertx.core.impl.launcher.commands.Watcher: void <clinit>()>
VIRTUAL edge: virtualinvoke $r1.<io.vertx.core.file.impl.FileResolver: void lambda$setupCacheDir$1()>() in <io.vertx.core.file.impl.FileResolver$lambda_setupCacheDir_1__26: void run()> ==> <io.vertx.core.file.impl.FileResolver: void lambda$setupCacheDir$1()>
CLINIT edge: $r5 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS> in <io.vertx.core.file.impl.FileResolver: void lambda$setupCacheDir$1()> ==> <java.util.concurrent.TimeUnit: void <clinit>()>
STATIC edge: $r8 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() in <io.vertx.core.file.impl.FileResolver: void lambda$setupCacheDir$1()> ==> <java.lang.Thread: java.lang.Thread currentThread()>
STATIC edge: $r4 = staticinvoke <io.vertx.core.file.impl.FileResolver$lambda_null_0__77: java.lang.Runnable bootstrap$(io.vertx.core.file.impl.FileResolver,java.util.concurrent.CountDownLatch)>(r3, $r0) in <io.vertx.core.file.impl.FileResolver: void lambda$setupCacheDir$1()> ==> <io.vertx.core.file.impl.FileResolver$lambda_null_0__77: java.lang.Runnable bootstrap$(io.vertx.core.file.impl.FileResolver,java.util.concurrent.CountDownLatch)>
VIRTUAL edge: virtualinvoke $r1.<io.vertx.core.impl.EventLoopContext: void lambda$executeAsync$0(io.vertx.core.Handler)>($r2) in <io.vertx.core.impl.EventLoopContext$lambda_executeAsync_0__54: void run()> ==> <io.vertx.core.impl.EventLoopContext: void lambda$executeAsync$0(io.vertx.core.Handler)>
SPECIAL edge: specialinvoke $r0.<java.util.concurrent.CountDownLatch: void <init>(int)>(1) in <io.vertx.core.Starter$1: void run()> ==> <java.util.concurrent.CountDownLatch: void <init>(int)>
VIRTUAL edge: $z0 = virtualinvoke $r0.<java.util.concurrent.CountDownLatch: boolean await(long,java.util.concurrent.TimeUnit)>(2L, $r6) in <io.vertx.core.Starter$1: void run()> ==> <java.util.concurrent.CountDownLatch: boolean await(long,java.util.concurrent.TimeUnit)>
INTERFACE edge: interfaceinvoke $r4.<io.vertx.core.Vertx: void close(io.vertx.core.Handler)>($r5) in <io.vertx.core.Starter$1: void run()> ==> <io.vertx.core.impl.VertxImpl: void close(io.vertx.core.Handler)>
VIRTUAL edge: virtualinvoke $r7.<io.vertx.core.logging.Logger: void error(java.lang.Object)>("Timed out waiting to undeploy all") in <io.vertx.core.Starter$1: void run()> ==> <io.vertx.core.logging.Logger: void error(java.lang.Object)>
SPECIAL edge: specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r8) in <io.vertx.core.Starter$1: void run()> ==> <java.lang.IllegalStateException: void <init>(java.lang.Throwable)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void run()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r1.<io.vertx.core.impl.TaskQueue: void run()>() in <io.vertx.core.impl.TaskQueue$run__63: void run()> ==> <io.vertx.core.impl.TaskQueue: void run()>
CLINIT edge: $r13 = <io.vertx.core.impl.TaskQueue: io.vertx.core.logging.Logger log> in <io.vertx.core.impl.TaskQueue: void run()> ==> <io.vertx.core.impl.TaskQueue: void <clinit>()>
STATIC edge: $r7 = staticinvoke <io.vertx.core.impl.TaskQueue$Task: java.lang.Runnable access$100(io.vertx.core.impl.TaskQueue$Task)>(r4) in <io.vertx.core.impl.TaskQueue: void run()> ==> <io.vertx.core.impl.TaskQueue$Task: java.lang.Runnable access$100(io.vertx.core.impl.TaskQueue$Task)>
STATIC edge: $r11 = staticinvoke <io.vertx.core.impl.TaskQueue$Task: java.util.concurrent.Executor access$000(io.vertx.core.impl.TaskQueue$Task)>(r4) in <io.vertx.core.impl.TaskQueue: void run()> ==> <io.vertx.core.impl.TaskQueue$Task: java.util.concurrent.Executor access$000(io.vertx.core.impl.TaskQueue$Task)>
STATIC edge: $r9 = staticinvoke <io.vertx.core.impl.TaskQueue$Task: java.util.concurrent.Executor access$000(io.vertx.core.impl.TaskQueue$Task)>(r4) in <io.vertx.core.impl.TaskQueue: void run()> ==> <io.vertx.core.impl.TaskQueue$Task: java.util.concurrent.Executor access$000(io.vertx.core.impl.TaskQueue$Task)>
STATIC edge: $r5 = staticinvoke <io.vertx.core.impl.TaskQueue$Task: java.util.concurrent.Executor access$000(io.vertx.core.impl.TaskQueue$Task)>(r4) in <io.vertx.core.impl.TaskQueue: void run()> ==> <io.vertx.core.impl.TaskQueue$Task: java.util.concurrent.Executor access$000(io.vertx.core.impl.TaskQueue$Task)>
VIRTUAL edge: virtualinvoke $r1.<io.vertx.core.impl.launcher.commands.RunCommand: void shutdownRedeployment()>() in <io.vertx.core.impl.launcher.commands.RunCommand$1: void run()> ==> <io.vertx.core.impl.launcher.commands.RunCommand: void shutdownRedeployment()>
VIRTUAL edge: virtualinvoke $r1.<io.vertx.core.impl.HAManager: void lambda$addToHADeployList$7(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)>($r2, $r3, $r4) in <io.vertx.core.impl.HAManager$lambda_addToHADeployList_7__8: void run()> ==> <io.vertx.core.impl.HAManager: void lambda$addToHADeployList$7(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)>
CLINIT edge: staticinvoke <io.vertx.core.impl.ContextImpl: void setContext(io.vertx.core.impl.ContextImpl)>(null) in <io.vertx.core.impl.HAManager: void lambda$addToHADeployList$7(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)> ==> <io.vertx.core.impl.ContextImpl: void <clinit>()>
STATIC edge: staticinvoke <io.vertx.core.impl.ContextImpl: void setContext(io.vertx.core.impl.ContextImpl)>($r9) in <io.vertx.core.impl.HAManager: void lambda$addToHADeployList$7(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)> ==> <io.vertx.core.impl.ContextImpl: void setContext(io.vertx.core.impl.ContextImpl)>
STATIC edge: staticinvoke <io.vertx.core.impl.ContextImpl: void setContext(io.vertx.core.impl.ContextImpl)>($r6) in <io.vertx.core.impl.HAManager: void lambda$addToHADeployList$7(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)> ==> <io.vertx.core.impl.ContextImpl: void setContext(io.vertx.core.impl.ContextImpl)>
STATIC edge: staticinvoke <io.vertx.core.impl.ContextImpl: void setContext(io.vertx.core.impl.ContextImpl)>(null) in <io.vertx.core.impl.HAManager: void lambda$addToHADeployList$7(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)> ==> <io.vertx.core.impl.ContextImpl: void setContext(io.vertx.core.impl.ContextImpl)>
CLINIT edge: staticinvoke <io.vertx.core.impl.ContextImpl: void setContext(io.vertx.core.impl.ContextImpl)>($r9) in <io.vertx.core.impl.HAManager: void lambda$addToHADeployList$7(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)> ==> <io.vertx.core.impl.ContextImpl: void <clinit>()>
CLINIT edge: staticinvoke <io.vertx.core.impl.ContextImpl: void setContext(io.vertx.core.impl.VertxThread,io.vertx.core.impl.ContextImpl)>($r8, r7) in <io.vertx.core.impl.ContextImpl: void setContext(io.vertx.core.impl.ContextImpl)> ==> <io.vertx.core.impl.ContextImpl: void <clinit>()>
STATIC edge: $r4 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() in <io.vertx.core.impl.ContextImpl: void setContext(io.vertx.core.impl.ContextImpl)> ==> <java.lang.Thread: java.lang.Thread currentThread()>
STATIC edge: staticinvoke <io.vertx.core.impl.ContextImpl: void setContext(io.vertx.core.impl.VertxThread,io.vertx.core.impl.ContextImpl)>($r8, r7) in <io.vertx.core.impl.ContextImpl: void setContext(io.vertx.core.impl.ContextImpl)> ==> <io.vertx.core.impl.ContextImpl: void setContext(io.vertx.core.impl.VertxThread,io.vertx.core.impl.ContextImpl)>
STATIC edge: r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() in <io.vertx.core.impl.ContextImpl: void setContext(io.vertx.core.impl.ContextImpl)> ==> <java.lang.Thread: java.lang.Thread currentThread()>
CLINIT edge: $z0 = <io.vertx.core.impl.ContextImpl: boolean DISABLE_TCCL> in <io.vertx.core.impl.ContextImpl: void setContext(io.vertx.core.impl.VertxThread,io.vertx.core.impl.ContextImpl)> ==> <io.vertx.core.impl.ContextImpl: void <clinit>()>
STATIC edge: $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() in <io.vertx.core.impl.ContextImpl: void setContext(io.vertx.core.impl.VertxThread,io.vertx.core.impl.ContextImpl)> ==> <java.lang.Thread: java.lang.Thread currentThread()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void sleep(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.Starter$1$lambda_run_0__64: void <init>(java.util.concurrent.CountDownLatch)>($r0) in <io.vertx.core.Starter$1$lambda_run_0__64: io.vertx.core.Handler bootstrap$(java.util.concurrent.CountDownLatch)> ==> <io.vertx.core.Starter$1$lambda_run_0__64: void <init>(java.util.concurrent.CountDownLatch)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.impl.EventLoopContext$lambda_executeAsync_0__54: void <init>(io.vertx.core.impl.EventLoopContext,io.vertx.core.Handler)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.net.URL: java.lang.String getPath()>() in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromFileURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.net.URL: java.lang.String getPath()>
SPECIAL edge: specialinvoke $r36.<java.io.File: void <init>(java.lang.String)>($r3) in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromFileURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.io.File: void <init>(java.lang.String)>
VIRTUAL edge: z0 = virtualinvoke $r36.<java.io.File: boolean isDirectory()>() in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromFileURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.io.File: boolean isDirectory()>
VIRTUAL edge: $r26 = virtualinvoke $r36.<java.io.File: java.nio.file.Path toPath()>() in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromFileURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.io.File: java.nio.file.Path toPath()>
VIRTUAL edge: $r21 = virtualinvoke $r36.<java.io.File: java.nio.file.Path toPath()>() in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromFileURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.io.File: java.nio.file.Path toPath()>
VIRTUAL edge: r35 = virtualinvoke $r36.<java.io.File: java.lang.String[] list()>() in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromFileURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.io.File: java.lang.String[] list()>
SPECIAL edge: specialinvoke $r37.<java.io.File: void <init>(java.io.File,java.lang.String)>($r8, r7) in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromFileURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.io.File: void <init>(java.io.File,java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r37.<java.io.File: java.io.File getParentFile()>() in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromFileURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.io.File: java.io.File getParentFile()>
VIRTUAL edge: $r27 = virtualinvoke $r37.<java.io.File: java.nio.file.Path toPath()>() in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromFileURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.io.File: java.nio.file.Path toPath()>
VIRTUAL edge: $r22 = virtualinvoke $r37.<java.io.File: java.nio.file.Path toPath()>() in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromFileURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.io.File: java.nio.file.Path toPath()>
VIRTUAL edge: virtualinvoke $r37.<java.io.File: boolean mkdirs()>() in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromFileURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.io.File: boolean mkdirs()>
VIRTUAL edge: virtualinvoke $r20.<java.io.File: boolean mkdirs()>() in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromFileURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.io.File: boolean mkdirs()>
SPECIAL edge: specialinvoke $r38.<io.vertx.core.VertxException: void <init>(java.lang.Throwable)>($r30) in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromFileURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <io.vertx.core.VertxException: void <init>(java.lang.Throwable)>
SPECIAL edge: specialinvoke $r39.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromFileURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r13 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7) in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromFileURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/") in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromFileURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11) in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromFileURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromFileURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke r17.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>(r16) in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromFileURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>
VIRTUAL edge: r18 = virtualinvoke r17.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>(r16) in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromFileURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <io.vertx.core.impl.IsolatingClassLoader: java.net.URL getResource(java.lang.String)>
SPECIAL edge: specialinvoke r6.<io.vertx.core.file.impl.FileResolver: java.io.File unpackFromFileURL(java.net.URL,java.lang.String,java.lang.ClassLoader)>(r18, r16, r17) in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromFileURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromFileURL(java.net.URL,java.lang.String,java.lang.ClassLoader)>
VIRTUAL edge: r45 = virtualinvoke r0.<java.net.URL: java.lang.String getPath()>() in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromJarURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.net.URL: java.lang.String getPath()>
VIRTUAL edge: i7 = virtualinvoke r45.<java.lang.String: int lastIndexOf(java.lang.String)>(".jar!") in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromJarURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.lang.String: int lastIndexOf(java.lang.String)>
VIRTUAL edge: i7 = virtualinvoke r45.<java.lang.String: int lastIndexOf(java.lang.String)>(".zip!") in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromJarURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.lang.String: int lastIndexOf(java.lang.String)>
VIRTUAL edge: i8 = virtualinvoke r45.<java.lang.String: int lastIndexOf(java.lang.String,int)>(".jar!", $i0) in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromJarURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.lang.String: int lastIndexOf(java.lang.String,int)>
VIRTUAL edge: i8 = virtualinvoke r45.<java.lang.String: int lastIndexOf(java.lang.String,int)>(".zip!", $i6) in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromJarURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.lang.String: int lastIndexOf(java.lang.String,int)>
VIRTUAL edge: $r29 = virtualinvoke r45.<java.lang.String: java.lang.String substring(int,int)>(5, $i5) in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromJarURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.lang.String: java.lang.String substring(int,int)>
VIRTUAL edge: r47 = virtualinvoke r45.<java.lang.String: java.lang.String substring(int,int)>($i2, $i1) in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromJarURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.lang.String: java.lang.String substring(int,int)>
VIRTUAL edge: r49 = virtualinvoke r45.<java.lang.String: java.lang.String substring(int)>($i3) in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromJarURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.lang.String: java.lang.String substring(int)>
SPECIAL edge: specialinvoke $r58.<java.io.File: void <init>(java.lang.String)>($r30) in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromJarURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.io.File: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r59.<java.util.zip.ZipFile: void <init>(java.io.File)>($r58) in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromJarURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.util.zip.ZipFile: void <init>(java.io.File)>
VIRTUAL edge: r48 = virtualinvoke r1.<io.vertx.core.file.impl.FileResolver: java.io.File resolveFile(java.lang.String)>(r47) in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromJarURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <io.vertx.core.file.impl.FileResolver: java.io.File resolveFile(java.lang.String)>
SPECIAL edge: specialinvoke r1.<io.vertx.core.file.impl.FileResolver: void closeQuietly(java.io.Closeable)>($r67) in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromJarURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <io.vertx.core.file.impl.FileResolver: void closeQuietly(java.io.Closeable)>
SPECIAL edge: specialinvoke r1.<io.vertx.core.file.impl.FileResolver: void closeQuietly(java.io.Closeable)>($r68) in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromJarURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <io.vertx.core.file.impl.FileResolver: void closeQuietly(java.io.Closeable)>
SPECIAL edge: specialinvoke $r60.<java.util.zip.ZipFile: void <init>(java.io.File)>(r48) in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromJarURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.util.zip.ZipFile: void <init>(java.io.File)>
VIRTUAL edge: r50 = virtualinvoke $r3.<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence)>(r49) in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromJarURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence)>
SPECIAL edge: specialinvoke $r61.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromJarURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r27 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26) in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromJarURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r51 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromJarURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/") in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromJarURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r6 = virtualinvoke r44.<java.util.zip.ZipFile: java.util.Enumeration entries()>() in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromJarURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.util.zip.ZipFile: java.util.Enumeration entries()>
VIRTUAL edge: r6 = virtualinvoke r44.<java.util.zip.ZipFile: java.util.Enumeration entries()>() in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromJarURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.util.jar.JarFile: java.util.Enumeration entries()>
VIRTUAL edge: r54 = virtualinvoke r44.<java.util.zip.ZipFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)>(r11) in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromJarURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.util.zip.ZipFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)>
VIRTUAL edge: r54 = virtualinvoke r44.<java.util.zip.ZipFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)>(r11) in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromJarURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.util.jar.JarFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)>
INTERFACE edge: $z0 = interfaceinvoke r6.<java.util.Enumeration: boolean hasMoreElements()>() in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromJarURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.util.StringTokenizer: boolean hasMoreElements()>
INTERFACE edge: $r10 = interfaceinvoke r6.<java.util.Enumeration: java.lang.Object nextElement()>() in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromJarURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.util.StringTokenizer: java.lang.Object nextElement()>
VIRTUAL edge: r12 = virtualinvoke r11.<java.util.zip.ZipEntry: java.lang.String getName()>() in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromJarURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.util.zip.ZipEntry: java.lang.String getName()>
VIRTUAL edge: $z1 = virtualinvoke r51.<java.lang.String: boolean isEmpty()>() in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromJarURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.lang.String: boolean isEmpty()>
VIRTUAL edge: $z3 = virtualinvoke r51.<java.lang.String: boolean isEmpty()>() in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromJarURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.lang.String: boolean isEmpty()>
VIRTUAL edge: $i4 = virtualinvoke r51.<java.lang.String: int length()>() in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromJarURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.lang.String: int length()>
SPECIAL edge: specialinvoke $r62.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromJarURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r14 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r51) in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromJarURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8) in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromJarURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r52 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromJarURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $z2 = virtualinvoke r12.<java.lang.String: boolean startsWith(java.lang.String)>($r52) in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromJarURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.lang.String: boolean startsWith(java.lang.String)>
VIRTUAL edge: $r53 = virtualinvoke r12.<java.lang.String: java.lang.String substring(int)>($i4) in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromJarURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.lang.String: java.lang.String substring(int)>
VIRTUAL edge: $z4 = virtualinvoke r12.<java.lang.String: boolean endsWith(java.lang.String)>("/") in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromJarURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.lang.String: boolean endsWith(java.lang.String)>
SPECIAL edge: specialinvoke $r63.<java.io.File: void <init>(java.io.File,java.lang.String)>($r17, $r53) in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromJarURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.io.File: void <init>(java.io.File,java.lang.String)>
VIRTUAL edge: virtualinvoke $r63.<java.io.File: boolean mkdirs()>() in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromJarURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.io.File: boolean mkdirs()>
VIRTUAL edge: $r19 = virtualinvoke $r63.<java.io.File: java.io.File getParentFile()>() in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromJarURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.io.File: java.io.File getParentFile()>
VIRTUAL edge: $r23 = virtualinvoke $r63.<java.io.File: java.nio.file.Path toPath()>() in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromJarURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.io.File: java.nio.file.Path toPath()>
VIRTUAL edge: $r20 = virtualinvoke $r63.<java.io.File: java.nio.file.Path toPath()>() in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromJarURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.io.File: java.nio.file.Path toPath()>
VIRTUAL edge: virtualinvoke $r19.<java.io.File: boolean mkdirs()>() in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromJarURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.io.File: boolean mkdirs()>
VIRTUAL edge: virtualinvoke r54.<java.io.InputStream: void close()>() in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromJarURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.io.ByteArrayInputStream: void close()>
VIRTUAL edge: virtualinvoke r54.<java.io.InputStream: void close()>() in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromJarURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.io.FileInputStream: void close()>
VIRTUAL edge: virtualinvoke r54.<java.io.InputStream: void close()>() in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromJarURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.io.InputStream: void close()>
VIRTUAL edge: virtualinvoke r54.<java.io.InputStream: void close()>() in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromJarURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.io.ByteArrayInputStream: void close()>
VIRTUAL edge: virtualinvoke r54.<java.io.InputStream: void close()>() in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromJarURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.io.FileInputStream: void close()>
VIRTUAL edge: virtualinvoke r54.<java.io.InputStream: void close()>() in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromJarURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.io.InputStream: void close()>
VIRTUAL edge: virtualinvoke r54.<java.io.InputStream: void close()>() in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromJarURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.io.ByteArrayInputStream: void close()>
VIRTUAL edge: virtualinvoke r54.<java.io.InputStream: void close()>() in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromJarURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.io.FileInputStream: void close()>
VIRTUAL edge: virtualinvoke r54.<java.io.InputStream: void close()>() in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromJarURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.io.InputStream: void close()>
VIRTUAL edge: virtualinvoke $r41.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r37) in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromJarURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.lang.Throwable: void addSuppressed(java.lang.Throwable)>
SPECIAL edge: specialinvoke $r64.<io.vertx.core.VertxException: void <init>(java.lang.Throwable)>($r34) in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromJarURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <io.vertx.core.VertxException: void <init>(java.lang.Throwable)>
SPECIAL edge: specialinvoke $r65.<java.io.File: void <init>(java.io.File,java.lang.String)>($r9, r8) in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromJarURL(java.net.URL,java.lang.String,java.lang.ClassLoader)> ==> <java.io.File: void <init>(java.io.File,java.lang.String)>
SPECIAL edge: specialinvoke $r44.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromBundleURL(java.net.URL,boolean)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5) in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromBundleURL(java.net.URL,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.net.URL: java.lang.String getHost()>() in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromBundleURL(java.net.URL,boolean)> ==> <java.net.URL: java.lang.String getHost()>
VIRTUAL edge: $r9 = virtualinvoke r4.<java.net.URL: java.lang.String getFile()>() in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromBundleURL(java.net.URL,boolean)> ==> <java.net.URL: java.lang.String getFile()>
VIRTUAL edge: r40 = virtualinvoke r4.<java.net.URL: java.io.InputStream openStream()>() in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromBundleURL(java.net.URL,boolean)> ==> <java.net.URL: java.io.InputStream openStream()>
VIRTUAL edge: $r21 = virtualinvoke r4.<java.net.URL: java.lang.String getHost()>() in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromBundleURL(java.net.URL,boolean)> ==> <java.net.URL: java.lang.String getHost()>
VIRTUAL edge: $r25 = virtualinvoke r4.<java.net.URL: java.lang.String getFile()>() in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromBundleURL(java.net.URL,boolean)> ==> <java.net.URL: java.lang.String getFile()>
VIRTUAL edge: $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromBundleURL(java.net.URL,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9) in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromBundleURL(java.net.URL,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromBundleURL(java.net.URL,boolean)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r45.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, $r11) in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromBundleURL(java.net.URL,boolean)> ==> <java.io.File: void <init>(java.io.File,java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r45.<java.io.File: java.io.File getParentFile()>() in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromBundleURL(java.net.URL,boolean)> ==> <java.io.File: java.io.File getParentFile()>
VIRTUAL edge: virtualinvoke $r45.<java.io.File: boolean mkdirs()>() in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromBundleURL(java.net.URL,boolean)> ==> <java.io.File: boolean mkdirs()>
VIRTUAL edge: $r14 = virtualinvoke $r45.<java.io.File: java.io.File getParentFile()>() in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromBundleURL(java.net.URL,boolean)> ==> <java.io.File: java.io.File getParentFile()>
VIRTUAL edge: $r28 = virtualinvoke $r45.<java.io.File: java.nio.file.Path toPath()>() in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromBundleURL(java.net.URL,boolean)> ==> <java.io.File: java.nio.file.Path toPath()>
VIRTUAL edge: $r15 = virtualinvoke $r45.<java.io.File: java.nio.file.Path toPath()>() in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromBundleURL(java.net.URL,boolean)> ==> <java.io.File: java.nio.file.Path toPath()>
VIRTUAL edge: virtualinvoke $r12.<java.io.File: boolean mkdirs()>() in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromBundleURL(java.net.URL,boolean)> ==> <java.io.File: boolean mkdirs()>
SPECIAL edge: $r13 = specialinvoke r1.<io.vertx.core.file.impl.FileResolver: java.lang.ClassLoader getClassLoader()>() in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromBundleURL(java.net.URL,boolean)> ==> <io.vertx.core.file.impl.FileResolver: java.lang.ClassLoader getClassLoader()>
SPECIAL edge: $z2 = specialinvoke r1.<io.vertx.core.file.impl.FileResolver: boolean isBundleUrlDirectory(java.net.URL)>(r4) in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromBundleURL(java.net.URL,boolean)> ==> <io.vertx.core.file.impl.FileResolver: boolean isBundleUrlDirectory(java.net.URL)>
VIRTUAL edge: virtualinvoke $r14.<java.io.File: boolean mkdirs()>() in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromBundleURL(java.net.URL,boolean)> ==> <java.io.File: boolean mkdirs()>
VIRTUAL edge: virtualinvoke r40.<java.io.InputStream: void close()>() in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromBundleURL(java.net.URL,boolean)> ==> <java.io.ByteArrayInputStream: void close()>
VIRTUAL edge: virtualinvoke r40.<java.io.InputStream: void close()>() in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromBundleURL(java.net.URL,boolean)> ==> <java.io.FileInputStream: void close()>
VIRTUAL edge: virtualinvoke r40.<java.io.InputStream: void close()>() in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromBundleURL(java.net.URL,boolean)> ==> <java.io.InputStream: void close()>
VIRTUAL edge: virtualinvoke r40.<java.io.InputStream: void close()>() in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromBundleURL(java.net.URL,boolean)> ==> <java.io.ByteArrayInputStream: void close()>
VIRTUAL edge: virtualinvoke r40.<java.io.InputStream: void close()>() in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromBundleURL(java.net.URL,boolean)> ==> <java.io.FileInputStream: void close()>
VIRTUAL edge: virtualinvoke r40.<java.io.InputStream: void close()>() in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromBundleURL(java.net.URL,boolean)> ==> <java.io.InputStream: void close()>
VIRTUAL edge: virtualinvoke r40.<java.io.InputStream: void close()>() in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromBundleURL(java.net.URL,boolean)> ==> <java.io.ByteArrayInputStream: void close()>
VIRTUAL edge: virtualinvoke r40.<java.io.InputStream: void close()>() in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromBundleURL(java.net.URL,boolean)> ==> <java.io.FileInputStream: void close()>
VIRTUAL edge: virtualinvoke r40.<java.io.InputStream: void close()>() in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromBundleURL(java.net.URL,boolean)> ==> <java.io.InputStream: void close()>
VIRTUAL edge: virtualinvoke $r37.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r33) in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromBundleURL(java.net.URL,boolean)> ==> <java.lang.Throwable: void addSuppressed(java.lang.Throwable)>
SPECIAL edge: specialinvoke $r46.<io.vertx.core.VertxException: void <init>(java.lang.Throwable)>($r30) in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromBundleURL(java.net.URL,boolean)> ==> <io.vertx.core.VertxException: void <init>(java.lang.Throwable)>
SPECIAL edge: specialinvoke $r47.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromBundleURL(java.net.URL,boolean)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r22 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21) in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromBundleURL(java.net.URL,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23) in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromBundleURL(java.net.URL,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25) in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromBundleURL(java.net.URL,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromBundleURL(java.net.URL,boolean)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r48.<java.io.File: void <init>(java.io.File,java.lang.String)>($r20, $r27) in <io.vertx.core.file.impl.FileResolver: java.io.File unpackFromBundleURL(java.net.URL,boolean)> ==> <java.io.File: void <init>(java.io.File,java.lang.String)>
VIRTUAL edge: i0 = virtualinvoke r0.<java.lang.String: int length()>() in <io.vertx.core.net.impl.URIDecoder: java.lang.String decodeURIComponent(java.lang.String,boolean)> ==> <java.lang.String: int length()>
VIRTUAL edge: c15 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i14) in <io.vertx.core.net.impl.URIDecoder: java.lang.String decodeURIComponent(java.lang.String,boolean)> ==> <java.lang.String: char charAt(int)>
VIRTUAL edge: r24 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r1) in <io.vertx.core.net.impl.URIDecoder: java.lang.String decodeURIComponent(java.lang.String,boolean)> ==> <java.lang.String: byte[] getBytes(java.nio.charset.Charset)>
VIRTUAL edge: c17 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i14) in <io.vertx.core.net.impl.URIDecoder: java.lang.String decodeURIComponent(java.lang.String,boolean)> ==> <java.lang.String: char charAt(int)>
VIRTUAL edge: c19 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i18) in <io.vertx.core.net.impl.URIDecoder: java.lang.String decodeURIComponent(java.lang.String,boolean)> ==> <java.lang.String: char charAt(int)>
VIRTUAL edge: $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i14) in <io.vertx.core.net.impl.URIDecoder: java.lang.String decodeURIComponent(java.lang.String,boolean)> ==> <java.lang.String: char charAt(int)>
VIRTUAL edge: $c6 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i5) in <io.vertx.core.net.impl.URIDecoder: java.lang.String decodeURIComponent(java.lang.String,boolean)> ==> <java.lang.String: char charAt(int)>
VIRTUAL edge: $c7 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i14) in <io.vertx.core.net.impl.URIDecoder: java.lang.String decodeURIComponent(java.lang.String,boolean)> ==> <java.lang.String: char charAt(int)>
SPECIAL edge: specialinvoke $r20.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.net.impl.URIDecoder: java.lang.String decodeURIComponent(java.lang.String,boolean)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unterminated escape sequence at end of string: ") in <io.vertx.core.net.impl.URIDecoder: java.lang.String decodeURIComponent(java.lang.String,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0) in <io.vertx.core.net.impl.URIDecoder: java.lang.String decodeURIComponent(java.lang.String,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.net.impl.URIDecoder: java.lang.String decodeURIComponent(java.lang.String,boolean)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r23) in <io.vertx.core.net.impl.URIDecoder: java.lang.String decodeURIComponent(java.lang.String,boolean)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r15.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.net.impl.URIDecoder: java.lang.String decodeURIComponent(java.lang.String,boolean)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("partial escape sequence at end of string: ") in <io.vertx.core.net.impl.URIDecoder: java.lang.String decodeURIComponent(java.lang.String,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0) in <io.vertx.core.net.impl.URIDecoder: java.lang.String decodeURIComponent(java.lang.String,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.net.impl.URIDecoder: java.lang.String decodeURIComponent(java.lang.String,boolean)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r18) in <io.vertx.core.net.impl.URIDecoder: java.lang.String decodeURIComponent(java.lang.String,boolean)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.net.impl.URIDecoder: java.lang.String decodeURIComponent(java.lang.String,boolean)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid escape sequence `%") in <io.vertx.core.net.impl.URIDecoder: java.lang.String decodeURIComponent(java.lang.String,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c6) in <io.vertx.core.net.impl.URIDecoder: java.lang.String decodeURIComponent(java.lang.String,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c7) in <io.vertx.core.net.impl.URIDecoder: java.lang.String decodeURIComponent(java.lang.String,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' at index ") in <io.vertx.core.net.impl.URIDecoder: java.lang.String decodeURIComponent(java.lang.String,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8) in <io.vertx.core.net.impl.URIDecoder: java.lang.String decodeURIComponent(java.lang.String,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" of: ") in <io.vertx.core.net.impl.URIDecoder: java.lang.String decodeURIComponent(java.lang.String,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0) in <io.vertx.core.net.impl.URIDecoder: java.lang.String decodeURIComponent(java.lang.String,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.net.impl.URIDecoder: java.lang.String decodeURIComponent(java.lang.String,boolean)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13) in <io.vertx.core.net.impl.URIDecoder: java.lang.String decodeURIComponent(java.lang.String,boolean)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r2.<java.lang.String: void <init>(byte[],int,int,java.nio.charset.Charset)>(r24, 0, i16, $r3) in <io.vertx.core.net.impl.URIDecoder: java.lang.String decodeURIComponent(java.lang.String,boolean)> ==> <java.lang.String: void <init>(byte[],int,int,java.nio.charset.Charset)>
INTERFACE edge: $r3 = interfaceinvoke $r1.<java.util.concurrent.ConcurrentMap: java.lang.Object remove(java.lang.Object)>($r2) in <io.vertx.core.impl.VertxImpl: boolean cancelTimer(long)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r5.<io.vertx.core.impl.ContextImpl: void removeCloseHook(io.vertx.core.Closeable)>(r4) in <io.vertx.core.impl.VertxImpl: boolean cancelTimer(long)> ==> <io.vertx.core.impl.ContextImpl: void removeCloseHook(io.vertx.core.Closeable)>
VIRTUAL edge: virtualinvoke $r5.<io.vertx.core.impl.ContextImpl: void removeCloseHook(io.vertx.core.Closeable)>(r4) in <io.vertx.core.impl.VertxImpl: boolean cancelTimer(long)> ==> <io.vertx.core.impl.EventLoopContext: void removeCloseHook(io.vertx.core.Closeable)>
VIRTUAL edge: $z0 = virtualinvoke r4.<io.vertx.core.impl.VertxImpl$InternalTimerHandler: boolean cancel()>() in <io.vertx.core.impl.VertxImpl: boolean cancelTimer(long)> ==> <io.vertx.core.impl.VertxImpl$InternalTimerHandler: boolean cancel()>
CLINIT edge: $r3 = staticinvoke <io.vertx.core.impl.VertxImpl: io.vertx.core.spi.metrics.VertxMetrics access$000(io.vertx.core.impl.VertxImpl)>($r2) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: boolean cancel()> ==> <io.vertx.core.impl.VertxImpl: void <clinit>()>
STATIC edge: $r6 = staticinvoke <io.vertx.core.impl.VertxImpl: io.vertx.core.spi.metrics.VertxMetrics access$000(io.vertx.core.impl.VertxImpl)>($r5) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: boolean cancel()> ==> <io.vertx.core.impl.VertxImpl: io.vertx.core.spi.metrics.VertxMetrics access$000(io.vertx.core.impl.VertxImpl)>
STATIC edge: $r3 = staticinvoke <io.vertx.core.impl.VertxImpl: io.vertx.core.spi.metrics.VertxMetrics access$000(io.vertx.core.impl.VertxImpl)>($r2) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: boolean cancel()> ==> <io.vertx.core.impl.VertxImpl: io.vertx.core.spi.metrics.VertxMetrics access$000(io.vertx.core.impl.VertxImpl)>
SPECIAL edge: z0 = specialinvoke r0.<io.vertx.core.eventbus.impl.EventBusImpl: boolean removeLocalRegistration(io.vertx.core.eventbus.impl.HandlerHolder)>(r1) in <io.vertx.core.eventbus.impl.EventBusImpl: void removeRegistration(io.vertx.core.eventbus.impl.HandlerHolder,io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.EventBusImpl: boolean removeLocalRegistration(io.vertx.core.eventbus.impl.HandlerHolder)>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.eventbus.impl.EventBusImpl: void removeRegistration(io.vertx.core.eventbus.impl.HandlerHolder,java.lang.String,io.vertx.core.Handler)>($r6, $r3, r4) in <io.vertx.core.eventbus.impl.EventBusImpl: void removeRegistration(io.vertx.core.eventbus.impl.HandlerHolder,io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.EventBusImpl: void removeRegistration(io.vertx.core.eventbus.impl.HandlerHolder,java.lang.String,io.vertx.core.Handler)>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.eventbus.impl.EventBusImpl: void removeRegistration(io.vertx.core.eventbus.impl.HandlerHolder,java.lang.String,io.vertx.core.Handler)>($r6, $r3, r4) in <io.vertx.core.eventbus.impl.EventBusImpl: void removeRegistration(io.vertx.core.eventbus.impl.HandlerHolder,io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void removeRegistration(io.vertx.core.eventbus.impl.HandlerHolder,java.lang.String,io.vertx.core.Handler)>
VIRTUAL edge: $r2 = virtualinvoke r1.<io.vertx.core.eventbus.impl.HandlerHolder: io.vertx.core.eventbus.impl.HandlerRegistration getHandler()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void removeRegistration(io.vertx.core.eventbus.impl.HandlerHolder,io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.HandlerHolder: io.vertx.core.eventbus.impl.HandlerRegistration getHandler()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<io.vertx.core.eventbus.impl.HandlerRegistration: java.lang.String address()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void removeRegistration(io.vertx.core.eventbus.impl.HandlerHolder,io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: java.lang.String address()>
STATIC edge: $r5 = staticinvoke <io.vertx.core.eventbus.impl.EventBusImpl$lambda_removeLocalRegistration_2__78: java.util.function.BiFunction bootstrap$(io.vertx.core.eventbus.impl.HandlerHolder)>(r0) in <io.vertx.core.eventbus.impl.EventBusImpl: boolean removeLocalRegistration(io.vertx.core.eventbus.impl.HandlerHolder)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_removeLocalRegistration_2__78: java.util.function.BiFunction bootstrap$(io.vertx.core.eventbus.impl.HandlerHolder)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Vertx: void runOnContext(io.vertx.core.Handler)>($r3) in <io.vertx.core.eventbus.impl.HandlerRegistration: void callCompletionHandlerAsync(io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl: void runOnContext(io.vertx.core.Handler)>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.eventbus.impl.HandlerRegistration$lambda_callCompletionHandlerAsync_3__65: void <init>(io.vertx.core.Handler)>($r0) in <io.vertx.core.eventbus.impl.HandlerRegistration$lambda_callCompletionHandlerAsync_3__65: io.vertx.core.Handler bootstrap$(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration$lambda_callCompletionHandlerAsync_3__65: void <init>(io.vertx.core.Handler)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.eventbus.impl.HandlerRegistration$lambda_doUnregister_2__55: void <init>(io.vertx.core.Handler,io.vertx.core.Handler)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean endsWith(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.ClassLoader: void <init>(java.lang.ClassLoader)>(r1) in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <java.lang.ClassLoader: void <init>(java.lang.ClassLoader)>
VIRTUAL edge: r3 = virtualinvoke r0.<io.vertx.core.impl.verticle.CompilingClassLoader: java.net.URL getResource(java.lang.String)>(r2) in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>
VIRTUAL edge: $r18 = virtualinvoke r0.<io.vertx.core.impl.verticle.CompilingClassLoader: java.lang.String resolveMainClassName()>() in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <io.vertx.core.impl.verticle.CompilingClassLoader: java.lang.String resolveMainClassName()>
SPECIAL edge: specialinvoke $r59.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r48 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Resource not found: ") in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r60.<java.lang.RuntimeException: void <init>(java.lang.String)>($r50) in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke r3.<java.net.URL: java.lang.String getFile()>() in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <java.net.URL: java.lang.String getFile()>
SPECIAL edge: specialinvoke $r61.<java.io.File: void <init>(java.lang.String)>($r6) in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <java.io.File: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r61.<java.io.File: boolean canRead()>() in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <java.io.File: boolean canRead()>
VIRTUAL edge: $r39 = virtualinvoke $r61.<java.io.File: java.lang.String getAbsolutePath()>() in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <java.io.File: java.lang.String getAbsolutePath()>
SPECIAL edge: specialinvoke $r62.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r38 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File not found: ") in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r40 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r39) in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" current dir is: ") in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r63.<java.io.File: void <init>(java.lang.String)>(".") in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <java.io.File: void <init>(java.lang.String)>
VIRTUAL edge: $r43 = virtualinvoke $r63.<java.io.File: java.lang.String getAbsolutePath()>() in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <java.io.File: java.lang.String getAbsolutePath()>
VIRTUAL edge: $r44 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r43) in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r64.<java.lang.RuntimeException: void <init>(java.lang.String)>($r45) in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r65.<io.vertx.core.impl.verticle.JavaSourceContext: void <init>(java.io.File)>($r61) in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <io.vertx.core.impl.verticle.JavaSourceContext: void <init>(java.io.File)>
SPECIAL edge: specialinvoke $r66.<javax.tools.DiagnosticCollector: void <init>()>() in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <javax.tools.DiagnosticCollector: void <init>()>
VIRTUAL edge: $r30 = virtualinvoke $r66.<javax.tools.DiagnosticCollector: java.util.List getDiagnostics()>() in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <javax.tools.DiagnosticCollector: java.util.List getDiagnostics()>
VIRTUAL edge: $r26 = virtualinvoke $r66.<javax.tools.DiagnosticCollector: java.util.List getDiagnostics()>() in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <javax.tools.DiagnosticCollector: java.util.List getDiagnostics()>
SPECIAL edge: specialinvoke $r67.<java.lang.RuntimeException: void <init>(java.lang.String)>("Unable to detect java compiler, make sure you\'re using a JDK not a JRE!") in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
INTERFACE edge: r11 = interfaceinvoke r10.<javax.tools.JavaCompiler: javax.tools.StandardJavaFileManager getStandardFileManager(javax.tools.DiagnosticListener,java.util.Locale,java.nio.charset.Charset)>(null, null, null) in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <javax.tools.JavaCompiler: javax.tools.StandardJavaFileManager getStandardFileManager(javax.tools.DiagnosticListener,java.util.Locale,java.nio.charset.Charset)>
INTERFACE edge: r24 = interfaceinvoke r10.<javax.tools.JavaCompiler: javax.tools.JavaCompiler$CompilationTask getTask(java.io.Writer,javax.tools.JavaFileManager,javax.tools.DiagnosticListener,java.lang.Iterable,java.lang.Iterable,java.lang.Iterable)>(null, $r74, $r75, $r22, null, $r23) in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <javax.tools.JavaCompiler: javax.tools.JavaCompiler$CompilationTask getTask(java.io.Writer,javax.tools.JavaFileManager,javax.tools.DiagnosticListener,java.lang.Iterable,java.lang.Iterable,java.lang.Iterable)>
VIRTUAL edge: $r14 = virtualinvoke $r12.<io.vertx.core.impl.verticle.JavaSourceContext: java.io.File getSourceRoot()>() in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <io.vertx.core.impl.verticle.JavaSourceContext: java.io.File getSourceRoot()>
INTERFACE edge: interfaceinvoke r11.<javax.tools.StandardJavaFileManager: void setLocation(javax.tools.JavaFileManager$Location,java.lang.Iterable)>($r71, $r15) in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <javax.tools.StandardJavaFileManager: void setLocation(javax.tools.JavaFileManager$Location,java.lang.Iterable)>
INTERFACE edge: r20 = interfaceinvoke r11.<javax.tools.StandardJavaFileManager: javax.tools.JavaFileObject getJavaFileForInput(javax.tools.JavaFileManager$Location,java.lang.String,javax.tools.JavaFileObject$Kind)>($r73, $r18, $r19) in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <javax.tools.StandardJavaFileManager: javax.tools.JavaFileObject getJavaFileForInput(javax.tools.JavaFileManager$Location,java.lang.String,javax.tools.JavaFileObject$Kind)>
SPECIAL edge: specialinvoke $r68.<io.vertx.core.impl.verticle.MemoryFileManager: void <init>(java.lang.ClassLoader,javax.tools.JavaFileManager)>(r1, $r72) in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <io.vertx.core.impl.verticle.MemoryFileManager: void <init>(java.lang.ClassLoader,javax.tools.JavaFileManager)>
INTERFACE edge: $r25 = interfaceinvoke r24.<javax.tools.JavaCompiler$CompilationTask: java.lang.Boolean call()>() in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <javax.tools.JavaCompiler$CompilationTask: java.lang.Boolean call()>
VIRTUAL edge: z1 = virtualinvoke $r25.<java.lang.Boolean: boolean booleanValue()>() in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <java.lang.Boolean: boolean booleanValue()>
INTERFACE edge: r54 = interfaceinvoke $r30.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <java.util.AbstractList: java.util.Iterator iterator()>
INTERFACE edge: r54 = interfaceinvoke $r30.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r54 = interfaceinvoke $r30.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
INTERFACE edge: r54 = interfaceinvoke $r30.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z3 = interfaceinvoke r54.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: boolean hasNext()>
INTERFACE edge: $z3 = interfaceinvoke r54.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <io.vertx.core.json.JsonArray$Iter: boolean hasNext()>
INTERFACE edge: $z3 = interfaceinvoke r54.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <io.vertx.core.json.JsonObject$Iter: boolean hasNext()>
INTERFACE edge: $z3 = interfaceinvoke r54.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: boolean hasNext()>
INTERFACE edge: $z3 = interfaceinvoke r54.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <java.util.Scanner: boolean hasNext()>
INTERFACE edge: $z3 = interfaceinvoke r54.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: boolean hasNext()>
INTERFACE edge: $z3 = interfaceinvoke r54.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: boolean hasNext()>
INTERFACE edge: $r31 = interfaceinvoke r54.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object next()>
INTERFACE edge: $r31 = interfaceinvoke r54.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <io.vertx.core.json.JsonArray$Iter: java.lang.Object next()>
INTERFACE edge: $r31 = interfaceinvoke r54.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <io.vertx.core.json.JsonObject$Iter: java.lang.Object next()>
INTERFACE edge: $r31 = interfaceinvoke r54.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: java.lang.Object next()>
INTERFACE edge: $r31 = interfaceinvoke r54.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <java.util.Scanner: java.lang.Object next()>
INTERFACE edge: $r31 = interfaceinvoke r54.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: java.lang.Object next()>
INTERFACE edge: $r31 = interfaceinvoke r54.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: java.lang.Object next()>
INTERFACE edge: r32 = interfaceinvoke r55.<javax.tools.Diagnostic: java.lang.String getCode()>() in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <javax.tools.Diagnostic: java.lang.String getCode()>
VIRTUAL edge: $z4 = virtualinvoke r32.<java.lang.String: boolean startsWith(java.lang.String)>("compiler.warn.annotation.method.not.found") in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <java.lang.String: boolean startsWith(java.lang.String)>
VIRTUAL edge: $z5 = virtualinvoke $r34.<java.lang.String: boolean equals(java.lang.Object)>(r32) in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r33.<io.vertx.core.logging.Logger: void info(java.lang.Object)>(r55) in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <io.vertx.core.logging.Logger: void info(java.lang.Object)>
INTERFACE edge: r56 = interfaceinvoke $r26.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <java.util.AbstractList: java.util.Iterator iterator()>
INTERFACE edge: r56 = interfaceinvoke $r26.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r56 = interfaceinvoke $r26.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
INTERFACE edge: r56 = interfaceinvoke $r26.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z2 = interfaceinvoke r56.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: boolean hasNext()>
INTERFACE edge: $z2 = interfaceinvoke r56.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <io.vertx.core.json.JsonArray$Iter: boolean hasNext()>
INTERFACE edge: $z2 = interfaceinvoke r56.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <io.vertx.core.json.JsonObject$Iter: boolean hasNext()>
INTERFACE edge: $z2 = interfaceinvoke r56.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: boolean hasNext()>
INTERFACE edge: $z2 = interfaceinvoke r56.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <java.util.Scanner: boolean hasNext()>
INTERFACE edge: $z2 = interfaceinvoke r56.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: boolean hasNext()>
INTERFACE edge: $z2 = interfaceinvoke r56.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: boolean hasNext()>
INTERFACE edge: $r28 = interfaceinvoke r56.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object next()>
INTERFACE edge: $r28 = interfaceinvoke r56.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <io.vertx.core.json.JsonArray$Iter: java.lang.Object next()>
INTERFACE edge: $r28 = interfaceinvoke r56.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <io.vertx.core.json.JsonObject$Iter: java.lang.Object next()>
INTERFACE edge: $r28 = interfaceinvoke r56.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: java.lang.Object next()>
INTERFACE edge: $r28 = interfaceinvoke r56.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <java.util.Scanner: java.lang.Object next()>
INTERFACE edge: $r28 = interfaceinvoke r56.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: java.lang.Object next()>
INTERFACE edge: $r28 = interfaceinvoke r56.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: java.lang.Object next()>
VIRTUAL edge: virtualinvoke $r29.<io.vertx.core.logging.Logger: void warn(java.lang.Object)>(r57) in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <io.vertx.core.logging.Logger: void warn(java.lang.Object)>
SPECIAL edge: specialinvoke $r69.<java.lang.RuntimeException: void <init>(java.lang.String)>("Compilation failed!") in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r70.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Compilation failed", $r51) in <io.vertx.core.impl.verticle.CompilingClassLoader: void <init>(java.lang.ClassLoader,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>
STATIC edge: r2 = staticinvoke <io.vertx.core.impl.verticle.JavaSourceContext: java.lang.String parsePackage(java.io.File)>(r1) in <io.vertx.core.impl.verticle.JavaSourceContext: void <init>(java.io.File)> ==> <io.vertx.core.impl.verticle.JavaSourceContext: java.lang.String parsePackage(java.io.File)>
CLINIT edge: $r0 = new java.lang.String in <io.vertx.core.impl.verticle.JavaSourceContext: java.lang.String parsePackage(java.io.File)> ==> <java.lang.String: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.nio.file.Files: byte[] readAllBytes(java.nio.file.Path)>($r2) in <io.vertx.core.impl.verticle.JavaSourceContext: java.lang.String parsePackage(java.io.File)> ==> <java.nio.file.Files: byte[] readAllBytes(java.nio.file.Path)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<io.vertx.core.impl.verticle.JavaSourceContext: java.lang.String getClassName()>() in <io.vertx.core.impl.verticle.CompilingClassLoader: java.lang.String resolveMainClassName()> ==> <io.vertx.core.impl.verticle.JavaSourceContext: java.lang.String getClassName()>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>()> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.impl.DeploymentManager$DeploymentImpl: void <init>(io.vertx.core.impl.DeploymentManager,io.vertx.core.impl.Deployment,java.lang.String,java.lang.String,io.vertx.core.DeploymentOptions)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.util.concurrent.CopyOnWriteArrayList: void <init>()>() in <io.vertx.core.impl.DeploymentManager$DeploymentImpl: void <init>(io.vertx.core.impl.DeploymentManager,io.vertx.core.impl.Deployment,java.lang.String,java.lang.String,io.vertx.core.DeploymentOptions)> ==> <java.util.concurrent.CopyOnWriteArrayList: void <init>()>
SPECIAL edge: specialinvoke $r3.<io.vertx.core.impl.ConcurrentHashSet: void <init>()>() in <io.vertx.core.impl.DeploymentManager$DeploymentImpl: void <init>(io.vertx.core.impl.DeploymentManager,io.vertx.core.impl.Deployment,java.lang.String,java.lang.String,io.vertx.core.DeploymentOptions)> ==> <io.vertx.core.impl.ConcurrentHashSet: void <init>()>
SPECIAL edge: specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("poolSize must be > 0") in <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.WorkerExecutorImpl createSharedWorkerExecutor(java.lang.String,int,long,java.util.concurrent.TimeUnit)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("maxExecuteTime must be > 0") in <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.WorkerExecutorImpl createSharedWorkerExecutor(java.lang.String,int,long,java.util.concurrent.TimeUnit)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.WorkerExecutorImpl createSharedWorkerExecutor(java.lang.String,int,long,java.util.concurrent.TimeUnit)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.WorkerExecutorImpl createSharedWorkerExecutor(java.lang.String,int,long,java.util.concurrent.TimeUnit)> ==> <java.util.IdentityHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.WorkerExecutorImpl createSharedWorkerExecutor(java.lang.String,int,long,java.util.concurrent.TimeUnit)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.WorkerExecutorImpl createSharedWorkerExecutor(java.lang.String,int,long,java.util.concurrent.TimeUnit)> ==> <java.util.EnumMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.WorkerExecutorImpl createSharedWorkerExecutor(java.lang.String,int,long,java.util.concurrent.TimeUnit)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.WorkerExecutorImpl createSharedWorkerExecutor(java.lang.String,int,long,java.util.concurrent.TimeUnit)> ==> <java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.WorkerExecutorImpl createSharedWorkerExecutor(java.lang.String,int,long,java.util.concurrent.TimeUnit)> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.WorkerExecutorImpl createSharedWorkerExecutor(java.lang.String,int,long,java.util.concurrent.TimeUnit)> ==> <java.util.TreeMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.WorkerExecutorImpl createSharedWorkerExecutor(java.lang.String,int,long,java.util.concurrent.TimeUnit)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.WorkerExecutorImpl createSharedWorkerExecutor(java.lang.String,int,long,java.util.concurrent.TimeUnit)> ==> <java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>
SPECIAL edge: specialinvoke $r6.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.WorkerExecutorImpl createSharedWorkerExecutor(java.lang.String,int,long,java.util.concurrent.TimeUnit)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.WorkerExecutorImpl createSharedWorkerExecutor(java.lang.String,int,long,java.util.concurrent.TimeUnit)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-") in <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.WorkerExecutorImpl createSharedWorkerExecutor(java.lang.String,int,long,java.util.concurrent.TimeUnit)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.WorkerExecutorImpl createSharedWorkerExecutor(java.lang.String,int,long,java.util.concurrent.TimeUnit)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r5.<io.vertx.core.impl.VertxThreadFactory: void <init>(java.lang.String,io.vertx.core.impl.BlockedThreadChecker,boolean,long,java.util.concurrent.TimeUnit)>($r9, $r11, 1, l1, r10) in <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.WorkerExecutorImpl createSharedWorkerExecutor(java.lang.String,int,long,java.util.concurrent.TimeUnit)> ==> <io.vertx.core.impl.VertxThreadFactory: void <init>(java.lang.String,io.vertx.core.impl.BlockedThreadChecker,boolean,long,java.util.concurrent.TimeUnit)>
INTERFACE edge: $r21 = interfaceinvoke $r16.<io.vertx.core.spi.metrics.VertxMetrics: io.vertx.core.spi.metrics.PoolMetrics createPoolMetrics(java.lang.String,java.lang.String,int)>("worker", r1, i0) in <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.WorkerExecutorImpl createSharedWorkerExecutor(java.lang.String,int,long,java.util.concurrent.TimeUnit)> ==> <io.vertx.core.spi.metrics.VertxMetrics: io.vertx.core.spi.metrics.PoolMetrics createPoolMetrics(java.lang.String,java.lang.String,int)>
SPECIAL edge: specialinvoke $r13.<io.vertx.core.impl.VertxImpl$SharedWorkerPool: void <init>(io.vertx.core.impl.VertxImpl,java.lang.String,java.util.concurrent.ExecutorService,io.vertx.core.spi.metrics.PoolMetrics)>(r0, r1, r20, $r21) in <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.WorkerExecutorImpl createSharedWorkerExecutor(java.lang.String,int,long,java.util.concurrent.TimeUnit)> ==> <io.vertx.core.impl.VertxImpl$SharedWorkerPool: void <init>(io.vertx.core.impl.VertxImpl,java.lang.String,java.util.concurrent.ExecutorService,io.vertx.core.spi.metrics.PoolMetrics)>
INTERFACE edge: interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r13) in <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.WorkerExecutorImpl createSharedWorkerExecutor(java.lang.String,int,long,java.util.concurrent.TimeUnit)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r13) in <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.WorkerExecutorImpl createSharedWorkerExecutor(java.lang.String,int,long,java.util.concurrent.TimeUnit)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r13) in <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.WorkerExecutorImpl createSharedWorkerExecutor(java.lang.String,int,long,java.util.concurrent.TimeUnit)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r13) in <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.WorkerExecutorImpl createSharedWorkerExecutor(java.lang.String,int,long,java.util.concurrent.TimeUnit)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r13) in <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.WorkerExecutorImpl createSharedWorkerExecutor(java.lang.String,int,long,java.util.concurrent.TimeUnit)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r13) in <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.WorkerExecutorImpl createSharedWorkerExecutor(java.lang.String,int,long,java.util.concurrent.TimeUnit)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r13) in <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.WorkerExecutorImpl createSharedWorkerExecutor(java.lang.String,int,long,java.util.concurrent.TimeUnit)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r13) in <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.WorkerExecutorImpl createSharedWorkerExecutor(java.lang.String,int,long,java.util.concurrent.TimeUnit)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r13) in <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.WorkerExecutorImpl createSharedWorkerExecutor(java.lang.String,int,long,java.util.concurrent.TimeUnit)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r13) in <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.WorkerExecutorImpl createSharedWorkerExecutor(java.lang.String,int,long,java.util.concurrent.TimeUnit)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: r23 = virtualinvoke r0.<io.vertx.core.impl.VertxImpl: io.vertx.core.impl.ContextImpl getOrCreateContext()>() in <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.WorkerExecutorImpl createSharedWorkerExecutor(java.lang.String,int,long,java.util.concurrent.TimeUnit)> ==> <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.ContextImpl getOrCreateContext()>
SPECIAL edge: specialinvoke $r4.<io.vertx.core.impl.WorkerExecutorImpl: void <init>(io.vertx.core.Context,io.vertx.core.impl.VertxImpl$SharedWorkerPool)>(r23, r19) in <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.WorkerExecutorImpl createSharedWorkerExecutor(java.lang.String,int,long,java.util.concurrent.TimeUnit)> ==> <io.vertx.core.impl.WorkerExecutorImpl: void <init>(io.vertx.core.Context,io.vertx.core.impl.VertxImpl$SharedWorkerPool)>
VIRTUAL edge: virtualinvoke r23.<io.vertx.core.impl.ContextImpl: void addCloseHook(io.vertx.core.Closeable)>($r4) in <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.WorkerExecutorImpl createSharedWorkerExecutor(java.lang.String,int,long,java.util.concurrent.TimeUnit)> ==> <io.vertx.core.impl.ContextImpl: void addCloseHook(io.vertx.core.Closeable)>
VIRTUAL edge: virtualinvoke r23.<io.vertx.core.impl.ContextImpl: void addCloseHook(io.vertx.core.Closeable)>($r4) in <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.WorkerExecutorImpl createSharedWorkerExecutor(java.lang.String,int,long,java.util.concurrent.TimeUnit)> ==> <io.vertx.core.impl.EventLoopContext: void addCloseHook(io.vertx.core.Closeable)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.impl.WorkerContext: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.impl.WorkerPool,io.vertx.core.impl.WorkerPool,java.lang.String,io.vertx.core.json.JsonObject,java.lang.ClassLoader)>(r1, r2, r3, r4, r5, r6) in <io.vertx.core.impl.MultiThreadedWorkerContext: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.impl.WorkerPool,io.vertx.core.impl.WorkerPool,java.lang.String,io.vertx.core.json.JsonObject,java.lang.ClassLoader)> ==> <io.vertx.core.impl.WorkerContext: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.impl.WorkerPool,io.vertx.core.impl.WorkerPool,java.lang.String,io.vertx.core.json.JsonObject,java.lang.ClassLoader)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.impl.ContextImpl: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.impl.WorkerPool,io.vertx.core.impl.WorkerPool,java.lang.String,io.vertx.core.json.JsonObject,java.lang.ClassLoader)>(r1, r2, r3, r4, r5, r6) in <io.vertx.core.impl.WorkerContext: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.impl.WorkerPool,io.vertx.core.impl.WorkerPool,java.lang.String,io.vertx.core.json.JsonObject,java.lang.ClassLoader)> ==> <io.vertx.core.impl.ContextImpl: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.impl.WorkerPool,io.vertx.core.impl.WorkerPool,java.lang.String,io.vertx.core.json.JsonObject,java.lang.ClassLoader)>
SPECIAL edge: specialinvoke $r4.<java.util.HashSet: void <init>()>() in <io.vertx.core.impl.CloseHooks: void add(io.vertx.core.Closeable)> ==> <java.util.HashSet: void <init>()>
INTERFACE edge: interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>(r2) in <io.vertx.core.impl.CloseHooks: void add(io.vertx.core.Closeable)> ==> <java.util.HashSet: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>(r2) in <io.vertx.core.impl.CloseHooks: void add(io.vertx.core.Closeable)> ==> <java.util.AbstractCollection: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>(r2) in <io.vertx.core.impl.CloseHooks: void add(io.vertx.core.Closeable)> ==> <io.vertx.core.impl.ConcurrentHashSet: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>(r2) in <io.vertx.core.impl.CloseHooks: void add(io.vertx.core.Closeable)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$1: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>(r2) in <io.vertx.core.impl.CloseHooks: void add(io.vertx.core.Closeable)> ==> <java.util.TreeSet: boolean add(java.lang.Object)>
CLINIT edge: $r2 = <io.vertx.core.impl.ConcurrentHashSet: java.lang.Object OBJ> in <io.vertx.core.impl.ConcurrentHashSet: boolean add(java.lang.Object)> ==> <io.vertx.core.impl.ConcurrentHashSet: void <clinit>()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.VertxException: void <init>(java.lang.Throwable)>(r1) in <io.vertx.core.file.FileSystemException: void <init>(java.lang.Throwable)> ==> <io.vertx.core.VertxException: void <init>(java.lang.Throwable)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.VertxException: void <init>(java.lang.String)>(r1) in <io.vertx.core.file.FileSystemException: void <init>(java.lang.String)> ==> <io.vertx.core.VertxException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.file.impl.FileSystemImpl$15$1: void <init>(io.vertx.core.file.impl.FileSystemImpl$15)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.nio.file.SimpleFileVisitor: void <init>()>() in <io.vertx.core.file.impl.FileSystemImpl$2$1: void <init>(io.vertx.core.file.impl.FileSystemImpl$2,java.nio.file.Path,java.nio.file.Path)> ==> <java.nio.file.SimpleFileVisitor: void <init>()>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.file.impl.AsyncFileImpl: void <init>(io.vertx.core.impl.VertxInternal,java.lang.String,io.vertx.core.file.OpenOptions,io.vertx.core.impl.ContextInternal)>($r5, r2, r3, r4) in <io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.AsyncFile doOpen(java.lang.String,io.vertx.core.file.OpenOptions,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.file.impl.AsyncFileImpl: void <init>(io.vertx.core.impl.VertxInternal,java.lang.String,io.vertx.core.file.OpenOptions,io.vertx.core.impl.ContextInternal)>
CLINIT edge: $r4 = newarray (java.lang.String)[0] in <io.vertx.core.file.impl.AsyncFileImpl: void <init>(io.vertx.core.impl.VertxInternal,java.lang.String,io.vertx.core.file.OpenOptions,io.vertx.core.impl.ContextInternal)> ==> <java.lang.String: void <clinit>()>
STATIC edge: $r15 = staticinvoke <io.vertx.core.file.impl.AsyncFileImpl$lambda_new_0__96: io.vertx.core.Handler bootstrap$(io.vertx.core.file.impl.AsyncFileImpl)>(r0) in <io.vertx.core.file.impl.AsyncFileImpl: void <init>(io.vertx.core.impl.VertxInternal,java.lang.String,io.vertx.core.file.OpenOptions,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.file.impl.AsyncFileImpl$lambda_new_0__96: io.vertx.core.Handler bootstrap$(io.vertx.core.file.impl.AsyncFileImpl)>
STATIC edge: $r11 = staticinvoke <java.nio.channels.AsynchronousFileChannel: java.nio.channels.AsynchronousFileChannel open(java.nio.file.Path,java.util.Set,java.util.concurrent.ExecutorService,java.nio.file.attribute.FileAttribute[])>(r5, $r6, $r9, $r10) in <io.vertx.core.file.impl.AsyncFileImpl: void <init>(io.vertx.core.impl.VertxInternal,java.lang.String,io.vertx.core.file.OpenOptions,io.vertx.core.impl.ContextInternal)> ==> <java.nio.channels.AsynchronousFileChannel: java.nio.channels.AsynchronousFileChannel open(java.nio.file.Path,java.util.Set,java.util.concurrent.ExecutorService,java.nio.file.attribute.FileAttribute[])>
STATIC edge: $r22 = staticinvoke <java.nio.channels.AsynchronousFileChannel: java.nio.channels.AsynchronousFileChannel open(java.nio.file.Path,java.util.Set,java.util.concurrent.ExecutorService,java.nio.file.attribute.FileAttribute[])>(r5, $r6, $r20, $r21) in <io.vertx.core.file.impl.AsyncFileImpl: void <init>(io.vertx.core.impl.VertxInternal,java.lang.String,io.vertx.core.file.OpenOptions,io.vertx.core.impl.ContextInternal)> ==> <java.nio.channels.AsynchronousFileChannel: java.nio.channels.AsynchronousFileChannel open(java.nio.file.Path,java.util.Set,java.util.concurrent.ExecutorService,java.nio.file.attribute.FileAttribute[])>
STATIC edge: r35 = staticinvoke <java.nio.file.attribute.PosixFilePermissions: java.nio.file.attribute.FileAttribute asFileAttribute(java.util.Set)>($r19) in <io.vertx.core.file.impl.AsyncFileImpl: void <init>(io.vertx.core.impl.VertxInternal,java.lang.String,io.vertx.core.file.OpenOptions,io.vertx.core.impl.ContextInternal)> ==> <java.nio.file.attribute.PosixFilePermissions: java.nio.file.attribute.FileAttribute asFileAttribute(java.util.Set)>
STATIC edge: $r19 = staticinvoke <java.nio.file.attribute.PosixFilePermissions: java.util.Set fromString(java.lang.String)>($r18) in <io.vertx.core.file.impl.AsyncFileImpl: void <init>(io.vertx.core.impl.VertxInternal,java.lang.String,io.vertx.core.file.OpenOptions,io.vertx.core.impl.ContextInternal)> ==> <java.nio.file.attribute.PosixFilePermissions: java.util.Set fromString(java.lang.String)>
STATIC edge: r5 = staticinvoke <java.nio.file.Paths: java.nio.file.Path get(java.lang.String,java.lang.String[])>(r3, $r4) in <io.vertx.core.file.impl.AsyncFileImpl: void <init>(io.vertx.core.impl.VertxInternal,java.lang.String,io.vertx.core.file.OpenOptions,io.vertx.core.impl.ContextInternal)> ==> <java.nio.file.Paths: java.nio.file.Path get(java.lang.String,java.lang.String[])>
CLINIT edge: $r13 = new io.vertx.core.streams.impl.InboundBuffer in <io.vertx.core.file.impl.AsyncFileImpl: void <init>(io.vertx.core.impl.VertxInternal,java.lang.String,io.vertx.core.file.OpenOptions,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.streams.impl.InboundBuffer: void <clinit>()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.file.OpenOptions: java.lang.String getPerms()>() in <io.vertx.core.file.impl.WindowsFileSystem: io.vertx.core.file.AsyncFile doOpen(java.lang.String,io.vertx.core.file.OpenOptions,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.file.OpenOptions: java.lang.String getPerms()>
SPECIAL edge: specialinvoke $r2.<io.vertx.core.file.impl.AsyncFileImpl: void <init>(io.vertx.core.impl.VertxInternal,java.lang.String,io.vertx.core.file.OpenOptions,io.vertx.core.impl.ContextInternal)>($r6, r4, r0, r5) in <io.vertx.core.file.impl.WindowsFileSystem: io.vertx.core.file.AsyncFile doOpen(java.lang.String,io.vertx.core.file.OpenOptions,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.file.impl.AsyncFileImpl: void <init>(io.vertx.core.impl.VertxInternal,java.lang.String,io.vertx.core.file.OpenOptions,io.vertx.core.impl.ContextInternal)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<io.vertx.core.logging.Logger: boolean isDebugEnabled()>() in <io.vertx.core.file.impl.WindowsFileSystem: void logInternal(java.lang.String)> ==> <io.vertx.core.logging.Logger: boolean isDebugEnabled()>
VIRTUAL edge: virtualinvoke $r2.<io.vertx.core.logging.Logger: void debug(java.lang.Object)>("You are running on Windows and POSIX style file permissions are not supported") in <io.vertx.core.file.impl.WindowsFileSystem: void logInternal(java.lang.String)> ==> <io.vertx.core.logging.Logger: void debug(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.nio.file.SimpleFileVisitor: void <init>()>() in <io.vertx.core.file.impl.FileSystemImpl$5$1: void <init>(io.vertx.core.file.impl.FileSystemImpl$5)> ==> <java.nio.file.SimpleFileVisitor: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.file.impl.FilePropsImpl: void <init>(java.nio.file.attribute.BasicFileAttributes)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.file.impl.FileSystemPropsImpl: void <init>(long,long,long)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.nio.file.SimpleFileVisitor: void <init>()>() in <io.vertx.core.file.impl.FileSystemImpl$11: void <init>()> ==> <java.nio.file.SimpleFileVisitor: void <init>()>
VIRTUAL edge: r1 = virtualinvoke r0.<io.vertx.core.net.impl.ConnectionBase: io.vertx.core.spi.metrics.NetworkMetrics metrics()>() in <io.vertx.core.net.impl.ConnectionBase: void reportBytesWritten(long)> ==> <io.vertx.core.net.impl.NetSocketImpl: io.vertx.core.spi.metrics.NetworkMetrics metrics()>
VIRTUAL edge: r1 = virtualinvoke r0.<io.vertx.core.net.impl.ConnectionBase: io.vertx.core.spi.metrics.NetworkMetrics metrics()>() in <io.vertx.core.net.impl.ConnectionBase: void reportBytesWritten(long)> ==> <io.vertx.core.http.impl.Http2ServerConnection: io.vertx.core.spi.metrics.NetworkMetrics metrics()>
VIRTUAL edge: r1 = virtualinvoke r0.<io.vertx.core.net.impl.ConnectionBase: io.vertx.core.spi.metrics.NetworkMetrics metrics()>() in <io.vertx.core.net.impl.ConnectionBase: void reportBytesWritten(long)> ==> <io.vertx.core.http.impl.Http2ClientConnection: io.vertx.core.spi.metrics.NetworkMetrics metrics()>
VIRTUAL edge: r1 = virtualinvoke r0.<io.vertx.core.net.impl.ConnectionBase: io.vertx.core.spi.metrics.NetworkMetrics metrics()>() in <io.vertx.core.net.impl.ConnectionBase: void reportBytesWritten(long)> ==> <io.vertx.core.datagram.impl.DatagramSocketImpl$Connection: io.vertx.core.spi.metrics.NetworkMetrics metrics()>
VIRTUAL edge: r1 = virtualinvoke r0.<io.vertx.core.net.impl.ConnectionBase: io.vertx.core.spi.metrics.NetworkMetrics metrics()>() in <io.vertx.core.net.impl.ConnectionBase: void reportBytesWritten(long)> ==> <io.vertx.core.http.impl.Http1xServerConnection: io.vertx.core.spi.metrics.NetworkMetrics metrics()>
VIRTUAL edge: r1 = virtualinvoke r0.<io.vertx.core.net.impl.ConnectionBase: io.vertx.core.spi.metrics.NetworkMetrics metrics()>() in <io.vertx.core.net.impl.ConnectionBase: void reportBytesWritten(long)> ==> <io.vertx.core.http.impl.Http1xClientConnection: io.vertx.core.spi.metrics.NetworkMetrics metrics()>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.net.impl.ConnectionBase: java.lang.Object metric()>() in <io.vertx.core.net.impl.ConnectionBase: void reportBytesWritten(long)> ==> <io.vertx.core.net.impl.ConnectionBase: java.lang.Object metric()>
VIRTUAL edge: $r3 = virtualinvoke r0.<io.vertx.core.net.impl.ConnectionBase: io.vertx.core.net.SocketAddress remoteAddress()>() in <io.vertx.core.net.impl.ConnectionBase: void reportBytesWritten(long)> ==> <io.vertx.core.net.impl.NetSocketImpl: io.vertx.core.net.SocketAddress remoteAddress()>
VIRTUAL edge: $r3 = virtualinvoke r0.<io.vertx.core.net.impl.ConnectionBase: io.vertx.core.net.SocketAddress remoteAddress()>() in <io.vertx.core.net.impl.ConnectionBase: void reportBytesWritten(long)> ==> <io.vertx.core.net.impl.ConnectionBase: io.vertx.core.net.SocketAddress remoteAddress()>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.spi.metrics.NetworkMetrics: void bytesWritten(java.lang.Object,io.vertx.core.net.SocketAddress,long)>($r2, $r3, l0) in <io.vertx.core.net.impl.ConnectionBase: void reportBytesWritten(long)> ==> <io.vertx.core.spi.metrics.NetworkMetrics: void bytesWritten(java.lang.Object,io.vertx.core.net.SocketAddress,long)>
SPECIAL edge: specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Socket is closed") in <io.vertx.core.net.impl.NetSocketImpl: io.vertx.core.impl.NetSocketInternal writeMessage(java.lang.Object)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.impl.ConnectionBase: void writeToChannel(java.lang.Object)>(r1) in <io.vertx.core.net.impl.NetSocketImpl: io.vertx.core.impl.NetSocketInternal writeMessage(java.lang.Object)> ==> <io.vertx.core.net.impl.ConnectionBase: void writeToChannel(java.lang.Object)>
INTERFACE edge: r2 = interfaceinvoke $r1.<io.netty.channel.ChannelHandlerContext: io.netty.util.concurrent.EventExecutor executor()>() in <io.vertx.core.http.impl.VertxHttp2ConnectionHandler: void writeData(io.netty.handler.codec.http2.Http2Stream,io.netty.buffer.ByteBuf,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.PartialPooledByteBufAllocator$PooledChannelHandlerContext: io.netty.util.concurrent.EventExecutor executor()>
INTERFACE edge: r4 = interfaceinvoke $r3.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelPromise newPromise()>() in <io.vertx.core.http.impl.VertxHttp2ConnectionHandler: void writeData(io.netty.handler.codec.http2.Http2Stream,io.netty.buffer.ByteBuf,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.PartialPooledByteBufAllocator$PooledChannelHandlerContext: io.netty.channel.ChannelPromise newPromise()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: void _writeData(io.netty.handler.codec.http2.Http2Stream,io.netty.buffer.ByteBuf,boolean,io.netty.channel.ChannelPromise)>(r6, r7, z1, r4) in <io.vertx.core.http.impl.VertxHttp2ConnectionHandler: void writeData(io.netty.handler.codec.http2.Http2Stream,io.netty.buffer.ByteBuf,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.VertxHttp2ConnectionHandler: void _writeData(io.netty.handler.codec.http2.Http2Stream,io.netty.buffer.ByteBuf,boolean,io.netty.channel.ChannelPromise)>
EXECUTOR edge: interfaceinvoke r2.<io.netty.util.concurrent.EventExecutor: void execute(java.lang.Runnable)>($r8) in <io.vertx.core.http.impl.VertxHttp2ConnectionHandler: void writeData(io.netty.handler.codec.http2.Http2Stream,io.netty.buffer.ByteBuf,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.impl.BlockedThreadChecker$1: void run()>
EXECUTOR edge: interfaceinvoke r2.<io.netty.util.concurrent.EventExecutor: void execute(java.lang.Runnable)>($r8) in <io.vertx.core.http.impl.VertxHttp2ConnectionHandler: void writeData(io.netty.handler.codec.http2.Http2Stream,io.netty.buffer.ByteBuf,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.impl.launcher.commands.Watcher: void run()>
EXECUTOR edge: interfaceinvoke r2.<io.netty.util.concurrent.EventExecutor: void execute(java.lang.Runnable)>($r8) in <io.vertx.core.http.impl.VertxHttp2ConnectionHandler: void writeData(io.netty.handler.codec.http2.Http2Stream,io.netty.buffer.ByteBuf,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.file.impl.FileResolver$lambda_setupCacheDir_1__26: void run()>
EXECUTOR edge: interfaceinvoke r2.<io.netty.util.concurrent.EventExecutor: void execute(java.lang.Runnable)>($r8) in <io.vertx.core.http.impl.VertxHttp2ConnectionHandler: void writeData(io.netty.handler.codec.http2.Http2Stream,io.netty.buffer.ByteBuf,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.impl.EventLoopContext$lambda_executeAsync_0__54: void run()>
EXECUTOR edge: interfaceinvoke r2.<io.netty.util.concurrent.EventExecutor: void execute(java.lang.Runnable)>($r8) in <io.vertx.core.http.impl.VertxHttp2ConnectionHandler: void writeData(io.netty.handler.codec.http2.Http2Stream,io.netty.buffer.ByteBuf,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.Starter$1: void run()>
EXECUTOR edge: interfaceinvoke r2.<io.netty.util.concurrent.EventExecutor: void execute(java.lang.Runnable)>($r8) in <io.vertx.core.http.impl.VertxHttp2ConnectionHandler: void writeData(io.netty.handler.codec.http2.Http2Stream,io.netty.buffer.ByteBuf,boolean,io.vertx.core.Handler)> ==> <java.lang.Thread: void run()>
EXECUTOR edge: interfaceinvoke r2.<io.netty.util.concurrent.EventExecutor: void execute(java.lang.Runnable)>($r8) in <io.vertx.core.http.impl.VertxHttp2ConnectionHandler: void writeData(io.netty.handler.codec.http2.Http2Stream,io.netty.buffer.ByteBuf,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.impl.TaskQueue$run__63: void run()>
EXECUTOR edge: interfaceinvoke r2.<io.netty.util.concurrent.EventExecutor: void execute(java.lang.Runnable)>($r8) in <io.vertx.core.http.impl.VertxHttp2ConnectionHandler: void writeData(io.netty.handler.codec.http2.Http2Stream,io.netty.buffer.ByteBuf,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.impl.launcher.commands.RunCommand$1: void run()>
EXECUTOR edge: interfaceinvoke r2.<io.netty.util.concurrent.EventExecutor: void execute(java.lang.Runnable)>($r8) in <io.vertx.core.http.impl.VertxHttp2ConnectionHandler: void writeData(io.netty.handler.codec.http2.Http2Stream,io.netty.buffer.ByteBuf,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.impl.HAManager$lambda_addToHADeployList_7__8: void run()>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler$lambda_writeData_5__74: void <init>(io.vertx.core.Handler)>($r0) in <io.vertx.core.http.impl.VertxHttp2ConnectionHandler$lambda_writeData_5__74: io.netty.util.concurrent.GenericFutureListener bootstrap$(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.VertxHttp2ConnectionHandler$lambda_writeData_5__74: void <init>(io.vertx.core.Handler)>
SPECIAL edge: specialinvoke $r4.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler$lambda_writeData_6__73: void <init>(io.vertx.core.http.impl.VertxHttp2ConnectionHandler,io.netty.handler.codec.http2.Http2Stream,io.netty.buffer.ByteBuf,boolean,io.netty.channel.ChannelPromise)>($r0, $r1, $r2, $z0, $r3) in <io.vertx.core.http.impl.VertxHttp2ConnectionHandler$lambda_writeData_6__73: java.lang.Runnable bootstrap$(io.vertx.core.http.impl.VertxHttp2ConnectionHandler,io.netty.handler.codec.http2.Http2Stream,io.netty.buffer.ByteBuf,boolean,io.netty.channel.ChannelPromise)> ==> <io.vertx.core.http.impl.VertxHttp2ConnectionHandler$lambda_writeData_6__73: void <init>(io.vertx.core.http.impl.VertxHttp2ConnectionHandler,io.netty.handler.codec.http2.Http2Stream,io.netty.buffer.ByteBuf,boolean,io.netty.channel.ChannelPromise)>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.eventbus.impl.MessageImpl: void <init>(io.vertx.core.eventbus.impl.MessageImpl)>(r1) in <io.vertx.core.eventbus.impl.MessageImpl: io.vertx.core.eventbus.impl.MessageImpl copyBeforeReceive()> ==> <io.vertx.core.eventbus.impl.MessageImpl: void <init>(io.vertx.core.eventbus.impl.MessageImpl)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.eventbus.impl.clustered.ClusteredMessage: io.vertx.core.eventbus.impl.clustered.ClusteredMessage copyBeforeReceive()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: io.vertx.core.eventbus.impl.MessageImpl copyBeforeReceive()> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: io.vertx.core.eventbus.impl.clustered.ClusteredMessage copyBeforeReceive()>
CLINIT edge: $r0 = new io.vertx.core.eventbus.impl.clustered.ClusteredMessage in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: io.vertx.core.eventbus.impl.clustered.ClusteredMessage copyBeforeReceive()> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void <clinit>()>
CLINIT edge: $r0 = new io.vertx.core.eventbus.impl.clustered.ClusteredMessage in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: io.vertx.core.eventbus.impl.clustered.ClusteredMessage copyBeforeReceive()> ==> <io.vertx.core.eventbus.impl.MessageImpl: void <clinit>()>
VIRTUAL edge: $z0 = virtualinvoke r0.<io.vertx.core.eventbus.impl.clustered.ClusteredMessage: boolean isFromWire()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: boolean isLocal()> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: boolean isFromWire()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.eventbus.impl.EventBusImpl$InboundDeliveryContext: void <init>(io.vertx.core.eventbus.impl.EventBusImpl,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.impl.HandlerHolder)>(r1, r2, r3) in <io.vertx.core.eventbus.impl.EventBusImpl$InboundDeliveryContext: void <init>(io.vertx.core.eventbus.impl.EventBusImpl,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.impl.HandlerHolder,io.vertx.core.eventbus.impl.EventBusImpl$1)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$InboundDeliveryContext: void <init>(io.vertx.core.eventbus.impl.EventBusImpl,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.impl.HandlerHolder)>
CLINIT edge: $r4 = staticinvoke <io.vertx.core.eventbus.impl.EventBusImpl: java.util.List access$600(io.vertx.core.eventbus.impl.EventBusImpl)>(r1) in <io.vertx.core.eventbus.impl.EventBusImpl$InboundDeliveryContext: void <init>(io.vertx.core.eventbus.impl.EventBusImpl,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.impl.HandlerHolder)> ==> <io.vertx.core.eventbus.impl.EventBusImpl: void <clinit>()>
STATIC edge: $r4 = staticinvoke <io.vertx.core.eventbus.impl.EventBusImpl: java.util.List access$600(io.vertx.core.eventbus.impl.EventBusImpl)>(r1) in <io.vertx.core.eventbus.impl.EventBusImpl$InboundDeliveryContext: void <init>(io.vertx.core.eventbus.impl.EventBusImpl,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.impl.HandlerHolder)> ==> <io.vertx.core.eventbus.impl.EventBusImpl: java.util.List access$600(io.vertx.core.eventbus.impl.EventBusImpl)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.eventbus.impl.EventBusImpl$lambda_deliverToHandler_5__62: void <init>(io.vertx.core.eventbus.impl.HandlerHolder,io.vertx.core.eventbus.DeliveryContext)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.util.LinkedList: void <init>()>() in <io.vertx.core.http.CaseInsensitiveHeaders: java.util.List getAll(java.lang.String)> ==> <java.util.LinkedList: void <init>()>
VIRTUAL edge: virtualinvoke $r2.<java.util.LinkedList: void addFirst(java.lang.Object)>($r7) in <io.vertx.core.http.CaseInsensitiveHeaders: java.util.List getAll(java.lang.String)> ==> <java.util.LinkedList: void addFirst(java.lang.Object)>
VIRTUAL edge: $r7 = virtualinvoke r8.<io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.String getValue()>() in <io.vertx.core.http.CaseInsensitiveHeaders: java.util.List getAll(java.lang.String)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.String getValue()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.http.impl.Http2HeadersAdaptor$toString__475: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke r0.<io.vertx.core.http.impl.HttpServerRequestImpl: boolean isEnded()>() in <io.vertx.core.http.impl.HttpServerRequestImpl: void checkEnded()> ==> <io.vertx.core.http.impl.HttpServerRequestImpl: boolean isEnded()>
SPECIAL edge: specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Request has already been read") in <io.vertx.core.http.impl.HttpServerRequestImpl: void checkEnded()> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.buffer.impl.BufferImpl: void <init>(int)>(0) in <io.vertx.core.buffer.impl.BufferImpl: void <init>()> ==> <io.vertx.core.buffer.impl.BufferImpl: void <init>(int)>
STATIC edge: $r1 = staticinvoke <io.netty.buffer.Unpooled: io.netty.buffer.ByteBuf buffer(int,int)>(i0, 2147483647) in <io.vertx.core.buffer.impl.BufferImpl: void <init>(int)> ==> <io.netty.buffer.Unpooled: io.netty.buffer.ByteBuf buffer(int,int)>
STATIC edge: $r2 = staticinvoke <io.netty.buffer.Unpooled: io.netty.buffer.ByteBuf unreleasableBuffer(io.netty.buffer.ByteBuf)>($r1) in <io.vertx.core.buffer.impl.BufferImpl: void <init>(int)> ==> <io.netty.buffer.Unpooled: io.netty.buffer.ByteBuf unreleasableBuffer(io.netty.buffer.ByteBuf)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.impl.VertxImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.impl.DeploymentManager$lambda_doDeployVerticle_2__17: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.impl.VertxImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.impl.VertxImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.impl.FutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.impl.VertxImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.impl.VertxImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.impl.SucceededFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.impl.VertxImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.impl.VertxImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.impl.VertxImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl$lambda_joinCluster_1__10: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.impl.VertxImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.impl.VertxImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.Starter$lambda_runVerticle_1__1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.impl.VertxImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.impl.VertxImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.impl.VertxImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.impl.VertxImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.Starter$lambda_startVertx_0__2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.impl.VertxImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.impl.VertxImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.impl.VertxImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_start_3__19: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.impl.VertxImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.impl.HAManager$lambda_doDeployVerticle_4__7: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.impl.VertxImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_close_0__29: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.impl.VertxImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.impl.VertxImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.impl.VertxImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.impl.VertxImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.Starter$lambda_createLoggingHandler_2__3: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.impl.VertxImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.impl.CompositeFutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.impl.VertxImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.impl.VertxImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_finalize_6__18: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.impl.VertxImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.impl.VertxImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl$lambda_init_0__9: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.impl.VertxImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.impl.FailedFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.impl.VertxImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.impl.VertxImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_close_5__30: void handle(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r4.<io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)>($r5) in <io.vertx.core.impl.VertxImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)>
CLINIT edge: r12 = staticinvoke <io.vertx.core.Future: io.vertx.core.Future future()>() in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.Future: void <clinit>()>
STATIC edge: $r4 = staticinvoke <io.vertx.core.Future: io.vertx.core.Future succeededFuture()>() in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.Future: io.vertx.core.Future succeededFuture()>
STATIC edge: $r5 = staticinvoke <io.vertx.core.Future: io.vertx.core.Future succeededFuture()>() in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.Future: io.vertx.core.Future succeededFuture()>
STATIC edge: $r13 = staticinvoke <io.vertx.core.impl.CloseHooks$lambda_run_0__82: io.vertx.core.Handler bootstrap$(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int)>($r7, r3, $r6, i0) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.impl.CloseHooks$lambda_run_0__82: io.vertx.core.Handler bootstrap$(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int)>
STATIC edge: r12 = staticinvoke <io.vertx.core.Future: io.vertx.core.Future future()>() in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.Future: io.vertx.core.Future future()>
CLINIT edge: $r4 = staticinvoke <io.vertx.core.Future: io.vertx.core.Future succeededFuture()>() in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.Future: void <clinit>()>
CLINIT edge: $r5 = staticinvoke <io.vertx.core.Future: io.vertx.core.Future succeededFuture()>() in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.Future: void <clinit>()>
SPECIAL edge: specialinvoke $r2.<io.vertx.core.impl.VertxImpl$lambda_close_17__66: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.Handler)>($r0, $r1) in <io.vertx.core.impl.VertxImpl$lambda_close_17__66: io.vertx.core.Handler bootstrap$(io.vertx.core.impl.VertxImpl,io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl$lambda_close_17__66: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.Handler)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.impl.SocketAddressImpl: void <init>(int,java.lang.String)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke r1.<java.lang.String: boolean isEmpty()>() in <io.vertx.core.net.impl.SocketAddressImpl: void <init>(int,java.lang.String)> ==> <java.lang.String: boolean isEmpty()>
SPECIAL edge: specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r1) in <io.vertx.core.impl.Arguments: void requireInRange(int,int,int,java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<io.netty.channel.socket.DatagramChannel: io.netty.channel.socket.DatagramChannelConfig config()>() in <io.vertx.core.datagram.impl.DatagramSocketImpl: io.vertx.core.datagram.DatagramSocket resume()> ==> <io.netty.channel.socket.DatagramChannel: io.netty.channel.socket.DatagramChannelConfig config()>
VIRTUAL edge: virtualinvoke $r1.<io.vertx.core.streams.impl.InboundBuffer: io.vertx.core.streams.impl.InboundBuffer resume()>() in <io.vertx.core.net.impl.NetSocketImpl: io.vertx.core.net.NetSocket resume()> ==> <io.vertx.core.streams.impl.InboundBuffer: io.vertx.core.streams.impl.InboundBuffer resume()>
VIRTUAL edge: virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(0) in <io.vertx.core.http.impl.Http1xClientConnection$1: io.vertx.core.net.NetSocket resume()> ==> <java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>
SPECIAL edge: $r2 = specialinvoke r0.<io.vertx.core.net.impl.NetSocketImpl: io.vertx.core.net.NetSocket resume()>() in <io.vertx.core.http.impl.Http1xClientConnection$1: io.vertx.core.net.NetSocket resume()> ==> <io.vertx.core.net.impl.NetSocketImpl: io.vertx.core.net.NetSocket resume()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.file.impl.AsyncFileImpl: void check()>() in <io.vertx.core.file.impl.AsyncFileImpl: io.vertx.core.file.AsyncFile resume()> ==> <io.vertx.core.file.impl.AsyncFileImpl: void check()>
VIRTUAL edge: virtualinvoke $r1.<io.vertx.core.streams.impl.InboundBuffer: io.vertx.core.streams.impl.InboundBuffer resume()>() in <io.vertx.core.file.impl.AsyncFileImpl: io.vertx.core.file.AsyncFile resume()> ==> <io.vertx.core.streams.impl.InboundBuffer: io.vertx.core.streams.impl.InboundBuffer resume()>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.http.impl.Http2ServerRequestImpl: void doResume()>() in <io.vertx.core.http.impl.Http2ServerRequestImpl: io.vertx.core.http.HttpServerRequest resume()> ==> <io.vertx.core.http.impl.Http2ServerRequestImpl: void doResume()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.parsetools.impl.RecordParserImpl: io.vertx.core.parsetools.RecordParser fetch(long)>(9223372036854775807L) in <io.vertx.core.parsetools.impl.RecordParserImpl: io.vertx.core.parsetools.RecordParser resume()> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: io.vertx.core.parsetools.RecordParser fetch(long)>
STATIC edge: staticinvoke <io.vertx.core.impl.Arguments: void require(boolean,java.lang.String)>($z0, "Fetch amount must be > 0") in <io.vertx.core.parsetools.impl.RecordParserImpl: io.vertx.core.parsetools.RecordParser fetch(long)> ==> <io.vertx.core.impl.Arguments: void require(boolean,java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.http.impl.VertxHttp2NetSocket: void doResume()>() in <io.vertx.core.http.impl.VertxHttp2NetSocket: io.vertx.core.net.NetSocket resume()> ==> <io.vertx.core.http.impl.VertxHttp2Stream: void doResume()>
VIRTUAL edge: virtualinvoke $r1.<io.vertx.core.streams.impl.InboundBuffer: io.vertx.core.streams.impl.InboundBuffer resume()>() in <io.vertx.core.http.impl.HttpServerFileUploadImpl: io.vertx.core.http.HttpServerFileUpload resume()> ==> <io.vertx.core.streams.impl.InboundBuffer: io.vertx.core.streams.impl.InboundBuffer resume()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.parsetools.impl.JsonParserImpl: io.vertx.core.parsetools.JsonParser fetch(long)>(9223372036854775807L) in <io.vertx.core.parsetools.impl.JsonParserImpl: io.vertx.core.parsetools.JsonParser resume()> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: io.vertx.core.parsetools.JsonParser fetch(long)>
STATIC edge: staticinvoke <io.vertx.core.impl.Arguments: void require(boolean,java.lang.String)>($z0, "Fetch amount must be > 0L") in <io.vertx.core.parsetools.impl.JsonParserImpl: io.vertx.core.parsetools.JsonParser fetch(long)> ==> <io.vertx.core.impl.Arguments: void require(boolean,java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<io.vertx.core.http.impl.HttpServerRequestImpl: boolean isEnded()>() in <io.vertx.core.http.impl.HttpServerRequestImpl: io.vertx.core.http.HttpServerRequest resume()> ==> <io.vertx.core.http.impl.HttpServerRequestImpl: boolean isEnded()>
SPECIAL edge: $r3 = specialinvoke r0.<io.vertx.core.http.impl.HttpServerRequestImpl: io.vertx.core.streams.impl.InboundBuffer pendingQueue()>() in <io.vertx.core.http.impl.HttpServerRequestImpl: io.vertx.core.http.HttpServerRequest resume()> ==> <io.vertx.core.http.impl.HttpServerRequestImpl: io.vertx.core.streams.impl.InboundBuffer pendingQueue()>
VIRTUAL edge: virtualinvoke $r3.<io.vertx.core.streams.impl.InboundBuffer: io.vertx.core.streams.impl.InboundBuffer resume()>() in <io.vertx.core.http.impl.HttpServerRequestImpl: io.vertx.core.http.HttpServerRequest resume()> ==> <io.vertx.core.streams.impl.InboundBuffer: io.vertx.core.streams.impl.InboundBuffer resume()>
CLINIT edge: $r3 = new io.vertx.core.streams.impl.InboundBuffer in <io.vertx.core.http.impl.HttpServerRequestImpl: io.vertx.core.streams.impl.InboundBuffer pendingQueue()> ==> <io.vertx.core.streams.impl.InboundBuffer: void <clinit>()>
STATIC edge: $r13 = staticinvoke <io.vertx.core.http.impl.HttpServerRequestImpl$handleData__81: io.vertx.core.Handler bootstrap$(io.vertx.core.http.impl.HttpServerRequestImpl)>(r0) in <io.vertx.core.http.impl.HttpServerRequestImpl: io.vertx.core.streams.impl.InboundBuffer pendingQueue()> ==> <io.vertx.core.http.impl.HttpServerRequestImpl$handleData__81: io.vertx.core.Handler bootstrap$(io.vertx.core.http.impl.HttpServerRequestImpl)>
STATIC edge: $r10 = staticinvoke <io.vertx.core.http.impl.HttpServerRequestImpl$lambda_pendingQueue_1__80: io.vertx.core.Handler bootstrap$(io.vertx.core.http.impl.HttpServerRequestImpl)>(r0) in <io.vertx.core.http.impl.HttpServerRequestImpl: io.vertx.core.streams.impl.InboundBuffer pendingQueue()> ==> <io.vertx.core.http.impl.HttpServerRequestImpl$lambda_pendingQueue_1__80: io.vertx.core.Handler bootstrap$(io.vertx.core.http.impl.HttpServerRequestImpl)>
STATIC edge: $r7 = staticinvoke <io.vertx.core.http.impl.HttpServerRequestImpl$lambda_pendingQueue_0__79: io.vertx.core.Handler bootstrap$(io.vertx.core.http.impl.HttpServerRequestImpl)>(r0) in <io.vertx.core.http.impl.HttpServerRequestImpl: io.vertx.core.streams.impl.InboundBuffer pendingQueue()> ==> <io.vertx.core.http.impl.HttpServerRequestImpl$lambda_pendingQueue_0__79: io.vertx.core.Handler bootstrap$(io.vertx.core.http.impl.HttpServerRequestImpl)>
INTERFACE edge: interfaceinvoke $r1.<io.vertx.core.http.impl.HttpClientStream: void doResume()>() in <io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.http.HttpClientResponse resume()> ==> <io.vertx.core.http.impl.Http1xClientConnection$StreamImpl: void doResume()>
INTERFACE edge: interfaceinvoke $r1.<io.vertx.core.http.impl.HttpClientStream: void doResume()>() in <io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.http.HttpClientResponse resume()> ==> <io.vertx.core.http.impl.VertxHttp2Stream: void doResume()>
INTERFACE edge: interfaceinvoke $r1.<io.vertx.core.http.impl.HttpClientStream: void doResume()>() in <io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.http.HttpClientResponse resume()> ==> <io.vertx.core.http.impl.Http2UpgradedClientConnection$UpgradingStream: void doResume()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.impl.NetServerImpl: void resumeAccepting()>() in <io.vertx.core.net.impl.NetServerImpl: void access$500(io.vertx.core.net.impl.NetServerImpl)> ==> <io.vertx.core.net.impl.NetServerImpl: void resumeAccepting()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.http.impl.HttpClientRequestBase: void checkHandleResponse()>() in <io.vertx.core.http.impl.HttpClientRequestBase: io.vertx.core.http.HttpClientRequest resume()> ==> <io.vertx.core.http.impl.HttpClientRequestBase: void checkHandleResponse()>
VIRTUAL edge: $z0 = virtualinvoke r0.<io.vertx.core.http.impl.WebSocketImplBase: boolean isClosed()>() in <io.vertx.core.http.impl.WebSocketImplBase: io.vertx.core.http.WebSocketBase resume()> ==> <io.vertx.core.http.impl.WebSocketImplBase: boolean isClosed()>
VIRTUAL edge: virtualinvoke $r1.<io.vertx.core.streams.impl.InboundBuffer: io.vertx.core.streams.impl.InboundBuffer resume()>() in <io.vertx.core.http.impl.WebSocketImplBase: io.vertx.core.http.WebSocketBase resume()> ==> <io.vertx.core.streams.impl.InboundBuffer: io.vertx.core.streams.impl.InboundBuffer resume()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.eventbus.impl.HandlerRegistration: io.vertx.core.eventbus.MessageConsumer fetch(long)>(9223372036854775807L) in <io.vertx.core.eventbus.impl.HandlerRegistration: io.vertx.core.eventbus.MessageConsumer resume()> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: io.vertx.core.eventbus.MessageConsumer fetch(long)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<io.netty.channel.socket.DatagramChannel: io.netty.channel.socket.DatagramChannelConfig config()>() in <io.vertx.core.datagram.impl.DatagramSocketImpl: io.vertx.core.datagram.DatagramSocket pause()> ==> <io.netty.channel.socket.DatagramChannel: io.netty.channel.socket.DatagramChannelConfig config()>
VIRTUAL edge: virtualinvoke $r1.<io.vertx.core.streams.impl.InboundBuffer: io.vertx.core.streams.impl.InboundBuffer pause()>() in <io.vertx.core.net.impl.NetSocketImpl: io.vertx.core.net.NetSocket pause()> ==> <io.vertx.core.streams.impl.InboundBuffer: io.vertx.core.streams.impl.InboundBuffer pause()>
VIRTUAL edge: virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1) in <io.vertx.core.http.impl.Http1xClientConnection$1: io.vertx.core.net.NetSocket pause()> ==> <java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>
SPECIAL edge: $r2 = specialinvoke r0.<io.vertx.core.net.impl.NetSocketImpl: io.vertx.core.net.NetSocket pause()>() in <io.vertx.core.http.impl.Http1xClientConnection$1: io.vertx.core.net.NetSocket pause()> ==> <io.vertx.core.net.impl.NetSocketImpl: io.vertx.core.net.NetSocket pause()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.file.impl.AsyncFileImpl: void check()>() in <io.vertx.core.file.impl.AsyncFileImpl: io.vertx.core.file.AsyncFile pause()> ==> <io.vertx.core.file.impl.AsyncFileImpl: void check()>
VIRTUAL edge: virtualinvoke $r1.<io.vertx.core.streams.impl.InboundBuffer: io.vertx.core.streams.impl.InboundBuffer pause()>() in <io.vertx.core.file.impl.AsyncFileImpl: io.vertx.core.file.AsyncFile pause()> ==> <io.vertx.core.streams.impl.InboundBuffer: io.vertx.core.streams.impl.InboundBuffer pause()>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.http.impl.Http2ServerRequestImpl: void doPause()>() in <io.vertx.core.http.impl.Http2ServerRequestImpl: io.vertx.core.http.HttpServerRequest pause()> ==> <io.vertx.core.http.impl.Http2ServerRequestImpl: void doPause()>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.http.impl.VertxHttp2NetSocket: void doPause()>() in <io.vertx.core.http.impl.VertxHttp2NetSocket: io.vertx.core.net.NetSocket pause()> ==> <io.vertx.core.http.impl.VertxHttp2Stream: void doPause()>
VIRTUAL edge: virtualinvoke $r1.<io.vertx.core.streams.impl.InboundBuffer: io.vertx.core.streams.impl.InboundBuffer pause()>() in <io.vertx.core.http.impl.HttpServerFileUploadImpl: io.vertx.core.http.HttpServerFileUpload pause()> ==> <io.vertx.core.streams.impl.InboundBuffer: io.vertx.core.streams.impl.InboundBuffer pause()>
VIRTUAL edge: $z0 = virtualinvoke r0.<io.vertx.core.http.impl.HttpServerRequestImpl: boolean isEnded()>() in <io.vertx.core.http.impl.HttpServerRequestImpl: io.vertx.core.http.HttpServerRequest pause()> ==> <io.vertx.core.http.impl.HttpServerRequestImpl: boolean isEnded()>
SPECIAL edge: $r3 = specialinvoke r0.<io.vertx.core.http.impl.HttpServerRequestImpl: io.vertx.core.streams.impl.InboundBuffer pendingQueue()>() in <io.vertx.core.http.impl.HttpServerRequestImpl: io.vertx.core.http.HttpServerRequest pause()> ==> <io.vertx.core.http.impl.HttpServerRequestImpl: io.vertx.core.streams.impl.InboundBuffer pendingQueue()>
VIRTUAL edge: virtualinvoke $r3.<io.vertx.core.streams.impl.InboundBuffer: io.vertx.core.streams.impl.InboundBuffer pause()>() in <io.vertx.core.http.impl.HttpServerRequestImpl: io.vertx.core.http.HttpServerRequest pause()> ==> <io.vertx.core.streams.impl.InboundBuffer: io.vertx.core.streams.impl.InboundBuffer pause()>
INTERFACE edge: interfaceinvoke $r1.<io.vertx.core.http.impl.HttpClientStream: void doPause()>() in <io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.http.HttpClientResponse pause()> ==> <io.vertx.core.http.impl.Http1xClientConnection$StreamImpl: void doPause()>
INTERFACE edge: interfaceinvoke $r1.<io.vertx.core.http.impl.HttpClientStream: void doPause()>() in <io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.http.HttpClientResponse pause()> ==> <io.vertx.core.http.impl.VertxHttp2Stream: void doPause()>
INTERFACE edge: interfaceinvoke $r1.<io.vertx.core.http.impl.HttpClientStream: void doPause()>() in <io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.http.HttpClientResponse pause()> ==> <io.vertx.core.http.impl.Http2UpgradedClientConnection$UpgradingStream: void doPause()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.impl.NetServerImpl: void pauseAccepting()>() in <io.vertx.core.net.impl.NetServerImpl: void access$400(io.vertx.core.net.impl.NetServerImpl)> ==> <io.vertx.core.net.impl.NetServerImpl: void pauseAccepting()>
VIRTUAL edge: $z0 = virtualinvoke r0.<io.vertx.core.http.impl.WebSocketImplBase: boolean isClosed()>() in <io.vertx.core.http.impl.WebSocketImplBase: io.vertx.core.http.WebSocketBase pause()> ==> <io.vertx.core.http.impl.WebSocketImplBase: boolean isClosed()>
VIRTUAL edge: virtualinvoke $r1.<io.vertx.core.streams.impl.InboundBuffer: io.vertx.core.streams.impl.InboundBuffer pause()>() in <io.vertx.core.http.impl.WebSocketImplBase: io.vertx.core.http.WebSocketBase pause()> ==> <io.vertx.core.streams.impl.InboundBuffer: io.vertx.core.streams.impl.InboundBuffer pause()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.NetworkOptions: void <init>(io.vertx.core.json.JsonObject)>(r1) in <io.vertx.core.net.TCPSSLOptions: void <init>(io.vertx.core.json.JsonObject)> ==> <io.vertx.core.net.NetworkOptions: void <init>(io.vertx.core.json.JsonObject)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: void init()>() in <io.vertx.core.net.TCPSSLOptions: void <init>(io.vertx.core.json.JsonObject)> ==> <io.vertx.core.net.TCPSSLOptions: void init()>
STATIC edge: staticinvoke <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)>(r1, r0) in <io.vertx.core.net.NetworkOptions: void <init>(io.vertx.core.json.JsonObject)> ==> <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.HeadersAdaptor: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.impl.ConcurrentHashSet: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.util.ServiceLoader: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.json.JsonArray: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.util.AbstractList: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.json.JsonObject: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$1: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.util.concurrent.ConcurrentLinkedQueue: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.json.JsonArray$Iter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.json.JsonObject$Iter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.util.Scanner: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: boolean hasNext()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.json.JsonArray$Iter: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.json.JsonObject$Iter: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.util.Scanner: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: java.lang.Object next()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getKey()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getKey()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getKey()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getKey()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getKey()>
INTERFACE edge: $r107 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r107 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r107 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r107 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r107 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r107 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r108 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r108 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r108 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r108 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r108 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r108 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r103 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r103 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r103 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r103 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r103 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r103 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r104 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r104 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r104 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r104 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r104 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r104 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r99 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r99 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r99 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r99 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r99 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r99 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r100 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r100 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r100 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r100 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r100 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r100 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r92 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r92 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r92 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r92 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r92 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r92 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r95 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r95 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r95 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r95 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r95 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r95 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r88 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r88 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r88 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r88 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r88 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r88 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r89 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r89 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r89 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r89 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r89 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r89 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r83 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r83 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r83 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r83 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r83 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r83 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r84 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r84 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r84 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r84 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r84 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r84 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r78 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r78 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r78 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r78 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r78 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r78 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r80 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r80 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r80 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r80 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r80 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r80 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r73 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r73 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r73 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r73 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r73 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r73 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r75 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r75 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r75 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r75 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r75 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r75 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r68 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r68 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r68 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r68 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r68 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r68 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r70 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r70 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r70 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r70 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r70 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r70 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r63 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r63 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r63 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r63 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r63 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r63 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r65 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r65 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r65 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r65 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r65 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r65 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r58 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r58 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r58 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r58 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r58 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r58 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r60 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r60 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r60 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r60 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r60 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r60 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r53 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r53 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r53 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r53 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r53 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r53 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r55 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r55 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r55 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r55 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r55 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r55 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r48 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r48 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r48 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r48 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r48 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r48 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r50 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r50 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r50 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r50 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r50 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r50 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r44 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r44 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r44 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r44 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r44 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r44 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r45 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r45 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r45 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r45 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r45 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r45 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r40 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r40 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r40 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r40 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r40 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r40 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r41 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r41 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r41 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r41 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r41 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r41 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r36 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r36 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r36 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r36 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r36 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r36 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r37 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r37 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r37 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r37 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r37 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r37 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r32 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r32 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r32 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r32 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r32 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r32 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r33 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r33 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r33 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r33 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r33 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r33 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r28 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r28 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r28 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r28 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r28 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r28 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r29 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r29 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r29 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r29 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r29 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r29 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r24 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r24 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r24 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r24 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r24 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r24 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r25 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r25 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r25 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r25 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r25 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r25 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r20 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r20 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r20 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r20 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r20 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r20 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r21 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r21 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r21 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r21 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r21 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r21 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r15 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r15 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r15 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r15 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r15 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r15 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r17 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r17 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r17 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r17 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r17 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r17 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r11 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r11 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r11 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r11 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r11 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r11 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r12 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r12 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r12 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r12 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r12 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r12 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
VIRTUAL edge: $i0 = virtualinvoke r5.<java.lang.String: int hashCode()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.lang.String: int hashCode()>
VIRTUAL edge: $z1 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("crlPaths") in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z54 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("crlValues") in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z40 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("enabledCipherSuites") in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z45 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("enabledSecureTransportProtocols") in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z38 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("idleTimeout") in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z50 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("idleTimeoutUnit") in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z46 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("jdkSslEngineOptions") in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z33 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("keyStoreOptions") in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z47 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("openSslEngineOptions") in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z43 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("pemKeyCertOptions") in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z36 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("pemTrustOptions") in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z48 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("pfxKeyCertOptions") in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z34 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("pfxTrustOptions") in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z37 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("soLinger") in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z41 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("ssl") in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z49 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("tcpCork") in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z39 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("tcpFastOpen") in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z42 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("tcpKeepAlive") in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z35 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("tcpNoDelay") in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z53 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("tcpQuickAck") in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z51 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("trustStoreOptions") in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z44 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("useAlpn") in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z52 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("usePooledBuffers") in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.lang.String: boolean equals(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r109.<java.lang.Iterable: void forEach(java.util.function.Consumer)>($r110) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders: void forEach(java.util.function.Consumer)>
INTERFACE edge: interfaceinvoke $r109.<java.lang.Iterable: void forEach(java.util.function.Consumer)>($r110) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders: void forEach(java.util.function.Consumer)>
INTERFACE edge: interfaceinvoke $r105.<java.lang.Iterable: void forEach(java.util.function.Consumer)>($r106) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders: void forEach(java.util.function.Consumer)>
INTERFACE edge: interfaceinvoke $r105.<java.lang.Iterable: void forEach(java.util.function.Consumer)>($r106) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders: void forEach(java.util.function.Consumer)>
INTERFACE edge: interfaceinvoke $r101.<java.lang.Iterable: void forEach(java.util.function.Consumer)>($r102) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders: void forEach(java.util.function.Consumer)>
INTERFACE edge: interfaceinvoke $r101.<java.lang.Iterable: void forEach(java.util.function.Consumer)>($r102) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders: void forEach(java.util.function.Consumer)>
SPECIAL edge: specialinvoke $r93.<java.util.LinkedHashSet: void <init>()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.util.LinkedHashSet: void <init>()>
INTERFACE edge: interfaceinvoke $r96.<java.lang.Iterable: void forEach(java.util.function.Consumer)>($r97) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders: void forEach(java.util.function.Consumer)>
INTERFACE edge: interfaceinvoke $r96.<java.lang.Iterable: void forEach(java.util.function.Consumer)>($r97) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders: void forEach(java.util.function.Consumer)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setEnabledSecureTransportProtocols(java.util.Set)>($r93) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setEnabledSecureTransportProtocols(java.util.Set)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setEnabledSecureTransportProtocols(java.util.Set)>($r93) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setEnabledSecureTransportProtocols(java.util.Set)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setEnabledSecureTransportProtocols(java.util.Set)>($r93) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.TCPSSLOptions setEnabledSecureTransportProtocols(java.util.Set)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setEnabledSecureTransportProtocols(java.util.Set)>($r93) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.TCPSSLOptions setEnabledSecureTransportProtocols(java.util.Set)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setEnabledSecureTransportProtocols(java.util.Set)>($r93) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.TCPSSLOptions setEnabledSecureTransportProtocols(java.util.Set)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setEnabledSecureTransportProtocols(java.util.Set)>($r93) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.TCPSSLOptions setEnabledSecureTransportProtocols(java.util.Set)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setIdleTimeout(int)>($i2) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setIdleTimeout(int)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setIdleTimeout(int)>($i2) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setIdleTimeout(int)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setIdleTimeout(int)>($i2) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.TCPSSLOptions setIdleTimeout(int)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setIdleTimeout(int)>($i2) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.TCPSSLOptions setIdleTimeout(int)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setIdleTimeout(int)>($i2) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.TCPSSLOptions setIdleTimeout(int)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setIdleTimeout(int)>($i2) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.TCPSSLOptions setIdleTimeout(int)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setIdleTimeoutUnit(java.util.concurrent.TimeUnit)>($r86) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setIdleTimeoutUnit(java.util.concurrent.TimeUnit)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setIdleTimeoutUnit(java.util.concurrent.TimeUnit)>($r86) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setIdleTimeoutUnit(java.util.concurrent.TimeUnit)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setIdleTimeoutUnit(java.util.concurrent.TimeUnit)>($r86) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.TCPSSLOptions setIdleTimeoutUnit(java.util.concurrent.TimeUnit)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setIdleTimeoutUnit(java.util.concurrent.TimeUnit)>($r86) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.TCPSSLOptions setIdleTimeoutUnit(java.util.concurrent.TimeUnit)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setIdleTimeoutUnit(java.util.concurrent.TimeUnit)>($r86) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.TCPSSLOptions setIdleTimeoutUnit(java.util.concurrent.TimeUnit)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setJdkSslEngineOptions(io.vertx.core.net.JdkSSLEngineOptions)>($r79) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setJdkSslEngineOptions(io.vertx.core.net.JdkSSLEngineOptions)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setJdkSslEngineOptions(io.vertx.core.net.JdkSSLEngineOptions)>($r79) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setJdkSslEngineOptions(io.vertx.core.net.JdkSSLEngineOptions)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setJdkSslEngineOptions(io.vertx.core.net.JdkSSLEngineOptions)>($r79) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.TCPSSLOptions setJdkSslEngineOptions(io.vertx.core.net.JdkSSLEngineOptions)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setJdkSslEngineOptions(io.vertx.core.net.JdkSSLEngineOptions)>($r79) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.TCPSSLOptions setJdkSslEngineOptions(io.vertx.core.net.JdkSSLEngineOptions)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setJdkSslEngineOptions(io.vertx.core.net.JdkSSLEngineOptions)>($r79) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.TCPSSLOptions setJdkSslEngineOptions(io.vertx.core.net.JdkSSLEngineOptions)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setJdkSslEngineOptions(io.vertx.core.net.JdkSSLEngineOptions)>($r79) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.TCPSSLOptions setJdkSslEngineOptions(io.vertx.core.net.JdkSSLEngineOptions)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setKeyStoreOptions(io.vertx.core.net.JksOptions)>($r74) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setKeyStoreOptions(io.vertx.core.net.JksOptions)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setKeyStoreOptions(io.vertx.core.net.JksOptions)>($r74) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setKeyStoreOptions(io.vertx.core.net.JksOptions)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setKeyStoreOptions(io.vertx.core.net.JksOptions)>($r74) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.TCPSSLOptions setKeyStoreOptions(io.vertx.core.net.JksOptions)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setKeyStoreOptions(io.vertx.core.net.JksOptions)>($r74) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.TCPSSLOptions setKeyStoreOptions(io.vertx.core.net.JksOptions)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setKeyStoreOptions(io.vertx.core.net.JksOptions)>($r74) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.TCPSSLOptions setKeyStoreOptions(io.vertx.core.net.JksOptions)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setKeyStoreOptions(io.vertx.core.net.JksOptions)>($r74) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.TCPSSLOptions setKeyStoreOptions(io.vertx.core.net.JksOptions)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setOpenSslEngineOptions(io.vertx.core.net.OpenSSLEngineOptions)>($r69) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setOpenSslEngineOptions(io.vertx.core.net.OpenSSLEngineOptions)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setOpenSslEngineOptions(io.vertx.core.net.OpenSSLEngineOptions)>($r69) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setOpenSslEngineOptions(io.vertx.core.net.OpenSSLEngineOptions)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setOpenSslEngineOptions(io.vertx.core.net.OpenSSLEngineOptions)>($r69) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.TCPSSLOptions setOpenSslEngineOptions(io.vertx.core.net.OpenSSLEngineOptions)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setOpenSslEngineOptions(io.vertx.core.net.OpenSSLEngineOptions)>($r69) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.TCPSSLOptions setOpenSslEngineOptions(io.vertx.core.net.OpenSSLEngineOptions)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setOpenSslEngineOptions(io.vertx.core.net.OpenSSLEngineOptions)>($r69) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.TCPSSLOptions setOpenSslEngineOptions(io.vertx.core.net.OpenSSLEngineOptions)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setOpenSslEngineOptions(io.vertx.core.net.OpenSSLEngineOptions)>($r69) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.TCPSSLOptions setOpenSslEngineOptions(io.vertx.core.net.OpenSSLEngineOptions)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)>($r64) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)>($r64) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)>($r64) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.TCPSSLOptions setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)>($r64) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.TCPSSLOptions setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)>($r64) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.TCPSSLOptions setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)>($r64) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.TCPSSLOptions setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPemTrustOptions(io.vertx.core.net.PemTrustOptions)>($r59) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPemTrustOptions(io.vertx.core.net.PemTrustOptions)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPemTrustOptions(io.vertx.core.net.PemTrustOptions)>($r59) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setPemTrustOptions(io.vertx.core.net.PemTrustOptions)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPemTrustOptions(io.vertx.core.net.PemTrustOptions)>($r59) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.TCPSSLOptions setPemTrustOptions(io.vertx.core.net.PemTrustOptions)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPemTrustOptions(io.vertx.core.net.PemTrustOptions)>($r59) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.TCPSSLOptions setPemTrustOptions(io.vertx.core.net.PemTrustOptions)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPemTrustOptions(io.vertx.core.net.PemTrustOptions)>($r59) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.TCPSSLOptions setPemTrustOptions(io.vertx.core.net.PemTrustOptions)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPemTrustOptions(io.vertx.core.net.PemTrustOptions)>($r59) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.TCPSSLOptions setPemTrustOptions(io.vertx.core.net.PemTrustOptions)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)>($r54) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)>($r54) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)>($r54) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.TCPSSLOptions setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)>($r54) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.TCPSSLOptions setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)>($r54) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.TCPSSLOptions setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)>($r54) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.TCPSSLOptions setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPfxTrustOptions(io.vertx.core.net.PfxOptions)>($r49) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPfxTrustOptions(io.vertx.core.net.PfxOptions)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPfxTrustOptions(io.vertx.core.net.PfxOptions)>($r49) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setPfxTrustOptions(io.vertx.core.net.PfxOptions)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPfxTrustOptions(io.vertx.core.net.PfxOptions)>($r49) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.TCPSSLOptions setPfxTrustOptions(io.vertx.core.net.PfxOptions)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPfxTrustOptions(io.vertx.core.net.PfxOptions)>($r49) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.TCPSSLOptions setPfxTrustOptions(io.vertx.core.net.PfxOptions)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPfxTrustOptions(io.vertx.core.net.PfxOptions)>($r49) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.TCPSSLOptions setPfxTrustOptions(io.vertx.core.net.PfxOptions)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPfxTrustOptions(io.vertx.core.net.PfxOptions)>($r49) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.TCPSSLOptions setPfxTrustOptions(io.vertx.core.net.PfxOptions)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSoLinger(int)>($i1) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSoLinger(int)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSoLinger(int)>($i1) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setSoLinger(int)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSoLinger(int)>($i1) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.TCPSSLOptions setSoLinger(int)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSoLinger(int)>($i1) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.TCPSSLOptions setSoLinger(int)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSoLinger(int)>($i1) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.TCPSSLOptions setSoLinger(int)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSoLinger(int)>($i1) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.TCPSSLOptions setSoLinger(int)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSsl(boolean)>($z18) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSsl(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSsl(boolean)>($z18) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setSsl(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSsl(boolean)>($z18) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.TCPSSLOptions setSsl(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSsl(boolean)>($z18) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.TCPSSLOptions setSsl(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSsl(boolean)>($z18) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.TCPSSLOptions setSsl(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSsl(boolean)>($z18) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.TCPSSLOptions setSsl(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpCork(boolean)>($z16) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpCork(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpCork(boolean)>($z16) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setTcpCork(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpCork(boolean)>($z16) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.TCPSSLOptions setTcpCork(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpCork(boolean)>($z16) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.TCPSSLOptions setTcpCork(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpCork(boolean)>($z16) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.TCPSSLOptions setTcpCork(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpCork(boolean)>($z16) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.TCPSSLOptions setTcpCork(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpFastOpen(boolean)>($z14) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpFastOpen(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpFastOpen(boolean)>($z14) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setTcpFastOpen(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpFastOpen(boolean)>($z14) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.TCPSSLOptions setTcpFastOpen(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpFastOpen(boolean)>($z14) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.TCPSSLOptions setTcpFastOpen(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpFastOpen(boolean)>($z14) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.TCPSSLOptions setTcpFastOpen(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpFastOpen(boolean)>($z14) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.TCPSSLOptions setTcpFastOpen(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpKeepAlive(boolean)>($z12) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpKeepAlive(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpKeepAlive(boolean)>($z12) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setTcpKeepAlive(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpKeepAlive(boolean)>($z12) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.TCPSSLOptions setTcpKeepAlive(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpKeepAlive(boolean)>($z12) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.TCPSSLOptions setTcpKeepAlive(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpKeepAlive(boolean)>($z12) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.TCPSSLOptions setTcpKeepAlive(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpKeepAlive(boolean)>($z12) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.TCPSSLOptions setTcpKeepAlive(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpNoDelay(boolean)>($z10) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpNoDelay(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpNoDelay(boolean)>($z10) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setTcpNoDelay(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpNoDelay(boolean)>($z10) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.TCPSSLOptions setTcpNoDelay(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpNoDelay(boolean)>($z10) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.TCPSSLOptions setTcpNoDelay(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpNoDelay(boolean)>($z10) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.TCPSSLOptions setTcpNoDelay(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpNoDelay(boolean)>($z10) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.TCPSSLOptions setTcpNoDelay(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpQuickAck(boolean)>($z8) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpQuickAck(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpQuickAck(boolean)>($z8) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setTcpQuickAck(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpQuickAck(boolean)>($z8) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.TCPSSLOptions setTcpQuickAck(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpQuickAck(boolean)>($z8) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.TCPSSLOptions setTcpQuickAck(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpQuickAck(boolean)>($z8) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.TCPSSLOptions setTcpQuickAck(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpQuickAck(boolean)>($z8) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.TCPSSLOptions setTcpQuickAck(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTrustStoreOptions(io.vertx.core.net.JksOptions)>($r16) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTrustStoreOptions(io.vertx.core.net.JksOptions)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTrustStoreOptions(io.vertx.core.net.JksOptions)>($r16) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setTrustStoreOptions(io.vertx.core.net.JksOptions)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTrustStoreOptions(io.vertx.core.net.JksOptions)>($r16) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.TCPSSLOptions setTrustStoreOptions(io.vertx.core.net.JksOptions)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTrustStoreOptions(io.vertx.core.net.JksOptions)>($r16) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.TCPSSLOptions setTrustStoreOptions(io.vertx.core.net.JksOptions)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTrustStoreOptions(io.vertx.core.net.JksOptions)>($r16) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.TCPSSLOptions setTrustStoreOptions(io.vertx.core.net.JksOptions)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTrustStoreOptions(io.vertx.core.net.JksOptions)>($r16) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.TCPSSLOptions setTrustStoreOptions(io.vertx.core.net.JksOptions)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setUseAlpn(boolean)>($z5) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setUseAlpn(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setUseAlpn(boolean)>($z5) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setUseAlpn(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setUseAlpn(boolean)>($z5) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.TCPSSLOptions setUseAlpn(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setUseAlpn(boolean)>($z5) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.TCPSSLOptions setUseAlpn(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setUseAlpn(boolean)>($z5) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.TCPSSLOptions setUseAlpn(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setUseAlpn(boolean)>($z5) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.TCPSSLOptions setUseAlpn(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setUsePooledBuffers(boolean)>($z3) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setUsePooledBuffers(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setUsePooledBuffers(boolean)>($z3) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setUsePooledBuffers(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setUsePooledBuffers(boolean)>($z3) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.TCPSSLOptions setUsePooledBuffers(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setUsePooledBuffers(boolean)>($z3) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.TCPSSLOptions setUsePooledBuffers(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setUsePooledBuffers(boolean)>($z3) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.TCPSSLOptions setUsePooledBuffers(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setUsePooledBuffers(boolean)>($z3) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.TCPSSLOptions setUsePooledBuffers(boolean)>
VIRTUAL edge: $i2 = virtualinvoke $r90.<java.lang.Number: int intValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.util.concurrent.atomic.AtomicLong: int intValue()>
VIRTUAL edge: $i2 = virtualinvoke $r90.<java.lang.Number: int intValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.lang.Float: int intValue()>
VIRTUAL edge: $i2 = virtualinvoke $r90.<java.lang.Number: int intValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.math.BigDecimal: int intValue()>
VIRTUAL edge: $i2 = virtualinvoke $r90.<java.lang.Number: int intValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.lang.Double: int intValue()>
VIRTUAL edge: $i2 = virtualinvoke $r90.<java.lang.Number: int intValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.lang.Long: int intValue()>
VIRTUAL edge: $i2 = virtualinvoke $r90.<java.lang.Number: int intValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.util.concurrent.atomic.AtomicInteger: int intValue()>
VIRTUAL edge: $i2 = virtualinvoke $r90.<java.lang.Number: int intValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.lang.Short: int intValue()>
VIRTUAL edge: $i2 = virtualinvoke $r90.<java.lang.Number: int intValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.math.BigInteger: int intValue()>
VIRTUAL edge: $i2 = virtualinvoke $r90.<java.lang.Number: int intValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.lang.Byte: int intValue()>
VIRTUAL edge: $i2 = virtualinvoke $r90.<java.lang.Number: int intValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.lang.Integer: int intValue()>
SPECIAL edge: specialinvoke $r79.<io.vertx.core.net.JdkSSLEngineOptions: void <init>(io.vertx.core.json.JsonObject)>($r81) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.JdkSSLEngineOptions: void <init>(io.vertx.core.json.JsonObject)>
SPECIAL edge: specialinvoke $r74.<io.vertx.core.net.JksOptions: void <init>(io.vertx.core.json.JsonObject)>($r76) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.JksOptions: void <init>(io.vertx.core.json.JsonObject)>
SPECIAL edge: specialinvoke $r69.<io.vertx.core.net.OpenSSLEngineOptions: void <init>(io.vertx.core.json.JsonObject)>($r71) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.OpenSSLEngineOptions: void <init>(io.vertx.core.json.JsonObject)>
SPECIAL edge: specialinvoke $r64.<io.vertx.core.net.PemKeyCertOptions: void <init>(io.vertx.core.json.JsonObject)>($r66) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.PemKeyCertOptions: void <init>(io.vertx.core.json.JsonObject)>
SPECIAL edge: specialinvoke $r59.<io.vertx.core.net.PemTrustOptions: void <init>(io.vertx.core.json.JsonObject)>($r61) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.PemTrustOptions: void <init>(io.vertx.core.json.JsonObject)>
SPECIAL edge: specialinvoke $r54.<io.vertx.core.net.PfxOptions: void <init>(io.vertx.core.json.JsonObject)>($r56) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.PfxOptions: void <init>(io.vertx.core.json.JsonObject)>
SPECIAL edge: specialinvoke $r49.<io.vertx.core.net.PfxOptions: void <init>(io.vertx.core.json.JsonObject)>($r51) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.PfxOptions: void <init>(io.vertx.core.json.JsonObject)>
VIRTUAL edge: $i1 = virtualinvoke $r46.<java.lang.Number: int intValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.util.concurrent.atomic.AtomicLong: int intValue()>
VIRTUAL edge: $i1 = virtualinvoke $r46.<java.lang.Number: int intValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.lang.Float: int intValue()>
VIRTUAL edge: $i1 = virtualinvoke $r46.<java.lang.Number: int intValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.math.BigDecimal: int intValue()>
VIRTUAL edge: $i1 = virtualinvoke $r46.<java.lang.Number: int intValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.lang.Double: int intValue()>
VIRTUAL edge: $i1 = virtualinvoke $r46.<java.lang.Number: int intValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.lang.Long: int intValue()>
VIRTUAL edge: $i1 = virtualinvoke $r46.<java.lang.Number: int intValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.util.concurrent.atomic.AtomicInteger: int intValue()>
VIRTUAL edge: $i1 = virtualinvoke $r46.<java.lang.Number: int intValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.lang.Short: int intValue()>
VIRTUAL edge: $i1 = virtualinvoke $r46.<java.lang.Number: int intValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.math.BigInteger: int intValue()>
VIRTUAL edge: $i1 = virtualinvoke $r46.<java.lang.Number: int intValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.lang.Byte: int intValue()>
VIRTUAL edge: $i1 = virtualinvoke $r46.<java.lang.Number: int intValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.lang.Integer: int intValue()>
VIRTUAL edge: $z18 = virtualinvoke $r42.<java.lang.Boolean: boolean booleanValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.lang.Boolean: boolean booleanValue()>
VIRTUAL edge: $z16 = virtualinvoke $r38.<java.lang.Boolean: boolean booleanValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.lang.Boolean: boolean booleanValue()>
VIRTUAL edge: $z14 = virtualinvoke $r34.<java.lang.Boolean: boolean booleanValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.lang.Boolean: boolean booleanValue()>
VIRTUAL edge: $z12 = virtualinvoke $r30.<java.lang.Boolean: boolean booleanValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.lang.Boolean: boolean booleanValue()>
VIRTUAL edge: $z10 = virtualinvoke $r26.<java.lang.Boolean: boolean booleanValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.lang.Boolean: boolean booleanValue()>
VIRTUAL edge: $z8 = virtualinvoke $r22.<java.lang.Boolean: boolean booleanValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.lang.Boolean: boolean booleanValue()>
SPECIAL edge: specialinvoke $r16.<io.vertx.core.net.JksOptions: void <init>(io.vertx.core.json.JsonObject)>($r18) in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.JksOptions: void <init>(io.vertx.core.json.JsonObject)>
VIRTUAL edge: $z5 = virtualinvoke $r13.<java.lang.Boolean: boolean booleanValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.lang.Boolean: boolean booleanValue()>
VIRTUAL edge: $z3 = virtualinvoke $r9.<java.lang.Boolean: boolean booleanValue()>() in <io.vertx.core.net.TCPSSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.TCPSSLOptions)> ==> <java.lang.Boolean: boolean booleanValue()>
STATIC edge: staticinvoke <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)>(r1, r0) in <io.vertx.core.net.JksOptions: void <init>(io.vertx.core.json.JsonObject)> ==> <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)>
STATIC edge: staticinvoke <io.vertx.core.net.OpenSSLEngineOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.OpenSSLEngineOptions)>(r1, r0) in <io.vertx.core.net.OpenSSLEngineOptions: void <init>(io.vertx.core.json.JsonObject)> ==> <io.vertx.core.net.OpenSSLEngineOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.OpenSSLEngineOptions)>
STATIC edge: staticinvoke <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)>(r1, r0) in <io.vertx.core.net.PemKeyCertOptions: void <init>(io.vertx.core.json.JsonObject)> ==> <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)>
STATIC edge: staticinvoke <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)>(r1, r0) in <io.vertx.core.net.PemTrustOptions: void <init>(io.vertx.core.json.JsonObject)> ==> <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)>
STATIC edge: staticinvoke <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)>(r1, r0) in <io.vertx.core.net.PfxOptions: void <init>(io.vertx.core.json.JsonObject)> ==> <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)>
CLINIT edge: $r12 = staticinvoke <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer(byte[])>($r11) in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <io.vertx.core.buffer.Buffer: void <clinit>()>
STATIC edge: $r12 = staticinvoke <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer(byte[])>($r11) in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer(byte[])>
STATIC edge: $r8 = staticinvoke <java.util.Base64: java.util.Base64$Decoder getDecoder()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <java.util.Base64: java.util.Base64$Decoder getDecoder()>
CLINIT edge: $r41 = staticinvoke <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer(byte[])>($r40) in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.buffer.Buffer: void <clinit>()>
STATIC edge: $r10 = staticinvoke <io.vertx.core.net.PemKeyCertOptionsConverter$lambda_fromJson_3__83: java.util.function.Consumer bootstrap$(java.util.ArrayList)>($r7) in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.net.PemKeyCertOptionsConverter$lambda_fromJson_3__83: java.util.function.Consumer bootstrap$(java.util.ArrayList)>
STATIC edge: $r18 = staticinvoke <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer(byte[])>($r17) in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer(byte[])>
STATIC edge: $r14 = staticinvoke <java.util.Base64: java.util.Base64$Decoder getDecoder()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <java.util.Base64: java.util.Base64$Decoder getDecoder()>
STATIC edge: $r24 = staticinvoke <io.vertx.core.net.PemKeyCertOptionsConverter$lambda_fromJson_2__84: java.util.function.Consumer bootstrap$(java.util.ArrayList)>($r21) in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.net.PemKeyCertOptionsConverter$lambda_fromJson_2__84: java.util.function.Consumer bootstrap$(java.util.ArrayList)>
STATIC edge: $r34 = staticinvoke <io.vertx.core.net.PemKeyCertOptionsConverter$lambda_fromJson_1__85: java.util.function.Consumer bootstrap$(java.util.ArrayList)>($r31) in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.net.PemKeyCertOptionsConverter$lambda_fromJson_1__85: java.util.function.Consumer bootstrap$(java.util.ArrayList)>
STATIC edge: $r41 = staticinvoke <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer(byte[])>($r40) in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer(byte[])>
STATIC edge: $r37 = staticinvoke <java.util.Base64: java.util.Base64$Decoder getDecoder()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <java.util.Base64: java.util.Base64$Decoder getDecoder()>
STATIC edge: $r47 = staticinvoke <io.vertx.core.net.PemKeyCertOptionsConverter$lambda_fromJson_0__86: java.util.function.Consumer bootstrap$(java.util.ArrayList)>($r44) in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.net.PemKeyCertOptionsConverter$lambda_fromJson_0__86: java.util.function.Consumer bootstrap$(java.util.ArrayList)>
CLINIT edge: $r18 = staticinvoke <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer(byte[])>($r17) in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.buffer.Buffer: void <clinit>()>
STATIC edge: $r14 = staticinvoke <io.vertx.core.net.PemTrustOptionsConverter$lambda_fromJson_0__88: java.util.function.Consumer bootstrap$(io.vertx.core.net.PemTrustOptions)>(r8) in <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)> ==> <io.vertx.core.net.PemTrustOptionsConverter$lambda_fromJson_0__88: java.util.function.Consumer bootstrap$(io.vertx.core.net.PemTrustOptions)>
STATIC edge: $r10 = staticinvoke <io.vertx.core.net.PemTrustOptionsConverter$lambda_fromJson_1__87: java.util.function.Consumer bootstrap$(io.vertx.core.net.PemTrustOptions)>(r8) in <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)> ==> <io.vertx.core.net.PemTrustOptionsConverter$lambda_fromJson_1__87: java.util.function.Consumer bootstrap$(io.vertx.core.net.PemTrustOptions)>
CLINIT edge: $r12 = staticinvoke <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer(byte[])>($r11) in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.buffer.Buffer: void <clinit>()>
STATIC edge: $r12 = staticinvoke <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer(byte[])>($r11) in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer(byte[])>
STATIC edge: $r8 = staticinvoke <java.util.Base64: java.util.Base64$Decoder getDecoder()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <java.util.Base64: java.util.Base64$Decoder getDecoder()>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.net.TCPSSLOptionsConverter$lambda_fromJson_3__67: void <init>(java.util.LinkedHashSet)>($r0) in <io.vertx.core.net.TCPSSLOptionsConverter$lambda_fromJson_3__67: java.util.function.Consumer bootstrap$(java.util.LinkedHashSet)> ==> <io.vertx.core.net.TCPSSLOptionsConverter$lambda_fromJson_3__67: void <init>(java.util.LinkedHashSet)>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.net.TCPSSLOptionsConverter$lambda_fromJson_2__68: void <init>(io.vertx.core.net.TCPSSLOptions)>($r0) in <io.vertx.core.net.TCPSSLOptionsConverter$lambda_fromJson_2__68: java.util.function.Consumer bootstrap$(io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.TCPSSLOptionsConverter$lambda_fromJson_2__68: void <init>(io.vertx.core.net.TCPSSLOptions)>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.net.TCPSSLOptionsConverter$lambda_fromJson_1__69: void <init>(io.vertx.core.net.TCPSSLOptions)>($r0) in <io.vertx.core.net.TCPSSLOptionsConverter$lambda_fromJson_1__69: java.util.function.Consumer bootstrap$(io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.TCPSSLOptionsConverter$lambda_fromJson_1__69: void <init>(io.vertx.core.net.TCPSSLOptions)>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.net.TCPSSLOptionsConverter$lambda_fromJson_0__70: void <init>(io.vertx.core.net.TCPSSLOptions)>($r0) in <io.vertx.core.net.TCPSSLOptionsConverter$lambda_fromJson_0__70: java.util.function.Consumer bootstrap$(io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.TCPSSLOptionsConverter$lambda_fromJson_0__70: void <init>(io.vertx.core.net.TCPSSLOptions)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.json.JsonArray: java.util.Iterator iterator()> ==> <java.util.AbstractList: java.util.Iterator iterator()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.json.JsonArray: java.util.Iterator iterator()> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.json.JsonArray: java.util.Iterator iterator()> ==> <java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.json.JsonArray: java.util.Iterator iterator()> ==> <java.util.ArrayList: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.json.JsonArray$Iter: void <init>(io.vertx.core.json.JsonArray,java.util.Iterator)>(r1, $r3) in <io.vertx.core.json.JsonArray: java.util.Iterator iterator()> ==> <io.vertx.core.json.JsonArray$Iter: void <init>(io.vertx.core.json.JsonArray,java.util.Iterator)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.impl.Http2HeadersAdaptor: java.util.List entries()>() in <io.vertx.core.http.impl.Http2HeadersAdaptor: java.util.Iterator iterator()> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor: java.util.List entries()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.http.impl.Http2HeadersAdaptor: java.util.Iterator iterator()> ==> <java.util.AbstractList: java.util.Iterator iterator()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.http.impl.Http2HeadersAdaptor: java.util.Iterator iterator()> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.http.impl.Http2HeadersAdaptor: java.util.Iterator iterator()> ==> <java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.http.impl.Http2HeadersAdaptor: java.util.Iterator iterator()> ==> <java.util.ArrayList: java.util.Iterator iterator()>
STATIC edge: $r4 = staticinvoke <io.vertx.core.http.impl.Http2HeadersAdaptor$lambda_entries_0__89: java.util.function.Function bootstrap$(io.vertx.core.http.impl.Http2HeadersAdaptor)>(r0) in <io.vertx.core.http.impl.Http2HeadersAdaptor: java.util.List entries()> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$lambda_entries_0__89: java.util.function.Function bootstrap$(io.vertx.core.http.impl.Http2HeadersAdaptor)>
STATIC edge: $r6 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>() in <io.vertx.core.http.impl.Http2HeadersAdaptor: java.util.List entries()> ==> <java.util.stream.Collectors: java.util.stream.Collector toList()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.impl.headers.VertxHttpHeaders: java.util.List entries()>() in <io.vertx.core.http.impl.headers.VertxHttpHeaders: java.util.Iterator iterator()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders: java.util.List entries()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.http.impl.headers.VertxHttpHeaders: java.util.Iterator iterator()> ==> <java.util.AbstractList: java.util.Iterator iterator()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.http.impl.headers.VertxHttpHeaders: java.util.Iterator iterator()> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.http.impl.headers.VertxHttpHeaders: java.util.Iterator iterator()> ==> <java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.http.impl.headers.VertxHttpHeaders: java.util.Iterator iterator()> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>() in <io.vertx.core.json.JsonObject: java.util.Iterator iterator()> ==> <java.util.HashMap: java.util.Set entrySet()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>() in <io.vertx.core.json.JsonObject: java.util.Iterator iterator()> ==> <java.util.IdentityHashMap: java.util.Set entrySet()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>() in <io.vertx.core.json.JsonObject: java.util.Iterator iterator()> ==> <java.util.Hashtable: java.util.Set entrySet()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>() in <io.vertx.core.json.JsonObject: java.util.Iterator iterator()> ==> <java.util.EnumMap: java.util.Set entrySet()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>() in <io.vertx.core.json.JsonObject: java.util.Iterator iterator()> ==> <java.util.concurrent.ConcurrentHashMap: java.util.Set entrySet()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>() in <io.vertx.core.json.JsonObject: java.util.Iterator iterator()> ==> <java.security.Provider: java.util.Set entrySet()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>() in <io.vertx.core.json.JsonObject: java.util.Iterator iterator()> ==> <java.util.jar.Attributes: java.util.Set entrySet()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>() in <io.vertx.core.json.JsonObject: java.util.Iterator iterator()> ==> <java.util.TreeMap: java.util.Set entrySet()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>() in <io.vertx.core.json.JsonObject: java.util.Iterator iterator()> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Set entrySet()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>() in <io.vertx.core.json.JsonObject: java.util.Iterator iterator()> ==> <java.util.WeakHashMap: java.util.Set entrySet()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>() in <io.vertx.core.json.JsonObject: java.util.Iterator iterator()> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>() in <io.vertx.core.json.JsonObject: java.util.Iterator iterator()> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2: java.util.Iterator iterator()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>() in <io.vertx.core.json.JsonObject: java.util.Iterator iterator()> ==> <io.vertx.core.impl.ConcurrentHashSet: java.util.Iterator iterator()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>() in <io.vertx.core.json.JsonObject: java.util.Iterator iterator()> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$1: java.util.Iterator iterator()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>() in <io.vertx.core.json.JsonObject: java.util.Iterator iterator()> ==> <java.util.TreeSet: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.json.JsonObject$Iter: void <init>(io.vertx.core.json.JsonObject,java.util.Iterator)>(r1, $r4) in <io.vertx.core.json.JsonObject: java.util.Iterator iterator()> ==> <io.vertx.core.json.JsonObject$Iter: void <init>(io.vertx.core.json.JsonObject,java.util.Iterator)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setAcceptBacklog(int)>(i0) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetServerOptions setAcceptBacklog(int)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setAcceptBacklog(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setClientAuth(io.vertx.core.http.ClientAuth)>(r1) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetServerOptions setClientAuth(io.vertx.core.http.ClientAuth)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setClientAuth(io.vertx.core.http.ClientAuth)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setClientAuthRequired(boolean)>(z0) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetServerOptions setClientAuthRequired(boolean)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setClientAuthRequired(boolean)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setHost(java.lang.String)>(r1) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetServerOptions setHost(java.lang.String)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setHost(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setPort(int)>(i0) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetServerOptions setPort(int)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setPort(int)>
SPECIAL edge: specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("port p must be in range 0 <= p <= 65535") in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setPort(int)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setSni(boolean)>(z0) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetServerOptions setSni(boolean)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setSni(boolean)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: boolean booleanValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<io.netty.util.concurrent.AbstractEventExecutorGroup: void <init>()>() in <io.vertx.core.net.impl.VertxEventLoopGroup: void <init>()> ==> <io.netty.util.concurrent.AbstractEventExecutorGroup: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.ArrayList: void <init>()>() in <io.vertx.core.net.impl.VertxEventLoopGroup: void <init>()> ==> <java.util.ArrayList: void <init>()>
SPECIAL edge: specialinvoke $r2.<io.vertx.core.net.impl.VertxEventLoopGroup$1: void <init>(io.vertx.core.net.impl.VertxEventLoopGroup)>(r0) in <io.vertx.core.net.impl.VertxEventLoopGroup: void <init>()> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$1: void <init>(io.vertx.core.net.impl.VertxEventLoopGroup)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.impl.HandlerManager: void <init>(io.vertx.core.net.impl.VertxEventLoopGroup)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>() in <io.vertx.core.net.impl.HandlerManager: void <init>(io.vertx.core.net.impl.VertxEventLoopGroup)> ==> <java.util.concurrent.ConcurrentHashMap: void <init>()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.impl.NetServerImpl$NetSocketStream: void <init>(io.vertx.core.net.impl.NetServerImpl)>(r1) in <io.vertx.core.net.impl.NetServerImpl$NetSocketStream: void <init>(io.vertx.core.net.impl.NetServerImpl,io.vertx.core.net.impl.NetServerImpl$1)> ==> <io.vertx.core.net.impl.NetServerImpl$NetSocketStream: void <init>(io.vertx.core.net.impl.NetServerImpl)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: void <init>(io.vertx.core.net.TCPSSLOptions)>(r1) in <io.vertx.core.net.NetServerOptions: void <init>(io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.net.TCPSSLOptions: void <init>(io.vertx.core.net.TCPSSLOptions)>
VIRTUAL edge: $i0 = virtualinvoke r1.<io.vertx.core.net.NetServerOptions: int getPort()>() in <io.vertx.core.net.NetServerOptions: void <init>(io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.net.NetServerOptions: int getPort()>
VIRTUAL edge: $r2 = virtualinvoke r1.<io.vertx.core.net.NetServerOptions: java.lang.String getHost()>() in <io.vertx.core.net.NetServerOptions: void <init>(io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.net.NetServerOptions: java.lang.String getHost()>
VIRTUAL edge: $i1 = virtualinvoke r1.<io.vertx.core.net.NetServerOptions: int getAcceptBacklog()>() in <io.vertx.core.net.NetServerOptions: void <init>(io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.net.NetServerOptions: int getAcceptBacklog()>
VIRTUAL edge: $r3 = virtualinvoke r1.<io.vertx.core.net.NetServerOptions: io.vertx.core.http.ClientAuth getClientAuth()>() in <io.vertx.core.net.NetServerOptions: void <init>(io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.http.ClientAuth getClientAuth()>
VIRTUAL edge: $z0 = virtualinvoke r1.<io.vertx.core.net.NetServerOptions: boolean isSni()>() in <io.vertx.core.net.NetServerOptions: void <init>(io.vertx.core.net.NetServerOptions)> ==> <io.vertx.core.net.NetServerOptions: boolean isSni()>
CLINIT edge: $r23 = <io.vertx.core.net.TCPSSLOptions: java.util.concurrent.TimeUnit DEFAULT_IDLE_TIMEOUT_TIME_UNIT> in <io.vertx.core.net.TCPSSLOptions: void <init>(io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.TCPSSLOptions: void <clinit>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.impl.SSLHelper: void <init>(io.vertx.core.net.NetServerOptions,io.vertx.core.net.KeyCertOptions,io.vertx.core.net.TrustOptions)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.util.concurrent.ConcurrentHashMap: void <init>()>() in <io.vertx.core.net.impl.SSLHelper: void <init>(io.vertx.core.net.NetServerOptions,io.vertx.core.net.KeyCertOptions,io.vertx.core.net.TrustOptions)> ==> <java.util.concurrent.ConcurrentHashMap: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke r3.<io.vertx.core.net.NetServerOptions: boolean isSsl()>() in <io.vertx.core.net.impl.SSLHelper: void <init>(io.vertx.core.net.NetServerOptions,io.vertx.core.net.KeyCertOptions,io.vertx.core.net.TrustOptions)> ==> <io.vertx.core.net.TCPSSLOptions: boolean isSsl()>
VIRTUAL edge: $r7 = virtualinvoke r3.<io.vertx.core.net.NetServerOptions: io.vertx.core.http.ClientAuth getClientAuth()>() in <io.vertx.core.net.impl.SSLHelper: void <init>(io.vertx.core.net.NetServerOptions,io.vertx.core.net.KeyCertOptions,io.vertx.core.net.TrustOptions)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.http.ClientAuth getClientAuth()>
VIRTUAL edge: $r8 = virtualinvoke r3.<io.vertx.core.net.NetServerOptions: java.util.List getCrlPaths()>() in <io.vertx.core.net.impl.SSLHelper: void <init>(io.vertx.core.net.NetServerOptions,io.vertx.core.net.KeyCertOptions,io.vertx.core.net.TrustOptions)> ==> <io.vertx.core.net.TCPSSLOptions: java.util.List getCrlPaths()>
VIRTUAL edge: $r17 = virtualinvoke r3.<io.vertx.core.net.NetServerOptions: java.util.List getCrlPaths()>() in <io.vertx.core.net.impl.SSLHelper: void <init>(io.vertx.core.net.NetServerOptions,io.vertx.core.net.KeyCertOptions,io.vertx.core.net.TrustOptions)> ==> <io.vertx.core.net.TCPSSLOptions: java.util.List getCrlPaths()>
VIRTUAL edge: $r9 = virtualinvoke r3.<io.vertx.core.net.NetServerOptions: java.util.List getCrlValues()>() in <io.vertx.core.net.impl.SSLHelper: void <init>(io.vertx.core.net.NetServerOptions,io.vertx.core.net.KeyCertOptions,io.vertx.core.net.TrustOptions)> ==> <io.vertx.core.net.TCPSSLOptions: java.util.List getCrlValues()>
VIRTUAL edge: $r15 = virtualinvoke r3.<io.vertx.core.net.NetServerOptions: java.util.List getCrlValues()>() in <io.vertx.core.net.impl.SSLHelper: void <init>(io.vertx.core.net.NetServerOptions,io.vertx.core.net.KeyCertOptions,io.vertx.core.net.TrustOptions)> ==> <io.vertx.core.net.TCPSSLOptions: java.util.List getCrlValues()>
VIRTUAL edge: $r10 = virtualinvoke r3.<io.vertx.core.net.NetServerOptions: java.util.Set getEnabledCipherSuites()>() in <io.vertx.core.net.impl.SSLHelper: void <init>(io.vertx.core.net.NetServerOptions,io.vertx.core.net.KeyCertOptions,io.vertx.core.net.TrustOptions)> ==> <io.vertx.core.net.TCPSSLOptions: java.util.Set getEnabledCipherSuites()>
VIRTUAL edge: $r11 = virtualinvoke r3.<io.vertx.core.net.NetServerOptions: java.util.Set getEnabledSecureTransportProtocols()>() in <io.vertx.core.net.impl.SSLHelper: void <init>(io.vertx.core.net.NetServerOptions,io.vertx.core.net.KeyCertOptions,io.vertx.core.net.TrustOptions)> ==> <io.vertx.core.net.TCPSSLOptions: java.util.Set getEnabledSecureTransportProtocols()>
VIRTUAL edge: $r12 = virtualinvoke r3.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.SSLEngineOptions getSslEngineOptions()>() in <io.vertx.core.net.impl.SSLHelper: void <init>(io.vertx.core.net.NetServerOptions,io.vertx.core.net.KeyCertOptions,io.vertx.core.net.TrustOptions)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.SSLEngineOptions getSslEngineOptions()>
VIRTUAL edge: $r13 = virtualinvoke r3.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.SSLEngineOptions getSslEngineOptions()>() in <io.vertx.core.net.impl.SSLHelper: void <init>(io.vertx.core.net.NetServerOptions,io.vertx.core.net.KeyCertOptions,io.vertx.core.net.TrustOptions)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.SSLEngineOptions getSslEngineOptions()>
VIRTUAL edge: $z5 = virtualinvoke r3.<io.vertx.core.net.NetServerOptions: boolean isSni()>() in <io.vertx.core.net.impl.SSLHelper: void <init>(io.vertx.core.net.NetServerOptions,io.vertx.core.net.KeyCertOptions,io.vertx.core.net.TrustOptions)> ==> <io.vertx.core.net.NetServerOptions: boolean isSni()>
SPECIAL edge: specialinvoke $r19.<java.util.ArrayList: void <init>(java.util.Collection)>($r17) in <io.vertx.core.net.impl.SSLHelper: void <init>(io.vertx.core.net.NetServerOptions,io.vertx.core.net.KeyCertOptions,io.vertx.core.net.TrustOptions)> ==> <java.util.ArrayList: void <init>(java.util.Collection)>
SPECIAL edge: specialinvoke $r20.<java.util.ArrayList: void <init>(java.util.Collection)>($r15) in <io.vertx.core.net.impl.SSLHelper: void <init>(io.vertx.core.net.NetServerOptions,io.vertx.core.net.KeyCertOptions,io.vertx.core.net.TrustOptions)> ==> <java.util.ArrayList: void <init>(java.util.Collection)>
VIRTUAL edge: $z3 = virtualinvoke $r14.<io.vertx.core.net.OpenSSLEngineOptions: boolean isSessionCacheEnabled()>() in <io.vertx.core.net.impl.SSLHelper: void <init>(io.vertx.core.net.NetServerOptions,io.vertx.core.net.KeyCertOptions,io.vertx.core.net.TrustOptions)> ==> <io.vertx.core.net.OpenSSLEngineOptions: boolean isSessionCacheEnabled()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.impl.VertxImpl: io.vertx.core.impl.ContextImpl getContext()>() in <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.ContextInternal getContext()> ==> <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.ContextImpl getContext()>
VIRTUAL edge: r10 = virtualinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.SSLEngineOptions getSslEngineOptions()>() in <io.vertx.core.net.impl.SSLHelper: io.vertx.core.net.SSLEngineOptions resolveEngineOptions(io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.SSLEngineOptions getSslEngineOptions()>
VIRTUAL edge: $z6 = virtualinvoke r0.<io.vertx.core.net.TCPSSLOptions: boolean isUseAlpn()>() in <io.vertx.core.net.impl.SSLHelper: io.vertx.core.net.SSLEngineOptions resolveEngineOptions(io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.TCPSSLOptions: boolean isUseAlpn()>
VIRTUAL edge: $z9 = virtualinvoke r0.<io.vertx.core.net.TCPSSLOptions: boolean isUseAlpn()>() in <io.vertx.core.net.impl.SSLHelper: io.vertx.core.net.SSLEngineOptions resolveEngineOptions(io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.TCPSSLOptions: boolean isUseAlpn()>
SPECIAL edge: specialinvoke $r9.<io.vertx.core.net.JdkSSLEngineOptions: void <init>()>() in <io.vertx.core.net.impl.SSLHelper: io.vertx.core.net.SSLEngineOptions resolveEngineOptions(io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.JdkSSLEngineOptions: void <init>()>
SPECIAL edge: specialinvoke $r8.<io.vertx.core.net.OpenSSLEngineOptions: void <init>()>() in <io.vertx.core.net.impl.SSLHelper: io.vertx.core.net.SSLEngineOptions resolveEngineOptions(io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.OpenSSLEngineOptions: void <init>()>
SPECIAL edge: specialinvoke $r7.<io.vertx.core.net.JdkSSLEngineOptions: void <init>()>() in <io.vertx.core.net.impl.SSLHelper: io.vertx.core.net.SSLEngineOptions resolveEngineOptions(io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.JdkSSLEngineOptions: void <init>()>
SPECIAL edge: specialinvoke $r3.<io.vertx.core.VertxException: void <init>(java.lang.String)>("OpenSSL is not available") in <io.vertx.core.net.impl.SSLHelper: io.vertx.core.net.SSLEngineOptions resolveEngineOptions(io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.VertxException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r3.<io.vertx.core.VertxException: java.lang.Throwable initCause(java.lang.Throwable)>(r5) in <io.vertx.core.net.impl.SSLHelper: io.vertx.core.net.SSLEngineOptions resolveEngineOptions(io.vertx.core.net.TCPSSLOptions)> ==> <java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>
SPECIAL edge: specialinvoke $r2.<io.vertx.core.VertxException: void <init>(java.lang.String)>("ALPN not available for JDK SSL/TLS engine") in <io.vertx.core.net.impl.SSLHelper: io.vertx.core.net.SSLEngineOptions resolveEngineOptions(io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.VertxException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.VertxException: void <init>(java.lang.String)>("ALPN is not available for OpenSSL SSL/TLS engine") in <io.vertx.core.net.impl.SSLHelper: io.vertx.core.net.SSLEngineOptions resolveEngineOptions(io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.VertxException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("getApplicationProtocol", $r1) in <io.vertx.core.net.JdkSSLEngineOptions: boolean isAlpnAvailable()> ==> <java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.Class: java.lang.ClassLoader getClassLoader()>() in <io.vertx.core.net.JdkSSLEngineOptions: boolean isAlpnAvailable()> ==> <java.lang.Class: java.lang.ClassLoader getClassLoader()>
VIRTUAL edge: virtualinvoke $r14.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>("sun.security.ssl.ALPNExtension") in <io.vertx.core.net.JdkSSLEngineOptions: boolean isAlpnAvailable()> ==> <java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>
VIRTUAL edge: $z2 = virtualinvoke $r16.<java.lang.Boolean: boolean booleanValue()>() in <io.vertx.core.net.JdkSSLEngineOptions: boolean isAlpnAvailable()> ==> <java.lang.Boolean: boolean booleanValue()>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.net.impl.NetServerImpl: void close(io.vertx.core.Handler)>(null) in <io.vertx.core.net.impl.NetServerImpl: void close()> ==> <io.vertx.core.net.impl.NetServerImpl: void close(io.vertx.core.Handler)>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.net.impl.NetServerImpl: void listen(io.vertx.core.Handler,io.vertx.core.net.SocketAddress,io.vertx.core.Handler)>($r3, r1, $r4) in <io.vertx.core.net.impl.NetServerImpl: io.vertx.core.net.NetServer listen(io.vertx.core.net.SocketAddress,io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.NetServerImpl: void listen(io.vertx.core.Handler,io.vertx.core.net.SocketAddress,io.vertx.core.Handler)>
CLINIT edge: $r58 = <io.vertx.core.net.impl.NetServerImpl: io.vertx.core.logging.Logger log> in <io.vertx.core.net.impl.NetServerImpl: void listen(io.vertx.core.Handler,io.vertx.core.net.SocketAddress,io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.NetServerImpl: void <clinit>()>
STATIC edge: $r67 = staticinvoke <io.vertx.core.net.impl.NetServerImpl$lambda_listen_3__91: io.vertx.core.Handler bootstrap$(io.vertx.core.net.impl.NetServerImpl,io.vertx.core.Handler)>(r1, r34) in <io.vertx.core.net.impl.NetServerImpl: void listen(io.vertx.core.Handler,io.vertx.core.net.SocketAddress,io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.NetServerImpl$lambda_listen_3__91: io.vertx.core.Handler bootstrap$(io.vertx.core.net.impl.NetServerImpl,io.vertx.core.Handler)>
STATIC edge: $r60 = staticinvoke <io.vertx.core.net.impl.NetServerImpl$lambda_listen_1__92: io.vertx.core.Handler bootstrap$(io.vertx.core.Handler,java.lang.Throwable)>(r34, $r56) in <io.vertx.core.net.impl.NetServerImpl: void listen(io.vertx.core.Handler,io.vertx.core.net.SocketAddress,io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.NetServerImpl$lambda_listen_1__92: io.vertx.core.Handler bootstrap$(io.vertx.core.Handler,java.lang.Throwable)>
STATIC edge: $r33 = staticinvoke <io.vertx.core.net.impl.NetServerImpl$lambda_listen_0__90: io.vertx.core.Handler bootstrap$(io.vertx.core.net.impl.NetServerImpl,java.lang.String)>(r1, r9) in <io.vertx.core.net.impl.NetServerImpl: void listen(io.vertx.core.Handler,io.vertx.core.net.SocketAddress,io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.NetServerImpl$lambda_listen_0__90: io.vertx.core.Handler bootstrap$(io.vertx.core.net.impl.NetServerImpl,java.lang.String)>
STATIC edge: $r31 = staticinvoke <io.vertx.core.net.impl.AsyncResolveConnectHelper: io.vertx.core.net.impl.AsyncResolveConnectHelper doBind(io.vertx.core.impl.VertxInternal,io.vertx.core.net.SocketAddress,io.netty.bootstrap.ServerBootstrap)>($r30, r7, $r72) in <io.vertx.core.net.impl.NetServerImpl: void listen(io.vertx.core.Handler,io.vertx.core.net.SocketAddress,io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.AsyncResolveConnectHelper: io.vertx.core.net.impl.AsyncResolveConnectHelper doBind(io.vertx.core.impl.VertxInternal,io.vertx.core.net.SocketAddress,io.netty.bootstrap.ServerBootstrap)>
STATIC edge: $r15 = staticinvoke <io.vertx.core.net.impl.AsyncResolveConnectHelper$lambda_doBind_1__94: io.netty.util.concurrent.GenericFutureListener bootstrap$(io.vertx.core.net.impl.AsyncResolveConnectHelper,io.netty.channel.ChannelFuture)>($r0, r14) in <io.vertx.core.net.impl.AsyncResolveConnectHelper: io.vertx.core.net.impl.AsyncResolveConnectHelper doBind(io.vertx.core.impl.VertxInternal,io.vertx.core.net.SocketAddress,io.netty.bootstrap.ServerBootstrap)> ==> <io.vertx.core.net.impl.AsyncResolveConnectHelper$lambda_doBind_1__94: io.netty.util.concurrent.GenericFutureListener bootstrap$(io.vertx.core.net.impl.AsyncResolveConnectHelper,io.netty.channel.ChannelFuture)>
STATIC edge: $r11 = staticinvoke <io.vertx.core.net.impl.AsyncResolveConnectHelper$lambda_doBind_3__93: io.vertx.core.Handler bootstrap$(io.vertx.core.net.SocketAddress,io.netty.bootstrap.ServerBootstrap,io.vertx.core.net.impl.AsyncResolveConnectHelper)>(r5, r2, $r0) in <io.vertx.core.net.impl.AsyncResolveConnectHelper: io.vertx.core.net.impl.AsyncResolveConnectHelper doBind(io.vertx.core.impl.VertxInternal,io.vertx.core.net.SocketAddress,io.netty.bootstrap.ServerBootstrap)> ==> <io.vertx.core.net.impl.AsyncResolveConnectHelper$lambda_doBind_3__93: io.vertx.core.Handler bootstrap$(io.vertx.core.net.SocketAddress,io.netty.bootstrap.ServerBootstrap,io.vertx.core.net.impl.AsyncResolveConnectHelper)>
STATIC edge: staticinvoke <io.vertx.core.net.impl.AsyncResolveConnectHelper: void checkPort(int)>($i0) in <io.vertx.core.net.impl.AsyncResolveConnectHelper: io.vertx.core.net.impl.AsyncResolveConnectHelper doBind(io.vertx.core.impl.VertxInternal,io.vertx.core.net.SocketAddress,io.netty.bootstrap.ServerBootstrap)> ==> <io.vertx.core.net.impl.AsyncResolveConnectHelper: void checkPort(int)>
SPECIAL edge: specialinvoke $r2.<io.vertx.core.net.impl.NetServerImpl$lambda_listen_4__71: void <init>(io.vertx.core.net.impl.NetServerImpl,io.vertx.core.Handler)>($r0, $r1) in <io.vertx.core.net.impl.NetServerImpl$lambda_listen_4__71: io.vertx.core.Handler bootstrap$(io.vertx.core.net.impl.NetServerImpl,io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.NetServerImpl$lambda_listen_4__71: void <init>(io.vertx.core.net.impl.NetServerImpl,io.vertx.core.Handler)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setTrustStoreOptions(io.vertx.core.net.JksOptions)>(r1) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetServerOptions setTrustStoreOptions(io.vertx.core.net.JksOptions)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setTrustStoreOptions(io.vertx.core.net.JksOptions)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTrustStoreOptions(io.vertx.core.net.JksOptions)>(r1) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setTrustStoreOptions(io.vertx.core.net.JksOptions)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTrustStoreOptions(io.vertx.core.net.JksOptions)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setTrustStoreOptions(io.vertx.core.net.JksOptions)>(r1) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setTrustStoreOptions(io.vertx.core.net.JksOptions)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setTrustStoreOptions(io.vertx.core.net.JksOptions)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTrustStoreOptions(io.vertx.core.net.JksOptions)>(r1) in <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setTrustStoreOptions(io.vertx.core.net.JksOptions)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTrustStoreOptions(io.vertx.core.net.JksOptions)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setTrustStoreOptions(io.vertx.core.net.JksOptions)>(r1) in <io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setTrustStoreOptions(io.vertx.core.net.JksOptions)> ==> <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setTrustStoreOptions(io.vertx.core.net.JksOptions)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setTrustStoreOptions(io.vertx.core.net.JksOptions)>(r1) in <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setTrustStoreOptions(io.vertx.core.net.JksOptions)> ==> <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setTrustStoreOptions(io.vertx.core.net.JksOptions)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setPfxTrustOptions(io.vertx.core.net.PfxOptions)>(r1) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetServerOptions setPfxTrustOptions(io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setPfxTrustOptions(io.vertx.core.net.PfxOptions)>
SPECIAL edge: $r2 = specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPfxTrustOptions(io.vertx.core.net.PfxOptions)>(r1) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setPfxTrustOptions(io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPfxTrustOptions(io.vertx.core.net.PfxOptions)>
SPECIAL edge: $r2 = specialinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setPfxTrustOptions(io.vertx.core.net.PfxOptions)>(r1) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setPfxTrustOptions(io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setPfxTrustOptions(io.vertx.core.net.PfxOptions)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPfxTrustOptions(io.vertx.core.net.PfxOptions)>(r1) in <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setPfxTrustOptions(io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPfxTrustOptions(io.vertx.core.net.PfxOptions)>
SPECIAL edge: $r2 = specialinvoke r0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setPfxTrustOptions(io.vertx.core.net.PfxOptions)>(r1) in <io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setPfxTrustOptions(io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setPfxTrustOptions(io.vertx.core.net.PfxOptions)>
SPECIAL edge: $r2 = specialinvoke r0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setPfxTrustOptions(io.vertx.core.net.PfxOptions)>(r1) in <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setPfxTrustOptions(io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setPfxTrustOptions(io.vertx.core.net.PfxOptions)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setPemTrustOptions(io.vertx.core.net.PemTrustOptions)>(r1) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetServerOptions setPemTrustOptions(io.vertx.core.net.PemTrustOptions)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setPemTrustOptions(io.vertx.core.net.PemTrustOptions)>
SPECIAL edge: $r2 = specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPemTrustOptions(io.vertx.core.net.PemTrustOptions)>(r1) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setPemTrustOptions(io.vertx.core.net.PemTrustOptions)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPemTrustOptions(io.vertx.core.net.PemTrustOptions)>
SPECIAL edge: $r2 = specialinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setPemTrustOptions(io.vertx.core.net.PemTrustOptions)>(r1) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setPemTrustOptions(io.vertx.core.net.PemTrustOptions)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setPemTrustOptions(io.vertx.core.net.PemTrustOptions)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPemTrustOptions(io.vertx.core.net.PemTrustOptions)>(r1) in <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setPemTrustOptions(io.vertx.core.net.PemTrustOptions)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPemTrustOptions(io.vertx.core.net.PemTrustOptions)>
SPECIAL edge: $r2 = specialinvoke r0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setPemTrustOptions(io.vertx.core.net.PemTrustOptions)>(r1) in <io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setPemTrustOptions(io.vertx.core.net.PemTrustOptions)> ==> <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setPemTrustOptions(io.vertx.core.net.PemTrustOptions)>
SPECIAL edge: $r2 = specialinvoke r0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setPemTrustOptions(io.vertx.core.net.PemTrustOptions)>(r1) in <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setPemTrustOptions(io.vertx.core.net.PemTrustOptions)> ==> <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setPemTrustOptions(io.vertx.core.net.PemTrustOptions)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setKeyStoreOptions(io.vertx.core.net.JksOptions)>(r1) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetServerOptions setKeyStoreOptions(io.vertx.core.net.JksOptions)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setKeyStoreOptions(io.vertx.core.net.JksOptions)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setKeyStoreOptions(io.vertx.core.net.JksOptions)>(r1) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setKeyStoreOptions(io.vertx.core.net.JksOptions)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setKeyStoreOptions(io.vertx.core.net.JksOptions)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setKeyStoreOptions(io.vertx.core.net.JksOptions)>(r1) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setKeyStoreOptions(io.vertx.core.net.JksOptions)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setKeyStoreOptions(io.vertx.core.net.JksOptions)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setKeyStoreOptions(io.vertx.core.net.JksOptions)>(r1) in <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setKeyStoreOptions(io.vertx.core.net.JksOptions)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setKeyStoreOptions(io.vertx.core.net.JksOptions)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setKeyStoreOptions(io.vertx.core.net.JksOptions)>(r1) in <io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setKeyStoreOptions(io.vertx.core.net.JksOptions)> ==> <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setKeyStoreOptions(io.vertx.core.net.JksOptions)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setKeyStoreOptions(io.vertx.core.net.JksOptions)>(r1) in <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setKeyStoreOptions(io.vertx.core.net.JksOptions)> ==> <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setKeyStoreOptions(io.vertx.core.net.JksOptions)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)>(r1) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetServerOptions setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)>
SPECIAL edge: $r2 = specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)>(r1) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)>
SPECIAL edge: $r2 = specialinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)>(r1) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)>(r1) in <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)>
SPECIAL edge: $r2 = specialinvoke r0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)>(r1) in <io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)>
SPECIAL edge: $r2 = specialinvoke r0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)>(r1) in <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)>(r1) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetServerOptions setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)>
SPECIAL edge: $r2 = specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)>(r1) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)>
SPECIAL edge: $r2 = specialinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)>(r1) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)>(r1) in <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)>
SPECIAL edge: $r2 = specialinvoke r0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)>(r1) in <io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)>
SPECIAL edge: $r2 = specialinvoke r0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)>(r1) in <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)>
INTERFACE edge: $r8 = interfaceinvoke r0.<io.vertx.core.spi.metrics.PoolMetrics: java.lang.Object submitted()>() in <io.vertx.core.impl.ContextImpl: void executeBlocking(io.vertx.core.Handler,io.vertx.core.Handler,java.util.concurrent.Executor,io.vertx.core.impl.TaskQueue,io.vertx.core.spi.metrics.PoolMetrics)> ==> <io.vertx.core.spi.metrics.PoolMetrics: java.lang.Object submitted()>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.spi.metrics.PoolMetrics: void rejected(java.lang.Object)>(r1) in <io.vertx.core.impl.ContextImpl: void executeBlocking(io.vertx.core.Handler,io.vertx.core.Handler,java.util.concurrent.Executor,io.vertx.core.impl.TaskQueue,io.vertx.core.spi.metrics.PoolMetrics)> ==> <io.vertx.core.spi.metrics.PoolMetrics: void rejected(java.lang.Object)>
VIRTUAL edge: virtualinvoke r5.<io.vertx.core.impl.TaskQueue: void execute(java.lang.Runnable,java.util.concurrent.Executor)>(r9, r6) in <io.vertx.core.impl.ContextImpl: void executeBlocking(io.vertx.core.Handler,io.vertx.core.Handler,java.util.concurrent.Executor,io.vertx.core.impl.TaskQueue,io.vertx.core.spi.metrics.PoolMetrics)> ==> <io.vertx.core.impl.TaskQueue: void execute(java.lang.Runnable,java.util.concurrent.Executor)>
EXECUTOR edge: interfaceinvoke r6.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(r9) in <io.vertx.core.impl.ContextImpl: void executeBlocking(io.vertx.core.Handler,io.vertx.core.Handler,java.util.concurrent.Executor,io.vertx.core.impl.TaskQueue,io.vertx.core.spi.metrics.PoolMetrics)> ==> <io.vertx.core.impl.BlockedThreadChecker$1: void run()>
EXECUTOR edge: interfaceinvoke r6.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(r9) in <io.vertx.core.impl.ContextImpl: void executeBlocking(io.vertx.core.Handler,io.vertx.core.Handler,java.util.concurrent.Executor,io.vertx.core.impl.TaskQueue,io.vertx.core.spi.metrics.PoolMetrics)> ==> <io.vertx.core.impl.launcher.commands.Watcher: void run()>
EXECUTOR edge: interfaceinvoke r6.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(r9) in <io.vertx.core.impl.ContextImpl: void executeBlocking(io.vertx.core.Handler,io.vertx.core.Handler,java.util.concurrent.Executor,io.vertx.core.impl.TaskQueue,io.vertx.core.spi.metrics.PoolMetrics)> ==> <io.vertx.core.file.impl.FileResolver$lambda_setupCacheDir_1__26: void run()>
EXECUTOR edge: interfaceinvoke r6.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(r9) in <io.vertx.core.impl.ContextImpl: void executeBlocking(io.vertx.core.Handler,io.vertx.core.Handler,java.util.concurrent.Executor,io.vertx.core.impl.TaskQueue,io.vertx.core.spi.metrics.PoolMetrics)> ==> <io.vertx.core.impl.EventLoopContext$lambda_executeAsync_0__54: void run()>
EXECUTOR edge: interfaceinvoke r6.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(r9) in <io.vertx.core.impl.ContextImpl: void executeBlocking(io.vertx.core.Handler,io.vertx.core.Handler,java.util.concurrent.Executor,io.vertx.core.impl.TaskQueue,io.vertx.core.spi.metrics.PoolMetrics)> ==> <io.vertx.core.Starter$1: void run()>
EXECUTOR edge: interfaceinvoke r6.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(r9) in <io.vertx.core.impl.ContextImpl: void executeBlocking(io.vertx.core.Handler,io.vertx.core.Handler,java.util.concurrent.Executor,io.vertx.core.impl.TaskQueue,io.vertx.core.spi.metrics.PoolMetrics)> ==> <java.lang.Thread: void run()>
EXECUTOR edge: interfaceinvoke r6.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(r9) in <io.vertx.core.impl.ContextImpl: void executeBlocking(io.vertx.core.Handler,io.vertx.core.Handler,java.util.concurrent.Executor,io.vertx.core.impl.TaskQueue,io.vertx.core.spi.metrics.PoolMetrics)> ==> <io.vertx.core.impl.TaskQueue$run__63: void run()>
EXECUTOR edge: interfaceinvoke r6.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(r9) in <io.vertx.core.impl.ContextImpl: void executeBlocking(io.vertx.core.Handler,io.vertx.core.Handler,java.util.concurrent.Executor,io.vertx.core.impl.TaskQueue,io.vertx.core.spi.metrics.PoolMetrics)> ==> <io.vertx.core.impl.launcher.commands.RunCommand$1: void run()>
EXECUTOR edge: interfaceinvoke r6.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(r9) in <io.vertx.core.impl.ContextImpl: void executeBlocking(io.vertx.core.Handler,io.vertx.core.Handler,java.util.concurrent.Executor,io.vertx.core.impl.TaskQueue,io.vertx.core.spi.metrics.PoolMetrics)> ==> <io.vertx.core.impl.HAManager$lambda_addToHADeployList_7__8: void run()>
SPECIAL edge: specialinvoke $r5.<io.vertx.core.impl.ContextImpl$lambda_executeBlocking_2__72: void <init>(io.vertx.core.impl.ContextImpl,io.vertx.core.spi.metrics.PoolMetrics,java.lang.Object,io.vertx.core.Handler,io.vertx.core.Handler)>($r0, $r1, $r2, $r3, $r4) in <io.vertx.core.impl.ContextImpl$lambda_executeBlocking_2__72: java.lang.Runnable bootstrap$(io.vertx.core.impl.ContextImpl,io.vertx.core.spi.metrics.PoolMetrics,java.lang.Object,io.vertx.core.Handler,io.vertx.core.Handler)> ==> <io.vertx.core.impl.ContextImpl$lambda_executeBlocking_2__72: void <init>(io.vertx.core.impl.ContextImpl,io.vertx.core.spi.metrics.PoolMetrics,java.lang.Object,io.vertx.core.Handler,io.vertx.core.Handler)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.PemTrustOptions: void <init>(io.vertx.core.net.PemTrustOptions)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke r2.<io.vertx.core.net.PemTrustOptions: java.util.List getCertPaths()>() in <io.vertx.core.net.PemTrustOptions: void <init>(io.vertx.core.net.PemTrustOptions)> ==> <io.vertx.core.net.PemTrustOptions: java.util.List getCertPaths()>
VIRTUAL edge: $r5 = virtualinvoke r2.<io.vertx.core.net.PemTrustOptions: java.util.List getCertValues()>() in <io.vertx.core.net.PemTrustOptions: void <init>(io.vertx.core.net.PemTrustOptions)> ==> <io.vertx.core.net.PemTrustOptions: java.util.List getCertValues()>
SPECIAL edge: specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>($r3) in <io.vertx.core.net.PemTrustOptions: void <init>(io.vertx.core.net.PemTrustOptions)> ==> <java.util.ArrayList: void <init>(java.util.Collection)>
SPECIAL edge: specialinvoke $r4.<java.util.ArrayList: void <init>(java.util.Collection)>($r5) in <io.vertx.core.net.PemTrustOptions: void <init>(io.vertx.core.net.PemTrustOptions)> ==> <java.util.ArrayList: void <init>(java.util.Collection)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.PemKeyCertOptions: void <init>(io.vertx.core.net.PemKeyCertOptions)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r14.<java.util.ArrayList: void <init>(java.util.Collection)>($r12) in <io.vertx.core.net.PemKeyCertOptions: void <init>(io.vertx.core.net.PemKeyCertOptions)> ==> <java.util.ArrayList: void <init>(java.util.Collection)>
SPECIAL edge: specialinvoke $r14.<java.util.ArrayList: void <init>()>() in <io.vertx.core.net.PemKeyCertOptions: void <init>(io.vertx.core.net.PemKeyCertOptions)> ==> <java.util.ArrayList: void <init>()>
SPECIAL edge: specialinvoke $r15.<java.util.ArrayList: void <init>(java.util.Collection)>($r10) in <io.vertx.core.net.PemKeyCertOptions: void <init>(io.vertx.core.net.PemKeyCertOptions)> ==> <java.util.ArrayList: void <init>(java.util.Collection)>
SPECIAL edge: specialinvoke $r15.<java.util.ArrayList: void <init>()>() in <io.vertx.core.net.PemKeyCertOptions: void <init>(io.vertx.core.net.PemKeyCertOptions)> ==> <java.util.ArrayList: void <init>()>
SPECIAL edge: specialinvoke $r16.<java.util.ArrayList: void <init>(java.util.Collection)>($r8) in <io.vertx.core.net.PemKeyCertOptions: void <init>(io.vertx.core.net.PemKeyCertOptions)> ==> <java.util.ArrayList: void <init>(java.util.Collection)>
SPECIAL edge: specialinvoke $r16.<java.util.ArrayList: void <init>()>() in <io.vertx.core.net.PemKeyCertOptions: void <init>(io.vertx.core.net.PemKeyCertOptions)> ==> <java.util.ArrayList: void <init>()>
SPECIAL edge: specialinvoke $r17.<java.util.ArrayList: void <init>(java.util.Collection)>($r6) in <io.vertx.core.net.PemKeyCertOptions: void <init>(io.vertx.core.net.PemKeyCertOptions)> ==> <java.util.ArrayList: void <init>(java.util.Collection)>
SPECIAL edge: specialinvoke $r17.<java.util.ArrayList: void <init>()>() in <io.vertx.core.net.PemKeyCertOptions: void <init>(io.vertx.core.net.PemKeyCertOptions)> ==> <java.util.ArrayList: void <init>()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.SSLEngineOptions: void <init>()>() in <io.vertx.core.net.JdkSSLEngineOptions: void <init>()> ==> <io.vertx.core.net.SSLEngineOptions: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.JksOptions: void <init>(io.vertx.core.net.JksOptions)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke r1.<io.vertx.core.net.JksOptions: java.lang.String getPassword()>() in <io.vertx.core.net.JksOptions: void <init>(io.vertx.core.net.JksOptions)> ==> <io.vertx.core.net.JksOptions: java.lang.String getPassword()>
VIRTUAL edge: $r3 = virtualinvoke r1.<io.vertx.core.net.JksOptions: java.lang.String getPath()>() in <io.vertx.core.net.JksOptions: void <init>(io.vertx.core.net.JksOptions)> ==> <io.vertx.core.net.JksOptions: java.lang.String getPath()>
VIRTUAL edge: $r4 = virtualinvoke r1.<io.vertx.core.net.JksOptions: io.vertx.core.buffer.Buffer getValue()>() in <io.vertx.core.net.JksOptions: void <init>(io.vertx.core.net.JksOptions)> ==> <io.vertx.core.net.JksOptions: io.vertx.core.buffer.Buffer getValue()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.SSLEngineOptions: void <init>()>() in <io.vertx.core.net.OpenSSLEngineOptions: void <init>(io.vertx.core.net.OpenSSLEngineOptions)> ==> <io.vertx.core.net.SSLEngineOptions: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke r1.<io.vertx.core.net.OpenSSLEngineOptions: boolean isSessionCacheEnabled()>() in <io.vertx.core.net.OpenSSLEngineOptions: void <init>(io.vertx.core.net.OpenSSLEngineOptions)> ==> <io.vertx.core.net.OpenSSLEngineOptions: boolean isSessionCacheEnabled()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.PfxOptions: void <init>(io.vertx.core.net.PfxOptions)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke r1.<io.vertx.core.net.PfxOptions: java.lang.String getPassword()>() in <io.vertx.core.net.PfxOptions: void <init>(io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.net.PfxOptions: java.lang.String getPassword()>
VIRTUAL edge: $r3 = virtualinvoke r1.<io.vertx.core.net.PfxOptions: java.lang.String getPath()>() in <io.vertx.core.net.PfxOptions: void <init>(io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.net.PfxOptions: java.lang.String getPath()>
VIRTUAL edge: $r4 = virtualinvoke r1.<io.vertx.core.net.PfxOptions: io.vertx.core.buffer.Buffer getValue()>() in <io.vertx.core.net.PfxOptions: void <init>(io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.net.PfxOptions: io.vertx.core.buffer.Buffer getValue()>
INTERFACE edge: interfaceinvoke $r3.<java.util.Set: boolean remove(java.lang.Object)>(r2) in <io.vertx.core.impl.CloseHooks: void remove(io.vertx.core.Closeable)> ==> <java.util.HashSet: boolean remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<java.util.Set: boolean remove(java.lang.Object)>(r2) in <io.vertx.core.impl.CloseHooks: void remove(io.vertx.core.Closeable)> ==> <java.util.AbstractCollection: boolean remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<java.util.Set: boolean remove(java.lang.Object)>(r2) in <io.vertx.core.impl.CloseHooks: void remove(io.vertx.core.Closeable)> ==> <io.vertx.core.impl.ConcurrentHashSet: boolean remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<java.util.Set: boolean remove(java.lang.Object)>(r2) in <io.vertx.core.impl.CloseHooks: void remove(io.vertx.core.Closeable)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$1: boolean remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<java.util.Set: boolean remove(java.lang.Object)>(r2) in <io.vertx.core.impl.CloseHooks: void remove(io.vertx.core.Closeable)> ==> <java.util.TreeSet: boolean remove(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.http.CaseInsensitiveHeaders: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: void <init>(int,java.lang.String,java.lang.String)>(-1, null, null) in <io.vertx.core.http.CaseInsensitiveHeaders: void <init>()> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: void <init>(int,java.lang.String,java.lang.String)>
INTERFACE edge: i1 = interfaceinvoke $r1.<io.vertx.core.buffer.Buffer: int getInt(int)>($i0) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void decodeHeaders()> ==> <io.vertx.core.buffer.impl.BufferImpl: int getInt(int)>
INTERFACE edge: i5 = interfaceinvoke $r2.<io.vertx.core.buffer.Buffer: int getInt(int)>($i4) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void decodeHeaders()> ==> <io.vertx.core.buffer.impl.BufferImpl: int getInt(int)>
SPECIAL edge: specialinvoke $r3.<io.vertx.core.http.CaseInsensitiveHeaders: void <init>()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void decodeHeaders()> ==> <io.vertx.core.http.CaseInsensitiveHeaders: void <init>()>
INTERFACE edge: i9 = interfaceinvoke $r4.<io.vertx.core.buffer.Buffer: int getInt(int)>($i8) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void decodeHeaders()> ==> <io.vertx.core.buffer.impl.BufferImpl: int getInt(int)>
INTERFACE edge: r16 = interfaceinvoke $r5.<io.vertx.core.buffer.Buffer: byte[] getBytes(int,int)>($i14, $i13) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void decodeHeaders()> ==> <io.vertx.core.buffer.impl.BufferImpl: byte[] getBytes(int,int)>
SPECIAL edge: specialinvoke $r6.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>(r16, $r7) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void decodeHeaders()> ==> <java.lang.String: void <init>(byte[],java.nio.charset.Charset)>
INTERFACE edge: i18 = interfaceinvoke $r9.<io.vertx.core.buffer.Buffer: int getInt(int)>($i17) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void decodeHeaders()> ==> <io.vertx.core.buffer.impl.BufferImpl: int getInt(int)>
INTERFACE edge: r17 = interfaceinvoke $r10.<io.vertx.core.buffer.Buffer: byte[] getBytes(int,int)>($i23, $i22) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void decodeHeaders()> ==> <io.vertx.core.buffer.impl.BufferImpl: byte[] getBytes(int,int)>
SPECIAL edge: specialinvoke $r11.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>(r17, $r12) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void decodeHeaders()> ==> <java.lang.String: void <init>(byte[],java.nio.charset.Charset)>
INTERFACE edge: interfaceinvoke $r14.<io.vertx.core.MultiMap: io.vertx.core.MultiMap add(java.lang.String,java.lang.String)>($r6, $r11) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void decodeHeaders()> ==> <io.vertx.core.http.impl.HeadersAdaptor: io.vertx.core.MultiMap add(java.lang.String,java.lang.String)>
INTERFACE edge: interfaceinvoke $r14.<io.vertx.core.MultiMap: io.vertx.core.MultiMap add(java.lang.String,java.lang.String)>($r6, $r11) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void decodeHeaders()> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor: io.vertx.core.MultiMap add(java.lang.String,java.lang.String)>
INTERFACE edge: interfaceinvoke $r14.<io.vertx.core.MultiMap: io.vertx.core.MultiMap add(java.lang.String,java.lang.String)>($r6, $r11) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void decodeHeaders()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders: io.vertx.core.MultiMap add(java.lang.String,java.lang.String)>
INTERFACE edge: interfaceinvoke $r14.<io.vertx.core.MultiMap: io.vertx.core.MultiMap add(java.lang.String,java.lang.String)>($r6, $r11) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void decodeHeaders()> ==> <io.vertx.core.http.CaseInsensitiveHeaders: io.vertx.core.MultiMap add(java.lang.String,java.lang.String)>
CLINIT edge: $z0 = <io.vertx.core.http.HttpHeaders: boolean DISABLE_HTTP_HEADERS_VALIDATION> in <io.vertx.core.http.impl.Http2HeadersAdaptor: io.vertx.core.MultiMap add(java.lang.String,java.lang.String)> ==> <io.vertx.core.http.HttpHeaders: void <clinit>()>
STATIC edge: $r3 = staticinvoke <io.vertx.core.http.impl.Http2HeadersAdaptor: java.lang.CharSequence toLowerCase(java.lang.CharSequence)>(r1) in <io.vertx.core.http.impl.Http2HeadersAdaptor: io.vertx.core.MultiMap add(java.lang.String,java.lang.String)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor: java.lang.CharSequence toLowerCase(java.lang.CharSequence)>
STATIC edge: staticinvoke <io.vertx.core.http.impl.HttpUtils: void validateHeader(java.lang.CharSequence,java.lang.CharSequence)>(r1, r4) in <io.vertx.core.http.impl.Http2HeadersAdaptor: io.vertx.core.MultiMap add(java.lang.String,java.lang.String)> ==> <io.vertx.core.http.impl.HttpUtils: void validateHeader(java.lang.CharSequence,java.lang.CharSequence)>
CLINIT edge: staticinvoke <io.vertx.core.http.impl.HttpUtils: void validateHeader(java.lang.CharSequence,java.lang.CharSequence)>(r1, r4) in <io.vertx.core.http.impl.Http2HeadersAdaptor: io.vertx.core.MultiMap add(java.lang.String,java.lang.String)> ==> <io.vertx.core.http.impl.HttpUtils: void <clinit>()>
STATIC edge: i0 = staticinvoke <io.vertx.core.http.CaseInsensitiveHeaders: int hash(java.lang.String)>(r0) in <io.vertx.core.http.CaseInsensitiveHeaders: io.vertx.core.MultiMap add(java.lang.String,java.lang.String)> ==> <io.vertx.core.http.CaseInsensitiveHeaders: int hash(java.lang.String)>
STATIC edge: i1 = staticinvoke <io.vertx.core.http.CaseInsensitiveHeaders: int index(int)>(i0) in <io.vertx.core.http.CaseInsensitiveHeaders: io.vertx.core.MultiMap add(java.lang.String,java.lang.String)> ==> <io.vertx.core.http.CaseInsensitiveHeaders: int index(int)>
CLINIT edge: staticinvoke <io.vertx.core.http.impl.HttpUtils: void validateHeaderName(java.lang.CharSequence)>(r0) in <io.vertx.core.http.impl.HttpUtils: void validateHeader(java.lang.CharSequence,java.lang.CharSequence)> ==> <io.vertx.core.http.impl.HttpUtils: void <clinit>()>
STATIC edge: staticinvoke <io.vertx.core.http.impl.HttpUtils: void validateHeaderValue(java.lang.CharSequence)>(r1) in <io.vertx.core.http.impl.HttpUtils: void validateHeader(java.lang.CharSequence,java.lang.CharSequence)> ==> <io.vertx.core.http.impl.HttpUtils: void validateHeaderValue(java.lang.CharSequence)>
STATIC edge: staticinvoke <io.vertx.core.http.impl.HttpUtils: void validateHeaderName(java.lang.CharSequence)>(r0) in <io.vertx.core.http.impl.HttpUtils: void validateHeader(java.lang.CharSequence,java.lang.CharSequence)> ==> <io.vertx.core.http.impl.HttpUtils: void validateHeaderName(java.lang.CharSequence)>
CLINIT edge: i2 = staticinvoke <io.vertx.core.http.impl.HttpUtils: int validateValueChar(java.lang.CharSequence,int,char)>(r0, i2, $c1) in <io.vertx.core.http.impl.HttpUtils: void validateHeaderValue(java.lang.CharSequence)> ==> <io.vertx.core.http.impl.HttpUtils: void <clinit>()>
STATIC edge: i2 = staticinvoke <io.vertx.core.http.impl.HttpUtils: int validateValueChar(java.lang.CharSequence,int,char)>(r0, i2, $c1) in <io.vertx.core.http.impl.HttpUtils: void validateHeaderValue(java.lang.CharSequence)> ==> <io.vertx.core.http.impl.HttpUtils: int validateValueChar(java.lang.CharSequence,int,char)>
SPECIAL edge: r3 = specialinvoke r2.<io.vertx.core.http.impl.headers.VertxHttpHeaders: java.lang.CharSequence get0(java.lang.CharSequence)>(r0) in <io.vertx.core.http.impl.headers.VertxHttpHeaders: java.lang.String get(java.lang.CharSequence)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders: java.lang.CharSequence get0(java.lang.CharSequence)>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.lang.CharSequence: java.lang.String toString()>() in <io.vertx.core.http.impl.headers.VertxHttpHeaders: java.lang.String get(java.lang.CharSequence)> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.lang.CharSequence: java.lang.String toString()>() in <io.vertx.core.http.impl.headers.VertxHttpHeaders: java.lang.String get(java.lang.CharSequence)> ==> <java.lang.String: java.lang.String toString()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.lang.CharSequence: java.lang.String toString()>() in <io.vertx.core.http.impl.headers.VertxHttpHeaders: java.lang.String get(java.lang.CharSequence)> ==> <java.lang.StringBuffer: java.lang.String toString()>
STATIC edge: i0 = staticinvoke <io.netty.util.AsciiString: int hashCode(java.lang.CharSequence)>(r0) in <io.vertx.core.http.impl.headers.VertxHttpHeaders: java.lang.CharSequence get0(java.lang.CharSequence)> ==> <io.netty.util.AsciiString: int hashCode(java.lang.CharSequence)>
STATIC edge: $z0 = staticinvoke <io.netty.util.AsciiString: boolean contentEqualsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>(r0, r3) in <io.vertx.core.http.impl.headers.VertxHttpHeaders: java.lang.CharSequence get0(java.lang.CharSequence)> ==> <io.netty.util.AsciiString: boolean contentEqualsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.eventbus.DeliveryOptions: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke r2.<io.vertx.core.eventbus.DeliveryOptions: io.vertx.core.MultiMap getHeaders()>() in <io.vertx.core.eventbus.impl.EventBusImpl: io.vertx.core.eventbus.EventBus send(java.lang.String,java.lang.Object,io.vertx.core.eventbus.DeliveryOptions,io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.DeliveryOptions: io.vertx.core.MultiMap getHeaders()>
VIRTUAL edge: $r5 = virtualinvoke r2.<io.vertx.core.eventbus.DeliveryOptions: java.lang.String getCodecName()>() in <io.vertx.core.eventbus.impl.EventBusImpl: io.vertx.core.eventbus.EventBus send(java.lang.String,java.lang.Object,io.vertx.core.eventbus.DeliveryOptions,io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.DeliveryOptions: java.lang.String getCodecName()>
VIRTUAL edge: $r6 = virtualinvoke r0.<io.vertx.core.eventbus.impl.EventBusImpl: io.vertx.core.eventbus.impl.MessageImpl createMessage(boolean,java.lang.String,io.vertx.core.MultiMap,java.lang.Object,java.lang.String)>(1, r1, $r3, r4, $r5) in <io.vertx.core.eventbus.impl.EventBusImpl: io.vertx.core.eventbus.EventBus send(java.lang.String,java.lang.Object,io.vertx.core.eventbus.DeliveryOptions,io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.EventBusImpl: io.vertx.core.eventbus.impl.MessageImpl createMessage(boolean,java.lang.String,io.vertx.core.MultiMap,java.lang.Object,java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke r0.<io.vertx.core.eventbus.impl.EventBusImpl: io.vertx.core.eventbus.impl.MessageImpl createMessage(boolean,java.lang.String,io.vertx.core.MultiMap,java.lang.Object,java.lang.String)>(1, r1, $r3, r4, $r5) in <io.vertx.core.eventbus.impl.EventBusImpl: io.vertx.core.eventbus.EventBus send(java.lang.String,java.lang.Object,io.vertx.core.eventbus.DeliveryOptions,io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: io.vertx.core.eventbus.impl.MessageImpl createMessage(boolean,java.lang.String,io.vertx.core.MultiMap,java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.eventbus.impl.EventBusImpl: void sendOrPubInternal(io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.DeliveryOptions,io.vertx.core.Handler)>($r6, r2, r7) in <io.vertx.core.eventbus.impl.EventBusImpl: io.vertx.core.eventbus.EventBus send(java.lang.String,java.lang.Object,io.vertx.core.eventbus.DeliveryOptions,io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.EventBusImpl: void sendOrPubInternal(io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.DeliveryOptions,io.vertx.core.Handler)>
CLINIT edge: $r7 = new io.vertx.core.eventbus.impl.MessageImpl in <io.vertx.core.eventbus.impl.EventBusImpl: io.vertx.core.eventbus.impl.MessageImpl createMessage(boolean,java.lang.String,io.vertx.core.MultiMap,java.lang.Object,java.lang.String)> ==> <io.vertx.core.eventbus.impl.MessageImpl: void <clinit>()>
STATIC edge: staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r0, "no null address accepted") in <io.vertx.core.eventbus.impl.EventBusImpl: io.vertx.core.eventbus.impl.MessageImpl createMessage(boolean,java.lang.String,io.vertx.core.MultiMap,java.lang.Object,java.lang.String)> ==> <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>
CLINIT edge: $r7 = new io.vertx.core.eventbus.impl.clustered.ClusteredMessage in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: io.vertx.core.eventbus.impl.MessageImpl createMessage(boolean,java.lang.String,io.vertx.core.MultiMap,java.lang.Object,java.lang.String)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void <clinit>()>
STATIC edge: staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r0, "no null address accepted") in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: io.vertx.core.eventbus.impl.MessageImpl createMessage(boolean,java.lang.String,io.vertx.core.MultiMap,java.lang.Object,java.lang.String)> ==> <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>
CLINIT edge: $r7 = new io.vertx.core.eventbus.impl.clustered.ClusteredMessage in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: io.vertx.core.eventbus.impl.MessageImpl createMessage(boolean,java.lang.String,io.vertx.core.MultiMap,java.lang.Object,java.lang.String)> ==> <io.vertx.core.eventbus.impl.MessageImpl: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.eventbus.impl.HandlerRegistration$lambda_checkNextTick_5__59: void <init>(io.vertx.core.eventbus.impl.HandlerRegistration)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.streams.impl.InboundBuffer: void <init>(io.vertx.core.Context,long)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.streams.impl.InboundBuffer: void <init>(io.vertx.core.Context,long)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("highWaterMark ") in <io.vertx.core.streams.impl.InboundBuffer: void <init>(io.vertx.core.Context,long)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0) in <io.vertx.core.streams.impl.InboundBuffer: void <init>(io.vertx.core.Context,long)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(long)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" >= 0") in <io.vertx.core.streams.impl.InboundBuffer: void <init>(io.vertx.core.Context,long)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.streams.impl.InboundBuffer: void <init>(io.vertx.core.Context,long)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r8.<java.util.ArrayDeque: void <init>()>() in <io.vertx.core.streams.impl.InboundBuffer: void <init>(io.vertx.core.Context,long)> ==> <java.util.ArrayDeque: void <init>()>
SPECIAL edge: $r1 = specialinvoke r0.<io.vertx.core.impl.ContextImpl: io.vertx.core.Handler exceptionHandler()>() in <io.vertx.core.impl.EventLoopContext: io.vertx.core.Handler exceptionHandler()> ==> <io.vertx.core.impl.ContextImpl: io.vertx.core.Handler exceptionHandler()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.streams.impl.InboundBuffer: io.vertx.core.streams.impl.InboundBuffer fetch(long)>(9223372036854775807L) in <io.vertx.core.streams.impl.InboundBuffer: io.vertx.core.streams.impl.InboundBuffer resume()> ==> <io.vertx.core.streams.impl.InboundBuffer: io.vertx.core.streams.impl.InboundBuffer fetch(long)>
STATIC edge: $r5 = staticinvoke <io.vertx.core.streams.impl.InboundBuffer$lambda_fetch_1__95: io.vertx.core.Handler bootstrap$(io.vertx.core.streams.impl.InboundBuffer)>(r0) in <io.vertx.core.streams.impl.InboundBuffer: io.vertx.core.streams.impl.InboundBuffer fetch(long)> ==> <io.vertx.core.streams.impl.InboundBuffer$lambda_fetch_1__95: io.vertx.core.Handler bootstrap$(io.vertx.core.streams.impl.InboundBuffer)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.http.impl.VertxHttp2Stream$lambda_new_1__58: void <init>(io.vertx.core.http.impl.VertxHttp2Stream)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.http.impl.VertxHttp2Stream$handleData__57: void <init>(io.vertx.core.http.impl.VertxHttp2Stream)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.http.impl.VertxHttp2Stream$lambda_new_0__56: void <init>(io.vertx.core.http.impl.VertxHttp2Stream,io.vertx.core.http.impl.Http2ConnectionBase,io.netty.handler.codec.http2.Http2Stream)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r8.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.impl.ContextImpl: void checkEventLoopThread()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected to be on Vert.x thread, but actually on: ") in <io.vertx.core.impl.ContextImpl: void checkEventLoopThread()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0) in <io.vertx.core.impl.ContextImpl: void checkEventLoopThread()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.impl.ContextImpl: void checkEventLoopThread()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r11) in <io.vertx.core.impl.ContextImpl: void checkEventLoopThread()> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
VIRTUAL edge: $z1 = virtualinvoke $r1.<io.vertx.core.impl.VertxThread: boolean isWorker()>() in <io.vertx.core.impl.ContextImpl: void checkEventLoopThread()> ==> <io.vertx.core.impl.VertxThread: boolean isWorker()>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.impl.ContextImpl: void checkEventLoopThread()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Event delivered on unexpected worker thread ") in <io.vertx.core.impl.ContextImpl: void checkEventLoopThread()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0) in <io.vertx.core.impl.ContextImpl: void checkEventLoopThread()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.impl.ContextImpl: void checkEventLoopThread()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6) in <io.vertx.core.impl.ContextImpl: void checkEventLoopThread()> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.impl.EventLoopContext: boolean executeTask(java.lang.Object,io.vertx.core.Handler)>(r1, r2) in <io.vertx.core.impl.EventLoopContext: void execute(java.lang.Object,io.vertx.core.Handler)> ==> <io.vertx.core.impl.ContextImpl: boolean executeTask(java.lang.Object,io.vertx.core.Handler)>
CLINIT edge: $z1 = <io.vertx.core.impl.ContextImpl: boolean DISABLE_TIMINGS> in <io.vertx.core.impl.ContextImpl: boolean executeTask(java.lang.Object,io.vertx.core.Handler)> ==> <io.vertx.core.impl.ContextImpl: void <clinit>()>
STATIC edge: staticinvoke <io.vertx.core.impl.ContextImpl: void setContext(io.vertx.core.impl.VertxThread,io.vertx.core.impl.ContextImpl)>(r1, r2) in <io.vertx.core.impl.ContextImpl: boolean executeTask(java.lang.Object,io.vertx.core.Handler)> ==> <io.vertx.core.impl.ContextImpl: void setContext(io.vertx.core.impl.VertxThread,io.vertx.core.impl.ContextImpl)>
STATIC edge: r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() in <io.vertx.core.impl.ContextImpl: boolean executeTask(java.lang.Object,io.vertx.core.Handler)> ==> <java.lang.Thread: java.lang.Thread currentThread()>
CLINIT edge: $z3 = <io.vertx.core.impl.ContextImpl: boolean DISABLE_TIMINGS> in <io.vertx.core.impl.ContextImpl: boolean executeTask(java.lang.Object,io.vertx.core.Handler)> ==> <io.vertx.core.impl.ContextImpl: void <clinit>()>
CLINIT edge: $z5 = <io.vertx.core.impl.ContextImpl: boolean DISABLE_TIMINGS> in <io.vertx.core.impl.ContextImpl: boolean executeTask(java.lang.Object,io.vertx.core.Handler)> ==> <io.vertx.core.impl.ContextImpl: void <clinit>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.impl.HandlerHolder: void <init>(io.vertx.core.impl.ContextInternal,java.lang.Object)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>(r1) in <io.vertx.core.net.impl.HandlerManager$Handlers: boolean removeHandler(io.vertx.core.net.impl.HandlerHolder)> ==> <java.util.AbstractCollection: boolean remove(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>(r1) in <io.vertx.core.net.impl.HandlerManager$Handlers: boolean removeHandler(io.vertx.core.net.impl.HandlerHolder)> ==> <java.util.LinkedList: boolean remove(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>(r1) in <io.vertx.core.net.impl.HandlerManager$Handlers: boolean removeHandler(io.vertx.core.net.impl.HandlerHolder)> ==> <java.util.concurrent.CopyOnWriteArrayList: boolean remove(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>(r1) in <io.vertx.core.net.impl.HandlerManager$Handlers: boolean removeHandler(io.vertx.core.net.impl.HandlerHolder)> ==> <java.util.ArrayList: boolean remove(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.net.impl.HandlerManager$Handlers: void checkPos()>() in <io.vertx.core.net.impl.HandlerManager$Handlers: boolean removeHandler(io.vertx.core.net.impl.HandlerHolder)> ==> <io.vertx.core.net.impl.HandlerManager$Handlers: void checkPos()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>() in <io.vertx.core.net.impl.HandlerManager$Handlers: boolean isEmpty()> ==> <java.util.AbstractCollection: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>() in <io.vertx.core.net.impl.HandlerManager$Handlers: boolean isEmpty()> ==> <java.util.concurrent.CopyOnWriteArrayList: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>() in <io.vertx.core.net.impl.HandlerManager$Handlers: boolean isEmpty()> ==> <java.util.ArrayList: boolean isEmpty()>
SPECIAL edge: r2 = specialinvoke r0.<io.vertx.core.net.impl.VertxEventLoopGroup: io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopHolder findHolder(io.netty.channel.EventLoop)>(r1) in <io.vertx.core.net.impl.VertxEventLoopGroup: void removeWorker(io.netty.channel.EventLoop)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup: io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopHolder findHolder(io.netty.channel.EventLoop)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.impl.VertxEventLoopGroup: void checkPos()>() in <io.vertx.core.net.impl.VertxEventLoopGroup: void removeWorker(io.netty.channel.EventLoop)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup: void checkPos()>
INTERFACE edge: interfaceinvoke $r4.<java.util.List: boolean remove(java.lang.Object)>(r2) in <io.vertx.core.net.impl.VertxEventLoopGroup: void removeWorker(io.netty.channel.EventLoop)> ==> <java.util.AbstractCollection: boolean remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<java.util.List: boolean remove(java.lang.Object)>(r2) in <io.vertx.core.net.impl.VertxEventLoopGroup: void removeWorker(io.netty.channel.EventLoop)> ==> <java.util.LinkedList: boolean remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<java.util.List: boolean remove(java.lang.Object)>(r2) in <io.vertx.core.net.impl.VertxEventLoopGroup: void removeWorker(io.netty.channel.EventLoop)> ==> <java.util.concurrent.CopyOnWriteArrayList: boolean remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<java.util.List: boolean remove(java.lang.Object)>(r2) in <io.vertx.core.net.impl.VertxEventLoopGroup: void removeWorker(io.netty.channel.EventLoop)> ==> <java.util.ArrayList: boolean remove(java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Can\'t find worker to remove") in <io.vertx.core.net.impl.VertxEventLoopGroup: void removeWorker(io.netty.channel.EventLoop)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: java.lang.Object remove(java.lang.Object)>(r1) in <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object remove(java.lang.Object)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: $i0 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: int size()>() in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Collection values()> ==> <java.util.concurrent.ConcurrentHashMap: int size()>
SPECIAL edge: specialinvoke $r0.<java.util.ArrayList: void <init>(int)>($i0) in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Collection values()> ==> <java.util.ArrayList: void <init>(int)>
INTERFACE edge: interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r8) in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Collection values()> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.concurrent.ConcurrentMap: java.util.Collection values()>() in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Collection values()> ==> <java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>
INTERFACE edge: r6 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Collection values()> ==> <io.vertx.core.impl.ConcurrentHashSet: java.util.Iterator iterator()>
INTERFACE edge: r6 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Collection values()> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: r6 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Collection values()> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: r6 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Collection values()> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r6 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Collection values()> ==> <java.util.AbstractList: java.util.Iterator iterator()>
INTERFACE edge: r6 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Collection values()> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2: java.util.Iterator iterator()>
INTERFACE edge: r6 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Collection values()> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$1: java.util.Iterator iterator()>
INTERFACE edge: r6 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Collection values()> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r6 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Collection values()> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r6 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Collection values()> ==> <java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
INTERFACE edge: r6 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Collection values()> ==> <java.util.concurrent.ConcurrentLinkedQueue: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Collection values()> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Collection values()> ==> <io.vertx.core.json.JsonArray$Iter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Collection values()> ==> <io.vertx.core.json.JsonObject$Iter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Collection values()> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Collection values()> ==> <java.util.Scanner: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Collection values()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Collection values()> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: boolean hasNext()>
INTERFACE edge: r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Collection values()> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object next()>
INTERFACE edge: r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Collection values()> ==> <io.vertx.core.json.JsonArray$Iter: java.lang.Object next()>
INTERFACE edge: r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Collection values()> ==> <io.vertx.core.json.JsonObject$Iter: java.lang.Object next()>
INTERFACE edge: r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Collection values()> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: java.lang.Object next()>
INTERFACE edge: r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Collection values()> ==> <java.util.Scanner: java.lang.Object next()>
INTERFACE edge: r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Collection values()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: java.lang.Object next()>
INTERFACE edge: r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Collection values()> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: java.lang.Object next()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelFuture write(java.lang.Object)>($r1) in <io.vertx.core.net.impl.NetSocketImpl: void close()> ==> <io.vertx.core.net.impl.PartialPooledByteBufAllocator$PooledChannelHandlerContext: io.netty.channel.ChannelFuture write(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.netty.channel.ChannelFuture: io.netty.channel.ChannelFuture addListener(io.netty.util.concurrent.GenericFutureListener)>($r8) in <io.vertx.core.net.impl.NetSocketImpl: void close()> ==> <io.netty.channel.ChannelFuture: io.netty.channel.ChannelFuture addListener(io.netty.util.concurrent.GenericFutureListener)>
INTERFACE edge: interfaceinvoke $r6.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext flush()>() in <io.vertx.core.net.impl.NetSocketImpl: void close()> ==> <io.vertx.core.net.impl.PartialPooledByteBufAllocator$PooledChannelHandlerContext: io.netty.channel.ChannelHandlerContext flush()>
INTERFACE edge: interfaceinvoke $r6.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext flush()>() in <io.vertx.core.net.impl.NetSocketImpl: void close()> ==> <io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext flush()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.impl.NetServerImpl$lambda_executeCloseDone_14__60: void <init>(io.vertx.core.Handler,io.vertx.core.Future)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.impl.NetServerImpl$lambda_actualClose_9__61: void <init>(io.vertx.core.net.impl.NetServerImpl,io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,io.netty.channel.group.ChannelGroupFuture)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.impl.TaskQueue$run__63: void <init>(io.vertx.core.impl.TaskQueue)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0) in <io.vertx.core.http.impl.Http2HeadersAdaptor$1: java.lang.String get(int)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$1: java.lang.Object get(int)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0) in <io.vertx.core.http.impl.Http2HeadersAdaptor$1: java.lang.String get(int)> ==> <java.util.LinkedList: java.lang.Object get(int)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0) in <io.vertx.core.http.impl.Http2HeadersAdaptor$1: java.lang.String get(int)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0) in <io.vertx.core.http.impl.Http2HeadersAdaptor$1: java.lang.String get(int)> ==> <java.util.ArrayList: java.lang.Object get(int)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.lang.CharSequence: java.lang.String toString()>() in <io.vertx.core.http.impl.Http2HeadersAdaptor$1: java.lang.String get(int)> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.lang.CharSequence: java.lang.String toString()>() in <io.vertx.core.http.impl.Http2HeadersAdaptor$1: java.lang.String get(int)> ==> <java.lang.String: java.lang.String toString()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.lang.CharSequence: java.lang.String toString()>() in <io.vertx.core.http.impl.Http2HeadersAdaptor$1: java.lang.String get(int)> ==> <java.lang.StringBuffer: java.lang.String toString()>
INTERFACE edge: $r6 = interfaceinvoke r0.<io.vertx.core.spi.metrics.PoolMetrics: java.lang.Object submitted()>() in <io.vertx.core.impl.WorkerContext: java.lang.Runnable wrapTask(java.lang.Object,io.vertx.core.Handler,io.vertx.core.spi.metrics.PoolMetrics)> ==> <io.vertx.core.spi.metrics.PoolMetrics: java.lang.Object submitted()>
SPECIAL edge: specialinvoke $r3.<io.vertx.core.impl.TaskQueue$Task: void <init>(java.lang.Runnable,java.util.concurrent.Executor)>(r4, r5) in <io.vertx.core.impl.TaskQueue: void execute(java.lang.Runnable,java.util.concurrent.Executor)> ==> <io.vertx.core.impl.TaskQueue$Task: void <init>(java.lang.Runnable,java.util.concurrent.Executor)>
VIRTUAL edge: virtualinvoke $r6.<java.util.LinkedList: boolean add(java.lang.Object)>($r3) in <io.vertx.core.impl.TaskQueue: void execute(java.lang.Runnable,java.util.concurrent.Executor)> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
EXECUTOR edge: interfaceinvoke r5.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r8) in <io.vertx.core.impl.TaskQueue: void execute(java.lang.Runnable,java.util.concurrent.Executor)> ==> <io.vertx.core.impl.BlockedThreadChecker$1: void run()>
EXECUTOR edge: interfaceinvoke r5.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r8) in <io.vertx.core.impl.TaskQueue: void execute(java.lang.Runnable,java.util.concurrent.Executor)> ==> <io.vertx.core.impl.launcher.commands.Watcher: void run()>
EXECUTOR edge: interfaceinvoke r5.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r8) in <io.vertx.core.impl.TaskQueue: void execute(java.lang.Runnable,java.util.concurrent.Executor)> ==> <io.vertx.core.file.impl.FileResolver$lambda_setupCacheDir_1__26: void run()>
EXECUTOR edge: interfaceinvoke r5.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r8) in <io.vertx.core.impl.TaskQueue: void execute(java.lang.Runnable,java.util.concurrent.Executor)> ==> <io.vertx.core.impl.EventLoopContext$lambda_executeAsync_0__54: void run()>
EXECUTOR edge: interfaceinvoke r5.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r8) in <io.vertx.core.impl.TaskQueue: void execute(java.lang.Runnable,java.util.concurrent.Executor)> ==> <io.vertx.core.Starter$1: void run()>
EXECUTOR edge: interfaceinvoke r5.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r8) in <io.vertx.core.impl.TaskQueue: void execute(java.lang.Runnable,java.util.concurrent.Executor)> ==> <java.lang.Thread: void run()>
EXECUTOR edge: interfaceinvoke r5.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r8) in <io.vertx.core.impl.TaskQueue: void execute(java.lang.Runnable,java.util.concurrent.Executor)> ==> <io.vertx.core.impl.TaskQueue$run__63: void run()>
EXECUTOR edge: interfaceinvoke r5.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r8) in <io.vertx.core.impl.TaskQueue: void execute(java.lang.Runnable,java.util.concurrent.Executor)> ==> <io.vertx.core.impl.launcher.commands.RunCommand$1: void run()>
EXECUTOR edge: interfaceinvoke r5.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r8) in <io.vertx.core.impl.TaskQueue: void execute(java.lang.Runnable,java.util.concurrent.Executor)> ==> <io.vertx.core.impl.HAManager$lambda_addToHADeployList_7__8: void run()>
SPECIAL edge: specialinvoke $r5.<io.vertx.core.impl.WorkerContext$lambda_wrapTask_0__75: void <init>(io.vertx.core.impl.WorkerContext,io.vertx.core.spi.metrics.PoolMetrics,java.lang.Object,java.lang.Object,io.vertx.core.Handler)>($r0, $r1, $r2, $r3, $r4) in <io.vertx.core.impl.WorkerContext$lambda_wrapTask_0__75: java.lang.Runnable bootstrap$(io.vertx.core.impl.WorkerContext,io.vertx.core.spi.metrics.PoolMetrics,java.lang.Object,java.lang.Object,io.vertx.core.Handler)> ==> <io.vertx.core.impl.WorkerContext$lambda_wrapTask_0__75: void <init>(io.vertx.core.impl.WorkerContext,io.vertx.core.spi.metrics.PoolMetrics,java.lang.Object,java.lang.Object,io.vertx.core.Handler)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.spi.logging.LogDelegate: void warn(java.lang.Object,java.lang.Throwable)>(r1, r2) in <io.vertx.core.logging.Logger: void warn(java.lang.Object,java.lang.Throwable)> ==> <io.vertx.core.logging.Log4jLogDelegate: void warn(java.lang.Object,java.lang.Throwable)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.spi.logging.LogDelegate: void warn(java.lang.Object,java.lang.Throwable)>(r1, r2) in <io.vertx.core.logging.Logger: void warn(java.lang.Object,java.lang.Throwable)> ==> <io.vertx.core.logging.SLF4JLogDelegate: void warn(java.lang.Object,java.lang.Throwable)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.spi.logging.LogDelegate: void warn(java.lang.Object,java.lang.Throwable)>(r1, r2) in <io.vertx.core.logging.Logger: void warn(java.lang.Object,java.lang.Throwable)> ==> <io.vertx.core.logging.JULLogDelegate: void warn(java.lang.Object,java.lang.Throwable)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.spi.logging.LogDelegate: void warn(java.lang.Object,java.lang.Throwable)>(r1, r2) in <io.vertx.core.logging.Logger: void warn(java.lang.Object,java.lang.Throwable)> ==> <io.vertx.core.logging.Log4j2LogDelegate: void warn(java.lang.Object,java.lang.Throwable)>
CLINIT edge: $r3 = <java.util.logging.Level: java.util.logging.Level WARNING> in <io.vertx.core.logging.JULLogDelegate: void warn(java.lang.Object,java.lang.Throwable)> ==> <java.util.logging.Level: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<java.util.HashSet: void <init>(java.util.Collection)>($r2) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.HashSet: void <init>(java.util.Collection)>
VIRTUAL edge: r46 = virtualinvoke $r0.<java.util.HashSet: java.util.Iterator iterator()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r46.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r46.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <io.vertx.core.json.JsonArray$Iter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r46.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <io.vertx.core.json.JsonObject$Iter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r46.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r46.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.Scanner: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r46.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r46.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: boolean hasNext()>
INTERFACE edge: $r3 = interfaceinvoke r46.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object next()>
INTERFACE edge: $r3 = interfaceinvoke r46.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <io.vertx.core.json.JsonArray$Iter: java.lang.Object next()>
INTERFACE edge: $r3 = interfaceinvoke r46.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <io.vertx.core.json.JsonObject$Iter: java.lang.Object next()>
INTERFACE edge: $r3 = interfaceinvoke r46.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: java.lang.Object next()>
INTERFACE edge: $r3 = interfaceinvoke r46.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.Scanner: java.lang.Object next()>
INTERFACE edge: $r3 = interfaceinvoke r46.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: java.lang.Object next()>
INTERFACE edge: $r3 = interfaceinvoke r46.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: java.lang.Object next()>
SPECIAL edge: specialinvoke $r5.<java.util.LinkedHashMap: void <init>()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.LinkedHashMap: void <init>()>
INTERFACE edge: interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r50, r50) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r4) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: $r24 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r54) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r12 = interfaceinvoke $r5.<java.util.Map: java.util.Set keySet()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.HashMap: java.util.Set keySet()>
VIRTUAL edge: $z1 = virtualinvoke r4.<java.io.File: boolean isDirectory()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.io.File: boolean isDirectory()>
VIRTUAL edge: $z10 = virtualinvoke r4.<java.io.File: boolean exists()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.io.File: boolean exists()>
VIRTUAL edge: $r47 = virtualinvoke r4.<java.io.File: java.io.File[] listFiles()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.io.File: java.io.File[] listFiles()>
SPECIAL edge: specialinvoke $r45.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot scan the file system to detect file changes") in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
INTERFACE edge: $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.IdentityHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.EnumMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.TreeMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>
SPECIAL edge: specialinvoke $r10.<java.util.HashMap: void <init>(java.util.Map)>(r51) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.HashMap: void <init>(java.util.Map)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.util.HashMap: java.util.Set entrySet()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.HashMap: java.util.Set entrySet()>
INTERFACE edge: r52 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r52 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2: java.util.Iterator iterator()>
INTERFACE edge: r52 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <io.vertx.core.impl.ConcurrentHashSet: java.util.Iterator iterator()>
INTERFACE edge: r52 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$1: java.util.Iterator iterator()>
INTERFACE edge: r52 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: $z12 = interfaceinvoke r52.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: boolean hasNext()>
INTERFACE edge: $z12 = interfaceinvoke r52.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <io.vertx.core.json.JsonArray$Iter: boolean hasNext()>
INTERFACE edge: $z12 = interfaceinvoke r52.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <io.vertx.core.json.JsonObject$Iter: boolean hasNext()>
INTERFACE edge: $z12 = interfaceinvoke r52.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: boolean hasNext()>
INTERFACE edge: $z12 = interfaceinvoke r52.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.Scanner: boolean hasNext()>
INTERFACE edge: $z12 = interfaceinvoke r52.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: boolean hasNext()>
INTERFACE edge: $z12 = interfaceinvoke r52.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: boolean hasNext()>
INTERFACE edge: $r21 = interfaceinvoke r52.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object next()>
INTERFACE edge: $r21 = interfaceinvoke r52.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <io.vertx.core.json.JsonArray$Iter: java.lang.Object next()>
INTERFACE edge: $r21 = interfaceinvoke r52.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <io.vertx.core.json.JsonObject$Iter: java.lang.Object next()>
INTERFACE edge: $r21 = interfaceinvoke r52.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: java.lang.Object next()>
INTERFACE edge: $r21 = interfaceinvoke r52.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.Scanner: java.lang.Object next()>
INTERFACE edge: $r21 = interfaceinvoke r52.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: java.lang.Object next()>
INTERFACE edge: $r21 = interfaceinvoke r52.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: java.lang.Object next()>
INTERFACE edge: $r22 = interfaceinvoke r53.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getKey()>
INTERFACE edge: $r22 = interfaceinvoke r53.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getKey()>
INTERFACE edge: $r22 = interfaceinvoke r53.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>
INTERFACE edge: $r22 = interfaceinvoke r53.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getKey()>
INTERFACE edge: $r22 = interfaceinvoke r53.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getKey()>
INTERFACE edge: $r22 = interfaceinvoke r53.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getKey()>
INTERFACE edge: $r23 = interfaceinvoke r53.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r23 = interfaceinvoke r53.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r23 = interfaceinvoke r53.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r23 = interfaceinvoke r53.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r23 = interfaceinvoke r53.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r23 = interfaceinvoke r53.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: interfaceinvoke r51.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r54) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.HashMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke r51.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r54) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.IdentityHashMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke r51.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r54) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.Hashtable: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke r51.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r54) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.EnumMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke r51.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r54) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke r51.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r54) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.security.Provider: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke r51.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r54) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.jar.Attributes: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke r51.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r54) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.TreeMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke r51.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r54) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke r51.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r54) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.WeakHashMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: $z7 = interfaceinvoke r51.<java.util.Map: boolean isEmpty()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.HashMap: boolean isEmpty()>
INTERFACE edge: $z7 = interfaceinvoke r51.<java.util.Map: boolean isEmpty()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.IdentityHashMap: boolean isEmpty()>
INTERFACE edge: $z7 = interfaceinvoke r51.<java.util.Map: boolean isEmpty()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.Hashtable: boolean isEmpty()>
INTERFACE edge: $z7 = interfaceinvoke r51.<java.util.Map: boolean isEmpty()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.AbstractMap: boolean isEmpty()>
INTERFACE edge: $z7 = interfaceinvoke r51.<java.util.Map: boolean isEmpty()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.concurrent.ConcurrentHashMap: boolean isEmpty()>
INTERFACE edge: $z7 = interfaceinvoke r51.<java.util.Map: boolean isEmpty()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.jar.Attributes: boolean isEmpty()>
INTERFACE edge: $z7 = interfaceinvoke r51.<java.util.Map: boolean isEmpty()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.TreeMap: boolean isEmpty()>
INTERFACE edge: $z7 = interfaceinvoke r51.<java.util.Map: boolean isEmpty()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: boolean isEmpty()>
INTERFACE edge: $z7 = interfaceinvoke r51.<java.util.Map: boolean isEmpty()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.WeakHashMap: boolean isEmpty()>
INTERFACE edge: interfaceinvoke r51.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r25, $r26) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r51.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r25, $r26) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r51.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r25, $r26) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r51.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r25, $r26) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r51.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r25, $r26) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r51.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r25, $r26) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r51.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r25, $r26) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r51.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r25, $r26) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r51.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r25, $r26) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r51.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r25, $r26) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: $z3 = interfaceinvoke r51.<java.util.Map: boolean containsKey(java.lang.Object)>(r57) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.HashMap: boolean containsKey(java.lang.Object)>
INTERFACE edge: $z3 = interfaceinvoke r51.<java.util.Map: boolean containsKey(java.lang.Object)>(r57) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.IdentityHashMap: boolean containsKey(java.lang.Object)>
INTERFACE edge: $z3 = interfaceinvoke r51.<java.util.Map: boolean containsKey(java.lang.Object)>(r57) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.Hashtable: boolean containsKey(java.lang.Object)>
INTERFACE edge: $z3 = interfaceinvoke r51.<java.util.Map: boolean containsKey(java.lang.Object)>(r57) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.EnumMap: boolean containsKey(java.lang.Object)>
INTERFACE edge: $z3 = interfaceinvoke r51.<java.util.Map: boolean containsKey(java.lang.Object)>(r57) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.concurrent.ConcurrentHashMap: boolean containsKey(java.lang.Object)>
INTERFACE edge: $z3 = interfaceinvoke r51.<java.util.Map: boolean containsKey(java.lang.Object)>(r57) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.jar.Attributes: boolean containsKey(java.lang.Object)>
INTERFACE edge: $z3 = interfaceinvoke r51.<java.util.Map: boolean containsKey(java.lang.Object)>(r57) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.TreeMap: boolean containsKey(java.lang.Object)>
INTERFACE edge: $z3 = interfaceinvoke r51.<java.util.Map: boolean containsKey(java.lang.Object)>(r57) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: boolean containsKey(java.lang.Object)>
INTERFACE edge: $z3 = interfaceinvoke r51.<java.util.Map: boolean containsKey(java.lang.Object)>(r57) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.WeakHashMap: boolean containsKey(java.lang.Object)>
INTERFACE edge: interfaceinvoke r51.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r57, $r14) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r51.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r57, $r14) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r51.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r57, $r14) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r51.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r57, $r14) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r51.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r57, $r14) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r51.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r57, $r14) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r51.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r57, $r14) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r51.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r57, $r14) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r51.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r57, $r14) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r51.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r57, $r14) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r41.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r4) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.HashMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r41.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r4) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.IdentityHashMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r41.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r4) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.Hashtable: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r41.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r4) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.EnumMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r41.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r4) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r41.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r4) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.security.Provider: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r41.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r4) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.jar.Attributes: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r41.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r4) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.TreeMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r41.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r4) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r41.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r4) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.WeakHashMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r43.<java.util.Set: boolean remove(java.lang.Object)>(r4) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.HashSet: boolean remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r43.<java.util.Set: boolean remove(java.lang.Object)>(r4) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.AbstractCollection: boolean remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r43.<java.util.Set: boolean remove(java.lang.Object)>(r4) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <io.vertx.core.impl.ConcurrentHashSet: boolean remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r43.<java.util.Set: boolean remove(java.lang.Object)>(r4) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$1: boolean remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r43.<java.util.Set: boolean remove(java.lang.Object)>(r4) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.TreeSet: boolean remove(java.lang.Object)>
SPECIAL edge: specialinvoke $r35.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File: ") in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r54) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has been deleted") in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r36.<io.vertx.core.logging.Logger: void trace(java.lang.Object)>($r40) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <io.vertx.core.logging.Logger: void trace(java.lang.Object)>
VIRTUAL edge: $z8 = virtualinvoke r1.<io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)>(r54) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)>
VIRTUAL edge: $z6 = virtualinvoke r1.<io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)>(r54) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)>
SPECIAL edge: specialinvoke r1.<io.vertx.core.impl.launcher.commands.Watcher: void addFileToWatchedList(java.io.File)>(r57) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <io.vertx.core.impl.launcher.commands.Watcher: void addFileToWatchedList(java.io.File)>
VIRTUAL edge: $z5 = virtualinvoke r1.<io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)>(r57) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)>
VIRTUAL edge: $l8 = virtualinvoke r25.<java.io.File: long lastModified()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.io.File: long lastModified()>
VIRTUAL edge: $l13 = virtualinvoke r25.<java.io.File: long length()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.io.File: long length()>
VIRTUAL edge: $l11 = virtualinvoke r25.<java.io.File: long lastModified()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.io.File: long lastModified()>
VIRTUAL edge: $l12 = virtualinvoke r25.<java.io.File: long length()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.io.File: long length()>
SPECIAL edge: specialinvoke $r26.<io.vertx.core.impl.launcher.commands.Watcher$FileInfo: void <init>(long,long,io.vertx.core.impl.launcher.commands.Watcher$1)>($l11, $l12, null) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <io.vertx.core.impl.launcher.commands.Watcher$FileInfo: void <init>(long,long,io.vertx.core.impl.launcher.commands.Watcher$1)>
SPECIAL edge: specialinvoke $r28.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File: ") in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r54) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has been modified") in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r29.<io.vertx.core.logging.Logger: void trace(java.lang.Object)>($r33) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <io.vertx.core.logging.Logger: void trace(java.lang.Object)>
INTERFACE edge: r56 = interfaceinvoke $r12.<java.util.Set: java.util.Iterator iterator()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r56 = interfaceinvoke $r12.<java.util.Set: java.util.Iterator iterator()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2: java.util.Iterator iterator()>
INTERFACE edge: r56 = interfaceinvoke $r12.<java.util.Set: java.util.Iterator iterator()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <io.vertx.core.impl.ConcurrentHashSet: java.util.Iterator iterator()>
INTERFACE edge: r56 = interfaceinvoke $r12.<java.util.Set: java.util.Iterator iterator()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$1: java.util.Iterator iterator()>
INTERFACE edge: r56 = interfaceinvoke $r12.<java.util.Set: java.util.Iterator iterator()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: $z2 = interfaceinvoke r56.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: boolean hasNext()>
INTERFACE edge: $z2 = interfaceinvoke r56.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <io.vertx.core.json.JsonArray$Iter: boolean hasNext()>
INTERFACE edge: $z2 = interfaceinvoke r56.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <io.vertx.core.json.JsonObject$Iter: boolean hasNext()>
INTERFACE edge: $z2 = interfaceinvoke r56.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: boolean hasNext()>
INTERFACE edge: $z2 = interfaceinvoke r56.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.Scanner: boolean hasNext()>
INTERFACE edge: $z2 = interfaceinvoke r56.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: boolean hasNext()>
INTERFACE edge: $z2 = interfaceinvoke r56.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: boolean hasNext()>
INTERFACE edge: $r13 = interfaceinvoke r56.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object next()>
INTERFACE edge: $r13 = interfaceinvoke r56.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <io.vertx.core.json.JsonArray$Iter: java.lang.Object next()>
INTERFACE edge: $r13 = interfaceinvoke r56.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <io.vertx.core.json.JsonObject$Iter: java.lang.Object next()>
INTERFACE edge: $r13 = interfaceinvoke r56.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: java.lang.Object next()>
INTERFACE edge: $r13 = interfaceinvoke r56.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.util.Scanner: java.lang.Object next()>
INTERFACE edge: $r13 = interfaceinvoke r56.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: java.lang.Object next()>
INTERFACE edge: $r13 = interfaceinvoke r56.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: java.lang.Object next()>
VIRTUAL edge: $l6 = virtualinvoke r57.<java.io.File: long lastModified()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.io.File: long lastModified()>
VIRTUAL edge: $l7 = virtualinvoke r57.<java.io.File: long length()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.io.File: long length()>
VIRTUAL edge: $z4 = virtualinvoke r57.<java.io.File: boolean isDirectory()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.io.File: boolean isDirectory()>
SPECIAL edge: specialinvoke $r14.<io.vertx.core.impl.launcher.commands.Watcher$FileInfo: void <init>(long,long,io.vertx.core.impl.launcher.commands.Watcher$1)>($l6, $l7, null) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <io.vertx.core.impl.launcher.commands.Watcher$FileInfo: void <init>(long,long,io.vertx.core.impl.launcher.commands.Watcher$1)>
SPECIAL edge: specialinvoke $r16.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File was added: ") in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r57) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r17.<io.vertx.core.logging.Logger: void trace(java.lang.Object)>($r20) in <io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()> ==> <io.vertx.core.logging.Logger: void trace(java.lang.Object)>
CLINIT edge: $r16 = <io.vertx.core.impl.launcher.commands.Watcher: io.vertx.core.logging.Logger LOGGER> in <io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)> ==> <io.vertx.core.impl.launcher.commands.Watcher: void <clinit>()>
STATIC edge: $z3 = staticinvoke <io.vertx.core.impl.launcher.commands.FileSelector: boolean matchPath(java.lang.String,java.lang.String,boolean)>(r36, $r8, $z10) in <io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)> ==> <io.vertx.core.impl.launcher.commands.FileSelector: boolean matchPath(java.lang.String,java.lang.String,boolean)>
STATIC edge: $z2 = staticinvoke <io.vertx.core.impl.launcher.commands.ExecUtils: boolean isWindows()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)> ==> <io.vertx.core.impl.launcher.commands.ExecUtils: boolean isWindows()>
STATIC edge: $z5 = staticinvoke <io.vertx.core.impl.launcher.commands.FileSelector: boolean matchPath(java.lang.String,java.lang.String,boolean)>(r36, $r11, $z9) in <io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)> ==> <io.vertx.core.impl.launcher.commands.FileSelector: boolean matchPath(java.lang.String,java.lang.String,boolean)>
STATIC edge: $z4 = staticinvoke <io.vertx.core.impl.launcher.commands.ExecUtils: boolean isWindows()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)> ==> <io.vertx.core.impl.launcher.commands.ExecUtils: boolean isWindows()>
CLINIT edge: $z2 = staticinvoke <io.vertx.core.impl.launcher.commands.ExecUtils: boolean isWindows()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)> ==> <io.vertx.core.impl.launcher.commands.ExecUtils: void <clinit>()>
CLINIT edge: $z4 = staticinvoke <io.vertx.core.impl.launcher.commands.ExecUtils: boolean isWindows()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)> ==> <io.vertx.core.impl.launcher.commands.ExecUtils: void <clinit>()>
CLINIT edge: $r2 = <java.io.File: java.lang.String separator> in <io.vertx.core.impl.launcher.commands.FileSelector: boolean matchPath(java.lang.String,java.lang.String,boolean)> ==> <java.io.File: void <clinit>()>
STATIC edge: $z1 = staticinvoke <io.vertx.core.impl.launcher.commands.FileSelector: boolean matchPath(java.lang.String,java.lang.String,java.lang.String,boolean)>(r0, r1, $r2, z0) in <io.vertx.core.impl.launcher.commands.FileSelector: boolean matchPath(java.lang.String,java.lang.String,boolean)> ==> <io.vertx.core.impl.launcher.commands.FileSelector: boolean matchPath(java.lang.String,java.lang.String,java.lang.String,boolean)>
CLINIT edge: $r0 = <io.vertx.core.impl.launcher.commands.ExecUtils: java.lang.String osName> in <io.vertx.core.impl.launcher.commands.ExecUtils: boolean isWindows()> ==> <io.vertx.core.impl.launcher.commands.ExecUtils: void <clinit>()>
STATIC edge: $z1 = staticinvoke <io.vertx.core.impl.launcher.commands.FileSelector: boolean matchPathPattern(java.lang.String,java.lang.String,java.lang.String,boolean)>(r0, r1, r2, z0) in <io.vertx.core.impl.launcher.commands.FileSelector: boolean matchPath(java.lang.String,java.lang.String,java.lang.String,boolean)> ==> <io.vertx.core.impl.launcher.commands.FileSelector: boolean matchPathPattern(java.lang.String,java.lang.String,java.lang.String,boolean)>
STATIC edge: $z0 = staticinvoke <io.vertx.core.impl.launcher.commands.FileSelector: boolean separatorPatternStartSlashMismatch(java.lang.String,java.lang.String,java.lang.String)>(r0, r1, r2) in <io.vertx.core.impl.launcher.commands.FileSelector: boolean matchPathPattern(java.lang.String,java.lang.String,java.lang.String,boolean)> ==> <io.vertx.core.impl.launcher.commands.FileSelector: boolean separatorPatternStartSlashMismatch(java.lang.String,java.lang.String,java.lang.String)>
STATIC edge: $z2 = staticinvoke <io.vertx.core.impl.launcher.commands.FileSelector: boolean matchPathPattern(java.lang.String[],java.lang.String[],boolean)>(r3, r4, z1) in <io.vertx.core.impl.launcher.commands.FileSelector: boolean matchPathPattern(java.lang.String,java.lang.String,java.lang.String,boolean)> ==> <io.vertx.core.impl.launcher.commands.FileSelector: boolean matchPathPattern(java.lang.String[],java.lang.String[],boolean)>
STATIC edge: r4 = staticinvoke <io.vertx.core.impl.launcher.commands.FileSelector: java.lang.String[] tokenizePathToString(java.lang.String,java.lang.String)>(r1, r2) in <io.vertx.core.impl.launcher.commands.FileSelector: boolean matchPathPattern(java.lang.String,java.lang.String,java.lang.String,boolean)> ==> <io.vertx.core.impl.launcher.commands.FileSelector: java.lang.String[] tokenizePathToString(java.lang.String,java.lang.String)>
STATIC edge: r3 = staticinvoke <io.vertx.core.impl.launcher.commands.FileSelector: java.lang.String[] tokenizePathToString(java.lang.String,java.lang.String)>(r0, r2) in <io.vertx.core.impl.launcher.commands.FileSelector: boolean matchPathPattern(java.lang.String,java.lang.String,java.lang.String,boolean)> ==> <io.vertx.core.impl.launcher.commands.FileSelector: java.lang.String[] tokenizePathToString(java.lang.String,java.lang.String)>
STATIC edge: $z9 = staticinvoke <io.vertx.core.impl.launcher.commands.FileSelector: boolean match(java.lang.String,java.lang.String,boolean)>(r10, $r9, z1) in <io.vertx.core.impl.launcher.commands.FileSelector: boolean matchPathPattern(java.lang.String[],java.lang.String[],boolean)> ==> <io.vertx.core.impl.launcher.commands.FileSelector: boolean match(java.lang.String,java.lang.String,boolean)>
STATIC edge: $z2 = staticinvoke <io.vertx.core.impl.launcher.commands.FileSelector: boolean match(java.lang.String,java.lang.String,boolean)>(r3, r4, z1) in <io.vertx.core.impl.launcher.commands.FileSelector: boolean matchPathPattern(java.lang.String[],java.lang.String[],boolean)> ==> <io.vertx.core.impl.launcher.commands.FileSelector: boolean match(java.lang.String,java.lang.String,boolean)>
STATIC edge: $z6 = staticinvoke <io.vertx.core.impl.launcher.commands.FileSelector: boolean match(java.lang.String,java.lang.String,boolean)>(r11, $r7, z1) in <io.vertx.core.impl.launcher.commands.FileSelector: boolean matchPathPattern(java.lang.String[],java.lang.String[],boolean)> ==> <io.vertx.core.impl.launcher.commands.FileSelector: boolean match(java.lang.String,java.lang.String,boolean)>
CLINIT edge: $r6 = newarray (java.lang.String)[$i0] in <io.vertx.core.impl.launcher.commands.FileSelector: java.lang.String[] tokenizePathToString(java.lang.String,java.lang.String)> ==> <java.lang.String: void <clinit>()>
STATIC edge: $z1 = staticinvoke <io.vertx.core.impl.launcher.commands.FileSelector: boolean match(char[],char[],boolean)>(r1, r3, z0) in <io.vertx.core.impl.launcher.commands.FileSelector: boolean match(java.lang.String,java.lang.String,boolean)> ==> <io.vertx.core.impl.launcher.commands.FileSelector: boolean match(char[],char[],boolean)>
STATIC edge: $z7 = staticinvoke <io.vertx.core.impl.launcher.commands.FileSelector: boolean equals(char,char,boolean)>(c25, $c16, z1) in <io.vertx.core.impl.launcher.commands.FileSelector: boolean match(char[],char[],boolean)> ==> <io.vertx.core.impl.launcher.commands.FileSelector: boolean equals(char,char,boolean)>
STATIC edge: $z0 = staticinvoke <io.vertx.core.impl.launcher.commands.FileSelector: boolean checkOnlyStartsLeft(char[],int,int)>(r0, i17, i18) in <io.vertx.core.impl.launcher.commands.FileSelector: boolean match(char[],char[],boolean)> ==> <io.vertx.core.impl.launcher.commands.FileSelector: boolean checkOnlyStartsLeft(char[],int,int)>
STATIC edge: $z2 = staticinvoke <io.vertx.core.impl.launcher.commands.FileSelector: boolean equals(char,char,boolean)>(c35, $c12, z1) in <io.vertx.core.impl.launcher.commands.FileSelector: boolean match(char[],char[],boolean)> ==> <io.vertx.core.impl.launcher.commands.FileSelector: boolean equals(char,char,boolean)>
STATIC edge: $z3 = staticinvoke <io.vertx.core.impl.launcher.commands.FileSelector: boolean checkOnlyStartsLeft(char[],int,int)>(r0, i17, i18) in <io.vertx.core.impl.launcher.commands.FileSelector: boolean match(char[],char[],boolean)> ==> <io.vertx.core.impl.launcher.commands.FileSelector: boolean checkOnlyStartsLeft(char[],int,int)>
STATIC edge: $z4 = staticinvoke <io.vertx.core.impl.launcher.commands.FileSelector: boolean equals(char,char,boolean)>($c3, $c14, z1) in <io.vertx.core.impl.launcher.commands.FileSelector: boolean match(char[],char[],boolean)> ==> <io.vertx.core.impl.launcher.commands.FileSelector: boolean equals(char,char,boolean)>
STATIC edge: $z5 = staticinvoke <io.vertx.core.impl.launcher.commands.FileSelector: boolean checkOnlyStartsLeft(char[],int,int)>(r0, i17, i18) in <io.vertx.core.impl.launcher.commands.FileSelector: boolean match(char[],char[],boolean)> ==> <io.vertx.core.impl.launcher.commands.FileSelector: boolean checkOnlyStartsLeft(char[],int,int)>
STATIC edge: $z6 = staticinvoke <io.vertx.core.impl.launcher.commands.FileSelector: boolean equals(char,char,boolean)>($c2, $c15, z1) in <io.vertx.core.impl.launcher.commands.FileSelector: boolean match(char[],char[],boolean)> ==> <io.vertx.core.impl.launcher.commands.FileSelector: boolean equals(char,char,boolean)>
CLINIT edge: $c2 = staticinvoke <java.lang.Character: char toUpperCase(char)>(c0) in <io.vertx.core.impl.launcher.commands.FileSelector: boolean equals(char,char,boolean)> ==> <java.lang.Character: void <clinit>()>
STATIC edge: $c5 = staticinvoke <java.lang.Character: char toLowerCase(char)>(c1) in <io.vertx.core.impl.launcher.commands.FileSelector: boolean equals(char,char,boolean)> ==> <java.lang.Character: char toLowerCase(char)>
STATIC edge: $c4 = staticinvoke <java.lang.Character: char toLowerCase(char)>(c0) in <io.vertx.core.impl.launcher.commands.FileSelector: boolean equals(char,char,boolean)> ==> <java.lang.Character: char toLowerCase(char)>
STATIC edge: $c3 = staticinvoke <java.lang.Character: char toUpperCase(char)>(c1) in <io.vertx.core.impl.launcher.commands.FileSelector: boolean equals(char,char,boolean)> ==> <java.lang.Character: char toUpperCase(char)>
STATIC edge: $c2 = staticinvoke <java.lang.Character: char toUpperCase(char)>(c0) in <io.vertx.core.impl.launcher.commands.FileSelector: boolean equals(char,char,boolean)> ==> <java.lang.Character: char toUpperCase(char)>
CLINIT edge: <java.lang.Character: java.lang.Class TYPE> = null in <java.lang.Character: void <clinit>()> ==> <java.lang.Character: void <clinit>()>
VIRTUAL edge: virtualinvoke $r0.<io.vertx.core.logging.Logger: void info(java.lang.Object)>("Redeploying!") in <io.vertx.core.impl.launcher.commands.Watcher: void trigger()> ==> <io.vertx.core.logging.Logger: void info(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.impl.launcher.commands.Watcher: void trigger()> ==> <io.vertx.core.impl.DeploymentManager$lambda_doDeployVerticle_2__17: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.impl.launcher.commands.Watcher: void trigger()> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.impl.launcher.commands.Watcher: void trigger()> ==> <io.vertx.core.impl.FutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.impl.launcher.commands.Watcher: void trigger()> ==> <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.impl.launcher.commands.Watcher: void trigger()> ==> <io.vertx.core.impl.SucceededFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.impl.launcher.commands.Watcher: void trigger()> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.impl.launcher.commands.Watcher: void trigger()> ==> <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.impl.launcher.commands.Watcher: void trigger()> ==> <io.vertx.core.impl.VertxImpl$lambda_joinCluster_1__10: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.impl.launcher.commands.Watcher: void trigger()> ==> <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.impl.launcher.commands.Watcher: void trigger()> ==> <io.vertx.core.Starter$lambda_runVerticle_1__1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.impl.launcher.commands.Watcher: void trigger()> ==> <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.impl.launcher.commands.Watcher: void trigger()> ==> <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.impl.launcher.commands.Watcher: void trigger()> ==> <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.impl.launcher.commands.Watcher: void trigger()> ==> <io.vertx.core.Starter$lambda_startVertx_0__2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.impl.launcher.commands.Watcher: void trigger()> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.impl.launcher.commands.Watcher: void trigger()> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.impl.launcher.commands.Watcher: void trigger()> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_start_3__19: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.impl.launcher.commands.Watcher: void trigger()> ==> <io.vertx.core.impl.HAManager$lambda_doDeployVerticle_4__7: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.impl.launcher.commands.Watcher: void trigger()> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_close_0__29: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.impl.launcher.commands.Watcher: void trigger()> ==> <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.impl.launcher.commands.Watcher: void trigger()> ==> <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.impl.launcher.commands.Watcher: void trigger()> ==> <io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.impl.launcher.commands.Watcher: void trigger()> ==> <io.vertx.core.Starter$lambda_createLoggingHandler_2__3: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.impl.launcher.commands.Watcher: void trigger()> ==> <io.vertx.core.impl.CompositeFutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.impl.launcher.commands.Watcher: void trigger()> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.impl.launcher.commands.Watcher: void trigger()> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_finalize_6__18: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.impl.launcher.commands.Watcher: void trigger()> ==> <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.impl.launcher.commands.Watcher: void trigger()> ==> <io.vertx.core.impl.VertxImpl$lambda_init_0__9: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.impl.launcher.commands.Watcher: void trigger()> ==> <io.vertx.core.impl.FailedFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.impl.launcher.commands.Watcher: void trigger()> ==> <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r3) in <io.vertx.core.impl.launcher.commands.Watcher: void trigger()> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_close_5__30: void handle(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r0.<io.vertx.core.logging.Logger: void info(java.lang.Object)>("Stopping redeployment") in <io.vertx.core.impl.launcher.commands.Watcher: void close()> ==> <io.vertx.core.logging.Logger: void info(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.launcher.commands.Watcher: void close()> ==> <io.vertx.core.impl.DeploymentManager$lambda_doDeployVerticle_2__17: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.launcher.commands.Watcher: void close()> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.launcher.commands.Watcher: void close()> ==> <io.vertx.core.impl.FutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.launcher.commands.Watcher: void close()> ==> <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.launcher.commands.Watcher: void close()> ==> <io.vertx.core.impl.SucceededFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.launcher.commands.Watcher: void close()> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.launcher.commands.Watcher: void close()> ==> <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.launcher.commands.Watcher: void close()> ==> <io.vertx.core.impl.VertxImpl$lambda_joinCluster_1__10: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.launcher.commands.Watcher: void close()> ==> <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.launcher.commands.Watcher: void close()> ==> <io.vertx.core.Starter$lambda_runVerticle_1__1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.launcher.commands.Watcher: void close()> ==> <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.launcher.commands.Watcher: void close()> ==> <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.launcher.commands.Watcher: void close()> ==> <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.launcher.commands.Watcher: void close()> ==> <io.vertx.core.Starter$lambda_startVertx_0__2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.launcher.commands.Watcher: void close()> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.launcher.commands.Watcher: void close()> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.launcher.commands.Watcher: void close()> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_start_3__19: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.launcher.commands.Watcher: void close()> ==> <io.vertx.core.impl.HAManager$lambda_doDeployVerticle_4__7: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.launcher.commands.Watcher: void close()> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_close_0__29: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.launcher.commands.Watcher: void close()> ==> <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.launcher.commands.Watcher: void close()> ==> <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.launcher.commands.Watcher: void close()> ==> <io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.launcher.commands.Watcher: void close()> ==> <io.vertx.core.Starter$lambda_createLoggingHandler_2__3: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.launcher.commands.Watcher: void close()> ==> <io.vertx.core.impl.CompositeFutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.launcher.commands.Watcher: void close()> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.launcher.commands.Watcher: void close()> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_finalize_6__18: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.launcher.commands.Watcher: void close()> ==> <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.launcher.commands.Watcher: void close()> ==> <io.vertx.core.impl.VertxImpl$lambda_init_0__9: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.launcher.commands.Watcher: void close()> ==> <io.vertx.core.impl.FailedFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.launcher.commands.Watcher: void close()> ==> <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.impl.launcher.commands.Watcher: void close()> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_close_5__30: void handle(java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.impl.launcher.commands.Watcher$lambda_trigger_4__76: void <init>(io.vertx.core.impl.launcher.commands.Watcher,long)>($r0, $l0) in <io.vertx.core.impl.launcher.commands.Watcher$lambda_trigger_4__76: io.vertx.core.Handler bootstrap$(io.vertx.core.impl.launcher.commands.Watcher,long)> ==> <io.vertx.core.impl.launcher.commands.Watcher$lambda_trigger_4__76: void <init>(io.vertx.core.impl.launcher.commands.Watcher,long)>
SPECIAL edge: specialinvoke $r0.<java.util.concurrent.CountDownLatch: void <init>(int)>(1) in <io.vertx.core.file.impl.FileResolver: void lambda$setupCacheDir$1()> ==> <java.util.concurrent.CountDownLatch: void <init>(int)>
VIRTUAL edge: virtualinvoke $r0.<java.util.concurrent.CountDownLatch: boolean await(long,java.util.concurrent.TimeUnit)>(10L, $r5) in <io.vertx.core.file.impl.FileResolver: void lambda$setupCacheDir$1()> ==> <java.util.concurrent.CountDownLatch: boolean await(long,java.util.concurrent.TimeUnit)>
SPECIAL edge: specialinvoke $r2.<java.lang.Thread: void <init>(java.lang.Runnable)>($r4) in <io.vertx.core.file.impl.FileResolver: void lambda$setupCacheDir$1()> ==> <java.lang.Thread: void <init>(java.lang.Runnable)>
VIRTUAL edge: virtualinvoke $r2.<java.lang.Thread: void run()>() in <io.vertx.core.file.impl.FileResolver: void lambda$setupCacheDir$1()> ==> <io.vertx.core.Starter$1: void run()>
VIRTUAL edge: virtualinvoke $r2.<java.lang.Thread: void run()>() in <io.vertx.core.file.impl.FileResolver: void lambda$setupCacheDir$1()> ==> <io.vertx.core.impl.launcher.commands.RunCommand$1: void run()>
VIRTUAL edge: virtualinvoke $r2.<java.lang.Thread: void run()>() in <io.vertx.core.file.impl.FileResolver: void lambda$setupCacheDir$1()> ==> <java.lang.Thread: void run()>
VIRTUAL edge: virtualinvoke $r8.<java.lang.Thread: void interrupt()>() in <io.vertx.core.file.impl.FileResolver: void lambda$setupCacheDir$1()> ==> <java.lang.Thread: void interrupt()>
SPECIAL edge: specialinvoke $r2.<io.vertx.core.file.impl.FileResolver$lambda_null_0__77: void <init>(io.vertx.core.file.impl.FileResolver,java.util.concurrent.CountDownLatch)>($r0, $r1) in <io.vertx.core.file.impl.FileResolver$lambda_null_0__77: java.lang.Runnable bootstrap$(io.vertx.core.file.impl.FileResolver,java.util.concurrent.CountDownLatch)> ==> <io.vertx.core.file.impl.FileResolver$lambda_null_0__77: void <init>(io.vertx.core.file.impl.FileResolver,java.util.concurrent.CountDownLatch)>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.impl.EventLoopContext: boolean executeTask(java.lang.Object,io.vertx.core.Handler)>(null, r1) in <io.vertx.core.impl.EventLoopContext: void lambda$executeAsync$0(io.vertx.core.Handler)> ==> <io.vertx.core.impl.ContextImpl: boolean executeTask(java.lang.Object,io.vertx.core.Handler)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.util.LinkedList: java.lang.Object poll()>() in <io.vertx.core.impl.TaskQueue: void run()> ==> <java.util.LinkedList: java.lang.Object poll()>
VIRTUAL edge: virtualinvoke $r8.<java.util.LinkedList: void addFirst(java.lang.Object)>(r4) in <io.vertx.core.impl.TaskQueue: void run()> ==> <java.util.LinkedList: void addFirst(java.lang.Object)>
EXECUTOR edge: interfaceinvoke $r9.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r10) in <io.vertx.core.impl.TaskQueue: void run()> ==> <io.vertx.core.impl.BlockedThreadChecker$1: void run()>
EXECUTOR edge: interfaceinvoke $r9.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r10) in <io.vertx.core.impl.TaskQueue: void run()> ==> <io.vertx.core.impl.launcher.commands.Watcher: void run()>
EXECUTOR edge: interfaceinvoke $r9.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r10) in <io.vertx.core.impl.TaskQueue: void run()> ==> <io.vertx.core.file.impl.FileResolver$lambda_setupCacheDir_1__26: void run()>
EXECUTOR edge: interfaceinvoke $r9.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r10) in <io.vertx.core.impl.TaskQueue: void run()> ==> <io.vertx.core.impl.EventLoopContext$lambda_executeAsync_0__54: void run()>
EXECUTOR edge: interfaceinvoke $r9.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r10) in <io.vertx.core.impl.TaskQueue: void run()> ==> <io.vertx.core.Starter$1: void run()>
EXECUTOR edge: interfaceinvoke $r9.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r10) in <io.vertx.core.impl.TaskQueue: void run()> ==> <java.lang.Thread: void run()>
EXECUTOR edge: interfaceinvoke $r9.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r10) in <io.vertx.core.impl.TaskQueue: void run()> ==> <io.vertx.core.impl.TaskQueue$run__63: void run()>
EXECUTOR edge: interfaceinvoke $r9.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r10) in <io.vertx.core.impl.TaskQueue: void run()> ==> <io.vertx.core.impl.launcher.commands.RunCommand$1: void run()>
EXECUTOR edge: interfaceinvoke $r9.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r10) in <io.vertx.core.impl.TaskQueue: void run()> ==> <io.vertx.core.impl.HAManager$lambda_addToHADeployList_7__8: void run()>
INTERFACE edge: interfaceinvoke $r7.<java.lang.Runnable: void run()>() in <io.vertx.core.impl.TaskQueue: void run()> ==> <io.vertx.core.impl.BlockedThreadChecker$1: void run()>
INTERFACE edge: interfaceinvoke $r7.<java.lang.Runnable: void run()>() in <io.vertx.core.impl.TaskQueue: void run()> ==> <io.vertx.core.impl.launcher.commands.Watcher: void run()>
INTERFACE edge: interfaceinvoke $r7.<java.lang.Runnable: void run()>() in <io.vertx.core.impl.TaskQueue: void run()> ==> <io.vertx.core.file.impl.FileResolver$lambda_setupCacheDir_1__26: void run()>
INTERFACE edge: interfaceinvoke $r7.<java.lang.Runnable: void run()>() in <io.vertx.core.impl.TaskQueue: void run()> ==> <io.vertx.core.impl.EventLoopContext$lambda_executeAsync_0__54: void run()>
INTERFACE edge: interfaceinvoke $r7.<java.lang.Runnable: void run()>() in <io.vertx.core.impl.TaskQueue: void run()> ==> <io.vertx.core.Starter$1: void run()>
INTERFACE edge: interfaceinvoke $r7.<java.lang.Runnable: void run()>() in <io.vertx.core.impl.TaskQueue: void run()> ==> <java.lang.Thread: void run()>
INTERFACE edge: interfaceinvoke $r7.<java.lang.Runnable: void run()>() in <io.vertx.core.impl.TaskQueue: void run()> ==> <io.vertx.core.impl.TaskQueue$run__63: void run()>
INTERFACE edge: interfaceinvoke $r7.<java.lang.Runnable: void run()>() in <io.vertx.core.impl.TaskQueue: void run()> ==> <io.vertx.core.impl.launcher.commands.RunCommand$1: void run()>
INTERFACE edge: interfaceinvoke $r7.<java.lang.Runnable: void run()>() in <io.vertx.core.impl.TaskQueue: void run()> ==> <io.vertx.core.impl.HAManager$lambda_addToHADeployList_7__8: void run()>
VIRTUAL edge: virtualinvoke $r13.<io.vertx.core.logging.Logger: void error(java.lang.Object,java.lang.Throwable)>("Caught unexpected Throwable", $r12) in <io.vertx.core.impl.TaskQueue: void run()> ==> <io.vertx.core.logging.Logger: void error(java.lang.Object,java.lang.Throwable)>
VIRTUAL edge: virtualinvoke $r2.<io.vertx.core.impl.launcher.commands.Watcher: void close()>() in <io.vertx.core.impl.launcher.commands.RunCommand: void shutdownRedeployment()> ==> <io.vertx.core.impl.launcher.commands.Watcher: void close()>
INTERFACE edge: r2 = interfaceinvoke $r1.<io.vertx.core.impl.VertxInternal: io.vertx.core.impl.ContextInternal getContext()>() in <io.vertx.core.impl.HAManager: void lambda$addToHADeployList$7(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.ContextInternal getContext()>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.impl.HAManager: void deployVerticle(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)>(r3, r4, r5) in <io.vertx.core.impl.HAManager: void lambda$addToHADeployList$7(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)> ==> <io.vertx.core.impl.HAManager: void deployVerticle(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.impl.ContextImpl: void setContext(io.vertx.core.impl.ContextImpl)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempt to setContext on non Vert.x thread ") in <io.vertx.core.impl.ContextImpl: void setContext(io.vertx.core.impl.ContextImpl)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4) in <io.vertx.core.impl.ContextImpl: void setContext(io.vertx.core.impl.ContextImpl)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.impl.ContextImpl: void setContext(io.vertx.core.impl.ContextImpl)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6) in <io.vertx.core.impl.ContextImpl: void setContext(io.vertx.core.impl.ContextImpl)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.impl.VertxThread: void setContext(io.vertx.core.impl.ContextImpl)>(r1) in <io.vertx.core.impl.ContextImpl: void setContext(io.vertx.core.impl.VertxThread,io.vertx.core.impl.ContextImpl)> ==> <io.vertx.core.impl.VertxThread: void setContext(io.vertx.core.impl.ContextImpl)>
SPECIAL edge: specialinvoke r1.<io.vertx.core.impl.ContextImpl: void setTCCL()>() in <io.vertx.core.impl.ContextImpl: void setContext(io.vertx.core.impl.VertxThread,io.vertx.core.impl.ContextImpl)> ==> <io.vertx.core.impl.ContextImpl: void setTCCL()>
VIRTUAL edge: virtualinvoke $r2.<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>(null) in <io.vertx.core.impl.ContextImpl: void setContext(io.vertx.core.impl.VertxThread,io.vertx.core.impl.ContextImpl)> ==> <java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>
STATIC edge: $r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() in <io.vertx.core.impl.ContextImpl: void setTCCL()> ==> <java.lang.Thread: java.lang.Thread currentThread()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.Starter$1$lambda_run_0__64: void <init>(java.util.concurrent.CountDownLatch)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int lastIndexOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int lastIndexOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
INTERFACE edge: interfaceinvoke r0.<java.io.Closeable: void close()>() in <io.vertx.core.file.impl.FileResolver: void closeQuietly(java.io.Closeable)> ==> <java.io.PrintStream: void close()>
INTERFACE edge: interfaceinvoke r0.<java.io.Closeable: void close()>() in <io.vertx.core.file.impl.FileResolver: void closeQuietly(java.io.Closeable)> ==> <java.io.PrintWriter: void close()>
INTERFACE edge: interfaceinvoke r0.<java.io.Closeable: void close()>() in <io.vertx.core.file.impl.FileResolver: void closeQuietly(java.io.Closeable)> ==> <java.io.RandomAccessFile: void close()>
INTERFACE edge: interfaceinvoke r0.<java.io.Closeable: void close()>() in <io.vertx.core.file.impl.FileResolver: void closeQuietly(java.io.Closeable)> ==> <java.io.ByteArrayOutputStream: void close()>
INTERFACE edge: interfaceinvoke r0.<java.io.Closeable: void close()>() in <io.vertx.core.file.impl.FileResolver: void closeQuietly(java.io.Closeable)> ==> <java.io.StringWriter: void close()>
INTERFACE edge: interfaceinvoke r0.<java.io.Closeable: void close()>() in <io.vertx.core.file.impl.FileResolver: void closeQuietly(java.io.Closeable)> ==> <java.io.FilterOutputStream: void close()>
INTERFACE edge: interfaceinvoke r0.<java.io.Closeable: void close()>() in <io.vertx.core.file.impl.FileResolver: void closeQuietly(java.io.Closeable)> ==> <java.io.FileInputStream: void close()>
INTERFACE edge: interfaceinvoke r0.<java.io.Closeable: void close()>() in <io.vertx.core.file.impl.FileResolver: void closeQuietly(java.io.Closeable)> ==> <java.io.InputStreamReader: void close()>
INTERFACE edge: interfaceinvoke r0.<java.io.Closeable: void close()>() in <io.vertx.core.file.impl.FileResolver: void closeQuietly(java.io.Closeable)> ==> <java.io.ByteArrayInputStream: void close()>
INTERFACE edge: interfaceinvoke r0.<java.io.Closeable: void close()>() in <io.vertx.core.file.impl.FileResolver: void closeQuietly(java.io.Closeable)> ==> <java.io.StringReader: void close()>
INTERFACE edge: interfaceinvoke r0.<java.io.Closeable: void close()>() in <io.vertx.core.file.impl.FileResolver: void closeQuietly(java.io.Closeable)> ==> <java.io.OutputStreamWriter: void close()>
INTERFACE edge: interfaceinvoke r0.<java.io.Closeable: void close()>() in <io.vertx.core.file.impl.FileResolver: void closeQuietly(java.io.Closeable)> ==> <java.io.BufferedReader: void close()>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.net.URL: java.lang.String toExternalForm()>() in <io.vertx.core.file.impl.FileResolver: boolean isBundleUrlDirectory(java.net.URL)> ==> <java.net.URL: java.lang.String toExternalForm()>
VIRTUAL edge: $r5 = virtualinvoke r0.<java.net.URL: java.lang.String getPath()>() in <io.vertx.core.file.impl.FileResolver: boolean isBundleUrlDirectory(java.net.URL)> ==> <java.net.URL: java.lang.String getPath()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.String: boolean endsWith(java.lang.String)>("/") in <io.vertx.core.file.impl.FileResolver: boolean isBundleUrlDirectory(java.net.URL)> ==> <java.lang.String: boolean endsWith(java.lang.String)>
SPECIAL edge: $r3 = specialinvoke r2.<io.vertx.core.file.impl.FileResolver: java.lang.ClassLoader getClassLoader()>() in <io.vertx.core.file.impl.FileResolver: boolean isBundleUrlDirectory(java.net.URL)> ==> <io.vertx.core.file.impl.FileResolver: java.lang.ClassLoader getClassLoader()>
SPECIAL edge: specialinvoke $r4.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.file.impl.FileResolver: boolean isBundleUrlDirectory(java.net.URL)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) in <io.vertx.core.file.impl.FileResolver: boolean isBundleUrlDirectory(java.net.URL)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String substring(int)>(1) in <io.vertx.core.file.impl.FileResolver: boolean isBundleUrlDirectory(java.net.URL)> ==> <java.lang.String: java.lang.String substring(int)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/") in <io.vertx.core.file.impl.FileResolver: boolean isBundleUrlDirectory(java.net.URL)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.file.impl.FileResolver: boolean isBundleUrlDirectory(java.net.URL)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r10 = virtualinvoke $r3.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>($r9) in <io.vertx.core.file.impl.FileResolver: boolean isBundleUrlDirectory(java.net.URL)> ==> <java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r3.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>($r9) in <io.vertx.core.file.impl.FileResolver: boolean isBundleUrlDirectory(java.net.URL)> ==> <io.vertx.core.impl.IsolatingClassLoader: java.net.URL getResource(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: byte[] getBytes(java.nio.charset.Charset)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],int,int,java.nio.charset.Charset)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],int,int,java.nio.charset.Charset)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>(0, 1) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: boolean cancel()> ==> <java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.spi.metrics.VertxMetrics: void timerEnded(long,boolean)>($l0, 1) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: boolean cancel()> ==> <io.vertx.core.spi.metrics.VertxMetrics: void timerEnded(long,boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.eventbus.impl.HandlerHolder: io.vertx.core.eventbus.impl.HandlerRegistration getHandler()>() in <io.vertx.core.eventbus.impl.EventBusImpl: boolean removeLocalRegistration(io.vertx.core.eventbus.impl.HandlerHolder)> ==> <io.vertx.core.eventbus.impl.HandlerHolder: io.vertx.core.eventbus.impl.HandlerRegistration getHandler()>
VIRTUAL edge: $z1 = virtualinvoke r0.<io.vertx.core.eventbus.impl.HandlerHolder: boolean setRemoved()>() in <io.vertx.core.eventbus.impl.EventBusImpl: boolean removeLocalRegistration(io.vertx.core.eventbus.impl.HandlerHolder)> ==> <io.vertx.core.eventbus.impl.HandlerHolder: boolean setRemoved()>
VIRTUAL edge: $r7 = virtualinvoke r0.<io.vertx.core.eventbus.impl.HandlerHolder: io.vertx.core.Context getContext()>() in <io.vertx.core.eventbus.impl.EventBusImpl: boolean removeLocalRegistration(io.vertx.core.eventbus.impl.HandlerHolder)> ==> <io.vertx.core.eventbus.impl.HandlerHolder: io.vertx.core.Context getContext()>
VIRTUAL edge: $r9 = virtualinvoke r0.<io.vertx.core.eventbus.impl.HandlerHolder: io.vertx.core.eventbus.impl.HandlerRegistration getHandler()>() in <io.vertx.core.eventbus.impl.EventBusImpl: boolean removeLocalRegistration(io.vertx.core.eventbus.impl.HandlerHolder)> ==> <io.vertx.core.eventbus.impl.HandlerHolder: io.vertx.core.eventbus.impl.HandlerRegistration getHandler()>
VIRTUAL edge: r2 = virtualinvoke $r1.<io.vertx.core.eventbus.impl.HandlerRegistration: java.lang.String address()>() in <io.vertx.core.eventbus.impl.EventBusImpl: boolean removeLocalRegistration(io.vertx.core.eventbus.impl.HandlerHolder)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: java.lang.String address()>
SPECIAL edge: specialinvoke $r8.<io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry: void <init>(io.vertx.core.eventbus.impl.EventBusImpl,java.lang.String,io.vertx.core.eventbus.impl.HandlerRegistration)>(r3, r2, $r9) in <io.vertx.core.eventbus.impl.EventBusImpl: boolean removeLocalRegistration(io.vertx.core.eventbus.impl.HandlerHolder)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry: void <init>(io.vertx.core.eventbus.impl.EventBusImpl,java.lang.String,io.vertx.core.eventbus.impl.HandlerRegistration)>
INTERFACE edge: interfaceinvoke $r7.<io.vertx.core.Context: void removeCloseHook(io.vertx.core.Closeable)>($r8) in <io.vertx.core.eventbus.impl.EventBusImpl: boolean removeLocalRegistration(io.vertx.core.eventbus.impl.HandlerHolder)> ==> <io.vertx.core.impl.ContextImpl: void removeCloseHook(io.vertx.core.Closeable)>
INTERFACE edge: interfaceinvoke $r7.<io.vertx.core.Context: void removeCloseHook(io.vertx.core.Closeable)>($r8) in <io.vertx.core.eventbus.impl.EventBusImpl: boolean removeLocalRegistration(io.vertx.core.eventbus.impl.HandlerHolder)> ==> <io.vertx.core.impl.EventLoopContext: void removeCloseHook(io.vertx.core.Closeable)>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.eventbus.impl.EventBusImpl: void callCompletionHandlerAsync(io.vertx.core.Handler)>(r1) in <io.vertx.core.eventbus.impl.EventBusImpl: void removeRegistration(io.vertx.core.eventbus.impl.HandlerHolder,java.lang.String,io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.EventBusImpl: void callCompletionHandlerAsync(io.vertx.core.Handler)>
STATIC edge: $r3 = staticinvoke <io.vertx.core.eventbus.impl.EventBusImpl$lambda_callCompletionHandlerAsync_4__97: io.vertx.core.Handler bootstrap$(io.vertx.core.Handler)>(r0) in <io.vertx.core.eventbus.impl.EventBusImpl: void callCompletionHandlerAsync(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_callCompletionHandlerAsync_4__97: io.vertx.core.Handler bootstrap$(io.vertx.core.Handler)>
VIRTUAL edge: $z0 = virtualinvoke r0.<io.vertx.core.eventbus.impl.HandlerHolder: boolean isLocalOnly()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void removeRegistration(io.vertx.core.eventbus.impl.HandlerHolder,java.lang.String,io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.HandlerHolder: boolean isLocalOnly()>
INTERFACE edge: interfaceinvoke $r5.<java.util.Set: boolean remove(java.lang.Object)>(r4) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void removeRegistration(io.vertx.core.eventbus.impl.HandlerHolder,java.lang.String,io.vertx.core.Handler)> ==> <java.util.HashSet: boolean remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<java.util.Set: boolean remove(java.lang.Object)>(r4) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void removeRegistration(io.vertx.core.eventbus.impl.HandlerHolder,java.lang.String,io.vertx.core.Handler)> ==> <java.util.AbstractCollection: boolean remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<java.util.Set: boolean remove(java.lang.Object)>(r4) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void removeRegistration(io.vertx.core.eventbus.impl.HandlerHolder,java.lang.String,io.vertx.core.Handler)> ==> <io.vertx.core.impl.ConcurrentHashSet: boolean remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<java.util.Set: boolean remove(java.lang.Object)>(r4) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void removeRegistration(io.vertx.core.eventbus.impl.HandlerHolder,java.lang.String,io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$1: boolean remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<java.util.Set: boolean remove(java.lang.Object)>(r4) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void removeRegistration(io.vertx.core.eventbus.impl.HandlerHolder,java.lang.String,io.vertx.core.Handler)> ==> <java.util.TreeSet: boolean remove(java.lang.Object)>
SPECIAL edge: specialinvoke r1.<io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void removeSub(java.lang.String,io.vertx.core.eventbus.impl.clustered.ClusterNodeInfo,io.vertx.core.Handler)>(r4, $r6, r2) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void removeRegistration(io.vertx.core.eventbus.impl.HandlerHolder,java.lang.String,io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void removeSub(java.lang.String,io.vertx.core.eventbus.impl.clustered.ClusterNodeInfo,io.vertx.core.Handler)>
VIRTUAL edge: virtualinvoke r1.<io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void callCompletionHandlerAsync(io.vertx.core.Handler)>(r2) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void removeRegistration(io.vertx.core.eventbus.impl.HandlerHolder,java.lang.String,io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.EventBusImpl: void callCompletionHandlerAsync(io.vertx.core.Handler)>
STATIC edge: $r5 = staticinvoke <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_removeSub_14__98: io.vertx.core.Handler bootstrap$(io.vertx.core.Handler)>(r3) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void removeSub(java.lang.String,io.vertx.core.eventbus.impl.clustered.ClusterNodeInfo,io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_removeSub_14__98: io.vertx.core.Handler bootstrap$(io.vertx.core.Handler)>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.eventbus.impl.EventBusImpl$lambda_removeLocalRegistration_2__78: void <init>(io.vertx.core.eventbus.impl.HandlerHolder)>($r0) in <io.vertx.core.eventbus.impl.EventBusImpl$lambda_removeLocalRegistration_2__78: java.util.function.BiFunction bootstrap$(io.vertx.core.eventbus.impl.HandlerHolder)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_removeLocalRegistration_2__78: void <init>(io.vertx.core.eventbus.impl.HandlerHolder)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.eventbus.impl.HandlerRegistration$lambda_callCompletionHandlerAsync_3__65: void <init>(io.vertx.core.Handler)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.impl.verticle.JavaSourceContext: void <init>(java.io.File)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: r19 = virtualinvoke r1.<java.io.File: java.io.File getParentFile()>() in <io.vertx.core.impl.verticle.JavaSourceContext: void <init>(java.io.File)> ==> <java.io.File: java.io.File getParentFile()>
VIRTUAL edge: r21 = virtualinvoke r1.<java.io.File: java.lang.String getName()>() in <io.vertx.core.impl.verticle.JavaSourceContext: void <init>(java.io.File)> ==> <java.io.File: java.lang.String getName()>
VIRTUAL edge: r20 = virtualinvoke r2.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\.") in <io.vertx.core.impl.verticle.JavaSourceContext: void <init>(java.io.File)> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke r19.<java.io.File: java.lang.String getName()>() in <io.vertx.core.impl.verticle.JavaSourceContext: void <init>(java.io.File)> ==> <java.io.File: java.lang.String getName()>
VIRTUAL edge: $r16 = virtualinvoke r19.<java.io.File: java.lang.String getName()>() in <io.vertx.core.impl.verticle.JavaSourceContext: void <init>(java.io.File)> ==> <java.io.File: java.lang.String getName()>
VIRTUAL edge: r19 = virtualinvoke r19.<java.io.File: java.io.File getParentFile()>() in <io.vertx.core.impl.verticle.JavaSourceContext: void <init>(java.io.File)> ==> <java.io.File: java.io.File getParentFile()>
VIRTUAL edge: $z0 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>($r10) in <io.vertx.core.impl.verticle.JavaSourceContext: void <init>(java.io.File)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r12.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.impl.verticle.JavaSourceContext: void <init>(java.io.File)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package structure does not match directory structure: ") in <io.vertx.core.impl.verticle.JavaSourceContext: void <init>(java.io.File)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9) in <io.vertx.core.impl.verticle.JavaSourceContext: void <init>(java.io.File)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" != ") in <io.vertx.core.impl.verticle.JavaSourceContext: void <init>(java.io.File)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16) in <io.vertx.core.impl.verticle.JavaSourceContext: void <init>(java.io.File)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.impl.verticle.JavaSourceContext: void <init>(java.io.File)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.String)>($r18) in <io.vertx.core.impl.verticle.JavaSourceContext: void <init>(java.io.File)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r21.<java.lang.String: int length()>() in <io.vertx.core.impl.verticle.JavaSourceContext: void <init>(java.io.File)> ==> <java.lang.String: int length()>
VIRTUAL edge: r22 = virtualinvoke r21.<java.lang.String: java.lang.String substring(int,int)>(0, $i2) in <io.vertx.core.impl.verticle.JavaSourceContext: void <init>(java.io.File)> ==> <java.lang.String: java.lang.String substring(int,int)>
VIRTUAL edge: $i1 = virtualinvoke $r4.<java.lang.String: int length()>() in <io.vertx.core.impl.verticle.JavaSourceContext: void <init>(java.io.File)> ==> <java.lang.String: int length()>
SPECIAL edge: specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.impl.verticle.JavaSourceContext: void <init>(java.io.File)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) in <io.vertx.core.impl.verticle.JavaSourceContext: void <init>(java.io.File)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46) in <io.vertx.core.impl.verticle.JavaSourceContext: void <init>(java.io.File)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r22) in <io.vertx.core.impl.verticle.JavaSourceContext: void <init>(java.io.File)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r22 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.impl.verticle.JavaSourceContext: void <init>(java.io.File)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<javax.tools.ForwardingJavaFileManager: void <init>(javax.tools.JavaFileManager)>(r1) in <io.vertx.core.impl.verticle.MemoryFileManager: void <init>(java.lang.ClassLoader,javax.tools.JavaFileManager)> ==> <javax.tools.ForwardingJavaFileManager: void <init>(javax.tools.JavaFileManager)>
SPECIAL edge: specialinvoke $r2.<java.util.HashMap: void <init>()>() in <io.vertx.core.impl.verticle.MemoryFileManager: void <init>(java.lang.ClassLoader,javax.tools.JavaFileManager)> ==> <java.util.HashMap: void <init>()>
SPECIAL edge: specialinvoke $r3.<io.vertx.core.impl.verticle.PackageHelper: void <init>(java.lang.ClassLoader)>(r4) in <io.vertx.core.impl.verticle.MemoryFileManager: void <init>(java.lang.ClassLoader,javax.tools.JavaFileManager)> ==> <io.vertx.core.impl.verticle.PackageHelper: void <init>(java.lang.ClassLoader)>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.io.File: java.nio.file.Path toPath()>() in <io.vertx.core.impl.verticle.JavaSourceContext: java.lang.String parsePackage(java.io.File)> ==> <java.io.File: java.nio.file.Path toPath()>
SPECIAL edge: specialinvoke $r0.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>($r3, $r4) in <io.vertx.core.impl.verticle.JavaSourceContext: java.lang.String parsePackage(java.io.File)> ==> <java.lang.String: void <init>(byte[],java.nio.charset.Charset)>
VIRTUAL edge: r11 = virtualinvoke $r0.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("//.*|(\"(?:\\\\[^\"]|\\\\\"|.)*?\")|(?s)/\\*.*?\\*/", "$1 ") in <io.vertx.core.impl.verticle.JavaSourceContext: java.lang.String parsePackage(java.io.File)> ==> <java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r11.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\r?\\n") in <io.vertx.core.impl.verticle.JavaSourceContext: java.lang.String parsePackage(java.io.File)> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
VIRTUAL edge: r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>() in <io.vertx.core.impl.verticle.JavaSourceContext: java.lang.String parsePackage(java.io.File)> ==> <java.lang.String: java.lang.String trim()>
VIRTUAL edge: $z0 = virtualinvoke r13.<java.lang.String: boolean isEmpty()>() in <io.vertx.core.impl.verticle.JavaSourceContext: java.lang.String parsePackage(java.io.File)> ==> <java.lang.String: boolean isEmpty()>
VIRTUAL edge: i1 = virtualinvoke r13.<java.lang.String: int indexOf(java.lang.String)>("package ") in <io.vertx.core.impl.verticle.JavaSourceContext: java.lang.String parsePackage(java.io.File)> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $i2 = virtualinvoke r13.<java.lang.String: int indexOf(int,int)>(32, i1) in <io.vertx.core.impl.verticle.JavaSourceContext: java.lang.String parsePackage(java.io.File)> ==> <java.lang.String: int indexOf(int,int)>
VIRTUAL edge: $i3 = virtualinvoke r13.<java.lang.String: int indexOf(int,int)>(59, i1) in <io.vertx.core.impl.verticle.JavaSourceContext: java.lang.String parsePackage(java.io.File)> ==> <java.lang.String: int indexOf(int,int)>
VIRTUAL edge: $r6 = virtualinvoke r13.<java.lang.String: java.lang.String substring(int,int)>($i2, $i3) in <io.vertx.core.impl.verticle.JavaSourceContext: java.lang.String parsePackage(java.io.File)> ==> <java.lang.String: java.lang.String substring(int,int)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String trim()>() in <io.vertx.core.impl.verticle.JavaSourceContext: java.lang.String parsePackage(java.io.File)> ==> <java.lang.String: java.lang.String trim()>
SPECIAL edge: specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r8) in <io.vertx.core.impl.verticle.JavaSourceContext: java.lang.String parsePackage(java.io.File)> ==> <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.impl.WorkerPool: void <init>(java.util.concurrent.ExecutorService,io.vertx.core.spi.metrics.PoolMetrics)>(r2, r3) in <io.vertx.core.impl.VertxImpl$SharedWorkerPool: void <init>(io.vertx.core.impl.VertxImpl,java.lang.String,java.util.concurrent.ExecutorService,io.vertx.core.spi.metrics.PoolMetrics)> ==> <io.vertx.core.impl.WorkerPool: void <init>(java.util.concurrent.ExecutorService,io.vertx.core.spi.metrics.PoolMetrics)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.impl.WorkerExecutorImpl: void <init>(io.vertx.core.Context,io.vertx.core.impl.VertxImpl$SharedWorkerPool)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r2) in <io.vertx.core.impl.ConcurrentHashSet: boolean add(java.lang.Object)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r2) in <io.vertx.core.impl.ConcurrentHashSet: boolean add(java.lang.Object)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r2) in <io.vertx.core.impl.ConcurrentHashSet: boolean add(java.lang.Object)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r2) in <io.vertx.core.impl.ConcurrentHashSet: boolean add(java.lang.Object)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r2) in <io.vertx.core.impl.ConcurrentHashSet: boolean add(java.lang.Object)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r2) in <io.vertx.core.impl.ConcurrentHashSet: boolean add(java.lang.Object)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r2) in <io.vertx.core.impl.ConcurrentHashSet: boolean add(java.lang.Object)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r2) in <io.vertx.core.impl.ConcurrentHashSet: boolean add(java.lang.Object)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r2) in <io.vertx.core.impl.ConcurrentHashSet: boolean add(java.lang.Object)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r2) in <io.vertx.core.impl.ConcurrentHashSet: boolean add(java.lang.Object)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<io.vertx.core.net.impl.VertxEventLoopGroup$1: boolean add(io.netty.util.concurrent.EventExecutor)>($r2) in <io.vertx.core.net.impl.VertxEventLoopGroup$1: boolean add(java.lang.Object)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$1: boolean add(io.netty.util.concurrent.EventExecutor)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.file.impl.AsyncFileImpl: void <init>(io.vertx.core.impl.VertxInternal,java.lang.String,io.vertx.core.file.OpenOptions,io.vertx.core.impl.ContextInternal)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke r1.<io.vertx.core.file.OpenOptions: boolean isRead()>() in <io.vertx.core.file.impl.AsyncFileImpl: void <init>(io.vertx.core.impl.VertxInternal,java.lang.String,io.vertx.core.file.OpenOptions,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.file.OpenOptions: boolean isRead()>
VIRTUAL edge: $z20 = virtualinvoke r1.<io.vertx.core.file.OpenOptions: boolean isWrite()>() in <io.vertx.core.file.impl.AsyncFileImpl: void <init>(io.vertx.core.impl.VertxInternal,java.lang.String,io.vertx.core.file.OpenOptions,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.file.OpenOptions: boolean isWrite()>
VIRTUAL edge: $z1 = virtualinvoke r1.<io.vertx.core.file.OpenOptions: boolean isRead()>() in <io.vertx.core.file.impl.AsyncFileImpl: void <init>(io.vertx.core.impl.VertxInternal,java.lang.String,io.vertx.core.file.OpenOptions,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.file.OpenOptions: boolean isRead()>
VIRTUAL edge: $z2 = virtualinvoke r1.<io.vertx.core.file.OpenOptions: boolean isWrite()>() in <io.vertx.core.file.impl.AsyncFileImpl: void <init>(io.vertx.core.impl.VertxInternal,java.lang.String,io.vertx.core.file.OpenOptions,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.file.OpenOptions: boolean isWrite()>
VIRTUAL edge: $z3 = virtualinvoke r1.<io.vertx.core.file.OpenOptions: boolean isCreate()>() in <io.vertx.core.file.impl.AsyncFileImpl: void <init>(io.vertx.core.impl.VertxInternal,java.lang.String,io.vertx.core.file.OpenOptions,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.file.OpenOptions: boolean isCreate()>
VIRTUAL edge: $z4 = virtualinvoke r1.<io.vertx.core.file.OpenOptions: boolean isCreateNew()>() in <io.vertx.core.file.impl.AsyncFileImpl: void <init>(io.vertx.core.impl.VertxInternal,java.lang.String,io.vertx.core.file.OpenOptions,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.file.OpenOptions: boolean isCreateNew()>
VIRTUAL edge: $z5 = virtualinvoke r1.<io.vertx.core.file.OpenOptions: boolean isSync()>() in <io.vertx.core.file.impl.AsyncFileImpl: void <init>(io.vertx.core.impl.VertxInternal,java.lang.String,io.vertx.core.file.OpenOptions,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.file.OpenOptions: boolean isSync()>
VIRTUAL edge: $z6 = virtualinvoke r1.<io.vertx.core.file.OpenOptions: boolean isDsync()>() in <io.vertx.core.file.impl.AsyncFileImpl: void <init>(io.vertx.core.impl.VertxInternal,java.lang.String,io.vertx.core.file.OpenOptions,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.file.OpenOptions: boolean isDsync()>
VIRTUAL edge: $z7 = virtualinvoke r1.<io.vertx.core.file.OpenOptions: boolean isDeleteOnClose()>() in <io.vertx.core.file.impl.AsyncFileImpl: void <init>(io.vertx.core.impl.VertxInternal,java.lang.String,io.vertx.core.file.OpenOptions,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.file.OpenOptions: boolean isDeleteOnClose()>
VIRTUAL edge: $z8 = virtualinvoke r1.<io.vertx.core.file.OpenOptions: boolean isSparse()>() in <io.vertx.core.file.impl.AsyncFileImpl: void <init>(io.vertx.core.impl.VertxInternal,java.lang.String,io.vertx.core.file.OpenOptions,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.file.OpenOptions: boolean isSparse()>
VIRTUAL edge: $z9 = virtualinvoke r1.<io.vertx.core.file.OpenOptions: boolean isTruncateExisting()>() in <io.vertx.core.file.impl.AsyncFileImpl: void <init>(io.vertx.core.impl.VertxInternal,java.lang.String,io.vertx.core.file.OpenOptions,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.file.OpenOptions: boolean isTruncateExisting()>
VIRTUAL edge: $r8 = virtualinvoke r1.<io.vertx.core.file.OpenOptions: java.lang.String getPerms()>() in <io.vertx.core.file.impl.AsyncFileImpl: void <init>(io.vertx.core.impl.VertxInternal,java.lang.String,io.vertx.core.file.OpenOptions,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.file.OpenOptions: java.lang.String getPerms()>
VIRTUAL edge: $r18 = virtualinvoke r1.<io.vertx.core.file.OpenOptions: java.lang.String getPerms()>() in <io.vertx.core.file.impl.AsyncFileImpl: void <init>(io.vertx.core.impl.VertxInternal,java.lang.String,io.vertx.core.file.OpenOptions,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.file.OpenOptions: java.lang.String getPerms()>
VIRTUAL edge: $z10 = virtualinvoke r1.<io.vertx.core.file.OpenOptions: boolean isAppend()>() in <io.vertx.core.file.impl.AsyncFileImpl: void <init>(io.vertx.core.impl.VertxInternal,java.lang.String,io.vertx.core.file.OpenOptions,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.file.OpenOptions: boolean isAppend()>
SPECIAL edge: specialinvoke $r32.<io.vertx.core.file.FileSystemException: void <init>(java.lang.String)>("Cannot open file for neither reading nor writing") in <io.vertx.core.file.impl.AsyncFileImpl: void <init>(io.vertx.core.impl.VertxInternal,java.lang.String,io.vertx.core.file.OpenOptions,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.file.FileSystemException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r6.<java.util.HashSet: void <init>()>() in <io.vertx.core.file.impl.AsyncFileImpl: void <init>(io.vertx.core.impl.VertxInternal,java.lang.String,io.vertx.core.file.OpenOptions,io.vertx.core.impl.ContextInternal)> ==> <java.util.HashSet: void <init>()>
VIRTUAL edge: virtualinvoke $r6.<java.util.HashSet: boolean add(java.lang.Object)>($r31) in <io.vertx.core.file.impl.AsyncFileImpl: void <init>(io.vertx.core.impl.VertxInternal,java.lang.String,io.vertx.core.file.OpenOptions,io.vertx.core.impl.ContextInternal)> ==> <java.util.HashSet: boolean add(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r6.<java.util.HashSet: boolean add(java.lang.Object)>($r30) in <io.vertx.core.file.impl.AsyncFileImpl: void <init>(io.vertx.core.impl.VertxInternal,java.lang.String,io.vertx.core.file.OpenOptions,io.vertx.core.impl.ContextInternal)> ==> <java.util.HashSet: boolean add(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r6.<java.util.HashSet: boolean add(java.lang.Object)>($r29) in <io.vertx.core.file.impl.AsyncFileImpl: void <init>(io.vertx.core.impl.VertxInternal,java.lang.String,io.vertx.core.file.OpenOptions,io.vertx.core.impl.ContextInternal)> ==> <java.util.HashSet: boolean add(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r6.<java.util.HashSet: boolean add(java.lang.Object)>($r28) in <io.vertx.core.file.impl.AsyncFileImpl: void <init>(io.vertx.core.impl.VertxInternal,java.lang.String,io.vertx.core.file.OpenOptions,io.vertx.core.impl.ContextInternal)> ==> <java.util.HashSet: boolean add(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r6.<java.util.HashSet: boolean add(java.lang.Object)>($r27) in <io.vertx.core.file.impl.AsyncFileImpl: void <init>(io.vertx.core.impl.VertxInternal,java.lang.String,io.vertx.core.file.OpenOptions,io.vertx.core.impl.ContextInternal)> ==> <java.util.HashSet: boolean add(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r6.<java.util.HashSet: boolean add(java.lang.Object)>($r26) in <io.vertx.core.file.impl.AsyncFileImpl: void <init>(io.vertx.core.impl.VertxInternal,java.lang.String,io.vertx.core.file.OpenOptions,io.vertx.core.impl.ContextInternal)> ==> <java.util.HashSet: boolean add(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r6.<java.util.HashSet: boolean add(java.lang.Object)>($r25) in <io.vertx.core.file.impl.AsyncFileImpl: void <init>(io.vertx.core.impl.VertxInternal,java.lang.String,io.vertx.core.file.OpenOptions,io.vertx.core.impl.ContextInternal)> ==> <java.util.HashSet: boolean add(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r6.<java.util.HashSet: boolean add(java.lang.Object)>($r24) in <io.vertx.core.file.impl.AsyncFileImpl: void <init>(io.vertx.core.impl.VertxInternal,java.lang.String,io.vertx.core.file.OpenOptions,io.vertx.core.impl.ContextInternal)> ==> <java.util.HashSet: boolean add(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r6.<java.util.HashSet: boolean add(java.lang.Object)>($r23) in <io.vertx.core.file.impl.AsyncFileImpl: void <init>(io.vertx.core.impl.VertxInternal,java.lang.String,io.vertx.core.file.OpenOptions,io.vertx.core.impl.ContextInternal)> ==> <java.util.HashSet: boolean add(java.lang.Object)>
INTERFACE edge: $r20 = interfaceinvoke r2.<io.vertx.core.impl.VertxInternal: java.util.concurrent.ExecutorService getWorkerPool()>() in <io.vertx.core.file.impl.AsyncFileImpl: void <init>(io.vertx.core.impl.VertxInternal,java.lang.String,io.vertx.core.file.OpenOptions,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.impl.VertxImpl: java.util.concurrent.ExecutorService getWorkerPool()>
INTERFACE edge: $r9 = interfaceinvoke r2.<io.vertx.core.impl.VertxInternal: java.util.concurrent.ExecutorService getWorkerPool()>() in <io.vertx.core.file.impl.AsyncFileImpl: void <init>(io.vertx.core.impl.VertxInternal,java.lang.String,io.vertx.core.file.OpenOptions,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.impl.VertxImpl: java.util.concurrent.ExecutorService getWorkerPool()>
VIRTUAL edge: $l2 = virtualinvoke $r17.<java.nio.channels.AsynchronousFileChannel: long size()>() in <io.vertx.core.file.impl.AsyncFileImpl: void <init>(io.vertx.core.impl.VertxInternal,java.lang.String,io.vertx.core.file.OpenOptions,io.vertx.core.impl.ContextInternal)> ==> <java.nio.channels.AsynchronousFileChannel: long size()>
SPECIAL edge: specialinvoke $r34.<io.vertx.core.file.FileSystemException: void <init>(java.lang.Throwable)>($r33) in <io.vertx.core.file.impl.AsyncFileImpl: void <init>(io.vertx.core.impl.VertxInternal,java.lang.String,io.vertx.core.file.OpenOptions,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.file.FileSystemException: void <init>(java.lang.Throwable)>
SPECIAL edge: specialinvoke $r13.<io.vertx.core.streams.impl.InboundBuffer: void <init>(io.vertx.core.Context,long)>(r12, 0L) in <io.vertx.core.file.impl.AsyncFileImpl: void <init>(io.vertx.core.impl.VertxInternal,java.lang.String,io.vertx.core.file.OpenOptions,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.streams.impl.InboundBuffer: void <init>(io.vertx.core.Context,long)>
VIRTUAL edge: virtualinvoke $r14.<io.vertx.core.streams.impl.InboundBuffer: io.vertx.core.streams.impl.InboundBuffer drainHandler(io.vertx.core.Handler)>($r15) in <io.vertx.core.file.impl.AsyncFileImpl: void <init>(io.vertx.core.impl.VertxInternal,java.lang.String,io.vertx.core.file.OpenOptions,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.streams.impl.InboundBuffer: io.vertx.core.streams.impl.InboundBuffer drainHandler(io.vertx.core.Handler)>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.file.impl.AsyncFileImpl$lambda_new_0__96: void <init>(io.vertx.core.file.impl.AsyncFileImpl)>($r0) in <io.vertx.core.file.impl.AsyncFileImpl$lambda_new_0__96: io.vertx.core.Handler bootstrap$(io.vertx.core.file.impl.AsyncFileImpl)> ==> <io.vertx.core.file.impl.AsyncFileImpl$lambda_new_0__96: void <init>(io.vertx.core.file.impl.AsyncFileImpl)>
INTERFACE edge: $z0 = interfaceinvoke $r1.<io.vertx.core.spi.logging.LogDelegate: boolean isDebugEnabled()>() in <io.vertx.core.logging.Logger: boolean isDebugEnabled()> ==> <io.vertx.core.logging.Log4jLogDelegate: boolean isDebugEnabled()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<io.vertx.core.spi.logging.LogDelegate: boolean isDebugEnabled()>() in <io.vertx.core.logging.Logger: boolean isDebugEnabled()> ==> <io.vertx.core.logging.SLF4JLogDelegate: boolean isDebugEnabled()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<io.vertx.core.spi.logging.LogDelegate: boolean isDebugEnabled()>() in <io.vertx.core.logging.Logger: boolean isDebugEnabled()> ==> <io.vertx.core.logging.JULLogDelegate: boolean isDebugEnabled()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<io.vertx.core.spi.logging.LogDelegate: boolean isDebugEnabled()>() in <io.vertx.core.logging.Logger: boolean isDebugEnabled()> ==> <io.vertx.core.logging.Log4j2LogDelegate: boolean isDebugEnabled()>
CLINIT edge: $r1 = <java.util.logging.Level: java.util.logging.Level FINE> in <io.vertx.core.logging.JULLogDelegate: boolean isDebugEnabled()> ==> <java.util.logging.Level: void <clinit>()>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.spi.logging.LogDelegate: void debug(java.lang.Object)>(r1) in <io.vertx.core.logging.Logger: void debug(java.lang.Object)> ==> <io.vertx.core.logging.Log4jLogDelegate: void debug(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.spi.logging.LogDelegate: void debug(java.lang.Object)>(r1) in <io.vertx.core.logging.Logger: void debug(java.lang.Object)> ==> <io.vertx.core.logging.SLF4JLogDelegate: void debug(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.spi.logging.LogDelegate: void debug(java.lang.Object)>(r1) in <io.vertx.core.logging.Logger: void debug(java.lang.Object)> ==> <io.vertx.core.logging.JULLogDelegate: void debug(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.spi.logging.LogDelegate: void debug(java.lang.Object)>(r1) in <io.vertx.core.logging.Logger: void debug(java.lang.Object)> ==> <io.vertx.core.logging.Log4j2LogDelegate: void debug(java.lang.Object)>
CLINIT edge: $r2 = <java.util.logging.Level: java.util.logging.Level FINE> in <io.vertx.core.logging.JULLogDelegate: void debug(java.lang.Object)> ==> <java.util.logging.Level: void <clinit>()>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.net.impl.ConnectionBase: void writeToChannel(java.lang.Object,io.netty.channel.ChannelPromise)>(r1, $r3) in <io.vertx.core.net.impl.ConnectionBase: void writeToChannel(java.lang.Object)> ==> <io.vertx.core.net.impl.ConnectionBase: void writeToChannel(java.lang.Object,io.netty.channel.ChannelPromise)>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.net.impl.ConnectionBase: void writeToChannel(java.lang.Object,io.netty.channel.ChannelPromise)>(r1, $r3) in <io.vertx.core.net.impl.ConnectionBase: void writeToChannel(java.lang.Object)> ==> <io.vertx.core.http.impl.Http1xServerConnection: void writeToChannel(java.lang.Object,io.netty.channel.ChannelPromise)>
CLINIT edge: $z0 = <io.vertx.core.spi.metrics.Metrics: boolean METRICS_ENABLED> in <io.vertx.core.http.impl.Http1xServerConnection: void writeToChannel(java.lang.Object,io.netty.channel.ChannelPromise)> ==> <io.vertx.core.spi.metrics.Metrics: void <clinit>()>
CLINIT edge: $z0 = staticinvoke <java.lang.Boolean: boolean getBoolean(java.lang.String)>("vertx.disableMetrics") in <io.vertx.core.spi.metrics.Metrics: void <clinit>()> ==> <java.lang.Boolean: void <clinit>()>
STATIC edge: $z0 = staticinvoke <java.lang.Boolean: boolean getBoolean(java.lang.String)>("vertx.disableMetrics") in <io.vertx.core.spi.metrics.Metrics: void <clinit>()> ==> <java.lang.Boolean: boolean getBoolean(java.lang.String)>
CLINIT edge: <io.vertx.core.spi.metrics.Metrics: boolean METRICS_ENABLED> = $z1 in <io.vertx.core.spi.metrics.Metrics: void <clinit>()> ==> <io.vertx.core.spi.metrics.Metrics: void <clinit>()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<io.netty.channel.ChannelHandlerContext: io.netty.util.concurrent.EventExecutor executor()>() in <io.vertx.core.net.impl.PartialPooledByteBufAllocator$PooledChannelHandlerContext: io.netty.util.concurrent.EventExecutor executor()> ==> <io.vertx.core.net.impl.PartialPooledByteBufAllocator$PooledChannelHandlerContext: io.netty.util.concurrent.EventExecutor executor()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelPromise newPromise()>() in <io.vertx.core.net.impl.PartialPooledByteBufAllocator$PooledChannelHandlerContext: io.netty.channel.ChannelPromise newPromise()> ==> <io.vertx.core.net.impl.PartialPooledByteBufAllocator$PooledChannelHandlerContext: io.netty.channel.ChannelPromise newPromise()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.netty.handler.codec.http2.Http2ConnectionEncoder encoder()>() in <io.vertx.core.http.impl.VertxHttp2ConnectionHandler: void _writeData(io.netty.handler.codec.http2.Http2Stream,io.netty.buffer.ByteBuf,boolean,io.netty.channel.ChannelPromise)> ==> <io.netty.handler.codec.http2.Http2ConnectionHandler: io.netty.handler.codec.http2.Http2ConnectionEncoder encoder()>
VIRTUAL edge: $r7 = virtualinvoke r0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.netty.handler.codec.http2.Http2ConnectionEncoder encoder()>() in <io.vertx.core.http.impl.VertxHttp2ConnectionHandler: void _writeData(io.netty.handler.codec.http2.Http2Stream,io.netty.buffer.ByteBuf,boolean,io.netty.channel.ChannelPromise)> ==> <io.netty.handler.codec.http2.Http2ConnectionHandler: io.netty.handler.codec.http2.Http2ConnectionEncoder encoder()>
VIRTUAL edge: $r9 = virtualinvoke r0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.netty.handler.codec.http2.Http2ConnectionEncoder encoder()>() in <io.vertx.core.http.impl.VertxHttp2ConnectionHandler: void _writeData(io.netty.handler.codec.http2.Http2Stream,io.netty.buffer.ByteBuf,boolean,io.netty.channel.ChannelPromise)> ==> <io.netty.handler.codec.http2.Http2ConnectionHandler: io.netty.handler.codec.http2.Http2ConnectionEncoder encoder()>
INTERFACE edge: $i0 = interfaceinvoke r2.<io.netty.handler.codec.http2.Http2Stream: int id()>() in <io.vertx.core.http.impl.VertxHttp2ConnectionHandler: void _writeData(io.netty.handler.codec.http2.Http2Stream,io.netty.buffer.ByteBuf,boolean,io.netty.channel.ChannelPromise)> ==> <io.netty.handler.codec.http2.Http2Stream: int id()>
INTERFACE edge: r8 = interfaceinvoke $r7.<io.netty.handler.codec.http2.Http2ConnectionEncoder: io.netty.handler.codec.http2.Http2RemoteFlowController flowController()>() in <io.vertx.core.http.impl.VertxHttp2ConnectionHandler: void _writeData(io.netty.handler.codec.http2.Http2Stream,io.netty.buffer.ByteBuf,boolean,io.netty.channel.ChannelPromise)> ==> <io.netty.handler.codec.http2.Http2ConnectionEncoder: io.netty.handler.codec.http2.Http2RemoteFlowController flowController()>
INTERFACE edge: $z1 = interfaceinvoke r8.<io.netty.handler.codec.http2.Http2RemoteFlowController: boolean isWritable(io.netty.handler.codec.http2.Http2Stream)>(r2) in <io.vertx.core.http.impl.VertxHttp2ConnectionHandler: void _writeData(io.netty.handler.codec.http2.Http2Stream,io.netty.buffer.ByteBuf,boolean,io.netty.channel.ChannelPromise)> ==> <io.netty.handler.codec.http2.Http2RemoteFlowController: boolean isWritable(io.netty.handler.codec.http2.Http2Stream)>
INTERFACE edge: $r10 = interfaceinvoke $r9.<io.netty.handler.codec.http2.Http2ConnectionEncoder: io.netty.handler.codec.http2.Http2RemoteFlowController flowController()>() in <io.vertx.core.http.impl.VertxHttp2ConnectionHandler: void _writeData(io.netty.handler.codec.http2.Http2Stream,io.netty.buffer.ByteBuf,boolean,io.netty.channel.ChannelPromise)> ==> <io.netty.handler.codec.http2.Http2ConnectionEncoder: io.netty.handler.codec.http2.Http2RemoteFlowController flowController()>
INTERFACE edge: interfaceinvoke $r10.<io.netty.handler.codec.http2.Http2RemoteFlowController: void writePendingBytes()>() in <io.vertx.core.http.impl.VertxHttp2ConnectionHandler: void _writeData(io.netty.handler.codec.http2.Http2Stream,io.netty.buffer.ByteBuf,boolean,io.netty.channel.ChannelPromise)> ==> <io.netty.handler.codec.http2.Http2RemoteFlowController: void writePendingBytes()>
INTERFACE edge: $r16 = interfaceinvoke $r15.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>() in <io.vertx.core.http.impl.VertxHttp2ConnectionHandler: void _writeData(io.netty.handler.codec.http2.Http2Stream,io.netty.buffer.ByteBuf,boolean,io.netty.channel.ChannelPromise)> ==> <io.vertx.core.net.impl.PartialPooledByteBufAllocator$PooledChannelHandlerContext: io.netty.channel.Channel channel()>
INTERFACE edge: $r16 = interfaceinvoke $r15.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>() in <io.vertx.core.http.impl.VertxHttp2ConnectionHandler: void _writeData(io.netty.handler.codec.http2.Http2Stream,io.netty.buffer.ByteBuf,boolean,io.netty.channel.ChannelPromise)> ==> <io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>
INTERFACE edge: interfaceinvoke $r16.<io.netty.channel.Channel: io.netty.channel.Channel flush()>() in <io.vertx.core.http.impl.VertxHttp2ConnectionHandler: void _writeData(io.netty.handler.codec.http2.Http2Stream,io.netty.buffer.ByteBuf,boolean,io.netty.channel.ChannelPromise)> ==> <io.netty.channel.Channel: io.netty.channel.Channel flush()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.http.impl.VertxHttp2ConnectionHandler$lambda_writeData_5__74: void <init>(io.vertx.core.Handler)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.http.impl.VertxHttp2ConnectionHandler$lambda_writeData_6__73: void <init>(io.vertx.core.http.impl.VertxHttp2ConnectionHandler,io.netty.handler.codec.http2.Http2Stream,io.netty.buffer.ByteBuf,boolean,io.netty.channel.ChannelPromise)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.eventbus.impl.MessageImpl: void <init>(io.vertx.core.eventbus.impl.MessageImpl)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: r13 = interfaceinvoke $r12.<io.vertx.core.MultiMap: java.util.List entries()>() in <io.vertx.core.eventbus.impl.MessageImpl: void <init>(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.http.impl.HeadersAdaptor: java.util.List entries()>
INTERFACE edge: r13 = interfaceinvoke $r12.<io.vertx.core.MultiMap: java.util.List entries()>() in <io.vertx.core.eventbus.impl.MessageImpl: void <init>(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor: java.util.List entries()>
INTERFACE edge: r13 = interfaceinvoke $r12.<io.vertx.core.MultiMap: java.util.List entries()>() in <io.vertx.core.eventbus.impl.MessageImpl: void <init>(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders: java.util.List entries()>
INTERFACE edge: r13 = interfaceinvoke $r12.<io.vertx.core.MultiMap: java.util.List entries()>() in <io.vertx.core.eventbus.impl.MessageImpl: void <init>(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.http.CaseInsensitiveHeaders: java.util.List entries()>
SPECIAL edge: specialinvoke $r14.<io.vertx.core.http.CaseInsensitiveHeaders: void <init>()>() in <io.vertx.core.eventbus.impl.MessageImpl: void <init>(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.http.CaseInsensitiveHeaders: void <init>()>
INTERFACE edge: r15 = interfaceinvoke r13.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.eventbus.impl.MessageImpl: void <init>(io.vertx.core.eventbus.impl.MessageImpl)> ==> <java.util.AbstractList: java.util.Iterator iterator()>
INTERFACE edge: r15 = interfaceinvoke r13.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.eventbus.impl.MessageImpl: void <init>(io.vertx.core.eventbus.impl.MessageImpl)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r15 = interfaceinvoke r13.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.eventbus.impl.MessageImpl: void <init>(io.vertx.core.eventbus.impl.MessageImpl)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
INTERFACE edge: r15 = interfaceinvoke r13.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.eventbus.impl.MessageImpl: void <init>(io.vertx.core.eventbus.impl.MessageImpl)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z1 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.eventbus.impl.MessageImpl: void <init>(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.eventbus.impl.MessageImpl: void <init>(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.json.JsonArray$Iter: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.eventbus.impl.MessageImpl: void <init>(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.json.JsonObject$Iter: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.eventbus.impl.MessageImpl: void <init>(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.eventbus.impl.MessageImpl: void <init>(io.vertx.core.eventbus.impl.MessageImpl)> ==> <java.util.Scanner: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.eventbus.impl.MessageImpl: void <init>(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.eventbus.impl.MessageImpl: void <init>(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: boolean hasNext()>
INTERFACE edge: $r16 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.eventbus.impl.MessageImpl: void <init>(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object next()>
INTERFACE edge: $r16 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.eventbus.impl.MessageImpl: void <init>(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.json.JsonArray$Iter: java.lang.Object next()>
INTERFACE edge: $r16 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.eventbus.impl.MessageImpl: void <init>(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.json.JsonObject$Iter: java.lang.Object next()>
INTERFACE edge: $r16 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.eventbus.impl.MessageImpl: void <init>(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: java.lang.Object next()>
INTERFACE edge: $r16 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.eventbus.impl.MessageImpl: void <init>(io.vertx.core.eventbus.impl.MessageImpl)> ==> <java.util.Scanner: java.lang.Object next()>
INTERFACE edge: $r16 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.eventbus.impl.MessageImpl: void <init>(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: java.lang.Object next()>
INTERFACE edge: $r16 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.eventbus.impl.MessageImpl: void <init>(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: java.lang.Object next()>
INTERFACE edge: $r19 = interfaceinvoke r17.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.eventbus.impl.MessageImpl: void <init>(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getKey()>
INTERFACE edge: $r19 = interfaceinvoke r17.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.eventbus.impl.MessageImpl: void <init>(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getKey()>
INTERFACE edge: $r19 = interfaceinvoke r17.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.eventbus.impl.MessageImpl: void <init>(io.vertx.core.eventbus.impl.MessageImpl)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>
INTERFACE edge: $r19 = interfaceinvoke r17.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.eventbus.impl.MessageImpl: void <init>(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getKey()>
INTERFACE edge: $r19 = interfaceinvoke r17.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.eventbus.impl.MessageImpl: void <init>(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getKey()>
INTERFACE edge: $r19 = interfaceinvoke r17.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.eventbus.impl.MessageImpl: void <init>(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getKey()>
INTERFACE edge: $r21 = interfaceinvoke r17.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.eventbus.impl.MessageImpl: void <init>(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r21 = interfaceinvoke r17.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.eventbus.impl.MessageImpl: void <init>(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r21 = interfaceinvoke r17.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.eventbus.impl.MessageImpl: void <init>(io.vertx.core.eventbus.impl.MessageImpl)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r21 = interfaceinvoke r17.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.eventbus.impl.MessageImpl: void <init>(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r21 = interfaceinvoke r17.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.eventbus.impl.MessageImpl: void <init>(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r21 = interfaceinvoke r17.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.eventbus.impl.MessageImpl: void <init>(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: interfaceinvoke $r18.<io.vertx.core.MultiMap: io.vertx.core.MultiMap add(java.lang.String,java.lang.String)>($r20, $r22) in <io.vertx.core.eventbus.impl.MessageImpl: void <init>(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.http.impl.HeadersAdaptor: io.vertx.core.MultiMap add(java.lang.String,java.lang.String)>
INTERFACE edge: interfaceinvoke $r18.<io.vertx.core.MultiMap: io.vertx.core.MultiMap add(java.lang.String,java.lang.String)>($r20, $r22) in <io.vertx.core.eventbus.impl.MessageImpl: void <init>(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor: io.vertx.core.MultiMap add(java.lang.String,java.lang.String)>
INTERFACE edge: interfaceinvoke $r18.<io.vertx.core.MultiMap: io.vertx.core.MultiMap add(java.lang.String,java.lang.String)>($r20, $r22) in <io.vertx.core.eventbus.impl.MessageImpl: void <init>(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders: io.vertx.core.MultiMap add(java.lang.String,java.lang.String)>
INTERFACE edge: interfaceinvoke $r18.<io.vertx.core.MultiMap: io.vertx.core.MultiMap add(java.lang.String,java.lang.String)>($r20, $r22) in <io.vertx.core.eventbus.impl.MessageImpl: void <init>(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.http.CaseInsensitiveHeaders: io.vertx.core.MultiMap add(java.lang.String,java.lang.String)>
INTERFACE edge: $r11 = interfaceinvoke $r10.<io.vertx.core.eventbus.MessageCodec: java.lang.Object transform(java.lang.Object)>($r9) in <io.vertx.core.eventbus.impl.MessageImpl: void <init>(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.eventbus.impl.codecs.PingMessageCodec: java.lang.Object transform(java.lang.Object)>
INTERFACE edge: $r11 = interfaceinvoke $r10.<io.vertx.core.eventbus.MessageCodec: java.lang.Object transform(java.lang.Object)>($r9) in <io.vertx.core.eventbus.impl.MessageImpl: void <init>(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.eventbus.impl.codecs.IntMessageCodec: java.lang.Object transform(java.lang.Object)>
INTERFACE edge: $r11 = interfaceinvoke $r10.<io.vertx.core.eventbus.MessageCodec: java.lang.Object transform(java.lang.Object)>($r9) in <io.vertx.core.eventbus.impl.MessageImpl: void <init>(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.eventbus.impl.codecs.ShortMessageCodec: java.lang.Object transform(java.lang.Object)>
INTERFACE edge: $r11 = interfaceinvoke $r10.<io.vertx.core.eventbus.MessageCodec: java.lang.Object transform(java.lang.Object)>($r9) in <io.vertx.core.eventbus.impl.MessageImpl: void <init>(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.eventbus.impl.codecs.ByteArrayMessageCodec: java.lang.Object transform(java.lang.Object)>
INTERFACE edge: $r11 = interfaceinvoke $r10.<io.vertx.core.eventbus.MessageCodec: java.lang.Object transform(java.lang.Object)>($r9) in <io.vertx.core.eventbus.impl.MessageImpl: void <init>(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.eventbus.impl.codecs.NullMessageCodec: java.lang.Object transform(java.lang.Object)>
INTERFACE edge: $r11 = interfaceinvoke $r10.<io.vertx.core.eventbus.MessageCodec: java.lang.Object transform(java.lang.Object)>($r9) in <io.vertx.core.eventbus.impl.MessageImpl: void <init>(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.eventbus.impl.codecs.StringMessageCodec: java.lang.Object transform(java.lang.Object)>
INTERFACE edge: $r11 = interfaceinvoke $r10.<io.vertx.core.eventbus.MessageCodec: java.lang.Object transform(java.lang.Object)>($r9) in <io.vertx.core.eventbus.impl.MessageImpl: void <init>(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.eventbus.impl.codecs.JsonObjectMessageCodec: java.lang.Object transform(java.lang.Object)>
INTERFACE edge: $r11 = interfaceinvoke $r10.<io.vertx.core.eventbus.MessageCodec: java.lang.Object transform(java.lang.Object)>($r9) in <io.vertx.core.eventbus.impl.MessageImpl: void <init>(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.eventbus.impl.codecs.ReplyExceptionMessageCodec: java.lang.Object transform(java.lang.Object)>
INTERFACE edge: $r11 = interfaceinvoke $r10.<io.vertx.core.eventbus.MessageCodec: java.lang.Object transform(java.lang.Object)>($r9) in <io.vertx.core.eventbus.impl.MessageImpl: void <init>(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.eventbus.impl.codecs.JsonArrayMessageCodec: java.lang.Object transform(java.lang.Object)>
INTERFACE edge: $r11 = interfaceinvoke $r10.<io.vertx.core.eventbus.MessageCodec: java.lang.Object transform(java.lang.Object)>($r9) in <io.vertx.core.eventbus.impl.MessageImpl: void <init>(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.eventbus.impl.codecs.BufferMessageCodec: java.lang.Object transform(java.lang.Object)>
INTERFACE edge: $r11 = interfaceinvoke $r10.<io.vertx.core.eventbus.MessageCodec: java.lang.Object transform(java.lang.Object)>($r9) in <io.vertx.core.eventbus.impl.MessageImpl: void <init>(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.eventbus.impl.codecs.DoubleMessageCodec: java.lang.Object transform(java.lang.Object)>
INTERFACE edge: $r11 = interfaceinvoke $r10.<io.vertx.core.eventbus.MessageCodec: java.lang.Object transform(java.lang.Object)>($r9) in <io.vertx.core.eventbus.impl.MessageImpl: void <init>(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.eventbus.impl.codecs.FloatMessageCodec: java.lang.Object transform(java.lang.Object)>
INTERFACE edge: $r11 = interfaceinvoke $r10.<io.vertx.core.eventbus.MessageCodec: java.lang.Object transform(java.lang.Object)>($r9) in <io.vertx.core.eventbus.impl.MessageImpl: void <init>(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.eventbus.impl.codecs.BooleanMessageCodec: java.lang.Object transform(java.lang.Object)>
INTERFACE edge: $r11 = interfaceinvoke $r10.<io.vertx.core.eventbus.MessageCodec: java.lang.Object transform(java.lang.Object)>($r9) in <io.vertx.core.eventbus.impl.MessageImpl: void <init>(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.eventbus.impl.codecs.CharMessageCodec: java.lang.Object transform(java.lang.Object)>
INTERFACE edge: $r11 = interfaceinvoke $r10.<io.vertx.core.eventbus.MessageCodec: java.lang.Object transform(java.lang.Object)>($r9) in <io.vertx.core.eventbus.impl.MessageImpl: void <init>(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.eventbus.impl.codecs.ByteMessageCodec: java.lang.Object transform(java.lang.Object)>
INTERFACE edge: $r11 = interfaceinvoke $r10.<io.vertx.core.eventbus.MessageCodec: java.lang.Object transform(java.lang.Object)>($r9) in <io.vertx.core.eventbus.impl.MessageImpl: void <init>(io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.eventbus.impl.codecs.LongMessageCodec: java.lang.Object transform(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void <init>(io.vertx.core.eventbus.impl.clustered.ClusteredMessage)>(r1) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: io.vertx.core.eventbus.impl.clustered.ClusteredMessage copyBeforeReceive()> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void <init>(io.vertx.core.eventbus.impl.clustered.ClusteredMessage)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.eventbus.impl.EventBusImpl$InboundDeliveryContext: void <init>(io.vertx.core.eventbus.impl.EventBusImpl,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.impl.HandlerHolder)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.eventbus.impl.EventBusImpl$InboundDeliveryContext: void <init>(io.vertx.core.eventbus.impl.EventBusImpl,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.impl.HandlerHolder)> ==> <java.util.AbstractList: java.util.Iterator iterator()>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.eventbus.impl.EventBusImpl$InboundDeliveryContext: void <init>(io.vertx.core.eventbus.impl.EventBusImpl,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.impl.HandlerHolder)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.eventbus.impl.EventBusImpl$InboundDeliveryContext: void <init>(io.vertx.core.eventbus.impl.EventBusImpl,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.impl.HandlerHolder)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.eventbus.impl.EventBusImpl$InboundDeliveryContext: void <init>(io.vertx.core.eventbus.impl.EventBusImpl,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.impl.HandlerHolder)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
VIRTUAL edge: $z1 = virtualinvoke $r4.<io.vertx.core.streams.impl.InboundBuffer: boolean isEmpty()>() in <io.vertx.core.http.impl.HttpServerRequestImpl: boolean isEnded()> ==> <io.vertx.core.streams.impl.InboundBuffer: boolean isEmpty()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.buffer.impl.BufferImpl: void <init>(int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r18.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Close hooks already run") in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
INTERFACE edge: $z3 = interfaceinvoke $r15.<java.util.Set: boolean isEmpty()>() in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <java.util.HashSet: boolean isEmpty()>
INTERFACE edge: $z3 = interfaceinvoke $r15.<java.util.Set: boolean isEmpty()>() in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <java.util.AbstractCollection: boolean isEmpty()>
INTERFACE edge: $z3 = interfaceinvoke $r15.<java.util.Set: boolean isEmpty()>() in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.impl.ConcurrentHashSet: boolean isEmpty()>
INTERFACE edge: $z3 = interfaceinvoke $r15.<java.util.Set: boolean isEmpty()>() in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$1: boolean isEmpty()>
INTERFACE edge: $z3 = interfaceinvoke $r15.<java.util.Set: boolean isEmpty()>() in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <java.util.TreeSet: boolean isEmpty()>
SPECIAL edge: specialinvoke $r16.<java.util.HashSet: void <init>(java.util.Collection)>($r17) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <java.util.HashSet: void <init>(java.util.Collection)>
INTERFACE edge: $z1 = interfaceinvoke r23.<java.util.Set: boolean isEmpty()>() in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <java.util.HashSet: boolean isEmpty()>
INTERFACE edge: i0 = interfaceinvoke r23.<java.util.Set: int size()>() in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <java.util.HashSet: int size()>
INTERFACE edge: r9 = interfaceinvoke r23.<java.util.Set: java.util.Iterator iterator()>() in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <java.util.HashSet: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke $r6.<java.util.concurrent.atomic.AtomicInteger: void <init>()>() in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <java.util.concurrent.atomic.AtomicInteger: void <init>()>
SPECIAL edge: specialinvoke $r7.<java.util.concurrent.atomic.AtomicBoolean: void <init>()>() in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <java.util.concurrent.atomic.AtomicBoolean: void <init>()>
INTERFACE edge: $z2 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: boolean hasNext()>
INTERFACE edge: $z2 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.json.JsonArray$Iter: boolean hasNext()>
INTERFACE edge: $z2 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.json.JsonObject$Iter: boolean hasNext()>
INTERFACE edge: $z2 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: boolean hasNext()>
INTERFACE edge: $z2 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <java.util.Scanner: boolean hasNext()>
INTERFACE edge: $z2 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: boolean hasNext()>
INTERFACE edge: $z2 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: boolean hasNext()>
INTERFACE edge: $r10 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object next()>
INTERFACE edge: $r10 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.json.JsonArray$Iter: java.lang.Object next()>
INTERFACE edge: $r10 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.json.JsonObject$Iter: java.lang.Object next()>
INTERFACE edge: $r10 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: java.lang.Object next()>
INTERFACE edge: $r10 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <java.util.Scanner: java.lang.Object next()>
INTERFACE edge: $r10 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: java.lang.Object next()>
INTERFACE edge: $r10 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: java.lang.Object next()>
INTERFACE edge: interfaceinvoke r12.<io.vertx.core.Future: io.vertx.core.Future setHandler(io.vertx.core.Handler)>($r13) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.impl.CompositeFutureImpl: io.vertx.core.Future setHandler(io.vertx.core.Handler)>
INTERFACE edge: interfaceinvoke r12.<io.vertx.core.Future: io.vertx.core.Future setHandler(io.vertx.core.Handler)>($r13) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.impl.SucceededFuture: io.vertx.core.Future setHandler(io.vertx.core.Handler)>
INTERFACE edge: interfaceinvoke r12.<io.vertx.core.Future: io.vertx.core.Future setHandler(io.vertx.core.Handler)>($r13) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.impl.FutureImpl: io.vertx.core.Future setHandler(io.vertx.core.Handler)>
INTERFACE edge: interfaceinvoke r12.<io.vertx.core.Future: io.vertx.core.Future setHandler(io.vertx.core.Handler)>($r13) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.impl.FailedFuture: io.vertx.core.Future setHandler(io.vertx.core.Handler)>
INTERFACE edge: interfaceinvoke r12.<io.vertx.core.Future: boolean tryFail(java.lang.Throwable)>($r19) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.impl.CompositeFutureImpl: boolean tryFail(java.lang.Throwable)>
INTERFACE edge: interfaceinvoke r12.<io.vertx.core.Future: boolean tryFail(java.lang.Throwable)>($r19) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.impl.SucceededFuture: boolean tryFail(java.lang.Throwable)>
INTERFACE edge: interfaceinvoke r12.<io.vertx.core.Future: boolean tryFail(java.lang.Throwable)>($r19) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.impl.FutureImpl: boolean tryFail(java.lang.Throwable)>
INTERFACE edge: interfaceinvoke r12.<io.vertx.core.Future: boolean tryFail(java.lang.Throwable)>($r19) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.impl.FailedFuture: boolean tryFail(java.lang.Throwable)>
INTERFACE edge: interfaceinvoke r11.<io.vertx.core.Closeable: void close(io.vertx.core.Handler)>(r12) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.HttpServerImpl: void close(io.vertx.core.Handler)>
INTERFACE edge: interfaceinvoke r11.<io.vertx.core.Closeable: void close(io.vertx.core.Handler)>(r12) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.NetServerImpl: void close(io.vertx.core.Handler)>
INTERFACE edge: interfaceinvoke r11.<io.vertx.core.Closeable: void close(io.vertx.core.Handler)>(r12) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.impl.WorkerExecutorImpl: void close(io.vertx.core.Handler)>
INTERFACE edge: interfaceinvoke r11.<io.vertx.core.Closeable: void close(io.vertx.core.Handler)>(r12) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void close(io.vertx.core.Handler)>
INTERFACE edge: interfaceinvoke r11.<io.vertx.core.Closeable: void close(io.vertx.core.Handler)>(r12) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry: void close(io.vertx.core.Handler)>
VIRTUAL edge: virtualinvoke $r21.<io.vertx.core.logging.Logger: void warn(java.lang.Object,java.lang.Throwable)>("Failed to run close hooks", $r19) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.logging.Logger: void warn(java.lang.Object,java.lang.Throwable)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.impl.DeploymentManager$lambda_doDeployVerticle_2__17: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.impl.FutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.impl.SucceededFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl$lambda_joinCluster_1__10: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.Starter$lambda_runVerticle_1__1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.Starter$lambda_startVertx_0__2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_start_3__19: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.impl.HAManager$lambda_doDeployVerticle_4__7: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_close_0__29: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.Starter$lambda_createLoggingHandler_2__3: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.impl.CompositeFutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_finalize_6__18: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl$lambda_init_0__9: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.impl.FailedFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_close_5__30: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.impl.DeploymentManager$lambda_doDeployVerticle_2__17: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.impl.FutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.impl.SucceededFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl$lambda_joinCluster_1__10: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.Starter$lambda_runVerticle_1__1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.Starter$lambda_startVertx_0__2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_start_3__19: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.impl.HAManager$lambda_doDeployVerticle_4__7: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_close_0__29: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.Starter$lambda_createLoggingHandler_2__3: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.impl.CompositeFutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_finalize_6__18: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl$lambda_init_0__9: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.impl.FailedFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>($r4) in <io.vertx.core.impl.CloseHooks: void run(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_close_5__30: void handle(java.lang.Object)>
CLINIT edge: $r39 = <io.vertx.core.http.impl.HttpServerImpl: io.vertx.core.Handler DEFAULT_EXCEPTION_HANDLER> in <io.vertx.core.http.impl.HttpServerImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.HttpServerImpl: void <clinit>()>
STATIC edge: r33 = staticinvoke <io.vertx.core.http.impl.HttpServerImpl$lambda_close_16__99: io.vertx.core.Handler bootstrap$(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.Handler)>(r34, r35, r33) in <io.vertx.core.http.impl.HttpServerImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.HttpServerImpl$lambda_close_16__99: io.vertx.core.Handler bootstrap$(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.Handler)>
CLINIT edge: $r2 = staticinvoke <io.vertx.core.Future: io.vertx.core.Future succeededFuture()>() in <io.vertx.core.impl.WorkerExecutorImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.Future: void <clinit>()>
STATIC edge: $r2 = staticinvoke <io.vertx.core.Future: io.vertx.core.Future succeededFuture()>() in <io.vertx.core.impl.WorkerExecutorImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.Future: io.vertx.core.Future succeededFuture()>
CLINIT edge: $r2 = staticinvoke <io.vertx.core.impl.VertxImpl: java.util.concurrent.ConcurrentMap access$100(io.vertx.core.impl.VertxImpl)>($r1) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void close(io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl: void <clinit>()>
STATIC edge: $r6 = staticinvoke <io.vertx.core.Future: io.vertx.core.Future succeededFuture()>() in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void close(io.vertx.core.Handler)> ==> <io.vertx.core.Future: io.vertx.core.Future succeededFuture()>
STATIC edge: $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void close(io.vertx.core.Handler)> ==> <java.lang.Long: java.lang.Long valueOf(long)>
STATIC edge: $r2 = staticinvoke <io.vertx.core.impl.VertxImpl: java.util.concurrent.ConcurrentMap access$100(io.vertx.core.impl.VertxImpl)>($r1) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void close(io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl: java.util.concurrent.ConcurrentMap access$100(io.vertx.core.impl.VertxImpl)>
CLINIT edge: $r6 = staticinvoke <io.vertx.core.Future: io.vertx.core.Future succeededFuture()>() in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void close(io.vertx.core.Handler)> ==> <io.vertx.core.Future: void <clinit>()>
CLINIT edge: $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void close(io.vertx.core.Handler)> ==> <java.lang.Long: void <clinit>()>
CLINIT edge: $r0 = staticinvoke <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/http/impl/HttpServerImpl;") in <io.vertx.core.http.impl.HttpServerImpl: void <clinit>()> ==> <io.vertx.core.logging.LoggerFactory: void <clinit>()>
STATIC edge: $z1 = staticinvoke <java.lang.Boolean: boolean getBoolean(java.lang.String)>("vertx.disableWebsockets") in <io.vertx.core.http.impl.HttpServerImpl: void <clinit>()> ==> <java.lang.Boolean: boolean getBoolean(java.lang.String)>
STATIC edge: $z0 = staticinvoke <java.lang.Boolean: boolean getBoolean(java.lang.String)>("vertx.flashPolicyHandler") in <io.vertx.core.http.impl.HttpServerImpl: void <clinit>()> ==> <java.lang.Boolean: boolean getBoolean(java.lang.String)>
STATIC edge: $r1 = staticinvoke <io.vertx.core.http.impl.HttpServerImpl$lambda_static_0__100: io.vertx.core.Handler bootstrap$()>() in <io.vertx.core.http.impl.HttpServerImpl: void <clinit>()> ==> <io.vertx.core.http.impl.HttpServerImpl$lambda_static_0__100: io.vertx.core.Handler bootstrap$()>
STATIC edge: $r0 = staticinvoke <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/http/impl/HttpServerImpl;") in <io.vertx.core.http.impl.HttpServerImpl: void <clinit>()> ==> <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>
CLINIT edge: $z0 = staticinvoke <java.lang.Boolean: boolean getBoolean(java.lang.String)>("vertx.flashPolicyHandler") in <io.vertx.core.http.impl.HttpServerImpl: void <clinit>()> ==> <java.lang.Boolean: void <clinit>()>
CLINIT edge: <io.vertx.core.http.impl.HttpServerImpl: io.vertx.core.logging.Logger log> = $r0 in <io.vertx.core.http.impl.HttpServerImpl: void <clinit>()> ==> <io.vertx.core.http.impl.HttpServerImpl: void <clinit>()>
SPECIAL edge: specialinvoke $r3.<io.vertx.core.impl.CloseHooks$lambda_run_0__82: void <init>(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int)>($r0, $r1, $r2, $i0) in <io.vertx.core.impl.CloseHooks$lambda_run_0__82: io.vertx.core.Handler bootstrap$(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int)> ==> <io.vertx.core.impl.CloseHooks$lambda_run_0__82: void <init>(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.impl.VertxImpl$lambda_close_17__66: void <init>(io.vertx.core.impl.VertxImpl,io.vertx.core.Handler)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.file.impl.AsyncFileImpl: void checkClosed()>() in <io.vertx.core.file.impl.AsyncFileImpl: void check()> ==> <io.vertx.core.file.impl.AsyncFileImpl: void checkClosed()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.http.impl.VertxHttp2Stream: void doResume()>() in <io.vertx.core.http.impl.Http2ServerRequestImpl: void doResume()> ==> <io.vertx.core.http.impl.VertxHttp2Stream: void doResume()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()>() in <io.vertx.core.parsetools.impl.RecordParserImpl: io.vertx.core.parsetools.RecordParser fetch(long)> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()>
VIRTUAL edge: virtualinvoke $r1.<io.vertx.core.streams.impl.InboundBuffer: io.vertx.core.streams.impl.InboundBuffer resume()>() in <io.vertx.core.http.impl.VertxHttp2Stream: void doResume()> ==> <io.vertx.core.streams.impl.InboundBuffer: io.vertx.core.streams.impl.InboundBuffer resume()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()>() in <io.vertx.core.parsetools.impl.JsonParserImpl: io.vertx.core.parsetools.JsonParser fetch(long)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: void checkPending()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<io.vertx.core.http.impl.Http1xServerConnection: io.vertx.core.impl.ContextInternal getContext()>() in <io.vertx.core.http.impl.HttpServerRequestImpl: io.vertx.core.streams.impl.InboundBuffer pendingQueue()> ==> <io.vertx.core.net.impl.ConnectionBase: io.vertx.core.impl.ContextInternal getContext()>
SPECIAL edge: specialinvoke $r3.<io.vertx.core.streams.impl.InboundBuffer: void <init>(io.vertx.core.Context,long)>($r5, 8L) in <io.vertx.core.http.impl.HttpServerRequestImpl: io.vertx.core.streams.impl.InboundBuffer pendingQueue()> ==> <io.vertx.core.streams.impl.InboundBuffer: void <init>(io.vertx.core.Context,long)>
VIRTUAL edge: virtualinvoke $r6.<io.vertx.core.streams.impl.InboundBuffer: io.vertx.core.streams.impl.InboundBuffer drainHandler(io.vertx.core.Handler)>($r7) in <io.vertx.core.http.impl.HttpServerRequestImpl: io.vertx.core.streams.impl.InboundBuffer pendingQueue()> ==> <io.vertx.core.streams.impl.InboundBuffer: io.vertx.core.streams.impl.InboundBuffer drainHandler(io.vertx.core.Handler)>
VIRTUAL edge: virtualinvoke $r9.<io.vertx.core.streams.impl.InboundBuffer: io.vertx.core.streams.impl.InboundBuffer emptyHandler(io.vertx.core.Handler)>($r10) in <io.vertx.core.http.impl.HttpServerRequestImpl: io.vertx.core.streams.impl.InboundBuffer pendingQueue()> ==> <io.vertx.core.streams.impl.InboundBuffer: io.vertx.core.streams.impl.InboundBuffer emptyHandler(io.vertx.core.Handler)>
VIRTUAL edge: virtualinvoke $r12.<io.vertx.core.streams.impl.InboundBuffer: io.vertx.core.streams.impl.InboundBuffer handler(io.vertx.core.Handler)>($r13) in <io.vertx.core.http.impl.HttpServerRequestImpl: io.vertx.core.streams.impl.InboundBuffer pendingQueue()> ==> <io.vertx.core.streams.impl.InboundBuffer: io.vertx.core.streams.impl.InboundBuffer handler(io.vertx.core.Handler)>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.http.impl.HttpServerRequestImpl$handleData__81: void <init>(io.vertx.core.http.impl.HttpServerRequestImpl)>($r0) in <io.vertx.core.http.impl.HttpServerRequestImpl$handleData__81: io.vertx.core.Handler bootstrap$(io.vertx.core.http.impl.HttpServerRequestImpl)> ==> <io.vertx.core.http.impl.HttpServerRequestImpl$handleData__81: void <init>(io.vertx.core.http.impl.HttpServerRequestImpl)>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.http.impl.HttpServerRequestImpl$lambda_pendingQueue_1__80: void <init>(io.vertx.core.http.impl.HttpServerRequestImpl)>($r0) in <io.vertx.core.http.impl.HttpServerRequestImpl$lambda_pendingQueue_1__80: io.vertx.core.Handler bootstrap$(io.vertx.core.http.impl.HttpServerRequestImpl)> ==> <io.vertx.core.http.impl.HttpServerRequestImpl$lambda_pendingQueue_1__80: void <init>(io.vertx.core.http.impl.HttpServerRequestImpl)>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.http.impl.HttpServerRequestImpl$lambda_pendingQueue_0__79: void <init>(io.vertx.core.http.impl.HttpServerRequestImpl)>($r0) in <io.vertx.core.http.impl.HttpServerRequestImpl$lambda_pendingQueue_0__79: io.vertx.core.Handler bootstrap$(io.vertx.core.http.impl.HttpServerRequestImpl)> ==> <io.vertx.core.http.impl.HttpServerRequestImpl$lambda_pendingQueue_0__79: void <init>(io.vertx.core.http.impl.HttpServerRequestImpl)>
VIRTUAL edge: virtualinvoke $r1.<io.vertx.core.streams.impl.InboundBuffer: io.vertx.core.streams.impl.InboundBuffer resume()>() in <io.vertx.core.http.impl.Http1xClientConnection$StreamImpl: void doResume()> ==> <io.vertx.core.streams.impl.InboundBuffer: io.vertx.core.streams.impl.InboundBuffer resume()>
INTERFACE edge: interfaceinvoke $r1.<io.vertx.core.http.impl.HttpClientStream: void doResume()>() in <io.vertx.core.http.impl.Http2UpgradedClientConnection$UpgradingStream: void doResume()> ==> <io.vertx.core.http.impl.Http1xClientConnection$StreamImpl: void doResume()>
INTERFACE edge: interfaceinvoke $r1.<io.vertx.core.http.impl.HttpClientStream: void doResume()>() in <io.vertx.core.http.impl.Http2UpgradedClientConnection$UpgradingStream: void doResume()> ==> <io.vertx.core.http.impl.VertxHttp2Stream: void doResume()>
INTERFACE edge: interfaceinvoke $r1.<io.vertx.core.http.impl.HttpClientStream: void doResume()>() in <io.vertx.core.http.impl.Http2UpgradedClientConnection$UpgradingStream: void doResume()> ==> <io.vertx.core.http.impl.Http2UpgradedClientConnection$UpgradingStream: void doResume()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.http.impl.HttpClientRequestBase: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)>(r4) in <io.vertx.core.http.impl.HttpClientRequestBase: void checkHandleResponse()> ==> <io.vertx.core.http.impl.HttpClientRequestBase: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)>
SPECIAL edge: specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>() in <io.vertx.core.eventbus.impl.HandlerRegistration: io.vertx.core.eventbus.MessageConsumer fetch(long)> ==> <java.lang.IllegalArgumentException: void <init>()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.eventbus.impl.HandlerRegistration: void checkNextTick()>() in <io.vertx.core.eventbus.impl.HandlerRegistration: io.vertx.core.eventbus.MessageConsumer fetch(long)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void checkNextTick()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.http.impl.VertxHttp2Stream: void doPause()>() in <io.vertx.core.http.impl.Http2ServerRequestImpl: void doPause()> ==> <io.vertx.core.http.impl.VertxHttp2Stream: void doPause()>
VIRTUAL edge: virtualinvoke $r1.<io.vertx.core.streams.impl.InboundBuffer: io.vertx.core.streams.impl.InboundBuffer pause()>() in <io.vertx.core.http.impl.VertxHttp2Stream: void doPause()> ==> <io.vertx.core.streams.impl.InboundBuffer: io.vertx.core.streams.impl.InboundBuffer pause()>
VIRTUAL edge: virtualinvoke $r1.<io.vertx.core.streams.impl.InboundBuffer: io.vertx.core.streams.impl.InboundBuffer pause()>() in <io.vertx.core.http.impl.Http1xClientConnection$StreamImpl: void doPause()> ==> <io.vertx.core.streams.impl.InboundBuffer: io.vertx.core.streams.impl.InboundBuffer pause()>
INTERFACE edge: interfaceinvoke $r1.<io.vertx.core.http.impl.HttpClientStream: void doPause()>() in <io.vertx.core.http.impl.Http2UpgradedClientConnection$UpgradingStream: void doPause()> ==> <io.vertx.core.http.impl.Http1xClientConnection$StreamImpl: void doPause()>
INTERFACE edge: interfaceinvoke $r1.<io.vertx.core.http.impl.HttpClientStream: void doPause()>() in <io.vertx.core.http.impl.Http2UpgradedClientConnection$UpgradingStream: void doPause()> ==> <io.vertx.core.http.impl.VertxHttp2Stream: void doPause()>
INTERFACE edge: interfaceinvoke $r1.<io.vertx.core.http.impl.HttpClientStream: void doPause()>() in <io.vertx.core.http.impl.Http2UpgradedClientConnection$UpgradingStream: void doPause()> ==> <io.vertx.core.http.impl.Http2UpgradedClientConnection$UpgradingStream: void doPause()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.NetworkOptions: void <init>()>() in <io.vertx.core.net.NetworkOptions: void <init>(io.vertx.core.json.JsonObject)> ==> <io.vertx.core.net.NetworkOptions: void <init>()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.http.impl.HeadersAdaptor: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.impl.ConcurrentHashSet: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <java.util.ServiceLoader: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.json.JsonArray: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <java.util.AbstractList: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.json.JsonObject: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$1: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <java.util.concurrent.ConcurrentLinkedQueue: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.json.JsonArray$Iter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.json.JsonObject$Iter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <java.util.Scanner: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: boolean hasNext()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.json.JsonArray$Iter: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.json.JsonObject$Iter: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <java.util.Scanner: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: java.lang.Object next()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getKey()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getKey()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getKey()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getKey()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getKey()>
INTERFACE edge: $r27 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r27 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r27 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r27 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r27 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r27 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r28 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r28 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r28 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r28 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r28 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r28 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r23 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r23 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r23 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r23 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r23 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r23 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r24 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r24 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r24 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r24 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r24 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r24 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r19 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r19 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r19 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r19 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r19 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r19 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r20 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r20 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r20 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r20 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r20 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r20 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r15 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r15 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r15 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r15 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r15 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r15 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r16 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r16 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r16 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r16 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r16 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r16 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r11 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r11 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r11 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r11 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r11 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r11 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r12 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r12 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r12 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r12 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r12 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r12 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
VIRTUAL edge: $i0 = virtualinvoke r5.<java.lang.String: int hashCode()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <java.lang.String: int hashCode()>
VIRTUAL edge: $z11 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("logActivity") in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z14 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("receiveBufferSize") in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z15 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("reuseAddress") in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z12 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("reusePort") in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z13 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("sendBufferSize") in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("trafficClass") in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z10 = virtualinvoke $r29.<java.lang.Boolean: boolean booleanValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <java.lang.Boolean: boolean booleanValue()>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setLogActivity(boolean)>($z10) in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.NetworkOptions setLogActivity(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setLogActivity(boolean)>($z10) in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setLogActivity(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setLogActivity(boolean)>($z10) in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetworkOptions setLogActivity(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setLogActivity(boolean)>($z10) in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetworkOptions setLogActivity(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setLogActivity(boolean)>($z10) in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.datagram.DatagramSocketOptions: io.vertx.core.net.NetworkOptions setLogActivity(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setLogActivity(boolean)>($z10) in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.NetworkOptions setLogActivity(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setLogActivity(boolean)>($z10) in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.NetworkOptions setLogActivity(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setLogActivity(boolean)>($z10) in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetworkOptions setLogActivity(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setReceiveBufferSize(int)>($i3) in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.NetworkOptions setReceiveBufferSize(int)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setReceiveBufferSize(int)>($i3) in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setReceiveBufferSize(int)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setReceiveBufferSize(int)>($i3) in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetworkOptions setReceiveBufferSize(int)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setReceiveBufferSize(int)>($i3) in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetworkOptions setReceiveBufferSize(int)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setReceiveBufferSize(int)>($i3) in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.datagram.DatagramSocketOptions: io.vertx.core.net.NetworkOptions setReceiveBufferSize(int)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setReceiveBufferSize(int)>($i3) in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.NetworkOptions setReceiveBufferSize(int)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setReceiveBufferSize(int)>($i3) in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.NetworkOptions setReceiveBufferSize(int)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setReceiveBufferSize(int)>($i3) in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetworkOptions setReceiveBufferSize(int)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setReuseAddress(boolean)>($z7) in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.NetworkOptions setReuseAddress(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setReuseAddress(boolean)>($z7) in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setReuseAddress(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setReuseAddress(boolean)>($z7) in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetworkOptions setReuseAddress(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setReuseAddress(boolean)>($z7) in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetworkOptions setReuseAddress(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setReuseAddress(boolean)>($z7) in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.datagram.DatagramSocketOptions: io.vertx.core.net.NetworkOptions setReuseAddress(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setReuseAddress(boolean)>($z7) in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.NetworkOptions setReuseAddress(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setReuseAddress(boolean)>($z7) in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.NetworkOptions setReuseAddress(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setReuseAddress(boolean)>($z7) in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetworkOptions setReuseAddress(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setReusePort(boolean)>($z5) in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.NetworkOptions setReusePort(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setReusePort(boolean)>($z5) in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setReusePort(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setReusePort(boolean)>($z5) in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetworkOptions setReusePort(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setReusePort(boolean)>($z5) in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetworkOptions setReusePort(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setReusePort(boolean)>($z5) in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.datagram.DatagramSocketOptions: io.vertx.core.net.NetworkOptions setReusePort(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setReusePort(boolean)>($z5) in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.NetworkOptions setReusePort(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setReusePort(boolean)>($z5) in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.NetworkOptions setReusePort(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setReusePort(boolean)>($z5) in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetworkOptions setReusePort(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setSendBufferSize(int)>($i2) in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.NetworkOptions setSendBufferSize(int)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setSendBufferSize(int)>($i2) in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setSendBufferSize(int)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setSendBufferSize(int)>($i2) in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetworkOptions setSendBufferSize(int)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setSendBufferSize(int)>($i2) in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetworkOptions setSendBufferSize(int)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setSendBufferSize(int)>($i2) in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.datagram.DatagramSocketOptions: io.vertx.core.net.NetworkOptions setSendBufferSize(int)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setSendBufferSize(int)>($i2) in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.NetworkOptions setSendBufferSize(int)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setSendBufferSize(int)>($i2) in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.NetworkOptions setSendBufferSize(int)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setSendBufferSize(int)>($i2) in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetworkOptions setSendBufferSize(int)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setTrafficClass(int)>($i1) in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.NetworkOptions setTrafficClass(int)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setTrafficClass(int)>($i1) in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setTrafficClass(int)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setTrafficClass(int)>($i1) in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetworkOptions setTrafficClass(int)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setTrafficClass(int)>($i1) in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetworkOptions setTrafficClass(int)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setTrafficClass(int)>($i1) in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.datagram.DatagramSocketOptions: io.vertx.core.net.NetworkOptions setTrafficClass(int)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setTrafficClass(int)>($i1) in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.NetworkOptions setTrafficClass(int)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setTrafficClass(int)>($i1) in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.NetworkOptions setTrafficClass(int)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setTrafficClass(int)>($i1) in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetworkOptions setTrafficClass(int)>
VIRTUAL edge: $i3 = virtualinvoke $r25.<java.lang.Number: int intValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <java.util.concurrent.atomic.AtomicLong: int intValue()>
VIRTUAL edge: $i3 = virtualinvoke $r25.<java.lang.Number: int intValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <java.lang.Float: int intValue()>
VIRTUAL edge: $i3 = virtualinvoke $r25.<java.lang.Number: int intValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <java.math.BigDecimal: int intValue()>
VIRTUAL edge: $i3 = virtualinvoke $r25.<java.lang.Number: int intValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <java.lang.Double: int intValue()>
VIRTUAL edge: $i3 = virtualinvoke $r25.<java.lang.Number: int intValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <java.lang.Long: int intValue()>
VIRTUAL edge: $i3 = virtualinvoke $r25.<java.lang.Number: int intValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <java.util.concurrent.atomic.AtomicInteger: int intValue()>
VIRTUAL edge: $i3 = virtualinvoke $r25.<java.lang.Number: int intValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <java.lang.Short: int intValue()>
VIRTUAL edge: $i3 = virtualinvoke $r25.<java.lang.Number: int intValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <java.math.BigInteger: int intValue()>
VIRTUAL edge: $i3 = virtualinvoke $r25.<java.lang.Number: int intValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <java.lang.Byte: int intValue()>
VIRTUAL edge: $i3 = virtualinvoke $r25.<java.lang.Number: int intValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <java.lang.Integer: int intValue()>
VIRTUAL edge: $z7 = virtualinvoke $r21.<java.lang.Boolean: boolean booleanValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <java.lang.Boolean: boolean booleanValue()>
VIRTUAL edge: $z5 = virtualinvoke $r17.<java.lang.Boolean: boolean booleanValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <java.lang.Boolean: boolean booleanValue()>
VIRTUAL edge: $i2 = virtualinvoke $r13.<java.lang.Number: int intValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <java.util.concurrent.atomic.AtomicLong: int intValue()>
VIRTUAL edge: $i2 = virtualinvoke $r13.<java.lang.Number: int intValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <java.lang.Float: int intValue()>
VIRTUAL edge: $i2 = virtualinvoke $r13.<java.lang.Number: int intValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <java.math.BigDecimal: int intValue()>
VIRTUAL edge: $i2 = virtualinvoke $r13.<java.lang.Number: int intValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <java.lang.Double: int intValue()>
VIRTUAL edge: $i2 = virtualinvoke $r13.<java.lang.Number: int intValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <java.lang.Long: int intValue()>
VIRTUAL edge: $i2 = virtualinvoke $r13.<java.lang.Number: int intValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <java.util.concurrent.atomic.AtomicInteger: int intValue()>
VIRTUAL edge: $i2 = virtualinvoke $r13.<java.lang.Number: int intValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <java.lang.Short: int intValue()>
VIRTUAL edge: $i2 = virtualinvoke $r13.<java.lang.Number: int intValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <java.math.BigInteger: int intValue()>
VIRTUAL edge: $i2 = virtualinvoke $r13.<java.lang.Number: int intValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <java.lang.Byte: int intValue()>
VIRTUAL edge: $i2 = virtualinvoke $r13.<java.lang.Number: int intValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <java.lang.Integer: int intValue()>
VIRTUAL edge: $i1 = virtualinvoke $r9.<java.lang.Number: int intValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <java.util.concurrent.atomic.AtomicLong: int intValue()>
VIRTUAL edge: $i1 = virtualinvoke $r9.<java.lang.Number: int intValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <java.lang.Float: int intValue()>
VIRTUAL edge: $i1 = virtualinvoke $r9.<java.lang.Number: int intValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <java.math.BigDecimal: int intValue()>
VIRTUAL edge: $i1 = virtualinvoke $r9.<java.lang.Number: int intValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <java.lang.Double: int intValue()>
VIRTUAL edge: $i1 = virtualinvoke $r9.<java.lang.Number: int intValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <java.lang.Long: int intValue()>
VIRTUAL edge: $i1 = virtualinvoke $r9.<java.lang.Number: int intValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <java.util.concurrent.atomic.AtomicInteger: int intValue()>
VIRTUAL edge: $i1 = virtualinvoke $r9.<java.lang.Number: int intValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <java.lang.Short: int intValue()>
VIRTUAL edge: $i1 = virtualinvoke $r9.<java.lang.Number: int intValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <java.math.BigInteger: int intValue()>
VIRTUAL edge: $i1 = virtualinvoke $r9.<java.lang.Number: int intValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <java.lang.Byte: int intValue()>
VIRTUAL edge: $i1 = virtualinvoke $r9.<java.lang.Number: int intValue()>() in <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)> ==> <java.lang.Integer: int intValue()>
STATIC edge: staticinvoke <io.vertx.core.impl.Arguments: void require(boolean,java.lang.String)>($z0, "receiveBufferSize must be > 0") in <io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setReceiveBufferSize(int)> ==> <io.vertx.core.impl.Arguments: void require(boolean,java.lang.String)>
STATIC edge: staticinvoke <io.vertx.core.impl.Arguments: void require(boolean,java.lang.String)>($z0, "sendBufferSize must be > 0") in <io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setSendBufferSize(int)> ==> <io.vertx.core.impl.Arguments: void require(boolean,java.lang.String)>
STATIC edge: staticinvoke <io.vertx.core.impl.Arguments: void requireInRange(int,int,int,java.lang.String)>(i0, -1, 255, "trafficClass tc must be 0 <= tc <= 255") in <io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setTrafficClass(int)> ==> <io.vertx.core.impl.Arguments: void requireInRange(int,int,int,java.lang.String)>
INTERFACE edge: $r6 = interfaceinvoke $r5.<java.lang.CharSequence: java.lang.String toString()>() in <io.vertx.core.http.impl.headers.VertxHttpHeaders: void forEach(java.util.function.Consumer)> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: $r6 = interfaceinvoke $r5.<java.lang.CharSequence: java.lang.String toString()>() in <io.vertx.core.http.impl.headers.VertxHttpHeaders: void forEach(java.util.function.Consumer)> ==> <java.lang.String: java.lang.String toString()>
INTERFACE edge: $r6 = interfaceinvoke $r5.<java.lang.CharSequence: java.lang.String toString()>() in <io.vertx.core.http.impl.headers.VertxHttpHeaders: void forEach(java.util.function.Consumer)> ==> <java.lang.StringBuffer: java.lang.String toString()>
INTERFACE edge: $r8 = interfaceinvoke $r7.<java.lang.CharSequence: java.lang.String toString()>() in <io.vertx.core.http.impl.headers.VertxHttpHeaders: void forEach(java.util.function.Consumer)> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: $r8 = interfaceinvoke $r7.<java.lang.CharSequence: java.lang.String toString()>() in <io.vertx.core.http.impl.headers.VertxHttpHeaders: void forEach(java.util.function.Consumer)> ==> <java.lang.String: java.lang.String toString()>
INTERFACE edge: $r8 = interfaceinvoke $r7.<java.lang.CharSequence: java.lang.String toString()>() in <io.vertx.core.http.impl.headers.VertxHttpHeaders: void forEach(java.util.function.Consumer)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r4.<java.util.AbstractMap$SimpleEntry: void <init>(java.lang.Object,java.lang.Object)>($r6, $r8) in <io.vertx.core.http.impl.headers.VertxHttpHeaders: void forEach(java.util.function.Consumer)> ==> <java.util.AbstractMap$SimpleEntry: void <init>(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setEnabledSecureTransportProtocols(java.util.Set)>(r1) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setEnabledSecureTransportProtocols(java.util.Set)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetServerOptions setEnabledSecureTransportProtocols(java.util.Set)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setEnabledSecureTransportProtocols(java.util.Set)>(r1) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setEnabledSecureTransportProtocols(java.util.Set)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setEnabledSecureTransportProtocols(java.util.Set)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setEnabledSecureTransportProtocols(java.util.Set)>(r1) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.TCPSSLOptions setEnabledSecureTransportProtocols(java.util.Set)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setEnabledSecureTransportProtocols(java.util.Set)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setEnabledSecureTransportProtocols(java.util.Set)>(r1) in <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.TCPSSLOptions setEnabledSecureTransportProtocols(java.util.Set)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setEnabledSecureTransportProtocols(java.util.Set)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setEnabledSecureTransportProtocols(java.util.Set)>(r1) in <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.TCPSSLOptions setEnabledSecureTransportProtocols(java.util.Set)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setEnabledSecureTransportProtocols(java.util.Set)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setEnabledSecureTransportProtocols(java.util.Set)>(r1) in <io.vertx.core.net.NetClientOptions: io.vertx.core.net.TCPSSLOptions setEnabledSecureTransportProtocols(java.util.Set)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setEnabledSecureTransportProtocols(java.util.Set)>
SPECIAL edge: specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("idleTimeout must be >= 0") in <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setIdleTimeout(int)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setIdleTimeout(int)>(i0) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setIdleTimeout(int)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetServerOptions setIdleTimeout(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setIdleTimeout(int)>(i0) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setIdleTimeout(int)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setIdleTimeout(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setIdleTimeout(int)>(i0) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.TCPSSLOptions setIdleTimeout(int)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setIdleTimeout(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setIdleTimeout(int)>(i0) in <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.TCPSSLOptions setIdleTimeout(int)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setIdleTimeout(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setIdleTimeout(int)>(i0) in <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.TCPSSLOptions setIdleTimeout(int)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setIdleTimeout(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setIdleTimeout(int)>(i0) in <io.vertx.core.net.NetClientOptions: io.vertx.core.net.TCPSSLOptions setIdleTimeout(int)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setIdleTimeout(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setIdleTimeoutUnit(java.util.concurrent.TimeUnit)>(r1) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setIdleTimeoutUnit(java.util.concurrent.TimeUnit)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetServerOptions setIdleTimeoutUnit(java.util.concurrent.TimeUnit)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setIdleTimeoutUnit(java.util.concurrent.TimeUnit)>(r1) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setIdleTimeoutUnit(java.util.concurrent.TimeUnit)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setIdleTimeoutUnit(java.util.concurrent.TimeUnit)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setIdleTimeoutUnit(java.util.concurrent.TimeUnit)>(r1) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.TCPSSLOptions setIdleTimeoutUnit(java.util.concurrent.TimeUnit)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setIdleTimeoutUnit(java.util.concurrent.TimeUnit)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setIdleTimeoutUnit(java.util.concurrent.TimeUnit)>(r1) in <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.TCPSSLOptions setIdleTimeoutUnit(java.util.concurrent.TimeUnit)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setIdleTimeoutUnit(java.util.concurrent.TimeUnit)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setIdleTimeoutUnit(java.util.concurrent.TimeUnit)>(r1) in <io.vertx.core.net.NetClientOptions: io.vertx.core.net.TCPSSLOptions setIdleTimeoutUnit(java.util.concurrent.TimeUnit)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setIdleTimeoutUnit(java.util.concurrent.TimeUnit)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>(r1) in <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setJdkSslEngineOptions(io.vertx.core.net.JdkSSLEngineOptions)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>(r1) in <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setJdkSslEngineOptions(io.vertx.core.net.JdkSSLEngineOptions)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>(r1) in <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setJdkSslEngineOptions(io.vertx.core.net.JdkSSLEngineOptions)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.TCPSSLOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>(r1) in <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setJdkSslEngineOptions(io.vertx.core.net.JdkSSLEngineOptions)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.TCPSSLOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>(r1) in <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setJdkSslEngineOptions(io.vertx.core.net.JdkSSLEngineOptions)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.TCPSSLOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>(r1) in <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setJdkSslEngineOptions(io.vertx.core.net.JdkSSLEngineOptions)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.TCPSSLOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setJdkSslEngineOptions(io.vertx.core.net.JdkSSLEngineOptions)>(r1) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setJdkSslEngineOptions(io.vertx.core.net.JdkSSLEngineOptions)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetServerOptions setJdkSslEngineOptions(io.vertx.core.net.JdkSSLEngineOptions)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setJdkSslEngineOptions(io.vertx.core.net.JdkSSLEngineOptions)>(r1) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setJdkSslEngineOptions(io.vertx.core.net.JdkSSLEngineOptions)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setJdkSslEngineOptions(io.vertx.core.net.JdkSSLEngineOptions)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setJdkSslEngineOptions(io.vertx.core.net.JdkSSLEngineOptions)>(r1) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.TCPSSLOptions setJdkSslEngineOptions(io.vertx.core.net.JdkSSLEngineOptions)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setJdkSslEngineOptions(io.vertx.core.net.JdkSSLEngineOptions)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setJdkSslEngineOptions(io.vertx.core.net.JdkSSLEngineOptions)>(r1) in <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.TCPSSLOptions setJdkSslEngineOptions(io.vertx.core.net.JdkSSLEngineOptions)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setJdkSslEngineOptions(io.vertx.core.net.JdkSSLEngineOptions)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setJdkSslEngineOptions(io.vertx.core.net.JdkSSLEngineOptions)>(r1) in <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.TCPSSLOptions setJdkSslEngineOptions(io.vertx.core.net.JdkSSLEngineOptions)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setJdkSslEngineOptions(io.vertx.core.net.JdkSSLEngineOptions)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setJdkSslEngineOptions(io.vertx.core.net.JdkSSLEngineOptions)>(r1) in <io.vertx.core.net.NetClientOptions: io.vertx.core.net.TCPSSLOptions setJdkSslEngineOptions(io.vertx.core.net.JdkSSLEngineOptions)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setJdkSslEngineOptions(io.vertx.core.net.JdkSSLEngineOptions)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>(r1) in <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setOpenSslEngineOptions(io.vertx.core.net.OpenSSLEngineOptions)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>(r1) in <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setOpenSslEngineOptions(io.vertx.core.net.OpenSSLEngineOptions)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>(r1) in <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setOpenSslEngineOptions(io.vertx.core.net.OpenSSLEngineOptions)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.TCPSSLOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>(r1) in <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setOpenSslEngineOptions(io.vertx.core.net.OpenSSLEngineOptions)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.TCPSSLOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>(r1) in <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setOpenSslEngineOptions(io.vertx.core.net.OpenSSLEngineOptions)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.TCPSSLOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>(r1) in <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setOpenSslEngineOptions(io.vertx.core.net.OpenSSLEngineOptions)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.TCPSSLOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setOpenSslEngineOptions(io.vertx.core.net.OpenSSLEngineOptions)>(r1) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setOpenSslEngineOptions(io.vertx.core.net.OpenSSLEngineOptions)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetServerOptions setOpenSslEngineOptions(io.vertx.core.net.OpenSSLEngineOptions)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setOpenSslEngineOptions(io.vertx.core.net.OpenSSLEngineOptions)>(r1) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setOpenSslEngineOptions(io.vertx.core.net.OpenSSLEngineOptions)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setOpenSslEngineOptions(io.vertx.core.net.OpenSSLEngineOptions)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setOpenSslEngineOptions(io.vertx.core.net.OpenSSLEngineOptions)>(r1) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.TCPSSLOptions setOpenSslEngineOptions(io.vertx.core.net.OpenSSLEngineOptions)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setOpenSslEngineOptions(io.vertx.core.net.OpenSSLEngineOptions)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setOpenSslEngineOptions(io.vertx.core.net.OpenSSLEngineOptions)>(r1) in <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.TCPSSLOptions setOpenSslEngineOptions(io.vertx.core.net.OpenSSLEngineOptions)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setOpenSslEngineOptions(io.vertx.core.net.OpenSSLEngineOptions)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setOpenSslEngineOptions(io.vertx.core.net.OpenSSLEngineOptions)>(r1) in <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.TCPSSLOptions setOpenSslEngineOptions(io.vertx.core.net.OpenSSLEngineOptions)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setOpenSslEngineOptions(io.vertx.core.net.OpenSSLEngineOptions)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.net.NetClientOptions: io.vertx.core.net.ClientOptionsBase setOpenSslEngineOptions(io.vertx.core.net.OpenSSLEngineOptions)>(r1) in <io.vertx.core.net.NetClientOptions: io.vertx.core.net.TCPSSLOptions setOpenSslEngineOptions(io.vertx.core.net.OpenSSLEngineOptions)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.ClientOptionsBase setOpenSslEngineOptions(io.vertx.core.net.OpenSSLEngineOptions)>
SPECIAL edge: specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("soLinger must be >= 0") in <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSoLinger(int)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setSoLinger(int)>(i0) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setSoLinger(int)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetServerOptions setSoLinger(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setSoLinger(int)>(i0) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setSoLinger(int)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setSoLinger(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setSoLinger(int)>(i0) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.TCPSSLOptions setSoLinger(int)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setSoLinger(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setSoLinger(int)>(i0) in <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.TCPSSLOptions setSoLinger(int)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setSoLinger(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setSoLinger(int)>(i0) in <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.TCPSSLOptions setSoLinger(int)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setSoLinger(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setSoLinger(int)>(i0) in <io.vertx.core.net.NetClientOptions: io.vertx.core.net.TCPSSLOptions setSoLinger(int)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setSoLinger(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setSsl(boolean)>(z0) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setSsl(boolean)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetServerOptions setSsl(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setSsl(boolean)>(z0) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setSsl(boolean)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setSsl(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setSsl(boolean)>(z0) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.TCPSSLOptions setSsl(boolean)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setSsl(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setSsl(boolean)>(z0) in <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.TCPSSLOptions setSsl(boolean)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setSsl(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setSsl(boolean)>(z0) in <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.TCPSSLOptions setSsl(boolean)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setSsl(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setSsl(boolean)>(z0) in <io.vertx.core.net.NetClientOptions: io.vertx.core.net.TCPSSLOptions setSsl(boolean)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setSsl(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setTcpCork(boolean)>(z0) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setTcpCork(boolean)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetServerOptions setTcpCork(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setTcpCork(boolean)>(z0) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setTcpCork(boolean)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setTcpCork(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setTcpCork(boolean)>(z0) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.TCPSSLOptions setTcpCork(boolean)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setTcpCork(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setTcpCork(boolean)>(z0) in <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.TCPSSLOptions setTcpCork(boolean)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setTcpCork(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setTcpCork(boolean)>(z0) in <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.TCPSSLOptions setTcpCork(boolean)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setTcpCork(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setTcpCork(boolean)>(z0) in <io.vertx.core.net.NetClientOptions: io.vertx.core.net.TCPSSLOptions setTcpCork(boolean)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setTcpCork(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setTcpFastOpen(boolean)>(z0) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setTcpFastOpen(boolean)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetServerOptions setTcpFastOpen(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setTcpFastOpen(boolean)>(z0) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setTcpFastOpen(boolean)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setTcpFastOpen(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setTcpFastOpen(boolean)>(z0) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.TCPSSLOptions setTcpFastOpen(boolean)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setTcpFastOpen(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setTcpFastOpen(boolean)>(z0) in <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.TCPSSLOptions setTcpFastOpen(boolean)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setTcpFastOpen(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setTcpFastOpen(boolean)>(z0) in <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.TCPSSLOptions setTcpFastOpen(boolean)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setTcpFastOpen(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setTcpFastOpen(boolean)>(z0) in <io.vertx.core.net.NetClientOptions: io.vertx.core.net.TCPSSLOptions setTcpFastOpen(boolean)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setTcpFastOpen(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setTcpKeepAlive(boolean)>(z0) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setTcpKeepAlive(boolean)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetServerOptions setTcpKeepAlive(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setTcpKeepAlive(boolean)>(z0) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setTcpKeepAlive(boolean)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setTcpKeepAlive(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setTcpKeepAlive(boolean)>(z0) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.TCPSSLOptions setTcpKeepAlive(boolean)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setTcpKeepAlive(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setTcpKeepAlive(boolean)>(z0) in <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.TCPSSLOptions setTcpKeepAlive(boolean)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setTcpKeepAlive(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setTcpKeepAlive(boolean)>(z0) in <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.TCPSSLOptions setTcpKeepAlive(boolean)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setTcpKeepAlive(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setTcpKeepAlive(boolean)>(z0) in <io.vertx.core.net.NetClientOptions: io.vertx.core.net.TCPSSLOptions setTcpKeepAlive(boolean)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setTcpKeepAlive(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setTcpNoDelay(boolean)>(z0) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setTcpNoDelay(boolean)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetServerOptions setTcpNoDelay(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setTcpNoDelay(boolean)>(z0) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setTcpNoDelay(boolean)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setTcpNoDelay(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setTcpNoDelay(boolean)>(z0) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.TCPSSLOptions setTcpNoDelay(boolean)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setTcpNoDelay(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setTcpNoDelay(boolean)>(z0) in <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.TCPSSLOptions setTcpNoDelay(boolean)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setTcpNoDelay(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setTcpNoDelay(boolean)>(z0) in <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.TCPSSLOptions setTcpNoDelay(boolean)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setTcpNoDelay(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setTcpNoDelay(boolean)>(z0) in <io.vertx.core.net.NetClientOptions: io.vertx.core.net.TCPSSLOptions setTcpNoDelay(boolean)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setTcpNoDelay(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setTcpQuickAck(boolean)>(z0) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setTcpQuickAck(boolean)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetServerOptions setTcpQuickAck(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setTcpQuickAck(boolean)>(z0) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setTcpQuickAck(boolean)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setTcpQuickAck(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setTcpQuickAck(boolean)>(z0) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.TCPSSLOptions setTcpQuickAck(boolean)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setTcpQuickAck(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setTcpQuickAck(boolean)>(z0) in <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.TCPSSLOptions setTcpQuickAck(boolean)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setTcpQuickAck(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setTcpQuickAck(boolean)>(z0) in <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.TCPSSLOptions setTcpQuickAck(boolean)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setTcpQuickAck(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setTcpQuickAck(boolean)>(z0) in <io.vertx.core.net.NetClientOptions: io.vertx.core.net.TCPSSLOptions setTcpQuickAck(boolean)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setTcpQuickAck(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setUseAlpn(boolean)>(z0) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setUseAlpn(boolean)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetServerOptions setUseAlpn(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setUseAlpn(boolean)>(z0) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setUseAlpn(boolean)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setUseAlpn(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setUseAlpn(boolean)>(z0) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.TCPSSLOptions setUseAlpn(boolean)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setUseAlpn(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setUseAlpn(boolean)>(z0) in <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.TCPSSLOptions setUseAlpn(boolean)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setUseAlpn(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setUseAlpn(boolean)>(z0) in <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.TCPSSLOptions setUseAlpn(boolean)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setUseAlpn(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setUseAlpn(boolean)>(z0) in <io.vertx.core.net.NetClientOptions: io.vertx.core.net.TCPSSLOptions setUseAlpn(boolean)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setUseAlpn(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setUsePooledBuffers(boolean)>(z0) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setUsePooledBuffers(boolean)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetServerOptions setUsePooledBuffers(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setUsePooledBuffers(boolean)>(z0) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setUsePooledBuffers(boolean)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setUsePooledBuffers(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setUsePooledBuffers(boolean)>(z0) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.TCPSSLOptions setUsePooledBuffers(boolean)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setUsePooledBuffers(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setUsePooledBuffers(boolean)>(z0) in <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.TCPSSLOptions setUsePooledBuffers(boolean)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setUsePooledBuffers(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setUsePooledBuffers(boolean)>(z0) in <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.TCPSSLOptions setUsePooledBuffers(boolean)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setUsePooledBuffers(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setUsePooledBuffers(boolean)>(z0) in <io.vertx.core.net.NetClientOptions: io.vertx.core.net.TCPSSLOptions setUsePooledBuffers(boolean)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setUsePooledBuffers(boolean)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.SSLEngineOptions: void <init>()>() in <io.vertx.core.net.JdkSSLEngineOptions: void <init>(io.vertx.core.json.JsonObject)> ==> <io.vertx.core.net.SSLEngineOptions: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.JksOptions: void <init>(io.vertx.core.json.JsonObject)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.SSLEngineOptions: void <init>()>() in <io.vertx.core.net.OpenSSLEngineOptions: void <init>(io.vertx.core.json.JsonObject)> ==> <io.vertx.core.net.SSLEngineOptions: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.PemKeyCertOptions: void <init>(io.vertx.core.json.JsonObject)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.PemKeyCertOptions: void init()>() in <io.vertx.core.net.PemKeyCertOptions: void <init>(io.vertx.core.json.JsonObject)> ==> <io.vertx.core.net.PemKeyCertOptions: void init()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.PemTrustOptions: void <init>()>() in <io.vertx.core.net.PemTrustOptions: void <init>(io.vertx.core.json.JsonObject)> ==> <io.vertx.core.net.PemTrustOptions: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.PfxOptions: void <init>(io.vertx.core.json.JsonObject)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <io.vertx.core.http.impl.HeadersAdaptor: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <io.vertx.core.impl.ConcurrentHashSet: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <java.util.ServiceLoader: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <io.vertx.core.json.JsonArray: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <java.util.AbstractList: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <io.vertx.core.json.JsonObject: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$1: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <java.util.concurrent.ConcurrentLinkedQueue: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <io.vertx.core.json.JsonArray$Iter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <io.vertx.core.json.JsonObject$Iter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <java.util.Scanner: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: boolean hasNext()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <io.vertx.core.json.JsonArray$Iter: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <io.vertx.core.json.JsonObject$Iter: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <java.util.Scanner: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: java.lang.Object next()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getKey()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getKey()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getKey()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getKey()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getKey()>
INTERFACE edge: $r18 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r18 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r18 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r18 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r18 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r18 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r19 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r19 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r19 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r19 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r19 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r19 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r14 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r14 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r14 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r14 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r14 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r14 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r15 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r15 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r15 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r15 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r15 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r15 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r9 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r9 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r9 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r9 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r9 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r9 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
VIRTUAL edge: $i0 = virtualinvoke r5.<java.lang.String: int hashCode()>() in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <java.lang.String: int hashCode()>
VIRTUAL edge: $z1 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("password") in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z6 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("path") in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z5 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("value") in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.JksOptions: io.vertx.core.net.JksOptions setPassword(java.lang.String)>($r20) in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <io.vertx.core.net.JksOptions: io.vertx.core.net.JksOptions setPassword(java.lang.String)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.JksOptions: io.vertx.core.net.JksOptions setPath(java.lang.String)>($r16) in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <io.vertx.core.net.JksOptions: io.vertx.core.net.JksOptions setPath(java.lang.String)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.JksOptions: io.vertx.core.net.JksOptions setValue(io.vertx.core.buffer.Buffer)>($r12) in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <io.vertx.core.net.JksOptions: io.vertx.core.net.JksOptions setValue(io.vertx.core.buffer.Buffer)>
VIRTUAL edge: $r11 = virtualinvoke $r8.<java.util.Base64$Decoder: byte[] decode(java.lang.String)>($r10) in <io.vertx.core.net.JksOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.JksOptions)> ==> <java.util.Base64$Decoder: byte[] decode(java.lang.String)>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.OpenSSLEngineOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.OpenSSLEngineOptions)> ==> <io.vertx.core.http.impl.HeadersAdaptor: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.OpenSSLEngineOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.OpenSSLEngineOptions)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.OpenSSLEngineOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.OpenSSLEngineOptions)> ==> <io.vertx.core.impl.ConcurrentHashSet: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.OpenSSLEngineOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.OpenSSLEngineOptions)> ==> <java.util.ServiceLoader: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.OpenSSLEngineOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.OpenSSLEngineOptions)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.OpenSSLEngineOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.OpenSSLEngineOptions)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.OpenSSLEngineOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.OpenSSLEngineOptions)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.OpenSSLEngineOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.OpenSSLEngineOptions)> ==> <io.vertx.core.json.JsonArray: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.OpenSSLEngineOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.OpenSSLEngineOptions)> ==> <java.util.AbstractList: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.OpenSSLEngineOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.OpenSSLEngineOptions)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.OpenSSLEngineOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.OpenSSLEngineOptions)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.OpenSSLEngineOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.OpenSSLEngineOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.OpenSSLEngineOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.OpenSSLEngineOptions)> ==> <io.vertx.core.json.JsonObject: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.OpenSSLEngineOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.OpenSSLEngineOptions)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$1: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.OpenSSLEngineOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.OpenSSLEngineOptions)> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.OpenSSLEngineOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.OpenSSLEngineOptions)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.OpenSSLEngineOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.OpenSSLEngineOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.OpenSSLEngineOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.OpenSSLEngineOptions)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.OpenSSLEngineOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.OpenSSLEngineOptions)> ==> <java.util.concurrent.ConcurrentLinkedQueue: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.OpenSSLEngineOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.OpenSSLEngineOptions)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.OpenSSLEngineOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.OpenSSLEngineOptions)> ==> <io.vertx.core.json.JsonArray$Iter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.OpenSSLEngineOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.OpenSSLEngineOptions)> ==> <io.vertx.core.json.JsonObject$Iter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.OpenSSLEngineOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.OpenSSLEngineOptions)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.OpenSSLEngineOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.OpenSSLEngineOptions)> ==> <java.util.Scanner: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.OpenSSLEngineOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.OpenSSLEngineOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.OpenSSLEngineOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.OpenSSLEngineOptions)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: boolean hasNext()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.OpenSSLEngineOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.OpenSSLEngineOptions)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.OpenSSLEngineOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.OpenSSLEngineOptions)> ==> <io.vertx.core.json.JsonArray$Iter: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.OpenSSLEngineOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.OpenSSLEngineOptions)> ==> <io.vertx.core.json.JsonObject$Iter: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.OpenSSLEngineOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.OpenSSLEngineOptions)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.OpenSSLEngineOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.OpenSSLEngineOptions)> ==> <java.util.Scanner: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.OpenSSLEngineOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.OpenSSLEngineOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.OpenSSLEngineOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.OpenSSLEngineOptions)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: java.lang.Object next()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.net.OpenSSLEngineOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.OpenSSLEngineOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getKey()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.net.OpenSSLEngineOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.OpenSSLEngineOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getKey()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.net.OpenSSLEngineOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.OpenSSLEngineOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.net.OpenSSLEngineOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.OpenSSLEngineOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getKey()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.net.OpenSSLEngineOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.OpenSSLEngineOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getKey()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.net.OpenSSLEngineOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.OpenSSLEngineOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getKey()>
INTERFACE edge: $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.OpenSSLEngineOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.OpenSSLEngineOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.OpenSSLEngineOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.OpenSSLEngineOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.OpenSSLEngineOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.OpenSSLEngineOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.OpenSSLEngineOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.OpenSSLEngineOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.OpenSSLEngineOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.OpenSSLEngineOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.OpenSSLEngineOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.OpenSSLEngineOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.OpenSSLEngineOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.OpenSSLEngineOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.OpenSSLEngineOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.OpenSSLEngineOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.OpenSSLEngineOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.OpenSSLEngineOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.OpenSSLEngineOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.OpenSSLEngineOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.OpenSSLEngineOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.OpenSSLEngineOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.OpenSSLEngineOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.OpenSSLEngineOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
VIRTUAL edge: $i0 = virtualinvoke r5.<java.lang.String: int hashCode()>() in <io.vertx.core.net.OpenSSLEngineOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.OpenSSLEngineOptions)> ==> <java.lang.String: int hashCode()>
VIRTUAL edge: $z1 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("sessionCacheEnabled") in <io.vertx.core.net.OpenSSLEngineOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.OpenSSLEngineOptions)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z3 = virtualinvoke $r9.<java.lang.Boolean: boolean booleanValue()>() in <io.vertx.core.net.OpenSSLEngineOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.OpenSSLEngineOptions)> ==> <java.lang.Boolean: boolean booleanValue()>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.OpenSSLEngineOptions: io.vertx.core.net.OpenSSLEngineOptions setSessionCacheEnabled(boolean)>($z3) in <io.vertx.core.net.OpenSSLEngineOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.OpenSSLEngineOptions)> ==> <io.vertx.core.net.OpenSSLEngineOptions: io.vertx.core.net.OpenSSLEngineOptions setSessionCacheEnabled(boolean)>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.http.impl.HeadersAdaptor: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.impl.ConcurrentHashSet: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <java.util.ServiceLoader: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.json.JsonArray: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <java.util.AbstractList: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.json.JsonObject: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$1: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <java.util.concurrent.ConcurrentLinkedQueue: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.json.JsonArray$Iter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.json.JsonObject$Iter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <java.util.Scanner: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: boolean hasNext()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.json.JsonArray$Iter: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.json.JsonObject$Iter: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <java.util.Scanner: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: java.lang.Object next()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getKey()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getKey()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getKey()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getKey()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getKey()>
INTERFACE edge: $r49 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r49 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r49 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r49 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r49 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r49 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r50 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r50 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r50 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r50 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r50 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r50 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r43 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r43 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r43 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r43 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r43 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r43 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r45 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r45 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r45 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r45 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r45 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r45 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r36 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r36 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r36 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r36 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r36 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r36 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r38 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r38 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r38 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r38 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r38 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r38 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r30 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r30 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r30 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r30 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r30 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r30 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r32 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r32 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r32 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r32 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r32 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r32 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r26 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r26 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r26 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r26 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r26 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r26 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r27 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r27 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r27 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r27 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r27 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r27 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r20 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r20 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r20 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r20 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r20 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r20 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r22 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r22 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r22 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r22 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r22 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r22 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r13 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r13 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r13 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r13 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r13 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r13 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r15 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r15 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r15 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r15 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r15 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r15 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
VIRTUAL edge: $i0 = virtualinvoke r5.<java.lang.String: int hashCode()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <java.lang.String: int hashCode()>
VIRTUAL edge: $z11 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("certPath") in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z15 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("certPaths") in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z14 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("certValue") in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z13 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("certValues") in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z12 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("keyPath") in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z10 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("keyPaths") in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("keyValue") in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z16 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("keyValues") in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke r11.<io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setCertPath(java.lang.String)>($r51) in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setCertPath(java.lang.String)>
VIRTUAL edge: virtualinvoke r11.<io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setCertPaths(java.util.List)>($r44) in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setCertPaths(java.util.List)>
VIRTUAL edge: virtualinvoke r11.<io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setCertValue(io.vertx.core.buffer.Buffer)>($r41) in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setCertValue(io.vertx.core.buffer.Buffer)>
VIRTUAL edge: virtualinvoke r11.<io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setCertValues(java.util.List)>($r31) in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setCertValues(java.util.List)>
VIRTUAL edge: virtualinvoke r11.<io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setKeyPath(java.lang.String)>($r28) in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setKeyPath(java.lang.String)>
VIRTUAL edge: virtualinvoke r11.<io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setKeyPaths(java.util.List)>($r21) in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setKeyPaths(java.util.List)>
VIRTUAL edge: virtualinvoke r11.<io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setKeyValue(io.vertx.core.buffer.Buffer)>($r18) in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setKeyValue(io.vertx.core.buffer.Buffer)>
VIRTUAL edge: virtualinvoke r11.<io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setKeyValues(java.util.List)>($r7) in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setKeyValues(java.util.List)>
SPECIAL edge: specialinvoke $r44.<java.util.ArrayList: void <init>()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <java.util.ArrayList: void <init>()>
INTERFACE edge: interfaceinvoke $r46.<java.lang.Iterable: void forEach(java.util.function.Consumer)>($r47) in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders: void forEach(java.util.function.Consumer)>
INTERFACE edge: interfaceinvoke $r46.<java.lang.Iterable: void forEach(java.util.function.Consumer)>($r47) in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders: void forEach(java.util.function.Consumer)>
VIRTUAL edge: $r40 = virtualinvoke $r37.<java.util.Base64$Decoder: byte[] decode(java.lang.String)>($r39) in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <java.util.Base64$Decoder: byte[] decode(java.lang.String)>
SPECIAL edge: specialinvoke $r31.<java.util.ArrayList: void <init>()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <java.util.ArrayList: void <init>()>
INTERFACE edge: interfaceinvoke $r33.<java.lang.Iterable: void forEach(java.util.function.Consumer)>($r34) in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders: void forEach(java.util.function.Consumer)>
INTERFACE edge: interfaceinvoke $r33.<java.lang.Iterable: void forEach(java.util.function.Consumer)>($r34) in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders: void forEach(java.util.function.Consumer)>
SPECIAL edge: specialinvoke $r21.<java.util.ArrayList: void <init>()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <java.util.ArrayList: void <init>()>
INTERFACE edge: interfaceinvoke $r23.<java.lang.Iterable: void forEach(java.util.function.Consumer)>($r24) in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders: void forEach(java.util.function.Consumer)>
INTERFACE edge: interfaceinvoke $r23.<java.lang.Iterable: void forEach(java.util.function.Consumer)>($r24) in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders: void forEach(java.util.function.Consumer)>
VIRTUAL edge: $r17 = virtualinvoke $r14.<java.util.Base64$Decoder: byte[] decode(java.lang.String)>($r16) in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <java.util.Base64$Decoder: byte[] decode(java.lang.String)>
SPECIAL edge: specialinvoke $r7.<java.util.ArrayList: void <init>()>() in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <java.util.ArrayList: void <init>()>
INTERFACE edge: interfaceinvoke $r9.<java.lang.Iterable: void forEach(java.util.function.Consumer)>($r10) in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders: void forEach(java.util.function.Consumer)>
INTERFACE edge: interfaceinvoke $r9.<java.lang.Iterable: void forEach(java.util.function.Consumer)>($r10) in <io.vertx.core.net.PemKeyCertOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders: void forEach(java.util.function.Consumer)>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)> ==> <io.vertx.core.http.impl.HeadersAdaptor: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)> ==> <io.vertx.core.impl.ConcurrentHashSet: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)> ==> <java.util.ServiceLoader: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)> ==> <io.vertx.core.json.JsonArray: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)> ==> <java.util.AbstractList: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)> ==> <io.vertx.core.json.JsonObject: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$1: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)> ==> <java.util.concurrent.ConcurrentLinkedQueue: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)> ==> <io.vertx.core.json.JsonArray$Iter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)> ==> <io.vertx.core.json.JsonObject$Iter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)> ==> <java.util.Scanner: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: boolean hasNext()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)> ==> <io.vertx.core.json.JsonArray$Iter: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)> ==> <io.vertx.core.json.JsonObject$Iter: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)> ==> <java.util.Scanner: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: java.lang.Object next()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getKey()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getKey()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getKey()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getKey()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getKey()>
INTERFACE edge: $r11 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r11 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r11 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r11 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r11 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r11 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r12 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r12 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r12 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r12 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r12 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r12 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r7 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r7 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r7 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r7 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r7 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r7 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
VIRTUAL edge: $i0 = virtualinvoke r5.<java.lang.String: int hashCode()>() in <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)> ==> <java.lang.String: int hashCode()>
VIRTUAL edge: $z4 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("certPaths") in <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("certValues") in <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)> ==> <java.lang.String: boolean equals(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r13.<java.lang.Iterable: void forEach(java.util.function.Consumer)>($r14) in <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders: void forEach(java.util.function.Consumer)>
INTERFACE edge: interfaceinvoke $r13.<java.lang.Iterable: void forEach(java.util.function.Consumer)>($r14) in <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders: void forEach(java.util.function.Consumer)>
INTERFACE edge: interfaceinvoke $r9.<java.lang.Iterable: void forEach(java.util.function.Consumer)>($r10) in <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders: void forEach(java.util.function.Consumer)>
INTERFACE edge: interfaceinvoke $r9.<java.lang.Iterable: void forEach(java.util.function.Consumer)>($r10) in <io.vertx.core.net.PemTrustOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PemTrustOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders: void forEach(java.util.function.Consumer)>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.http.impl.HeadersAdaptor: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.impl.ConcurrentHashSet: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <java.util.ServiceLoader: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.json.JsonArray: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <java.util.AbstractList: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.json.JsonObject: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$1: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <java.util.concurrent.ConcurrentLinkedQueue: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.json.JsonArray$Iter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.json.JsonObject$Iter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <java.util.Scanner: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: boolean hasNext()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.json.JsonArray$Iter: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.json.JsonObject$Iter: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <java.util.Scanner: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: java.lang.Object next()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getKey()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getKey()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getKey()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getKey()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getKey()>
INTERFACE edge: $r18 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r18 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r18 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r18 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r18 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r18 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r19 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r19 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r19 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r19 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r19 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r19 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r14 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r14 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r14 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r14 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r14 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r14 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r15 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r15 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r15 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r15 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r15 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r15 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r9 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r9 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r9 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r9 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r9 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r9 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
VIRTUAL edge: $i0 = virtualinvoke r5.<java.lang.String: int hashCode()>() in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <java.lang.String: int hashCode()>
VIRTUAL edge: $z1 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("password") in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z6 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("path") in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z5 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("value") in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.PfxOptions: io.vertx.core.net.PfxOptions setPassword(java.lang.String)>($r20) in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.net.PfxOptions: io.vertx.core.net.PfxOptions setPassword(java.lang.String)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.PfxOptions: io.vertx.core.net.PfxOptions setPath(java.lang.String)>($r16) in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.net.PfxOptions: io.vertx.core.net.PfxOptions setPath(java.lang.String)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.PfxOptions: io.vertx.core.net.PfxOptions setValue(io.vertx.core.buffer.Buffer)>($r12) in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.net.PfxOptions: io.vertx.core.net.PfxOptions setValue(io.vertx.core.buffer.Buffer)>
VIRTUAL edge: $r11 = virtualinvoke $r8.<java.util.Base64$Decoder: byte[] decode(java.lang.String)>($r10) in <io.vertx.core.net.PfxOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.PfxOptions)> ==> <java.util.Base64$Decoder: byte[] decode(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.net.PemKeyCertOptionsConverter$lambda_fromJson_3__83: void <init>(java.util.ArrayList)>($r0) in <io.vertx.core.net.PemKeyCertOptionsConverter$lambda_fromJson_3__83: java.util.function.Consumer bootstrap$(java.util.ArrayList)> ==> <io.vertx.core.net.PemKeyCertOptionsConverter$lambda_fromJson_3__83: void <init>(java.util.ArrayList)>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.net.PemKeyCertOptionsConverter$lambda_fromJson_2__84: void <init>(java.util.ArrayList)>($r0) in <io.vertx.core.net.PemKeyCertOptionsConverter$lambda_fromJson_2__84: java.util.function.Consumer bootstrap$(java.util.ArrayList)> ==> <io.vertx.core.net.PemKeyCertOptionsConverter$lambda_fromJson_2__84: void <init>(java.util.ArrayList)>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.net.PemKeyCertOptionsConverter$lambda_fromJson_1__85: void <init>(java.util.ArrayList)>($r0) in <io.vertx.core.net.PemKeyCertOptionsConverter$lambda_fromJson_1__85: java.util.function.Consumer bootstrap$(java.util.ArrayList)> ==> <io.vertx.core.net.PemKeyCertOptionsConverter$lambda_fromJson_1__85: void <init>(java.util.ArrayList)>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.net.PemKeyCertOptionsConverter$lambda_fromJson_0__86: void <init>(java.util.ArrayList)>($r0) in <io.vertx.core.net.PemKeyCertOptionsConverter$lambda_fromJson_0__86: java.util.function.Consumer bootstrap$(java.util.ArrayList)> ==> <io.vertx.core.net.PemKeyCertOptionsConverter$lambda_fromJson_0__86: void <init>(java.util.ArrayList)>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.net.PemTrustOptionsConverter$lambda_fromJson_0__88: void <init>(io.vertx.core.net.PemTrustOptions)>($r0) in <io.vertx.core.net.PemTrustOptionsConverter$lambda_fromJson_0__88: java.util.function.Consumer bootstrap$(io.vertx.core.net.PemTrustOptions)> ==> <io.vertx.core.net.PemTrustOptionsConverter$lambda_fromJson_0__88: void <init>(io.vertx.core.net.PemTrustOptions)>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.net.PemTrustOptionsConverter$lambda_fromJson_1__87: void <init>(io.vertx.core.net.PemTrustOptions)>($r0) in <io.vertx.core.net.PemTrustOptionsConverter$lambda_fromJson_1__87: java.util.function.Consumer bootstrap$(io.vertx.core.net.PemTrustOptions)> ==> <io.vertx.core.net.PemTrustOptionsConverter$lambda_fromJson_1__87: void <init>(io.vertx.core.net.PemTrustOptions)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.TCPSSLOptionsConverter$lambda_fromJson_3__67: void <init>(java.util.LinkedHashSet)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.TCPSSLOptionsConverter$lambda_fromJson_2__68: void <init>(io.vertx.core.net.TCPSSLOptions)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.TCPSSLOptionsConverter$lambda_fromJson_1__69: void <init>(io.vertx.core.net.TCPSSLOptions)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.TCPSSLOptionsConverter$lambda_fromJson_0__70: void <init>(io.vertx.core.net.TCPSSLOptions)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.json.JsonArray$Iter: void <init>(io.vertx.core.json.JsonArray,java.util.Iterator)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $r5 = interfaceinvoke $r3.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r4) in <io.vertx.core.http.impl.Http2HeadersAdaptor: java.util.List entries()> ==> <java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>
INTERFACE edge: $r7 = interfaceinvoke $r5.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r6) in <io.vertx.core.http.impl.Http2HeadersAdaptor: java.util.List entries()> ==> <java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.http.impl.Http2HeadersAdaptor$lambda_entries_0__89: void <init>(io.vertx.core.http.impl.Http2HeadersAdaptor)>($r0) in <io.vertx.core.http.impl.Http2HeadersAdaptor$lambda_entries_0__89: java.util.function.Function bootstrap$(io.vertx.core.http.impl.Http2HeadersAdaptor)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$lambda_entries_0__89: void <init>(io.vertx.core.http.impl.Http2HeadersAdaptor)>
VIRTUAL edge: $i0 = virtualinvoke r1.<io.vertx.core.http.impl.headers.VertxHttpHeaders: int size()>() in <io.vertx.core.http.impl.headers.VertxHttpHeaders: java.util.List entries()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders: int size()>
SPECIAL edge: specialinvoke $r0.<java.util.ArrayList: void <init>(int)>($i0) in <io.vertx.core.http.impl.headers.VertxHttpHeaders: java.util.List entries()> ==> <java.util.ArrayList: void <init>(int)>
INTERFACE edge: interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r6) in <io.vertx.core.http.impl.headers.VertxHttpHeaders: java.util.List entries()> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke $r6.<io.vertx.core.http.impl.headers.VertxHttpHeaders$1: void <init>(io.vertx.core.http.impl.headers.VertxHttpHeaders,io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry)>(r1, r7) in <io.vertx.core.http.impl.headers.VertxHttpHeaders: java.util.List entries()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: void <init>(io.vertx.core.http.impl.headers.VertxHttpHeaders,io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.json.JsonObject$Iter: void <init>(io.vertx.core.json.JsonObject,java.util.Iterator)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setAcceptBacklog(int)>(i0) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setAcceptBacklog(int)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setAcceptBacklog(int)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setClientAuth(io.vertx.core.http.ClientAuth)>(r1) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setClientAuth(io.vertx.core.http.ClientAuth)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setClientAuth(io.vertx.core.http.ClientAuth)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setClientAuthRequired(boolean)>(z0) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setClientAuthRequired(boolean)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setClientAuthRequired(boolean)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setHost(java.lang.String)>(r1) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setHost(java.lang.String)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setHost(java.lang.String)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setPort(int)>(i0) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setPort(int)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setPort(int)>
SPECIAL edge: $r1 = specialinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setSni(boolean)>(z0) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setSni(boolean)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setSni(boolean)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.impl.VertxEventLoopGroup$1: void <init>(io.vertx.core.net.impl.VertxEventLoopGroup)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.impl.NetServerImpl$NetSocketStream: void <init>(io.vertx.core.net.impl.NetServerImpl)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.NetworkOptions: void <init>(io.vertx.core.net.NetworkOptions)>(r1) in <io.vertx.core.net.TCPSSLOptions: void <init>(io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.NetworkOptions: void <init>(io.vertx.core.net.NetworkOptions)>
VIRTUAL edge: $z0 = virtualinvoke r1.<io.vertx.core.net.TCPSSLOptions: boolean isTcpNoDelay()>() in <io.vertx.core.net.TCPSSLOptions: void <init>(io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.TCPSSLOptions: boolean isTcpNoDelay()>
VIRTUAL edge: $z1 = virtualinvoke r1.<io.vertx.core.net.TCPSSLOptions: boolean isTcpKeepAlive()>() in <io.vertx.core.net.TCPSSLOptions: void <init>(io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.TCPSSLOptions: boolean isTcpKeepAlive()>
VIRTUAL edge: $i0 = virtualinvoke r1.<io.vertx.core.net.TCPSSLOptions: int getSoLinger()>() in <io.vertx.core.net.TCPSSLOptions: void <init>(io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.TCPSSLOptions: int getSoLinger()>
VIRTUAL edge: $z2 = virtualinvoke r1.<io.vertx.core.net.TCPSSLOptions: boolean isUsePooledBuffers()>() in <io.vertx.core.net.TCPSSLOptions: void <init>(io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.TCPSSLOptions: boolean isUsePooledBuffers()>
VIRTUAL edge: $i1 = virtualinvoke r1.<io.vertx.core.net.TCPSSLOptions: int getIdleTimeout()>() in <io.vertx.core.net.TCPSSLOptions: void <init>(io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.TCPSSLOptions: int getIdleTimeout()>
VIRTUAL edge: $r2 = virtualinvoke r1.<io.vertx.core.net.TCPSSLOptions: java.util.concurrent.TimeUnit getIdleTimeoutUnit()>() in <io.vertx.core.net.TCPSSLOptions: void <init>(io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.TCPSSLOptions: java.util.concurrent.TimeUnit getIdleTimeoutUnit()>
VIRTUAL edge: $r23 = virtualinvoke r1.<io.vertx.core.net.TCPSSLOptions: java.util.concurrent.TimeUnit getIdleTimeoutUnit()>() in <io.vertx.core.net.TCPSSLOptions: void <init>(io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.TCPSSLOptions: java.util.concurrent.TimeUnit getIdleTimeoutUnit()>
VIRTUAL edge: $z3 = virtualinvoke r1.<io.vertx.core.net.TCPSSLOptions: boolean isSsl()>() in <io.vertx.core.net.TCPSSLOptions: void <init>(io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.TCPSSLOptions: boolean isSsl()>
VIRTUAL edge: $r3 = virtualinvoke r1.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.KeyCertOptions getKeyCertOptions()>() in <io.vertx.core.net.TCPSSLOptions: void <init>(io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.KeyCertOptions getKeyCertOptions()>
VIRTUAL edge: $r20 = virtualinvoke r1.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.KeyCertOptions getKeyCertOptions()>() in <io.vertx.core.net.TCPSSLOptions: void <init>(io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.KeyCertOptions getKeyCertOptions()>
VIRTUAL edge: $r4 = virtualinvoke r1.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TrustOptions getTrustOptions()>() in <io.vertx.core.net.TCPSSLOptions: void <init>(io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TrustOptions getTrustOptions()>
VIRTUAL edge: $r18 = virtualinvoke r1.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TrustOptions getTrustOptions()>() in <io.vertx.core.net.TCPSSLOptions: void <init>(io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TrustOptions getTrustOptions()>
VIRTUAL edge: $r5 = virtualinvoke r1.<io.vertx.core.net.TCPSSLOptions: java.util.Set getEnabledCipherSuites()>() in <io.vertx.core.net.TCPSSLOptions: void <init>(io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.TCPSSLOptions: java.util.Set getEnabledCipherSuites()>
VIRTUAL edge: $r6 = virtualinvoke r1.<io.vertx.core.net.TCPSSLOptions: java.util.Set getEnabledCipherSuites()>() in <io.vertx.core.net.TCPSSLOptions: void <init>(io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.TCPSSLOptions: java.util.Set getEnabledCipherSuites()>
VIRTUAL edge: $r8 = virtualinvoke r1.<io.vertx.core.net.TCPSSLOptions: java.util.List getCrlPaths()>() in <io.vertx.core.net.TCPSSLOptions: void <init>(io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.TCPSSLOptions: java.util.List getCrlPaths()>
VIRTUAL edge: $r10 = virtualinvoke r1.<io.vertx.core.net.TCPSSLOptions: java.util.List getCrlValues()>() in <io.vertx.core.net.TCPSSLOptions: void <init>(io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.TCPSSLOptions: java.util.List getCrlValues()>
VIRTUAL edge: $r12 = virtualinvoke r1.<io.vertx.core.net.TCPSSLOptions: java.util.Set getEnabledSecureTransportProtocols()>() in <io.vertx.core.net.TCPSSLOptions: void <init>(io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.TCPSSLOptions: java.util.Set getEnabledSecureTransportProtocols()>
VIRTUAL edge: $r13 = virtualinvoke r1.<io.vertx.core.net.TCPSSLOptions: java.util.Set getEnabledSecureTransportProtocols()>() in <io.vertx.core.net.TCPSSLOptions: void <init>(io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.TCPSSLOptions: java.util.Set getEnabledSecureTransportProtocols()>
VIRTUAL edge: $z5 = virtualinvoke r1.<io.vertx.core.net.TCPSSLOptions: boolean isTcpFastOpen()>() in <io.vertx.core.net.TCPSSLOptions: void <init>(io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.TCPSSLOptions: boolean isTcpFastOpen()>
VIRTUAL edge: $z6 = virtualinvoke r1.<io.vertx.core.net.TCPSSLOptions: boolean isTcpCork()>() in <io.vertx.core.net.TCPSSLOptions: void <init>(io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.TCPSSLOptions: boolean isTcpCork()>
VIRTUAL edge: $z7 = virtualinvoke r1.<io.vertx.core.net.TCPSSLOptions: boolean isTcpQuickAck()>() in <io.vertx.core.net.TCPSSLOptions: void <init>(io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.TCPSSLOptions: boolean isTcpQuickAck()>
INTERFACE edge: $r24 = interfaceinvoke $r20.<io.vertx.core.net.KeyCertOptions: io.vertx.core.net.KeyCertOptions clone()>() in <io.vertx.core.net.TCPSSLOptions: void <init>(io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.KeyCertOptions clone()>
INTERFACE edge: $r24 = interfaceinvoke $r20.<io.vertx.core.net.KeyCertOptions: io.vertx.core.net.KeyCertOptions clone()>() in <io.vertx.core.net.TCPSSLOptions: void <init>(io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.JksOptions: io.vertx.core.net.KeyCertOptions clone()>
INTERFACE edge: $r24 = interfaceinvoke $r20.<io.vertx.core.net.KeyCertOptions: io.vertx.core.net.KeyCertOptions clone()>() in <io.vertx.core.net.TCPSSLOptions: void <init>(io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.PfxOptions: io.vertx.core.net.KeyCertOptions clone()>
INTERFACE edge: $r25 = interfaceinvoke $r18.<io.vertx.core.net.TrustOptions: io.vertx.core.net.TrustOptions clone()>() in <io.vertx.core.net.TCPSSLOptions: void <init>(io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.PemTrustOptions: io.vertx.core.net.TrustOptions clone()>
INTERFACE edge: $r25 = interfaceinvoke $r18.<io.vertx.core.net.TrustOptions: io.vertx.core.net.TrustOptions clone()>() in <io.vertx.core.net.TCPSSLOptions: void <init>(io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.JksOptions: io.vertx.core.net.TrustOptions clone()>
INTERFACE edge: $r25 = interfaceinvoke $r18.<io.vertx.core.net.TrustOptions: io.vertx.core.net.TrustOptions clone()>() in <io.vertx.core.net.TCPSSLOptions: void <init>(io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.PfxOptions: io.vertx.core.net.TrustOptions clone()>
SPECIAL edge: specialinvoke $r26.<java.util.LinkedHashSet: void <init>()>() in <io.vertx.core.net.TCPSSLOptions: void <init>(io.vertx.core.net.TCPSSLOptions)> ==> <java.util.LinkedHashSet: void <init>()>
SPECIAL edge: specialinvoke $r26.<java.util.LinkedHashSet: void <init>(java.util.Collection)>($r6) in <io.vertx.core.net.TCPSSLOptions: void <init>(io.vertx.core.net.TCPSSLOptions)> ==> <java.util.LinkedHashSet: void <init>(java.util.Collection)>
SPECIAL edge: specialinvoke $r7.<java.util.ArrayList: void <init>(java.util.Collection)>($r8) in <io.vertx.core.net.TCPSSLOptions: void <init>(io.vertx.core.net.TCPSSLOptions)> ==> <java.util.ArrayList: void <init>(java.util.Collection)>
SPECIAL edge: specialinvoke $r9.<java.util.ArrayList: void <init>(java.util.Collection)>($r10) in <io.vertx.core.net.TCPSSLOptions: void <init>(io.vertx.core.net.TCPSSLOptions)> ==> <java.util.ArrayList: void <init>(java.util.Collection)>
VIRTUAL edge: $r27 = virtualinvoke $r15.<io.vertx.core.net.SSLEngineOptions: io.vertx.core.net.SSLEngineOptions clone()>() in <io.vertx.core.net.TCPSSLOptions: void <init>(io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.OpenSSLEngineOptions: io.vertx.core.net.SSLEngineOptions clone()>
VIRTUAL edge: $r27 = virtualinvoke $r15.<io.vertx.core.net.SSLEngineOptions: io.vertx.core.net.SSLEngineOptions clone()>() in <io.vertx.core.net.TCPSSLOptions: void <init>(io.vertx.core.net.TCPSSLOptions)> ==> <io.vertx.core.net.JdkSSLEngineOptions: io.vertx.core.net.SSLEngineOptions clone()>
SPECIAL edge: specialinvoke $r28.<java.util.LinkedHashSet: void <init>()>() in <io.vertx.core.net.TCPSSLOptions: void <init>(io.vertx.core.net.TCPSSLOptions)> ==> <java.util.LinkedHashSet: void <init>()>
SPECIAL edge: specialinvoke $r28.<java.util.LinkedHashSet: void <init>(java.util.Collection)>($r13) in <io.vertx.core.net.TCPSSLOptions: void <init>(io.vertx.core.net.TCPSSLOptions)> ==> <java.util.LinkedHashSet: void <init>(java.util.Collection)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.SSLEngineOptions: void <init>()>() in <io.vertx.core.net.OpenSSLEngineOptions: void <init>()> ==> <io.vertx.core.net.SSLEngineOptions: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r68.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Set connect handler first") in <io.vertx.core.net.impl.NetServerImpl: void listen(io.vertx.core.Handler,io.vertx.core.net.SocketAddress,io.vertx.core.Handler)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r69.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Listen already called") in <io.vertx.core.net.impl.NetServerImpl: void listen(io.vertx.core.Handler,io.vertx.core.net.SocketAddress,io.vertx.core.Handler)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<io.vertx.core.impl.VertxInternal: io.vertx.core.impl.ContextInternal getOrCreateContext()>() in <io.vertx.core.net.impl.NetServerImpl: void listen(io.vertx.core.Handler,io.vertx.core.net.SocketAddress,io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.ContextInternal getOrCreateContext()>
INTERFACE edge: $r5 = interfaceinvoke $r4.<io.vertx.core.impl.VertxInternal: java.util.Map sharedNetServers()>() in <io.vertx.core.net.impl.NetServerImpl: void listen(io.vertx.core.Handler,io.vertx.core.net.SocketAddress,io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl: java.util.Map sharedNetServers()>
INTERFACE edge: $i0 = interfaceinvoke r7.<io.vertx.core.net.SocketAddress: int port()>() in <io.vertx.core.net.impl.NetServerImpl: void listen(io.vertx.core.Handler,io.vertx.core.net.SocketAddress,io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.SocketAddressImpl: int port()>
INTERFACE edge: $r8 = interfaceinvoke r7.<io.vertx.core.net.SocketAddress: java.lang.String host()>() in <io.vertx.core.net.impl.NetServerImpl: void listen(io.vertx.core.Handler,io.vertx.core.net.SocketAddress,io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.SocketAddressImpl: java.lang.String host()>
INTERFACE edge: $r61 = interfaceinvoke r7.<io.vertx.core.net.SocketAddress: java.lang.String host()>() in <io.vertx.core.net.impl.NetServerImpl: void listen(io.vertx.core.Handler,io.vertx.core.net.SocketAddress,io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.SocketAddressImpl: java.lang.String host()>
INTERFACE edge: $r61 = interfaceinvoke r7.<io.vertx.core.net.SocketAddress: java.lang.String path()>() in <io.vertx.core.net.impl.NetServerImpl: void listen(io.vertx.core.Handler,io.vertx.core.net.SocketAddress,io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.SocketAddressImpl: java.lang.String path()>
INTERFACE edge: $r25 = interfaceinvoke r7.<io.vertx.core.net.SocketAddress: java.lang.String path()>() in <io.vertx.core.net.impl.NetServerImpl: void listen(io.vertx.core.Handler,io.vertx.core.net.SocketAddress,io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.SocketAddressImpl: java.lang.String path()>
SPECIAL edge: specialinvoke $r70.<io.vertx.core.net.impl.ServerID: void <init>(int,java.lang.String)>($i1, $r61) in <io.vertx.core.net.impl.NetServerImpl: void listen(io.vertx.core.Handler,io.vertx.core.net.SocketAddress,io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.ServerID: void <init>(int,java.lang.String)>
INTERFACE edge: $r12 = interfaceinvoke $r11.<io.vertx.core.impl.VertxInternal: java.util.Map sharedNetServers()>() in <io.vertx.core.net.impl.NetServerImpl: void listen(io.vertx.core.Handler,io.vertx.core.net.SocketAddress,io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl: java.util.Map sharedNetServers()>
INTERFACE edge: $r14 = interfaceinvoke $r12.<java.util.Map: java.lang.Object get(java.lang.Object)>($r13) in <io.vertx.core.net.impl.NetServerImpl: void listen(io.vertx.core.Handler,io.vertx.core.net.SocketAddress,io.vertx.core.Handler)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r14 = interfaceinvoke $r12.<java.util.Map: java.lang.Object get(java.lang.Object)>($r13) in <io.vertx.core.net.impl.NetServerImpl: void listen(io.vertx.core.Handler,io.vertx.core.net.SocketAddress,io.vertx.core.Handler)> ==> <java.util.IdentityHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r14 = interfaceinvoke $r12.<java.util.Map: java.lang.Object get(java.lang.Object)>($r13) in <io.vertx.core.net.impl.NetServerImpl: void listen(io.vertx.core.Handler,io.vertx.core.net.SocketAddress,io.vertx.core.Handler)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r14 = interfaceinvoke $r12.<java.util.Map: java.lang.Object get(java.lang.Object)>($r13) in <io.vertx.core.net.impl.NetServerImpl: void listen(io.vertx.core.Handler,io.vertx.core.net.SocketAddress,io.vertx.core.Handler)> ==> <java.util.EnumMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r14 = interfaceinvoke $r12.<java.util.Map: java.lang.Object get(java.lang.Object)>($r13) in <io.vertx.core.net.impl.NetServerImpl: void listen(io.vertx.core.Handler,io.vertx.core.net.SocketAddress,io.vertx.core.Handler)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r14 = interfaceinvoke $r12.<java.util.Map: java.lang.Object get(java.lang.Object)>($r13) in <io.vertx.core.net.impl.NetServerImpl: void listen(io.vertx.core.Handler,io.vertx.core.net.SocketAddress,io.vertx.core.Handler)> ==> <java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r14 = interfaceinvoke $r12.<java.util.Map: java.lang.Object get(java.lang.Object)>($r13) in <io.vertx.core.net.impl.NetServerImpl: void listen(io.vertx.core.Handler,io.vertx.core.net.SocketAddress,io.vertx.core.Handler)> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r14 = interfaceinvoke $r12.<java.util.Map: java.lang.Object get(java.lang.Object)>($r13) in <io.vertx.core.net.impl.NetServerImpl: void listen(io.vertx.core.Handler,io.vertx.core.net.SocketAddress,io.vertx.core.Handler)> ==> <java.util.TreeMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r14 = interfaceinvoke $r12.<java.util.Map: java.lang.Object get(java.lang.Object)>($r13) in <io.vertx.core.net.impl.NetServerImpl: void listen(io.vertx.core.Handler,io.vertx.core.net.SocketAddress,io.vertx.core.Handler)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r14 = interfaceinvoke $r12.<java.util.Map: java.lang.Object get(java.lang.Object)>($r13) in <io.vertx.core.net.impl.NetServerImpl: void listen(io.vertx.core.Handler,io.vertx.core.net.SocketAddress,io.vertx.core.Handler)> ==> <java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>
SPECIAL edge: specialinvoke $r71.<io.netty.channel.group.DefaultChannelGroup: void <init>(java.lang.String,io.netty.util.concurrent.EventExecutor)>("vertx-acceptor-channels", $r77) in <io.vertx.core.net.impl.NetServerImpl: void listen(io.vertx.core.Handler,io.vertx.core.net.SocketAddress,io.vertx.core.Handler)> ==> <io.netty.channel.group.DefaultChannelGroup: void <init>(java.lang.String,io.netty.util.concurrent.EventExecutor)>
SPECIAL edge: specialinvoke $r72.<io.netty.bootstrap.ServerBootstrap: void <init>()>() in <io.vertx.core.net.impl.NetServerImpl: void listen(io.vertx.core.Handler,io.vertx.core.net.SocketAddress,io.vertx.core.Handler)> ==> <io.netty.bootstrap.ServerBootstrap: void <init>()>
VIRTUAL edge: virtualinvoke $r72.<io.netty.bootstrap.ServerBootstrap: io.netty.bootstrap.ServerBootstrap group(io.netty.channel.EventLoopGroup)>($r19) in <io.vertx.core.net.impl.NetServerImpl: void listen(io.vertx.core.Handler,io.vertx.core.net.SocketAddress,io.vertx.core.Handler)> ==> <io.netty.bootstrap.ServerBootstrap: io.netty.bootstrap.ServerBootstrap group(io.netty.channel.EventLoopGroup)>
VIRTUAL edge: virtualinvoke $r72.<io.netty.bootstrap.ServerBootstrap: io.netty.bootstrap.ServerBootstrap childHandler(io.netty.channel.ChannelHandler)>($r79) in <io.vertx.core.net.impl.NetServerImpl: void listen(io.vertx.core.Handler,io.vertx.core.net.SocketAddress,io.vertx.core.Handler)> ==> <io.netty.bootstrap.ServerBootstrap: io.netty.bootstrap.ServerBootstrap childHandler(io.netty.channel.ChannelHandler)>
VIRTUAL edge: virtualinvoke $r22.<io.vertx.core.net.impl.SSLHelper: void validate(io.vertx.core.impl.VertxInternal)>($r21) in <io.vertx.core.net.impl.NetServerImpl: void listen(io.vertx.core.Handler,io.vertx.core.net.SocketAddress,io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.SSLHelper: void validate(io.vertx.core.impl.VertxInternal)>
SPECIAL edge: specialinvoke $r73.<io.vertx.core.net.impl.NetServerImpl$1: void <init>(io.vertx.core.net.impl.NetServerImpl)>(r1) in <io.vertx.core.net.impl.NetServerImpl: void listen(io.vertx.core.Handler,io.vertx.core.net.SocketAddress,io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.NetServerImpl$1: void <init>(io.vertx.core.net.impl.NetServerImpl)>
SPECIAL edge: specialinvoke r1.<io.vertx.core.net.impl.NetServerImpl: void applyConnectionOptions(boolean,io.netty.bootstrap.ServerBootstrap)>($z1, $r72) in <io.vertx.core.net.impl.NetServerImpl: void listen(io.vertx.core.Handler,io.vertx.core.net.SocketAddress,io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.NetServerImpl: void applyConnectionOptions(boolean,io.netty.bootstrap.ServerBootstrap)>
SPECIAL edge: specialinvoke $r74.<io.vertx.core.net.impl.NetServerImpl$Handlers: void <init>(io.vertx.core.net.NetServer,io.vertx.core.Handler,io.vertx.core.Handler)>(r1, r0, $r27) in <io.vertx.core.net.impl.NetServerImpl: void listen(io.vertx.core.Handler,io.vertx.core.net.SocketAddress,io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.NetServerImpl$Handlers: void <init>(io.vertx.core.net.NetServer,io.vertx.core.Handler,io.vertx.core.Handler)>
VIRTUAL edge: virtualinvoke $r28.<io.vertx.core.net.impl.HandlerManager: void addHandler(java.lang.Object,io.vertx.core.impl.ContextInternal)>($r74, $r29) in <io.vertx.core.net.impl.NetServerImpl: void listen(io.vertx.core.Handler,io.vertx.core.net.SocketAddress,io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.HandlerManager: void addHandler(java.lang.Object,io.vertx.core.impl.ContextInternal)>
VIRTUAL edge: virtualinvoke $r32.<io.vertx.core.net.impl.AsyncResolveConnectHelper: void addListener(io.vertx.core.Handler)>($r33) in <io.vertx.core.net.impl.NetServerImpl: void listen(io.vertx.core.Handler,io.vertx.core.net.SocketAddress,io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.AsyncResolveConnectHelper: void addListener(io.vertx.core.Handler)>
INTERFACE edge: interfaceinvoke $r59.<io.vertx.core.impl.VertxInternal: void runOnContext(io.vertx.core.Handler)>($r60) in <io.vertx.core.net.impl.NetServerImpl: void listen(io.vertx.core.Handler,io.vertx.core.net.SocketAddress,io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl: void runOnContext(io.vertx.core.Handler)>
VIRTUAL edge: virtualinvoke $r58.<io.vertx.core.logging.Logger: void error(java.lang.Object)>($r56) in <io.vertx.core.net.impl.NetServerImpl: void listen(io.vertx.core.Handler,io.vertx.core.net.SocketAddress,io.vertx.core.Handler)> ==> <io.vertx.core.logging.Logger: void error(java.lang.Object)>
INTERFACE edge: $r36 = interfaceinvoke $r35.<io.vertx.core.impl.VertxInternal: java.util.Map sharedNetServers()>() in <io.vertx.core.net.impl.NetServerImpl: void listen(io.vertx.core.Handler,io.vertx.core.net.SocketAddress,io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl: java.util.Map sharedNetServers()>
INTERFACE edge: interfaceinvoke $r36.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r37, r1) in <io.vertx.core.net.impl.NetServerImpl: void listen(io.vertx.core.Handler,io.vertx.core.net.SocketAddress,io.vertx.core.Handler)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r36.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r37, r1) in <io.vertx.core.net.impl.NetServerImpl: void listen(io.vertx.core.Handler,io.vertx.core.net.SocketAddress,io.vertx.core.Handler)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r36.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r37, r1) in <io.vertx.core.net.impl.NetServerImpl: void listen(io.vertx.core.Handler,io.vertx.core.net.SocketAddress,io.vertx.core.Handler)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r36.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r37, r1) in <io.vertx.core.net.impl.NetServerImpl: void listen(io.vertx.core.Handler,io.vertx.core.net.SocketAddress,io.vertx.core.Handler)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r36.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r37, r1) in <io.vertx.core.net.impl.NetServerImpl: void listen(io.vertx.core.Handler,io.vertx.core.net.SocketAddress,io.vertx.core.Handler)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r36.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r37, r1) in <io.vertx.core.net.impl.NetServerImpl: void listen(io.vertx.core.Handler,io.vertx.core.net.SocketAddress,io.vertx.core.Handler)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r36.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r37, r1) in <io.vertx.core.net.impl.NetServerImpl: void listen(io.vertx.core.Handler,io.vertx.core.net.SocketAddress,io.vertx.core.Handler)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r36.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r37, r1) in <io.vertx.core.net.impl.NetServerImpl: void listen(io.vertx.core.Handler,io.vertx.core.net.SocketAddress,io.vertx.core.Handler)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r36.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r37, r1) in <io.vertx.core.net.impl.NetServerImpl: void listen(io.vertx.core.Handler,io.vertx.core.net.SocketAddress,io.vertx.core.Handler)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r36.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r37, r1) in <io.vertx.core.net.impl.NetServerImpl: void listen(io.vertx.core.Handler,io.vertx.core.net.SocketAddress,io.vertx.core.Handler)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $i4 = virtualinvoke r15.<io.vertx.core.net.impl.NetServerImpl: int actualPort()>() in <io.vertx.core.net.impl.NetServerImpl: void listen(io.vertx.core.Handler,io.vertx.core.net.SocketAddress,io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.NetServerImpl: int actualPort()>
INTERFACE edge: r63 = interfaceinvoke $r40.<io.vertx.core.impl.VertxInternal: io.vertx.core.spi.metrics.VertxMetrics metricsSPI()>() in <io.vertx.core.net.impl.NetServerImpl: void listen(io.vertx.core.Handler,io.vertx.core.net.SocketAddress,io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl: io.vertx.core.spi.metrics.VertxMetrics metricsSPI()>
SPECIAL edge: specialinvoke $r75.<io.vertx.core.net.impl.SocketAddressImpl: void <init>(int,java.lang.String)>($i5, $r49) in <io.vertx.core.net.impl.NetServerImpl: void listen(io.vertx.core.Handler,io.vertx.core.net.SocketAddress,io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.SocketAddressImpl: void <init>(int,java.lang.String)>
INTERFACE edge: $r64 = interfaceinvoke r63.<io.vertx.core.spi.metrics.VertxMetrics: io.vertx.core.spi.metrics.TCPMetrics createNetServerMetrics(io.vertx.core.net.NetServerOptions,io.vertx.core.net.SocketAddress)>($r50, $r75) in <io.vertx.core.net.impl.NetServerImpl: void listen(io.vertx.core.Handler,io.vertx.core.net.SocketAddress,io.vertx.core.Handler)> ==> <io.vertx.core.spi.metrics.VertxMetrics: io.vertx.core.spi.metrics.TCPMetrics createNetServerMetrics(io.vertx.core.net.NetServerOptions,io.vertx.core.net.SocketAddress)>
SPECIAL edge: specialinvoke $r76.<io.vertx.core.net.impl.NetServerImpl$Handlers: void <init>(io.vertx.core.net.NetServer,io.vertx.core.Handler,io.vertx.core.Handler)>(r1, r0, $r43) in <io.vertx.core.net.impl.NetServerImpl: void listen(io.vertx.core.Handler,io.vertx.core.net.SocketAddress,io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.NetServerImpl$Handlers: void <init>(io.vertx.core.net.NetServer,io.vertx.core.Handler,io.vertx.core.Handler)>
VIRTUAL edge: virtualinvoke $r44.<io.vertx.core.net.impl.HandlerManager: void addHandler(java.lang.Object,io.vertx.core.impl.ContextInternal)>($r76, $r45) in <io.vertx.core.net.impl.NetServerImpl: void listen(io.vertx.core.Handler,io.vertx.core.net.SocketAddress,io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.HandlerManager: void addHandler(java.lang.Object,io.vertx.core.impl.ContextInternal)>
VIRTUAL edge: virtualinvoke $r66.<io.vertx.core.net.impl.AsyncResolveConnectHelper: void addListener(io.vertx.core.Handler)>($r67) in <io.vertx.core.net.impl.NetServerImpl: void listen(io.vertx.core.Handler,io.vertx.core.net.SocketAddress,io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.AsyncResolveConnectHelper: void addListener(io.vertx.core.Handler)>
STATIC edge: $r7 = staticinvoke <io.vertx.core.net.impl.AsyncResolveConnectHelper$lambda_addListener_0__101: io.netty.util.concurrent.GenericFutureListener bootstrap$(io.vertx.core.net.impl.AsyncResolveConnectHelper,io.vertx.core.Handler)>(r0, r2) in <io.vertx.core.net.impl.AsyncResolveConnectHelper: void addListener(io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.AsyncResolveConnectHelper$lambda_addListener_0__101: io.netty.util.concurrent.GenericFutureListener bootstrap$(io.vertx.core.net.impl.AsyncResolveConnectHelper,io.vertx.core.Handler)>
SPECIAL edge: specialinvoke $r2.<io.vertx.core.net.impl.NetServerImpl$lambda_listen_3__91: void <init>(io.vertx.core.net.impl.NetServerImpl,io.vertx.core.Handler)>($r0, $r1) in <io.vertx.core.net.impl.NetServerImpl$lambda_listen_3__91: io.vertx.core.Handler bootstrap$(io.vertx.core.net.impl.NetServerImpl,io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.NetServerImpl$lambda_listen_3__91: void <init>(io.vertx.core.net.impl.NetServerImpl,io.vertx.core.Handler)>
SPECIAL edge: specialinvoke $r2.<io.vertx.core.net.impl.NetServerImpl$lambda_listen_1__92: void <init>(io.vertx.core.Handler,java.lang.Throwable)>($r0, $r1) in <io.vertx.core.net.impl.NetServerImpl$lambda_listen_1__92: io.vertx.core.Handler bootstrap$(io.vertx.core.Handler,java.lang.Throwable)> ==> <io.vertx.core.net.impl.NetServerImpl$lambda_listen_1__92: void <init>(io.vertx.core.Handler,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r2.<io.vertx.core.net.impl.NetServerImpl$lambda_listen_0__90: void <init>(io.vertx.core.net.impl.NetServerImpl,java.lang.String)>($r0, $r1) in <io.vertx.core.net.impl.NetServerImpl$lambda_listen_0__90: io.vertx.core.Handler bootstrap$(io.vertx.core.net.impl.NetServerImpl,java.lang.String)> ==> <io.vertx.core.net.impl.NetServerImpl$lambda_listen_0__90: void <init>(io.vertx.core.net.impl.NetServerImpl,java.lang.String)>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.net.impl.AsyncResolveConnectHelper: void <init>()>() in <io.vertx.core.net.impl.AsyncResolveConnectHelper: io.vertx.core.net.impl.AsyncResolveConnectHelper doBind(io.vertx.core.impl.VertxInternal,io.vertx.core.net.SocketAddress,io.netty.bootstrap.ServerBootstrap)> ==> <io.vertx.core.net.impl.AsyncResolveConnectHelper: void <init>()>
INTERFACE edge: $r4 = interfaceinvoke r3.<io.vertx.core.impl.VertxInternal: io.vertx.core.net.impl.transport.Transport transport()>() in <io.vertx.core.net.impl.AsyncResolveConnectHelper: io.vertx.core.net.impl.AsyncResolveConnectHelper doBind(io.vertx.core.impl.VertxInternal,io.vertx.core.net.SocketAddress,io.netty.bootstrap.ServerBootstrap)> ==> <io.vertx.core.impl.VertxImpl: io.vertx.core.net.impl.transport.Transport transport()>
INTERFACE edge: $r12 = interfaceinvoke r3.<io.vertx.core.impl.VertxInternal: io.vertx.core.net.impl.transport.Transport transport()>() in <io.vertx.core.net.impl.AsyncResolveConnectHelper: io.vertx.core.net.impl.AsyncResolveConnectHelper doBind(io.vertx.core.impl.VertxInternal,io.vertx.core.net.SocketAddress,io.netty.bootstrap.ServerBootstrap)> ==> <io.vertx.core.impl.VertxImpl: io.vertx.core.net.impl.transport.Transport transport()>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.impl.VertxInternal: void resolveAddress(java.lang.String,io.vertx.core.Handler)>($r10, $r11) in <io.vertx.core.net.impl.AsyncResolveConnectHelper: io.vertx.core.net.impl.AsyncResolveConnectHelper doBind(io.vertx.core.impl.VertxInternal,io.vertx.core.net.SocketAddress,io.netty.bootstrap.ServerBootstrap)> ==> <io.vertx.core.impl.VertxImpl: void resolveAddress(java.lang.String,io.vertx.core.Handler)>
INTERFACE edge: $r6 = interfaceinvoke r5.<io.vertx.core.net.SocketAddress: java.lang.String path()>() in <io.vertx.core.net.impl.AsyncResolveConnectHelper: io.vertx.core.net.impl.AsyncResolveConnectHelper doBind(io.vertx.core.impl.VertxInternal,io.vertx.core.net.SocketAddress,io.netty.bootstrap.ServerBootstrap)> ==> <io.vertx.core.net.impl.SocketAddressImpl: java.lang.String path()>
INTERFACE edge: $r9 = interfaceinvoke r5.<io.vertx.core.net.SocketAddress: java.lang.String path()>() in <io.vertx.core.net.impl.AsyncResolveConnectHelper: io.vertx.core.net.impl.AsyncResolveConnectHelper doBind(io.vertx.core.impl.VertxInternal,io.vertx.core.net.SocketAddress,io.netty.bootstrap.ServerBootstrap)> ==> <io.vertx.core.net.impl.SocketAddressImpl: java.lang.String path()>
INTERFACE edge: $i0 = interfaceinvoke r5.<io.vertx.core.net.SocketAddress: int port()>() in <io.vertx.core.net.impl.AsyncResolveConnectHelper: io.vertx.core.net.impl.AsyncResolveConnectHelper doBind(io.vertx.core.impl.VertxInternal,io.vertx.core.net.SocketAddress,io.netty.bootstrap.ServerBootstrap)> ==> <io.vertx.core.net.impl.SocketAddressImpl: int port()>
INTERFACE edge: $r10 = interfaceinvoke r5.<io.vertx.core.net.SocketAddress: java.lang.String host()>() in <io.vertx.core.net.impl.AsyncResolveConnectHelper: io.vertx.core.net.impl.AsyncResolveConnectHelper doBind(io.vertx.core.impl.VertxInternal,io.vertx.core.net.SocketAddress,io.netty.bootstrap.ServerBootstrap)> ==> <io.vertx.core.net.impl.SocketAddressImpl: java.lang.String host()>
VIRTUAL edge: $r7 = virtualinvoke $r4.<io.vertx.core.net.impl.transport.Transport: io.netty.channel.ChannelFactory serverChannelFactory(boolean)>($z0) in <io.vertx.core.net.impl.AsyncResolveConnectHelper: io.vertx.core.net.impl.AsyncResolveConnectHelper doBind(io.vertx.core.impl.VertxInternal,io.vertx.core.net.SocketAddress,io.netty.bootstrap.ServerBootstrap)> ==> <io.vertx.core.net.impl.transport.EpollTransport: io.netty.channel.ChannelFactory serverChannelFactory(boolean)>
VIRTUAL edge: $r7 = virtualinvoke $r4.<io.vertx.core.net.impl.transport.Transport: io.netty.channel.ChannelFactory serverChannelFactory(boolean)>($z0) in <io.vertx.core.net.impl.AsyncResolveConnectHelper: io.vertx.core.net.impl.AsyncResolveConnectHelper doBind(io.vertx.core.impl.VertxInternal,io.vertx.core.net.SocketAddress,io.netty.bootstrap.ServerBootstrap)> ==> <io.vertx.core.net.impl.transport.KQueueTransport: io.netty.channel.ChannelFactory serverChannelFactory(boolean)>
VIRTUAL edge: $r7 = virtualinvoke $r4.<io.vertx.core.net.impl.transport.Transport: io.netty.channel.ChannelFactory serverChannelFactory(boolean)>($z0) in <io.vertx.core.net.impl.AsyncResolveConnectHelper: io.vertx.core.net.impl.AsyncResolveConnectHelper doBind(io.vertx.core.impl.VertxInternal,io.vertx.core.net.SocketAddress,io.netty.bootstrap.ServerBootstrap)> ==> <io.vertx.core.net.impl.transport.Transport: io.netty.channel.ChannelFactory serverChannelFactory(boolean)>
VIRTUAL edge: r13 = virtualinvoke $r12.<io.vertx.core.net.impl.transport.Transport: java.net.SocketAddress convert(io.vertx.core.net.SocketAddress,boolean)>(r5, 1) in <io.vertx.core.net.impl.AsyncResolveConnectHelper: io.vertx.core.net.impl.AsyncResolveConnectHelper doBind(io.vertx.core.impl.VertxInternal,io.vertx.core.net.SocketAddress,io.netty.bootstrap.ServerBootstrap)> ==> <io.vertx.core.net.impl.transport.EpollTransport: java.net.SocketAddress convert(io.vertx.core.net.SocketAddress,boolean)>
VIRTUAL edge: r13 = virtualinvoke $r12.<io.vertx.core.net.impl.transport.Transport: java.net.SocketAddress convert(io.vertx.core.net.SocketAddress,boolean)>(r5, 1) in <io.vertx.core.net.impl.AsyncResolveConnectHelper: io.vertx.core.net.impl.AsyncResolveConnectHelper doBind(io.vertx.core.impl.VertxInternal,io.vertx.core.net.SocketAddress,io.netty.bootstrap.ServerBootstrap)> ==> <io.vertx.core.net.impl.transport.KQueueTransport: java.net.SocketAddress convert(io.vertx.core.net.SocketAddress,boolean)>
VIRTUAL edge: r13 = virtualinvoke $r12.<io.vertx.core.net.impl.transport.Transport: java.net.SocketAddress convert(io.vertx.core.net.SocketAddress,boolean)>(r5, 1) in <io.vertx.core.net.impl.AsyncResolveConnectHelper: io.vertx.core.net.impl.AsyncResolveConnectHelper doBind(io.vertx.core.impl.VertxInternal,io.vertx.core.net.SocketAddress,io.netty.bootstrap.ServerBootstrap)> ==> <io.vertx.core.net.impl.transport.Transport: java.net.SocketAddress convert(io.vertx.core.net.SocketAddress,boolean)>
INTERFACE edge: interfaceinvoke r14.<io.netty.channel.ChannelFuture: io.netty.channel.ChannelFuture addListener(io.netty.util.concurrent.GenericFutureListener)>($r15) in <io.vertx.core.net.impl.AsyncResolveConnectHelper: io.vertx.core.net.impl.AsyncResolveConnectHelper doBind(io.vertx.core.impl.VertxInternal,io.vertx.core.net.SocketAddress,io.netty.bootstrap.ServerBootstrap)> ==> <io.netty.channel.ChannelFuture: io.netty.channel.ChannelFuture addListener(io.netty.util.concurrent.GenericFutureListener)>
STATIC edge: $r1 = staticinvoke <io.vertx.core.net.impl.transport.EpollTransport$init__103: io.netty.channel.ChannelFactory bootstrap$()>() in <io.vertx.core.net.impl.transport.EpollTransport: io.netty.channel.ChannelFactory serverChannelFactory(boolean)> ==> <io.vertx.core.net.impl.transport.EpollTransport$init__103: io.netty.channel.ChannelFactory bootstrap$()>
STATIC edge: $r0 = staticinvoke <io.vertx.core.net.impl.transport.EpollTransport$init__102: io.netty.channel.ChannelFactory bootstrap$()>() in <io.vertx.core.net.impl.transport.EpollTransport: io.netty.channel.ChannelFactory serverChannelFactory(boolean)> ==> <io.vertx.core.net.impl.transport.EpollTransport$init__102: io.netty.channel.ChannelFactory bootstrap$()>
STATIC edge: $r1 = staticinvoke <io.vertx.core.net.impl.transport.KQueueTransport$init__105: io.netty.channel.ChannelFactory bootstrap$()>() in <io.vertx.core.net.impl.transport.KQueueTransport: io.netty.channel.ChannelFactory serverChannelFactory(boolean)> ==> <io.vertx.core.net.impl.transport.KQueueTransport$init__105: io.netty.channel.ChannelFactory bootstrap$()>
STATIC edge: $r0 = staticinvoke <io.vertx.core.net.impl.transport.KQueueTransport$init__104: io.netty.channel.ChannelFactory bootstrap$()>() in <io.vertx.core.net.impl.transport.KQueueTransport: io.netty.channel.ChannelFactory serverChannelFactory(boolean)> ==> <io.vertx.core.net.impl.transport.KQueueTransport$init__104: io.netty.channel.ChannelFactory bootstrap$()>
STATIC edge: $r0 = staticinvoke <io.vertx.core.net.impl.transport.Transport$init__106: io.netty.channel.ChannelFactory bootstrap$()>() in <io.vertx.core.net.impl.transport.Transport: io.netty.channel.ChannelFactory serverChannelFactory(boolean)> ==> <io.vertx.core.net.impl.transport.Transport$init__106: io.netty.channel.ChannelFactory bootstrap$()>
STATIC edge: $r3 = staticinvoke <java.net.InetSocketAddress: java.net.InetSocketAddress createUnresolved(java.lang.String,int)>($r2, $i0) in <io.vertx.core.net.impl.transport.EpollTransport: java.net.SocketAddress convert(io.vertx.core.net.SocketAddress,boolean)> ==> <java.net.InetSocketAddress: java.net.InetSocketAddress createUnresolved(java.lang.String,int)>
STATIC edge: $r3 = staticinvoke <java.net.InetSocketAddress: java.net.InetSocketAddress createUnresolved(java.lang.String,int)>($r2, $i0) in <io.vertx.core.net.impl.transport.KQueueTransport: java.net.SocketAddress convert(io.vertx.core.net.SocketAddress,boolean)> ==> <java.net.InetSocketAddress: java.net.InetSocketAddress createUnresolved(java.lang.String,int)>
STATIC edge: $r3 = staticinvoke <java.net.InetSocketAddress: java.net.InetSocketAddress createUnresolved(java.lang.String,int)>($r2, $i0) in <io.vertx.core.net.impl.transport.Transport: java.net.SocketAddress convert(io.vertx.core.net.SocketAddress,boolean)> ==> <java.net.InetSocketAddress: java.net.InetSocketAddress createUnresolved(java.lang.String,int)>
SPECIAL edge: specialinvoke $r2.<io.vertx.core.net.impl.AsyncResolveConnectHelper$lambda_doBind_1__94: void <init>(io.vertx.core.net.impl.AsyncResolveConnectHelper,io.netty.channel.ChannelFuture)>($r0, $r1) in <io.vertx.core.net.impl.AsyncResolveConnectHelper$lambda_doBind_1__94: io.netty.util.concurrent.GenericFutureListener bootstrap$(io.vertx.core.net.impl.AsyncResolveConnectHelper,io.netty.channel.ChannelFuture)> ==> <io.vertx.core.net.impl.AsyncResolveConnectHelper$lambda_doBind_1__94: void <init>(io.vertx.core.net.impl.AsyncResolveConnectHelper,io.netty.channel.ChannelFuture)>
SPECIAL edge: specialinvoke $r3.<io.vertx.core.net.impl.AsyncResolveConnectHelper$lambda_doBind_3__93: void <init>(io.vertx.core.net.SocketAddress,io.netty.bootstrap.ServerBootstrap,io.vertx.core.net.impl.AsyncResolveConnectHelper)>($r0, $r1, $r2) in <io.vertx.core.net.impl.AsyncResolveConnectHelper$lambda_doBind_3__93: io.vertx.core.Handler bootstrap$(io.vertx.core.net.SocketAddress,io.netty.bootstrap.ServerBootstrap,io.vertx.core.net.impl.AsyncResolveConnectHelper)> ==> <io.vertx.core.net.impl.AsyncResolveConnectHelper$lambda_doBind_3__93: void <init>(io.vertx.core.net.SocketAddress,io.netty.bootstrap.ServerBootstrap,io.vertx.core.net.impl.AsyncResolveConnectHelper)>
SPECIAL edge: specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.net.impl.AsyncResolveConnectHelper: void checkPort(int)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid port ") in <io.vertx.core.net.impl.AsyncResolveConnectHelper: void checkPort(int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0) in <io.vertx.core.net.impl.AsyncResolveConnectHelper: void checkPort(int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.net.impl.AsyncResolveConnectHelper: void checkPort(int)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4) in <io.vertx.core.net.impl.AsyncResolveConnectHelper: void checkPort(int)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.impl.NetServerImpl$lambda_listen_4__71: void <init>(io.vertx.core.net.impl.NetServerImpl,io.vertx.core.Handler)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: $r2 = specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTrustStoreOptions(io.vertx.core.net.JksOptions)>(r1) in <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setTrustStoreOptions(io.vertx.core.net.JksOptions)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTrustStoreOptions(io.vertx.core.net.JksOptions)>
SPECIAL edge: $r2 = specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPfxTrustOptions(io.vertx.core.net.PfxOptions)>(r1) in <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setPfxTrustOptions(io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPfxTrustOptions(io.vertx.core.net.PfxOptions)>
SPECIAL edge: $r2 = specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPemTrustOptions(io.vertx.core.net.PemTrustOptions)>(r1) in <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setPemTrustOptions(io.vertx.core.net.PemTrustOptions)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPemTrustOptions(io.vertx.core.net.PemTrustOptions)>
SPECIAL edge: $r2 = specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setKeyStoreOptions(io.vertx.core.net.JksOptions)>(r1) in <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setKeyStoreOptions(io.vertx.core.net.JksOptions)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setKeyStoreOptions(io.vertx.core.net.JksOptions)>
SPECIAL edge: $r2 = specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)>(r1) in <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)>
SPECIAL edge: $r2 = specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)>(r1) in <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.impl.ContextImpl$lambda_executeBlocking_2__72: void <init>(io.vertx.core.impl.ContextImpl,io.vertx.core.spi.metrics.PoolMetrics,java.lang.Object,io.vertx.core.Handler,io.vertx.core.Handler)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.SSLEngineOptions: void <init>()> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1) in <io.vertx.core.impl.ConcurrentHashSet: boolean remove(java.lang.Object)> ==> <java.util.HashMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1) in <io.vertx.core.impl.ConcurrentHashSet: boolean remove(java.lang.Object)> ==> <java.util.IdentityHashMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1) in <io.vertx.core.impl.ConcurrentHashSet: boolean remove(java.lang.Object)> ==> <java.util.Hashtable: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1) in <io.vertx.core.impl.ConcurrentHashSet: boolean remove(java.lang.Object)> ==> <java.util.EnumMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1) in <io.vertx.core.impl.ConcurrentHashSet: boolean remove(java.lang.Object)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1) in <io.vertx.core.impl.ConcurrentHashSet: boolean remove(java.lang.Object)> ==> <java.security.Provider: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1) in <io.vertx.core.impl.ConcurrentHashSet: boolean remove(java.lang.Object)> ==> <java.util.jar.Attributes: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1) in <io.vertx.core.impl.ConcurrentHashSet: boolean remove(java.lang.Object)> ==> <java.util.TreeMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1) in <io.vertx.core.impl.ConcurrentHashSet: boolean remove(java.lang.Object)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1) in <io.vertx.core.impl.ConcurrentHashSet: boolean remove(java.lang.Object)> ==> <java.util.WeakHashMap: java.lang.Object remove(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>() in <io.vertx.core.net.impl.VertxEventLoopGroup$1: boolean remove(java.lang.Object)> ==> <java.lang.UnsupportedOperationException: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: void <init>(int,java.lang.String,java.lang.String)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r3.<io.netty.handler.codec.http.HttpHeaders: io.netty.handler.codec.http.HttpHeaders add(java.lang.String,java.lang.Object)>(r1, r2) in <io.vertx.core.http.impl.HeadersAdaptor: io.vertx.core.MultiMap add(java.lang.String,java.lang.String)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders: io.netty.handler.codec.http.HttpHeaders add(java.lang.String,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r3.<io.netty.handler.codec.http.HttpHeaders: io.netty.handler.codec.http.HttpHeaders add(java.lang.String,java.lang.Object)>(r1, r2) in <io.vertx.core.http.impl.HeadersAdaptor: io.vertx.core.MultiMap add(java.lang.String,java.lang.String)> ==> <io.netty.handler.codec.http.HttpHeaders: io.netty.handler.codec.http.HttpHeaders add(java.lang.String,java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke r0.<io.vertx.core.http.impl.headers.VertxHttpHeaders: io.vertx.core.http.impl.headers.VertxHttpHeaders add(java.lang.String,java.lang.String)>(r1, r2) in <io.vertx.core.http.impl.headers.VertxHttpHeaders: io.vertx.core.MultiMap add(java.lang.String,java.lang.String)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders: io.vertx.core.http.impl.headers.VertxHttpHeaders add(java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke r1.<io.vertx.core.http.CaseInsensitiveHeaders: void add0(int,int,java.lang.String,java.lang.String)>(i0, i1, r0, r2) in <io.vertx.core.http.CaseInsensitiveHeaders: io.vertx.core.MultiMap add(java.lang.String,java.lang.String)> ==> <io.vertx.core.http.CaseInsensitiveHeaders: void add0(int,int,java.lang.String,java.lang.String)>
INTERFACE edge: $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>() in <io.vertx.core.http.impl.HttpUtils: void validateHeaderValue(java.lang.CharSequence)> ==> <java.lang.StringBuilder: int length()>
INTERFACE edge: $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>() in <io.vertx.core.http.impl.HttpUtils: void validateHeaderValue(java.lang.CharSequence)> ==> <java.lang.String: int length()>
INTERFACE edge: $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>() in <io.vertx.core.http.impl.HttpUtils: void validateHeaderValue(java.lang.CharSequence)> ==> <java.lang.StringBuffer: int length()>
INTERFACE edge: $c1 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i3) in <io.vertx.core.http.impl.HttpUtils: void validateHeaderValue(java.lang.CharSequence)> ==> <java.lang.StringBuilder: char charAt(int)>
INTERFACE edge: $c1 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i3) in <io.vertx.core.http.impl.HttpUtils: void validateHeaderValue(java.lang.CharSequence)> ==> <java.lang.String: char charAt(int)>
INTERFACE edge: $c1 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i3) in <io.vertx.core.http.impl.HttpUtils: void validateHeaderValue(java.lang.CharSequence)> ==> <java.lang.StringBuffer: char charAt(int)>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.http.impl.HttpUtils: void validateHeaderValue(java.lang.CharSequence)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("a header value must not end with \'\\r\' or \'\\n\':") in <io.vertx.core.http.impl.HttpUtils: void validateHeaderValue(java.lang.CharSequence)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0) in <io.vertx.core.http.impl.HttpUtils: void validateHeaderValue(java.lang.CharSequence)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.http.impl.HttpUtils: void validateHeaderValue(java.lang.CharSequence)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5) in <io.vertx.core.http.impl.HttpUtils: void validateHeaderValue(java.lang.CharSequence)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
INTERFACE edge: $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>() in <io.vertx.core.http.impl.HttpUtils: void validateHeaderName(java.lang.CharSequence)> ==> <java.lang.StringBuilder: int length()>
INTERFACE edge: $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>() in <io.vertx.core.http.impl.HttpUtils: void validateHeaderName(java.lang.CharSequence)> ==> <java.lang.String: int length()>
INTERFACE edge: $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>() in <io.vertx.core.http.impl.HttpUtils: void validateHeaderName(java.lang.CharSequence)> ==> <java.lang.StringBuffer: int length()>
INTERFACE edge: c1 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i2) in <io.vertx.core.http.impl.HttpUtils: void validateHeaderName(java.lang.CharSequence)> ==> <java.lang.StringBuilder: char charAt(int)>
INTERFACE edge: c1 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i2) in <io.vertx.core.http.impl.HttpUtils: void validateHeaderName(java.lang.CharSequence)> ==> <java.lang.String: char charAt(int)>
INTERFACE edge: c1 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i2) in <io.vertx.core.http.impl.HttpUtils: void validateHeaderName(java.lang.CharSequence)> ==> <java.lang.StringBuffer: char charAt(int)>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.http.impl.HttpUtils: void validateHeaderName(java.lang.CharSequence)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("a header name cannot contain the following prohibited characters: =,;: \\t\\r\\n\\v\\f: ") in <io.vertx.core.http.impl.HttpUtils: void validateHeaderName(java.lang.CharSequence)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0) in <io.vertx.core.http.impl.HttpUtils: void validateHeaderName(java.lang.CharSequence)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.http.impl.HttpUtils: void validateHeaderName(java.lang.CharSequence)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5) in <io.vertx.core.http.impl.HttpUtils: void validateHeaderName(java.lang.CharSequence)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r7.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.http.impl.HttpUtils: void validateHeaderName(java.lang.CharSequence)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("a header name cannot contain non-ASCII character: ") in <io.vertx.core.http.impl.HttpUtils: void validateHeaderName(java.lang.CharSequence)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0) in <io.vertx.core.http.impl.HttpUtils: void validateHeaderName(java.lang.CharSequence)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.http.impl.HttpUtils: void validateHeaderName(java.lang.CharSequence)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10) in <io.vertx.core.http.impl.HttpUtils: void validateHeaderName(java.lang.CharSequence)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r22.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.http.impl.HttpUtils: int validateValueChar(java.lang.CharSequence,int,char)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("a header value contains a prohibited character \'\u0000\': ") in <io.vertx.core.http.impl.HttpUtils: int validateValueChar(java.lang.CharSequence,int,char)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3) in <io.vertx.core.http.impl.HttpUtils: int validateValueChar(java.lang.CharSequence,int,char)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.http.impl.HttpUtils: int validateValueChar(java.lang.CharSequence,int,char)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r21.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r25) in <io.vertx.core.http.impl.HttpUtils: int validateValueChar(java.lang.CharSequence,int,char)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r17.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.http.impl.HttpUtils: int validateValueChar(java.lang.CharSequence,int,char)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("a header value contains a prohibited character \'\\v\': ") in <io.vertx.core.http.impl.HttpUtils: int validateValueChar(java.lang.CharSequence,int,char)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3) in <io.vertx.core.http.impl.HttpUtils: int validateValueChar(java.lang.CharSequence,int,char)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.http.impl.HttpUtils: int validateValueChar(java.lang.CharSequence,int,char)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r20) in <io.vertx.core.http.impl.HttpUtils: int validateValueChar(java.lang.CharSequence,int,char)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r12.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.http.impl.HttpUtils: int validateValueChar(java.lang.CharSequence,int,char)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("a header value contains a prohibited character \'\\f\': ") in <io.vertx.core.http.impl.HttpUtils: int validateValueChar(java.lang.CharSequence,int,char)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3) in <io.vertx.core.http.impl.HttpUtils: int validateValueChar(java.lang.CharSequence,int,char)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.http.impl.HttpUtils: int validateValueChar(java.lang.CharSequence,int,char)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15) in <io.vertx.core.http.impl.HttpUtils: int validateValueChar(java.lang.CharSequence,int,char)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r7.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.http.impl.HttpUtils: int validateValueChar(java.lang.CharSequence,int,char)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("only \'\\n\' is allowed after \'\\r\': ") in <io.vertx.core.http.impl.HttpUtils: int validateValueChar(java.lang.CharSequence,int,char)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3) in <io.vertx.core.http.impl.HttpUtils: int validateValueChar(java.lang.CharSequence,int,char)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.http.impl.HttpUtils: int validateValueChar(java.lang.CharSequence,int,char)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10) in <io.vertx.core.http.impl.HttpUtils: int validateValueChar(java.lang.CharSequence,int,char)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.http.impl.HttpUtils: int validateValueChar(java.lang.CharSequence,int,char)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("only \' \' and \'\\t\' are allowed after \'\\n\': ") in <io.vertx.core.http.impl.HttpUtils: int validateValueChar(java.lang.CharSequence,int,char)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3) in <io.vertx.core.http.impl.HttpUtils: int validateValueChar(java.lang.CharSequence,int,char)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.http.impl.HttpUtils: int validateValueChar(java.lang.CharSequence,int,char)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5) in <io.vertx.core.http.impl.HttpUtils: int validateValueChar(java.lang.CharSequence,int,char)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r4.<io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.CharSequence getValue()>() in <io.vertx.core.http.impl.headers.VertxHttpHeaders: java.lang.CharSequence get0(java.lang.CharSequence)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.CharSequence getValue()>
VIRTUAL edge: r6 = virtualinvoke $r5.<io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec lookupCodec(java.lang.Object,java.lang.String)>(r3, r4) in <io.vertx.core.eventbus.impl.EventBusImpl: io.vertx.core.eventbus.impl.MessageImpl createMessage(boolean,java.lang.String,io.vertx.core.MultiMap,java.lang.Object,java.lang.String)> ==> <io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec lookupCodec(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke $r7.<io.vertx.core.eventbus.impl.MessageImpl: void <init>(java.lang.String,java.lang.String,io.vertx.core.MultiMap,java.lang.Object,io.vertx.core.eventbus.MessageCodec,boolean,io.vertx.core.eventbus.impl.EventBusImpl)>(r0, null, r8, r3, r6, z0, r2) in <io.vertx.core.eventbus.impl.EventBusImpl: io.vertx.core.eventbus.impl.MessageImpl createMessage(boolean,java.lang.String,io.vertx.core.MultiMap,java.lang.Object,java.lang.String)> ==> <io.vertx.core.eventbus.impl.MessageImpl: void <init>(java.lang.String,java.lang.String,io.vertx.core.MultiMap,java.lang.Object,io.vertx.core.eventbus.MessageCodec,boolean,io.vertx.core.eventbus.impl.EventBusImpl)>
CLINIT edge: r22 = <io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec NULL_MESSAGE_CODEC> in <io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec lookupCodec(java.lang.Object,java.lang.String)> ==> <io.vertx.core.eventbus.impl.CodecManager: void <clinit>()>
CLINIT edge: r22 = <io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec REPLY_EXCEPTION_MESSAGE_CODEC> in <io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec lookupCodec(java.lang.Object,java.lang.String)> ==> <io.vertx.core.eventbus.impl.CodecManager: void <clinit>()>
CLINIT edge: r22 = <io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec BYTE_MESSAGE_CODEC> in <io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec lookupCodec(java.lang.Object,java.lang.String)> ==> <io.vertx.core.eventbus.impl.CodecManager: void <clinit>()>
CLINIT edge: r22 = <io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec CHAR_MESSAGE_CODEC> in <io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec lookupCodec(java.lang.Object,java.lang.String)> ==> <io.vertx.core.eventbus.impl.CodecManager: void <clinit>()>
CLINIT edge: r22 = <io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec SHORT_MESSAGE_CODEC> in <io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec lookupCodec(java.lang.Object,java.lang.String)> ==> <io.vertx.core.eventbus.impl.CodecManager: void <clinit>()>
CLINIT edge: r22 = <io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec BOOLEAN_MESSAGE_CODEC> in <io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec lookupCodec(java.lang.Object,java.lang.String)> ==> <io.vertx.core.eventbus.impl.CodecManager: void <clinit>()>
CLINIT edge: r22 = <io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec DOUBLE_MESSAGE_CODEC> in <io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec lookupCodec(java.lang.Object,java.lang.String)> ==> <io.vertx.core.eventbus.impl.CodecManager: void <clinit>()>
CLINIT edge: r22 = <io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec FLOAT_MESSAGE_CODEC> in <io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec lookupCodec(java.lang.Object,java.lang.String)> ==> <io.vertx.core.eventbus.impl.CodecManager: void <clinit>()>
CLINIT edge: r22 = <io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec LONG_MESSAGE_CODEC> in <io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec lookupCodec(java.lang.Object,java.lang.String)> ==> <io.vertx.core.eventbus.impl.CodecManager: void <clinit>()>
CLINIT edge: r22 = <io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec INT_MESSAGE_CODEC> in <io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec lookupCodec(java.lang.Object,java.lang.String)> ==> <io.vertx.core.eventbus.impl.CodecManager: void <clinit>()>
CLINIT edge: r22 = <io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec BYTE_ARRAY_MESSAGE_CODEC> in <io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec lookupCodec(java.lang.Object,java.lang.String)> ==> <io.vertx.core.eventbus.impl.CodecManager: void <clinit>()>
CLINIT edge: r22 = <io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec JSON_ARRAY_MESSAGE_CODEC> in <io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec lookupCodec(java.lang.Object,java.lang.String)> ==> <io.vertx.core.eventbus.impl.CodecManager: void <clinit>()>
CLINIT edge: r22 = <io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec JSON_OBJECT_MESSAGE_CODEC> in <io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec lookupCodec(java.lang.Object,java.lang.String)> ==> <io.vertx.core.eventbus.impl.CodecManager: void <clinit>()>
CLINIT edge: r22 = <io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec BUFFER_MESSAGE_CODEC> in <io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec lookupCodec(java.lang.Object,java.lang.String)> ==> <io.vertx.core.eventbus.impl.CodecManager: void <clinit>()>
CLINIT edge: r22 = <io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec STRING_MESSAGE_CODEC> in <io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec lookupCodec(java.lang.Object,java.lang.String)> ==> <io.vertx.core.eventbus.impl.CodecManager: void <clinit>()>
VIRTUAL edge: r6 = virtualinvoke $r5.<io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec lookupCodec(java.lang.Object,java.lang.String)>(r3, r4) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: io.vertx.core.eventbus.impl.MessageImpl createMessage(boolean,java.lang.String,io.vertx.core.MultiMap,java.lang.Object,java.lang.String)> ==> <io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec lookupCodec(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke $r7.<io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void <init>(io.vertx.core.net.impl.ServerID,java.lang.String,java.lang.String,io.vertx.core.MultiMap,java.lang.Object,io.vertx.core.eventbus.MessageCodec,boolean,io.vertx.core.eventbus.impl.EventBusImpl)>($r9, r0, null, r8, r3, r6, z0, r2) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: io.vertx.core.eventbus.impl.MessageImpl createMessage(boolean,java.lang.String,io.vertx.core.MultiMap,java.lang.Object,java.lang.String)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void <init>(io.vertx.core.net.impl.ServerID,java.lang.String,java.lang.String,io.vertx.core.MultiMap,java.lang.Object,io.vertx.core.eventbus.MessageCodec,boolean,io.vertx.core.eventbus.impl.EventBusImpl)>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.eventbus.impl.EventBusImpl: void checkStarted()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void sendOrPubInternal(io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.DeliveryOptions,io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.EventBusImpl: void checkStarted()>
SPECIAL edge: r4 = specialinvoke r0.<io.vertx.core.eventbus.impl.EventBusImpl: io.vertx.core.eventbus.impl.HandlerRegistration createReplyHandlerRegistration(io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.DeliveryOptions,io.vertx.core.Handler)>(r1, r2, r3) in <io.vertx.core.eventbus.impl.EventBusImpl: void sendOrPubInternal(io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.DeliveryOptions,io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.EventBusImpl: io.vertx.core.eventbus.impl.HandlerRegistration createReplyHandlerRegistration(io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.DeliveryOptions,io.vertx.core.Handler)>
SPECIAL edge: specialinvoke $r5.<io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: void <init>(io.vertx.core.eventbus.impl.EventBusImpl,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.DeliveryOptions,io.vertx.core.eventbus.impl.HandlerRegistration,io.vertx.core.eventbus.impl.EventBusImpl$1)>(r0, r1, r2, r4, null) in <io.vertx.core.eventbus.impl.EventBusImpl: void sendOrPubInternal(io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.DeliveryOptions,io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: void <init>(io.vertx.core.eventbus.impl.EventBusImpl,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.DeliveryOptions,io.vertx.core.eventbus.impl.HandlerRegistration,io.vertx.core.eventbus.impl.EventBusImpl$1)>
VIRTUAL edge: virtualinvoke $r5.<io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: void next()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void sendOrPubInternal(io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.DeliveryOptions,io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: void next()>
CLINIT edge: $r6 = new io.vertx.core.eventbus.impl.HandlerRegistration in <io.vertx.core.eventbus.impl.EventBusImpl: io.vertx.core.eventbus.impl.HandlerRegistration createReplyHandlerRegistration(io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.DeliveryOptions,io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void <clinit>()>
CLINIT edge: $r11 = staticinvoke <io.vertx.core.eventbus.impl.EventBusImpl: io.vertx.core.logging.Logger access$400()>() in <io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: void next()> ==> <io.vertx.core.eventbus.impl.EventBusImpl: void <clinit>()>
STATIC edge: $r11 = staticinvoke <io.vertx.core.eventbus.impl.EventBusImpl: io.vertx.core.logging.Logger access$400()>() in <io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: void next()> ==> <io.vertx.core.eventbus.impl.EventBusImpl: io.vertx.core.logging.Logger access$400()>
CLINIT edge: $r0 = <io.vertx.core.eventbus.impl.EventBusImpl: io.vertx.core.logging.Logger log> in <io.vertx.core.eventbus.impl.EventBusImpl: io.vertx.core.logging.Logger access$400()> ==> <io.vertx.core.eventbus.impl.EventBusImpl: void <clinit>()>
SPECIAL edge: specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>()>() in <io.vertx.core.streams.impl.InboundBuffer: io.vertx.core.streams.impl.InboundBuffer fetch(long)> ==> <java.lang.IllegalArgumentException: void <init>()>
VIRTUAL edge: $z1 = virtualinvoke $r3.<java.util.ArrayDeque: boolean isEmpty()>() in <io.vertx.core.streams.impl.InboundBuffer: io.vertx.core.streams.impl.InboundBuffer fetch(long)> ==> <java.util.ArrayDeque: boolean isEmpty()>
INTERFACE edge: interfaceinvoke $r4.<io.vertx.core.Context: void runOnContext(io.vertx.core.Handler)>($r5) in <io.vertx.core.streams.impl.InboundBuffer: io.vertx.core.streams.impl.InboundBuffer fetch(long)> ==> <io.vertx.core.impl.ContextImpl: void runOnContext(io.vertx.core.Handler)>
INTERFACE edge: interfaceinvoke $r4.<io.vertx.core.Context: void runOnContext(io.vertx.core.Handler)>($r5) in <io.vertx.core.streams.impl.InboundBuffer: io.vertx.core.streams.impl.InboundBuffer fetch(long)> ==> <io.vertx.core.impl.EventLoopContext: void runOnContext(io.vertx.core.Handler)>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.streams.impl.InboundBuffer$lambda_fetch_1__95: void <init>(io.vertx.core.streams.impl.InboundBuffer)>($r0) in <io.vertx.core.streams.impl.InboundBuffer$lambda_fetch_1__95: io.vertx.core.Handler bootstrap$(io.vertx.core.streams.impl.InboundBuffer)> ==> <io.vertx.core.streams.impl.InboundBuffer$lambda_fetch_1__95: void <init>(io.vertx.core.streams.impl.InboundBuffer)>
SPECIAL edge: specialinvoke $r6.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.impl.ContextImpl: boolean executeTask(java.lang.Object,io.vertx.core.Handler)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Uh oh! context executing with wrong thread! ") in <io.vertx.core.impl.ContextImpl: boolean executeTask(java.lang.Object,io.vertx.core.Handler)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0) in <io.vertx.core.impl.ContextImpl: boolean executeTask(java.lang.Object,io.vertx.core.Handler)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.impl.ContextImpl: boolean executeTask(java.lang.Object,io.vertx.core.Handler)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9) in <io.vertx.core.impl.ContextImpl: boolean executeTask(java.lang.Object,io.vertx.core.Handler)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r1.<io.vertx.core.impl.VertxThread: void executeStart()>() in <io.vertx.core.impl.ContextImpl: boolean executeTask(java.lang.Object,io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxThread: void executeStart()>
VIRTUAL edge: virtualinvoke r1.<io.vertx.core.impl.VertxThread: void executeEnd()>() in <io.vertx.core.impl.ContextImpl: boolean executeTask(java.lang.Object,io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxThread: void executeEnd()>
VIRTUAL edge: virtualinvoke r1.<io.vertx.core.impl.VertxThread: void executeEnd()>() in <io.vertx.core.impl.ContextImpl: boolean executeTask(java.lang.Object,io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxThread: void executeEnd()>
VIRTUAL edge: virtualinvoke r1.<io.vertx.core.impl.VertxThread: void executeEnd()>() in <io.vertx.core.impl.ContextImpl: boolean executeTask(java.lang.Object,io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxThread: void executeEnd()>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r4) in <io.vertx.core.impl.ContextImpl: boolean executeTask(java.lang.Object,io.vertx.core.Handler)> ==> <io.vertx.core.impl.DeploymentManager$lambda_doDeployVerticle_2__17: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r4) in <io.vertx.core.impl.ContextImpl: boolean executeTask(java.lang.Object,io.vertx.core.Handler)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r4) in <io.vertx.core.impl.ContextImpl: boolean executeTask(java.lang.Object,io.vertx.core.Handler)> ==> <io.vertx.core.impl.FutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r4) in <io.vertx.core.impl.ContextImpl: boolean executeTask(java.lang.Object,io.vertx.core.Handler)> ==> <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r4) in <io.vertx.core.impl.ContextImpl: boolean executeTask(java.lang.Object,io.vertx.core.Handler)> ==> <io.vertx.core.impl.SucceededFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r4) in <io.vertx.core.impl.ContextImpl: boolean executeTask(java.lang.Object,io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r4) in <io.vertx.core.impl.ContextImpl: boolean executeTask(java.lang.Object,io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r4) in <io.vertx.core.impl.ContextImpl: boolean executeTask(java.lang.Object,io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl$lambda_joinCluster_1__10: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r4) in <io.vertx.core.impl.ContextImpl: boolean executeTask(java.lang.Object,io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r4) in <io.vertx.core.impl.ContextImpl: boolean executeTask(java.lang.Object,io.vertx.core.Handler)> ==> <io.vertx.core.Starter$lambda_runVerticle_1__1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r4) in <io.vertx.core.impl.ContextImpl: boolean executeTask(java.lang.Object,io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r4) in <io.vertx.core.impl.ContextImpl: boolean executeTask(java.lang.Object,io.vertx.core.Handler)> ==> <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r4) in <io.vertx.core.impl.ContextImpl: boolean executeTask(java.lang.Object,io.vertx.core.Handler)> ==> <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r4) in <io.vertx.core.impl.ContextImpl: boolean executeTask(java.lang.Object,io.vertx.core.Handler)> ==> <io.vertx.core.Starter$lambda_startVertx_0__2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r4) in <io.vertx.core.impl.ContextImpl: boolean executeTask(java.lang.Object,io.vertx.core.Handler)> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r4) in <io.vertx.core.impl.ContextImpl: boolean executeTask(java.lang.Object,io.vertx.core.Handler)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r4) in <io.vertx.core.impl.ContextImpl: boolean executeTask(java.lang.Object,io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_start_3__19: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r4) in <io.vertx.core.impl.ContextImpl: boolean executeTask(java.lang.Object,io.vertx.core.Handler)> ==> <io.vertx.core.impl.HAManager$lambda_doDeployVerticle_4__7: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r4) in <io.vertx.core.impl.ContextImpl: boolean executeTask(java.lang.Object,io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_close_0__29: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r4) in <io.vertx.core.impl.ContextImpl: boolean executeTask(java.lang.Object,io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r4) in <io.vertx.core.impl.ContextImpl: boolean executeTask(java.lang.Object,io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r4) in <io.vertx.core.impl.ContextImpl: boolean executeTask(java.lang.Object,io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r4) in <io.vertx.core.impl.ContextImpl: boolean executeTask(java.lang.Object,io.vertx.core.Handler)> ==> <io.vertx.core.Starter$lambda_createLoggingHandler_2__3: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r4) in <io.vertx.core.impl.ContextImpl: boolean executeTask(java.lang.Object,io.vertx.core.Handler)> ==> <io.vertx.core.impl.CompositeFutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r4) in <io.vertx.core.impl.ContextImpl: boolean executeTask(java.lang.Object,io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r4) in <io.vertx.core.impl.ContextImpl: boolean executeTask(java.lang.Object,io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_finalize_6__18: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r4) in <io.vertx.core.impl.ContextImpl: boolean executeTask(java.lang.Object,io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r4) in <io.vertx.core.impl.ContextImpl: boolean executeTask(java.lang.Object,io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl$lambda_init_0__9: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r4) in <io.vertx.core.impl.ContextImpl: boolean executeTask(java.lang.Object,io.vertx.core.Handler)> ==> <io.vertx.core.impl.FailedFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r4) in <io.vertx.core.impl.ContextImpl: boolean executeTask(java.lang.Object,io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r4) in <io.vertx.core.impl.ContextImpl: boolean executeTask(java.lang.Object,io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_close_5__30: void handle(java.lang.Object)>
VIRTUAL edge: virtualinvoke r2.<io.vertx.core.impl.ContextImpl: void reportException(java.lang.Throwable)>($r12) in <io.vertx.core.impl.ContextImpl: boolean executeTask(java.lang.Object,io.vertx.core.Handler)> ==> <io.vertx.core.impl.ContextImpl: void reportException(java.lang.Throwable)>
VIRTUAL edge: virtualinvoke r2.<io.vertx.core.impl.ContextImpl: void reportException(java.lang.Throwable)>($r12) in <io.vertx.core.impl.ContextImpl: boolean executeTask(java.lang.Object,io.vertx.core.Handler)> ==> <io.vertx.core.impl.EventLoopContext: void reportException(java.lang.Throwable)>
CLINIT edge: $l0 = staticinvoke <java.lang.System: long nanoTime()>() in <io.vertx.core.impl.VertxThread: void executeStart()> ==> <java.lang.System: void <clinit>()>
STATIC edge: $l0 = staticinvoke <java.lang.System: long nanoTime()>() in <io.vertx.core.impl.VertxThread: void executeStart()> ==> <java.lang.System: long nanoTime()>
INTERFACE edge: $i1 = interfaceinvoke $r1.<java.util.List: int size()>() in <io.vertx.core.net.impl.HandlerManager$Handlers: void checkPos()> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$1: int size()>
INTERFACE edge: $i1 = interfaceinvoke $r1.<java.util.List: int size()>() in <io.vertx.core.net.impl.HandlerManager$Handlers: void checkPos()> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i1 = interfaceinvoke $r1.<java.util.List: int size()>() in <io.vertx.core.net.impl.HandlerManager$Handlers: void checkPos()> ==> <java.util.concurrent.CopyOnWriteArrayList: int size()>
INTERFACE edge: $i1 = interfaceinvoke $r1.<java.util.List: int size()>() in <io.vertx.core.net.impl.HandlerManager$Handlers: void checkPos()> ==> <java.util.ArrayList: int size()>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopHolder: void <init>(io.netty.channel.EventLoop)>(r1) in <io.vertx.core.net.impl.VertxEventLoopGroup: io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopHolder findHolder(io.netty.channel.EventLoop)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopHolder: void <init>(io.netty.channel.EventLoop)>
INTERFACE edge: r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.VertxEventLoopGroup: io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopHolder findHolder(io.netty.channel.EventLoop)> ==> <java.util.AbstractList: java.util.Iterator iterator()>
INTERFACE edge: r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.VertxEventLoopGroup: io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopHolder findHolder(io.netty.channel.EventLoop)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.VertxEventLoopGroup: io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopHolder findHolder(io.netty.channel.EventLoop)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
INTERFACE edge: r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.VertxEventLoopGroup: io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopHolder findHolder(io.netty.channel.EventLoop)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.VertxEventLoopGroup: io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopHolder findHolder(io.netty.channel.EventLoop)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.VertxEventLoopGroup: io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopHolder findHolder(io.netty.channel.EventLoop)> ==> <io.vertx.core.json.JsonArray$Iter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.VertxEventLoopGroup: io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopHolder findHolder(io.netty.channel.EventLoop)> ==> <io.vertx.core.json.JsonObject$Iter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.VertxEventLoopGroup: io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopHolder findHolder(io.netty.channel.EventLoop)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.VertxEventLoopGroup: io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopHolder findHolder(io.netty.channel.EventLoop)> ==> <java.util.Scanner: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.VertxEventLoopGroup: io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopHolder findHolder(io.netty.channel.EventLoop)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.VertxEventLoopGroup: io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopHolder findHolder(io.netty.channel.EventLoop)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: boolean hasNext()>
INTERFACE edge: $r6 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.VertxEventLoopGroup: io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopHolder findHolder(io.netty.channel.EventLoop)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object next()>
INTERFACE edge: $r6 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.VertxEventLoopGroup: io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopHolder findHolder(io.netty.channel.EventLoop)> ==> <io.vertx.core.json.JsonArray$Iter: java.lang.Object next()>
INTERFACE edge: $r6 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.VertxEventLoopGroup: io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopHolder findHolder(io.netty.channel.EventLoop)> ==> <io.vertx.core.json.JsonObject$Iter: java.lang.Object next()>
INTERFACE edge: $r6 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.VertxEventLoopGroup: io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopHolder findHolder(io.netty.channel.EventLoop)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: java.lang.Object next()>
INTERFACE edge: $r6 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.VertxEventLoopGroup: io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopHolder findHolder(io.netty.channel.EventLoop)> ==> <java.util.Scanner: java.lang.Object next()>
INTERFACE edge: $r6 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.VertxEventLoopGroup: io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopHolder findHolder(io.netty.channel.EventLoop)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: java.lang.Object next()>
INTERFACE edge: $r6 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.VertxEventLoopGroup: io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopHolder findHolder(io.netty.channel.EventLoop)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: java.lang.Object next()>
VIRTUAL edge: $z1 = virtualinvoke r7.<io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopHolder: boolean equals(java.lang.Object)>($r0) in <io.vertx.core.net.impl.VertxEventLoopGroup: io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopHolder findHolder(io.netty.channel.EventLoop)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopHolder: boolean equals(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelFuture write(java.lang.Object)>(r1) in <io.vertx.core.net.impl.PartialPooledByteBufAllocator$PooledChannelHandlerContext: io.netty.channel.ChannelFuture write(java.lang.Object)> ==> <io.vertx.core.net.impl.PartialPooledByteBufAllocator$PooledChannelHandlerContext: io.netty.channel.ChannelFuture write(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext flush()>() in <io.vertx.core.net.impl.PartialPooledByteBufAllocator$PooledChannelHandlerContext: io.netty.channel.ChannelHandlerContext flush()> ==> <io.vertx.core.net.impl.PartialPooledByteBufAllocator$PooledChannelHandlerContext: io.netty.channel.ChannelHandlerContext flush()>
INTERFACE edge: interfaceinvoke $r1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext flush()>() in <io.vertx.core.net.impl.PartialPooledByteBufAllocator$PooledChannelHandlerContext: io.netty.channel.ChannelHandlerContext flush()> ==> <io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext flush()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.impl.TaskQueue$Task: void <init>(java.lang.Runnable,java.util.concurrent.Executor)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.impl.WorkerContext$lambda_wrapTask_0__75: void <init>(io.vertx.core.impl.WorkerContext,io.vertx.core.spi.metrics.PoolMetrics,java.lang.Object,java.lang.Object,io.vertx.core.Handler)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.logging.Log4jLogDelegate: void log(org.apache.log4j.Level,java.lang.Object,java.lang.Throwable)>($r3, r1, r2) in <io.vertx.core.logging.Log4jLogDelegate: void warn(java.lang.Object,java.lang.Throwable)> ==> <io.vertx.core.logging.Log4jLogDelegate: void log(org.apache.log4j.Level,java.lang.Object,java.lang.Throwable)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable)>(30, r1, r2) in <io.vertx.core.logging.SLF4JLogDelegate: void warn(java.lang.Object,java.lang.Throwable)> ==> <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object,java.lang.Throwable)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable)>($r3, r1, r2) in <io.vertx.core.logging.JULLogDelegate: void warn(java.lang.Object,java.lang.Throwable)> ==> <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object,java.lang.Throwable)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.logging.Log4j2LogDelegate: void log(org.apache.logging.log4j.Level,java.lang.Object,java.lang.Throwable)>($r3, r1, r2) in <io.vertx.core.logging.Log4j2LogDelegate: void warn(java.lang.Object,java.lang.Throwable)> ==> <io.vertx.core.logging.Log4j2LogDelegate: void log(org.apache.logging.log4j.Level,java.lang.Object,java.lang.Throwable)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: boolean containsKey(java.lang.Object)>(r1) in <io.vertx.core.shareddata.impl.LocalMapImpl: boolean containsKey(java.lang.Object)> ==> <java.util.concurrent.ConcurrentHashMap: boolean containsKey(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.spi.logging.LogDelegate: void trace(java.lang.Object)>(r1) in <io.vertx.core.logging.Logger: void trace(java.lang.Object)> ==> <io.vertx.core.logging.Log4jLogDelegate: void trace(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.spi.logging.LogDelegate: void trace(java.lang.Object)>(r1) in <io.vertx.core.logging.Logger: void trace(java.lang.Object)> ==> <io.vertx.core.logging.SLF4JLogDelegate: void trace(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.spi.logging.LogDelegate: void trace(java.lang.Object)>(r1) in <io.vertx.core.logging.Logger: void trace(java.lang.Object)> ==> <io.vertx.core.logging.JULLogDelegate: void trace(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.spi.logging.LogDelegate: void trace(java.lang.Object)>(r1) in <io.vertx.core.logging.Logger: void trace(java.lang.Object)> ==> <io.vertx.core.logging.Log4j2LogDelegate: void trace(java.lang.Object)>
CLINIT edge: $r2 = <java.util.logging.Level: java.util.logging.Level FINEST> in <io.vertx.core.logging.JULLogDelegate: void trace(java.lang.Object)> ==> <java.util.logging.Level: void <clinit>()>
INTERFACE edge: r33 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)> ==> <java.util.AbstractList: java.util.Iterator iterator()>
INTERFACE edge: r33 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r33 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
INTERFACE edge: r33 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r33.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r33.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)> ==> <io.vertx.core.json.JsonArray$Iter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r33.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)> ==> <io.vertx.core.json.JsonObject$Iter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r33.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r33.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)> ==> <java.util.Scanner: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r33.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r33.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: boolean hasNext()>
INTERFACE edge: $r24 = interfaceinvoke r33.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object next()>
INTERFACE edge: $r24 = interfaceinvoke r33.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)> ==> <io.vertx.core.json.JsonArray$Iter: java.lang.Object next()>
INTERFACE edge: $r24 = interfaceinvoke r33.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)> ==> <io.vertx.core.json.JsonObject$Iter: java.lang.Object next()>
INTERFACE edge: $r24 = interfaceinvoke r33.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: java.lang.Object next()>
INTERFACE edge: $r24 = interfaceinvoke r33.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)> ==> <java.util.Scanner: java.lang.Object next()>
INTERFACE edge: $r24 = interfaceinvoke r33.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: java.lang.Object next()>
INTERFACE edge: $r24 = interfaceinvoke r33.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: java.lang.Object next()>
VIRTUAL edge: $r25 = virtualinvoke r2.<java.io.File: java.lang.String getAbsolutePath()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)> ==> <java.io.File: java.lang.String getAbsolutePath()>
VIRTUAL edge: $r27 = virtualinvoke r2.<java.io.File: java.lang.String getAbsolutePath()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)> ==> <java.io.File: java.lang.String getAbsolutePath()>
VIRTUAL edge: r31 = virtualinvoke r2.<java.io.File: java.lang.String getAbsolutePath()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)> ==> <java.io.File: java.lang.String getAbsolutePath()>
VIRTUAL edge: $r29 = virtualinvoke r2.<java.io.File: java.lang.String getAbsolutePath()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)> ==> <java.io.File: java.lang.String getAbsolutePath()>
VIRTUAL edge: $r18 = virtualinvoke r2.<java.io.File: java.lang.String getAbsolutePath()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)> ==> <java.io.File: java.lang.String getAbsolutePath()>
VIRTUAL edge: $r3 = virtualinvoke r2.<java.io.File: java.lang.String getAbsolutePath()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)> ==> <java.io.File: java.lang.String getAbsolutePath()>
VIRTUAL edge: $r12 = virtualinvoke r2.<java.io.File: java.lang.String getAbsolutePath()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)> ==> <java.io.File: java.lang.String getAbsolutePath()>
VIRTUAL edge: $r8 = virtualinvoke r2.<java.io.File: java.lang.String getAbsolutePath()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)> ==> <java.io.File: java.lang.String getAbsolutePath()>
VIRTUAL edge: $r26 = virtualinvoke r34.<java.io.File: java.lang.String getAbsolutePath()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)> ==> <java.io.File: java.lang.String getAbsolutePath()>
VIRTUAL edge: $r28 = virtualinvoke r34.<java.io.File: java.lang.String getAbsolutePath()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)> ==> <java.io.File: java.lang.String getAbsolutePath()>
VIRTUAL edge: $r30 = virtualinvoke r34.<java.io.File: java.lang.String getAbsolutePath()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)> ==> <java.io.File: java.lang.String getAbsolutePath()>
VIRTUAL edge: $z6 = virtualinvoke $r25.<java.lang.String: boolean startsWith(java.lang.String)>($r26) in <io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)> ==> <java.lang.String: boolean startsWith(java.lang.String)>
VIRTUAL edge: $z7 = virtualinvoke $r27.<java.lang.String: boolean equals(java.lang.Object)>($r28) in <io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $i2 = virtualinvoke $r30.<java.lang.String: int length()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)> ==> <java.lang.String: int length()>
VIRTUAL edge: r31 = virtualinvoke $r29.<java.lang.String: java.lang.String substring(int)>($i3) in <io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)> ==> <java.lang.String: java.lang.String substring(int)>
SPECIAL edge: specialinvoke $r15.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("A change in ") in <io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) in <io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has been detected, but the file does not belong to a watched roots: ") in <io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r21) in <io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r16.<io.vertx.core.logging.Logger: void warn(java.lang.Object)>($r23) in <io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)> ==> <io.vertx.core.logging.Logger: void warn(java.lang.Object)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.io.File: java.lang.String getAbsolutePath()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)> ==> <java.io.File: java.lang.String getAbsolutePath()>
VIRTUAL edge: $z1 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>($r5) in <io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)> ==> <java.lang.String: boolean startsWith(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.io.File: java.lang.String getAbsolutePath()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)> ==> <java.io.File: java.lang.String getAbsolutePath()>
VIRTUAL edge: $i0 = virtualinvoke $r14.<java.lang.String: int length()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)> ==> <java.lang.String: int length()>
VIRTUAL edge: r32 = virtualinvoke $r12.<java.lang.String: java.lang.String substring(int)>($i1) in <io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)> ==> <java.lang.String: java.lang.String substring(int)>
INTERFACE edge: r35 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)> ==> <java.util.AbstractList: java.util.Iterator iterator()>
INTERFACE edge: r35 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r35 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
INTERFACE edge: r35 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z8 = interfaceinvoke r35.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: boolean hasNext()>
INTERFACE edge: $z8 = interfaceinvoke r35.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)> ==> <io.vertx.core.json.JsonArray$Iter: boolean hasNext()>
INTERFACE edge: $z8 = interfaceinvoke r35.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)> ==> <io.vertx.core.json.JsonObject$Iter: boolean hasNext()>
INTERFACE edge: $z8 = interfaceinvoke r35.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: boolean hasNext()>
INTERFACE edge: $z8 = interfaceinvoke r35.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)> ==> <java.util.Scanner: boolean hasNext()>
INTERFACE edge: $z8 = interfaceinvoke r35.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: boolean hasNext()>
INTERFACE edge: $z8 = interfaceinvoke r35.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: boolean hasNext()>
INTERFACE edge: $r7 = interfaceinvoke r35.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object next()>
INTERFACE edge: $r7 = interfaceinvoke r35.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)> ==> <io.vertx.core.json.JsonArray$Iter: java.lang.Object next()>
INTERFACE edge: $r7 = interfaceinvoke r35.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)> ==> <io.vertx.core.json.JsonObject$Iter: java.lang.Object next()>
INTERFACE edge: $r7 = interfaceinvoke r35.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: java.lang.Object next()>
INTERFACE edge: $r7 = interfaceinvoke r35.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)> ==> <java.util.Scanner: java.lang.Object next()>
INTERFACE edge: $r7 = interfaceinvoke r35.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: java.lang.Object next()>
INTERFACE edge: $r7 = interfaceinvoke r35.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: java.lang.Object next()>
INTERFACE edge: interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1) in <io.vertx.core.impl.launcher.commands.Watcher: void addFileToWatchedList(java.io.File)> ==> <java.util.HashSet: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1) in <io.vertx.core.impl.launcher.commands.Watcher: void addFileToWatchedList(java.io.File)> ==> <java.util.AbstractCollection: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1) in <io.vertx.core.impl.launcher.commands.Watcher: void addFileToWatchedList(java.io.File)> ==> <io.vertx.core.impl.ConcurrentHashSet: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1) in <io.vertx.core.impl.launcher.commands.Watcher: void addFileToWatchedList(java.io.File)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$1: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1) in <io.vertx.core.impl.launcher.commands.Watcher: void addFileToWatchedList(java.io.File)> ==> <java.util.TreeSet: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<java.util.HashMap: void <init>()>() in <io.vertx.core.impl.launcher.commands.Watcher: void addFileToWatchedList(java.io.File)> ==> <java.util.HashMap: void <init>()>
INTERFACE edge: interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r11, $r12) in <io.vertx.core.impl.launcher.commands.Watcher: void addFileToWatchedList(java.io.File)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r5) in <io.vertx.core.impl.launcher.commands.Watcher: void addFileToWatchedList(java.io.File)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke r1.<java.io.File: boolean isDirectory()>() in <io.vertx.core.impl.launcher.commands.Watcher: void addFileToWatchedList(java.io.File)> ==> <java.io.File: boolean isDirectory()>
VIRTUAL edge: r9 = virtualinvoke r1.<java.io.File: java.io.File[] listFiles()>() in <io.vertx.core.impl.launcher.commands.Watcher: void addFileToWatchedList(java.io.File)> ==> <java.io.File: java.io.File[] listFiles()>
VIRTUAL edge: $l0 = virtualinvoke r1.<java.io.File: long lastModified()>() in <io.vertx.core.impl.launcher.commands.Watcher: void addFileToWatchedList(java.io.File)> ==> <java.io.File: long lastModified()>
VIRTUAL edge: $l1 = virtualinvoke r1.<java.io.File: long length()>() in <io.vertx.core.impl.launcher.commands.Watcher: void addFileToWatchedList(java.io.File)> ==> <java.io.File: long length()>
VIRTUAL edge: $l3 = virtualinvoke r11.<java.io.File: long lastModified()>() in <io.vertx.core.impl.launcher.commands.Watcher: void addFileToWatchedList(java.io.File)> ==> <java.io.File: long lastModified()>
VIRTUAL edge: $l4 = virtualinvoke r11.<java.io.File: long length()>() in <io.vertx.core.impl.launcher.commands.Watcher: void addFileToWatchedList(java.io.File)> ==> <java.io.File: long length()>
VIRTUAL edge: $z2 = virtualinvoke r11.<java.io.File: boolean isDirectory()>() in <io.vertx.core.impl.launcher.commands.Watcher: void addFileToWatchedList(java.io.File)> ==> <java.io.File: boolean isDirectory()>
SPECIAL edge: specialinvoke $r12.<io.vertx.core.impl.launcher.commands.Watcher$FileInfo: void <init>(long,long,io.vertx.core.impl.launcher.commands.Watcher$1)>($l3, $l4, null) in <io.vertx.core.impl.launcher.commands.Watcher: void addFileToWatchedList(java.io.File)> ==> <io.vertx.core.impl.launcher.commands.Watcher$FileInfo: void <init>(long,long,io.vertx.core.impl.launcher.commands.Watcher$1)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.impl.launcher.commands.Watcher: void addFileToWatchedList(java.io.File)>(r11) in <io.vertx.core.impl.launcher.commands.Watcher: void addFileToWatchedList(java.io.File)> ==> <io.vertx.core.impl.launcher.commands.Watcher: void addFileToWatchedList(java.io.File)>
SPECIAL edge: specialinvoke $r5.<io.vertx.core.impl.launcher.commands.Watcher$FileInfo: void <init>(long,long,io.vertx.core.impl.launcher.commands.Watcher$1)>($l0, $l1, null) in <io.vertx.core.impl.launcher.commands.Watcher: void addFileToWatchedList(java.io.File)> ==> <io.vertx.core.impl.launcher.commands.Watcher$FileInfo: void <init>(long,long,io.vertx.core.impl.launcher.commands.Watcher$1)>
INTERFACE edge: interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r3) in <io.vertx.core.impl.launcher.commands.Watcher: void addFileToWatchedList(java.io.File)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r3) in <io.vertx.core.impl.launcher.commands.Watcher: void addFileToWatchedList(java.io.File)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r3) in <io.vertx.core.impl.launcher.commands.Watcher: void addFileToWatchedList(java.io.File)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r3) in <io.vertx.core.impl.launcher.commands.Watcher: void addFileToWatchedList(java.io.File)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r3) in <io.vertx.core.impl.launcher.commands.Watcher: void addFileToWatchedList(java.io.File)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r3) in <io.vertx.core.impl.launcher.commands.Watcher: void addFileToWatchedList(java.io.File)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r3) in <io.vertx.core.impl.launcher.commands.Watcher: void addFileToWatchedList(java.io.File)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r3) in <io.vertx.core.impl.launcher.commands.Watcher: void addFileToWatchedList(java.io.File)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r3) in <io.vertx.core.impl.launcher.commands.Watcher: void addFileToWatchedList(java.io.File)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r3) in <io.vertx.core.impl.launcher.commands.Watcher: void addFileToWatchedList(java.io.File)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.impl.launcher.commands.Watcher$FileInfo: void <init>(long,long)>(l0, l1) in <io.vertx.core.impl.launcher.commands.Watcher$FileInfo: void <init>(long,long,io.vertx.core.impl.launcher.commands.Watcher$1)> ==> <io.vertx.core.impl.launcher.commands.Watcher$FileInfo: void <init>(long,long)>
VIRTUAL edge: $z0 = virtualinvoke $r0.<java.lang.String: boolean contains(java.lang.CharSequence)>("windows") in <io.vertx.core.impl.launcher.commands.ExecUtils: boolean isWindows()> ==> <java.lang.String: boolean contains(java.lang.CharSequence)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>(r1) in <io.vertx.core.impl.launcher.commands.FileSelector: boolean separatorPatternStartSlashMismatch(java.lang.String,java.lang.String,java.lang.String)> ==> <java.lang.String: boolean startsWith(java.lang.String)>
VIRTUAL edge: $z1 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String)>(r1) in <io.vertx.core.impl.launcher.commands.FileSelector: boolean separatorPatternStartSlashMismatch(java.lang.String,java.lang.String,java.lang.String)> ==> <java.lang.String: boolean startsWith(java.lang.String)>
VIRTUAL edge: $z8 = virtualinvoke r10.<java.lang.String: boolean equals(java.lang.Object)>("**") in <io.vertx.core.impl.launcher.commands.FileSelector: boolean matchPathPattern(java.lang.String[],java.lang.String[],boolean)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z7 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>("**") in <io.vertx.core.impl.launcher.commands.FileSelector: boolean matchPathPattern(java.lang.String[],java.lang.String[],boolean)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z5 = virtualinvoke r11.<java.lang.String: boolean equals(java.lang.Object)>("**") in <io.vertx.core.impl.launcher.commands.FileSelector: boolean matchPathPattern(java.lang.String[],java.lang.String[],boolean)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z4 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("**") in <io.vertx.core.impl.launcher.commands.FileSelector: boolean matchPathPattern(java.lang.String[],java.lang.String[],boolean)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z3 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("**") in <io.vertx.core.impl.launcher.commands.FileSelector: boolean matchPathPattern(java.lang.String[],java.lang.String[],boolean)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("**") in <io.vertx.core.impl.launcher.commands.FileSelector: boolean matchPathPattern(java.lang.String[],java.lang.String[],boolean)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.util.ArrayList: void <init>()>() in <io.vertx.core.impl.launcher.commands.FileSelector: java.lang.String[] tokenizePathToString(java.lang.String,java.lang.String)> ==> <java.util.ArrayList: void <init>()>
INTERFACE edge: interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r9) in <io.vertx.core.impl.launcher.commands.FileSelector: java.lang.String[] tokenizePathToString(java.lang.String,java.lang.String)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: $i0 = interfaceinvoke $r0.<java.util.List: int size()>() in <io.vertx.core.impl.launcher.commands.FileSelector: java.lang.String[] tokenizePathToString(java.lang.String,java.lang.String)> ==> <java.util.ArrayList: int size()>
INTERFACE edge: $r7 = interfaceinvoke $r0.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r6) in <io.vertx.core.impl.launcher.commands.FileSelector: java.lang.String[] tokenizePathToString(java.lang.String,java.lang.String)> ==> <java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>
SPECIAL edge: specialinvoke $r2.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r3, r4) in <io.vertx.core.impl.launcher.commands.FileSelector: java.lang.String[] tokenizePathToString(java.lang.String,java.lang.String)> ==> <java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.util.StringTokenizer: boolean hasMoreTokens()>() in <io.vertx.core.impl.launcher.commands.FileSelector: java.lang.String[] tokenizePathToString(java.lang.String,java.lang.String)> ==> <java.util.StringTokenizer: boolean hasMoreTokens()>
VIRTUAL edge: $r9 = virtualinvoke $r2.<java.util.StringTokenizer: java.lang.String nextToken()>() in <io.vertx.core.impl.launcher.commands.FileSelector: java.lang.String[] tokenizePathToString(java.lang.String,java.lang.String)> ==> <java.util.StringTokenizer: java.lang.String nextToken()>
VIRTUAL edge: r1 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>() in <io.vertx.core.impl.launcher.commands.FileSelector: boolean match(java.lang.String,java.lang.String,boolean)> ==> <java.lang.String: char[] toCharArray()>
VIRTUAL edge: r3 = virtualinvoke r2.<java.lang.String: char[] toCharArray()>() in <io.vertx.core.impl.launcher.commands.FileSelector: boolean match(java.lang.String,java.lang.String,boolean)> ==> <java.lang.String: char[] toCharArray()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char toLowerCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char toUpperCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.impl.launcher.commands.Watcher$lambda_trigger_4__76: void <init>(io.vertx.core.impl.launcher.commands.Watcher,long)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void interrupt()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.file.impl.FileResolver$lambda_null_0__77: void <init>(io.vertx.core.file.impl.FileResolver,java.util.concurrent.CountDownLatch)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r0.<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>($r2) in <io.vertx.core.impl.ContextImpl: void setTCCL()> ==> <java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>
VIRTUAL edge: $r6 = virtualinvoke $r4.<io.vertx.core.eventbus.impl.HandlerRegistration: java.lang.Object getMetric()>() in <io.vertx.core.eventbus.impl.HandlerHolder: boolean setRemoved()> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: java.lang.Object getMetric()>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.spi.metrics.EventBusMetrics: void handlerUnregistered(java.lang.Object)>($r6) in <io.vertx.core.eventbus.impl.HandlerHolder: boolean setRemoved()> ==> <io.vertx.core.spi.metrics.EventBusMetrics: void handlerUnregistered(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry: void <init>(io.vertx.core.eventbus.impl.EventBusImpl,java.lang.String,io.vertx.core.eventbus.impl.HandlerRegistration)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.impl.VertxInternal: void runOnContext(io.vertx.core.Handler)>($r3) in <io.vertx.core.eventbus.impl.EventBusImpl: void callCompletionHandlerAsync(io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl: void runOnContext(io.vertx.core.Handler)>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.eventbus.impl.EventBusImpl$lambda_callCompletionHandlerAsync_4__97: void <init>(io.vertx.core.Handler)>($r0) in <io.vertx.core.eventbus.impl.EventBusImpl$lambda_callCompletionHandlerAsync_4__97: io.vertx.core.Handler bootstrap$(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_callCompletionHandlerAsync_4__97: void <init>(io.vertx.core.Handler)>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_removeSub_14__98: void <init>(io.vertx.core.Handler)>($r0) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_removeSub_14__98: io.vertx.core.Handler bootstrap$(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_removeSub_14__98: void <init>(io.vertx.core.Handler)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.eventbus.impl.EventBusImpl$lambda_removeLocalRegistration_2__78: void <init>(io.vertx.core.eventbus.impl.HandlerHolder)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.impl.verticle.PackageHelper: void <init>(java.lang.ClassLoader)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int indexOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int indexOf(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>() in <io.vertx.core.net.impl.VertxEventLoopGroup$1: boolean add(io.netty.util.concurrent.EventExecutor)> ==> <java.lang.UnsupportedOperationException: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<io.vertx.core.impl.WorkerPool: java.util.concurrent.ExecutorService executor()>() in <io.vertx.core.impl.VertxImpl: java.util.concurrent.ExecutorService getWorkerPool()> ==> <io.vertx.core.impl.WorkerPool: java.util.concurrent.ExecutorService executor()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.file.impl.AsyncFileImpl$lambda_new_0__96: void <init>(io.vertx.core.file.impl.AsyncFileImpl)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r1) in <io.vertx.core.logging.JULLogDelegate: boolean isDebugEnabled()> ==> <java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.logging.Log4jLogDelegate: void log(org.apache.log4j.Level,java.lang.Object)>($r2, r1) in <io.vertx.core.logging.Log4jLogDelegate: void debug(java.lang.Object)> ==> <io.vertx.core.logging.Log4jLogDelegate: void log(org.apache.log4j.Level,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object)>(10, r1) in <io.vertx.core.logging.SLF4JLogDelegate: void debug(java.lang.Object)> ==> <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object)>($r2, r1) in <io.vertx.core.logging.JULLogDelegate: void debug(java.lang.Object)> ==> <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.logging.Log4j2LogDelegate: void log(org.apache.logging.log4j.Level,java.lang.Object)>($r2, r1) in <io.vertx.core.logging.Log4j2LogDelegate: void debug(java.lang.Object)> ==> <io.vertx.core.logging.Log4j2LogDelegate: void log(org.apache.logging.log4j.Level,java.lang.Object)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<io.netty.channel.ChannelHandlerContext: io.netty.util.concurrent.EventExecutor executor()>() in <io.vertx.core.net.impl.ConnectionBase: void writeToChannel(java.lang.Object,io.netty.channel.ChannelPromise)> ==> <io.vertx.core.net.impl.PartialPooledByteBufAllocator$PooledChannelHandlerContext: io.netty.util.concurrent.EventExecutor executor()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.impl.ConnectionBase: void write(java.lang.Object,io.netty.channel.ChannelPromise)>(r3, r4) in <io.vertx.core.net.impl.ConnectionBase: void writeToChannel(java.lang.Object,io.netty.channel.ChannelPromise)> ==> <io.vertx.core.net.impl.ConnectionBase: void write(java.lang.Object,io.netty.channel.ChannelPromise)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.impl.ConnectionBase: void queueForWrite(java.lang.Object,io.netty.channel.ChannelPromise)>(r3, r4) in <io.vertx.core.net.impl.ConnectionBase: void writeToChannel(java.lang.Object,io.netty.channel.ChannelPromise)> ==> <io.vertx.core.net.impl.ConnectionBase: void queueForWrite(java.lang.Object,io.netty.channel.ChannelPromise)>
STATIC edge: $r4 = staticinvoke <io.vertx.core.net.impl.ConnectionBase$lambda_queueForWrite_0__117: io.vertx.core.Handler bootstrap$(io.vertx.core.net.impl.ConnectionBase,java.lang.Object,io.netty.channel.ChannelPromise)>(r0, r1, r2) in <io.vertx.core.net.impl.ConnectionBase: void queueForWrite(java.lang.Object,io.netty.channel.ChannelPromise)> ==> <io.vertx.core.net.impl.ConnectionBase$lambda_queueForWrite_0__117: io.vertx.core.Handler bootstrap$(io.vertx.core.net.impl.ConnectionBase,java.lang.Object,io.netty.channel.ChannelPromise)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.http.impl.Http1xServerConnection: void reportBytesWritten(java.lang.Object)>(r1) in <io.vertx.core.http.impl.Http1xServerConnection: void writeToChannel(java.lang.Object,io.netty.channel.ChannelPromise)> ==> <io.vertx.core.http.impl.Http1xServerConnection: void reportBytesWritten(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.http.impl.Http1xConnectionBase: void writeToChannel(java.lang.Object,io.netty.channel.ChannelPromise)>(r1, r2) in <io.vertx.core.http.impl.Http1xServerConnection: void writeToChannel(java.lang.Object,io.netty.channel.ChannelPromise)> ==> <io.vertx.core.net.impl.ConnectionBase: void writeToChannel(java.lang.Object,io.netty.channel.ChannelPromise)>
CLINIT edge: $r4 = <io.vertx.core.http.impl.Http1xServerConnection: io.vertx.core.logging.Logger log> in <io.vertx.core.http.impl.Http1xServerConnection: void reportBytesWritten(java.lang.Object)> ==> <io.vertx.core.http.impl.Http1xServerConnection: void <clinit>()>
CLINIT edge: $r4 = <io.vertx.core.http.impl.Http1xServerConnection: io.vertx.core.logging.Logger log> in <io.vertx.core.http.impl.Http1xServerConnection: void reportBytesWritten(java.lang.Object)> ==> <io.vertx.core.net.impl.ConnectionBase: void <clinit>()>
CLINIT edge: $r0 = staticinvoke <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/http/impl/Http1xServerConnection;") in <io.vertx.core.http.impl.Http1xServerConnection: void <clinit>()> ==> <io.vertx.core.logging.LoggerFactory: void <clinit>()>
STATIC edge: $r0 = staticinvoke <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/http/impl/Http1xServerConnection;") in <io.vertx.core.http.impl.Http1xServerConnection: void <clinit>()> ==> <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>
CLINIT edge: <io.vertx.core.http.impl.Http1xServerConnection: io.vertx.core.logging.Logger log> = $r0 in <io.vertx.core.http.impl.Http1xServerConnection: void <clinit>()> ==> <io.vertx.core.net.impl.ConnectionBase: void <clinit>()>
CLINIT edge: <io.vertx.core.http.impl.Http1xServerConnection: io.vertx.core.logging.Logger log> = $r0 in <io.vertx.core.http.impl.Http1xServerConnection: void <clinit>()> ==> <io.vertx.core.http.impl.Http1xServerConnection: void <clinit>()>
CLINIT edge: <io.vertx.core.net.impl.ConnectionBase: boolean $assertionsDisabled> = $z1 in <io.vertx.core.net.impl.ConnectionBase: void <clinit>()> ==> <io.vertx.core.net.impl.ConnectionBase: void <clinit>()>
STATIC edge: $r2 = staticinvoke <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/net/impl/ConnectionBase;") in <io.vertx.core.net.impl.ConnectionBase: void <clinit>()> ==> <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>
CLINIT edge: $r2 = staticinvoke <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/net/impl/ConnectionBase;") in <io.vertx.core.net.impl.ConnectionBase: void <clinit>()> ==> <io.vertx.core.logging.LoggerFactory: void <clinit>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<io.netty.handler.codec.http.HttpHeaders: java.util.List entries()>() in <io.vertx.core.http.impl.HeadersAdaptor: java.util.List entries()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders: java.util.List entries()>
VIRTUAL edge: $r3 = virtualinvoke r0.<io.vertx.core.eventbus.impl.codecs.PingMessageCodec: java.lang.String transform(java.lang.String)>($r2) in <io.vertx.core.eventbus.impl.codecs.PingMessageCodec: java.lang.Object transform(java.lang.Object)> ==> <io.vertx.core.eventbus.impl.codecs.PingMessageCodec: java.lang.String transform(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r0.<io.vertx.core.eventbus.impl.codecs.IntMessageCodec: java.lang.Integer transform(java.lang.Integer)>($r2) in <io.vertx.core.eventbus.impl.codecs.IntMessageCodec: java.lang.Object transform(java.lang.Object)> ==> <io.vertx.core.eventbus.impl.codecs.IntMessageCodec: java.lang.Integer transform(java.lang.Integer)>
VIRTUAL edge: $r3 = virtualinvoke r0.<io.vertx.core.eventbus.impl.codecs.ShortMessageCodec: java.lang.Short transform(java.lang.Short)>($r2) in <io.vertx.core.eventbus.impl.codecs.ShortMessageCodec: java.lang.Object transform(java.lang.Object)> ==> <io.vertx.core.eventbus.impl.codecs.ShortMessageCodec: java.lang.Short transform(java.lang.Short)>
VIRTUAL edge: $r3 = virtualinvoke r0.<io.vertx.core.eventbus.impl.codecs.ByteArrayMessageCodec: byte[] transform(byte[])>($r2) in <io.vertx.core.eventbus.impl.codecs.ByteArrayMessageCodec: java.lang.Object transform(java.lang.Object)> ==> <io.vertx.core.eventbus.impl.codecs.ByteArrayMessageCodec: byte[] transform(byte[])>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r1, 0, $i1) in <io.vertx.core.eventbus.impl.codecs.ByteArrayMessageCodec: byte[] transform(byte[])> ==> <java.lang.System: void <clinit>()>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r1, 0, $i1) in <io.vertx.core.eventbus.impl.codecs.ByteArrayMessageCodec: byte[] transform(byte[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
VIRTUAL edge: $r3 = virtualinvoke r0.<io.vertx.core.eventbus.impl.codecs.NullMessageCodec: java.lang.String transform(java.lang.String)>($r2) in <io.vertx.core.eventbus.impl.codecs.NullMessageCodec: java.lang.Object transform(java.lang.Object)> ==> <io.vertx.core.eventbus.impl.codecs.NullMessageCodec: java.lang.String transform(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r0.<io.vertx.core.eventbus.impl.codecs.StringMessageCodec: java.lang.String transform(java.lang.String)>($r2) in <io.vertx.core.eventbus.impl.codecs.StringMessageCodec: java.lang.Object transform(java.lang.Object)> ==> <io.vertx.core.eventbus.impl.codecs.StringMessageCodec: java.lang.String transform(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r0.<io.vertx.core.eventbus.impl.codecs.JsonObjectMessageCodec: io.vertx.core.json.JsonObject transform(io.vertx.core.json.JsonObject)>($r2) in <io.vertx.core.eventbus.impl.codecs.JsonObjectMessageCodec: java.lang.Object transform(java.lang.Object)> ==> <io.vertx.core.eventbus.impl.codecs.JsonObjectMessageCodec: io.vertx.core.json.JsonObject transform(io.vertx.core.json.JsonObject)>
VIRTUAL edge: $r3 = virtualinvoke r0.<io.vertx.core.eventbus.impl.codecs.ReplyExceptionMessageCodec: io.vertx.core.eventbus.ReplyException transform(io.vertx.core.eventbus.ReplyException)>($r2) in <io.vertx.core.eventbus.impl.codecs.ReplyExceptionMessageCodec: java.lang.Object transform(java.lang.Object)> ==> <io.vertx.core.eventbus.impl.codecs.ReplyExceptionMessageCodec: io.vertx.core.eventbus.ReplyException transform(io.vertx.core.eventbus.ReplyException)>
VIRTUAL edge: $r3 = virtualinvoke r0.<io.vertx.core.eventbus.impl.codecs.JsonArrayMessageCodec: io.vertx.core.json.JsonArray transform(io.vertx.core.json.JsonArray)>($r2) in <io.vertx.core.eventbus.impl.codecs.JsonArrayMessageCodec: java.lang.Object transform(java.lang.Object)> ==> <io.vertx.core.eventbus.impl.codecs.JsonArrayMessageCodec: io.vertx.core.json.JsonArray transform(io.vertx.core.json.JsonArray)>
VIRTUAL edge: $r3 = virtualinvoke r0.<io.vertx.core.eventbus.impl.codecs.BufferMessageCodec: io.vertx.core.buffer.Buffer transform(io.vertx.core.buffer.Buffer)>($r2) in <io.vertx.core.eventbus.impl.codecs.BufferMessageCodec: java.lang.Object transform(java.lang.Object)> ==> <io.vertx.core.eventbus.impl.codecs.BufferMessageCodec: io.vertx.core.buffer.Buffer transform(io.vertx.core.buffer.Buffer)>
VIRTUAL edge: $r3 = virtualinvoke r0.<io.vertx.core.eventbus.impl.codecs.DoubleMessageCodec: java.lang.Double transform(java.lang.Double)>($r2) in <io.vertx.core.eventbus.impl.codecs.DoubleMessageCodec: java.lang.Object transform(java.lang.Object)> ==> <io.vertx.core.eventbus.impl.codecs.DoubleMessageCodec: java.lang.Double transform(java.lang.Double)>
VIRTUAL edge: $r3 = virtualinvoke r0.<io.vertx.core.eventbus.impl.codecs.FloatMessageCodec: java.lang.Float transform(java.lang.Float)>($r2) in <io.vertx.core.eventbus.impl.codecs.FloatMessageCodec: java.lang.Object transform(java.lang.Object)> ==> <io.vertx.core.eventbus.impl.codecs.FloatMessageCodec: java.lang.Float transform(java.lang.Float)>
VIRTUAL edge: $r3 = virtualinvoke r0.<io.vertx.core.eventbus.impl.codecs.BooleanMessageCodec: java.lang.Boolean transform(java.lang.Boolean)>($r2) in <io.vertx.core.eventbus.impl.codecs.BooleanMessageCodec: java.lang.Object transform(java.lang.Object)> ==> <io.vertx.core.eventbus.impl.codecs.BooleanMessageCodec: java.lang.Boolean transform(java.lang.Boolean)>
VIRTUAL edge: $r3 = virtualinvoke r0.<io.vertx.core.eventbus.impl.codecs.CharMessageCodec: java.lang.Character transform(java.lang.Character)>($r2) in <io.vertx.core.eventbus.impl.codecs.CharMessageCodec: java.lang.Object transform(java.lang.Object)> ==> <io.vertx.core.eventbus.impl.codecs.CharMessageCodec: java.lang.Character transform(java.lang.Character)>
VIRTUAL edge: $r3 = virtualinvoke r0.<io.vertx.core.eventbus.impl.codecs.ByteMessageCodec: java.lang.Byte transform(java.lang.Byte)>($r2) in <io.vertx.core.eventbus.impl.codecs.ByteMessageCodec: java.lang.Object transform(java.lang.Object)> ==> <io.vertx.core.eventbus.impl.codecs.ByteMessageCodec: java.lang.Byte transform(java.lang.Byte)>
VIRTUAL edge: $r3 = virtualinvoke r0.<io.vertx.core.eventbus.impl.codecs.LongMessageCodec: java.lang.Long transform(java.lang.Long)>($r2) in <io.vertx.core.eventbus.impl.codecs.LongMessageCodec: java.lang.Object transform(java.lang.Object)> ==> <io.vertx.core.eventbus.impl.codecs.LongMessageCodec: java.lang.Long transform(java.lang.Long)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.eventbus.impl.MessageImpl: void <init>(io.vertx.core.eventbus.impl.MessageImpl)>(r1) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void <init>(io.vertx.core.eventbus.impl.clustered.ClusteredMessage)> ==> <io.vertx.core.eventbus.impl.MessageImpl: void <init>(io.vertx.core.eventbus.impl.MessageImpl)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.util.ArrayDeque: boolean isEmpty()>() in <io.vertx.core.streams.impl.InboundBuffer: boolean isEmpty()> ==> <java.util.ArrayDeque: boolean isEmpty()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<io.vertx.core.http.impl.HttpServerImpl$HttpStreamHandler: io.vertx.core.Handler endHandler()>() in <io.vertx.core.http.impl.HttpServerImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.HttpServerImpl$HttpStreamHandler: io.vertx.core.Handler endHandler()>
VIRTUAL edge: $r30 = virtualinvoke $r29.<io.vertx.core.http.impl.HttpServerImpl$HttpStreamHandler: io.vertx.core.Handler endHandler()>() in <io.vertx.core.http.impl.HttpServerImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.HttpServerImpl$HttpStreamHandler: io.vertx.core.Handler endHandler()>
VIRTUAL edge: r34 = virtualinvoke $r3.<io.vertx.core.http.impl.HttpServerImpl$HttpStreamHandler: io.vertx.core.Handler endHandler()>() in <io.vertx.core.http.impl.HttpServerImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.HttpServerImpl$HttpStreamHandler: io.vertx.core.Handler endHandler()>
VIRTUAL edge: virtualinvoke $r4.<io.vertx.core.http.impl.HttpServerImpl$HttpStreamHandler: io.vertx.core.streams.ReadStream endHandler(io.vertx.core.Handler)>(null) in <io.vertx.core.http.impl.HttpServerImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.HttpServerImpl$HttpStreamHandler: io.vertx.core.streams.ReadStream endHandler(io.vertx.core.Handler)>
VIRTUAL edge: r35 = virtualinvoke $r6.<io.vertx.core.http.impl.HttpServerImpl$HttpStreamHandler: io.vertx.core.Handler endHandler()>() in <io.vertx.core.http.impl.HttpServerImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.HttpServerImpl$HttpStreamHandler: io.vertx.core.Handler endHandler()>
VIRTUAL edge: virtualinvoke $r7.<io.vertx.core.http.impl.HttpServerImpl$HttpStreamHandler: io.vertx.core.streams.ReadStream endHandler(io.vertx.core.Handler)>(null) in <io.vertx.core.http.impl.HttpServerImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.HttpServerImpl$HttpStreamHandler: io.vertx.core.streams.ReadStream endHandler(io.vertx.core.Handler)>
INTERFACE edge: r37 = interfaceinvoke $r36.<io.vertx.core.impl.VertxInternal: io.vertx.core.impl.ContextInternal getOrCreateContext()>() in <io.vertx.core.http.impl.HttpServerImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.ContextInternal getOrCreateContext()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.http.impl.HttpServerImpl: void executeCloseDone(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,java.lang.Exception)>(r37, r33, null) in <io.vertx.core.http.impl.HttpServerImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.HttpServerImpl: void executeCloseDone(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,java.lang.Exception)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.http.impl.HttpServerImpl: void executeCloseDone(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,java.lang.Exception)>(r37, r33, null) in <io.vertx.core.http.impl.HttpServerImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.HttpServerImpl: void executeCloseDone(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,java.lang.Exception)>
INTERFACE edge: $r11 = interfaceinvoke $r10.<io.vertx.core.impl.VertxInternal: java.util.Map sharedHttpServers()>() in <io.vertx.core.http.impl.HttpServerImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl: java.util.Map sharedHttpServers()>
VIRTUAL edge: $r19 = virtualinvoke $r17.<io.vertx.core.http.impl.HttpServerImpl$HttpStreamHandler: io.vertx.core.Handler handler()>() in <io.vertx.core.http.impl.HttpServerImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.HttpServerImpl$HttpStreamHandler: io.vertx.core.Handler handler()>
VIRTUAL edge: $r21 = virtualinvoke $r20.<io.vertx.core.http.impl.HttpServerImpl$HttpStreamHandler: io.vertx.core.Handler handler()>() in <io.vertx.core.http.impl.HttpServerImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.HttpServerImpl$HttpStreamHandler: io.vertx.core.Handler handler()>
SPECIAL edge: specialinvoke $r16.<io.vertx.core.http.impl.HttpHandlers: void <init>(io.vertx.core.http.impl.HttpServerImpl,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.Handler)>(r0, $r19, $r21, $r23, $r39) in <io.vertx.core.http.impl.HttpServerImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.HttpHandlers: void <init>(io.vertx.core.http.impl.HttpServerImpl,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.Handler)>
VIRTUAL edge: virtualinvoke $r18.<io.vertx.core.net.impl.HandlerManager: void removeHandler(java.lang.Object,io.vertx.core.impl.ContextInternal)>($r16, $r24) in <io.vertx.core.http.impl.HttpServerImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.HandlerManager: void removeHandler(java.lang.Object,io.vertx.core.impl.ContextInternal)>
VIRTUAL edge: $z0 = virtualinvoke $r26.<io.vertx.core.net.impl.HandlerManager: boolean hasHandlers()>() in <io.vertx.core.http.impl.HttpServerImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.HandlerManager: boolean hasHandlers()>
SPECIAL edge: specialinvoke $r27.<io.vertx.core.http.impl.HttpServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)>(r37, r33) in <io.vertx.core.http.impl.HttpServerImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.HttpServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)>
INTERFACE edge: interfaceinvoke $r14.<io.vertx.core.impl.ContextInternal: void removeCloseHook(io.vertx.core.Closeable)>(r0) in <io.vertx.core.http.impl.HttpServerImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.impl.ContextImpl: void removeCloseHook(io.vertx.core.Closeable)>
INTERFACE edge: interfaceinvoke $r14.<io.vertx.core.impl.ContextInternal: void removeCloseHook(io.vertx.core.Closeable)>(r0) in <io.vertx.core.http.impl.HttpServerImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.impl.EventLoopContext: void removeCloseHook(io.vertx.core.Closeable)>
CLINIT edge: $r6 = staticinvoke <io.vertx.core.Future: io.vertx.core.Future failedFuture(java.lang.Throwable)>(r1) in <io.vertx.core.http.impl.HttpServerImpl: void executeCloseDone(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,java.lang.Exception)> ==> <io.vertx.core.Future: void <clinit>()>
STATIC edge: $r4 = staticinvoke <io.vertx.core.http.impl.HttpServerImpl$lambda_executeCloseDone_18__109: io.vertx.core.Handler bootstrap$(io.vertx.core.Handler,io.vertx.core.Future)>(r0, $r6) in <io.vertx.core.http.impl.HttpServerImpl: void executeCloseDone(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,java.lang.Exception)> ==> <io.vertx.core.http.impl.HttpServerImpl$lambda_executeCloseDone_18__109: io.vertx.core.Handler bootstrap$(io.vertx.core.Handler,io.vertx.core.Future)>
STATIC edge: $r6 = staticinvoke <io.vertx.core.Future: io.vertx.core.Future succeededFuture()>() in <io.vertx.core.http.impl.HttpServerImpl: void executeCloseDone(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,java.lang.Exception)> ==> <io.vertx.core.Future: io.vertx.core.Future succeededFuture()>
STATIC edge: $r6 = staticinvoke <io.vertx.core.Future: io.vertx.core.Future failedFuture(java.lang.Throwable)>(r1) in <io.vertx.core.http.impl.HttpServerImpl: void executeCloseDone(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,java.lang.Exception)> ==> <io.vertx.core.Future: io.vertx.core.Future failedFuture(java.lang.Throwable)>
CLINIT edge: $r6 = staticinvoke <io.vertx.core.Future: io.vertx.core.Future succeededFuture()>() in <io.vertx.core.http.impl.HttpServerImpl: void executeCloseDone(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,java.lang.Exception)> ==> <io.vertx.core.Future: void <clinit>()>
STATIC edge: $r12 = staticinvoke <io.vertx.core.http.impl.HttpServerImpl$lambda_actualClose_17__110: io.netty.util.concurrent.GenericFutureListener bootstrap$(io.vertx.core.http.impl.HttpServerImpl,io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,io.netty.channel.group.ChannelGroupFuture)>(r0, r10, r11, r23) in <io.vertx.core.http.impl.HttpServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.HttpServerImpl$lambda_actualClose_17__110: io.netty.util.concurrent.GenericFutureListener bootstrap$(io.vertx.core.http.impl.HttpServerImpl,io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,io.netty.channel.group.ChannelGroupFuture)>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.impl.WorkerExecutorImpl: void close()>() in <io.vertx.core.impl.WorkerExecutorImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.impl.WorkerExecutorImpl: void close()>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.impl.WorkerExecutorImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.impl.DeploymentManager$lambda_doDeployVerticle_2__17: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.impl.WorkerExecutorImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.impl.WorkerExecutorImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.impl.FutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.impl.WorkerExecutorImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.impl.WorkerExecutorImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.impl.SucceededFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.impl.WorkerExecutorImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.impl.WorkerExecutorImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.impl.WorkerExecutorImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl$lambda_joinCluster_1__10: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.impl.WorkerExecutorImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.impl.WorkerExecutorImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.Starter$lambda_runVerticle_1__1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.impl.WorkerExecutorImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.impl.WorkerExecutorImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.impl.WorkerExecutorImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.impl.WorkerExecutorImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.Starter$lambda_startVertx_0__2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.impl.WorkerExecutorImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.impl.WorkerExecutorImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.impl.WorkerExecutorImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_start_3__19: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.impl.WorkerExecutorImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.impl.HAManager$lambda_doDeployVerticle_4__7: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.impl.WorkerExecutorImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_close_0__29: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.impl.WorkerExecutorImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.impl.WorkerExecutorImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.impl.WorkerExecutorImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.impl.WorkerExecutorImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.Starter$lambda_createLoggingHandler_2__3: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.impl.WorkerExecutorImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.impl.CompositeFutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.impl.WorkerExecutorImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.impl.WorkerExecutorImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_finalize_6__18: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.impl.WorkerExecutorImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.impl.WorkerExecutorImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl$lambda_init_0__9: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.impl.WorkerExecutorImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.impl.FailedFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.impl.WorkerExecutorImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<io.vertx.core.Handler: void handle(java.lang.Object)>($r2) in <io.vertx.core.impl.WorkerExecutorImpl: void close(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_close_5__30: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: java.lang.Object remove(java.lang.Object)>($r3) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void close(io.vertx.core.Handler)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.impl.VertxImpl$InternalTimerHandler: boolean cancel()>() in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void close(io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl$InternalTimerHandler: boolean cancel()>
INTERFACE edge: interfaceinvoke r5.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void close(io.vertx.core.Handler)> ==> <io.vertx.core.impl.DeploymentManager$lambda_doDeployVerticle_2__17: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r5.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void close(io.vertx.core.Handler)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r5.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void close(io.vertx.core.Handler)> ==> <io.vertx.core.impl.FutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r5.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void close(io.vertx.core.Handler)> ==> <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r5.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void close(io.vertx.core.Handler)> ==> <io.vertx.core.impl.SucceededFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r5.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void close(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r5.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void close(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r5.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void close(io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl$lambda_joinCluster_1__10: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r5.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void close(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r5.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void close(io.vertx.core.Handler)> ==> <io.vertx.core.Starter$lambda_runVerticle_1__1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r5.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void close(io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r5.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void close(io.vertx.core.Handler)> ==> <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r5.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void close(io.vertx.core.Handler)> ==> <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r5.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void close(io.vertx.core.Handler)> ==> <io.vertx.core.Starter$lambda_startVertx_0__2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r5.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void close(io.vertx.core.Handler)> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r5.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void close(io.vertx.core.Handler)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r5.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void close(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_start_3__19: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r5.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void close(io.vertx.core.Handler)> ==> <io.vertx.core.impl.HAManager$lambda_doDeployVerticle_4__7: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r5.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void close(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_close_0__29: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r5.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void close(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r5.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void close(io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r5.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void close(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r5.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void close(io.vertx.core.Handler)> ==> <io.vertx.core.Starter$lambda_createLoggingHandler_2__3: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r5.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void close(io.vertx.core.Handler)> ==> <io.vertx.core.impl.CompositeFutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r5.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void close(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r5.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void close(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_finalize_6__18: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r5.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void close(io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r5.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void close(io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl$lambda_init_0__9: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r5.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void close(io.vertx.core.Handler)> ==> <io.vertx.core.impl.FailedFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r5.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void close(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r5.<io.vertx.core.Handler: void handle(java.lang.Object)>($r6) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void close(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_close_5__30: void handle(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r2.<io.vertx.core.eventbus.impl.HandlerRegistration: void unregister(io.vertx.core.Handler)>(r1) in <io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry: void close(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void unregister(io.vertx.core.Handler)>
STATIC edge: staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r0) in <io.vertx.core.eventbus.impl.HandlerRegistration: void unregister(io.vertx.core.Handler)> ==> <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<io.vertx.core.http.impl.HttpServerImpl$lambda_close_16__99: void <init>(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.Handler)>($r0, $r1, $r2) in <io.vertx.core.http.impl.HttpServerImpl$lambda_close_16__99: io.vertx.core.Handler bootstrap$(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.HttpServerImpl$lambda_close_16__99: void <init>(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.Handler)>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.http.impl.HttpServerImpl$lambda_static_0__100: void <init>()>() in <io.vertx.core.http.impl.HttpServerImpl$lambda_static_0__100: io.vertx.core.Handler bootstrap$()> ==> <io.vertx.core.http.impl.HttpServerImpl$lambda_static_0__100: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.impl.CloseHooks$lambda_run_0__82: void <init>(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("File handle is closed") in <io.vertx.core.file.impl.AsyncFileImpl: void checkClosed()> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.http.impl.HttpServerRequestImpl$handleData__81: void <init>(io.vertx.core.http.impl.HttpServerRequestImpl)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.http.impl.HttpServerRequestImpl$lambda_pendingQueue_1__80: void <init>(io.vertx.core.http.impl.HttpServerRequestImpl)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.http.impl.HttpServerRequestImpl$lambda_pendingQueue_0__79: void <init>(io.vertx.core.http.impl.HttpServerRequestImpl)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: l0 = specialinvoke r0.<io.vertx.core.http.impl.HttpClientRequestBase: long cancelOutstandingTimeoutTimer()>() in <io.vertx.core.http.impl.HttpClientRequestBase: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)> ==> <io.vertx.core.http.impl.HttpClientRequestBase: long cancelOutstandingTimeoutTimer()>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.http.impl.HttpClientRequestBase: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)>(r3, l0) in <io.vertx.core.http.impl.HttpClientRequestBase: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)> ==> <io.vertx.core.http.impl.HttpClientRequestPushPromise: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.http.impl.HttpClientRequestBase: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)>(r3, l0) in <io.vertx.core.http.impl.HttpClientRequestBase: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)> ==> <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.http.impl.HttpClientRequestBase: void handleException(java.lang.Throwable)>($r4) in <io.vertx.core.http.impl.HttpClientRequestBase: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)> ==> <io.vertx.core.http.impl.HttpClientRequestBase: void handleException(java.lang.Throwable)>
STATIC edge: $r13 = staticinvoke <io.vertx.core.http.impl.HttpClientRequestImpl$lambda_doHandleResponse_4__107: io.vertx.core.Handler bootstrap$(io.vertx.core.http.impl.HttpClientRequestImpl,long)>(r0, l2) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.http.impl.HttpClientRequestImpl$lambda_doHandleResponse_4__107: io.vertx.core.Handler bootstrap$(io.vertx.core.http.impl.HttpClientRequestImpl,long)>
CLINIT edge: $r5 = <io.vertx.core.http.impl.HttpClientRequestBase: io.vertx.core.logging.Logger log> in <io.vertx.core.http.impl.HttpClientRequestBase: void handleException(java.lang.Throwable)> ==> <io.vertx.core.http.impl.HttpClientRequestBase: void <clinit>()>
STATIC edge: r9 = staticinvoke <io.vertx.core.http.impl.HttpClientRequestBase$error__108: io.vertx.core.Handler bootstrap$(io.vertx.core.logging.Logger)>($r5) in <io.vertx.core.http.impl.HttpClientRequestBase: void handleException(java.lang.Throwable)> ==> <io.vertx.core.http.impl.HttpClientRequestBase$error__108: io.vertx.core.Handler bootstrap$(io.vertx.core.logging.Logger)>
CLINIT edge: $r0 = staticinvoke <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/http/impl/HttpClientRequestImpl;") in <io.vertx.core.http.impl.HttpClientRequestBase: void <clinit>()> ==> <io.vertx.core.logging.LoggerFactory: void <clinit>()>
STATIC edge: $r0 = staticinvoke <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/http/impl/HttpClientRequestImpl;") in <io.vertx.core.http.impl.HttpClientRequestBase: void <clinit>()> ==> <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>
CLINIT edge: <io.vertx.core.http.impl.HttpClientRequestBase: io.vertx.core.logging.Logger log> = $r0 in <io.vertx.core.http.impl.HttpClientRequestBase: void <clinit>()> ==> <io.vertx.core.http.impl.HttpClientRequestBase: void <clinit>()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setLogActivity(boolean)>(z0) in <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.NetworkOptions setLogActivity(boolean)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setLogActivity(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setLogActivity(boolean)>(z0) in <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.NetworkOptions setLogActivity(boolean)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setLogActivity(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setLogActivity(boolean)>(z0) in <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.NetworkOptions setLogActivity(boolean)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.TCPSSLOptions setLogActivity(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setLogActivity(boolean)>(z0) in <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.NetworkOptions setLogActivity(boolean)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.TCPSSLOptions setLogActivity(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setLogActivity(boolean)>(z0) in <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.NetworkOptions setLogActivity(boolean)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.TCPSSLOptions setLogActivity(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setLogActivity(boolean)>(z0) in <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.NetworkOptions setLogActivity(boolean)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.TCPSSLOptions setLogActivity(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setLogActivity(boolean)>(z0) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetworkOptions setLogActivity(boolean)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetServerOptions setLogActivity(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setLogActivity(boolean)>(z0) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetworkOptions setLogActivity(boolean)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setLogActivity(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setLogActivity(boolean)>(z0) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetworkOptions setLogActivity(boolean)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setLogActivity(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.datagram.DatagramSocketOptions: io.vertx.core.datagram.DatagramSocketOptions setLogActivity(boolean)>(z0) in <io.vertx.core.datagram.DatagramSocketOptions: io.vertx.core.net.NetworkOptions setLogActivity(boolean)> ==> <io.vertx.core.datagram.DatagramSocketOptions: io.vertx.core.datagram.DatagramSocketOptions setLogActivity(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setLogActivity(boolean)>(z0) in <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.NetworkOptions setLogActivity(boolean)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setLogActivity(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setLogActivity(boolean)>(z0) in <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.NetworkOptions setLogActivity(boolean)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setLogActivity(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setLogActivity(boolean)>(z0) in <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetworkOptions setLogActivity(boolean)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setLogActivity(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setReceiveBufferSize(int)>(i0) in <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.NetworkOptions setReceiveBufferSize(int)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setReceiveBufferSize(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setReceiveBufferSize(int)>(i0) in <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.NetworkOptions setReceiveBufferSize(int)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setReceiveBufferSize(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setReceiveBufferSize(int)>(i0) in <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.NetworkOptions setReceiveBufferSize(int)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.TCPSSLOptions setReceiveBufferSize(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setReceiveBufferSize(int)>(i0) in <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.NetworkOptions setReceiveBufferSize(int)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.TCPSSLOptions setReceiveBufferSize(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setReceiveBufferSize(int)>(i0) in <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.NetworkOptions setReceiveBufferSize(int)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.TCPSSLOptions setReceiveBufferSize(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setReceiveBufferSize(int)>(i0) in <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.NetworkOptions setReceiveBufferSize(int)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.TCPSSLOptions setReceiveBufferSize(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setReceiveBufferSize(int)>(i0) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetworkOptions setReceiveBufferSize(int)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetServerOptions setReceiveBufferSize(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setReceiveBufferSize(int)>(i0) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetworkOptions setReceiveBufferSize(int)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setReceiveBufferSize(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setReceiveBufferSize(int)>(i0) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetworkOptions setReceiveBufferSize(int)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setReceiveBufferSize(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.datagram.DatagramSocketOptions: io.vertx.core.datagram.DatagramSocketOptions setReceiveBufferSize(int)>(i0) in <io.vertx.core.datagram.DatagramSocketOptions: io.vertx.core.net.NetworkOptions setReceiveBufferSize(int)> ==> <io.vertx.core.datagram.DatagramSocketOptions: io.vertx.core.datagram.DatagramSocketOptions setReceiveBufferSize(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setReceiveBufferSize(int)>(i0) in <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.NetworkOptions setReceiveBufferSize(int)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setReceiveBufferSize(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setReceiveBufferSize(int)>(i0) in <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.NetworkOptions setReceiveBufferSize(int)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setReceiveBufferSize(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setReceiveBufferSize(int)>(i0) in <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetworkOptions setReceiveBufferSize(int)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setReceiveBufferSize(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setReuseAddress(boolean)>(z0) in <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.NetworkOptions setReuseAddress(boolean)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setReuseAddress(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setReuseAddress(boolean)>(z0) in <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.NetworkOptions setReuseAddress(boolean)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setReuseAddress(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setReuseAddress(boolean)>(z0) in <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.NetworkOptions setReuseAddress(boolean)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.TCPSSLOptions setReuseAddress(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setReuseAddress(boolean)>(z0) in <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.NetworkOptions setReuseAddress(boolean)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.TCPSSLOptions setReuseAddress(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setReuseAddress(boolean)>(z0) in <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.NetworkOptions setReuseAddress(boolean)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.TCPSSLOptions setReuseAddress(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setReuseAddress(boolean)>(z0) in <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.NetworkOptions setReuseAddress(boolean)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.TCPSSLOptions setReuseAddress(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setReuseAddress(boolean)>(z0) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetworkOptions setReuseAddress(boolean)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetServerOptions setReuseAddress(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setReuseAddress(boolean)>(z0) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetworkOptions setReuseAddress(boolean)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setReuseAddress(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setReuseAddress(boolean)>(z0) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetworkOptions setReuseAddress(boolean)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setReuseAddress(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.datagram.DatagramSocketOptions: io.vertx.core.datagram.DatagramSocketOptions setReuseAddress(boolean)>(z0) in <io.vertx.core.datagram.DatagramSocketOptions: io.vertx.core.net.NetworkOptions setReuseAddress(boolean)> ==> <io.vertx.core.datagram.DatagramSocketOptions: io.vertx.core.datagram.DatagramSocketOptions setReuseAddress(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setReuseAddress(boolean)>(z0) in <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.NetworkOptions setReuseAddress(boolean)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setReuseAddress(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setReuseAddress(boolean)>(z0) in <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.NetworkOptions setReuseAddress(boolean)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setReuseAddress(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setReuseAddress(boolean)>(z0) in <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetworkOptions setReuseAddress(boolean)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setReuseAddress(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setReusePort(boolean)>(z0) in <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.NetworkOptions setReusePort(boolean)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setReusePort(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setReusePort(boolean)>(z0) in <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.NetworkOptions setReusePort(boolean)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setReusePort(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setReusePort(boolean)>(z0) in <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.NetworkOptions setReusePort(boolean)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.TCPSSLOptions setReusePort(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setReusePort(boolean)>(z0) in <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.NetworkOptions setReusePort(boolean)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.TCPSSLOptions setReusePort(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setReusePort(boolean)>(z0) in <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.NetworkOptions setReusePort(boolean)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.TCPSSLOptions setReusePort(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setReusePort(boolean)>(z0) in <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.NetworkOptions setReusePort(boolean)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.TCPSSLOptions setReusePort(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setReusePort(boolean)>(z0) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetworkOptions setReusePort(boolean)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetServerOptions setReusePort(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setReusePort(boolean)>(z0) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetworkOptions setReusePort(boolean)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setReusePort(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setReusePort(boolean)>(z0) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetworkOptions setReusePort(boolean)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setReusePort(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.datagram.DatagramSocketOptions: io.vertx.core.datagram.DatagramSocketOptions setReusePort(boolean)>(z0) in <io.vertx.core.datagram.DatagramSocketOptions: io.vertx.core.net.NetworkOptions setReusePort(boolean)> ==> <io.vertx.core.datagram.DatagramSocketOptions: io.vertx.core.datagram.DatagramSocketOptions setReusePort(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setReusePort(boolean)>(z0) in <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.NetworkOptions setReusePort(boolean)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setReusePort(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setReusePort(boolean)>(z0) in <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.NetworkOptions setReusePort(boolean)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setReusePort(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setReusePort(boolean)>(z0) in <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetworkOptions setReusePort(boolean)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setReusePort(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSendBufferSize(int)>(i0) in <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.NetworkOptions setSendBufferSize(int)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSendBufferSize(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSendBufferSize(int)>(i0) in <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.NetworkOptions setSendBufferSize(int)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setSendBufferSize(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSendBufferSize(int)>(i0) in <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.NetworkOptions setSendBufferSize(int)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.TCPSSLOptions setSendBufferSize(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSendBufferSize(int)>(i0) in <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.NetworkOptions setSendBufferSize(int)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.TCPSSLOptions setSendBufferSize(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSendBufferSize(int)>(i0) in <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.NetworkOptions setSendBufferSize(int)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.TCPSSLOptions setSendBufferSize(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSendBufferSize(int)>(i0) in <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.NetworkOptions setSendBufferSize(int)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.TCPSSLOptions setSendBufferSize(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setSendBufferSize(int)>(i0) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetworkOptions setSendBufferSize(int)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetServerOptions setSendBufferSize(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setSendBufferSize(int)>(i0) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetworkOptions setSendBufferSize(int)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setSendBufferSize(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setSendBufferSize(int)>(i0) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetworkOptions setSendBufferSize(int)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setSendBufferSize(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.datagram.DatagramSocketOptions: io.vertx.core.datagram.DatagramSocketOptions setSendBufferSize(int)>(i0) in <io.vertx.core.datagram.DatagramSocketOptions: io.vertx.core.net.NetworkOptions setSendBufferSize(int)> ==> <io.vertx.core.datagram.DatagramSocketOptions: io.vertx.core.datagram.DatagramSocketOptions setSendBufferSize(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setSendBufferSize(int)>(i0) in <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.NetworkOptions setSendBufferSize(int)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setSendBufferSize(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setSendBufferSize(int)>(i0) in <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.NetworkOptions setSendBufferSize(int)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setSendBufferSize(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setSendBufferSize(int)>(i0) in <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetworkOptions setSendBufferSize(int)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setSendBufferSize(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTrafficClass(int)>(i0) in <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.NetworkOptions setTrafficClass(int)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTrafficClass(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTrafficClass(int)>(i0) in <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.NetworkOptions setTrafficClass(int)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setTrafficClass(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTrafficClass(int)>(i0) in <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.NetworkOptions setTrafficClass(int)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.TCPSSLOptions setTrafficClass(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTrafficClass(int)>(i0) in <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.NetworkOptions setTrafficClass(int)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.TCPSSLOptions setTrafficClass(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTrafficClass(int)>(i0) in <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.NetworkOptions setTrafficClass(int)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.TCPSSLOptions setTrafficClass(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTrafficClass(int)>(i0) in <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.NetworkOptions setTrafficClass(int)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.TCPSSLOptions setTrafficClass(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setTrafficClass(int)>(i0) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetworkOptions setTrafficClass(int)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetServerOptions setTrafficClass(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setTrafficClass(int)>(i0) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetworkOptions setTrafficClass(int)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setTrafficClass(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setTrafficClass(int)>(i0) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetworkOptions setTrafficClass(int)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setTrafficClass(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.datagram.DatagramSocketOptions: io.vertx.core.datagram.DatagramSocketOptions setTrafficClass(int)>(i0) in <io.vertx.core.datagram.DatagramSocketOptions: io.vertx.core.net.NetworkOptions setTrafficClass(int)> ==> <io.vertx.core.datagram.DatagramSocketOptions: io.vertx.core.datagram.DatagramSocketOptions setTrafficClass(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setTrafficClass(int)>(i0) in <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.NetworkOptions setTrafficClass(int)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setTrafficClass(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setTrafficClass(int)>(i0) in <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.NetworkOptions setTrafficClass(int)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setTrafficClass(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setTrafficClass(int)>(i0) in <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetworkOptions setTrafficClass(int)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setTrafficClass(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setEnabledSecureTransportProtocols(java.util.Set)>(r1) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetServerOptions setEnabledSecureTransportProtocols(java.util.Set)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setEnabledSecureTransportProtocols(java.util.Set)>
SPECIAL edge: $r2 = specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setEnabledSecureTransportProtocols(java.util.Set)>(r1) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setEnabledSecureTransportProtocols(java.util.Set)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setEnabledSecureTransportProtocols(java.util.Set)>
SPECIAL edge: $r2 = specialinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setEnabledSecureTransportProtocols(java.util.Set)>(r1) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setEnabledSecureTransportProtocols(java.util.Set)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setEnabledSecureTransportProtocols(java.util.Set)>
SPECIAL edge: $r2 = specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setEnabledSecureTransportProtocols(java.util.Set)>(r1) in <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setEnabledSecureTransportProtocols(java.util.Set)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setEnabledSecureTransportProtocols(java.util.Set)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.TCPSSLOptions setEnabledSecureTransportProtocols(java.util.Set)>(r1) in <io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setEnabledSecureTransportProtocols(java.util.Set)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setEnabledSecureTransportProtocols(java.util.Set)>
SPECIAL edge: $r2 = specialinvoke r0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.TCPSSLOptions setEnabledSecureTransportProtocols(java.util.Set)>(r1) in <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setEnabledSecureTransportProtocols(java.util.Set)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setEnabledSecureTransportProtocols(java.util.Set)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setIdleTimeout(int)>(i0) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetServerOptions setIdleTimeout(int)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setIdleTimeout(int)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setIdleTimeout(int)>(i0) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setIdleTimeout(int)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setIdleTimeout(int)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setIdleTimeout(int)>(i0) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setIdleTimeout(int)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setIdleTimeout(int)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setIdleTimeout(int)>(i0) in <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setIdleTimeout(int)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setIdleTimeout(int)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setIdleTimeout(int)>(i0) in <io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setIdleTimeout(int)> ==> <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setIdleTimeout(int)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setIdleTimeout(int)>(i0) in <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setIdleTimeout(int)> ==> <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setIdleTimeout(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setIdleTimeoutUnit(java.util.concurrent.TimeUnit)>(r1) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetServerOptions setIdleTimeoutUnit(java.util.concurrent.TimeUnit)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setIdleTimeoutUnit(java.util.concurrent.TimeUnit)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setIdleTimeoutUnit(java.util.concurrent.TimeUnit)>(r1) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setIdleTimeoutUnit(java.util.concurrent.TimeUnit)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setIdleTimeoutUnit(java.util.concurrent.TimeUnit)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setIdleTimeoutUnit(java.util.concurrent.TimeUnit)>(r1) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setIdleTimeoutUnit(java.util.concurrent.TimeUnit)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setIdleTimeoutUnit(java.util.concurrent.TimeUnit)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setIdleTimeoutUnit(java.util.concurrent.TimeUnit)>(r1) in <io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setIdleTimeoutUnit(java.util.concurrent.TimeUnit)> ==> <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setIdleTimeoutUnit(java.util.concurrent.TimeUnit)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setIdleTimeoutUnit(java.util.concurrent.TimeUnit)>(r1) in <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setIdleTimeoutUnit(java.util.concurrent.TimeUnit)> ==> <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setIdleTimeoutUnit(java.util.concurrent.TimeUnit)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>(r1) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetServerOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>(r1) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>(r1) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.TCPSSLOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>(r1) in <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.TCPSSLOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>(r1) in <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.TCPSSLOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>(r1) in <io.vertx.core.net.NetClientOptions: io.vertx.core.net.TCPSSLOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setJdkSslEngineOptions(io.vertx.core.net.JdkSSLEngineOptions)>(r1) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetServerOptions setJdkSslEngineOptions(io.vertx.core.net.JdkSSLEngineOptions)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setJdkSslEngineOptions(io.vertx.core.net.JdkSSLEngineOptions)>
SPECIAL edge: $r2 = specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>(r1) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setJdkSslEngineOptions(io.vertx.core.net.JdkSSLEngineOptions)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>
SPECIAL edge: $r2 = specialinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>(r1) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setJdkSslEngineOptions(io.vertx.core.net.JdkSSLEngineOptions)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>
SPECIAL edge: $r2 = specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setJdkSslEngineOptions(io.vertx.core.net.JdkSSLEngineOptions)>(r1) in <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setJdkSslEngineOptions(io.vertx.core.net.JdkSSLEngineOptions)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setJdkSslEngineOptions(io.vertx.core.net.JdkSSLEngineOptions)>
SPECIAL edge: $r2 = specialinvoke r0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>(r1) in <io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setJdkSslEngineOptions(io.vertx.core.net.JdkSSLEngineOptions)> ==> <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>
SPECIAL edge: $r2 = specialinvoke r0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setJdkSslEngineOptions(io.vertx.core.net.JdkSSLEngineOptions)>(r1) in <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setJdkSslEngineOptions(io.vertx.core.net.JdkSSLEngineOptions)> ==> <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setJdkSslEngineOptions(io.vertx.core.net.JdkSSLEngineOptions)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setOpenSslEngineOptions(io.vertx.core.net.OpenSSLEngineOptions)>(r1) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetServerOptions setOpenSslEngineOptions(io.vertx.core.net.OpenSSLEngineOptions)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setOpenSslEngineOptions(io.vertx.core.net.OpenSSLEngineOptions)>
SPECIAL edge: $r2 = specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>(r1) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setOpenSslEngineOptions(io.vertx.core.net.OpenSSLEngineOptions)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>
SPECIAL edge: $r2 = specialinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>(r1) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setOpenSslEngineOptions(io.vertx.core.net.OpenSSLEngineOptions)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>
SPECIAL edge: $r2 = specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setOpenSslEngineOptions(io.vertx.core.net.OpenSSLEngineOptions)>(r1) in <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setOpenSslEngineOptions(io.vertx.core.net.OpenSSLEngineOptions)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setOpenSslEngineOptions(io.vertx.core.net.OpenSSLEngineOptions)>
SPECIAL edge: $r2 = specialinvoke r0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>(r1) in <io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setOpenSslEngineOptions(io.vertx.core.net.OpenSSLEngineOptions)> ==> <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>
SPECIAL edge: $r2 = specialinvoke r0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setOpenSslEngineOptions(io.vertx.core.net.OpenSSLEngineOptions)>(r1) in <io.vertx.core.net.NetClientOptions: io.vertx.core.net.ClientOptionsBase setOpenSslEngineOptions(io.vertx.core.net.OpenSSLEngineOptions)> ==> <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setOpenSslEngineOptions(io.vertx.core.net.OpenSSLEngineOptions)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setSoLinger(int)>(i0) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetServerOptions setSoLinger(int)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setSoLinger(int)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSoLinger(int)>(i0) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setSoLinger(int)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSoLinger(int)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setSoLinger(int)>(i0) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setSoLinger(int)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setSoLinger(int)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSoLinger(int)>(i0) in <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setSoLinger(int)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSoLinger(int)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setSoLinger(int)>(i0) in <io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setSoLinger(int)> ==> <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setSoLinger(int)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setSoLinger(int)>(i0) in <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setSoLinger(int)> ==> <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setSoLinger(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setSsl(boolean)>(z0) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetServerOptions setSsl(boolean)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setSsl(boolean)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSsl(boolean)>(z0) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setSsl(boolean)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSsl(boolean)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setSsl(boolean)>(z0) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setSsl(boolean)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setSsl(boolean)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSsl(boolean)>(z0) in <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setSsl(boolean)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSsl(boolean)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setSsl(boolean)>(z0) in <io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setSsl(boolean)> ==> <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setSsl(boolean)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setSsl(boolean)>(z0) in <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setSsl(boolean)> ==> <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setSsl(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setTcpCork(boolean)>(z0) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetServerOptions setTcpCork(boolean)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setTcpCork(boolean)>
SPECIAL edge: $r1 = specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpCork(boolean)>(z0) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setTcpCork(boolean)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpCork(boolean)>
SPECIAL edge: $r1 = specialinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setTcpCork(boolean)>(z0) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setTcpCork(boolean)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setTcpCork(boolean)>
SPECIAL edge: $r1 = specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpCork(boolean)>(z0) in <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setTcpCork(boolean)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpCork(boolean)>
SPECIAL edge: $r1 = specialinvoke r0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setTcpCork(boolean)>(z0) in <io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setTcpCork(boolean)> ==> <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setTcpCork(boolean)>
SPECIAL edge: $r1 = specialinvoke r0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setTcpCork(boolean)>(z0) in <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setTcpCork(boolean)> ==> <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setTcpCork(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setTcpFastOpen(boolean)>(z0) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetServerOptions setTcpFastOpen(boolean)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setTcpFastOpen(boolean)>
SPECIAL edge: $r1 = specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpFastOpen(boolean)>(z0) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setTcpFastOpen(boolean)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpFastOpen(boolean)>
SPECIAL edge: $r1 = specialinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setTcpFastOpen(boolean)>(z0) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setTcpFastOpen(boolean)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setTcpFastOpen(boolean)>
SPECIAL edge: $r1 = specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpFastOpen(boolean)>(z0) in <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setTcpFastOpen(boolean)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpFastOpen(boolean)>
SPECIAL edge: $r1 = specialinvoke r0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setTcpFastOpen(boolean)>(z0) in <io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setTcpFastOpen(boolean)> ==> <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setTcpFastOpen(boolean)>
SPECIAL edge: $r1 = specialinvoke r0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setTcpFastOpen(boolean)>(z0) in <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setTcpFastOpen(boolean)> ==> <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setTcpFastOpen(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setTcpKeepAlive(boolean)>(z0) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetServerOptions setTcpKeepAlive(boolean)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setTcpKeepAlive(boolean)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpKeepAlive(boolean)>(z0) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setTcpKeepAlive(boolean)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpKeepAlive(boolean)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setTcpKeepAlive(boolean)>(z0) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setTcpKeepAlive(boolean)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setTcpKeepAlive(boolean)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpKeepAlive(boolean)>(z0) in <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setTcpKeepAlive(boolean)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpKeepAlive(boolean)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setTcpKeepAlive(boolean)>(z0) in <io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setTcpKeepAlive(boolean)> ==> <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setTcpKeepAlive(boolean)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setTcpKeepAlive(boolean)>(z0) in <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setTcpKeepAlive(boolean)> ==> <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setTcpKeepAlive(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setTcpNoDelay(boolean)>(z0) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetServerOptions setTcpNoDelay(boolean)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setTcpNoDelay(boolean)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpNoDelay(boolean)>(z0) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setTcpNoDelay(boolean)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpNoDelay(boolean)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setTcpNoDelay(boolean)>(z0) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setTcpNoDelay(boolean)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setTcpNoDelay(boolean)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpNoDelay(boolean)>(z0) in <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setTcpNoDelay(boolean)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpNoDelay(boolean)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setTcpNoDelay(boolean)>(z0) in <io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setTcpNoDelay(boolean)> ==> <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setTcpNoDelay(boolean)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setTcpNoDelay(boolean)>(z0) in <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setTcpNoDelay(boolean)> ==> <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setTcpNoDelay(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setTcpQuickAck(boolean)>(z0) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetServerOptions setTcpQuickAck(boolean)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setTcpQuickAck(boolean)>
SPECIAL edge: $r1 = specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpQuickAck(boolean)>(z0) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setTcpQuickAck(boolean)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpQuickAck(boolean)>
SPECIAL edge: $r1 = specialinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setTcpQuickAck(boolean)>(z0) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setTcpQuickAck(boolean)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setTcpQuickAck(boolean)>
SPECIAL edge: $r1 = specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpQuickAck(boolean)>(z0) in <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setTcpQuickAck(boolean)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpQuickAck(boolean)>
SPECIAL edge: $r1 = specialinvoke r0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setTcpQuickAck(boolean)>(z0) in <io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setTcpQuickAck(boolean)> ==> <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setTcpQuickAck(boolean)>
SPECIAL edge: $r1 = specialinvoke r0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setTcpQuickAck(boolean)>(z0) in <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setTcpQuickAck(boolean)> ==> <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setTcpQuickAck(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setUseAlpn(boolean)>(z0) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetServerOptions setUseAlpn(boolean)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setUseAlpn(boolean)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setUseAlpn(boolean)>(z0) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setUseAlpn(boolean)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setUseAlpn(boolean)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setUseAlpn(boolean)>(z0) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setUseAlpn(boolean)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setUseAlpn(boolean)>
SPECIAL edge: $r1 = specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setUseAlpn(boolean)>(z0) in <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setUseAlpn(boolean)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setUseAlpn(boolean)>
SPECIAL edge: $r1 = specialinvoke r0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setUseAlpn(boolean)>(z0) in <io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setUseAlpn(boolean)> ==> <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setUseAlpn(boolean)>
SPECIAL edge: $r1 = specialinvoke r0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setUseAlpn(boolean)>(z0) in <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setUseAlpn(boolean)> ==> <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setUseAlpn(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setUsePooledBuffers(boolean)>(z0) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetServerOptions setUsePooledBuffers(boolean)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setUsePooledBuffers(boolean)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setUsePooledBuffers(boolean)>(z0) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setUsePooledBuffers(boolean)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setUsePooledBuffers(boolean)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setUsePooledBuffers(boolean)>(z0) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setUsePooledBuffers(boolean)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setUsePooledBuffers(boolean)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setUsePooledBuffers(boolean)>(z0) in <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setUsePooledBuffers(boolean)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setUsePooledBuffers(boolean)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setUsePooledBuffers(boolean)>(z0) in <io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setUsePooledBuffers(boolean)> ==> <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setUsePooledBuffers(boolean)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setUsePooledBuffers(boolean)>(z0) in <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setUsePooledBuffers(boolean)> ==> <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setUsePooledBuffers(boolean)>
SPECIAL edge: specialinvoke $r1.<java.util.ArrayList: void <init>()>() in <io.vertx.core.net.PemKeyCertOptions: void init()> ==> <java.util.ArrayList: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.util.ArrayList: void <init>()>() in <io.vertx.core.net.PemKeyCertOptions: void init()> ==> <java.util.ArrayList: void <init>()>
SPECIAL edge: specialinvoke $r3.<java.util.ArrayList: void <init>()>() in <io.vertx.core.net.PemKeyCertOptions: void init()> ==> <java.util.ArrayList: void <init>()>
SPECIAL edge: specialinvoke $r4.<java.util.ArrayList: void <init>()>() in <io.vertx.core.net.PemKeyCertOptions: void init()> ==> <java.util.ArrayList: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.PemTrustOptions: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.ArrayList: void <init>()>() in <io.vertx.core.net.PemTrustOptions: void <init>()> ==> <java.util.ArrayList: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.util.ArrayList: void <init>()>() in <io.vertx.core.net.PemTrustOptions: void <init>()> ==> <java.util.ArrayList: void <init>()>
INTERFACE edge: interfaceinvoke $r1.<java.util.List: void clear()>() in <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setCertPath(java.lang.String)> ==> <java.util.AbstractList: void clear()>
INTERFACE edge: interfaceinvoke $r1.<java.util.List: void clear()>() in <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setCertPath(java.lang.String)> ==> <java.util.LinkedList: void clear()>
INTERFACE edge: interfaceinvoke $r1.<java.util.List: void clear()>() in <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setCertPath(java.lang.String)> ==> <java.util.concurrent.CopyOnWriteArrayList: void clear()>
INTERFACE edge: interfaceinvoke $r1.<java.util.List: void clear()>() in <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setCertPath(java.lang.String)> ==> <java.util.ArrayList: void clear()>
INTERFACE edge: interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r2) in <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setCertPath(java.lang.String)> ==> <java.util.AbstractList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r2) in <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setCertPath(java.lang.String)> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r2) in <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setCertPath(java.lang.String)> ==> <java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r2) in <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setCertPath(java.lang.String)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r1.<java.util.List: void clear()>() in <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setCertPaths(java.util.List)> ==> <java.util.AbstractList: void clear()>
INTERFACE edge: interfaceinvoke $r1.<java.util.List: void clear()>() in <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setCertPaths(java.util.List)> ==> <java.util.LinkedList: void clear()>
INTERFACE edge: interfaceinvoke $r1.<java.util.List: void clear()>() in <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setCertPaths(java.util.List)> ==> <java.util.concurrent.CopyOnWriteArrayList: void clear()>
INTERFACE edge: interfaceinvoke $r1.<java.util.List: void clear()>() in <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setCertPaths(java.util.List)> ==> <java.util.ArrayList: void clear()>
INTERFACE edge: interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>(r2) in <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setCertPaths(java.util.List)> ==> <java.util.AbstractCollection: boolean addAll(java.util.Collection)>
INTERFACE edge: interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>(r2) in <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setCertPaths(java.util.List)> ==> <java.util.LinkedList: boolean addAll(java.util.Collection)>
INTERFACE edge: interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>(r2) in <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setCertPaths(java.util.List)> ==> <java.util.concurrent.CopyOnWriteArrayList: boolean addAll(java.util.Collection)>
INTERFACE edge: interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>(r2) in <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setCertPaths(java.util.List)> ==> <java.util.ArrayList: boolean addAll(java.util.Collection)>
INTERFACE edge: interfaceinvoke $r1.<java.util.List: void clear()>() in <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setCertValue(io.vertx.core.buffer.Buffer)> ==> <java.util.AbstractList: void clear()>
INTERFACE edge: interfaceinvoke $r1.<java.util.List: void clear()>() in <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setCertValue(io.vertx.core.buffer.Buffer)> ==> <java.util.LinkedList: void clear()>
INTERFACE edge: interfaceinvoke $r1.<java.util.List: void clear()>() in <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setCertValue(io.vertx.core.buffer.Buffer)> ==> <java.util.concurrent.CopyOnWriteArrayList: void clear()>
INTERFACE edge: interfaceinvoke $r1.<java.util.List: void clear()>() in <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setCertValue(io.vertx.core.buffer.Buffer)> ==> <java.util.ArrayList: void clear()>
INTERFACE edge: interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r2) in <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setCertValue(io.vertx.core.buffer.Buffer)> ==> <java.util.AbstractList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r2) in <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setCertValue(io.vertx.core.buffer.Buffer)> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r2) in <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setCertValue(io.vertx.core.buffer.Buffer)> ==> <java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r2) in <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setCertValue(io.vertx.core.buffer.Buffer)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r1.<java.util.List: void clear()>() in <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setCertValues(java.util.List)> ==> <java.util.AbstractList: void clear()>
INTERFACE edge: interfaceinvoke $r1.<java.util.List: void clear()>() in <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setCertValues(java.util.List)> ==> <java.util.LinkedList: void clear()>
INTERFACE edge: interfaceinvoke $r1.<java.util.List: void clear()>() in <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setCertValues(java.util.List)> ==> <java.util.concurrent.CopyOnWriteArrayList: void clear()>
INTERFACE edge: interfaceinvoke $r1.<java.util.List: void clear()>() in <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setCertValues(java.util.List)> ==> <java.util.ArrayList: void clear()>
INTERFACE edge: interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>(r2) in <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setCertValues(java.util.List)> ==> <java.util.AbstractCollection: boolean addAll(java.util.Collection)>
INTERFACE edge: interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>(r2) in <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setCertValues(java.util.List)> ==> <java.util.LinkedList: boolean addAll(java.util.Collection)>
INTERFACE edge: interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>(r2) in <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setCertValues(java.util.List)> ==> <java.util.concurrent.CopyOnWriteArrayList: boolean addAll(java.util.Collection)>
INTERFACE edge: interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>(r2) in <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setCertValues(java.util.List)> ==> <java.util.ArrayList: boolean addAll(java.util.Collection)>
INTERFACE edge: interfaceinvoke $r1.<java.util.List: void clear()>() in <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setKeyPath(java.lang.String)> ==> <java.util.AbstractList: void clear()>
INTERFACE edge: interfaceinvoke $r1.<java.util.List: void clear()>() in <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setKeyPath(java.lang.String)> ==> <java.util.LinkedList: void clear()>
INTERFACE edge: interfaceinvoke $r1.<java.util.List: void clear()>() in <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setKeyPath(java.lang.String)> ==> <java.util.concurrent.CopyOnWriteArrayList: void clear()>
INTERFACE edge: interfaceinvoke $r1.<java.util.List: void clear()>() in <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setKeyPath(java.lang.String)> ==> <java.util.ArrayList: void clear()>
INTERFACE edge: interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r2) in <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setKeyPath(java.lang.String)> ==> <java.util.AbstractList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r2) in <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setKeyPath(java.lang.String)> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r2) in <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setKeyPath(java.lang.String)> ==> <java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r2) in <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setKeyPath(java.lang.String)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r1.<java.util.List: void clear()>() in <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setKeyPaths(java.util.List)> ==> <java.util.AbstractList: void clear()>
INTERFACE edge: interfaceinvoke $r1.<java.util.List: void clear()>() in <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setKeyPaths(java.util.List)> ==> <java.util.LinkedList: void clear()>
INTERFACE edge: interfaceinvoke $r1.<java.util.List: void clear()>() in <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setKeyPaths(java.util.List)> ==> <java.util.concurrent.CopyOnWriteArrayList: void clear()>
INTERFACE edge: interfaceinvoke $r1.<java.util.List: void clear()>() in <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setKeyPaths(java.util.List)> ==> <java.util.ArrayList: void clear()>
INTERFACE edge: interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>(r2) in <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setKeyPaths(java.util.List)> ==> <java.util.AbstractCollection: boolean addAll(java.util.Collection)>
INTERFACE edge: interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>(r2) in <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setKeyPaths(java.util.List)> ==> <java.util.LinkedList: boolean addAll(java.util.Collection)>
INTERFACE edge: interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>(r2) in <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setKeyPaths(java.util.List)> ==> <java.util.concurrent.CopyOnWriteArrayList: boolean addAll(java.util.Collection)>
INTERFACE edge: interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>(r2) in <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setKeyPaths(java.util.List)> ==> <java.util.ArrayList: boolean addAll(java.util.Collection)>
INTERFACE edge: interfaceinvoke $r1.<java.util.List: void clear()>() in <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setKeyValue(io.vertx.core.buffer.Buffer)> ==> <java.util.AbstractList: void clear()>
INTERFACE edge: interfaceinvoke $r1.<java.util.List: void clear()>() in <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setKeyValue(io.vertx.core.buffer.Buffer)> ==> <java.util.LinkedList: void clear()>
INTERFACE edge: interfaceinvoke $r1.<java.util.List: void clear()>() in <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setKeyValue(io.vertx.core.buffer.Buffer)> ==> <java.util.concurrent.CopyOnWriteArrayList: void clear()>
INTERFACE edge: interfaceinvoke $r1.<java.util.List: void clear()>() in <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setKeyValue(io.vertx.core.buffer.Buffer)> ==> <java.util.ArrayList: void clear()>
INTERFACE edge: interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r2) in <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setKeyValue(io.vertx.core.buffer.Buffer)> ==> <java.util.AbstractList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r2) in <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setKeyValue(io.vertx.core.buffer.Buffer)> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r2) in <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setKeyValue(io.vertx.core.buffer.Buffer)> ==> <java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r2) in <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setKeyValue(io.vertx.core.buffer.Buffer)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r1.<java.util.List: void clear()>() in <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setKeyValues(java.util.List)> ==> <java.util.AbstractList: void clear()>
INTERFACE edge: interfaceinvoke $r1.<java.util.List: void clear()>() in <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setKeyValues(java.util.List)> ==> <java.util.LinkedList: void clear()>
INTERFACE edge: interfaceinvoke $r1.<java.util.List: void clear()>() in <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setKeyValues(java.util.List)> ==> <java.util.concurrent.CopyOnWriteArrayList: void clear()>
INTERFACE edge: interfaceinvoke $r1.<java.util.List: void clear()>() in <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setKeyValues(java.util.List)> ==> <java.util.ArrayList: void clear()>
INTERFACE edge: interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>(r2) in <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setKeyValues(java.util.List)> ==> <java.util.AbstractCollection: boolean addAll(java.util.Collection)>
INTERFACE edge: interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>(r2) in <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setKeyValues(java.util.List)> ==> <java.util.LinkedList: boolean addAll(java.util.Collection)>
INTERFACE edge: interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>(r2) in <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setKeyValues(java.util.List)> ==> <java.util.concurrent.CopyOnWriteArrayList: boolean addAll(java.util.Collection)>
INTERFACE edge: interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>(r2) in <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions setKeyValues(java.util.List)> ==> <java.util.ArrayList: boolean addAll(java.util.Collection)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.PemKeyCertOptionsConverter$lambda_fromJson_3__83: void <init>(java.util.ArrayList)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.PemKeyCertOptionsConverter$lambda_fromJson_2__84: void <init>(java.util.ArrayList)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.PemKeyCertOptionsConverter$lambda_fromJson_1__85: void <init>(java.util.ArrayList)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.PemKeyCertOptionsConverter$lambda_fromJson_0__86: void <init>(java.util.ArrayList)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.PemTrustOptionsConverter$lambda_fromJson_0__88: void <init>(io.vertx.core.net.PemTrustOptions)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.PemTrustOptionsConverter$lambda_fromJson_1__87: void <init>(io.vertx.core.net.PemTrustOptions)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.http.impl.Http2HeadersAdaptor$lambda_entries_0__89: void <init>(io.vertx.core.http.impl.Http2HeadersAdaptor)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.impl.headers.VertxHttpHeaders: java.util.Set names()>() in <io.vertx.core.http.impl.headers.VertxHttpHeaders: int size()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders: java.util.Set names()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.Set: int size()>() in <io.vertx.core.http.impl.headers.VertxHttpHeaders: int size()> ==> <java.util.HashSet: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.Set: int size()>() in <io.vertx.core.http.impl.headers.VertxHttpHeaders: int size()> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.Set: int size()>() in <io.vertx.core.http.impl.headers.VertxHttpHeaders: int size()> ==> <io.vertx.core.impl.ConcurrentHashSet: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.Set: int size()>() in <io.vertx.core.http.impl.headers.VertxHttpHeaders: int size()> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$1: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.Set: int size()>() in <io.vertx.core.http.impl.headers.VertxHttpHeaders: int size()> ==> <java.util.TreeSet: int size()>
CLINIT edge: $r1 = <java.lang.String: java.util.Comparator CASE_INSENSITIVE_ORDER> in <io.vertx.core.http.impl.headers.VertxHttpHeaders: java.util.Set names()> ==> <java.lang.String: void <clinit>()>
STATIC edge: $r2 = staticinvoke <io.vertx.core.http.impl.Http2HeadersAdaptor: io.netty.handler.codec.http2.Http2Headers access$000(io.vertx.core.http.impl.Http2HeadersAdaptor)>($r1) in <io.vertx.core.http.impl.Http2HeadersAdaptor$2: int size()> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor: io.netty.handler.codec.http2.Http2Headers access$000(io.vertx.core.http.impl.Http2HeadersAdaptor)>
STATIC edge: $r2 = staticinvoke <io.vertx.core.net.impl.VertxEventLoopGroup: java.util.List access$000(io.vertx.core.net.impl.VertxEventLoopGroup)>($r1) in <io.vertx.core.net.impl.VertxEventLoopGroup$1: int size()> ==> <io.vertx.core.net.impl.VertxEventLoopGroup: java.util.List access$000(io.vertx.core.net.impl.VertxEventLoopGroup)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: void <init>(io.vertx.core.http.impl.headers.VertxHttpHeaders,io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.NetworkOptions: void <init>(io.vertx.core.net.NetworkOptions)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke r1.<io.vertx.core.net.NetworkOptions: int getSendBufferSize()>() in <io.vertx.core.net.NetworkOptions: void <init>(io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.net.NetworkOptions: int getSendBufferSize()>
VIRTUAL edge: $i0 = virtualinvoke r1.<io.vertx.core.net.NetworkOptions: int getSendBufferSize()>() in <io.vertx.core.net.NetworkOptions: void <init>(io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.datagram.DatagramSocketOptions: int getSendBufferSize()>
VIRTUAL edge: $i1 = virtualinvoke r1.<io.vertx.core.net.NetworkOptions: int getReceiveBufferSize()>() in <io.vertx.core.net.NetworkOptions: void <init>(io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.net.NetworkOptions: int getReceiveBufferSize()>
VIRTUAL edge: $i1 = virtualinvoke r1.<io.vertx.core.net.NetworkOptions: int getReceiveBufferSize()>() in <io.vertx.core.net.NetworkOptions: void <init>(io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.datagram.DatagramSocketOptions: int getReceiveBufferSize()>
VIRTUAL edge: $z0 = virtualinvoke r1.<io.vertx.core.net.NetworkOptions: boolean isReuseAddress()>() in <io.vertx.core.net.NetworkOptions: void <init>(io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.net.NetworkOptions: boolean isReuseAddress()>
VIRTUAL edge: $z1 = virtualinvoke r1.<io.vertx.core.net.NetworkOptions: boolean isReusePort()>() in <io.vertx.core.net.NetworkOptions: void <init>(io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.net.NetworkOptions: boolean isReusePort()>
VIRTUAL edge: $i2 = virtualinvoke r1.<io.vertx.core.net.NetworkOptions: int getTrafficClass()>() in <io.vertx.core.net.NetworkOptions: void <init>(io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.net.NetworkOptions: int getTrafficClass()>
VIRTUAL edge: $i2 = virtualinvoke r1.<io.vertx.core.net.NetworkOptions: int getTrafficClass()>() in <io.vertx.core.net.NetworkOptions: void <init>(io.vertx.core.net.NetworkOptions)> ==> <io.vertx.core.datagram.DatagramSocketOptions: int getTrafficClass()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions clone()>() in <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.KeyCertOptions clone()> ==> <io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions clone()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.JksOptions: io.vertx.core.net.JksOptions clone()>() in <io.vertx.core.net.JksOptions: io.vertx.core.net.KeyCertOptions clone()> ==> <io.vertx.core.net.JksOptions: io.vertx.core.net.JksOptions clone()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.PfxOptions: io.vertx.core.net.PfxOptions clone()>() in <io.vertx.core.net.PfxOptions: io.vertx.core.net.KeyCertOptions clone()> ==> <io.vertx.core.net.PfxOptions: io.vertx.core.net.PfxOptions clone()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.PemTrustOptions: io.vertx.core.net.PemTrustOptions clone()>() in <io.vertx.core.net.PemTrustOptions: io.vertx.core.net.TrustOptions clone()> ==> <io.vertx.core.net.PemTrustOptions: io.vertx.core.net.PemTrustOptions clone()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.JksOptions: io.vertx.core.net.JksOptions clone()>() in <io.vertx.core.net.JksOptions: io.vertx.core.net.TrustOptions clone()> ==> <io.vertx.core.net.JksOptions: io.vertx.core.net.JksOptions clone()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.PfxOptions: io.vertx.core.net.PfxOptions clone()>() in <io.vertx.core.net.PfxOptions: io.vertx.core.net.TrustOptions clone()> ==> <io.vertx.core.net.PfxOptions: io.vertx.core.net.PfxOptions clone()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.OpenSSLEngineOptions: io.vertx.core.net.OpenSSLEngineOptions clone()>() in <io.vertx.core.net.OpenSSLEngineOptions: io.vertx.core.net.SSLEngineOptions clone()> ==> <io.vertx.core.net.OpenSSLEngineOptions: io.vertx.core.net.OpenSSLEngineOptions clone()>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext getContext(io.vertx.core.impl.VertxInternal,java.lang.String)>(r1, null) in <io.vertx.core.net.impl.SSLHelper: void validate(io.vertx.core.impl.VertxInternal)> ==> <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext getContext(io.vertx.core.impl.VertxInternal,java.lang.String)>
STATIC edge: $r9 = staticinvoke <io.vertx.core.net.impl.SSLHelper$lambda_getContext_2__111: java.util.function.Function bootstrap$(io.vertx.core.net.impl.SSLHelper,io.vertx.core.impl.VertxInternal,javax.net.ssl.X509KeyManager,javax.net.ssl.TrustManagerFactory)>(r1, r2, r24, r26) in <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext getContext(io.vertx.core.impl.VertxInternal,java.lang.String)> ==> <io.vertx.core.net.impl.SSLHelper$lambda_getContext_2__111: java.util.function.Function bootstrap$(io.vertx.core.net.impl.SSLHelper,io.vertx.core.impl.VertxInternal,javax.net.ssl.X509KeyManager,javax.net.ssl.TrustManagerFactory)>
SPECIAL edge: specialinvoke r0.<io.netty.channel.ChannelInitializer: void <init>()>() in <io.vertx.core.net.impl.NetServerImpl$1: void <init>(io.vertx.core.net.impl.NetServerImpl)> ==> <io.netty.channel.ChannelInitializer: void <init>()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<io.vertx.core.impl.VertxInternal: io.vertx.core.net.impl.transport.Transport transport()>() in <io.vertx.core.net.impl.NetServerImpl: void applyConnectionOptions(boolean,io.netty.bootstrap.ServerBootstrap)> ==> <io.vertx.core.impl.VertxImpl: io.vertx.core.net.impl.transport.Transport transport()>
VIRTUAL edge: virtualinvoke $r2.<io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.NetServerOptions,boolean,io.netty.bootstrap.ServerBootstrap)>($r4, z0, r3) in <io.vertx.core.net.impl.NetServerImpl: void applyConnectionOptions(boolean,io.netty.bootstrap.ServerBootstrap)> ==> <io.vertx.core.net.impl.transport.EpollTransport: void configure(io.vertx.core.net.NetServerOptions,boolean,io.netty.bootstrap.ServerBootstrap)>
VIRTUAL edge: virtualinvoke $r2.<io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.NetServerOptions,boolean,io.netty.bootstrap.ServerBootstrap)>($r4, z0, r3) in <io.vertx.core.net.impl.NetServerImpl: void applyConnectionOptions(boolean,io.netty.bootstrap.ServerBootstrap)> ==> <io.vertx.core.net.impl.transport.KQueueTransport: void configure(io.vertx.core.net.NetServerOptions,boolean,io.netty.bootstrap.ServerBootstrap)>
VIRTUAL edge: virtualinvoke $r2.<io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.NetServerOptions,boolean,io.netty.bootstrap.ServerBootstrap)>($r4, z0, r3) in <io.vertx.core.net.impl.NetServerImpl: void applyConnectionOptions(boolean,io.netty.bootstrap.ServerBootstrap)> ==> <io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.NetServerOptions,boolean,io.netty.bootstrap.ServerBootstrap)>
CLINIT edge: $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z3) in <io.vertx.core.net.impl.transport.EpollTransport: void configure(io.vertx.core.net.NetServerOptions,boolean,io.netty.bootstrap.ServerBootstrap)> ==> <java.lang.Boolean: void <clinit>()>
STATIC edge: $r15 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z5) in <io.vertx.core.net.impl.transport.EpollTransport: void configure(io.vertx.core.net.NetServerOptions,boolean,io.netty.bootstrap.ServerBootstrap)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
STATIC edge: $r13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z4) in <io.vertx.core.net.impl.transport.EpollTransport: void configure(io.vertx.core.net.NetServerOptions,boolean,io.netty.bootstrap.ServerBootstrap)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
STATIC edge: $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <io.vertx.core.net.impl.transport.EpollTransport: void configure(io.vertx.core.net.NetServerOptions,boolean,io.netty.bootstrap.ServerBootstrap)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z3) in <io.vertx.core.net.impl.transport.EpollTransport: void configure(io.vertx.core.net.NetServerOptions,boolean,io.netty.bootstrap.ServerBootstrap)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
CLINIT edge: $r13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z4) in <io.vertx.core.net.impl.transport.EpollTransport: void configure(io.vertx.core.net.NetServerOptions,boolean,io.netty.bootstrap.ServerBootstrap)> ==> <java.lang.Boolean: void <clinit>()>
CLINIT edge: $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <io.vertx.core.net.impl.transport.EpollTransport: void configure(io.vertx.core.net.NetServerOptions,boolean,io.netty.bootstrap.ServerBootstrap)> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: $i0 = <io.vertx.core.net.impl.transport.EpollTransport: int pendingFastOpenRequestsThreshold> in <io.vertx.core.net.impl.transport.EpollTransport: void configure(io.vertx.core.net.NetServerOptions,boolean,io.netty.bootstrap.ServerBootstrap)> ==> <io.vertx.core.net.impl.transport.Transport: void <clinit>()>
CLINIT edge: $i0 = <io.vertx.core.net.impl.transport.EpollTransport: int pendingFastOpenRequestsThreshold> in <io.vertx.core.net.impl.transport.EpollTransport: void configure(io.vertx.core.net.NetServerOptions,boolean,io.netty.bootstrap.ServerBootstrap)> ==> <io.vertx.core.net.impl.transport.EpollTransport: void <clinit>()>
CLINIT edge: $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1) in <io.vertx.core.net.impl.transport.KQueueTransport: void configure(io.vertx.core.net.NetServerOptions,boolean,io.netty.bootstrap.ServerBootstrap)> ==> <java.lang.Boolean: void <clinit>()>
STATIC edge: $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1) in <io.vertx.core.net.impl.transport.KQueueTransport: void configure(io.vertx.core.net.NetServerOptions,boolean,io.netty.bootstrap.ServerBootstrap)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
CLINIT edge: $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0) in <io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.NetServerOptions,boolean,io.netty.bootstrap.ServerBootstrap)> ==> <java.lang.Boolean: void <clinit>()>
STATIC edge: $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5) in <io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.NetServerOptions,boolean,io.netty.bootstrap.ServerBootstrap)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6) in <io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.NetServerOptions,boolean,io.netty.bootstrap.ServerBootstrap)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7) in <io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.NetServerOptions,boolean,io.netty.bootstrap.ServerBootstrap)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8) in <io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.NetServerOptions,boolean,io.netty.bootstrap.ServerBootstrap)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i10) in <io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.NetServerOptions,boolean,io.netty.bootstrap.ServerBootstrap)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r30 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z3) in <io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.NetServerOptions,boolean,io.netty.bootstrap.ServerBootstrap)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
STATIC edge: $r27 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2) in <io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.NetServerOptions,boolean,io.netty.bootstrap.ServerBootstrap)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
STATIC edge: $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0) in <io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.NetServerOptions,boolean,io.netty.bootstrap.ServerBootstrap)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
CLINIT edge: $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5) in <io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.NetServerOptions,boolean,io.netty.bootstrap.ServerBootstrap)> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: $r5 = <io.vertx.core.net.impl.PartialPooledByteBufAllocator: io.vertx.core.net.impl.PartialPooledByteBufAllocator INSTANCE> in <io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.NetServerOptions,boolean,io.netty.bootstrap.ServerBootstrap)> ==> <io.vertx.core.net.impl.PartialPooledByteBufAllocator: void <clinit>()>
CLINIT edge: $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6) in <io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.NetServerOptions,boolean,io.netty.bootstrap.ServerBootstrap)> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7) in <io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.NetServerOptions,boolean,io.netty.bootstrap.ServerBootstrap)> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8) in <io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.NetServerOptions,boolean,io.netty.bootstrap.ServerBootstrap)> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: $r24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i10) in <io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.NetServerOptions,boolean,io.netty.bootstrap.ServerBootstrap)> ==> <java.lang.Integer: void <clinit>()>
INTERFACE edge: r1 = interfaceinvoke r0.<io.vertx.core.impl.ContextInternal: io.netty.channel.EventLoop nettyEventLoop()>() in <io.vertx.core.net.impl.HandlerManager: void addHandler(java.lang.Object,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.impl.ContextImpl: io.netty.channel.EventLoop nettyEventLoop()>
INTERFACE edge: r1 = interfaceinvoke r0.<io.vertx.core.impl.ContextInternal: io.netty.channel.EventLoop nettyEventLoop()>() in <io.vertx.core.net.impl.HandlerManager: void addHandler(java.lang.Object,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.impl.EventLoopContext: io.netty.channel.EventLoop nettyEventLoop()>
VIRTUAL edge: virtualinvoke $r3.<io.vertx.core.net.impl.VertxEventLoopGroup: void addWorker(io.netty.channel.EventLoop)>(r1) in <io.vertx.core.net.impl.HandlerManager: void addHandler(java.lang.Object,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup: void addWorker(io.netty.channel.EventLoop)>
SPECIAL edge: specialinvoke $r4.<io.vertx.core.net.impl.HandlerManager$Handlers: void <init>(io.vertx.core.net.impl.HandlerManager$1)>(null) in <io.vertx.core.net.impl.HandlerManager: void addHandler(java.lang.Object,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.net.impl.HandlerManager$Handlers: void <init>(io.vertx.core.net.impl.HandlerManager$1)>
INTERFACE edge: $r6 = interfaceinvoke $r5.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r1, $r4) in <io.vertx.core.net.impl.HandlerManager: void addHandler(java.lang.Object,io.vertx.core.impl.ContextInternal)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r8.<io.vertx.core.net.impl.HandlerHolder: void <init>(io.vertx.core.impl.ContextInternal,java.lang.Object)>(r0, r9) in <io.vertx.core.net.impl.HandlerManager: void addHandler(java.lang.Object,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.net.impl.HandlerHolder: void <init>(io.vertx.core.impl.ContextInternal,java.lang.Object)>
VIRTUAL edge: virtualinvoke r10.<io.vertx.core.net.impl.HandlerManager$Handlers: void addHandler(io.vertx.core.net.impl.HandlerHolder)>($r8) in <io.vertx.core.net.impl.HandlerManager: void addHandler(java.lang.Object,io.vertx.core.impl.ContextInternal)> ==> <io.vertx.core.net.impl.HandlerManager$Handlers: void addHandler(io.vertx.core.net.impl.HandlerHolder)>
INTERFACE edge: interfaceinvoke $r6.<io.netty.channel.ChannelFuture: io.netty.channel.ChannelFuture addListener(io.netty.util.concurrent.GenericFutureListener)>($r7) in <io.vertx.core.net.impl.AsyncResolveConnectHelper: void addListener(io.vertx.core.Handler)> ==> <io.netty.channel.ChannelFuture: io.netty.channel.ChannelFuture addListener(io.netty.util.concurrent.GenericFutureListener)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.net.impl.AsyncResolveConnectHelper: void addListener(io.vertx.core.Handler)> ==> <io.vertx.core.impl.DeploymentManager$lambda_doDeployVerticle_2__17: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.net.impl.AsyncResolveConnectHelper: void addListener(io.vertx.core.Handler)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.net.impl.AsyncResolveConnectHelper: void addListener(io.vertx.core.Handler)> ==> <io.vertx.core.impl.FutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.net.impl.AsyncResolveConnectHelper: void addListener(io.vertx.core.Handler)> ==> <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.net.impl.AsyncResolveConnectHelper: void addListener(io.vertx.core.Handler)> ==> <io.vertx.core.impl.SucceededFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.net.impl.AsyncResolveConnectHelper: void addListener(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.net.impl.AsyncResolveConnectHelper: void addListener(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.net.impl.AsyncResolveConnectHelper: void addListener(io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl$lambda_joinCluster_1__10: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.net.impl.AsyncResolveConnectHelper: void addListener(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.net.impl.AsyncResolveConnectHelper: void addListener(io.vertx.core.Handler)> ==> <io.vertx.core.Starter$lambda_runVerticle_1__1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.net.impl.AsyncResolveConnectHelper: void addListener(io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.net.impl.AsyncResolveConnectHelper: void addListener(io.vertx.core.Handler)> ==> <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.net.impl.AsyncResolveConnectHelper: void addListener(io.vertx.core.Handler)> ==> <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.net.impl.AsyncResolveConnectHelper: void addListener(io.vertx.core.Handler)> ==> <io.vertx.core.Starter$lambda_startVertx_0__2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.net.impl.AsyncResolveConnectHelper: void addListener(io.vertx.core.Handler)> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.net.impl.AsyncResolveConnectHelper: void addListener(io.vertx.core.Handler)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.net.impl.AsyncResolveConnectHelper: void addListener(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_start_3__19: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.net.impl.AsyncResolveConnectHelper: void addListener(io.vertx.core.Handler)> ==> <io.vertx.core.impl.HAManager$lambda_doDeployVerticle_4__7: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.net.impl.AsyncResolveConnectHelper: void addListener(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_close_0__29: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.net.impl.AsyncResolveConnectHelper: void addListener(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.net.impl.AsyncResolveConnectHelper: void addListener(io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.net.impl.AsyncResolveConnectHelper: void addListener(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.net.impl.AsyncResolveConnectHelper: void addListener(io.vertx.core.Handler)> ==> <io.vertx.core.Starter$lambda_createLoggingHandler_2__3: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.net.impl.AsyncResolveConnectHelper: void addListener(io.vertx.core.Handler)> ==> <io.vertx.core.impl.CompositeFutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.net.impl.AsyncResolveConnectHelper: void addListener(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.net.impl.AsyncResolveConnectHelper: void addListener(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_finalize_6__18: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.net.impl.AsyncResolveConnectHelper: void addListener(io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.net.impl.AsyncResolveConnectHelper: void addListener(io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl$lambda_init_0__9: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.net.impl.AsyncResolveConnectHelper: void addListener(io.vertx.core.Handler)> ==> <io.vertx.core.impl.FailedFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.net.impl.AsyncResolveConnectHelper: void addListener(io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.net.impl.AsyncResolveConnectHelper: void addListener(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_close_5__30: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r2) in <io.vertx.core.net.impl.AsyncResolveConnectHelper: void addListener(io.vertx.core.Handler)> ==> <java.util.AbstractList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r2) in <io.vertx.core.net.impl.AsyncResolveConnectHelper: void addListener(io.vertx.core.Handler)> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r2) in <io.vertx.core.net.impl.AsyncResolveConnectHelper: void addListener(io.vertx.core.Handler)> ==> <java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r2) in <io.vertx.core.net.impl.AsyncResolveConnectHelper: void addListener(io.vertx.core.Handler)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<io.vertx.core.net.impl.AsyncResolveConnectHelper$lambda_addListener_0__101: void <init>(io.vertx.core.net.impl.AsyncResolveConnectHelper,io.vertx.core.Handler)>($r0, $r1) in <io.vertx.core.net.impl.AsyncResolveConnectHelper$lambda_addListener_0__101: io.netty.util.concurrent.GenericFutureListener bootstrap$(io.vertx.core.net.impl.AsyncResolveConnectHelper,io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.AsyncResolveConnectHelper$lambda_addListener_0__101: void <init>(io.vertx.core.net.impl.AsyncResolveConnectHelper,io.vertx.core.Handler)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.impl.NetServerImpl$lambda_listen_3__91: void <init>(io.vertx.core.net.impl.NetServerImpl,io.vertx.core.Handler)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.impl.NetServerImpl$lambda_listen_1__92: void <init>(io.vertx.core.Handler,java.lang.Throwable)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.impl.NetServerImpl$lambda_listen_0__90: void <init>(io.vertx.core.net.impl.NetServerImpl,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.impl.AsyncResolveConnectHelper: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.ArrayList: void <init>()>() in <io.vertx.core.net.impl.AsyncResolveConnectHelper: void <init>()> ==> <java.util.ArrayList: void <init>()>
VIRTUAL edge: virtualinvoke $r3.<io.vertx.core.impl.AddressResolver: void resolveHostname(java.lang.String,io.vertx.core.Handler)>(r1, r2) in <io.vertx.core.impl.VertxImpl: void resolveAddress(java.lang.String,io.vertx.core.Handler)> ==> <io.vertx.core.impl.AddressResolver: void resolveHostname(java.lang.String,io.vertx.core.Handler)>
STATIC edge: $r8 = staticinvoke <java.net.InetSocketAddress: java.net.InetSocketAddress createUnresolved(java.lang.String,int)>(r7, 0) in <io.vertx.core.impl.AddressResolver: void resolveHostname(java.lang.String,io.vertx.core.Handler)> ==> <java.net.InetSocketAddress: java.net.InetSocketAddress createUnresolved(java.lang.String,int)>
STATIC edge: $r11 = staticinvoke <io.vertx.core.impl.AddressResolver$lambda_resolveHostname_1__112: io.netty.util.concurrent.GenericFutureListener bootstrap$(io.vertx.core.impl.ContextInternal,io.netty.util.concurrent.Future,io.vertx.core.Handler)>(r3, r9, r10) in <io.vertx.core.impl.AddressResolver: void resolveHostname(java.lang.String,io.vertx.core.Handler)> ==> <io.vertx.core.impl.AddressResolver$lambda_resolveHostname_1__112: io.netty.util.concurrent.GenericFutureListener bootstrap$(io.vertx.core.impl.ContextInternal,io.netty.util.concurrent.Future,io.vertx.core.Handler)>
SPECIAL edge: specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>() in <io.vertx.core.net.impl.transport.Transport: io.netty.channel.ChannelFactory serverChannelFactory(boolean)> ==> <java.lang.IllegalArgumentException: void <init>()>
INTERFACE edge: $r1 = interfaceinvoke r0.<io.vertx.core.net.SocketAddress: java.lang.String path()>() in <io.vertx.core.net.impl.transport.EpollTransport: java.net.SocketAddress convert(io.vertx.core.net.SocketAddress,boolean)> ==> <io.vertx.core.net.impl.SocketAddressImpl: java.lang.String path()>
INTERFACE edge: $r7 = interfaceinvoke r0.<io.vertx.core.net.SocketAddress: java.lang.String path()>() in <io.vertx.core.net.impl.transport.EpollTransport: java.net.SocketAddress convert(io.vertx.core.net.SocketAddress,boolean)> ==> <io.vertx.core.net.impl.SocketAddressImpl: java.lang.String path()>
INTERFACE edge: $r5 = interfaceinvoke r0.<io.vertx.core.net.SocketAddress: java.lang.String host()>() in <io.vertx.core.net.impl.transport.EpollTransport: java.net.SocketAddress convert(io.vertx.core.net.SocketAddress,boolean)> ==> <io.vertx.core.net.impl.SocketAddressImpl: java.lang.String host()>
INTERFACE edge: $i1 = interfaceinvoke r0.<io.vertx.core.net.SocketAddress: int port()>() in <io.vertx.core.net.impl.transport.EpollTransport: java.net.SocketAddress convert(io.vertx.core.net.SocketAddress,boolean)> ==> <io.vertx.core.net.impl.SocketAddressImpl: int port()>
INTERFACE edge: $r2 = interfaceinvoke r0.<io.vertx.core.net.SocketAddress: java.lang.String host()>() in <io.vertx.core.net.impl.transport.EpollTransport: java.net.SocketAddress convert(io.vertx.core.net.SocketAddress,boolean)> ==> <io.vertx.core.net.impl.SocketAddressImpl: java.lang.String host()>
INTERFACE edge: $i0 = interfaceinvoke r0.<io.vertx.core.net.SocketAddress: int port()>() in <io.vertx.core.net.impl.transport.EpollTransport: java.net.SocketAddress convert(io.vertx.core.net.SocketAddress,boolean)> ==> <io.vertx.core.net.impl.SocketAddressImpl: int port()>
SPECIAL edge: specialinvoke $r9.<io.netty.channel.unix.DomainSocketAddress: void <init>(java.lang.String)>($r7) in <io.vertx.core.net.impl.transport.EpollTransport: java.net.SocketAddress convert(io.vertx.core.net.SocketAddress,boolean)> ==> <io.netty.channel.unix.DomainSocketAddress: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r10.<java.net.InetSocketAddress: void <init>(java.lang.String,int)>($r5, $i1) in <io.vertx.core.net.impl.transport.EpollTransport: java.net.SocketAddress convert(io.vertx.core.net.SocketAddress,boolean)> ==> <java.net.InetSocketAddress: void <init>(java.lang.String,int)>
INTERFACE edge: $r1 = interfaceinvoke r0.<io.vertx.core.net.SocketAddress: java.lang.String path()>() in <io.vertx.core.net.impl.transport.KQueueTransport: java.net.SocketAddress convert(io.vertx.core.net.SocketAddress,boolean)> ==> <io.vertx.core.net.impl.SocketAddressImpl: java.lang.String path()>
INTERFACE edge: $r7 = interfaceinvoke r0.<io.vertx.core.net.SocketAddress: java.lang.String path()>() in <io.vertx.core.net.impl.transport.KQueueTransport: java.net.SocketAddress convert(io.vertx.core.net.SocketAddress,boolean)> ==> <io.vertx.core.net.impl.SocketAddressImpl: java.lang.String path()>
INTERFACE edge: $r5 = interfaceinvoke r0.<io.vertx.core.net.SocketAddress: java.lang.String host()>() in <io.vertx.core.net.impl.transport.KQueueTransport: java.net.SocketAddress convert(io.vertx.core.net.SocketAddress,boolean)> ==> <io.vertx.core.net.impl.SocketAddressImpl: java.lang.String host()>
INTERFACE edge: $i1 = interfaceinvoke r0.<io.vertx.core.net.SocketAddress: int port()>() in <io.vertx.core.net.impl.transport.KQueueTransport: java.net.SocketAddress convert(io.vertx.core.net.SocketAddress,boolean)> ==> <io.vertx.core.net.impl.SocketAddressImpl: int port()>
INTERFACE edge: $r2 = interfaceinvoke r0.<io.vertx.core.net.SocketAddress: java.lang.String host()>() in <io.vertx.core.net.impl.transport.KQueueTransport: java.net.SocketAddress convert(io.vertx.core.net.SocketAddress,boolean)> ==> <io.vertx.core.net.impl.SocketAddressImpl: java.lang.String host()>
INTERFACE edge: $i0 = interfaceinvoke r0.<io.vertx.core.net.SocketAddress: int port()>() in <io.vertx.core.net.impl.transport.KQueueTransport: java.net.SocketAddress convert(io.vertx.core.net.SocketAddress,boolean)> ==> <io.vertx.core.net.impl.SocketAddressImpl: int port()>
SPECIAL edge: specialinvoke $r9.<io.netty.channel.unix.DomainSocketAddress: void <init>(java.lang.String)>($r7) in <io.vertx.core.net.impl.transport.KQueueTransport: java.net.SocketAddress convert(io.vertx.core.net.SocketAddress,boolean)> ==> <io.netty.channel.unix.DomainSocketAddress: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r10.<java.net.InetSocketAddress: void <init>(java.lang.String,int)>($r5, $i1) in <io.vertx.core.net.impl.transport.KQueueTransport: java.net.SocketAddress convert(io.vertx.core.net.SocketAddress,boolean)> ==> <java.net.InetSocketAddress: void <init>(java.lang.String,int)>
INTERFACE edge: $r1 = interfaceinvoke r0.<io.vertx.core.net.SocketAddress: java.lang.String path()>() in <io.vertx.core.net.impl.transport.Transport: java.net.SocketAddress convert(io.vertx.core.net.SocketAddress,boolean)> ==> <io.vertx.core.net.impl.SocketAddressImpl: java.lang.String path()>
INTERFACE edge: $r5 = interfaceinvoke r0.<io.vertx.core.net.SocketAddress: java.lang.String host()>() in <io.vertx.core.net.impl.transport.Transport: java.net.SocketAddress convert(io.vertx.core.net.SocketAddress,boolean)> ==> <io.vertx.core.net.impl.SocketAddressImpl: java.lang.String host()>
INTERFACE edge: $i1 = interfaceinvoke r0.<io.vertx.core.net.SocketAddress: int port()>() in <io.vertx.core.net.impl.transport.Transport: java.net.SocketAddress convert(io.vertx.core.net.SocketAddress,boolean)> ==> <io.vertx.core.net.impl.SocketAddressImpl: int port()>
INTERFACE edge: $r2 = interfaceinvoke r0.<io.vertx.core.net.SocketAddress: java.lang.String host()>() in <io.vertx.core.net.impl.transport.Transport: java.net.SocketAddress convert(io.vertx.core.net.SocketAddress,boolean)> ==> <io.vertx.core.net.impl.SocketAddressImpl: java.lang.String host()>
INTERFACE edge: $i0 = interfaceinvoke r0.<io.vertx.core.net.SocketAddress: int port()>() in <io.vertx.core.net.impl.transport.Transport: java.net.SocketAddress convert(io.vertx.core.net.SocketAddress,boolean)> ==> <io.vertx.core.net.impl.SocketAddressImpl: int port()>
SPECIAL edge: specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Domain socket not supported by JDK transport") in <io.vertx.core.net.impl.transport.Transport: java.net.SocketAddress convert(io.vertx.core.net.SocketAddress,boolean)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r4.<java.net.InetSocketAddress: void <init>(java.lang.String,int)>($r5, $i1) in <io.vertx.core.net.impl.transport.Transport: java.net.SocketAddress convert(io.vertx.core.net.SocketAddress,boolean)> ==> <java.net.InetSocketAddress: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.net.impl.transport.EpollTransport$init__103: void <init>()>() in <io.vertx.core.net.impl.transport.EpollTransport$init__103: io.netty.channel.ChannelFactory bootstrap$()> ==> <io.vertx.core.net.impl.transport.EpollTransport$init__103: void <init>()>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.net.impl.transport.EpollTransport$init__102: void <init>()>() in <io.vertx.core.net.impl.transport.EpollTransport$init__102: io.netty.channel.ChannelFactory bootstrap$()> ==> <io.vertx.core.net.impl.transport.EpollTransport$init__102: void <init>()>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.net.impl.transport.KQueueTransport$init__105: void <init>()>() in <io.vertx.core.net.impl.transport.KQueueTransport$init__105: io.netty.channel.ChannelFactory bootstrap$()> ==> <io.vertx.core.net.impl.transport.KQueueTransport$init__105: void <init>()>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.net.impl.transport.KQueueTransport$init__104: void <init>()>() in <io.vertx.core.net.impl.transport.KQueueTransport$init__104: io.netty.channel.ChannelFactory bootstrap$()> ==> <io.vertx.core.net.impl.transport.KQueueTransport$init__104: void <init>()>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.net.impl.transport.Transport$init__106: void <init>()>() in <io.vertx.core.net.impl.transport.Transport$init__106: io.netty.channel.ChannelFactory bootstrap$()> ==> <io.vertx.core.net.impl.transport.Transport$init__106: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.impl.AsyncResolveConnectHelper$lambda_doBind_1__94: void <init>(io.vertx.core.net.impl.AsyncResolveConnectHelper,io.netty.channel.ChannelFuture)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.impl.AsyncResolveConnectHelper$lambda_doBind_3__93: void <init>(io.vertx.core.net.SocketAddress,io.netty.bootstrap.ServerBootstrap,io.vertx.core.net.impl.AsyncResolveConnectHelper)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke r0.<io.vertx.core.http.impl.headers.VertxHttpHeaders: io.vertx.core.http.impl.headers.VertxHttpHeaders add(java.lang.CharSequence,java.lang.CharSequence)>(r1, $r3) in <io.vertx.core.http.impl.headers.VertxHttpHeaders: io.netty.handler.codec.http.HttpHeaders add(java.lang.String,java.lang.Object)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders: io.vertx.core.http.impl.headers.VertxHttpHeaders add(java.lang.CharSequence,java.lang.CharSequence)>
STATIC edge: i0 = staticinvoke <io.netty.util.AsciiString: int hashCode(java.lang.CharSequence)>(r0) in <io.vertx.core.http.impl.headers.VertxHttpHeaders: io.vertx.core.http.impl.headers.VertxHttpHeaders add(java.lang.CharSequence,java.lang.CharSequence)> ==> <io.netty.util.AsciiString: int hashCode(java.lang.CharSequence)>
VIRTUAL edge: $r3 = virtualinvoke r0.<io.vertx.core.http.impl.headers.VertxHttpHeaders: io.vertx.core.http.impl.headers.VertxHttpHeaders add(java.lang.CharSequence,java.lang.CharSequence)>(r1, r2) in <io.vertx.core.http.impl.headers.VertxHttpHeaders: io.vertx.core.http.impl.headers.VertxHttpHeaders add(java.lang.String,java.lang.String)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders: io.vertx.core.http.impl.headers.VertxHttpHeaders add(java.lang.CharSequence,java.lang.CharSequence)>
SPECIAL edge: specialinvoke $r3.<io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: void <init>(int,java.lang.String,java.lang.String)>(i1, r4, r5) in <io.vertx.core.http.CaseInsensitiveHeaders: void add0(int,int,java.lang.String,java.lang.String)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: void <init>(int,java.lang.String,java.lang.String)>
VIRTUAL edge: virtualinvoke $r3.<io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: void addBefore(io.vertx.core.http.CaseInsensitiveHeaders$MapEntry)>($r8) in <io.vertx.core.http.CaseInsensitiveHeaders: void add0(int,int,java.lang.String,java.lang.String)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: void addBefore(io.vertx.core.http.CaseInsensitiveHeaders$MapEntry)>
INTERFACE edge: $r16 = interfaceinvoke $r15.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r0) in <io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec lookupCodec(java.lang.Object,java.lang.String)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
SPECIAL edge: specialinvoke $r18.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec lookupCodec(java.lang.Object,java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No message codec for name: ") in <io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec lookupCodec(java.lang.Object,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0) in <io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec lookupCodec(java.lang.Object,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec lookupCodec(java.lang.Object,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r21) in <io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec lookupCodec(java.lang.Object,java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() in <io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec lookupCodec(java.lang.Object,java.lang.String)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() in <io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec lookupCodec(java.lang.Object,java.lang.String)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r9 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() in <io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec lookupCodec(java.lang.Object,java.lang.String)> ==> <java.lang.Object: java.lang.Class getClass()>
INTERFACE edge: $r14 = interfaceinvoke $r12.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>($r13) in <io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec lookupCodec(java.lang.Object,java.lang.String)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r5 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>($r4) in <io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec lookupCodec(java.lang.Object,java.lang.String)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
SPECIAL edge: specialinvoke $r7.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec lookupCodec(java.lang.Object,java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No message codec for type: ") in <io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec lookupCodec(java.lang.Object,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9) in <io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec lookupCodec(java.lang.Object,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec lookupCodec(java.lang.Object,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11) in <io.vertx.core.eventbus.impl.CodecManager: io.vertx.core.eventbus.MessageCodec lookupCodec(java.lang.Object,java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.eventbus.impl.MessageImpl: void <init>(java.lang.String,java.lang.String,io.vertx.core.MultiMap,java.lang.Object,io.vertx.core.eventbus.MessageCodec,boolean,io.vertx.core.eventbus.impl.EventBusImpl)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.eventbus.impl.MessageImpl: void <init>(java.lang.String,java.lang.String,io.vertx.core.MultiMap,java.lang.Object,io.vertx.core.eventbus.MessageCodec,boolean,io.vertx.core.eventbus.impl.EventBusImpl)>(r1, r2, r3, r4, r5, z0, r6) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void <init>(io.vertx.core.net.impl.ServerID,java.lang.String,java.lang.String,io.vertx.core.MultiMap,java.lang.Object,io.vertx.core.eventbus.MessageCodec,boolean,io.vertx.core.eventbus.impl.EventBusImpl)> ==> <io.vertx.core.eventbus.impl.MessageImpl: void <init>(java.lang.String,java.lang.String,io.vertx.core.MultiMap,java.lang.Object,io.vertx.core.eventbus.MessageCodec,boolean,io.vertx.core.eventbus.impl.EventBusImpl)>
VIRTUAL edge: l0 = virtualinvoke r1.<io.vertx.core.eventbus.DeliveryOptions: long getSendTimeout()>() in <io.vertx.core.eventbus.impl.EventBusImpl: io.vertx.core.eventbus.impl.HandlerRegistration createReplyHandlerRegistration(io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.DeliveryOptions,io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.DeliveryOptions: long getSendTimeout()>
VIRTUAL edge: r3 = virtualinvoke r2.<io.vertx.core.eventbus.impl.EventBusImpl: java.lang.String generateReplyAddress()>() in <io.vertx.core.eventbus.impl.EventBusImpl: io.vertx.core.eventbus.impl.HandlerRegistration createReplyHandlerRegistration(io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.DeliveryOptions,io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.EventBusImpl: java.lang.String generateReplyAddress()>
VIRTUAL edge: r3 = virtualinvoke r2.<io.vertx.core.eventbus.impl.EventBusImpl: java.lang.String generateReplyAddress()>() in <io.vertx.core.eventbus.impl.EventBusImpl: io.vertx.core.eventbus.impl.HandlerRegistration createReplyHandlerRegistration(io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.DeliveryOptions,io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: java.lang.String generateReplyAddress()>
VIRTUAL edge: r5 = virtualinvoke r2.<io.vertx.core.eventbus.impl.EventBusImpl: io.vertx.core.Handler convertHandler(io.vertx.core.Handler)>(r0) in <io.vertx.core.eventbus.impl.EventBusImpl: io.vertx.core.eventbus.impl.HandlerRegistration createReplyHandlerRegistration(io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.DeliveryOptions,io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.EventBusImpl: io.vertx.core.Handler convertHandler(io.vertx.core.Handler)>
VIRTUAL edge: virtualinvoke r4.<io.vertx.core.eventbus.impl.MessageImpl: void setReplyAddress(java.lang.String)>(r3) in <io.vertx.core.eventbus.impl.EventBusImpl: io.vertx.core.eventbus.impl.HandlerRegistration createReplyHandlerRegistration(io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.DeliveryOptions,io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.MessageImpl: void setReplyAddress(java.lang.String)>
SPECIAL edge: specialinvoke $r6.<io.vertx.core.eventbus.impl.HandlerRegistration: void <init>(io.vertx.core.Vertx,io.vertx.core.spi.metrics.EventBusMetrics,io.vertx.core.eventbus.impl.EventBusImpl,java.lang.String,java.lang.String,boolean,io.vertx.core.Handler,long)>($r9, $r8, r2, r3, $r7, 1, r0, l0) in <io.vertx.core.eventbus.impl.EventBusImpl: io.vertx.core.eventbus.impl.HandlerRegistration createReplyHandlerRegistration(io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.DeliveryOptions,io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void <init>(io.vertx.core.Vertx,io.vertx.core.spi.metrics.EventBusMetrics,io.vertx.core.eventbus.impl.EventBusImpl,java.lang.String,java.lang.String,boolean,io.vertx.core.Handler,long)>
VIRTUAL edge: virtualinvoke $r6.<io.vertx.core.eventbus.impl.HandlerRegistration: io.vertx.core.eventbus.MessageConsumer handler(io.vertx.core.Handler)>(r5) in <io.vertx.core.eventbus.impl.EventBusImpl: io.vertx.core.eventbus.impl.HandlerRegistration createReplyHandlerRegistration(io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.DeliveryOptions,io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: io.vertx.core.eventbus.MessageConsumer handler(io.vertx.core.Handler)>
CLINIT edge: $r4 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l0) in <io.vertx.core.eventbus.impl.EventBusImpl: java.lang.String generateReplyAddress()> ==> <java.lang.Long: void <clinit>()>
STATIC edge: $r4 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l0) in <io.vertx.core.eventbus.impl.EventBusImpl: java.lang.String generateReplyAddress()> ==> <java.lang.Long: java.lang.String toString(long)>
STATIC edge: $r2 = staticinvoke <java.util.UUID: java.util.UUID randomUUID()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: java.lang.String generateReplyAddress()> ==> <java.util.UUID: java.util.UUID randomUUID()>
STATIC edge: $r2 = staticinvoke <io.vertx.core.eventbus.impl.EventBusImpl$lambda_convertHandler_3__113: io.vertx.core.Handler bootstrap$(io.vertx.core.eventbus.impl.EventBusImpl,io.vertx.core.Handler)>(r0, r1) in <io.vertx.core.eventbus.impl.EventBusImpl: io.vertx.core.Handler convertHandler(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_convertHandler_3__113: io.vertx.core.Handler bootstrap$(io.vertx.core.eventbus.impl.EventBusImpl,io.vertx.core.Handler)>
STATIC edge: $r8 = staticinvoke <io.vertx.core.eventbus.impl.HandlerRegistration$lambda_new_0__114: io.vertx.core.Handler bootstrap$(io.vertx.core.eventbus.impl.HandlerRegistration,io.vertx.core.spi.metrics.EventBusMetrics,java.lang.String,long,java.lang.String)>(r0, r3, r5, l0, r6) in <io.vertx.core.eventbus.impl.HandlerRegistration: void <init>(io.vertx.core.Vertx,io.vertx.core.spi.metrics.EventBusMetrics,io.vertx.core.eventbus.impl.EventBusImpl,java.lang.String,java.lang.String,boolean,io.vertx.core.Handler,long)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration$lambda_new_0__114: io.vertx.core.Handler bootstrap$(io.vertx.core.eventbus.impl.HandlerRegistration,io.vertx.core.spi.metrics.EventBusMetrics,java.lang.String,long,java.lang.String)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: void <init>(io.vertx.core.eventbus.impl.EventBusImpl,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.DeliveryOptions,io.vertx.core.eventbus.impl.HandlerRegistration)>(r1, r2, r3, r4) in <io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: void <init>(io.vertx.core.eventbus.impl.EventBusImpl,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.DeliveryOptions,io.vertx.core.eventbus.impl.HandlerRegistration,io.vertx.core.eventbus.impl.EventBusImpl$1)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: void <init>(io.vertx.core.eventbus.impl.EventBusImpl,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.DeliveryOptions,io.vertx.core.eventbus.impl.HandlerRegistration)>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: void next()> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: void next()> ==> <io.vertx.core.json.JsonArray$Iter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: void next()> ==> <io.vertx.core.json.JsonObject$Iter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: void next()> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: void next()> ==> <java.util.Scanner: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: void next()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: void next()> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: boolean hasNext()>
INTERFACE edge: $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: void next()> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object next()>
INTERFACE edge: $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: void next()> ==> <io.vertx.core.json.JsonArray$Iter: java.lang.Object next()>
INTERFACE edge: $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: void next()> ==> <io.vertx.core.json.JsonObject$Iter: java.lang.Object next()>
INTERFACE edge: $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: void next()> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: java.lang.Object next()>
INTERFACE edge: $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: void next()> ==> <java.util.Scanner: java.lang.Object next()>
INTERFACE edge: $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: void next()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: java.lang.Object next()>
INTERFACE edge: $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: void next()> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: java.lang.Object next()>
INTERFACE edge: interfaceinvoke r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: void next()> ==> <io.vertx.core.impl.DeploymentManager$lambda_doDeployVerticle_2__17: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: void next()> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: void next()> ==> <io.vertx.core.impl.FutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: void next()> ==> <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: void next()> ==> <io.vertx.core.impl.SucceededFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: void next()> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: void next()> ==> <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: void next()> ==> <io.vertx.core.impl.VertxImpl$lambda_joinCluster_1__10: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: void next()> ==> <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: void next()> ==> <io.vertx.core.Starter$lambda_runVerticle_1__1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: void next()> ==> <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: void next()> ==> <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: void next()> ==> <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: void next()> ==> <io.vertx.core.Starter$lambda_startVertx_0__2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: void next()> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: void next()> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: void next()> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_start_3__19: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: void next()> ==> <io.vertx.core.impl.HAManager$lambda_doDeployVerticle_4__7: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: void next()> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_close_0__29: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: void next()> ==> <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: void next()> ==> <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: void next()> ==> <io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: void next()> ==> <io.vertx.core.Starter$lambda_createLoggingHandler_2__3: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: void next()> ==> <io.vertx.core.impl.CompositeFutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: void next()> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: void next()> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_finalize_6__18: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: void next()> ==> <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: void next()> ==> <io.vertx.core.impl.VertxImpl$lambda_init_0__9: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: void next()> ==> <io.vertx.core.impl.FailedFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: void next()> ==> <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(r0) in <io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: void next()> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_close_5__30: void handle(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: void next()>() in <io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: void next()> ==> <io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: void next()>
VIRTUAL edge: virtualinvoke $r11.<io.vertx.core.logging.Logger: void error(java.lang.Object,java.lang.Throwable)>("Failure in interceptor", $r9) in <io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: void next()> ==> <io.vertx.core.logging.Logger: void error(java.lang.Object,java.lang.Throwable)>
VIRTUAL edge: virtualinvoke $r5.<io.vertx.core.eventbus.impl.EventBusImpl: void sendOrPub(io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)>(r0) in <io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: void next()> ==> <io.vertx.core.eventbus.impl.EventBusImpl: void sendOrPub(io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)>
VIRTUAL edge: virtualinvoke $r5.<io.vertx.core.eventbus.impl.EventBusImpl: void sendOrPub(io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)>(r0) in <io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: void next()> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void sendOrPub(io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)>
VIRTUAL edge: virtualinvoke $r4.<io.vertx.core.eventbus.impl.EventBusImpl: void sendReply(io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext,io.vertx.core.eventbus.impl.MessageImpl)>(r0, $r3) in <io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: void next()> ==> <io.vertx.core.eventbus.impl.EventBusImpl: void sendReply(io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext,io.vertx.core.eventbus.impl.MessageImpl)>
VIRTUAL edge: virtualinvoke $r4.<io.vertx.core.eventbus.impl.EventBusImpl: void sendReply(io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext,io.vertx.core.eventbus.impl.MessageImpl)>(r0, $r3) in <io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: void next()> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void sendReply(io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext,io.vertx.core.eventbus.impl.MessageImpl)>
CLINIT edge: $r2 = staticinvoke <io.vertx.core.Vertx: io.vertx.core.Context currentContext()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void sendOrPub(io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)> ==> <io.vertx.core.Vertx: void <clinit>()>
STATIC edge: $r7 = staticinvoke <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_sendOrPub_8__115: io.vertx.core.Handler bootstrap$(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus,io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)>(r3, r0) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void sendOrPub(io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_sendOrPub_8__115: io.vertx.core.Handler bootstrap$(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus,io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)>
STATIC edge: $r9 = staticinvoke <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_sendOrPub_7__116: io.vertx.core.Handler bootstrap$(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus,io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)>(r3, r0) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void sendOrPub(io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_sendOrPub_7__116: io.vertx.core.Handler bootstrap$(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus,io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)>
STATIC edge: $r2 = staticinvoke <io.vertx.core.Vertx: io.vertx.core.Context currentContext()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void sendOrPub(io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)> ==> <io.vertx.core.Vertx: io.vertx.core.Context currentContext()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.streams.impl.InboundBuffer$lambda_fetch_1__95: void <init>(io.vertx.core.streams.impl.InboundBuffer)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopHolder: void <init>(io.netty.channel.EventLoop)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() in <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopHolder: boolean equals(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() in <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopHolder: boolean equals(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.logging.Log4jLogDelegate: void log(org.apache.log4j.Level,java.lang.Object)>($r2, r1) in <io.vertx.core.logging.Log4jLogDelegate: void trace(java.lang.Object)> ==> <io.vertx.core.logging.Log4jLogDelegate: void log(org.apache.log4j.Level,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object)>(0, r1) in <io.vertx.core.logging.SLF4JLogDelegate: void trace(java.lang.Object)> ==> <io.vertx.core.logging.SLF4JLogDelegate: void log(int,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object)>($r2, r1) in <io.vertx.core.logging.JULLogDelegate: void trace(java.lang.Object)> ==> <io.vertx.core.logging.JULLogDelegate: void log(java.util.logging.Level,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.logging.Log4j2LogDelegate: void log(org.apache.logging.log4j.Level,java.lang.Object)>($r2, r1) in <io.vertx.core.logging.Log4j2LogDelegate: void trace(java.lang.Object)> ==> <io.vertx.core.logging.Log4j2LogDelegate: void log(org.apache.logging.log4j.Level,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.impl.launcher.commands.Watcher$FileInfo: void <init>(long,long)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: char[] toCharArray()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.eventbus.impl.EventBusImpl$lambda_callCompletionHandlerAsync_4__97: void <init>(io.vertx.core.Handler)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_removeSub_14__98: void <init>(io.vertx.core.Handler)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: interfaceinvoke $r3.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelFuture write(java.lang.Object,io.netty.channel.ChannelPromise)>(r1, r2) in <io.vertx.core.net.impl.ConnectionBase: void write(java.lang.Object,io.netty.channel.ChannelPromise)> ==> <io.vertx.core.net.impl.PartialPooledByteBufAllocator$PooledChannelHandlerContext: io.netty.channel.ChannelFuture write(java.lang.Object,io.netty.channel.ChannelPromise)>
INTERFACE edge: interfaceinvoke $r5.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelFuture writeAndFlush(java.lang.Object,io.netty.channel.ChannelPromise)>(r1, r2) in <io.vertx.core.net.impl.ConnectionBase: void write(java.lang.Object,io.netty.channel.ChannelPromise)> ==> <io.vertx.core.net.impl.PartialPooledByteBufAllocator$PooledChannelHandlerContext: io.netty.channel.ChannelFuture writeAndFlush(java.lang.Object,io.netty.channel.ChannelPromise)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.impl.ContextInternal: void runOnContext(io.vertx.core.Handler)>($r4) in <io.vertx.core.net.impl.ConnectionBase: void queueForWrite(java.lang.Object,io.netty.channel.ChannelPromise)> ==> <io.vertx.core.impl.ContextImpl: void runOnContext(io.vertx.core.Handler)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.impl.ContextInternal: void runOnContext(io.vertx.core.Handler)>($r4) in <io.vertx.core.net.impl.ConnectionBase: void queueForWrite(java.lang.Object,io.netty.channel.ChannelPromise)> ==> <io.vertx.core.impl.EventLoopContext: void runOnContext(io.vertx.core.Handler)>
SPECIAL edge: specialinvoke $r3.<io.vertx.core.net.impl.ConnectionBase$lambda_queueForWrite_0__117: void <init>(io.vertx.core.net.impl.ConnectionBase,java.lang.Object,io.netty.channel.ChannelPromise)>($r0, $r1, $r2) in <io.vertx.core.net.impl.ConnectionBase$lambda_queueForWrite_0__117: io.vertx.core.Handler bootstrap$(io.vertx.core.net.impl.ConnectionBase,java.lang.Object,io.netty.channel.ChannelPromise)> ==> <io.vertx.core.net.impl.ConnectionBase$lambda_queueForWrite_0__117: void <init>(io.vertx.core.net.impl.ConnectionBase,java.lang.Object,io.netty.channel.ChannelPromise)>
SPECIAL edge: l0 = specialinvoke r0.<io.vertx.core.http.impl.Http1xServerConnection: long getBytes(java.lang.Object)>(r2) in <io.vertx.core.http.impl.Http1xServerConnection: void reportBytesWritten(java.lang.Object)> ==> <io.vertx.core.http.impl.Http1xServerConnection: long getBytes(java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.http.impl.Http1xServerConnection: void reportBytesWritten(java.lang.Object)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Metrics could not be updated to include bytes written because of unknown object ") in <io.vertx.core.http.impl.Http1xServerConnection: void reportBytesWritten(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>() in <io.vertx.core.http.impl.Http1xServerConnection: void reportBytesWritten(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6) in <io.vertx.core.http.impl.Http1xServerConnection: void reportBytesWritten(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" being written.") in <io.vertx.core.http.impl.Http1xServerConnection: void reportBytesWritten(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.http.impl.Http1xServerConnection: void reportBytesWritten(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r4.<io.vertx.core.logging.Logger: void warn(java.lang.Object)>($r9) in <io.vertx.core.http.impl.Http1xServerConnection: void reportBytesWritten(java.lang.Object)> ==> <io.vertx.core.logging.Logger: void warn(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>() in <io.vertx.core.net.impl.ConnectionBase: void <clinit>()> ==> <java.lang.Class: boolean desiredAssertionStatus()>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.VertxException: void <init>(java.lang.String,boolean)>("Connection was closed", 1) in <io.vertx.core.net.impl.ConnectionBase: void <clinit>()> ==> <io.vertx.core.VertxException: void <init>(java.lang.String,boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()>() in <io.vertx.core.eventbus.impl.codecs.JsonObjectMessageCodec: io.vertx.core.json.JsonObject transform(io.vertx.core.json.JsonObject)> ==> <io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.json.JsonArray: io.vertx.core.json.JsonArray copy()>() in <io.vertx.core.eventbus.impl.codecs.JsonArrayMessageCodec: io.vertx.core.json.JsonArray transform(io.vertx.core.json.JsonArray)> ==> <io.vertx.core.json.JsonArray: io.vertx.core.json.JsonArray copy()>
INTERFACE edge: $r1 = interfaceinvoke r0.<io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer copy()>() in <io.vertx.core.eventbus.impl.codecs.BufferMessageCodec: io.vertx.core.buffer.Buffer transform(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.buffer.impl.BufferImpl: io.vertx.core.buffer.Buffer copy()>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.impl.ContextInternal: void runOnContext(io.vertx.core.Handler)>($r4) in <io.vertx.core.http.impl.HttpServerImpl: void executeCloseDone(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,java.lang.Exception)> ==> <io.vertx.core.impl.ContextImpl: void runOnContext(io.vertx.core.Handler)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.impl.ContextInternal: void runOnContext(io.vertx.core.Handler)>($r4) in <io.vertx.core.http.impl.HttpServerImpl: void executeCloseDone(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,java.lang.Exception)> ==> <io.vertx.core.impl.EventLoopContext: void runOnContext(io.vertx.core.Handler)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.http.impl.HttpHandlers: void <init>(io.vertx.core.http.impl.HttpServerImpl,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.Handler)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $r19 = interfaceinvoke $r18.<io.vertx.core.impl.VertxInternal: java.util.Map sharedHttpServers()>() in <io.vertx.core.http.impl.HttpServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl: java.util.Map sharedHttpServers()>
INTERFACE edge: interfaceinvoke $r19.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r20) in <io.vertx.core.http.impl.HttpServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <java.util.HashMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r19.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r20) in <io.vertx.core.http.impl.HttpServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <java.util.IdentityHashMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r19.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r20) in <io.vertx.core.http.impl.HttpServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <java.util.Hashtable: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r19.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r20) in <io.vertx.core.http.impl.HttpServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <java.util.EnumMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r19.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r20) in <io.vertx.core.http.impl.HttpServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r19.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r20) in <io.vertx.core.http.impl.HttpServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <java.security.Provider: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r19.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r20) in <io.vertx.core.http.impl.HttpServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <java.util.jar.Attributes: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r19.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r20) in <io.vertx.core.http.impl.HttpServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <java.util.TreeMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r19.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r20) in <io.vertx.core.http.impl.HttpServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r19.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r20) in <io.vertx.core.http.impl.HttpServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <java.util.WeakHashMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: r3 = interfaceinvoke $r2.<io.vertx.core.impl.VertxInternal: io.vertx.core.impl.ContextInternal getContext()>() in <io.vertx.core.http.impl.HttpServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.ContextInternal getContext()>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Collection values()>() in <io.vertx.core.http.impl.HttpServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <java.util.HashMap: java.util.Collection values()>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Collection values()>() in <io.vertx.core.http.impl.HttpServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <java.util.IdentityHashMap: java.util.Collection values()>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Collection values()>() in <io.vertx.core.http.impl.HttpServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <java.util.Hashtable: java.util.Collection values()>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Collection values()>() in <io.vertx.core.http.impl.HttpServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <java.util.EnumMap: java.util.Collection values()>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Collection values()>() in <io.vertx.core.http.impl.HttpServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Collection values()>() in <io.vertx.core.http.impl.HttpServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <java.security.Provider: java.util.Collection values()>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Collection values()>() in <io.vertx.core.http.impl.HttpServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <java.util.jar.Attributes: java.util.Collection values()>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Collection values()>() in <io.vertx.core.http.impl.HttpServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <java.util.AbstractMap: java.util.Collection values()>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Collection values()>() in <io.vertx.core.http.impl.HttpServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Collection values()>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Collection values()>() in <io.vertx.core.http.impl.HttpServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <java.util.WeakHashMap: java.util.Collection values()>
INTERFACE edge: r22 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.http.impl.HttpServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <io.vertx.core.impl.ConcurrentHashSet: java.util.Iterator iterator()>
INTERFACE edge: r22 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.http.impl.HttpServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: r22 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.http.impl.HttpServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: r22 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.http.impl.HttpServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r22 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.http.impl.HttpServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <java.util.AbstractList: java.util.Iterator iterator()>
INTERFACE edge: r22 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.http.impl.HttpServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2: java.util.Iterator iterator()>
INTERFACE edge: r22 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.http.impl.HttpServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$1: java.util.Iterator iterator()>
INTERFACE edge: r22 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.http.impl.HttpServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r22 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.http.impl.HttpServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r22 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.http.impl.HttpServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
INTERFACE edge: r22 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.http.impl.HttpServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <java.util.concurrent.ConcurrentLinkedQueue: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r22.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.http.impl.HttpServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r22.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.http.impl.HttpServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <io.vertx.core.json.JsonArray$Iter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r22.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.http.impl.HttpServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <io.vertx.core.json.JsonObject$Iter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r22.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.http.impl.HttpServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r22.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.http.impl.HttpServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <java.util.Scanner: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r22.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.http.impl.HttpServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r22.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.http.impl.HttpServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: boolean hasNext()>
INTERFACE edge: $r16 = interfaceinvoke r22.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.http.impl.HttpServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object next()>
INTERFACE edge: $r16 = interfaceinvoke r22.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.http.impl.HttpServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <io.vertx.core.json.JsonArray$Iter: java.lang.Object next()>
INTERFACE edge: $r16 = interfaceinvoke r22.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.http.impl.HttpServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <io.vertx.core.json.JsonObject$Iter: java.lang.Object next()>
INTERFACE edge: $r16 = interfaceinvoke r22.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.http.impl.HttpServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: java.lang.Object next()>
INTERFACE edge: $r16 = interfaceinvoke r22.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.http.impl.HttpServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <java.util.Scanner: java.lang.Object next()>
INTERFACE edge: $r16 = interfaceinvoke r22.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.http.impl.HttpServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: java.lang.Object next()>
INTERFACE edge: $r16 = interfaceinvoke r22.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.http.impl.HttpServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: java.lang.Object next()>
VIRTUAL edge: virtualinvoke r17.<io.vertx.core.net.impl.ConnectionBase: void close()>() in <io.vertx.core.http.impl.HttpServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.NetSocketImpl: void close()>
VIRTUAL edge: virtualinvoke r17.<io.vertx.core.net.impl.ConnectionBase: void close()>() in <io.vertx.core.http.impl.HttpServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.Http2ServerConnection: void close()>
VIRTUAL edge: virtualinvoke r17.<io.vertx.core.net.impl.ConnectionBase: void close()>() in <io.vertx.core.http.impl.HttpServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.Http2ConnectionBase: void close()>
VIRTUAL edge: virtualinvoke r17.<io.vertx.core.net.impl.ConnectionBase: void close()>() in <io.vertx.core.http.impl.HttpServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.ConnectionBase: void close()>
VIRTUAL edge: virtualinvoke r17.<io.vertx.core.net.impl.ConnectionBase: void close()>() in <io.vertx.core.http.impl.HttpServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.Http1xServerConnection: void close()>
VIRTUAL edge: virtualinvoke r17.<io.vertx.core.net.impl.ConnectionBase: void close()>() in <io.vertx.core.http.impl.HttpServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.Http1xClientConnection: void close()>
INTERFACE edge: $r7 = interfaceinvoke $r6.<io.vertx.core.impl.VertxInternal: io.vertx.core.impl.ContextInternal getContext()>() in <io.vertx.core.http.impl.HttpServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.ContextInternal getContext()>
SPECIAL edge: specialinvoke $r15.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Context was changed") in <io.vertx.core.http.impl.HttpServerImpl: void actualClose(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r2.<io.vertx.core.http.impl.HttpServerImpl$lambda_executeCloseDone_18__109: void <init>(io.vertx.core.Handler,io.vertx.core.Future)>($r0, $r1) in <io.vertx.core.http.impl.HttpServerImpl$lambda_executeCloseDone_18__109: io.vertx.core.Handler bootstrap$(io.vertx.core.Handler,io.vertx.core.Future)> ==> <io.vertx.core.http.impl.HttpServerImpl$lambda_executeCloseDone_18__109: void <init>(io.vertx.core.Handler,io.vertx.core.Future)>
SPECIAL edge: specialinvoke $r4.<io.vertx.core.http.impl.HttpServerImpl$lambda_actualClose_17__110: void <init>(io.vertx.core.http.impl.HttpServerImpl,io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,io.netty.channel.group.ChannelGroupFuture)>($r0, $r1, $r2, $r3) in <io.vertx.core.http.impl.HttpServerImpl$lambda_actualClose_17__110: io.netty.util.concurrent.GenericFutureListener bootstrap$(io.vertx.core.http.impl.HttpServerImpl,io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,io.netty.channel.group.ChannelGroupFuture)> ==> <io.vertx.core.http.impl.HttpServerImpl$lambda_actualClose_17__110: void <init>(io.vertx.core.http.impl.HttpServerImpl,io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,io.netty.channel.group.ChannelGroupFuture)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Context: void removeCloseHook(io.vertx.core.Closeable)>(r0) in <io.vertx.core.impl.WorkerExecutorImpl: void close()> ==> <io.vertx.core.impl.ContextImpl: void removeCloseHook(io.vertx.core.Closeable)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Context: void removeCloseHook(io.vertx.core.Closeable)>(r0) in <io.vertx.core.impl.WorkerExecutorImpl: void close()> ==> <io.vertx.core.impl.EventLoopContext: void removeCloseHook(io.vertx.core.Closeable)>
VIRTUAL edge: virtualinvoke $r4.<io.vertx.core.impl.VertxImpl$SharedWorkerPool: void release()>() in <io.vertx.core.impl.WorkerExecutorImpl: void close()> ==> <io.vertx.core.impl.VertxImpl$SharedWorkerPool: void release()>
CLINIT edge: $r4 = staticinvoke <io.vertx.core.impl.VertxImpl: java.util.Map access$300(io.vertx.core.impl.VertxImpl)>($r3) in <io.vertx.core.impl.VertxImpl$SharedWorkerPool: void release()> ==> <io.vertx.core.impl.VertxImpl: void <clinit>()>
STATIC edge: $r4 = staticinvoke <io.vertx.core.impl.VertxImpl: java.util.Map access$300(io.vertx.core.impl.VertxImpl)>($r3) in <io.vertx.core.impl.VertxImpl$SharedWorkerPool: void release()> ==> <io.vertx.core.impl.VertxImpl: java.util.Map access$300(io.vertx.core.impl.VertxImpl)>
SPECIAL edge: specialinvoke r2.<io.vertx.core.eventbus.impl.HandlerRegistration: void doUnregister(io.vertx.core.Handler)>(r0) in <io.vertx.core.eventbus.impl.HandlerRegistration: void unregister(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void doUnregister(io.vertx.core.Handler)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.http.impl.HttpServerImpl$lambda_close_16__99: void <init>(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.Handler)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.http.impl.HttpServerImpl$lambda_static_0__100: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<io.vertx.core.http.impl.HttpClientImpl: io.vertx.core.impl.VertxInternal getVertx()>() in <io.vertx.core.http.impl.HttpClientRequestBase: long cancelOutstandingTimeoutTimer()> ==> <io.vertx.core.http.impl.HttpClientImpl: io.vertx.core.impl.VertxInternal getVertx()>
INTERFACE edge: interfaceinvoke $r2.<io.vertx.core.impl.VertxInternal: boolean cancelTimer(long)>($l2) in <io.vertx.core.http.impl.HttpClientRequestBase: long cancelOutstandingTimeoutTimer()> ==> <io.vertx.core.impl.VertxImpl: boolean cancelTimer(long)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r5) in <io.vertx.core.http.impl.HttpClientRequestPushPromise: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.impl.DeploymentManager$lambda_doDeployVerticle_2__17: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r5) in <io.vertx.core.http.impl.HttpClientRequestPushPromise: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r5) in <io.vertx.core.http.impl.HttpClientRequestPushPromise: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.impl.FutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r5) in <io.vertx.core.http.impl.HttpClientRequestPushPromise: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r5) in <io.vertx.core.http.impl.HttpClientRequestPushPromise: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.impl.SucceededFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r5) in <io.vertx.core.http.impl.HttpClientRequestPushPromise: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r5) in <io.vertx.core.http.impl.HttpClientRequestPushPromise: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r5) in <io.vertx.core.http.impl.HttpClientRequestPushPromise: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.impl.VertxImpl$lambda_joinCluster_1__10: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r5) in <io.vertx.core.http.impl.HttpClientRequestPushPromise: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r5) in <io.vertx.core.http.impl.HttpClientRequestPushPromise: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.Starter$lambda_runVerticle_1__1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r5) in <io.vertx.core.http.impl.HttpClientRequestPushPromise: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r5) in <io.vertx.core.http.impl.HttpClientRequestPushPromise: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r5) in <io.vertx.core.http.impl.HttpClientRequestPushPromise: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r5) in <io.vertx.core.http.impl.HttpClientRequestPushPromise: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.Starter$lambda_startVertx_0__2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r5) in <io.vertx.core.http.impl.HttpClientRequestPushPromise: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r5) in <io.vertx.core.http.impl.HttpClientRequestPushPromise: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r5) in <io.vertx.core.http.impl.HttpClientRequestPushPromise: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_start_3__19: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r5) in <io.vertx.core.http.impl.HttpClientRequestPushPromise: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.impl.HAManager$lambda_doDeployVerticle_4__7: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r5) in <io.vertx.core.http.impl.HttpClientRequestPushPromise: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_close_0__29: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r5) in <io.vertx.core.http.impl.HttpClientRequestPushPromise: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r5) in <io.vertx.core.http.impl.HttpClientRequestPushPromise: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r5) in <io.vertx.core.http.impl.HttpClientRequestPushPromise: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r5) in <io.vertx.core.http.impl.HttpClientRequestPushPromise: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.Starter$lambda_createLoggingHandler_2__3: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r5) in <io.vertx.core.http.impl.HttpClientRequestPushPromise: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.impl.CompositeFutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r5) in <io.vertx.core.http.impl.HttpClientRequestPushPromise: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r5) in <io.vertx.core.http.impl.HttpClientRequestPushPromise: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_finalize_6__18: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r5) in <io.vertx.core.http.impl.HttpClientRequestPushPromise: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r5) in <io.vertx.core.http.impl.HttpClientRequestPushPromise: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.impl.VertxImpl$lambda_init_0__9: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r5) in <io.vertx.core.http.impl.HttpClientRequestPushPromise: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.impl.FailedFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r5) in <io.vertx.core.http.impl.HttpClientRequestPushPromise: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.Handler: void handle(java.lang.Object)>(r5) in <io.vertx.core.http.impl.HttpClientRequestPushPromise: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_close_5__30: void handle(java.lang.Object)>
VIRTUAL edge: i0 = virtualinvoke r2.<io.vertx.core.http.impl.HttpClientResponseImpl: int statusCode()>() in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.http.impl.HttpClientResponseImpl: int statusCode()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<io.vertx.core.http.impl.HttpClientImpl: java.util.function.Function redirectHandler()>() in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.http.impl.HttpClientImpl: java.util.function.Function redirectHandler()>
INTERFACE edge: $r11 = interfaceinvoke $r10.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>(r2) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <java.util.function.Function: java.lang.Object apply(java.lang.Object)>
INTERFACE edge: interfaceinvoke r12.<io.vertx.core.Future: io.vertx.core.Future setHandler(io.vertx.core.Handler)>($r13) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.impl.CompositeFutureImpl: io.vertx.core.Future setHandler(io.vertx.core.Handler)>
INTERFACE edge: interfaceinvoke r12.<io.vertx.core.Future: io.vertx.core.Future setHandler(io.vertx.core.Handler)>($r13) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.impl.SucceededFuture: io.vertx.core.Future setHandler(io.vertx.core.Handler)>
INTERFACE edge: interfaceinvoke r12.<io.vertx.core.Future: io.vertx.core.Future setHandler(io.vertx.core.Handler)>($r13) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.impl.FutureImpl: io.vertx.core.Future setHandler(io.vertx.core.Handler)>
INTERFACE edge: interfaceinvoke r12.<io.vertx.core.Future: io.vertx.core.Future setHandler(io.vertx.core.Handler)>($r13) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.impl.FailedFuture: io.vertx.core.Future setHandler(io.vertx.core.Handler)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.impl.DeploymentManager$lambda_doDeployVerticle_2__17: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.impl.FutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.impl.SucceededFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.impl.VertxImpl$lambda_joinCluster_1__10: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.Starter$lambda_runVerticle_1__1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.Starter$lambda_startVertx_0__2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_start_3__19: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.impl.HAManager$lambda_doDeployVerticle_4__7: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_close_0__29: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.Starter$lambda_createLoggingHandler_2__3: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.impl.CompositeFutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_finalize_6__18: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.impl.VertxImpl$lambda_init_0__9: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.impl.FailedFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_close_5__30: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.Handler: void handle(java.lang.Object)>(r2) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.impl.DeploymentManager$lambda_doDeployVerticle_2__17: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.Handler: void handle(java.lang.Object)>(r2) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.Handler: void handle(java.lang.Object)>(r2) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.impl.FutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.Handler: void handle(java.lang.Object)>(r2) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.Handler: void handle(java.lang.Object)>(r2) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.impl.SucceededFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.Handler: void handle(java.lang.Object)>(r2) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.Handler: void handle(java.lang.Object)>(r2) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.Handler: void handle(java.lang.Object)>(r2) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.impl.VertxImpl$lambda_joinCluster_1__10: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.Handler: void handle(java.lang.Object)>(r2) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.Handler: void handle(java.lang.Object)>(r2) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.Starter$lambda_runVerticle_1__1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.Handler: void handle(java.lang.Object)>(r2) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.Handler: void handle(java.lang.Object)>(r2) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.Handler: void handle(java.lang.Object)>(r2) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.Handler: void handle(java.lang.Object)>(r2) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.Starter$lambda_startVertx_0__2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.Handler: void handle(java.lang.Object)>(r2) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.Handler: void handle(java.lang.Object)>(r2) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.Handler: void handle(java.lang.Object)>(r2) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_start_3__19: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.Handler: void handle(java.lang.Object)>(r2) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.impl.HAManager$lambda_doDeployVerticle_4__7: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.Handler: void handle(java.lang.Object)>(r2) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_close_0__29: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.Handler: void handle(java.lang.Object)>(r2) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.Handler: void handle(java.lang.Object)>(r2) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.Handler: void handle(java.lang.Object)>(r2) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.Handler: void handle(java.lang.Object)>(r2) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.Starter$lambda_createLoggingHandler_2__3: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.Handler: void handle(java.lang.Object)>(r2) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.impl.CompositeFutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.Handler: void handle(java.lang.Object)>(r2) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.Handler: void handle(java.lang.Object)>(r2) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_finalize_6__18: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.Handler: void handle(java.lang.Object)>(r2) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.Handler: void handle(java.lang.Object)>(r2) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.impl.VertxImpl$lambda_init_0__9: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.Handler: void handle(java.lang.Object)>(r2) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.impl.FailedFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.Handler: void handle(java.lang.Object)>(r2) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<io.vertx.core.Handler: void handle(java.lang.Object)>(r2) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_close_5__30: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.impl.DeploymentManager$lambda_doDeployVerticle_2__17: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.impl.FutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.impl.SucceededFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.impl.VertxImpl$lambda_joinCluster_1__10: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.Starter$lambda_runVerticle_1__1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.Starter$lambda_startVertx_0__2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_start_3__19: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.impl.HAManager$lambda_doDeployVerticle_4__7: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_close_0__29: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.Starter$lambda_createLoggingHandler_2__3: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.impl.CompositeFutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_finalize_6__18: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.impl.VertxImpl$lambda_init_0__9: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.impl.FailedFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<io.vertx.core.Handler: void handle(java.lang.Object)>(null) in <io.vertx.core.http.impl.HttpClientRequestImpl: void doHandleResponse(io.vertx.core.http.impl.HttpClientResponseImpl,long)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_close_5__30: void handle(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.http.impl.HttpClientRequestBase: long cancelOutstandingTimeoutTimer()>() in <io.vertx.core.http.impl.HttpClientRequestBase: void handleException(java.lang.Throwable)> ==> <io.vertx.core.http.impl.HttpClientRequestBase: long cancelOutstandingTimeoutTimer()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.Object: java.lang.Class getClass()>() in <io.vertx.core.http.impl.HttpClientRequestBase: void handleException(java.lang.Throwable)> ==> <java.lang.Object: java.lang.Class getClass()>
INTERFACE edge: interfaceinvoke r9.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.http.impl.HttpClientRequestBase: void handleException(java.lang.Throwable)> ==> <io.vertx.core.impl.DeploymentManager$lambda_doDeployVerticle_2__17: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r9.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.http.impl.HttpClientRequestBase: void handleException(java.lang.Throwable)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r9.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.http.impl.HttpClientRequestBase: void handleException(java.lang.Throwable)> ==> <io.vertx.core.impl.FutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r9.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.http.impl.HttpClientRequestBase: void handleException(java.lang.Throwable)> ==> <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r9.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.http.impl.HttpClientRequestBase: void handleException(java.lang.Throwable)> ==> <io.vertx.core.impl.SucceededFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r9.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.http.impl.HttpClientRequestBase: void handleException(java.lang.Throwable)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r9.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.http.impl.HttpClientRequestBase: void handleException(java.lang.Throwable)> ==> <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r9.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.http.impl.HttpClientRequestBase: void handleException(java.lang.Throwable)> ==> <io.vertx.core.impl.VertxImpl$lambda_joinCluster_1__10: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r9.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.http.impl.HttpClientRequestBase: void handleException(java.lang.Throwable)> ==> <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r9.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.http.impl.HttpClientRequestBase: void handleException(java.lang.Throwable)> ==> <io.vertx.core.Starter$lambda_runVerticle_1__1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r9.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.http.impl.HttpClientRequestBase: void handleException(java.lang.Throwable)> ==> <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r9.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.http.impl.HttpClientRequestBase: void handleException(java.lang.Throwable)> ==> <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r9.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.http.impl.HttpClientRequestBase: void handleException(java.lang.Throwable)> ==> <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r9.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.http.impl.HttpClientRequestBase: void handleException(java.lang.Throwable)> ==> <io.vertx.core.Starter$lambda_startVertx_0__2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r9.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.http.impl.HttpClientRequestBase: void handleException(java.lang.Throwable)> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r9.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.http.impl.HttpClientRequestBase: void handleException(java.lang.Throwable)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r9.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.http.impl.HttpClientRequestBase: void handleException(java.lang.Throwable)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_start_3__19: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r9.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.http.impl.HttpClientRequestBase: void handleException(java.lang.Throwable)> ==> <io.vertx.core.impl.HAManager$lambda_doDeployVerticle_4__7: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r9.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.http.impl.HttpClientRequestBase: void handleException(java.lang.Throwable)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_close_0__29: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r9.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.http.impl.HttpClientRequestBase: void handleException(java.lang.Throwable)> ==> <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r9.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.http.impl.HttpClientRequestBase: void handleException(java.lang.Throwable)> ==> <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r9.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.http.impl.HttpClientRequestBase: void handleException(java.lang.Throwable)> ==> <io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r9.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.http.impl.HttpClientRequestBase: void handleException(java.lang.Throwable)> ==> <io.vertx.core.Starter$lambda_createLoggingHandler_2__3: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r9.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.http.impl.HttpClientRequestBase: void handleException(java.lang.Throwable)> ==> <io.vertx.core.impl.CompositeFutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r9.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.http.impl.HttpClientRequestBase: void handleException(java.lang.Throwable)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r9.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.http.impl.HttpClientRequestBase: void handleException(java.lang.Throwable)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_finalize_6__18: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r9.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.http.impl.HttpClientRequestBase: void handleException(java.lang.Throwable)> ==> <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r9.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.http.impl.HttpClientRequestBase: void handleException(java.lang.Throwable)> ==> <io.vertx.core.impl.VertxImpl$lambda_init_0__9: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r9.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.http.impl.HttpClientRequestBase: void handleException(java.lang.Throwable)> ==> <io.vertx.core.impl.FailedFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r9.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.http.impl.HttpClientRequestBase: void handleException(java.lang.Throwable)> ==> <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r9.<io.vertx.core.Handler: void handle(java.lang.Object)>(r3) in <io.vertx.core.http.impl.HttpClientRequestBase: void handleException(java.lang.Throwable)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_close_5__30: void handle(java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.http.impl.HttpClientRequestImpl$lambda_doHandleResponse_4__107: void <init>(io.vertx.core.http.impl.HttpClientRequestImpl,long)>($r0, $l0) in <io.vertx.core.http.impl.HttpClientRequestImpl$lambda_doHandleResponse_4__107: io.vertx.core.Handler bootstrap$(io.vertx.core.http.impl.HttpClientRequestImpl,long)> ==> <io.vertx.core.http.impl.HttpClientRequestImpl$lambda_doHandleResponse_4__107: void <init>(io.vertx.core.http.impl.HttpClientRequestImpl,long)>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.http.impl.HttpClientRequestBase$error__108: void <init>(io.vertx.core.logging.Logger)>($r0) in <io.vertx.core.http.impl.HttpClientRequestBase$error__108: io.vertx.core.Handler bootstrap$(io.vertx.core.logging.Logger)> ==> <io.vertx.core.http.impl.HttpClientRequestBase$error__108: void <init>(io.vertx.core.logging.Logger)>
SPECIAL edge: $r1 = specialinvoke r0.<io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setLogActivity(boolean)>(z0) in <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setLogActivity(boolean)> ==> <io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setLogActivity(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setLogActivity(boolean)>(z0) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setLogActivity(boolean)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetServerOptions setLogActivity(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setLogActivity(boolean)>(z0) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setLogActivity(boolean)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setLogActivity(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setLogActivity(boolean)>(z0) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.TCPSSLOptions setLogActivity(boolean)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setLogActivity(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setLogActivity(boolean)>(z0) in <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.TCPSSLOptions setLogActivity(boolean)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setLogActivity(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setLogActivity(boolean)>(z0) in <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.TCPSSLOptions setLogActivity(boolean)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setLogActivity(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setLogActivity(boolean)>(z0) in <io.vertx.core.net.NetClientOptions: io.vertx.core.net.TCPSSLOptions setLogActivity(boolean)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setLogActivity(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setLogActivity(boolean)>(z0) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetServerOptions setLogActivity(boolean)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setLogActivity(boolean)>
SPECIAL edge: $r1 = specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setLogActivity(boolean)>(z0) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setLogActivity(boolean)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setLogActivity(boolean)>
SPECIAL edge: $r1 = specialinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setLogActivity(boolean)>(z0) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setLogActivity(boolean)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setLogActivity(boolean)>
SPECIAL edge: $r1 = specialinvoke r0.<io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setLogActivity(boolean)>(z0) in <io.vertx.core.datagram.DatagramSocketOptions: io.vertx.core.datagram.DatagramSocketOptions setLogActivity(boolean)> ==> <io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setLogActivity(boolean)>
SPECIAL edge: $r1 = specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setLogActivity(boolean)>(z0) in <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setLogActivity(boolean)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setLogActivity(boolean)>
SPECIAL edge: $r1 = specialinvoke r0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setLogActivity(boolean)>(z0) in <io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setLogActivity(boolean)> ==> <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setLogActivity(boolean)>
SPECIAL edge: $r1 = specialinvoke r0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setLogActivity(boolean)>(z0) in <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setLogActivity(boolean)> ==> <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setLogActivity(boolean)>
SPECIAL edge: $r1 = specialinvoke r0.<io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setReceiveBufferSize(int)>(i0) in <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setReceiveBufferSize(int)> ==> <io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setReceiveBufferSize(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setReceiveBufferSize(int)>(i0) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setReceiveBufferSize(int)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetServerOptions setReceiveBufferSize(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setReceiveBufferSize(int)>(i0) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setReceiveBufferSize(int)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setReceiveBufferSize(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setReceiveBufferSize(int)>(i0) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.TCPSSLOptions setReceiveBufferSize(int)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setReceiveBufferSize(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setReceiveBufferSize(int)>(i0) in <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.TCPSSLOptions setReceiveBufferSize(int)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setReceiveBufferSize(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setReceiveBufferSize(int)>(i0) in <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.TCPSSLOptions setReceiveBufferSize(int)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setReceiveBufferSize(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setReceiveBufferSize(int)>(i0) in <io.vertx.core.net.NetClientOptions: io.vertx.core.net.TCPSSLOptions setReceiveBufferSize(int)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setReceiveBufferSize(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setReceiveBufferSize(int)>(i0) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetServerOptions setReceiveBufferSize(int)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setReceiveBufferSize(int)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setReceiveBufferSize(int)>(i0) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setReceiveBufferSize(int)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setReceiveBufferSize(int)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setReceiveBufferSize(int)>(i0) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setReceiveBufferSize(int)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setReceiveBufferSize(int)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setReceiveBufferSize(int)>(i0) in <io.vertx.core.datagram.DatagramSocketOptions: io.vertx.core.datagram.DatagramSocketOptions setReceiveBufferSize(int)> ==> <io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setReceiveBufferSize(int)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setReceiveBufferSize(int)>(i0) in <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setReceiveBufferSize(int)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setReceiveBufferSize(int)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setReceiveBufferSize(int)>(i0) in <io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setReceiveBufferSize(int)> ==> <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setReceiveBufferSize(int)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setReceiveBufferSize(int)>(i0) in <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setReceiveBufferSize(int)> ==> <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setReceiveBufferSize(int)>
SPECIAL edge: $r1 = specialinvoke r0.<io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setReuseAddress(boolean)>(z0) in <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setReuseAddress(boolean)> ==> <io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setReuseAddress(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setReuseAddress(boolean)>(z0) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setReuseAddress(boolean)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetServerOptions setReuseAddress(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setReuseAddress(boolean)>(z0) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setReuseAddress(boolean)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setReuseAddress(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setReuseAddress(boolean)>(z0) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.TCPSSLOptions setReuseAddress(boolean)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setReuseAddress(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setReuseAddress(boolean)>(z0) in <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.TCPSSLOptions setReuseAddress(boolean)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setReuseAddress(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setReuseAddress(boolean)>(z0) in <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.TCPSSLOptions setReuseAddress(boolean)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setReuseAddress(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setReuseAddress(boolean)>(z0) in <io.vertx.core.net.NetClientOptions: io.vertx.core.net.TCPSSLOptions setReuseAddress(boolean)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setReuseAddress(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setReuseAddress(boolean)>(z0) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetServerOptions setReuseAddress(boolean)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setReuseAddress(boolean)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setReuseAddress(boolean)>(z0) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setReuseAddress(boolean)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setReuseAddress(boolean)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setReuseAddress(boolean)>(z0) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setReuseAddress(boolean)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setReuseAddress(boolean)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setReuseAddress(boolean)>(z0) in <io.vertx.core.datagram.DatagramSocketOptions: io.vertx.core.datagram.DatagramSocketOptions setReuseAddress(boolean)> ==> <io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setReuseAddress(boolean)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setReuseAddress(boolean)>(z0) in <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setReuseAddress(boolean)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setReuseAddress(boolean)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setReuseAddress(boolean)>(z0) in <io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setReuseAddress(boolean)> ==> <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setReuseAddress(boolean)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setReuseAddress(boolean)>(z0) in <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setReuseAddress(boolean)> ==> <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setReuseAddress(boolean)>
SPECIAL edge: $r1 = specialinvoke r0.<io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setReusePort(boolean)>(z0) in <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setReusePort(boolean)> ==> <io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setReusePort(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setReusePort(boolean)>(z0) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setReusePort(boolean)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetServerOptions setReusePort(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setReusePort(boolean)>(z0) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setReusePort(boolean)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setReusePort(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setReusePort(boolean)>(z0) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.TCPSSLOptions setReusePort(boolean)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setReusePort(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setReusePort(boolean)>(z0) in <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.TCPSSLOptions setReusePort(boolean)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setReusePort(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setReusePort(boolean)>(z0) in <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.TCPSSLOptions setReusePort(boolean)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setReusePort(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setReusePort(boolean)>(z0) in <io.vertx.core.net.NetClientOptions: io.vertx.core.net.TCPSSLOptions setReusePort(boolean)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setReusePort(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setReusePort(boolean)>(z0) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetServerOptions setReusePort(boolean)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setReusePort(boolean)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setReusePort(boolean)>(z0) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setReusePort(boolean)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setReusePort(boolean)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setReusePort(boolean)>(z0) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setReusePort(boolean)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setReusePort(boolean)>
SPECIAL edge: $r1 = specialinvoke r0.<io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setReusePort(boolean)>(z0) in <io.vertx.core.datagram.DatagramSocketOptions: io.vertx.core.datagram.DatagramSocketOptions setReusePort(boolean)> ==> <io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setReusePort(boolean)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setReusePort(boolean)>(z0) in <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setReusePort(boolean)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setReusePort(boolean)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setReusePort(boolean)>(z0) in <io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setReusePort(boolean)> ==> <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setReusePort(boolean)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setReusePort(boolean)>(z0) in <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setReusePort(boolean)> ==> <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setReusePort(boolean)>
SPECIAL edge: $r1 = specialinvoke r0.<io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setSendBufferSize(int)>(i0) in <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSendBufferSize(int)> ==> <io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setSendBufferSize(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setSendBufferSize(int)>(i0) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setSendBufferSize(int)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetServerOptions setSendBufferSize(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setSendBufferSize(int)>(i0) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setSendBufferSize(int)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setSendBufferSize(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setSendBufferSize(int)>(i0) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.TCPSSLOptions setSendBufferSize(int)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setSendBufferSize(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setSendBufferSize(int)>(i0) in <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.TCPSSLOptions setSendBufferSize(int)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setSendBufferSize(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setSendBufferSize(int)>(i0) in <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.TCPSSLOptions setSendBufferSize(int)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setSendBufferSize(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setSendBufferSize(int)>(i0) in <io.vertx.core.net.NetClientOptions: io.vertx.core.net.TCPSSLOptions setSendBufferSize(int)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setSendBufferSize(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setSendBufferSize(int)>(i0) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetServerOptions setSendBufferSize(int)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setSendBufferSize(int)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSendBufferSize(int)>(i0) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setSendBufferSize(int)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSendBufferSize(int)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setSendBufferSize(int)>(i0) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setSendBufferSize(int)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setSendBufferSize(int)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setSendBufferSize(int)>(i0) in <io.vertx.core.datagram.DatagramSocketOptions: io.vertx.core.datagram.DatagramSocketOptions setSendBufferSize(int)> ==> <io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setSendBufferSize(int)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSendBufferSize(int)>(i0) in <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setSendBufferSize(int)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSendBufferSize(int)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setSendBufferSize(int)>(i0) in <io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setSendBufferSize(int)> ==> <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setSendBufferSize(int)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setSendBufferSize(int)>(i0) in <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setSendBufferSize(int)> ==> <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setSendBufferSize(int)>
SPECIAL edge: $r1 = specialinvoke r0.<io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setTrafficClass(int)>(i0) in <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTrafficClass(int)> ==> <io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setTrafficClass(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setTrafficClass(int)>(i0) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setTrafficClass(int)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetServerOptions setTrafficClass(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setTrafficClass(int)>(i0) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.TCPSSLOptions setTrafficClass(int)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setTrafficClass(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setTrafficClass(int)>(i0) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.TCPSSLOptions setTrafficClass(int)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setTrafficClass(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setTrafficClass(int)>(i0) in <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.TCPSSLOptions setTrafficClass(int)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setTrafficClass(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setTrafficClass(int)>(i0) in <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.TCPSSLOptions setTrafficClass(int)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setTrafficClass(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setTrafficClass(int)>(i0) in <io.vertx.core.net.NetClientOptions: io.vertx.core.net.TCPSSLOptions setTrafficClass(int)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setTrafficClass(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setTrafficClass(int)>(i0) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetServerOptions setTrafficClass(int)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setTrafficClass(int)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTrafficClass(int)>(i0) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setTrafficClass(int)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTrafficClass(int)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setTrafficClass(int)>(i0) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setTrafficClass(int)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setTrafficClass(int)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setTrafficClass(int)>(i0) in <io.vertx.core.datagram.DatagramSocketOptions: io.vertx.core.datagram.DatagramSocketOptions setTrafficClass(int)> ==> <io.vertx.core.net.NetworkOptions: io.vertx.core.net.NetworkOptions setTrafficClass(int)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTrafficClass(int)>(i0) in <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setTrafficClass(int)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTrafficClass(int)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setTrafficClass(int)>(i0) in <io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setTrafficClass(int)> ==> <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setTrafficClass(int)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setTrafficClass(int)>(i0) in <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setTrafficClass(int)> ==> <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setTrafficClass(int)>
SPECIAL edge: $r1 = specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setIdleTimeout(int)>(i0) in <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setIdleTimeout(int)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setIdleTimeout(int)>
SPECIAL edge: $r2 = specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setIdleTimeoutUnit(java.util.concurrent.TimeUnit)>(r1) in <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setIdleTimeoutUnit(java.util.concurrent.TimeUnit)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setIdleTimeoutUnit(java.util.concurrent.TimeUnit)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>(r1) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.net.NetServerOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)> ==> <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>(r1) in <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>(r1) in <io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)> ==> <io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>
SPECIAL edge: $r2 = specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>(r1) in <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>
SPECIAL edge: $r2 = specialinvoke r0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>(r1) in <io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)> ==> <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>
SPECIAL edge: $r2 = specialinvoke r0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>(r1) in <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)> ==> <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>
SPECIAL edge: $r2 = specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>(r1) in <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>
SPECIAL edge: $r2 = specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setJdkSslEngineOptions(io.vertx.core.net.JdkSSLEngineOptions)>(r1) in <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setJdkSslEngineOptions(io.vertx.core.net.JdkSSLEngineOptions)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setJdkSslEngineOptions(io.vertx.core.net.JdkSSLEngineOptions)>
SPECIAL edge: $r2 = specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setOpenSslEngineOptions(io.vertx.core.net.OpenSSLEngineOptions)>(r1) in <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setOpenSslEngineOptions(io.vertx.core.net.OpenSSLEngineOptions)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setOpenSslEngineOptions(io.vertx.core.net.OpenSSLEngineOptions)>
SPECIAL edge: $r1 = specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSoLinger(int)>(i0) in <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setSoLinger(int)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSoLinger(int)>
SPECIAL edge: $r1 = specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSsl(boolean)>(z0) in <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setSsl(boolean)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSsl(boolean)>
SPECIAL edge: $r1 = specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpCork(boolean)>(z0) in <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setTcpCork(boolean)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpCork(boolean)>
SPECIAL edge: $r1 = specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpFastOpen(boolean)>(z0) in <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setTcpFastOpen(boolean)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpFastOpen(boolean)>
SPECIAL edge: $r1 = specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpKeepAlive(boolean)>(z0) in <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setTcpKeepAlive(boolean)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpKeepAlive(boolean)>
SPECIAL edge: $r1 = specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpNoDelay(boolean)>(z0) in <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setTcpNoDelay(boolean)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpNoDelay(boolean)>
SPECIAL edge: $r1 = specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpQuickAck(boolean)>(z0) in <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setTcpQuickAck(boolean)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpQuickAck(boolean)>
SPECIAL edge: $r1 = specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setUseAlpn(boolean)>(z0) in <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setUseAlpn(boolean)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setUseAlpn(boolean)>
SPECIAL edge: $r1 = specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setUsePooledBuffers(boolean)>(z0) in <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setUsePooledBuffers(boolean)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setUsePooledBuffers(boolean)>
SPECIAL edge: specialinvoke $r0.<java.util.TreeSet: void <init>(java.util.Comparator)>($r1) in <io.vertx.core.http.impl.headers.VertxHttpHeaders: java.util.Set names()> ==> <java.util.TreeSet: void <init>(java.util.Comparator)>
INTERFACE edge: interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r7) in <io.vertx.core.http.impl.headers.VertxHttpHeaders: java.util.Set names()> ==> <java.util.TreeSet: boolean add(java.lang.Object)>
VIRTUAL edge: $r6 = virtualinvoke r8.<io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.CharSequence getKey()>() in <io.vertx.core.http.impl.headers.VertxHttpHeaders: java.util.Set names()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.CharSequence getKey()>
INTERFACE edge: $r7 = interfaceinvoke $r6.<java.lang.CharSequence: java.lang.String toString()>() in <io.vertx.core.http.impl.headers.VertxHttpHeaders: java.util.Set names()> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: $r7 = interfaceinvoke $r6.<java.lang.CharSequence: java.lang.String toString()>() in <io.vertx.core.http.impl.headers.VertxHttpHeaders: java.util.Set names()> ==> <java.lang.String: java.lang.String toString()>
INTERFACE edge: $r7 = interfaceinvoke $r6.<java.lang.CharSequence: java.lang.String toString()>() in <io.vertx.core.http.impl.headers.VertxHttpHeaders: java.util.Set names()> ==> <java.lang.StringBuffer: java.lang.String toString()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.Map: int size()>() in <io.vertx.core.impl.ConcurrentHashSet: int size()> ==> <java.util.HashMap: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.Map: int size()>() in <io.vertx.core.impl.ConcurrentHashSet: int size()> ==> <java.util.IdentityHashMap: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.Map: int size()>() in <io.vertx.core.impl.ConcurrentHashSet: int size()> ==> <java.util.Hashtable: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.Map: int size()>() in <io.vertx.core.impl.ConcurrentHashSet: int size()> ==> <java.util.EnumMap: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.Map: int size()>() in <io.vertx.core.impl.ConcurrentHashSet: int size()> ==> <java.util.concurrent.ConcurrentHashMap: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.Map: int size()>() in <io.vertx.core.impl.ConcurrentHashSet: int size()> ==> <java.util.jar.Attributes: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.Map: int size()>() in <io.vertx.core.impl.ConcurrentHashSet: int size()> ==> <java.util.TreeMap: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.Map: int size()>() in <io.vertx.core.impl.ConcurrentHashSet: int size()> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.Map: int size()>() in <io.vertx.core.impl.ConcurrentHashSet: int size()> ==> <java.util.WeakHashMap: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r2.<java.util.List: int size()>() in <io.vertx.core.net.impl.VertxEventLoopGroup$1: int size()> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$1: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r2.<java.util.List: int size()>() in <io.vertx.core.net.impl.VertxEventLoopGroup$1: int size()> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r2.<java.util.List: int size()>() in <io.vertx.core.net.impl.VertxEventLoopGroup$1: int size()> ==> <java.util.concurrent.CopyOnWriteArrayList: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r2.<java.util.List: int size()>() in <io.vertx.core.net.impl.VertxEventLoopGroup$1: int size()> ==> <java.util.ArrayList: int size()>
SPECIAL edge: $i0 = specialinvoke r0.<io.vertx.core.net.NetworkOptions: int getSendBufferSize()>() in <io.vertx.core.datagram.DatagramSocketOptions: int getSendBufferSize()> ==> <io.vertx.core.net.NetworkOptions: int getSendBufferSize()>
SPECIAL edge: $i0 = specialinvoke r0.<io.vertx.core.net.NetworkOptions: int getReceiveBufferSize()>() in <io.vertx.core.datagram.DatagramSocketOptions: int getReceiveBufferSize()> ==> <io.vertx.core.net.NetworkOptions: int getReceiveBufferSize()>
SPECIAL edge: $i0 = specialinvoke r0.<io.vertx.core.net.NetworkOptions: int getTrafficClass()>() in <io.vertx.core.datagram.DatagramSocketOptions: int getTrafficClass()> ==> <io.vertx.core.net.NetworkOptions: int getTrafficClass()>
SPECIAL edge: r22 = specialinvoke r1.<io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManagerFactory getTrustMgrFactory(io.vertx.core.impl.VertxInternal,java.lang.String)>(r2, null) in <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext getContext(io.vertx.core.impl.VertxInternal,java.lang.String)> ==> <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManagerFactory getTrustMgrFactory(io.vertx.core.impl.VertxInternal,java.lang.String)>
SPECIAL edge: $r15 = specialinvoke r1.<io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext createContext(io.vertx.core.impl.VertxInternal,javax.net.ssl.X509KeyManager,javax.net.ssl.TrustManagerFactory)>(r2, null, r22) in <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext getContext(io.vertx.core.impl.VertxInternal,java.lang.String)> ==> <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext createContext(io.vertx.core.impl.VertxInternal,javax.net.ssl.X509KeyManager,javax.net.ssl.TrustManagerFactory)>
SPECIAL edge: r26 = specialinvoke r1.<io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManagerFactory getTrustMgrFactory(io.vertx.core.impl.VertxInternal,java.lang.String)>(r2, r0) in <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext getContext(io.vertx.core.impl.VertxInternal,java.lang.String)> ==> <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManagerFactory getTrustMgrFactory(io.vertx.core.impl.VertxInternal,java.lang.String)>
SPECIAL edge: specialinvoke $r21.<io.vertx.core.VertxException: void <init>(java.lang.Throwable)>($r20) in <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext getContext(io.vertx.core.impl.VertxInternal,java.lang.String)> ==> <io.vertx.core.VertxException: void <init>(java.lang.Throwable)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<io.vertx.core.net.KeyCertOptions: java.util.function.Function keyManagerMapper(io.vertx.core.Vertx)>(r2) in <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext getContext(io.vertx.core.impl.VertxInternal,java.lang.String)> ==> <io.vertx.core.net.KeyCertOptions: java.util.function.Function keyManagerMapper(io.vertx.core.Vertx)>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>(r0) in <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext getContext(io.vertx.core.impl.VertxInternal,java.lang.String)> ==> <java.util.function.Function: java.lang.Object apply(java.lang.Object)>
SPECIAL edge: specialinvoke $r19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r18) in <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext getContext(io.vertx.core.impl.VertxInternal,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
INTERFACE edge: $r7 = interfaceinvoke r24.<javax.net.ssl.X509KeyManager: java.security.cert.X509Certificate[] getCertificateChain(java.lang.String)>(null) in <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext getContext(io.vertx.core.impl.VertxInternal,java.lang.String)> ==> <io.vertx.core.net.impl.KeyStoreHelper$1: java.security.cert.X509Certificate[] getCertificateChain(java.lang.String)>
INTERFACE edge: $r10 = interfaceinvoke $r6.<java.util.Map: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>($r8, $r9) in <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext getContext(io.vertx.core.impl.VertxInternal,java.lang.String)> ==> <java.util.Map: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>
INTERFACE edge: $r10 = interfaceinvoke $r6.<java.util.Map: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>($r8, $r9) in <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext getContext(io.vertx.core.impl.VertxInternal,java.lang.String)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>
SPECIAL edge: specialinvoke $r17.<io.vertx.core.VertxException: void <init>(java.lang.Throwable)>($r16) in <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext getContext(io.vertx.core.impl.VertxInternal,java.lang.String)> ==> <io.vertx.core.VertxException: void <init>(java.lang.Throwable)>
CLINIT edge: $r33 = staticinvoke <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManager createTrustAllTrustManager()>() in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManagerFactory getTrustMgrFactory(io.vertx.core.impl.VertxInternal,java.lang.String)> ==> <io.vertx.core.net.impl.SSLHelper: void <clinit>()>
STATIC edge: r34 = staticinvoke <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManager[] createUntrustRevokedCertTrustManager(javax.net.ssl.TrustManager[],java.util.ArrayList)>(r34, $r15) in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManagerFactory getTrustMgrFactory(io.vertx.core.impl.VertxInternal,java.lang.String)> ==> <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManager[] createUntrustRevokedCertTrustManager(javax.net.ssl.TrustManager[],java.util.ArrayList)>
STATIC edge: $r17 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>() in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManagerFactory getTrustMgrFactory(io.vertx.core.impl.VertxInternal,java.lang.String)> ==> <java.util.stream.Collectors: java.util.stream.Collector toList()>
STATIC edge: r40 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>("X.509") in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManagerFactory getTrustMgrFactory(io.vertx.core.impl.VertxInternal,java.lang.String)> ==> <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>
STATIC edge: r39 = staticinvoke <java.util.stream.Stream: java.util.stream.Stream concat(java.util.stream.Stream,java.util.stream.Stream)>(r38, $r14) in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManagerFactory getTrustMgrFactory(io.vertx.core.impl.VertxInternal,java.lang.String)> ==> <java.util.stream.Stream: java.util.stream.Stream concat(java.util.stream.Stream,java.util.stream.Stream)>
STATIC edge: $r12 = staticinvoke <io.vertx.core.net.impl.SSLHelper$readFileBlocking__119: java.util.function.Function bootstrap$(io.vertx.core.file.FileSystem)>($r10) in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManagerFactory getTrustMgrFactory(io.vertx.core.impl.VertxInternal,java.lang.String)> ==> <io.vertx.core.net.impl.SSLHelper$readFileBlocking__119: java.util.function.Function bootstrap$(io.vertx.core.file.FileSystem)>
STATIC edge: $r8 = staticinvoke <io.vertx.core.net.impl.SSLHelper$lambda_getTrustMgrFactory_0__118: java.util.function.Function bootstrap$(io.vertx.core.impl.VertxInternal)>(r7) in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManagerFactory getTrustMgrFactory(io.vertx.core.impl.VertxInternal,java.lang.String)> ==> <io.vertx.core.net.impl.SSLHelper$lambda_getTrustMgrFactory_0__118: java.util.function.Function bootstrap$(io.vertx.core.impl.VertxInternal)>
STATIC edge: $r33 = staticinvoke <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManager createTrustAllTrustManager()>() in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManagerFactory getTrustMgrFactory(io.vertx.core.impl.VertxInternal,java.lang.String)> ==> <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManager createTrustAllTrustManager()>
CLINIT edge: $r41 = new io.vertx.core.net.impl.VertxTrustManagerFactory in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManagerFactory getTrustMgrFactory(io.vertx.core.impl.VertxInternal,java.lang.String)> ==> <io.vertx.core.net.impl.VertxTrustManagerFactory: void <clinit>()>
CLINIT edge: r34 = staticinvoke <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManager[] createUntrustRevokedCertTrustManager(javax.net.ssl.TrustManager[],java.util.ArrayList)>(r34, $r15) in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManagerFactory getTrustMgrFactory(io.vertx.core.impl.VertxInternal,java.lang.String)> ==> <io.vertx.core.net.impl.SSLHelper: void <clinit>()>
CLINIT edge: r38 = <io.vertx.core.net.impl.SSLHelper: java.util.List DEFAULT_JDK_CIPHER_SUITE> in <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext createContext(io.vertx.core.impl.VertxInternal,javax.net.ssl.X509KeyManager,javax.net.ssl.TrustManagerFactory)> ==> <io.vertx.core.net.impl.SSLHelper: void <clinit>()>
STATIC edge: $r21 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>() in <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext createContext(io.vertx.core.impl.VertxInternal,javax.net.ssl.X509KeyManager,javax.net.ssl.TrustManagerFactory)> ==> <java.util.stream.Collectors: java.util.stream.Collector toList()>
STATIC edge: $r19 = staticinvoke <io.vertx.core.net.impl.SSLHelper$get__120: java.util.function.Function bootstrap$(java.util.Map)>($r17) in <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext createContext(io.vertx.core.impl.VertxInternal,javax.net.ssl.X509KeyManager,javax.net.ssl.TrustManagerFactory)> ==> <io.vertx.core.net.impl.SSLHelper$get__120: java.util.function.Function bootstrap$(java.util.Map)>
STATIC edge: r38 = staticinvoke <io.netty.handler.ssl.OpenSsl: java.util.Set availableOpenSslCipherSuites()>() in <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext createContext(io.vertx.core.impl.VertxInternal,javax.net.ssl.X509KeyManager,javax.net.ssl.TrustManagerFactory)> ==> <io.netty.handler.ssl.OpenSsl: java.util.Set availableOpenSslCipherSuites()>
STATIC edge: r35 = staticinvoke <io.netty.handler.ssl.SslContextBuilder: io.netty.handler.ssl.SslContextBuilder forServer(javax.net.ssl.KeyManagerFactory)>(r37) in <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext createContext(io.vertx.core.impl.VertxInternal,javax.net.ssl.X509KeyManager,javax.net.ssl.TrustManagerFactory)> ==> <io.netty.handler.ssl.SslContextBuilder: io.netty.handler.ssl.SslContextBuilder forServer(javax.net.ssl.KeyManagerFactory)>
STATIC edge: r35 = staticinvoke <io.netty.handler.ssl.SslContextBuilder: io.netty.handler.ssl.SslContextBuilder forServer(java.security.PrivateKey,java.lang.String,java.security.cert.X509Certificate[])>($r30, null, $r31) in <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext createContext(io.vertx.core.impl.VertxInternal,javax.net.ssl.X509KeyManager,javax.net.ssl.TrustManagerFactory)> ==> <io.netty.handler.ssl.SslContextBuilder: io.netty.handler.ssl.SslContextBuilder forServer(java.security.PrivateKey,java.lang.String,java.security.cert.X509Certificate[])>
STATIC edge: r35 = staticinvoke <io.netty.handler.ssl.SslContextBuilder: io.netty.handler.ssl.SslContextBuilder forClient()>() in <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext createContext(io.vertx.core.impl.VertxInternal,javax.net.ssl.X509KeyManager,javax.net.ssl.TrustManagerFactory)> ==> <io.netty.handler.ssl.SslContextBuilder: io.netty.handler.ssl.SslContextBuilder forClient()>
CLINIT edge: $r17 = <io.vertx.core.net.impl.SSLHelper: java.util.Map PROTOCOL_NAME_MAPPING> in <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext createContext(io.vertx.core.impl.VertxInternal,javax.net.ssl.X509KeyManager,javax.net.ssl.TrustManagerFactory)> ==> <io.vertx.core.net.impl.SSLHelper: void <clinit>()>
CLINIT edge: r3 = staticinvoke <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)>($r2, r1) in <io.vertx.core.net.KeyCertOptions: java.util.function.Function keyManagerMapper(io.vertx.core.Vertx)> ==> <io.vertx.core.net.impl.KeyStoreHelper: void <clinit>()>
STATIC edge: $r5 = staticinvoke <io.vertx.core.net.KeyCertOptions$getKeyMgr__121: java.util.function.Function bootstrap$(io.vertx.core.net.impl.KeyStoreHelper)>(r3) in <io.vertx.core.net.KeyCertOptions: java.util.function.Function keyManagerMapper(io.vertx.core.Vertx)> ==> <io.vertx.core.net.KeyCertOptions$getKeyMgr__121: java.util.function.Function bootstrap$(io.vertx.core.net.impl.KeyStoreHelper)>
STATIC edge: r3 = staticinvoke <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)>($r2, r1) in <io.vertx.core.net.KeyCertOptions: java.util.function.Function keyManagerMapper(io.vertx.core.Vertx)> ==> <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)>
CLINIT edge: <io.vertx.core.net.impl.VertxTrustManagerFactory: java.security.Provider PROVIDER> = $r0 in <io.vertx.core.net.impl.VertxTrustManagerFactory: void <clinit>()> ==> <io.vertx.core.net.impl.VertxTrustManagerFactory: void <clinit>()>
CLINIT edge: <io.vertx.core.net.impl.KeyStoreHelper: java.util.regex.Pattern BEGIN_PATTERN> = $r0 in <io.vertx.core.net.impl.KeyStoreHelper: void <clinit>()> ==> <io.vertx.core.net.impl.KeyStoreHelper: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("-----END ([A-Z ]+)-----") in <io.vertx.core.net.impl.KeyStoreHelper: void <clinit>()> ==> <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
STATIC edge: $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("-----BEGIN ([A-Z ]+)-----") in <io.vertx.core.net.impl.KeyStoreHelper: void <clinit>()> ==> <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
CLINIT edge: $r31 = new io.vertx.core.net.impl.KeyStoreHelper in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <io.vertx.core.net.impl.KeyStoreHelper: void <clinit>()>
STATIC edge: $r8 = staticinvoke <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadKeyCert(java.util.List,java.util.List)>($r1, $r4) in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadKeyCert(java.util.List,java.util.List)>
STATIC edge: $r26 = staticinvoke <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadJKSOrPKCS12(java.lang.String,java.lang.String,java.util.function.Supplier)>("PKCS12", $r25, r38) in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadJKSOrPKCS12(java.lang.String,java.lang.String,java.util.function.Supplier)>
STATIC edge: r38 = staticinvoke <io.vertx.core.net.impl.KeyStoreHelper$getValue__122: java.util.function.Supplier bootstrap$(io.vertx.core.net.PfxOptions)>(r37) in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <io.vertx.core.net.impl.KeyStoreHelper$getValue__122: java.util.function.Supplier bootstrap$(io.vertx.core.net.PfxOptions)>
STATIC edge: r38 = staticinvoke <io.vertx.core.net.impl.KeyStoreHelper$lambda_create_1__123: java.util.function.Supplier bootstrap$(io.vertx.core.impl.VertxInternal,io.vertx.core.net.PfxOptions)>(r11, r37) in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <io.vertx.core.net.impl.KeyStoreHelper$lambda_create_1__123: java.util.function.Supplier bootstrap$(io.vertx.core.impl.VertxInternal,io.vertx.core.net.PfxOptions)>
STATIC edge: $r33 = staticinvoke <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadJKSOrPKCS12(java.lang.String,java.lang.String,java.util.function.Supplier)>("JKS", $r32, r36) in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadJKSOrPKCS12(java.lang.String,java.lang.String,java.util.function.Supplier)>
STATIC edge: r36 = staticinvoke <io.vertx.core.net.impl.KeyStoreHelper$getValue__124: java.util.function.Supplier bootstrap$(io.vertx.core.net.JksOptions)>(r35) in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <io.vertx.core.net.impl.KeyStoreHelper$getValue__124: java.util.function.Supplier bootstrap$(io.vertx.core.net.JksOptions)>
STATIC edge: r36 = staticinvoke <io.vertx.core.net.impl.KeyStoreHelper$lambda_create_0__125: java.util.function.Supplier bootstrap$(io.vertx.core.impl.VertxInternal,io.vertx.core.net.JksOptions)>(r11, r35) in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <io.vertx.core.net.impl.KeyStoreHelper$lambda_create_0__125: java.util.function.Supplier bootstrap$(io.vertx.core.impl.VertxInternal,io.vertx.core.net.JksOptions)>
CLINIT edge: $r7 = new io.vertx.core.net.impl.KeyStoreHelper in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <io.vertx.core.net.impl.KeyStoreHelper: void <clinit>()>
CLINIT edge: $r24 = new io.vertx.core.net.impl.KeyStoreHelper in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <io.vertx.core.net.impl.KeyStoreHelper: void <clinit>()>
CLINIT edge: r2 = staticinvoke <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore createEmptyKeyStore()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadKeyCert(java.util.List,java.util.List)> ==> <io.vertx.core.net.impl.KeyStoreHelper: void <clinit>()>
STATIC edge: r10 = staticinvoke <io.vertx.core.net.impl.KeyStoreHelper: java.security.cert.X509Certificate[] loadCerts(io.vertx.core.buffer.Buffer)>($r9) in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadKeyCert(java.util.List,java.util.List)> ==> <io.vertx.core.net.impl.KeyStoreHelper: java.security.cert.X509Certificate[] loadCerts(io.vertx.core.buffer.Buffer)>
STATIC edge: r7 = staticinvoke <io.vertx.core.net.impl.KeyStoreHelper: java.security.PrivateKey loadPrivateKey(io.vertx.core.buffer.Buffer)>($r6) in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadKeyCert(java.util.List,java.util.List)> ==> <io.vertx.core.net.impl.KeyStoreHelper: java.security.PrivateKey loadPrivateKey(io.vertx.core.buffer.Buffer)>
STATIC edge: r2 = staticinvoke <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore createEmptyKeyStore()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadKeyCert(java.util.List,java.util.List)> ==> <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore createEmptyKeyStore()>
STATIC edge: r1 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(r0) in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadJKSOrPKCS12(java.lang.String,java.lang.String,java.util.function.Supplier)> ==> <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>
CLINIT edge: r3 = staticinvoke <io.vertx.core.net.impl.KeyStoreHelper: java.util.List loadPems(io.vertx.core.buffer.Buffer,java.util.function.BiFunction)>(r0, $r2) in <io.vertx.core.net.impl.KeyStoreHelper: java.security.cert.X509Certificate[] loadCerts(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.net.impl.KeyStoreHelper: void <clinit>()>
STATIC edge: r3 = staticinvoke <io.vertx.core.net.impl.KeyStoreHelper: java.util.List loadPems(io.vertx.core.buffer.Buffer,java.util.function.BiFunction)>(r0, $r2) in <io.vertx.core.net.impl.KeyStoreHelper: java.security.cert.X509Certificate[] loadCerts(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.net.impl.KeyStoreHelper: java.util.List loadPems(io.vertx.core.buffer.Buffer,java.util.function.BiFunction)>
STATIC edge: $r2 = staticinvoke <io.vertx.core.net.impl.KeyStoreHelper$lambda_loadCerts_5__126: java.util.function.BiFunction bootstrap$(java.security.cert.CertificateFactory)>(r1) in <io.vertx.core.net.impl.KeyStoreHelper: java.security.cert.X509Certificate[] loadCerts(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.net.impl.KeyStoreHelper$lambda_loadCerts_5__126: java.util.function.BiFunction bootstrap$(java.security.cert.CertificateFactory)>
STATIC edge: r1 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>("X.509") in <io.vertx.core.net.impl.KeyStoreHelper: java.security.cert.X509Certificate[] loadCerts(io.vertx.core.buffer.Buffer)> ==> <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>
CLINIT edge: r3 = staticinvoke <io.vertx.core.net.impl.KeyStoreHelper: java.util.List loadPems(io.vertx.core.buffer.Buffer,java.util.function.BiFunction)>(r0, $r2) in <io.vertx.core.net.impl.KeyStoreHelper: java.security.PrivateKey loadPrivateKey(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.net.impl.KeyStoreHelper: void <clinit>()>
STATIC edge: r3 = staticinvoke <io.vertx.core.net.impl.KeyStoreHelper: java.util.List loadPems(io.vertx.core.buffer.Buffer,java.util.function.BiFunction)>(r0, $r2) in <io.vertx.core.net.impl.KeyStoreHelper: java.security.PrivateKey loadPrivateKey(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.net.impl.KeyStoreHelper: java.util.List loadPems(io.vertx.core.buffer.Buffer,java.util.function.BiFunction)>
STATIC edge: $r2 = staticinvoke <io.vertx.core.net.impl.KeyStoreHelper$lambda_loadPrivateKey_4__127: java.util.function.BiFunction bootstrap$(java.security.KeyFactory)>(r1) in <io.vertx.core.net.impl.KeyStoreHelper: java.security.PrivateKey loadPrivateKey(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.net.impl.KeyStoreHelper$lambda_loadPrivateKey_4__127: java.util.function.BiFunction bootstrap$(java.security.KeyFactory)>
STATIC edge: r1 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>("RSA") in <io.vertx.core.net.impl.KeyStoreHelper: java.security.PrivateKey loadPrivateKey(io.vertx.core.buffer.Buffer)> ==> <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>
STATIC edge: r0 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>("PKCS12") in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore createEmptyKeyStore()> ==> <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>
CLINIT edge: $r4 = <io.vertx.core.net.impl.KeyStoreHelper: java.util.regex.Pattern BEGIN_PATTERN> in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List loadPems(io.vertx.core.buffer.Buffer,java.util.function.BiFunction)> ==> <io.vertx.core.net.impl.KeyStoreHelper: void <clinit>()>
STATIC edge: $r11 = staticinvoke <java.util.Base64: java.util.Base64$Decoder getDecoder()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List loadPems(io.vertx.core.buffer.Buffer,java.util.function.BiFunction)> ==> <java.util.Base64: java.util.Base64$Decoder getDecoder()>
SPECIAL edge: specialinvoke $r4.<io.vertx.core.net.impl.SSLHelper$lambda_getContext_2__111: void <init>(io.vertx.core.net.impl.SSLHelper,io.vertx.core.impl.VertxInternal,javax.net.ssl.X509KeyManager,javax.net.ssl.TrustManagerFactory)>($r0, $r1, $r2, $r3) in <io.vertx.core.net.impl.SSLHelper$lambda_getContext_2__111: java.util.function.Function bootstrap$(io.vertx.core.net.impl.SSLHelper,io.vertx.core.impl.VertxInternal,javax.net.ssl.X509KeyManager,javax.net.ssl.TrustManagerFactory)> ==> <io.vertx.core.net.impl.SSLHelper$lambda_getContext_2__111: void <init>(io.vertx.core.net.impl.SSLHelper,io.vertx.core.impl.VertxInternal,javax.net.ssl.X509KeyManager,javax.net.ssl.TrustManagerFactory)>
VIRTUAL edge: $z3 = virtualinvoke r0.<io.vertx.core.net.NetServerOptions: boolean isReusePort()>() in <io.vertx.core.net.impl.transport.EpollTransport: void configure(io.vertx.core.net.NetServerOptions,boolean,io.netty.bootstrap.ServerBootstrap)> ==> <io.vertx.core.net.NetworkOptions: boolean isReusePort()>
VIRTUAL edge: $z1 = virtualinvoke r0.<io.vertx.core.net.NetServerOptions: boolean isTcpFastOpen()>() in <io.vertx.core.net.impl.transport.EpollTransport: void configure(io.vertx.core.net.NetServerOptions,boolean,io.netty.bootstrap.ServerBootstrap)> ==> <io.vertx.core.net.TCPSSLOptions: boolean isTcpFastOpen()>
VIRTUAL edge: $z2 = virtualinvoke r0.<io.vertx.core.net.NetServerOptions: boolean isTcpFastOpen()>() in <io.vertx.core.net.impl.transport.EpollTransport: void configure(io.vertx.core.net.NetServerOptions,boolean,io.netty.bootstrap.ServerBootstrap)> ==> <io.vertx.core.net.TCPSSLOptions: boolean isTcpFastOpen()>
VIRTUAL edge: $z4 = virtualinvoke r0.<io.vertx.core.net.NetServerOptions: boolean isTcpQuickAck()>() in <io.vertx.core.net.impl.transport.EpollTransport: void configure(io.vertx.core.net.NetServerOptions,boolean,io.netty.bootstrap.ServerBootstrap)> ==> <io.vertx.core.net.TCPSSLOptions: boolean isTcpQuickAck()>
VIRTUAL edge: $z5 = virtualinvoke r0.<io.vertx.core.net.NetServerOptions: boolean isTcpCork()>() in <io.vertx.core.net.impl.transport.EpollTransport: void configure(io.vertx.core.net.NetServerOptions,boolean,io.netty.bootstrap.ServerBootstrap)> ==> <io.vertx.core.net.TCPSSLOptions: boolean isTcpCork()>
SPECIAL edge: specialinvoke r4.<io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.NetServerOptions,boolean,io.netty.bootstrap.ServerBootstrap)>(r0, z0, r1) in <io.vertx.core.net.impl.transport.EpollTransport: void configure(io.vertx.core.net.NetServerOptions,boolean,io.netty.bootstrap.ServerBootstrap)> ==> <io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.NetServerOptions,boolean,io.netty.bootstrap.ServerBootstrap)>
VIRTUAL edge: $z1 = virtualinvoke r1.<io.vertx.core.net.NetServerOptions: boolean isReusePort()>() in <io.vertx.core.net.impl.transport.KQueueTransport: void configure(io.vertx.core.net.NetServerOptions,boolean,io.netty.bootstrap.ServerBootstrap)> ==> <io.vertx.core.net.NetworkOptions: boolean isReusePort()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.NetServerOptions,boolean,io.netty.bootstrap.ServerBootstrap)>(r1, z0, r2) in <io.vertx.core.net.impl.transport.KQueueTransport: void configure(io.vertx.core.net.NetServerOptions,boolean,io.netty.bootstrap.ServerBootstrap)> ==> <io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.NetServerOptions,boolean,io.netty.bootstrap.ServerBootstrap)>
VIRTUAL edge: $z0 = virtualinvoke r1.<io.vertx.core.net.NetServerOptions: boolean isReuseAddress()>() in <io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.NetServerOptions,boolean,io.netty.bootstrap.ServerBootstrap)> ==> <io.vertx.core.net.NetworkOptions: boolean isReuseAddress()>
VIRTUAL edge: $z2 = virtualinvoke r1.<io.vertx.core.net.NetServerOptions: boolean isTcpKeepAlive()>() in <io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.NetServerOptions,boolean,io.netty.bootstrap.ServerBootstrap)> ==> <io.vertx.core.net.TCPSSLOptions: boolean isTcpKeepAlive()>
VIRTUAL edge: $z3 = virtualinvoke r1.<io.vertx.core.net.NetServerOptions: boolean isTcpNoDelay()>() in <io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.NetServerOptions,boolean,io.netty.bootstrap.ServerBootstrap)> ==> <io.vertx.core.net.TCPSSLOptions: boolean isTcpNoDelay()>
VIRTUAL edge: $i0 = virtualinvoke r1.<io.vertx.core.net.NetServerOptions: int getSendBufferSize()>() in <io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.NetServerOptions,boolean,io.netty.bootstrap.ServerBootstrap)> ==> <io.vertx.core.net.NetworkOptions: int getSendBufferSize()>
VIRTUAL edge: $i10 = virtualinvoke r1.<io.vertx.core.net.NetServerOptions: int getSendBufferSize()>() in <io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.NetServerOptions,boolean,io.netty.bootstrap.ServerBootstrap)> ==> <io.vertx.core.net.NetworkOptions: int getSendBufferSize()>
VIRTUAL edge: $i1 = virtualinvoke r1.<io.vertx.core.net.NetServerOptions: int getReceiveBufferSize()>() in <io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.NetServerOptions,boolean,io.netty.bootstrap.ServerBootstrap)> ==> <io.vertx.core.net.NetworkOptions: int getReceiveBufferSize()>
VIRTUAL edge: $i8 = virtualinvoke r1.<io.vertx.core.net.NetServerOptions: int getReceiveBufferSize()>() in <io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.NetServerOptions,boolean,io.netty.bootstrap.ServerBootstrap)> ==> <io.vertx.core.net.NetworkOptions: int getReceiveBufferSize()>
VIRTUAL edge: $i9 = virtualinvoke r1.<io.vertx.core.net.NetServerOptions: int getReceiveBufferSize()>() in <io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.NetServerOptions,boolean,io.netty.bootstrap.ServerBootstrap)> ==> <io.vertx.core.net.NetworkOptions: int getReceiveBufferSize()>
VIRTUAL edge: $i2 = virtualinvoke r1.<io.vertx.core.net.NetServerOptions: int getSoLinger()>() in <io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.NetServerOptions,boolean,io.netty.bootstrap.ServerBootstrap)> ==> <io.vertx.core.net.TCPSSLOptions: int getSoLinger()>
VIRTUAL edge: $i7 = virtualinvoke r1.<io.vertx.core.net.NetServerOptions: int getSoLinger()>() in <io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.NetServerOptions,boolean,io.netty.bootstrap.ServerBootstrap)> ==> <io.vertx.core.net.TCPSSLOptions: int getSoLinger()>
VIRTUAL edge: $i3 = virtualinvoke r1.<io.vertx.core.net.NetServerOptions: int getTrafficClass()>() in <io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.NetServerOptions,boolean,io.netty.bootstrap.ServerBootstrap)> ==> <io.vertx.core.net.NetworkOptions: int getTrafficClass()>
VIRTUAL edge: $i6 = virtualinvoke r1.<io.vertx.core.net.NetServerOptions: int getTrafficClass()>() in <io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.NetServerOptions,boolean,io.netty.bootstrap.ServerBootstrap)> ==> <io.vertx.core.net.NetworkOptions: int getTrafficClass()>
VIRTUAL edge: $i4 = virtualinvoke r1.<io.vertx.core.net.NetServerOptions: int getAcceptBacklog()>() in <io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.NetServerOptions,boolean,io.netty.bootstrap.ServerBootstrap)> ==> <io.vertx.core.net.NetServerOptions: int getAcceptBacklog()>
VIRTUAL edge: $i5 = virtualinvoke r1.<io.vertx.core.net.NetServerOptions: int getAcceptBacklog()>() in <io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.NetServerOptions,boolean,io.netty.bootstrap.ServerBootstrap)> ==> <io.vertx.core.net.NetServerOptions: int getAcceptBacklog()>
SPECIAL edge: specialinvoke $r20.<io.netty.channel.FixedRecvByteBufAllocator: void <init>(int)>($i9) in <io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.NetServerOptions,boolean,io.netty.bootstrap.ServerBootstrap)> ==> <io.netty.channel.FixedRecvByteBufAllocator: void <init>(int)>
SPECIAL edge: r2 = specialinvoke r0.<io.vertx.core.net.impl.VertxEventLoopGroup: io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopHolder findHolder(io.netty.channel.EventLoop)>(r1) in <io.vertx.core.net.impl.VertxEventLoopGroup: void addWorker(io.netty.channel.EventLoop)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup: io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopHolder findHolder(io.netty.channel.EventLoop)>
SPECIAL edge: specialinvoke $r3.<io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopHolder: void <init>(io.netty.channel.EventLoop)>(r1) in <io.vertx.core.net.impl.VertxEventLoopGroup: void addWorker(io.netty.channel.EventLoop)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopHolder: void <init>(io.netty.channel.EventLoop)>
INTERFACE edge: interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r3) in <io.vertx.core.net.impl.VertxEventLoopGroup: void addWorker(io.netty.channel.EventLoop)> ==> <java.util.AbstractList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r3) in <io.vertx.core.net.impl.VertxEventLoopGroup: void addWorker(io.netty.channel.EventLoop)> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r3) in <io.vertx.core.net.impl.VertxEventLoopGroup: void addWorker(io.netty.channel.EventLoop)> ==> <java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r3) in <io.vertx.core.net.impl.VertxEventLoopGroup: void addWorker(io.netty.channel.EventLoop)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.impl.HandlerManager$Handlers: void <init>()>() in <io.vertx.core.net.impl.HandlerManager$Handlers: void <init>(io.vertx.core.net.impl.HandlerManager$1)> ==> <io.vertx.core.net.impl.HandlerManager$Handlers: void <init>()>
INTERFACE edge: interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1) in <io.vertx.core.net.impl.HandlerManager$Handlers: void addHandler(io.vertx.core.net.impl.HandlerHolder)> ==> <java.util.AbstractList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1) in <io.vertx.core.net.impl.HandlerManager$Handlers: void addHandler(io.vertx.core.net.impl.HandlerHolder)> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1) in <io.vertx.core.net.impl.HandlerManager$Handlers: void addHandler(io.vertx.core.net.impl.HandlerHolder)> ==> <java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1) in <io.vertx.core.net.impl.HandlerManager$Handlers: void addHandler(io.vertx.core.net.impl.HandlerHolder)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.impl.AsyncResolveConnectHelper$lambda_addListener_0__101: void <init>(io.vertx.core.net.impl.AsyncResolveConnectHelper,io.vertx.core.Handler)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<io.vertx.core.Vertx: io.vertx.core.Context getOrCreateContext()>() in <io.vertx.core.impl.AddressResolver: void resolveHostname(java.lang.String,io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl: io.vertx.core.Context getOrCreateContext()>
INTERFACE edge: $r5 = interfaceinvoke r3.<io.vertx.core.impl.ContextInternal: io.netty.channel.EventLoop nettyEventLoop()>() in <io.vertx.core.impl.AddressResolver: void resolveHostname(java.lang.String,io.vertx.core.Handler)> ==> <io.vertx.core.impl.ContextImpl: io.netty.channel.EventLoop nettyEventLoop()>
INTERFACE edge: $r5 = interfaceinvoke r3.<io.vertx.core.impl.ContextInternal: io.netty.channel.EventLoop nettyEventLoop()>() in <io.vertx.core.impl.AddressResolver: void resolveHostname(java.lang.String,io.vertx.core.Handler)> ==> <io.vertx.core.impl.EventLoopContext: io.netty.channel.EventLoop nettyEventLoop()>
SPECIAL edge: specialinvoke $r3.<io.vertx.core.impl.AddressResolver$lambda_resolveHostname_1__112: void <init>(io.vertx.core.impl.ContextInternal,io.netty.util.concurrent.Future,io.vertx.core.Handler)>($r0, $r1, $r2) in <io.vertx.core.impl.AddressResolver$lambda_resolveHostname_1__112: io.netty.util.concurrent.GenericFutureListener bootstrap$(io.vertx.core.impl.ContextInternal,io.netty.util.concurrent.Future,io.vertx.core.Handler)> ==> <io.vertx.core.impl.AddressResolver$lambda_resolveHostname_1__112: void <init>(io.vertx.core.impl.ContextInternal,io.netty.util.concurrent.Future,io.vertx.core.Handler)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.impl.transport.EpollTransport$init__103: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.impl.transport.EpollTransport$init__102: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.impl.transport.KQueueTransport$init__105: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.impl.transport.KQueueTransport$init__104: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.impl.transport.Transport$init__106: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r1.<io.vertx.core.http.impl.headers.VertxHttpHeaders: void add0(int,int,java.lang.CharSequence,java.lang.CharSequence)>(i0, i1, r0, r2) in <io.vertx.core.http.impl.headers.VertxHttpHeaders: io.vertx.core.http.impl.headers.VertxHttpHeaders add(java.lang.CharSequence,java.lang.CharSequence)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders: void add0(int,int,java.lang.CharSequence,java.lang.CharSequence)>
CLINIT edge: $z0 = <io.vertx.core.http.HttpHeaders: boolean DISABLE_HTTP_HEADERS_VALIDATION> in <io.vertx.core.http.impl.headers.VertxHttpHeaders: void add0(int,int,java.lang.CharSequence,java.lang.CharSequence)> ==> <io.vertx.core.http.HttpHeaders: void <clinit>()>
STATIC edge: staticinvoke <io.vertx.core.http.impl.HttpUtils: void validateHeader(java.lang.CharSequence,java.lang.CharSequence)>(r4, r5) in <io.vertx.core.http.impl.headers.VertxHttpHeaders: void add0(int,int,java.lang.CharSequence,java.lang.CharSequence)> ==> <io.vertx.core.http.impl.HttpUtils: void validateHeader(java.lang.CharSequence,java.lang.CharSequence)>
CLINIT edge: staticinvoke <io.vertx.core.http.impl.HttpUtils: void validateHeader(java.lang.CharSequence,java.lang.CharSequence)>(r4, r5) in <io.vertx.core.http.impl.headers.VertxHttpHeaders: void add0(int,int,java.lang.CharSequence,java.lang.CharSequence)> ==> <io.vertx.core.http.impl.HttpUtils: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.eventbus.impl.EventBusImpl: java.lang.String generateReplyAddress()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("__vertx.reply.") in <io.vertx.core.eventbus.impl.EventBusImpl: java.lang.String generateReplyAddress()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $l0 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>() in <io.vertx.core.eventbus.impl.EventBusImpl: java.lang.String generateReplyAddress()> ==> <java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>
VIRTUAL edge: $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) in <io.vertx.core.eventbus.impl.EventBusImpl: java.lang.String generateReplyAddress()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.eventbus.impl.EventBusImpl: java.lang.String generateReplyAddress()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: java.lang.String generateReplyAddress()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("__vertx.reply.") in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: java.lang.String generateReplyAddress()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.util.UUID: java.lang.String toString()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: java.lang.String generateReplyAddress()> ==> <java.util.UUID: java.lang.String toString()>
VIRTUAL edge: $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: java.lang.String generateReplyAddress()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: java.lang.String generateReplyAddress()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.eventbus.impl.HandlerRegistration: void <init>(io.vertx.core.Vertx,io.vertx.core.spi.metrics.EventBusMetrics,io.vertx.core.eventbus.impl.EventBusImpl,java.lang.String,java.lang.String,boolean,io.vertx.core.Handler,long)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.ArrayDeque: void <init>(int)>(8) in <io.vertx.core.eventbus.impl.HandlerRegistration: void <init>(io.vertx.core.Vertx,io.vertx.core.spi.metrics.EventBusMetrics,io.vertx.core.eventbus.impl.EventBusImpl,java.lang.String,java.lang.String,boolean,io.vertx.core.Handler,long)> ==> <java.util.ArrayDeque: void <init>(int)>
INTERFACE edge: $l2 = interfaceinvoke r2.<io.vertx.core.Vertx: long setTimer(long,io.vertx.core.Handler)>(l0, $r8) in <io.vertx.core.eventbus.impl.HandlerRegistration: void <init>(io.vertx.core.Vertx,io.vertx.core.spi.metrics.EventBusMetrics,io.vertx.core.eventbus.impl.EventBusImpl,java.lang.String,java.lang.String,boolean,io.vertx.core.Handler,long)> ==> <io.vertx.core.impl.VertxImpl: long setTimer(long,io.vertx.core.Handler)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<io.vertx.core.eventbus.impl.EventBusImpl: io.vertx.core.eventbus.impl.HandlerHolder addRegistration(java.lang.String,io.vertx.core.eventbus.impl.HandlerRegistration,boolean,boolean)>($r7, r0, $z1, $z0) in <io.vertx.core.eventbus.impl.HandlerRegistration: io.vertx.core.eventbus.MessageConsumer handler(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.EventBusImpl: io.vertx.core.eventbus.impl.HandlerHolder addRegistration(java.lang.String,io.vertx.core.eventbus.impl.HandlerRegistration,boolean,boolean)>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.eventbus.impl.HandlerRegistration: void unregister()>() in <io.vertx.core.eventbus.impl.HandlerRegistration: io.vertx.core.eventbus.MessageConsumer handler(io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void unregister()>
STATIC edge: staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>($r1, "handler") in <io.vertx.core.eventbus.impl.EventBusImpl: io.vertx.core.eventbus.impl.HandlerHolder addRegistration(java.lang.String,io.vertx.core.eventbus.impl.HandlerRegistration,boolean,boolean)> ==> <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>
STATIC edge: $r7 = staticinvoke <io.vertx.core.eventbus.impl.EventBusImpl$setResult__128: io.vertx.core.Handler bootstrap$(io.vertx.core.eventbus.impl.HandlerRegistration)>(r0) in <io.vertx.core.eventbus.impl.EventBusImpl: io.vertx.core.eventbus.impl.HandlerHolder addRegistration(java.lang.String,io.vertx.core.eventbus.impl.HandlerRegistration,boolean,boolean)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$setResult__128: io.vertx.core.Handler bootstrap$(io.vertx.core.eventbus.impl.HandlerRegistration)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toString(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r2.<io.vertx.core.eventbus.impl.EventBusImpl$lambda_convertHandler_3__113: void <init>(io.vertx.core.eventbus.impl.EventBusImpl,io.vertx.core.Handler)>($r0, $r1) in <io.vertx.core.eventbus.impl.EventBusImpl$lambda_convertHandler_3__113: io.vertx.core.Handler bootstrap$(io.vertx.core.eventbus.impl.EventBusImpl,io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_convertHandler_3__113: void <init>(io.vertx.core.eventbus.impl.EventBusImpl,io.vertx.core.Handler)>
SPECIAL edge: specialinvoke $r4.<io.vertx.core.eventbus.impl.HandlerRegistration$lambda_new_0__114: void <init>(io.vertx.core.eventbus.impl.HandlerRegistration,io.vertx.core.spi.metrics.EventBusMetrics,java.lang.String,long,java.lang.String)>($r0, $r1, $r2, $l0, $r3) in <io.vertx.core.eventbus.impl.HandlerRegistration$lambda_new_0__114: io.vertx.core.Handler bootstrap$(io.vertx.core.eventbus.impl.HandlerRegistration,io.vertx.core.spi.metrics.EventBusMetrics,java.lang.String,long,java.lang.String)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration$lambda_new_0__114: void <init>(io.vertx.core.eventbus.impl.HandlerRegistration,io.vertx.core.spi.metrics.EventBusMetrics,java.lang.String,long,java.lang.String)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: void <init>(io.vertx.core.eventbus.impl.EventBusImpl,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.DeliveryOptions,io.vertx.core.eventbus.impl.HandlerRegistration,io.vertx.core.eventbus.impl.MessageImpl)>(r1, r2, r3, r4, null) in <io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: void <init>(io.vertx.core.eventbus.impl.EventBusImpl,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.DeliveryOptions,io.vertx.core.eventbus.impl.HandlerRegistration)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: void <init>(io.vertx.core.eventbus.impl.EventBusImpl,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.DeliveryOptions,io.vertx.core.eventbus.impl.HandlerRegistration,io.vertx.core.eventbus.impl.MessageImpl)>
CLINIT edge: $r5 = staticinvoke <io.vertx.core.eventbus.impl.EventBusImpl: java.util.List access$300(io.vertx.core.eventbus.impl.EventBusImpl)>(r1) in <io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: void <init>(io.vertx.core.eventbus.impl.EventBusImpl,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.DeliveryOptions,io.vertx.core.eventbus.impl.HandlerRegistration,io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.eventbus.impl.EventBusImpl: void <clinit>()>
STATIC edge: $r5 = staticinvoke <io.vertx.core.eventbus.impl.EventBusImpl: java.util.List access$300(io.vertx.core.eventbus.impl.EventBusImpl)>(r1) in <io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: void <init>(io.vertx.core.eventbus.impl.EventBusImpl,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.DeliveryOptions,io.vertx.core.eventbus.impl.HandlerRegistration,io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.eventbus.impl.EventBusImpl: java.util.List access$300(io.vertx.core.eventbus.impl.EventBusImpl)>
VIRTUAL edge: $r5 = virtualinvoke r1.<io.vertx.core.eventbus.impl.MessageImpl: java.lang.String address()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void sendOrPub(io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)> ==> <io.vertx.core.eventbus.impl.MessageImpl: java.lang.String address()>
VIRTUAL edge: $z0 = virtualinvoke r1.<io.vertx.core.eventbus.impl.MessageImpl: boolean isSend()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void sendOrPub(io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)> ==> <io.vertx.core.eventbus.impl.MessageImpl: boolean isSend()>
INTERFACE edge: interfaceinvoke $r4.<io.vertx.core.spi.metrics.EventBusMetrics: void messageSent(java.lang.String,boolean,boolean,boolean)>($r5, $z1, 1, 0) in <io.vertx.core.eventbus.impl.EventBusImpl: void sendOrPub(io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)> ==> <io.vertx.core.spi.metrics.EventBusMetrics: void messageSent(java.lang.String,boolean,boolean,boolean)>
VIRTUAL edge: virtualinvoke r2.<io.vertx.core.eventbus.impl.EventBusImpl: void deliverMessageLocally(io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)>(r0) in <io.vertx.core.eventbus.impl.EventBusImpl: void sendOrPub(io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)> ==> <io.vertx.core.eventbus.impl.EventBusImpl: void deliverMessageLocally(io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)>
CLINIT edge: $r14 = <io.vertx.core.eventbus.ReplyFailure: io.vertx.core.eventbus.ReplyFailure NO_HANDLERS> in <io.vertx.core.eventbus.impl.EventBusImpl: void deliverMessageLocally(io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)> ==> <io.vertx.core.eventbus.ReplyFailure: void <clinit>()>
STATIC edge: $r5 = staticinvoke <io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: io.vertx.core.eventbus.impl.HandlerRegistration access$100(io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)>(r1) in <io.vertx.core.eventbus.impl.EventBusImpl: void deliverMessageLocally(io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: io.vertx.core.eventbus.impl.HandlerRegistration access$100(io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)>
STATIC edge: $r4 = staticinvoke <io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: io.vertx.core.eventbus.impl.HandlerRegistration access$100(io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)>(r1) in <io.vertx.core.eventbus.impl.EventBusImpl: void deliverMessageLocally(io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: io.vertx.core.eventbus.impl.HandlerRegistration access$100(io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)>
CLINIT edge: $r7 = <io.vertx.core.eventbus.ReplyFailure: io.vertx.core.eventbus.ReplyFailure NO_HANDLERS> in <io.vertx.core.eventbus.impl.EventBusImpl: void deliverMessageLocally(io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)> ==> <io.vertx.core.eventbus.ReplyFailure: void <clinit>()>
CLINIT edge: $r0 = new io.vertx.core.eventbus.ReplyFailure in <io.vertx.core.eventbus.ReplyFailure: void <clinit>()> ==> <io.vertx.core.eventbus.ReplyFailure: void <clinit>()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<io.vertx.core.eventbus.DeliveryOptions: boolean isLocalOnly()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void sendOrPub(io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)> ==> <io.vertx.core.eventbus.DeliveryOptions: boolean isLocalOnly()>
VIRTUAL edge: $r13 = virtualinvoke $r11.<io.vertx.core.eventbus.impl.MessageImpl: java.lang.String address()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void sendOrPub(io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)> ==> <io.vertx.core.eventbus.impl.MessageImpl: java.lang.String address()>
VIRTUAL edge: $z1 = virtualinvoke $r14.<io.vertx.core.eventbus.impl.MessageImpl: boolean isSend()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void sendOrPub(io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)> ==> <io.vertx.core.eventbus.impl.MessageImpl: boolean isSend()>
INTERFACE edge: interfaceinvoke $r12.<io.vertx.core.spi.metrics.EventBusMetrics: void messageSent(java.lang.String,boolean,boolean,boolean)>($r13, $z2, 1, 0) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void sendOrPub(io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)> ==> <io.vertx.core.spi.metrics.EventBusMetrics: void messageSent(java.lang.String,boolean,boolean,boolean)>
VIRTUAL edge: virtualinvoke r3.<io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void deliverMessageLocally(io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)>(r0) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void sendOrPub(io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)> ==> <io.vertx.core.eventbus.impl.EventBusImpl: void deliverMessageLocally(io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Context: void runOnContext(io.vertx.core.Handler)>($r9) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void sendOrPub(io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)> ==> <io.vertx.core.impl.ContextImpl: void runOnContext(io.vertx.core.Handler)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.Context: void runOnContext(io.vertx.core.Handler)>($r9) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void sendOrPub(io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)> ==> <io.vertx.core.impl.EventLoopContext: void runOnContext(io.vertx.core.Handler)>
VIRTUAL edge: $r6 = virtualinvoke $r4.<io.vertx.core.eventbus.impl.MessageImpl: java.lang.String address()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void sendOrPub(io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)> ==> <io.vertx.core.eventbus.impl.MessageImpl: java.lang.String address()>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.eventbus.impl.EventBusImpl: void sendOrPub(io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)>(r1) in <io.vertx.core.eventbus.impl.EventBusImpl: void sendReply(io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext,io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.eventbus.impl.EventBusImpl: void sendOrPub(io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.eventbus.impl.EventBusImpl: void sendOrPub(io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)>(r1) in <io.vertx.core.eventbus.impl.EventBusImpl: void sendReply(io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext,io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void sendOrPub(io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<io.vertx.core.eventbus.impl.clustered.ClusteredMessage: io.vertx.core.net.impl.ServerID getSender()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void sendReply(io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext,io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: io.vertx.core.net.impl.ServerID getSender()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void clusteredSendReply(io.vertx.core.net.impl.ServerID,io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)>($r3, r4) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void sendReply(io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext,io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void clusteredSendReply(io.vertx.core.net.impl.ServerID,io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)>
SPECIAL edge: specialinvoke $r2.<io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_sendOrPub_8__115: void <init>(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus,io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)>($r0, $r1) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_sendOrPub_8__115: io.vertx.core.Handler bootstrap$(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus,io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_sendOrPub_8__115: void <init>(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus,io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)>
SPECIAL edge: specialinvoke $r2.<io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_sendOrPub_7__116: void <init>(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus,io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)>($r0, $r1) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_sendOrPub_7__116: io.vertx.core.Handler bootstrap$(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus,io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_sendOrPub_7__116: void <init>(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus,io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelFuture write(java.lang.Object,io.netty.channel.ChannelPromise)>(r1, r2) in <io.vertx.core.net.impl.PartialPooledByteBufAllocator$PooledChannelHandlerContext: io.netty.channel.ChannelFuture write(java.lang.Object,io.netty.channel.ChannelPromise)> ==> <io.vertx.core.net.impl.PartialPooledByteBufAllocator$PooledChannelHandlerContext: io.netty.channel.ChannelFuture write(java.lang.Object,io.netty.channel.ChannelPromise)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelFuture writeAndFlush(java.lang.Object,io.netty.channel.ChannelPromise)>(r1, r2) in <io.vertx.core.net.impl.PartialPooledByteBufAllocator$PooledChannelHandlerContext: io.netty.channel.ChannelFuture writeAndFlush(java.lang.Object,io.netty.channel.ChannelPromise)> ==> <io.vertx.core.net.impl.PartialPooledByteBufAllocator$PooledChannelHandlerContext: io.netty.channel.ChannelFuture writeAndFlush(java.lang.Object,io.netty.channel.ChannelPromise)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.impl.ConnectionBase$lambda_queueForWrite_0__117: void <init>(io.vertx.core.net.impl.ConnectionBase,java.lang.Object,io.netty.channel.ChannelPromise)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $i10 = interfaceinvoke $r8.<io.vertx.core.buffer.Buffer: int length()>() in <io.vertx.core.http.impl.Http1xServerConnection: long getBytes(java.lang.Object)> ==> <io.vertx.core.buffer.impl.BufferImpl: int length()>
VIRTUAL edge: $i8 = virtualinvoke $r7.<io.netty.buffer.ByteBuf: int readableBytes()>() in <io.vertx.core.http.impl.Http1xServerConnection: long getBytes(java.lang.Object)> ==> <io.netty.buffer.ByteBuf: int readableBytes()>
INTERFACE edge: $r6 = interfaceinvoke $r5.<io.netty.handler.codec.http.HttpContent: io.netty.buffer.ByteBuf content()>() in <io.vertx.core.http.impl.Http1xServerConnection: long getBytes(java.lang.Object)> ==> <io.vertx.core.http.impl.AssembledHttpRequest: io.netty.buffer.ByteBuf content()>
INTERFACE edge: $r6 = interfaceinvoke $r5.<io.netty.handler.codec.http.HttpContent: io.netty.buffer.ByteBuf content()>() in <io.vertx.core.http.impl.Http1xServerConnection: long getBytes(java.lang.Object)> ==> <io.vertx.core.http.impl.AssembledHttpResponse: io.netty.buffer.ByteBuf content()>
VIRTUAL edge: $i6 = virtualinvoke $r6.<io.netty.buffer.ByteBuf: int readableBytes()>() in <io.vertx.core.http.impl.Http1xServerConnection: long getBytes(java.lang.Object)> ==> <io.netty.buffer.ByteBuf: int readableBytes()>
VIRTUAL edge: $i4 = virtualinvoke $r4.<io.netty.buffer.ByteBuf: int readableBytes()>() in <io.vertx.core.http.impl.Http1xServerConnection: long getBytes(java.lang.Object)> ==> <io.netty.buffer.ByteBuf: int readableBytes()>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable,boolean,boolean)>(r1, null, $z1, $z2) in <io.vertx.core.VertxException: void <init>(java.lang.String,boolean)> ==> <java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable,boolean,boolean)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.http.impl.Http2ConnectionBase: void close()>() in <io.vertx.core.http.impl.Http2ServerConnection: void close()> ==> <io.vertx.core.http.impl.Http2ConnectionBase: void close()>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.http.impl.Http2ConnectionBase: void endReadAndFlush()>() in <io.vertx.core.http.impl.Http2ConnectionBase: void close()> ==> <io.vertx.core.net.impl.ConnectionBase: void endReadAndFlush()>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.http.impl.Http2ConnectionBase: io.vertx.core.http.HttpConnection shutdown(long)>(0L) in <io.vertx.core.http.impl.Http2ConnectionBase: void close()> ==> <io.vertx.core.http.impl.Http2ServerConnection: io.vertx.core.http.HttpConnection shutdown(long)>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.http.impl.Http2ConnectionBase: io.vertx.core.http.HttpConnection shutdown(long)>(0L) in <io.vertx.core.http.impl.Http2ConnectionBase: void close()> ==> <io.vertx.core.http.impl.Http2ConnectionBase: io.vertx.core.http.HttpConnection shutdown(long)>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.net.impl.ConnectionBase: void endReadAndFlush()>() in <io.vertx.core.net.impl.ConnectionBase: void close()> ==> <io.vertx.core.net.impl.ConnectionBase: void endReadAndFlush()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>() in <io.vertx.core.net.impl.ConnectionBase: void close()> ==> <io.vertx.core.net.impl.PartialPooledByteBufAllocator$PooledChannelHandlerContext: io.netty.channel.Channel channel()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>() in <io.vertx.core.net.impl.ConnectionBase: void close()> ==> <io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>
INTERFACE edge: interfaceinvoke $r2.<io.netty.channel.Channel: io.netty.channel.ChannelFuture close()>() in <io.vertx.core.net.impl.ConnectionBase: void close()> ==> <io.netty.channel.Channel: io.netty.channel.ChannelFuture close()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.http.impl.Http1xConnectionBase: void close()>() in <io.vertx.core.http.impl.Http1xServerConnection: void close()> ==> <io.vertx.core.net.impl.ConnectionBase: void close()>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.http.impl.Http1xServerConnection: void endReadAndFlush()>() in <io.vertx.core.http.impl.Http1xServerConnection: void close()> ==> <io.vertx.core.net.impl.ConnectionBase: void endReadAndFlush()>
SPECIAL edge: specialinvoke $r7.<io.netty.handler.codec.http.websocketx.CloseWebSocketFrame: void <init>(boolean,int,int,java.lang.String)>(1, 0, 1000, null) in <io.vertx.core.http.impl.Http1xServerConnection: void close()> ==> <io.netty.handler.codec.http.websocketx.CloseWebSocketFrame: void <init>(boolean,int,int,java.lang.String)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelFuture writeAndFlush(java.lang.Object)>($r7) in <io.vertx.core.http.impl.Http1xServerConnection: void close()> ==> <io.vertx.core.net.impl.PartialPooledByteBufAllocator$PooledChannelHandlerContext: io.netty.channel.ChannelFuture writeAndFlush(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<io.netty.channel.ChannelFuture: io.netty.channel.ChannelFuture addListener(io.netty.util.concurrent.GenericFutureListener)>($r8) in <io.vertx.core.http.impl.Http1xServerConnection: void close()> ==> <io.netty.channel.ChannelFuture: io.netty.channel.ChannelFuture addListener(io.netty.util.concurrent.GenericFutureListener)>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.http.impl.Http1xClientConnection: void closeWithPayload(io.netty.buffer.ByteBuf)>(null) in <io.vertx.core.http.impl.Http1xClientConnection: void close()> ==> <io.vertx.core.http.impl.Http1xClientConnection: void closeWithPayload(io.netty.buffer.ByteBuf)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.http.impl.HttpServerImpl$lambda_executeCloseDone_18__109: void <init>(io.vertx.core.Handler,io.vertx.core.Future)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.http.impl.HttpServerImpl$lambda_actualClose_17__110: void <init>(io.vertx.core.http.impl.HttpServerImpl,io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,io.netty.channel.group.ChannelGroupFuture)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: interfaceinvoke $r4.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r5) in <io.vertx.core.impl.VertxImpl$SharedWorkerPool: void release()> ==> <java.util.HashMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r5) in <io.vertx.core.impl.VertxImpl$SharedWorkerPool: void release()> ==> <java.util.IdentityHashMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r5) in <io.vertx.core.impl.VertxImpl$SharedWorkerPool: void release()> ==> <java.util.Hashtable: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r5) in <io.vertx.core.impl.VertxImpl$SharedWorkerPool: void release()> ==> <java.util.EnumMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r5) in <io.vertx.core.impl.VertxImpl$SharedWorkerPool: void release()> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r5) in <io.vertx.core.impl.VertxImpl$SharedWorkerPool: void release()> ==> <java.security.Provider: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r5) in <io.vertx.core.impl.VertxImpl$SharedWorkerPool: void release()> ==> <java.util.jar.Attributes: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r5) in <io.vertx.core.impl.VertxImpl$SharedWorkerPool: void release()> ==> <java.util.TreeMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r5) in <io.vertx.core.impl.VertxImpl$SharedWorkerPool: void release()> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r5) in <io.vertx.core.impl.VertxImpl$SharedWorkerPool: void release()> ==> <java.util.WeakHashMap: java.lang.Object remove(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.impl.WorkerPool: void close()>() in <io.vertx.core.impl.VertxImpl$SharedWorkerPool: void release()> ==> <io.vertx.core.impl.WorkerPool: void close()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.http.impl.HttpClientRequestImpl$lambda_doHandleResponse_4__107: void <init>(io.vertx.core.http.impl.HttpClientRequestImpl,long)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.http.impl.HttpClientRequestBase$error__108: void <init>(io.vertx.core.logging.Logger)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: $r1 = specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setLogActivity(boolean)>(z0) in <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setLogActivity(boolean)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setLogActivity(boolean)>
SPECIAL edge: $r1 = specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setReceiveBufferSize(int)>(i0) in <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setReceiveBufferSize(int)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setReceiveBufferSize(int)>
SPECIAL edge: $r1 = specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setReuseAddress(boolean)>(z0) in <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setReuseAddress(boolean)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setReuseAddress(boolean)>
SPECIAL edge: $r1 = specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setReusePort(boolean)>(z0) in <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setReusePort(boolean)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setReusePort(boolean)>
SPECIAL edge: $r1 = specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSendBufferSize(int)>(i0) in <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setSendBufferSize(int)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSendBufferSize(int)>
SPECIAL edge: $r1 = specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTrafficClass(int)>(i0) in <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setTrafficClass(int)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTrafficClass(int)>
INTERFACE edge: r35 = interfaceinvoke $r29.<io.vertx.core.net.TrustOptions: java.util.function.Function trustManagerMapper(io.vertx.core.Vertx)>(r7) in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManagerFactory getTrustMgrFactory(io.vertx.core.impl.VertxInternal,java.lang.String)> ==> <io.vertx.core.net.TrustOptions: java.util.function.Function trustManagerMapper(io.vertx.core.Vertx)>
INTERFACE edge: $r31 = interfaceinvoke r35.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>(r27) in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManagerFactory getTrustMgrFactory(io.vertx.core.impl.VertxInternal,java.lang.String)> ==> <java.util.function.Function: java.lang.Object apply(java.lang.Object)>
INTERFACE edge: r36 = interfaceinvoke $r30.<io.vertx.core.net.TrustOptions: javax.net.ssl.TrustManagerFactory getTrustManagerFactory(io.vertx.core.Vertx)>(r7) in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManagerFactory getTrustMgrFactory(io.vertx.core.impl.VertxInternal,java.lang.String)> ==> <io.vertx.core.net.TrustOptions: javax.net.ssl.TrustManagerFactory getTrustManagerFactory(io.vertx.core.Vertx)>
VIRTUAL edge: r34 = virtualinvoke r36.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>() in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManagerFactory getTrustMgrFactory(io.vertx.core.impl.VertxInternal,java.lang.String)> ==> <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>
INTERFACE edge: r37 = interfaceinvoke $r28.<io.vertx.core.net.TrustOptions: javax.net.ssl.TrustManagerFactory getTrustManagerFactory(io.vertx.core.Vertx)>(r7) in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManagerFactory getTrustMgrFactory(io.vertx.core.impl.VertxInternal,java.lang.String)> ==> <io.vertx.core.net.TrustOptions: javax.net.ssl.TrustManagerFactory getTrustManagerFactory(io.vertx.core.Vertx)>
VIRTUAL edge: r34 = virtualinvoke r37.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>() in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManagerFactory getTrustMgrFactory(io.vertx.core.impl.VertxInternal,java.lang.String)> ==> <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>
VIRTUAL edge: $i0 = virtualinvoke $r4.<java.util.ArrayList: int size()>() in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManagerFactory getTrustMgrFactory(io.vertx.core.impl.VertxInternal,java.lang.String)> ==> <java.util.ArrayList: int size()>
VIRTUAL edge: $i1 = virtualinvoke $r26.<java.util.ArrayList: int size()>() in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManagerFactory getTrustMgrFactory(io.vertx.core.impl.VertxInternal,java.lang.String)> ==> <java.util.ArrayList: int size()>
INTERFACE edge: $r9 = interfaceinvoke $r6.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r8) in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManagerFactory getTrustMgrFactory(io.vertx.core.impl.VertxInternal,java.lang.String)> ==> <java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>
INTERFACE edge: $r10 = interfaceinvoke r7.<io.vertx.core.impl.VertxInternal: io.vertx.core.file.FileSystem fileSystem()>() in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManagerFactory getTrustMgrFactory(io.vertx.core.impl.VertxInternal,java.lang.String)> ==> <io.vertx.core.impl.VertxImpl: io.vertx.core.file.FileSystem fileSystem()>
VIRTUAL edge: virtualinvoke $r10.<java.lang.Object: java.lang.Class getClass()>() in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManagerFactory getTrustMgrFactory(io.vertx.core.impl.VertxInternal,java.lang.String)> ==> <java.lang.Object: java.lang.Class getClass()>
INTERFACE edge: r38 = interfaceinvoke $r9.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r12) in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManagerFactory getTrustMgrFactory(io.vertx.core.impl.VertxInternal,java.lang.String)> ==> <java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>
SPECIAL edge: specialinvoke $r15.<java.util.ArrayList: void <init>()>() in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManagerFactory getTrustMgrFactory(io.vertx.core.impl.VertxInternal,java.lang.String)> ==> <java.util.ArrayList: void <init>()>
VIRTUAL edge: virtualinvoke $r15.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r25) in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManagerFactory getTrustMgrFactory(io.vertx.core.impl.VertxInternal,java.lang.String)> ==> <java.util.ArrayList: boolean addAll(java.util.Collection)>
INTERFACE edge: $r18 = interfaceinvoke r39.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r17) in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManagerFactory getTrustMgrFactory(io.vertx.core.impl.VertxInternal,java.lang.String)> ==> <java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>
INTERFACE edge: r20 = interfaceinvoke $r19.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManagerFactory getTrustMgrFactory(io.vertx.core.impl.VertxInternal,java.lang.String)> ==> <java.util.AbstractList: java.util.Iterator iterator()>
INTERFACE edge: r20 = interfaceinvoke $r19.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManagerFactory getTrustMgrFactory(io.vertx.core.impl.VertxInternal,java.lang.String)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r20 = interfaceinvoke $r19.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManagerFactory getTrustMgrFactory(io.vertx.core.impl.VertxInternal,java.lang.String)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
INTERFACE edge: r20 = interfaceinvoke $r19.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManagerFactory getTrustMgrFactory(io.vertx.core.impl.VertxInternal,java.lang.String)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z2 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManagerFactory getTrustMgrFactory(io.vertx.core.impl.VertxInternal,java.lang.String)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: boolean hasNext()>
INTERFACE edge: $z2 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManagerFactory getTrustMgrFactory(io.vertx.core.impl.VertxInternal,java.lang.String)> ==> <io.vertx.core.json.JsonArray$Iter: boolean hasNext()>
INTERFACE edge: $z2 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManagerFactory getTrustMgrFactory(io.vertx.core.impl.VertxInternal,java.lang.String)> ==> <io.vertx.core.json.JsonObject$Iter: boolean hasNext()>
INTERFACE edge: $z2 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManagerFactory getTrustMgrFactory(io.vertx.core.impl.VertxInternal,java.lang.String)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: boolean hasNext()>
INTERFACE edge: $z2 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManagerFactory getTrustMgrFactory(io.vertx.core.impl.VertxInternal,java.lang.String)> ==> <java.util.Scanner: boolean hasNext()>
INTERFACE edge: $z2 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManagerFactory getTrustMgrFactory(io.vertx.core.impl.VertxInternal,java.lang.String)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: boolean hasNext()>
INTERFACE edge: $z2 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManagerFactory getTrustMgrFactory(io.vertx.core.impl.VertxInternal,java.lang.String)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: boolean hasNext()>
INTERFACE edge: $r21 = interfaceinvoke r20.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManagerFactory getTrustMgrFactory(io.vertx.core.impl.VertxInternal,java.lang.String)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object next()>
INTERFACE edge: $r21 = interfaceinvoke r20.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManagerFactory getTrustMgrFactory(io.vertx.core.impl.VertxInternal,java.lang.String)> ==> <io.vertx.core.json.JsonArray$Iter: java.lang.Object next()>
INTERFACE edge: $r21 = interfaceinvoke r20.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManagerFactory getTrustMgrFactory(io.vertx.core.impl.VertxInternal,java.lang.String)> ==> <io.vertx.core.json.JsonObject$Iter: java.lang.Object next()>
INTERFACE edge: $r21 = interfaceinvoke r20.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManagerFactory getTrustMgrFactory(io.vertx.core.impl.VertxInternal,java.lang.String)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: java.lang.Object next()>
INTERFACE edge: $r21 = interfaceinvoke r20.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManagerFactory getTrustMgrFactory(io.vertx.core.impl.VertxInternal,java.lang.String)> ==> <java.util.Scanner: java.lang.Object next()>
INTERFACE edge: $r21 = interfaceinvoke r20.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManagerFactory getTrustMgrFactory(io.vertx.core.impl.VertxInternal,java.lang.String)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: java.lang.Object next()>
INTERFACE edge: $r21 = interfaceinvoke r20.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManagerFactory getTrustMgrFactory(io.vertx.core.impl.VertxInternal,java.lang.String)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: java.lang.Object next()>
INTERFACE edge: $r24 = interfaceinvoke r22.<io.vertx.core.buffer.Buffer: byte[] getBytes()>() in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManagerFactory getTrustMgrFactory(io.vertx.core.impl.VertxInternal,java.lang.String)> ==> <io.vertx.core.buffer.impl.BufferImpl: byte[] getBytes()>
SPECIAL edge: specialinvoke $r23.<java.io.ByteArrayInputStream: void <init>(byte[])>($r24) in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManagerFactory getTrustMgrFactory(io.vertx.core.impl.VertxInternal,java.lang.String)> ==> <java.io.ByteArrayInputStream: void <init>(byte[])>
VIRTUAL edge: $r25 = virtualinvoke r40.<java.security.cert.CertificateFactory: java.util.Collection generateCRLs(java.io.InputStream)>($r23) in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManagerFactory getTrustMgrFactory(io.vertx.core.impl.VertxInternal,java.lang.String)> ==> <java.security.cert.CertificateFactory: java.util.Collection generateCRLs(java.io.InputStream)>
SPECIAL edge: specialinvoke $r41.<io.vertx.core.net.impl.VertxTrustManagerFactory: void <init>(javax.net.ssl.TrustManager[])>(r34) in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManagerFactory getTrustMgrFactory(io.vertx.core.impl.VertxInternal,java.lang.String)> ==> <io.vertx.core.net.impl.VertxTrustManagerFactory: void <init>(javax.net.ssl.TrustManager[])>
CLINIT edge: r3 = staticinvoke <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.TrustOptions)>($r2, r1) in <io.vertx.core.net.TrustOptions: java.util.function.Function trustManagerMapper(io.vertx.core.Vertx)> ==> <io.vertx.core.net.impl.KeyStoreHelper: void <clinit>()>
STATIC edge: $r5 = staticinvoke <io.vertx.core.net.TrustOptions$getTrustMgr__129: java.util.function.Function bootstrap$(io.vertx.core.net.impl.KeyStoreHelper)>(r3) in <io.vertx.core.net.TrustOptions: java.util.function.Function trustManagerMapper(io.vertx.core.Vertx)> ==> <io.vertx.core.net.TrustOptions$getTrustMgr__129: java.util.function.Function bootstrap$(io.vertx.core.net.impl.KeyStoreHelper)>
STATIC edge: r3 = staticinvoke <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.TrustOptions)>($r2, r1) in <io.vertx.core.net.TrustOptions: java.util.function.Function trustManagerMapper(io.vertx.core.Vertx)> ==> <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.TrustOptions)>
CLINIT edge: $r3 = staticinvoke <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.TrustOptions)>($r2, r1) in <io.vertx.core.net.TrustOptions: javax.net.ssl.TrustManagerFactory getTrustManagerFactory(io.vertx.core.Vertx)> ==> <io.vertx.core.net.impl.KeyStoreHelper: void <clinit>()>
STATIC edge: $r3 = staticinvoke <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.TrustOptions)>($r2, r1) in <io.vertx.core.net.TrustOptions: javax.net.ssl.TrustManagerFactory getTrustManagerFactory(io.vertx.core.Vertx)> ==> <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.TrustOptions)>
CLINIT edge: $r3 = <io.vertx.core.net.impl.VertxTrustManagerFactory: java.security.Provider PROVIDER> in <io.vertx.core.net.impl.VertxTrustManagerFactory: void <init>(javax.net.ssl.TrustManager[])> ==> <io.vertx.core.net.impl.VertxTrustManagerFactory: void <clinit>()>
CLINIT edge: $r15 = staticinvoke <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)>(r4, $r14) in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.TrustOptions)> ==> <io.vertx.core.net.impl.KeyStoreHelper: void <clinit>()>
STATIC edge: $r13 = staticinvoke <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadCA(java.util.stream.Stream)>(r17) in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.TrustOptions)> ==> <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadCA(java.util.stream.Stream)>
STATIC edge: r17 = staticinvoke <java.util.stream.Stream: java.util.stream.Stream concat(java.util.stream.Stream,java.util.stream.Stream)>(r16, $r11) in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.TrustOptions)> ==> <java.util.stream.Stream: java.util.stream.Stream concat(java.util.stream.Stream,java.util.stream.Stream)>
STATIC edge: $r9 = staticinvoke <io.vertx.core.net.impl.KeyStoreHelper$readFileBlocking__131: java.util.function.Function bootstrap$(io.vertx.core.file.FileSystem)>($r7) in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.TrustOptions)> ==> <io.vertx.core.net.impl.KeyStoreHelper$readFileBlocking__131: java.util.function.Function bootstrap$(io.vertx.core.file.FileSystem)>
STATIC edge: $r5 = staticinvoke <io.vertx.core.net.impl.KeyStoreHelper$lambda_create_2__130: java.util.function.Function bootstrap$(io.vertx.core.impl.VertxInternal)>(r4) in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.TrustOptions)> ==> <io.vertx.core.net.impl.KeyStoreHelper$lambda_create_2__130: java.util.function.Function bootstrap$(io.vertx.core.impl.VertxInternal)>
STATIC edge: $r15 = staticinvoke <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)>(r4, $r14) in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.TrustOptions)> ==> <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)>
CLINIT edge: $r12 = new io.vertx.core.net.impl.KeyStoreHelper in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.TrustOptions)> ==> <io.vertx.core.net.impl.KeyStoreHelper: void <clinit>()>
CLINIT edge: r0 = staticinvoke <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore createEmptyKeyStore()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadCA(java.util.stream.Stream)> ==> <io.vertx.core.net.impl.KeyStoreHelper: void <clinit>()>
STATIC edge: r7 = staticinvoke <io.vertx.core.net.impl.KeyStoreHelper: java.security.cert.X509Certificate[] loadCerts(io.vertx.core.buffer.Buffer)>(r6) in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadCA(java.util.stream.Stream)> ==> <io.vertx.core.net.impl.KeyStoreHelper: java.security.cert.X509Certificate[] loadCerts(io.vertx.core.buffer.Buffer)>
STATIC edge: r3 = staticinvoke <io.vertx.core.net.impl.KeyStoreHelper$iterator__132: java.lang.Iterable bootstrap$(java.util.stream.Stream)>(r1) in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadCA(java.util.stream.Stream)> ==> <io.vertx.core.net.impl.KeyStoreHelper$iterator__132: java.lang.Iterable bootstrap$(java.util.stream.Stream)>
STATIC edge: r0 = staticinvoke <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore createEmptyKeyStore()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadCA(java.util.stream.Stream)> ==> <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore createEmptyKeyStore()>
SPECIAL edge: r36 = specialinvoke r0.<io.vertx.core.net.impl.SSLHelper: javax.net.ssl.KeyManagerFactory getKeyMgrFactory(io.vertx.core.impl.VertxInternal)>(r2) in <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext createContext(io.vertx.core.impl.VertxInternal,javax.net.ssl.X509KeyManager,javax.net.ssl.TrustManagerFactory)> ==> <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.KeyManagerFactory getKeyMgrFactory(io.vertx.core.impl.VertxInternal)>
SPECIAL edge: r37 = specialinvoke r0.<io.vertx.core.net.impl.SSLHelper: javax.net.ssl.KeyManagerFactory getKeyMgrFactory(io.vertx.core.impl.VertxInternal)>(r2) in <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext createContext(io.vertx.core.impl.VertxInternal,javax.net.ssl.X509KeyManager,javax.net.ssl.TrustManagerFactory)> ==> <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.KeyManagerFactory getKeyMgrFactory(io.vertx.core.impl.VertxInternal)>
VIRTUAL edge: virtualinvoke r35.<io.netty.handler.ssl.SslContextBuilder: io.netty.handler.ssl.SslContextBuilder keyManager(javax.net.ssl.KeyManagerFactory)>(r36) in <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext createContext(io.vertx.core.impl.VertxInternal,javax.net.ssl.X509KeyManager,javax.net.ssl.TrustManagerFactory)> ==> <io.netty.handler.ssl.SslContextBuilder: io.netty.handler.ssl.SslContextBuilder keyManager(javax.net.ssl.KeyManagerFactory)>
VIRTUAL edge: virtualinvoke r35.<io.netty.handler.ssl.SslContextBuilder: io.netty.handler.ssl.SslContextBuilder sslProvider(io.netty.handler.ssl.SslProvider)>($r27) in <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext createContext(io.vertx.core.impl.VertxInternal,javax.net.ssl.X509KeyManager,javax.net.ssl.TrustManagerFactory)> ==> <io.netty.handler.ssl.SslContextBuilder: io.netty.handler.ssl.SslContextBuilder sslProvider(io.netty.handler.ssl.SslProvider)>
VIRTUAL edge: virtualinvoke r35.<io.netty.handler.ssl.SslContextBuilder: io.netty.handler.ssl.SslContextBuilder sslProvider(io.netty.handler.ssl.SslProvider)>($r3) in <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext createContext(io.vertx.core.impl.VertxInternal,javax.net.ssl.X509KeyManager,javax.net.ssl.TrustManagerFactory)> ==> <io.netty.handler.ssl.SslContextBuilder: io.netty.handler.ssl.SslContextBuilder sslProvider(io.netty.handler.ssl.SslProvider)>
VIRTUAL edge: virtualinvoke r35.<io.netty.handler.ssl.SslContextBuilder: io.netty.handler.ssl.SslContextBuilder trustManager(javax.net.ssl.TrustManagerFactory)>(r5) in <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext createContext(io.vertx.core.impl.VertxInternal,javax.net.ssl.X509KeyManager,javax.net.ssl.TrustManagerFactory)> ==> <io.netty.handler.ssl.SslContextBuilder: io.netty.handler.ssl.SslContextBuilder trustManager(javax.net.ssl.TrustManagerFactory)>
VIRTUAL edge: virtualinvoke r35.<io.netty.handler.ssl.SslContextBuilder: io.netty.handler.ssl.SslContextBuilder ciphers(java.lang.Iterable)>($r47) in <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext createContext(io.vertx.core.impl.VertxInternal,javax.net.ssl.X509KeyManager,javax.net.ssl.TrustManagerFactory)> ==> <io.netty.handler.ssl.SslContextBuilder: io.netty.handler.ssl.SslContextBuilder ciphers(java.lang.Iterable)>
VIRTUAL edge: virtualinvoke r35.<io.netty.handler.ssl.SslContextBuilder: io.netty.handler.ssl.SslContextBuilder applicationProtocolConfig(io.netty.handler.ssl.ApplicationProtocolConfig)>($r42) in <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext createContext(io.vertx.core.impl.VertxInternal,javax.net.ssl.X509KeyManager,javax.net.ssl.TrustManagerFactory)> ==> <io.netty.handler.ssl.SslContextBuilder: io.netty.handler.ssl.SslContextBuilder applicationProtocolConfig(io.netty.handler.ssl.ApplicationProtocolConfig)>
VIRTUAL edge: r6 = virtualinvoke r35.<io.netty.handler.ssl.SslContextBuilder: io.netty.handler.ssl.SslContext build()>() in <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext createContext(io.vertx.core.impl.VertxInternal,javax.net.ssl.X509KeyManager,javax.net.ssl.TrustManagerFactory)> ==> <io.netty.handler.ssl.SslContextBuilder: io.netty.handler.ssl.SslContext build()>
INTERFACE edge: $r30 = interfaceinvoke r1.<javax.net.ssl.X509KeyManager: java.security.PrivateKey getPrivateKey(java.lang.String)>(null) in <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext createContext(io.vertx.core.impl.VertxInternal,javax.net.ssl.X509KeyManager,javax.net.ssl.TrustManagerFactory)> ==> <io.vertx.core.net.impl.KeyStoreHelper$1: java.security.PrivateKey getPrivateKey(java.lang.String)>
INTERFACE edge: $r31 = interfaceinvoke r1.<javax.net.ssl.X509KeyManager: java.security.cert.X509Certificate[] getCertificateChain(java.lang.String)>(null) in <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext createContext(io.vertx.core.impl.VertxInternal,javax.net.ssl.X509KeyManager,javax.net.ssl.TrustManagerFactory)> ==> <io.vertx.core.net.impl.KeyStoreHelper$1: java.security.cert.X509Certificate[] getCertificateChain(java.lang.String)>
SPECIAL edge: specialinvoke $r41.<io.vertx.core.VertxException: void <init>(java.lang.String)>("Key/certificate is mandatory for SSL") in <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext createContext(io.vertx.core.impl.VertxInternal,javax.net.ssl.X509KeyManager,javax.net.ssl.TrustManagerFactory)> ==> <io.vertx.core.VertxException: void <init>(java.lang.String)>
INTERFACE edge: $z4 = interfaceinvoke $r44.<java.util.Collection: boolean isEmpty()>() in <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext createContext(io.vertx.core.impl.VertxInternal,javax.net.ssl.X509KeyManager,javax.net.ssl.TrustManagerFactory)> ==> <io.vertx.core.impl.ConcurrentHashSet: boolean isEmpty()>
INTERFACE edge: $z4 = interfaceinvoke $r44.<java.util.Collection: boolean isEmpty()>() in <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext createContext(io.vertx.core.impl.VertxInternal,javax.net.ssl.X509KeyManager,javax.net.ssl.TrustManagerFactory)> ==> <java.util.TreeSet: boolean isEmpty()>
INTERFACE edge: $z4 = interfaceinvoke $r44.<java.util.Collection: boolean isEmpty()>() in <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext createContext(io.vertx.core.impl.VertxInternal,javax.net.ssl.X509KeyManager,javax.net.ssl.TrustManagerFactory)> ==> <java.util.ArrayList: boolean isEmpty()>
INTERFACE edge: $z4 = interfaceinvoke $r44.<java.util.Collection: boolean isEmpty()>() in <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext createContext(io.vertx.core.impl.VertxInternal,javax.net.ssl.X509KeyManager,javax.net.ssl.TrustManagerFactory)> ==> <java.util.HashSet: boolean isEmpty()>
INTERFACE edge: $z4 = interfaceinvoke $r44.<java.util.Collection: boolean isEmpty()>() in <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext createContext(io.vertx.core.impl.VertxInternal,javax.net.ssl.X509KeyManager,javax.net.ssl.TrustManagerFactory)> ==> <java.util.AbstractCollection: boolean isEmpty()>
INTERFACE edge: $z4 = interfaceinvoke $r44.<java.util.Collection: boolean isEmpty()>() in <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext createContext(io.vertx.core.impl.VertxInternal,javax.net.ssl.X509KeyManager,javax.net.ssl.TrustManagerFactory)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$1: boolean isEmpty()>
INTERFACE edge: $z4 = interfaceinvoke $r44.<java.util.Collection: boolean isEmpty()>() in <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext createContext(io.vertx.core.impl.VertxInternal,javax.net.ssl.X509KeyManager,javax.net.ssl.TrustManagerFactory)> ==> <java.util.ArrayDeque: boolean isEmpty()>
INTERFACE edge: $z4 = interfaceinvoke $r44.<java.util.Collection: boolean isEmpty()>() in <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext createContext(io.vertx.core.impl.VertxInternal,javax.net.ssl.X509KeyManager,javax.net.ssl.TrustManagerFactory)> ==> <java.util.concurrent.CopyOnWriteArrayList: boolean isEmpty()>
INTERFACE edge: $z4 = interfaceinvoke $r44.<java.util.Collection: boolean isEmpty()>() in <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext createContext(io.vertx.core.impl.VertxInternal,javax.net.ssl.X509KeyManager,javax.net.ssl.TrustManagerFactory)> ==> <java.util.concurrent.ConcurrentLinkedQueue: boolean isEmpty()>
INTERFACE edge: $z3 = interfaceinvoke $r45.<java.util.Collection: boolean isEmpty()>() in <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext createContext(io.vertx.core.impl.VertxInternal,javax.net.ssl.X509KeyManager,javax.net.ssl.TrustManagerFactory)> ==> <io.vertx.core.impl.ConcurrentHashSet: boolean isEmpty()>
INTERFACE edge: $z3 = interfaceinvoke $r45.<java.util.Collection: boolean isEmpty()>() in <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext createContext(io.vertx.core.impl.VertxInternal,javax.net.ssl.X509KeyManager,javax.net.ssl.TrustManagerFactory)> ==> <java.util.TreeSet: boolean isEmpty()>
INTERFACE edge: $z3 = interfaceinvoke $r45.<java.util.Collection: boolean isEmpty()>() in <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext createContext(io.vertx.core.impl.VertxInternal,javax.net.ssl.X509KeyManager,javax.net.ssl.TrustManagerFactory)> ==> <java.util.ArrayList: boolean isEmpty()>
INTERFACE edge: $z3 = interfaceinvoke $r45.<java.util.Collection: boolean isEmpty()>() in <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext createContext(io.vertx.core.impl.VertxInternal,javax.net.ssl.X509KeyManager,javax.net.ssl.TrustManagerFactory)> ==> <java.util.HashSet: boolean isEmpty()>
INTERFACE edge: $z3 = interfaceinvoke $r45.<java.util.Collection: boolean isEmpty()>() in <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext createContext(io.vertx.core.impl.VertxInternal,javax.net.ssl.X509KeyManager,javax.net.ssl.TrustManagerFactory)> ==> <java.util.AbstractCollection: boolean isEmpty()>
INTERFACE edge: $z3 = interfaceinvoke $r45.<java.util.Collection: boolean isEmpty()>() in <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext createContext(io.vertx.core.impl.VertxInternal,javax.net.ssl.X509KeyManager,javax.net.ssl.TrustManagerFactory)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$1: boolean isEmpty()>
INTERFACE edge: $z3 = interfaceinvoke $r45.<java.util.Collection: boolean isEmpty()>() in <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext createContext(io.vertx.core.impl.VertxInternal,javax.net.ssl.X509KeyManager,javax.net.ssl.TrustManagerFactory)> ==> <java.util.ArrayDeque: boolean isEmpty()>
INTERFACE edge: $z3 = interfaceinvoke $r45.<java.util.Collection: boolean isEmpty()>() in <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext createContext(io.vertx.core.impl.VertxInternal,javax.net.ssl.X509KeyManager,javax.net.ssl.TrustManagerFactory)> ==> <java.util.concurrent.CopyOnWriteArrayList: boolean isEmpty()>
INTERFACE edge: $z3 = interfaceinvoke $r45.<java.util.Collection: boolean isEmpty()>() in <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext createContext(io.vertx.core.impl.VertxInternal,javax.net.ssl.X509KeyManager,javax.net.ssl.TrustManagerFactory)> ==> <java.util.concurrent.ConcurrentLinkedQueue: boolean isEmpty()>
INTERFACE edge: $i1 = interfaceinvoke $r46.<java.util.Collection: int size()>() in <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext createContext(io.vertx.core.impl.VertxInternal,javax.net.ssl.X509KeyManager,javax.net.ssl.TrustManagerFactory)> ==> <io.vertx.core.impl.ConcurrentHashSet: int size()>
INTERFACE edge: $i1 = interfaceinvoke $r46.<java.util.Collection: int size()>() in <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext createContext(io.vertx.core.impl.VertxInternal,javax.net.ssl.X509KeyManager,javax.net.ssl.TrustManagerFactory)> ==> <java.util.TreeSet: int size()>
INTERFACE edge: $i1 = interfaceinvoke $r46.<java.util.Collection: int size()>() in <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext createContext(io.vertx.core.impl.VertxInternal,javax.net.ssl.X509KeyManager,javax.net.ssl.TrustManagerFactory)> ==> <java.util.ArrayList: int size()>
INTERFACE edge: $i1 = interfaceinvoke $r46.<java.util.Collection: int size()>() in <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext createContext(io.vertx.core.impl.VertxInternal,javax.net.ssl.X509KeyManager,javax.net.ssl.TrustManagerFactory)> ==> <java.util.HashSet: int size()>
INTERFACE edge: $i1 = interfaceinvoke $r46.<java.util.Collection: int size()>() in <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext createContext(io.vertx.core.impl.VertxInternal,javax.net.ssl.X509KeyManager,javax.net.ssl.TrustManagerFactory)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$1: int size()>
INTERFACE edge: $i1 = interfaceinvoke $r46.<java.util.Collection: int size()>() in <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext createContext(io.vertx.core.impl.VertxInternal,javax.net.ssl.X509KeyManager,javax.net.ssl.TrustManagerFactory)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2: int size()>
INTERFACE edge: $i1 = interfaceinvoke $r46.<java.util.Collection: int size()>() in <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext createContext(io.vertx.core.impl.VertxInternal,javax.net.ssl.X509KeyManager,javax.net.ssl.TrustManagerFactory)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$1: int size()>
INTERFACE edge: $i1 = interfaceinvoke $r46.<java.util.Collection: int size()>() in <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext createContext(io.vertx.core.impl.VertxInternal,javax.net.ssl.X509KeyManager,javax.net.ssl.TrustManagerFactory)> ==> <java.util.ArrayDeque: int size()>
INTERFACE edge: $i1 = interfaceinvoke $r46.<java.util.Collection: int size()>() in <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext createContext(io.vertx.core.impl.VertxInternal,javax.net.ssl.X509KeyManager,javax.net.ssl.TrustManagerFactory)> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i1 = interfaceinvoke $r46.<java.util.Collection: int size()>() in <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext createContext(io.vertx.core.impl.VertxInternal,javax.net.ssl.X509KeyManager,javax.net.ssl.TrustManagerFactory)> ==> <java.util.concurrent.CopyOnWriteArrayList: int size()>
INTERFACE edge: $i1 = interfaceinvoke $r46.<java.util.Collection: int size()>() in <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext createContext(io.vertx.core.impl.VertxInternal,javax.net.ssl.X509KeyManager,javax.net.ssl.TrustManagerFactory)> ==> <java.util.concurrent.ConcurrentLinkedQueue: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r10.<java.util.List: int size()>() in <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext createContext(io.vertx.core.impl.VertxInternal,javax.net.ssl.X509KeyManager,javax.net.ssl.TrustManagerFactory)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$1: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r10.<java.util.List: int size()>() in <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext createContext(io.vertx.core.impl.VertxInternal,javax.net.ssl.X509KeyManager,javax.net.ssl.TrustManagerFactory)> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r10.<java.util.List: int size()>() in <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext createContext(io.vertx.core.impl.VertxInternal,javax.net.ssl.X509KeyManager,javax.net.ssl.TrustManagerFactory)> ==> <java.util.concurrent.CopyOnWriteArrayList: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r10.<java.util.List: int size()>() in <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext createContext(io.vertx.core.impl.VertxInternal,javax.net.ssl.X509KeyManager,javax.net.ssl.TrustManagerFactory)> ==> <java.util.ArrayList: int size()>
INTERFACE edge: $r16 = interfaceinvoke $r12.<java.util.List: java.util.stream.Stream stream()>() in <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext createContext(io.vertx.core.impl.VertxInternal,javax.net.ssl.X509KeyManager,javax.net.ssl.TrustManagerFactory)> ==> <java.util.List: java.util.stream.Stream stream()>
VIRTUAL edge: virtualinvoke $r17.<java.lang.Object: java.lang.Class getClass()>() in <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext createContext(io.vertx.core.impl.VertxInternal,javax.net.ssl.X509KeyManager,javax.net.ssl.TrustManagerFactory)> ==> <java.lang.Object: java.lang.Class getClass()>
INTERFACE edge: $r20 = interfaceinvoke $r16.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r19) in <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext createContext(io.vertx.core.impl.VertxInternal,javax.net.ssl.X509KeyManager,javax.net.ssl.TrustManagerFactory)> ==> <java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>
INTERFACE edge: $r22 = interfaceinvoke $r20.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r21) in <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext createContext(io.vertx.core.impl.VertxInternal,javax.net.ssl.X509KeyManager,javax.net.ssl.TrustManagerFactory)> ==> <java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>
SPECIAL edge: specialinvoke $r42.<io.netty.handler.ssl.ApplicationProtocolConfig: void <init>(io.netty.handler.ssl.ApplicationProtocolConfig$Protocol,io.netty.handler.ssl.ApplicationProtocolConfig$SelectorFailureBehavior,io.netty.handler.ssl.ApplicationProtocolConfig$SelectedListenerFailureBehavior,java.lang.Iterable)>($r13, $r14, $r15, $r23) in <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext createContext(io.vertx.core.impl.VertxInternal,javax.net.ssl.X509KeyManager,javax.net.ssl.TrustManagerFactory)> ==> <io.netty.handler.ssl.ApplicationProtocolConfig: void <init>(io.netty.handler.ssl.ApplicationProtocolConfig$Protocol,io.netty.handler.ssl.ApplicationProtocolConfig$SelectorFailureBehavior,io.netty.handler.ssl.ApplicationProtocolConfig$SelectedListenerFailureBehavior,java.lang.Iterable)>
VIRTUAL edge: r7 = virtualinvoke r6.<io.netty.handler.ssl.SslContext: javax.net.ssl.SSLSessionContext sessionContext()>() in <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext createContext(io.vertx.core.impl.VertxInternal,javax.net.ssl.X509KeyManager,javax.net.ssl.TrustManagerFactory)> ==> <io.netty.handler.ssl.SslContext: javax.net.ssl.SSLSessionContext sessionContext()>
VIRTUAL edge: virtualinvoke $r8.<io.netty.handler.ssl.OpenSslServerSessionContext: void setSessionCacheEnabled(boolean)>($z2) in <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext createContext(io.vertx.core.impl.VertxInternal,javax.net.ssl.X509KeyManager,javax.net.ssl.TrustManagerFactory)> ==> <io.netty.handler.ssl.OpenSslServerSessionContext: void setSessionCacheEnabled(boolean)>
SPECIAL edge: specialinvoke $r43.<io.vertx.core.VertxException: void <init>(java.lang.Throwable)>($r33) in <io.vertx.core.net.impl.SSLHelper: io.netty.handler.ssl.SslContext createContext(io.vertx.core.impl.VertxInternal,javax.net.ssl.X509KeyManager,javax.net.ssl.TrustManagerFactory)> ==> <io.vertx.core.VertxException: void <init>(java.lang.Throwable)>
VIRTUAL edge: virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>() in <io.vertx.core.net.KeyCertOptions: java.util.function.Function keyManagerMapper(io.vertx.core.Vertx)> ==> <java.lang.Object: java.lang.Class getClass()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.List: int size()>() in <io.vertx.core.net.impl.KeyStoreHelper$1: java.security.cert.X509Certificate[] getCertificateChain(java.lang.String)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$1: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.List: int size()>() in <io.vertx.core.net.impl.KeyStoreHelper$1: java.security.cert.X509Certificate[] getCertificateChain(java.lang.String)> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.List: int size()>() in <io.vertx.core.net.impl.KeyStoreHelper$1: java.security.cert.X509Certificate[] getCertificateChain(java.lang.String)> ==> <java.util.concurrent.CopyOnWriteArrayList: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.List: int size()>() in <io.vertx.core.net.impl.KeyStoreHelper$1: java.security.cert.X509Certificate[] getCertificateChain(java.lang.String)> ==> <java.util.ArrayList: int size()>
INTERFACE edge: $r4 = interfaceinvoke $r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r3) in <io.vertx.core.net.impl.KeyStoreHelper$1: java.security.cert.X509Certificate[] getCertificateChain(java.lang.String)> ==> <java.util.AbstractCollection: java.lang.Object[] toArray(java.lang.Object[])>
INTERFACE edge: $r4 = interfaceinvoke $r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r3) in <io.vertx.core.net.impl.KeyStoreHelper$1: java.security.cert.X509Certificate[] getCertificateChain(java.lang.String)> ==> <java.util.LinkedList: java.lang.Object[] toArray(java.lang.Object[])>
INTERFACE edge: $r4 = interfaceinvoke $r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r3) in <io.vertx.core.net.impl.KeyStoreHelper$1: java.security.cert.X509Certificate[] getCertificateChain(java.lang.String)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] toArray(java.lang.Object[])>
INTERFACE edge: $r4 = interfaceinvoke $r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r3) in <io.vertx.core.net.impl.KeyStoreHelper$1: java.security.cert.X509Certificate[] getCertificateChain(java.lang.String)> ==> <java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>
SPECIAL edge: $r4 = specialinvoke r0.<io.vertx.core.shareddata.impl.LocalMapImpl: java.util.function.Function typeChecked(java.util.function.Function)>(r2) in <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.function.Function typeChecked(java.util.function.Function)>
STATIC edge: $r1 = staticinvoke <io.vertx.core.shareddata.impl.LocalMapImpl$lambda_typeChecked_2__133: java.util.function.Function bootstrap$(java.util.function.Function)>(r0) in <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.function.Function typeChecked(java.util.function.Function)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$lambda_typeChecked_2__133: java.util.function.Function bootstrap$(java.util.function.Function)>
VIRTUAL edge: $r0 = virtualinvoke r5.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManager[] createUntrustRevokedCertTrustManager(javax.net.ssl.TrustManager[],java.util.ArrayList)> ==> <java.lang.Object: java.lang.Object clone()>
VIRTUAL edge: $r0 = virtualinvoke r5.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManager[] createUntrustRevokedCertTrustManager(javax.net.ssl.TrustManager[],java.util.ArrayList)> ==> <java.util.HashMap: java.lang.Object clone()>
VIRTUAL edge: $r0 = virtualinvoke r5.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManager[] createUntrustRevokedCertTrustManager(javax.net.ssl.TrustManager[],java.util.ArrayList)> ==> <io.vertx.core.net.PemTrustOptions: java.lang.Object clone()>
VIRTUAL edge: $r0 = virtualinvoke r5.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManager[] createUntrustRevokedCertTrustManager(javax.net.ssl.TrustManager[],java.util.ArrayList)> ==> <java.lang.Enum: java.lang.Object clone()>
VIRTUAL edge: $r0 = virtualinvoke r5.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManager[] createUntrustRevokedCertTrustManager(javax.net.ssl.TrustManager[],java.util.ArrayList)> ==> <java.util.TreeMap: java.lang.Object clone()>
VIRTUAL edge: $r0 = virtualinvoke r5.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManager[] createUntrustRevokedCertTrustManager(javax.net.ssl.TrustManager[],java.util.ArrayList)> ==> <java.util.jar.Attributes: java.lang.Object clone()>
VIRTUAL edge: $r0 = virtualinvoke r5.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManager[] createUntrustRevokedCertTrustManager(javax.net.ssl.TrustManager[],java.util.ArrayList)> ==> <java.util.EnumMap: java.lang.Object clone()>
VIRTUAL edge: $r0 = virtualinvoke r5.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManager[] createUntrustRevokedCertTrustManager(javax.net.ssl.TrustManager[],java.util.ArrayList)> ==> <java.util.TreeSet: java.lang.Object clone()>
VIRTUAL edge: $r0 = virtualinvoke r5.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManager[] createUntrustRevokedCertTrustManager(javax.net.ssl.TrustManager[],java.util.ArrayList)> ==> <java.util.ArrayList: java.lang.Object clone()>
VIRTUAL edge: $r0 = virtualinvoke r5.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManager[] createUntrustRevokedCertTrustManager(javax.net.ssl.TrustManager[],java.util.ArrayList)> ==> <java.util.HashSet: java.lang.Object clone()>
VIRTUAL edge: $r0 = virtualinvoke r5.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManager[] createUntrustRevokedCertTrustManager(javax.net.ssl.TrustManager[],java.util.ArrayList)> ==> <java.util.Hashtable: java.lang.Object clone()>
VIRTUAL edge: $r0 = virtualinvoke r5.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManager[] createUntrustRevokedCertTrustManager(javax.net.ssl.TrustManager[],java.util.ArrayList)> ==> <java.util.ArrayDeque: java.lang.Object clone()>
VIRTUAL edge: $r0 = virtualinvoke r5.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManager[] createUntrustRevokedCertTrustManager(javax.net.ssl.TrustManager[],java.util.ArrayList)> ==> <io.vertx.core.net.PemKeyCertOptions: java.lang.Object clone()>
VIRTUAL edge: $r0 = virtualinvoke r5.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManager[] createUntrustRevokedCertTrustManager(javax.net.ssl.TrustManager[],java.util.ArrayList)> ==> <io.vertx.core.net.JdkSSLEngineOptions: java.lang.Object clone()>
VIRTUAL edge: $r0 = virtualinvoke r5.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManager[] createUntrustRevokedCertTrustManager(javax.net.ssl.TrustManager[],java.util.ArrayList)> ==> <java.util.jar.Manifest: java.lang.Object clone()>
VIRTUAL edge: $r0 = virtualinvoke r5.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManager[] createUntrustRevokedCertTrustManager(javax.net.ssl.TrustManager[],java.util.ArrayList)> ==> <io.vertx.core.net.JksOptions: java.lang.Object clone()>
VIRTUAL edge: $r0 = virtualinvoke r5.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManager[] createUntrustRevokedCertTrustManager(javax.net.ssl.TrustManager[],java.util.ArrayList)> ==> <io.vertx.core.net.OpenSSLEngineOptions: java.lang.Object clone()>
VIRTUAL edge: $r0 = virtualinvoke r5.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManager[] createUntrustRevokedCertTrustManager(javax.net.ssl.TrustManager[],java.util.ArrayList)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.lang.Object clone()>
VIRTUAL edge: $r0 = virtualinvoke r5.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManager[] createUntrustRevokedCertTrustManager(javax.net.ssl.TrustManager[],java.util.ArrayList)> ==> <io.vertx.core.net.PfxOptions: java.lang.Object clone()>
VIRTUAL edge: $r0 = virtualinvoke r5.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManager[] createUntrustRevokedCertTrustManager(javax.net.ssl.TrustManager[],java.util.ArrayList)> ==> <java.util.Date: java.lang.Object clone()>
VIRTUAL edge: $r0 = virtualinvoke r5.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManager[] createUntrustRevokedCertTrustManager(javax.net.ssl.TrustManager[],java.util.ArrayList)> ==> <java.util.Locale: java.lang.Object clone()>
VIRTUAL edge: $r0 = virtualinvoke r5.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManager[] createUntrustRevokedCertTrustManager(javax.net.ssl.TrustManager[],java.util.ArrayList)> ==> <java.util.zip.ZipEntry: java.lang.Object clone()>
VIRTUAL edge: $r0 = virtualinvoke r5.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManager[] createUntrustRevokedCertTrustManager(javax.net.ssl.TrustManager[],java.util.ArrayList)> ==> <java.util.AbstractMap: java.lang.Object clone()>
VIRTUAL edge: $r0 = virtualinvoke r5.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManager[] createUntrustRevokedCertTrustManager(javax.net.ssl.TrustManager[],java.util.ArrayList)> ==> <java.util.LinkedList: java.lang.Object clone()>
VIRTUAL edge: $r0 = virtualinvoke r5.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManager[] createUntrustRevokedCertTrustManager(javax.net.ssl.TrustManager[],java.util.ArrayList)> ==> <java.util.IdentityHashMap: java.lang.Object clone()>
SPECIAL edge: specialinvoke $r7.<io.vertx.core.net.impl.SSLHelper$1: void <init>(javax.net.ssl.X509TrustManager,java.util.ArrayList)>(r2, r4) in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManager[] createUntrustRevokedCertTrustManager(javax.net.ssl.TrustManager[],java.util.ArrayList)> ==> <io.vertx.core.net.impl.SSLHelper$1: void <init>(javax.net.ssl.X509TrustManager,java.util.ArrayList)>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.net.impl.SSLHelper$readFileBlocking__119: void <init>(io.vertx.core.file.FileSystem)>($r0) in <io.vertx.core.net.impl.SSLHelper$readFileBlocking__119: java.util.function.Function bootstrap$(io.vertx.core.file.FileSystem)> ==> <io.vertx.core.net.impl.SSLHelper$readFileBlocking__119: void <init>(io.vertx.core.file.FileSystem)>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.net.impl.SSLHelper$lambda_getTrustMgrFactory_0__118: void <init>(io.vertx.core.impl.VertxInternal)>($r0) in <io.vertx.core.net.impl.SSLHelper$lambda_getTrustMgrFactory_0__118: java.util.function.Function bootstrap$(io.vertx.core.impl.VertxInternal)> ==> <io.vertx.core.net.impl.SSLHelper$lambda_getTrustMgrFactory_0__118: void <init>(io.vertx.core.impl.VertxInternal)>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.net.impl.SSLHelper$2: void <init>()>() in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.TrustManager createTrustAllTrustManager()> ==> <io.vertx.core.net.impl.SSLHelper$2: void <init>()>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.net.impl.VertxTrustManagerFactory$1: void <init>(java.lang.String,double,java.lang.String)>("", 0.0, "") in <io.vertx.core.net.impl.VertxTrustManagerFactory: void <clinit>()> ==> <io.vertx.core.net.impl.VertxTrustManagerFactory$1: void <init>(java.lang.String,double,java.lang.String)>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.net.impl.SSLHelper$get__120: void <init>(java.util.Map)>($r0) in <io.vertx.core.net.impl.SSLHelper$get__120: java.util.function.Function bootstrap$(java.util.Map)> ==> <io.vertx.core.net.impl.SSLHelper$get__120: void <init>(java.util.Map)>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.net.KeyCertOptions$getKeyMgr__121: void <init>(io.vertx.core.net.impl.KeyStoreHelper)>($r0) in <io.vertx.core.net.KeyCertOptions$getKeyMgr__121: java.util.function.Function bootstrap$(io.vertx.core.net.impl.KeyStoreHelper)> ==> <io.vertx.core.net.KeyCertOptions$getKeyMgr__121: void <init>(io.vertx.core.net.impl.KeyStoreHelper)>
VIRTUAL edge: $r28 = virtualinvoke r35.<io.vertx.core.net.JksOptions: java.lang.String getPath()>() in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <io.vertx.core.net.JksOptions: java.lang.String getPath()>
VIRTUAL edge: $r29 = virtualinvoke r35.<io.vertx.core.net.JksOptions: io.vertx.core.buffer.Buffer getValue()>() in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <io.vertx.core.net.JksOptions: io.vertx.core.buffer.Buffer getValue()>
VIRTUAL edge: virtualinvoke r35.<java.lang.Object: java.lang.Class getClass()>() in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r32 = virtualinvoke r35.<io.vertx.core.net.JksOptions: java.lang.String getPassword()>() in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <io.vertx.core.net.JksOptions: java.lang.String getPassword()>
VIRTUAL edge: $r34 = virtualinvoke r35.<io.vertx.core.net.JksOptions: java.lang.String getPassword()>() in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <io.vertx.core.net.JksOptions: java.lang.String getPassword()>
SPECIAL edge: specialinvoke $r31.<io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)>($r33, $r34) in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke r37.<io.vertx.core.net.PfxOptions: java.lang.String getPath()>() in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <io.vertx.core.net.PfxOptions: java.lang.String getPath()>
VIRTUAL edge: $r22 = virtualinvoke r37.<io.vertx.core.net.PfxOptions: io.vertx.core.buffer.Buffer getValue()>() in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <io.vertx.core.net.PfxOptions: io.vertx.core.buffer.Buffer getValue()>
VIRTUAL edge: virtualinvoke r37.<java.lang.Object: java.lang.Class getClass()>() in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r25 = virtualinvoke r37.<io.vertx.core.net.PfxOptions: java.lang.String getPassword()>() in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <io.vertx.core.net.PfxOptions: java.lang.String getPassword()>
VIRTUAL edge: $r27 = virtualinvoke r37.<io.vertx.core.net.PfxOptions: java.lang.String getPassword()>() in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <io.vertx.core.net.PfxOptions: java.lang.String getPassword()>
SPECIAL edge: specialinvoke $r24.<io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)>($r26, $r27) in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.util.ArrayList: void <init>()>() in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <java.util.ArrayList: void <init>()>
INTERFACE edge: interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r20) in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r1.<java.util.List: boolean addAll(java.util.Collection)>($r3) in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <java.util.ArrayList: boolean addAll(java.util.Collection)>
VIRTUAL edge: $r2 = virtualinvoke r39.<io.vertx.core.net.PemKeyCertOptions: java.util.List getKeyPaths()>() in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <io.vertx.core.net.PemKeyCertOptions: java.util.List getKeyPaths()>
VIRTUAL edge: $r3 = virtualinvoke r39.<io.vertx.core.net.PemKeyCertOptions: java.util.List getKeyValues()>() in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <io.vertx.core.net.PemKeyCertOptions: java.util.List getKeyValues()>
VIRTUAL edge: $r5 = virtualinvoke r39.<io.vertx.core.net.PemKeyCertOptions: java.util.List getCertPaths()>() in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <io.vertx.core.net.PemKeyCertOptions: java.util.List getCertPaths()>
VIRTUAL edge: $r6 = virtualinvoke r39.<io.vertx.core.net.PemKeyCertOptions: java.util.List getCertValues()>() in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <io.vertx.core.net.PemKeyCertOptions: java.util.List getCertValues()>
INTERFACE edge: r41 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <java.util.AbstractList: java.util.Iterator iterator()>
INTERFACE edge: r41 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r41 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
INTERFACE edge: r41 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z3 = interfaceinvoke r41.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: boolean hasNext()>
INTERFACE edge: $z3 = interfaceinvoke r41.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <io.vertx.core.json.JsonArray$Iter: boolean hasNext()>
INTERFACE edge: $z3 = interfaceinvoke r41.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <io.vertx.core.json.JsonObject$Iter: boolean hasNext()>
INTERFACE edge: $z3 = interfaceinvoke r41.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: boolean hasNext()>
INTERFACE edge: $z3 = interfaceinvoke r41.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <java.util.Scanner: boolean hasNext()>
INTERFACE edge: $z3 = interfaceinvoke r41.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: boolean hasNext()>
INTERFACE edge: $z3 = interfaceinvoke r41.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: boolean hasNext()>
INTERFACE edge: $r16 = interfaceinvoke r41.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object next()>
INTERFACE edge: $r16 = interfaceinvoke r41.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <io.vertx.core.json.JsonArray$Iter: java.lang.Object next()>
INTERFACE edge: $r16 = interfaceinvoke r41.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <io.vertx.core.json.JsonObject$Iter: java.lang.Object next()>
INTERFACE edge: $r16 = interfaceinvoke r41.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: java.lang.Object next()>
INTERFACE edge: $r16 = interfaceinvoke r41.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <java.util.Scanner: java.lang.Object next()>
INTERFACE edge: $r16 = interfaceinvoke r41.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: java.lang.Object next()>
INTERFACE edge: $r16 = interfaceinvoke r41.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: java.lang.Object next()>
INTERFACE edge: $r17 = interfaceinvoke r11.<io.vertx.core.impl.VertxInternal: io.vertx.core.file.FileSystem fileSystem()>() in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <io.vertx.core.impl.VertxImpl: io.vertx.core.file.FileSystem fileSystem()>
INTERFACE edge: $r18 = interfaceinvoke r11.<io.vertx.core.impl.VertxInternal: java.io.File resolveFile(java.lang.String)>(r42) in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <io.vertx.core.impl.VertxImpl: java.io.File resolveFile(java.lang.String)>
INTERFACE edge: $r12 = interfaceinvoke r11.<io.vertx.core.impl.VertxInternal: io.vertx.core.file.FileSystem fileSystem()>() in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <io.vertx.core.impl.VertxImpl: io.vertx.core.file.FileSystem fileSystem()>
INTERFACE edge: $r13 = interfaceinvoke r11.<io.vertx.core.impl.VertxInternal: java.io.File resolveFile(java.lang.String)>(r10) in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <io.vertx.core.impl.VertxImpl: java.io.File resolveFile(java.lang.String)>
VIRTUAL edge: $r19 = virtualinvoke $r18.<java.io.File: java.lang.String getAbsolutePath()>() in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <java.io.File: java.lang.String getAbsolutePath()>
INTERFACE edge: $r20 = interfaceinvoke $r17.<io.vertx.core.file.FileSystem: io.vertx.core.buffer.Buffer readFileBlocking(java.lang.String)>($r19) in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.buffer.Buffer readFileBlocking(java.lang.String)>
SPECIAL edge: specialinvoke $r4.<java.util.ArrayList: void <init>()>() in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <java.util.ArrayList: void <init>()>
INTERFACE edge: interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r15) in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<java.util.List: boolean addAll(java.util.Collection)>($r6) in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <java.util.ArrayList: boolean addAll(java.util.Collection)>
INTERFACE edge: r44 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <java.util.AbstractList: java.util.Iterator iterator()>
INTERFACE edge: r44 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r44 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
INTERFACE edge: r44 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z5 = interfaceinvoke r44.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: boolean hasNext()>
INTERFACE edge: $z5 = interfaceinvoke r44.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <io.vertx.core.json.JsonArray$Iter: boolean hasNext()>
INTERFACE edge: $z5 = interfaceinvoke r44.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <io.vertx.core.json.JsonObject$Iter: boolean hasNext()>
INTERFACE edge: $z5 = interfaceinvoke r44.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: boolean hasNext()>
INTERFACE edge: $z5 = interfaceinvoke r44.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <java.util.Scanner: boolean hasNext()>
INTERFACE edge: $z5 = interfaceinvoke r44.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: boolean hasNext()>
INTERFACE edge: $z5 = interfaceinvoke r44.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: boolean hasNext()>
INTERFACE edge: $r9 = interfaceinvoke r44.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object next()>
INTERFACE edge: $r9 = interfaceinvoke r44.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <io.vertx.core.json.JsonArray$Iter: java.lang.Object next()>
INTERFACE edge: $r9 = interfaceinvoke r44.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <io.vertx.core.json.JsonObject$Iter: java.lang.Object next()>
INTERFACE edge: $r9 = interfaceinvoke r44.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: java.lang.Object next()>
INTERFACE edge: $r9 = interfaceinvoke r44.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <java.util.Scanner: java.lang.Object next()>
INTERFACE edge: $r9 = interfaceinvoke r44.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: java.lang.Object next()>
INTERFACE edge: $r9 = interfaceinvoke r44.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: java.lang.Object next()>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.io.File: java.lang.String getAbsolutePath()>() in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <java.io.File: java.lang.String getAbsolutePath()>
INTERFACE edge: $r15 = interfaceinvoke $r12.<io.vertx.core.file.FileSystem: io.vertx.core.buffer.Buffer readFileBlocking(java.lang.String)>($r14) in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.buffer.Buffer readFileBlocking(java.lang.String)>
SPECIAL edge: specialinvoke $r7.<io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)>($r8, "dummy") in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)> ==> <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)>
CLINIT edge: r42 = staticinvoke <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore createEmptyKeyStore()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <io.vertx.core.net.impl.KeyStoreHelper: void <clinit>()>
STATIC edge: $r19 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.stream.Collectors: java.util.stream.Collector toList()>
STATIC edge: $r17 = staticinvoke <io.vertx.core.net.impl.KeyStoreHelper$lambda_new_3__134: java.util.function.Function bootstrap$()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <io.vertx.core.net.impl.KeyStoreHelper$lambda_new_3__134: java.util.function.Function bootstrap$()>
STATIC edge: $r15 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r52) in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.Arrays: java.util.List asList(java.lang.Object[])>
STATIC edge: $r13 = staticinvoke <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)>(r49) in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)>
STATIC edge: r43 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>($r39) in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>
STATIC edge: $r39 = staticinvoke <javax.net.ssl.TrustManagerFactory: java.lang.String getDefaultAlgorithm()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <javax.net.ssl.TrustManagerFactory: java.lang.String getDefaultAlgorithm()>
STATIC edge: r42 = staticinvoke <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore createEmptyKeyStore()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore createEmptyKeyStore()>
CLINIT edge: $r13 = staticinvoke <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)>(r49) in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <io.vertx.core.net.impl.KeyStoreHelper: void <clinit>()>
STATIC edge: $z0 = staticinvoke <io.netty.util.internal.PlatformDependent: boolean isAndroid()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <io.netty.util.internal.PlatformDependent: boolean isAndroid()>
INTERFACE edge: $i0 = interfaceinvoke r0.<java.util.List: int size()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadKeyCert(java.util.List,java.util.List)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$1: int size()>
INTERFACE edge: $i0 = interfaceinvoke r0.<java.util.List: int size()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadKeyCert(java.util.List,java.util.List)> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i0 = interfaceinvoke r0.<java.util.List: int size()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadKeyCert(java.util.List,java.util.List)> ==> <java.util.concurrent.CopyOnWriteArrayList: int size()>
INTERFACE edge: $i0 = interfaceinvoke r0.<java.util.List: int size()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadKeyCert(java.util.List,java.util.List)> ==> <java.util.ArrayList: int size()>
INTERFACE edge: $i2 = interfaceinvoke r0.<java.util.List: int size()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadKeyCert(java.util.List,java.util.List)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$1: int size()>
INTERFACE edge: $i2 = interfaceinvoke r0.<java.util.List: int size()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadKeyCert(java.util.List,java.util.List)> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i2 = interfaceinvoke r0.<java.util.List: int size()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadKeyCert(java.util.List,java.util.List)> ==> <java.util.concurrent.CopyOnWriteArrayList: int size()>
INTERFACE edge: $i2 = interfaceinvoke r0.<java.util.List: int size()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadKeyCert(java.util.List,java.util.List)> ==> <java.util.ArrayList: int size()>
INTERFACE edge: r3 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadKeyCert(java.util.List,java.util.List)> ==> <java.util.AbstractList: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadKeyCert(java.util.List,java.util.List)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadKeyCert(java.util.List,java.util.List)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadKeyCert(java.util.List,java.util.List)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $i1 = interfaceinvoke r1.<java.util.List: int size()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadKeyCert(java.util.List,java.util.List)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$1: int size()>
INTERFACE edge: $i1 = interfaceinvoke r1.<java.util.List: int size()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadKeyCert(java.util.List,java.util.List)> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i1 = interfaceinvoke r1.<java.util.List: int size()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadKeyCert(java.util.List,java.util.List)> ==> <java.util.concurrent.CopyOnWriteArrayList: int size()>
INTERFACE edge: $i1 = interfaceinvoke r1.<java.util.List: int size()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadKeyCert(java.util.List,java.util.List)> ==> <java.util.ArrayList: int size()>
INTERFACE edge: $i3 = interfaceinvoke r1.<java.util.List: int size()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadKeyCert(java.util.List,java.util.List)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$1: int size()>
INTERFACE edge: $i3 = interfaceinvoke r1.<java.util.List: int size()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadKeyCert(java.util.List,java.util.List)> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i3 = interfaceinvoke r1.<java.util.List: int size()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadKeyCert(java.util.List,java.util.List)> ==> <java.util.concurrent.CopyOnWriteArrayList: int size()>
INTERFACE edge: $i3 = interfaceinvoke r1.<java.util.List: int size()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadKeyCert(java.util.List,java.util.List)> ==> <java.util.ArrayList: int size()>
INTERFACE edge: r4 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadKeyCert(java.util.List,java.util.List)> ==> <java.util.AbstractList: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadKeyCert(java.util.List,java.util.List)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadKeyCert(java.util.List,java.util.List)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadKeyCert(java.util.List,java.util.List)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke $r20.<io.vertx.core.VertxException: void <init>(java.lang.String)>("Missing private key") in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadKeyCert(java.util.List,java.util.List)> ==> <io.vertx.core.VertxException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r19.<io.vertx.core.VertxException: void <init>(java.lang.String)>("Missing X.509 certificate") in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadKeyCert(java.util.List,java.util.List)> ==> <io.vertx.core.VertxException: void <init>(java.lang.String)>
INTERFACE edge: $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadKeyCert(java.util.List,java.util.List)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadKeyCert(java.util.List,java.util.List)> ==> <io.vertx.core.json.JsonArray$Iter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadKeyCert(java.util.List,java.util.List)> ==> <io.vertx.core.json.JsonObject$Iter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadKeyCert(java.util.List,java.util.List)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadKeyCert(java.util.List,java.util.List)> ==> <java.util.Scanner: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadKeyCert(java.util.List,java.util.List)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadKeyCert(java.util.List,java.util.List)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: boolean hasNext()>
INTERFACE edge: $r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadKeyCert(java.util.List,java.util.List)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object next()>
INTERFACE edge: $r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadKeyCert(java.util.List,java.util.List)> ==> <io.vertx.core.json.JsonArray$Iter: java.lang.Object next()>
INTERFACE edge: $r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadKeyCert(java.util.List,java.util.List)> ==> <io.vertx.core.json.JsonObject$Iter: java.lang.Object next()>
INTERFACE edge: $r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadKeyCert(java.util.List,java.util.List)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: java.lang.Object next()>
INTERFACE edge: $r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadKeyCert(java.util.List,java.util.List)> ==> <java.util.Scanner: java.lang.Object next()>
INTERFACE edge: $r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadKeyCert(java.util.List,java.util.List)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: java.lang.Object next()>
INTERFACE edge: $r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadKeyCert(java.util.List,java.util.List)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: java.lang.Object next()>
INTERFACE edge: $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadKeyCert(java.util.List,java.util.List)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadKeyCert(java.util.List,java.util.List)> ==> <io.vertx.core.json.JsonArray$Iter: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadKeyCert(java.util.List,java.util.List)> ==> <io.vertx.core.json.JsonObject$Iter: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadKeyCert(java.util.List,java.util.List)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadKeyCert(java.util.List,java.util.List)> ==> <java.util.Scanner: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadKeyCert(java.util.List,java.util.List)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadKeyCert(java.util.List,java.util.List)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: boolean hasNext()>
INTERFACE edge: $r8 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadKeyCert(java.util.List,java.util.List)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object next()>
INTERFACE edge: $r8 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadKeyCert(java.util.List,java.util.List)> ==> <io.vertx.core.json.JsonArray$Iter: java.lang.Object next()>
INTERFACE edge: $r8 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadKeyCert(java.util.List,java.util.List)> ==> <io.vertx.core.json.JsonObject$Iter: java.lang.Object next()>
INTERFACE edge: $r8 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadKeyCert(java.util.List,java.util.List)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: java.lang.Object next()>
INTERFACE edge: $r8 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadKeyCert(java.util.List,java.util.List)> ==> <java.util.Scanner: java.lang.Object next()>
INTERFACE edge: $r8 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadKeyCert(java.util.List,java.util.List)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: java.lang.Object next()>
INTERFACE edge: $r8 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadKeyCert(java.util.List,java.util.List)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: java.lang.Object next()>
SPECIAL edge: specialinvoke $r11.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadKeyCert(java.util.List,java.util.List)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dummy-entry-") in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadKeyCert(java.util.List,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4) in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadKeyCert(java.util.List,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadKeyCert(java.util.List,java.util.List)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r15.<java.security.KeyStore$PrivateKeyEntry: void <init>(java.security.PrivateKey,java.security.cert.Certificate[])>(r7, r10) in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadKeyCert(java.util.List,java.util.List)> ==> <java.security.KeyStore$PrivateKeyEntry: void <init>(java.security.PrivateKey,java.security.cert.Certificate[])>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.String: char[] toCharArray()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadKeyCert(java.util.List,java.util.List)> ==> <java.lang.String: char[] toCharArray()>
SPECIAL edge: specialinvoke $r16.<java.security.KeyStore$PasswordProtection: void <init>(char[])>($r18) in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadKeyCert(java.util.List,java.util.List)> ==> <java.security.KeyStore$PasswordProtection: void <init>(char[])>
VIRTUAL edge: virtualinvoke r2.<java.security.KeyStore: void setEntry(java.lang.String,java.security.KeyStore$Entry,java.security.KeyStore$ProtectionParameter)>($r14, $r15, $r16) in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadKeyCert(java.util.List,java.util.List)> ==> <java.security.KeyStore: void setEntry(java.lang.String,java.security.KeyStore$Entry,java.security.KeyStore$ProtectionParameter)>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.function.Supplier: java.lang.Object get()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadJKSOrPKCS12(java.lang.String,java.lang.String,java.util.function.Supplier)> ==> <java.util.function.Supplier: java.lang.Object get()>
INTERFACE edge: $r6 = interfaceinvoke $r5.<io.vertx.core.buffer.Buffer: byte[] getBytes()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadJKSOrPKCS12(java.lang.String,java.lang.String,java.util.function.Supplier)> ==> <io.vertx.core.buffer.impl.BufferImpl: byte[] getBytes()>
SPECIAL edge: specialinvoke $r2.<java.io.ByteArrayInputStream: void <init>(byte[])>($r6) in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadJKSOrPKCS12(java.lang.String,java.lang.String,java.util.function.Supplier)> ==> <java.io.ByteArrayInputStream: void <init>(byte[])>
VIRTUAL edge: virtualinvoke $r2.<java.io.InputStream: void close()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadJKSOrPKCS12(java.lang.String,java.lang.String,java.util.function.Supplier)> ==> <java.io.ByteArrayInputStream: void close()>
VIRTUAL edge: $r17 = virtualinvoke r7.<java.lang.String: char[] toCharArray()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadJKSOrPKCS12(java.lang.String,java.lang.String,java.util.function.Supplier)> ==> <java.lang.String: char[] toCharArray()>
VIRTUAL edge: virtualinvoke r1.<java.security.KeyStore: void load(java.io.InputStream,char[])>($r2, $r17) in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadJKSOrPKCS12(java.lang.String,java.lang.String,java.util.function.Supplier)> ==> <java.security.KeyStore: void load(java.io.InputStream,char[])>
VIRTUAL edge: virtualinvoke r16.<java.io.InputStream: void close()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadJKSOrPKCS12(java.lang.String,java.lang.String,java.util.function.Supplier)> ==> <java.io.ByteArrayInputStream: void close()>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.net.impl.KeyStoreHelper$getValue__122: void <init>(io.vertx.core.net.PfxOptions)>($r0) in <io.vertx.core.net.impl.KeyStoreHelper$getValue__122: java.util.function.Supplier bootstrap$(io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.net.impl.KeyStoreHelper$getValue__122: void <init>(io.vertx.core.net.PfxOptions)>
SPECIAL edge: specialinvoke $r2.<io.vertx.core.net.impl.KeyStoreHelper$lambda_create_1__123: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.net.PfxOptions)>($r0, $r1) in <io.vertx.core.net.impl.KeyStoreHelper$lambda_create_1__123: java.util.function.Supplier bootstrap$(io.vertx.core.impl.VertxInternal,io.vertx.core.net.PfxOptions)> ==> <io.vertx.core.net.impl.KeyStoreHelper$lambda_create_1__123: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.net.PfxOptions)>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.net.impl.KeyStoreHelper$getValue__124: void <init>(io.vertx.core.net.JksOptions)>($r0) in <io.vertx.core.net.impl.KeyStoreHelper$getValue__124: java.util.function.Supplier bootstrap$(io.vertx.core.net.JksOptions)> ==> <io.vertx.core.net.impl.KeyStoreHelper$getValue__124: void <init>(io.vertx.core.net.JksOptions)>
SPECIAL edge: specialinvoke $r2.<io.vertx.core.net.impl.KeyStoreHelper$lambda_create_0__125: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.net.JksOptions)>($r0, $r1) in <io.vertx.core.net.impl.KeyStoreHelper$lambda_create_0__125: java.util.function.Supplier bootstrap$(io.vertx.core.impl.VertxInternal,io.vertx.core.net.JksOptions)> ==> <io.vertx.core.net.impl.KeyStoreHelper$lambda_create_0__125: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.net.JksOptions)>
SPECIAL edge: specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String)>("Missing X.509 certificate path") in <io.vertx.core.net.impl.KeyStoreHelper: java.security.cert.X509Certificate[] loadCerts(io.vertx.core.buffer.Buffer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
INTERFACE edge: $z0 = interfaceinvoke r3.<java.util.List: boolean isEmpty()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.cert.X509Certificate[] loadCerts(io.vertx.core.buffer.Buffer)> ==> <java.util.AbstractCollection: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke r3.<java.util.List: boolean isEmpty()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.cert.X509Certificate[] loadCerts(io.vertx.core.buffer.Buffer)> ==> <java.util.concurrent.CopyOnWriteArrayList: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke r3.<java.util.List: boolean isEmpty()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.cert.X509Certificate[] loadCerts(io.vertx.core.buffer.Buffer)> ==> <java.util.ArrayList: boolean isEmpty()>
INTERFACE edge: $i0 = interfaceinvoke r3.<java.util.List: int size()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.cert.X509Certificate[] loadCerts(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$1: int size()>
INTERFACE edge: $i0 = interfaceinvoke r3.<java.util.List: int size()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.cert.X509Certificate[] loadCerts(io.vertx.core.buffer.Buffer)> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i0 = interfaceinvoke r3.<java.util.List: int size()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.cert.X509Certificate[] loadCerts(io.vertx.core.buffer.Buffer)> ==> <java.util.concurrent.CopyOnWriteArrayList: int size()>
INTERFACE edge: $i0 = interfaceinvoke r3.<java.util.List: int size()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.cert.X509Certificate[] loadCerts(io.vertx.core.buffer.Buffer)> ==> <java.util.ArrayList: int size()>
INTERFACE edge: $r5 = interfaceinvoke r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r4) in <io.vertx.core.net.impl.KeyStoreHelper: java.security.cert.X509Certificate[] loadCerts(io.vertx.core.buffer.Buffer)> ==> <java.util.AbstractCollection: java.lang.Object[] toArray(java.lang.Object[])>
INTERFACE edge: $r5 = interfaceinvoke r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r4) in <io.vertx.core.net.impl.KeyStoreHelper: java.security.cert.X509Certificate[] loadCerts(io.vertx.core.buffer.Buffer)> ==> <java.util.LinkedList: java.lang.Object[] toArray(java.lang.Object[])>
INTERFACE edge: $r5 = interfaceinvoke r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r4) in <io.vertx.core.net.impl.KeyStoreHelper: java.security.cert.X509Certificate[] loadCerts(io.vertx.core.buffer.Buffer)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] toArray(java.lang.Object[])>
INTERFACE edge: $r5 = interfaceinvoke r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r4) in <io.vertx.core.net.impl.KeyStoreHelper: java.security.cert.X509Certificate[] loadCerts(io.vertx.core.buffer.Buffer)> ==> <java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>
SPECIAL edge: specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>("Missing -----BEGIN CERTIFICATE----- delimiter") in <io.vertx.core.net.impl.KeyStoreHelper: java.security.cert.X509Certificate[] loadCerts(io.vertx.core.buffer.Buffer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>("Missing private key path") in <io.vertx.core.net.impl.KeyStoreHelper: java.security.PrivateKey loadPrivateKey(io.vertx.core.buffer.Buffer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
INTERFACE edge: $z0 = interfaceinvoke r3.<java.util.List: boolean isEmpty()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.PrivateKey loadPrivateKey(io.vertx.core.buffer.Buffer)> ==> <java.util.AbstractCollection: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke r3.<java.util.List: boolean isEmpty()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.PrivateKey loadPrivateKey(io.vertx.core.buffer.Buffer)> ==> <java.util.concurrent.CopyOnWriteArrayList: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke r3.<java.util.List: boolean isEmpty()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.PrivateKey loadPrivateKey(io.vertx.core.buffer.Buffer)> ==> <java.util.ArrayList: boolean isEmpty()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(0) in <io.vertx.core.net.impl.KeyStoreHelper: java.security.PrivateKey loadPrivateKey(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$1: java.lang.Object get(int)>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(0) in <io.vertx.core.net.impl.KeyStoreHelper: java.security.PrivateKey loadPrivateKey(io.vertx.core.buffer.Buffer)> ==> <java.util.LinkedList: java.lang.Object get(int)>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(0) in <io.vertx.core.net.impl.KeyStoreHelper: java.security.PrivateKey loadPrivateKey(io.vertx.core.buffer.Buffer)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(0) in <io.vertx.core.net.impl.KeyStoreHelper: java.security.PrivateKey loadPrivateKey(io.vertx.core.buffer.Buffer)> ==> <java.util.ArrayList: java.lang.Object get(int)>
SPECIAL edge: specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>("Missing -----BEGIN PRIVATE KEY----- or -----BEGIN RSA PRIVATE KEY----- delimiter") in <io.vertx.core.net.impl.KeyStoreHelper: java.security.PrivateKey loadPrivateKey(io.vertx.core.buffer.Buffer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<java.security.KeyStore: void load(java.io.InputStream,char[])>(null, null) in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore createEmptyKeyStore()> ==> <java.security.KeyStore: void load(java.io.InputStream,char[])>
SPECIAL edge: specialinvoke $r3.<java.security.KeyStoreException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to initialize the keystore", $r1) in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore createEmptyKeyStore()> ==> <java.security.KeyStoreException: void <init>(java.lang.String,java.lang.Throwable)>
INTERFACE edge: r1 = interfaceinvoke r0.<io.vertx.core.buffer.Buffer: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List loadPems(io.vertx.core.buffer.Buffer,java.util.function.BiFunction)> ==> <io.vertx.core.buffer.impl.BufferImpl: java.lang.String toString()>
SPECIAL edge: specialinvoke $r2.<java.util.ArrayList: void <init>()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List loadPems(io.vertx.core.buffer.Buffer,java.util.function.BiFunction)> ==> <java.util.ArrayList: void <init>()>
INTERFACE edge: interfaceinvoke $r2.<java.util.List: boolean addAll(java.util.Collection)>(r14) in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List loadPems(io.vertx.core.buffer.Buffer,java.util.function.BiFunction)> ==> <java.util.ArrayList: boolean addAll(java.util.Collection)>
VIRTUAL edge: r5 = virtualinvoke $r4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1) in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List loadPems(io.vertx.core.buffer.Buffer,java.util.function.BiFunction)> ==> <java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>
VIRTUAL edge: r7 = virtualinvoke $r6.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1) in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List loadPems(io.vertx.core.buffer.Buffer,java.util.function.BiFunction)> ==> <java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>
VIRTUAL edge: z0 = virtualinvoke r5.<java.util.regex.Matcher: boolean find()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List loadPems(io.vertx.core.buffer.Buffer,java.util.function.BiFunction)> ==> <java.util.regex.Matcher: boolean find()>
VIRTUAL edge: r8 = virtualinvoke r5.<java.util.regex.Matcher: java.lang.String group(int)>(1) in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List loadPems(io.vertx.core.buffer.Buffer,java.util.function.BiFunction)> ==> <java.util.regex.Matcher: java.lang.String group(int)>
VIRTUAL edge: $i0 = virtualinvoke r5.<java.util.regex.Matcher: int end()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List loadPems(io.vertx.core.buffer.Buffer,java.util.function.BiFunction)> ==> <java.util.regex.Matcher: int end()>
VIRTUAL edge: z1 = virtualinvoke r7.<java.util.regex.Matcher: boolean find()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List loadPems(io.vertx.core.buffer.Buffer,java.util.function.BiFunction)> ==> <java.util.regex.Matcher: boolean find()>
VIRTUAL edge: r9 = virtualinvoke r7.<java.util.regex.Matcher: java.lang.String group(int)>(1) in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List loadPems(io.vertx.core.buffer.Buffer,java.util.function.BiFunction)> ==> <java.util.regex.Matcher: java.lang.String group(int)>
VIRTUAL edge: $i1 = virtualinvoke r7.<java.util.regex.Matcher: int start()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List loadPems(io.vertx.core.buffer.Buffer,java.util.function.BiFunction)> ==> <java.util.regex.Matcher: int start()>
SPECIAL edge: specialinvoke $r23.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List loadPems(io.vertx.core.buffer.Buffer,java.util.function.BiFunction)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Missing -----END ") in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List loadPems(io.vertx.core.buffer.Buffer,java.util.function.BiFunction)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8) in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List loadPems(io.vertx.core.buffer.Buffer,java.util.function.BiFunction)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("----- delimiter") in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List loadPems(io.vertx.core.buffer.Buffer,java.util.function.BiFunction)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List loadPems(io.vertx.core.buffer.Buffer,java.util.function.BiFunction)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r22.<java.lang.RuntimeException: void <init>(java.lang.String)>($r27) in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List loadPems(io.vertx.core.buffer.Buffer,java.util.function.BiFunction)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $z2 = virtualinvoke r8.<java.lang.String: boolean equals(java.lang.Object)>(r9) in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List loadPems(io.vertx.core.buffer.Buffer,java.util.function.BiFunction)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r17.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List loadPems(io.vertx.core.buffer.Buffer,java.util.function.BiFunction)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Missing -----END ") in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List loadPems(io.vertx.core.buffer.Buffer,java.util.function.BiFunction)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8) in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List loadPems(io.vertx.core.buffer.Buffer,java.util.function.BiFunction)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("----- delimiter") in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List loadPems(io.vertx.core.buffer.Buffer,java.util.function.BiFunction)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List loadPems(io.vertx.core.buffer.Buffer,java.util.function.BiFunction)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r16.<java.lang.RuntimeException: void <init>(java.lang.String)>($r21) in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List loadPems(io.vertx.core.buffer.Buffer,java.util.function.BiFunction)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: r28 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>($i0, $i1) in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List loadPems(io.vertx.core.buffer.Buffer,java.util.function.BiFunction)> ==> <java.lang.String: java.lang.String substring(int,int)>
VIRTUAL edge: r29 = virtualinvoke r28.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\s", "") in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List loadPems(io.vertx.core.buffer.Buffer,java.util.function.BiFunction)> ==> <java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>
VIRTUAL edge: $i2 = virtualinvoke r29.<java.lang.String: int length()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List loadPems(io.vertx.core.buffer.Buffer,java.util.function.BiFunction)> ==> <java.lang.String: int length()>
SPECIAL edge: specialinvoke $r15.<java.lang.RuntimeException: void <init>(java.lang.String)>("Empty pem file") in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List loadPems(io.vertx.core.buffer.Buffer,java.util.function.BiFunction)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.util.Base64$Decoder: byte[] decode(java.lang.String)>(r29) in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List loadPems(io.vertx.core.buffer.Buffer,java.util.function.BiFunction)> ==> <java.util.Base64$Decoder: byte[] decode(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.net.impl.KeyStoreHelper$lambda_loadCerts_5__126: void <init>(java.security.cert.CertificateFactory)>($r0) in <io.vertx.core.net.impl.KeyStoreHelper$lambda_loadCerts_5__126: java.util.function.BiFunction bootstrap$(java.security.cert.CertificateFactory)> ==> <io.vertx.core.net.impl.KeyStoreHelper$lambda_loadCerts_5__126: void <init>(java.security.cert.CertificateFactory)>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.net.impl.KeyStoreHelper$lambda_loadPrivateKey_4__127: void <init>(java.security.KeyFactory)>($r0) in <io.vertx.core.net.impl.KeyStoreHelper$lambda_loadPrivateKey_4__127: java.util.function.BiFunction bootstrap$(java.security.KeyFactory)> ==> <io.vertx.core.net.impl.KeyStoreHelper$lambda_loadPrivateKey_4__127: void <init>(java.security.KeyFactory)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.impl.SSLHelper$lambda_getContext_2__111: void <init>(io.vertx.core.net.impl.SSLHelper,io.vertx.core.impl.VertxInternal,javax.net.ssl.X509KeyManager,javax.net.ssl.TrustManagerFactory)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.impl.HandlerManager$Handlers: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.concurrent.CopyOnWriteArrayList: void <init>()>() in <io.vertx.core.net.impl.HandlerManager$Handlers: void <init>()> ==> <java.util.concurrent.CopyOnWriteArrayList: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.impl.VertxImpl: io.vertx.core.impl.ContextImpl getOrCreateContext()>() in <io.vertx.core.impl.VertxImpl: io.vertx.core.Context getOrCreateContext()> ==> <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.ContextImpl getOrCreateContext()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.impl.AddressResolver$lambda_resolveHostname_1__112: void <init>(io.vertx.core.impl.ContextInternal,io.netty.util.concurrent.Future,io.vertx.core.Handler)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r3.<io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: void <init>(int,java.lang.CharSequence,java.lang.CharSequence)>(i1, r4, r5) in <io.vertx.core.http.impl.headers.VertxHttpHeaders: void add0(int,int,java.lang.CharSequence,java.lang.CharSequence)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: void <init>(int,java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke $r3.<io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: void addBefore(io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry)>($r8) in <io.vertx.core.http.impl.headers.VertxHttpHeaders: void add0(int,int,java.lang.CharSequence,java.lang.CharSequence)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: void addBefore(io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.impl.VertxImpl: io.vertx.core.impl.ContextImpl getOrCreateContext()>() in <io.vertx.core.impl.VertxImpl: long setTimer(long,io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.ContextImpl getOrCreateContext()>
SPECIAL edge: $l1 = specialinvoke r0.<io.vertx.core.impl.VertxImpl: long scheduleTimeout(io.vertx.core.impl.ContextImpl,io.vertx.core.Handler,long,boolean)>($r1, r2, l0, 0) in <io.vertx.core.impl.VertxImpl: long setTimer(long,io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl: long scheduleTimeout(io.vertx.core.impl.ContextImpl,io.vertx.core.Handler,long,boolean)>
CLINIT edge: $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l2) in <io.vertx.core.impl.VertxImpl: long scheduleTimeout(io.vertx.core.impl.ContextImpl,io.vertx.core.Handler,long,boolean)> ==> <java.lang.Long: void <clinit>()>
STATIC edge: $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l2) in <io.vertx.core.impl.VertxImpl: long scheduleTimeout(io.vertx.core.impl.ContextImpl,io.vertx.core.Handler,long,boolean)> ==> <java.lang.Long: java.lang.Long valueOf(long)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.eventbus.impl.HandlerRegistration: io.vertx.core.Handler getHandler()>() in <io.vertx.core.eventbus.impl.EventBusImpl: io.vertx.core.eventbus.impl.HandlerHolder addRegistration(java.lang.String,io.vertx.core.eventbus.impl.HandlerRegistration,boolean,boolean)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: io.vertx.core.Handler getHandler()>
VIRTUAL edge: virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() in <io.vertx.core.eventbus.impl.EventBusImpl: io.vertx.core.eventbus.impl.HandlerHolder addRegistration(java.lang.String,io.vertx.core.eventbus.impl.HandlerRegistration,boolean,boolean)> ==> <java.lang.Object: java.lang.Class getClass()>
SPECIAL edge: r5 = specialinvoke r3.<io.vertx.core.eventbus.impl.EventBusImpl: io.vertx.core.eventbus.impl.EventBusImpl$LocalRegistrationResult addLocalRegistration(java.lang.String,io.vertx.core.eventbus.impl.HandlerRegistration,boolean,boolean)>(r4, r0, z0, z1) in <io.vertx.core.eventbus.impl.EventBusImpl: io.vertx.core.eventbus.impl.HandlerHolder addRegistration(java.lang.String,io.vertx.core.eventbus.impl.HandlerRegistration,boolean,boolean)> ==> <io.vertx.core.eventbus.impl.EventBusImpl: io.vertx.core.eventbus.impl.EventBusImpl$LocalRegistrationResult addLocalRegistration(java.lang.String,io.vertx.core.eventbus.impl.HandlerRegistration,boolean,boolean)>
VIRTUAL edge: virtualinvoke r3.<io.vertx.core.eventbus.impl.EventBusImpl: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)>($z2, r4, z0, z1, $r7) in <io.vertx.core.eventbus.impl.EventBusImpl: io.vertx.core.eventbus.impl.HandlerHolder addRegistration(java.lang.String,io.vertx.core.eventbus.impl.HandlerRegistration,boolean,boolean)> ==> <io.vertx.core.eventbus.impl.EventBusImpl: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)>
VIRTUAL edge: virtualinvoke r3.<io.vertx.core.eventbus.impl.EventBusImpl: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)>($z2, r4, z0, z1, $r7) in <io.vertx.core.eventbus.impl.EventBusImpl: io.vertx.core.eventbus.impl.HandlerHolder addRegistration(java.lang.String,io.vertx.core.eventbus.impl.HandlerRegistration,boolean,boolean)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)>
CLINIT edge: r16 = staticinvoke <io.vertx.core.Vertx: io.vertx.core.Context currentContext()>() in <io.vertx.core.eventbus.impl.EventBusImpl: io.vertx.core.eventbus.impl.EventBusImpl$LocalRegistrationResult addLocalRegistration(java.lang.String,io.vertx.core.eventbus.impl.HandlerRegistration,boolean,boolean)> ==> <io.vertx.core.Vertx: void <clinit>()>
STATIC edge: $r10 = staticinvoke <io.vertx.core.eventbus.impl.EventBusImpl$lambda_addLocalRegistration_1__135: java.util.function.BiFunction bootstrap$()>() in <io.vertx.core.eventbus.impl.EventBusImpl: io.vertx.core.eventbus.impl.EventBusImpl$LocalRegistrationResult addLocalRegistration(java.lang.String,io.vertx.core.eventbus.impl.HandlerRegistration,boolean,boolean)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_addLocalRegistration_1__135: java.util.function.BiFunction bootstrap$()>
STATIC edge: r16 = staticinvoke <io.vertx.core.Vertx: io.vertx.core.Context currentContext()>() in <io.vertx.core.eventbus.impl.EventBusImpl: io.vertx.core.eventbus.impl.EventBusImpl$LocalRegistrationResult addLocalRegistration(java.lang.String,io.vertx.core.eventbus.impl.HandlerRegistration,boolean,boolean)> ==> <io.vertx.core.Vertx: io.vertx.core.Context currentContext()>
STATIC edge: staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r0, "address") in <io.vertx.core.eventbus.impl.EventBusImpl: io.vertx.core.eventbus.impl.EventBusImpl$LocalRegistrationResult addLocalRegistration(java.lang.String,io.vertx.core.eventbus.impl.HandlerRegistration,boolean,boolean)> ==> <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>
CLINIT edge: $r7 = new io.vertx.core.impl.utils.ConcurrentCyclicSequence in <io.vertx.core.eventbus.impl.EventBusImpl: io.vertx.core.eventbus.impl.EventBusImpl$LocalRegistrationResult addLocalRegistration(java.lang.String,io.vertx.core.eventbus.impl.HandlerRegistration,boolean,boolean)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: void <clinit>()>
CLINIT edge: $r1 = staticinvoke <io.vertx.core.Future: io.vertx.core.Future succeededFuture()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.Future: void <clinit>()>
STATIC edge: $r1 = staticinvoke <io.vertx.core.Future: io.vertx.core.Future succeededFuture()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.Future: io.vertx.core.Future succeededFuture()>
CLINIT edge: $r7 = staticinvoke <io.vertx.core.Future: io.vertx.core.Future succeededFuture()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.Future: void <clinit>()>
STATIC edge: $r7 = staticinvoke <io.vertx.core.Future: io.vertx.core.Future succeededFuture()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.Future: io.vertx.core.Future succeededFuture()>
CLINIT edge: <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object[] EMPTY_ARRAY> = $r0 in <io.vertx.core.impl.utils.ConcurrentCyclicSequence: void <clinit>()> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: void <clinit>()>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.eventbus.impl.EventBusImpl$setResult__128: void <init>(io.vertx.core.eventbus.impl.HandlerRegistration)>($r0) in <io.vertx.core.eventbus.impl.EventBusImpl$setResult__128: io.vertx.core.Handler bootstrap$(io.vertx.core.eventbus.impl.HandlerRegistration)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$setResult__128: void <init>(io.vertx.core.eventbus.impl.HandlerRegistration)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.eventbus.impl.EventBusImpl$lambda_convertHandler_3__113: void <init>(io.vertx.core.eventbus.impl.EventBusImpl,io.vertx.core.Handler)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.eventbus.impl.HandlerRegistration$lambda_new_0__114: void <init>(io.vertx.core.eventbus.impl.HandlerRegistration,io.vertx.core.spi.metrics.EventBusMetrics,java.lang.String,long,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: void <init>(io.vertx.core.eventbus.impl.EventBusImpl,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.DeliveryOptions,io.vertx.core.eventbus.impl.HandlerRegistration,io.vertx.core.eventbus.impl.MessageImpl)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: void <init>(io.vertx.core.eventbus.impl.EventBusImpl,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.DeliveryOptions,io.vertx.core.eventbus.impl.HandlerRegistration,io.vertx.core.eventbus.impl.MessageImpl)> ==> <java.util.AbstractList: java.util.Iterator iterator()>
INTERFACE edge: $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: void <init>(io.vertx.core.eventbus.impl.EventBusImpl,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.DeliveryOptions,io.vertx.core.eventbus.impl.HandlerRegistration,io.vertx.core.eventbus.impl.MessageImpl)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: void <init>(io.vertx.core.eventbus.impl.EventBusImpl,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.DeliveryOptions,io.vertx.core.eventbus.impl.HandlerRegistration,io.vertx.core.eventbus.impl.MessageImpl)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
INTERFACE edge: $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext: void <init>(io.vertx.core.eventbus.impl.EventBusImpl,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.DeliveryOptions,io.vertx.core.eventbus.impl.HandlerRegistration,io.vertx.core.eventbus.impl.MessageImpl)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
VIRTUAL edge: $z0 = virtualinvoke r0.<io.vertx.core.eventbus.impl.EventBusImpl: boolean deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)>($r2) in <io.vertx.core.eventbus.impl.EventBusImpl: void deliverMessageLocally(io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)> ==> <io.vertx.core.eventbus.impl.EventBusImpl: boolean deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)>
INTERFACE edge: interfaceinvoke $r16.<io.vertx.core.spi.metrics.EventBusMetrics: void replyFailure(java.lang.String,io.vertx.core.eventbus.ReplyFailure)>($r15, $r14) in <io.vertx.core.eventbus.impl.EventBusImpl: void deliverMessageLocally(io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)> ==> <io.vertx.core.spi.metrics.EventBusMetrics: void replyFailure(java.lang.String,io.vertx.core.eventbus.ReplyFailure)>
SPECIAL edge: specialinvoke $r6.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void deliverMessageLocally(io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No handlers for address ") in <io.vertx.core.eventbus.impl.EventBusImpl: void deliverMessageLocally(io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10) in <io.vertx.core.eventbus.impl.EventBusImpl: void deliverMessageLocally(io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.eventbus.impl.EventBusImpl: void deliverMessageLocally(io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r5.<io.vertx.core.eventbus.impl.HandlerRegistration: void sendAsyncResultFailure(io.vertx.core.eventbus.ReplyFailure,java.lang.String)>($r7, $r12) in <io.vertx.core.eventbus.impl.EventBusImpl: void deliverMessageLocally(io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void sendAsyncResultFailure(io.vertx.core.eventbus.ReplyFailure,java.lang.String)>
CLINIT edge: $r5 = staticinvoke <io.vertx.core.Future: io.vertx.core.Future failedFuture(java.lang.Throwable)>($r1) in <io.vertx.core.eventbus.impl.HandlerRegistration: void sendAsyncResultFailure(io.vertx.core.eventbus.ReplyFailure,java.lang.String)> ==> <io.vertx.core.Future: void <clinit>()>
STATIC edge: $r5 = staticinvoke <io.vertx.core.Future: io.vertx.core.Future failedFuture(java.lang.Throwable)>($r1) in <io.vertx.core.eventbus.impl.HandlerRegistration: void sendAsyncResultFailure(io.vertx.core.eventbus.ReplyFailure,java.lang.String)> ==> <io.vertx.core.Future: io.vertx.core.Future failedFuture(java.lang.Throwable)>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.eventbus.ReplyFailure: void <init>(java.lang.String,int)>("TIMEOUT", 0) in <io.vertx.core.eventbus.ReplyFailure: void <clinit>()> ==> <io.vertx.core.eventbus.ReplyFailure: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.eventbus.ReplyFailure: void <init>(java.lang.String,int)>("NO_HANDLERS", 1) in <io.vertx.core.eventbus.ReplyFailure: void <clinit>()> ==> <io.vertx.core.eventbus.ReplyFailure: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r2.<io.vertx.core.eventbus.ReplyFailure: void <init>(java.lang.String,int)>("RECIPIENT_FAILURE", 2) in <io.vertx.core.eventbus.ReplyFailure: void <clinit>()> ==> <io.vertx.core.eventbus.ReplyFailure: void <init>(java.lang.String,int)>
VIRTUAL edge: r2 = virtualinvoke r1.<io.vertx.core.eventbus.impl.MessageImpl: java.lang.String address()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void clusteredSendReply(io.vertx.core.net.impl.ServerID,io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)> ==> <io.vertx.core.eventbus.impl.MessageImpl: java.lang.String address()>
VIRTUAL edge: $z0 = virtualinvoke r3.<io.vertx.core.net.impl.ServerID: boolean equals(java.lang.Object)>($r5) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void clusteredSendReply(io.vertx.core.net.impl.ServerID,io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)> ==> <io.vertx.core.net.impl.ServerID: boolean equals(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r9.<io.vertx.core.spi.metrics.EventBusMetrics: void messageSent(java.lang.String,boolean,boolean,boolean)>(r2, 0, 0, 1) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void clusteredSendReply(io.vertx.core.net.impl.ServerID,io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)> ==> <io.vertx.core.spi.metrics.EventBusMetrics: void messageSent(java.lang.String,boolean,boolean,boolean)>
SPECIAL edge: specialinvoke r4.<io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void sendRemote(io.vertx.core.net.impl.ServerID,io.vertx.core.eventbus.impl.MessageImpl)>(r3, r1) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void clusteredSendReply(io.vertx.core.net.impl.ServerID,io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void sendRemote(io.vertx.core.net.impl.ServerID,io.vertx.core.eventbus.impl.MessageImpl)>
VIRTUAL edge: virtualinvoke r4.<io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void deliverMessageLocally(io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)>(r0) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void clusteredSendReply(io.vertx.core.net.impl.ServerID,io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)> ==> <io.vertx.core.eventbus.impl.EventBusImpl: void deliverMessageLocally(io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)>
INTERFACE edge: interfaceinvoke $r7.<io.vertx.core.spi.metrics.EventBusMetrics: void messageSent(java.lang.String,boolean,boolean,boolean)>(r2, 0, 1, 0) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void clusteredSendReply(io.vertx.core.net.impl.ServerID,io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)> ==> <io.vertx.core.spi.metrics.EventBusMetrics: void messageSent(java.lang.String,boolean,boolean,boolean)>
CLINIT edge: $r5 = new io.vertx.core.eventbus.impl.clustered.ConnectionHolder in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void sendRemote(io.vertx.core.net.impl.ServerID,io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.eventbus.impl.clustered.ConnectionHolder: void <clinit>()>
CLINIT edge: $r0 = staticinvoke <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/eventbus/impl/clustered/ConnectionHolder;") in <io.vertx.core.eventbus.impl.clustered.ConnectionHolder: void <clinit>()> ==> <io.vertx.core.logging.LoggerFactory: void <clinit>()>
STATIC edge: $r0 = staticinvoke <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/eventbus/impl/clustered/ConnectionHolder;") in <io.vertx.core.eventbus.impl.clustered.ConnectionHolder: void <clinit>()> ==> <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>
CLINIT edge: <io.vertx.core.eventbus.impl.clustered.ConnectionHolder: io.vertx.core.logging.Logger log> = $r0 in <io.vertx.core.eventbus.impl.clustered.ConnectionHolder: void <clinit>()> ==> <io.vertx.core.eventbus.impl.clustered.ConnectionHolder: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_sendOrPub_8__115: void <init>(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus,io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_sendOrPub_7__116: void <init>(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus,io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<io.netty.handler.codec.http.HttpContent: io.netty.buffer.ByteBuf content()>() in <io.vertx.core.http.impl.AssembledHttpRequest: io.netty.buffer.ByteBuf content()> ==> <io.vertx.core.http.impl.AssembledHttpRequest: io.netty.buffer.ByteBuf content()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<io.netty.handler.codec.http.HttpContent: io.netty.buffer.ByteBuf content()>() in <io.vertx.core.http.impl.AssembledHttpRequest: io.netty.buffer.ByteBuf content()> ==> <io.vertx.core.http.impl.AssembledHttpResponse: io.netty.buffer.ByteBuf content()>
INTERFACE edge: interfaceinvoke $r1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext flush()>() in <io.vertx.core.net.impl.ConnectionBase: void endReadAndFlush()> ==> <io.vertx.core.net.impl.PartialPooledByteBufAllocator$PooledChannelHandlerContext: io.netty.channel.ChannelHandlerContext flush()>
INTERFACE edge: interfaceinvoke $r1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext flush()>() in <io.vertx.core.net.impl.ConnectionBase: void endReadAndFlush()> ==> <io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext flush()>
SPECIAL edge: $r1 = specialinvoke r0.<io.vertx.core.http.impl.Http2ConnectionBase: io.vertx.core.http.HttpConnection shutdown(long)>(l0) in <io.vertx.core.http.impl.Http2ServerConnection: io.vertx.core.http.HttpConnection shutdown(long)> ==> <io.vertx.core.http.impl.Http2ConnectionBase: io.vertx.core.http.HttpConnection shutdown(long)>
SPECIAL edge: specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.http.impl.Http2ConnectionBase: io.vertx.core.http.HttpConnection shutdown(long)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid timeout value ") in <io.vertx.core.http.impl.Http2ConnectionBase: io.vertx.core.http.HttpConnection shutdown(long)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0) in <io.vertx.core.http.impl.Http2ConnectionBase: io.vertx.core.http.HttpConnection shutdown(long)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(long)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.http.impl.Http2ConnectionBase: io.vertx.core.http.HttpConnection shutdown(long)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8) in <io.vertx.core.http.impl.Http2ConnectionBase: io.vertx.core.http.HttpConnection shutdown(long)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.http.impl.Http2ConnectionBase: io.netty.channel.Channel channel()>() in <io.vertx.core.http.impl.Http2ConnectionBase: io.vertx.core.http.HttpConnection shutdown(long)> ==> <io.vertx.core.net.impl.ConnectionBase: io.netty.channel.Channel channel()>
INTERFACE edge: interfaceinvoke $r2.<io.netty.channel.Channel: io.netty.channel.ChannelFuture close()>() in <io.vertx.core.http.impl.Http2ConnectionBase: io.vertx.core.http.HttpConnection shutdown(long)> ==> <io.netty.channel.Channel: io.netty.channel.ChannelFuture close()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelFuture writeAndFlush(java.lang.Object)>(r1) in <io.vertx.core.net.impl.PartialPooledByteBufAllocator$PooledChannelHandlerContext: io.netty.channel.ChannelFuture writeAndFlush(java.lang.Object)> ==> <io.vertx.core.net.impl.PartialPooledByteBufAllocator$PooledChannelHandlerContext: io.netty.channel.ChannelFuture writeAndFlush(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.http.impl.Http1xConnectionBase: void close()>() in <io.vertx.core.http.impl.Http1xClientConnection: void closeWithPayload(io.netty.buffer.ByteBuf)> ==> <io.vertx.core.net.impl.ConnectionBase: void close()>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.http.impl.Http1xClientConnection: void endReadAndFlush()>() in <io.vertx.core.http.impl.Http1xClientConnection: void closeWithPayload(io.netty.buffer.ByteBuf)> ==> <io.vertx.core.net.impl.ConnectionBase: void endReadAndFlush()>
SPECIAL edge: specialinvoke $r8.<io.netty.handler.codec.http.websocketx.CloseWebSocketFrame: void <init>(boolean,int,io.netty.buffer.ByteBuf)>(1, 0, r2) in <io.vertx.core.http.impl.Http1xClientConnection: void closeWithPayload(io.netty.buffer.ByteBuf)> ==> <io.netty.handler.codec.http.websocketx.CloseWebSocketFrame: void <init>(boolean,int,io.netty.buffer.ByteBuf)>
SPECIAL edge: specialinvoke $r3.<io.netty.handler.codec.http.websocketx.CloseWebSocketFrame: void <init>(boolean,int,int,java.lang.String)>(1, 0, 1000, null) in <io.vertx.core.http.impl.Http1xClientConnection: void closeWithPayload(io.netty.buffer.ByteBuf)> ==> <io.netty.handler.codec.http.websocketx.CloseWebSocketFrame: void <init>(boolean,int,int,java.lang.String)>
INTERFACE edge: $r6 = interfaceinvoke $r4.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>() in <io.vertx.core.http.impl.Http1xClientConnection: void closeWithPayload(io.netty.buffer.ByteBuf)> ==> <io.vertx.core.net.impl.PartialPooledByteBufAllocator$PooledChannelHandlerContext: io.netty.channel.Channel channel()>
INTERFACE edge: $r6 = interfaceinvoke $r4.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>() in <io.vertx.core.http.impl.Http1xClientConnection: void closeWithPayload(io.netty.buffer.ByteBuf)> ==> <io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>
VIRTUAL edge: virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>() in <io.vertx.core.net.TrustOptions: java.util.function.Function trustManagerMapper(io.vertx.core.Vertx)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r5 = virtualinvoke $r3.<io.vertx.core.net.impl.KeyStoreHelper: javax.net.ssl.TrustManagerFactory getTrustMgrFactory(io.vertx.core.impl.VertxInternal)>($r4) in <io.vertx.core.net.TrustOptions: javax.net.ssl.TrustManagerFactory getTrustManagerFactory(io.vertx.core.Vertx)> ==> <io.vertx.core.net.impl.KeyStoreHelper: javax.net.ssl.TrustManagerFactory getTrustMgrFactory(io.vertx.core.impl.VertxInternal)>
STATIC edge: $r0 = staticinvoke <javax.net.ssl.TrustManagerFactory: java.lang.String getDefaultAlgorithm()>() in <io.vertx.core.net.impl.KeyStoreHelper: javax.net.ssl.TrustManagerFactory getTrustMgrFactory(io.vertx.core.impl.VertxInternal)> ==> <javax.net.ssl.TrustManagerFactory: java.lang.String getDefaultAlgorithm()>
STATIC edge: r1 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>($r0) in <io.vertx.core.net.impl.KeyStoreHelper: javax.net.ssl.TrustManagerFactory getTrustMgrFactory(io.vertx.core.impl.VertxInternal)> ==> <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.net.impl.VertxTrustManagerFactory$2: void <init>(javax.net.ssl.TrustManager[])>(r2) in <io.vertx.core.net.impl.VertxTrustManagerFactory: void <init>(javax.net.ssl.TrustManager[])> ==> <io.vertx.core.net.impl.VertxTrustManagerFactory$2: void <init>(javax.net.ssl.TrustManager[])>
SPECIAL edge: specialinvoke r0.<javax.net.ssl.TrustManagerFactory: void <init>(javax.net.ssl.TrustManagerFactorySpi,java.security.Provider,java.lang.String)>($r1, $r3, "") in <io.vertx.core.net.impl.VertxTrustManagerFactory: void <init>(javax.net.ssl.TrustManager[])> ==> <javax.net.ssl.TrustManagerFactory: void <init>(javax.net.ssl.TrustManagerFactorySpi,java.security.Provider,java.lang.String)>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.net.TrustOptions$getTrustMgr__129: void <init>(io.vertx.core.net.impl.KeyStoreHelper)>($r0) in <io.vertx.core.net.TrustOptions$getTrustMgr__129: java.util.function.Function bootstrap$(io.vertx.core.net.impl.KeyStoreHelper)> ==> <io.vertx.core.net.TrustOptions$getTrustMgr__129: void <init>(io.vertx.core.net.impl.KeyStoreHelper)>
VIRTUAL edge: $r2 = virtualinvoke r1.<io.vertx.core.net.PemTrustOptions: java.util.List getCertPaths()>() in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.TrustOptions)> ==> <io.vertx.core.net.PemTrustOptions: java.util.List getCertPaths()>
VIRTUAL edge: $r10 = virtualinvoke r1.<io.vertx.core.net.PemTrustOptions: java.util.List getCertValues()>() in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.TrustOptions)> ==> <io.vertx.core.net.PemTrustOptions: java.util.List getCertValues()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.List: java.util.stream.Stream stream()>() in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.TrustOptions)> ==> <java.util.List: java.util.stream.Stream stream()>
INTERFACE edge: $r6 = interfaceinvoke $r3.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r5) in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.TrustOptions)> ==> <java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>
INTERFACE edge: $r7 = interfaceinvoke r4.<io.vertx.core.impl.VertxInternal: io.vertx.core.file.FileSystem fileSystem()>() in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.TrustOptions)> ==> <io.vertx.core.impl.VertxImpl: io.vertx.core.file.FileSystem fileSystem()>
VIRTUAL edge: virtualinvoke $r7.<java.lang.Object: java.lang.Class getClass()>() in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.TrustOptions)> ==> <java.lang.Object: java.lang.Class getClass()>
INTERFACE edge: r16 = interfaceinvoke $r6.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r9) in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.TrustOptions)> ==> <java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>
INTERFACE edge: $r11 = interfaceinvoke $r10.<java.util.List: java.util.stream.Stream stream()>() in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.TrustOptions)> ==> <java.util.List: java.util.stream.Stream stream()>
SPECIAL edge: specialinvoke $r12.<io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)>($r13, null) in <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.TrustOptions)> ==> <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<java.security.KeyStore: void load(java.io.InputStream,char[])>(null, null) in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadCA(java.util.stream.Stream)> ==> <java.security.KeyStore: void load(java.io.InputStream,char[])>
VIRTUAL edge: virtualinvoke r0.<java.security.KeyStore: void setCertificateEntry(java.lang.String,java.security.cert.Certificate)>($r12, r8) in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadCA(java.util.stream.Stream)> ==> <java.security.KeyStore: void setCertificateEntry(java.lang.String,java.security.cert.Certificate)>
INTERFACE edge: r4 = interfaceinvoke r3.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadCA(java.util.stream.Stream)> ==> <io.vertx.core.http.impl.HeadersAdaptor: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke r3.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadCA(java.util.stream.Stream)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke r3.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadCA(java.util.stream.Stream)> ==> <io.vertx.core.impl.ConcurrentHashSet: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke r3.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadCA(java.util.stream.Stream)> ==> <java.util.ServiceLoader: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke r3.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadCA(java.util.stream.Stream)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke r3.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadCA(java.util.stream.Stream)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke r3.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadCA(java.util.stream.Stream)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke r3.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadCA(java.util.stream.Stream)> ==> <io.vertx.core.json.JsonArray: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke r3.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadCA(java.util.stream.Stream)> ==> <java.util.AbstractList: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke r3.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadCA(java.util.stream.Stream)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke r3.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadCA(java.util.stream.Stream)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke r3.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadCA(java.util.stream.Stream)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke r3.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadCA(java.util.stream.Stream)> ==> <io.vertx.core.json.JsonObject: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke r3.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadCA(java.util.stream.Stream)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$1: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke r3.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadCA(java.util.stream.Stream)> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke r3.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadCA(java.util.stream.Stream)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke r3.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadCA(java.util.stream.Stream)> ==> <io.vertx.core.http.CaseInsensitiveHeaders: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke r3.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadCA(java.util.stream.Stream)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke r3.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadCA(java.util.stream.Stream)> ==> <java.util.concurrent.ConcurrentLinkedQueue: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadCA(java.util.stream.Stream)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadCA(java.util.stream.Stream)> ==> <io.vertx.core.json.JsonArray$Iter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadCA(java.util.stream.Stream)> ==> <io.vertx.core.json.JsonObject$Iter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadCA(java.util.stream.Stream)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadCA(java.util.stream.Stream)> ==> <java.util.Scanner: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadCA(java.util.stream.Stream)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadCA(java.util.stream.Stream)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: boolean hasNext()>
INTERFACE edge: $r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadCA(java.util.stream.Stream)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object next()>
INTERFACE edge: $r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadCA(java.util.stream.Stream)> ==> <io.vertx.core.json.JsonArray$Iter: java.lang.Object next()>
INTERFACE edge: $r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadCA(java.util.stream.Stream)> ==> <io.vertx.core.json.JsonObject$Iter: java.lang.Object next()>
INTERFACE edge: $r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadCA(java.util.stream.Stream)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: java.lang.Object next()>
INTERFACE edge: $r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadCA(java.util.stream.Stream)> ==> <java.util.Scanner: java.lang.Object next()>
INTERFACE edge: $r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadCA(java.util.stream.Stream)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: java.lang.Object next()>
INTERFACE edge: $r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadCA(java.util.stream.Stream)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: java.lang.Object next()>
SPECIAL edge: specialinvoke $r9.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadCA(java.util.stream.Stream)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cert-") in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadCA(java.util.stream.Stream)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1) in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadCA(java.util.stream.Stream)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.security.KeyStore loadCA(java.util.stream.Stream)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.net.impl.KeyStoreHelper$readFileBlocking__131: void <init>(io.vertx.core.file.FileSystem)>($r0) in <io.vertx.core.net.impl.KeyStoreHelper$readFileBlocking__131: java.util.function.Function bootstrap$(io.vertx.core.file.FileSystem)> ==> <io.vertx.core.net.impl.KeyStoreHelper$readFileBlocking__131: void <init>(io.vertx.core.file.FileSystem)>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.net.impl.KeyStoreHelper$lambda_create_2__130: void <init>(io.vertx.core.impl.VertxInternal)>($r0) in <io.vertx.core.net.impl.KeyStoreHelper$lambda_create_2__130: java.util.function.Function bootstrap$(io.vertx.core.impl.VertxInternal)> ==> <io.vertx.core.net.impl.KeyStoreHelper$lambda_create_2__130: void <init>(io.vertx.core.impl.VertxInternal)>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.net.impl.KeyStoreHelper$iterator__132: void <init>(java.util.stream.Stream)>($r0) in <io.vertx.core.net.impl.KeyStoreHelper$iterator__132: java.lang.Iterable bootstrap$(java.util.stream.Stream)> ==> <io.vertx.core.net.impl.KeyStoreHelper$iterator__132: void <init>(java.util.stream.Stream)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<io.vertx.core.net.KeyCertOptions: javax.net.ssl.KeyManagerFactory getKeyManagerFactory(io.vertx.core.Vertx)>(r2) in <io.vertx.core.net.impl.SSLHelper: javax.net.ssl.KeyManagerFactory getKeyMgrFactory(io.vertx.core.impl.VertxInternal)> ==> <io.vertx.core.net.KeyCertOptions: javax.net.ssl.KeyManagerFactory getKeyManagerFactory(io.vertx.core.Vertx)>
CLINIT edge: $r3 = staticinvoke <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)>($r2, r1) in <io.vertx.core.net.KeyCertOptions: javax.net.ssl.KeyManagerFactory getKeyManagerFactory(io.vertx.core.Vertx)> ==> <io.vertx.core.net.impl.KeyStoreHelper: void <clinit>()>
STATIC edge: $r3 = staticinvoke <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)>($r2, r1) in <io.vertx.core.net.KeyCertOptions: javax.net.ssl.KeyManagerFactory getKeyManagerFactory(io.vertx.core.Vertx)> ==> <io.vertx.core.net.impl.KeyStoreHelper: io.vertx.core.net.impl.KeyStoreHelper create(io.vertx.core.impl.VertxInternal,io.vertx.core.net.KeyCertOptions)>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.shareddata.impl.LocalMapImpl$lambda_typeChecked_2__133: void <init>(java.util.function.Function)>($r0) in <io.vertx.core.shareddata.impl.LocalMapImpl$lambda_typeChecked_2__133: java.util.function.Function bootstrap$(java.util.function.Function)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$lambda_typeChecked_2__133: void <init>(java.util.function.Function)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.impl.SSLHelper$1: void <init>(javax.net.ssl.X509TrustManager,java.util.ArrayList)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.impl.SSLHelper$readFileBlocking__119: void <init>(io.vertx.core.file.FileSystem)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.impl.SSLHelper$lambda_getTrustMgrFactory_0__118: void <init>(io.vertx.core.impl.VertxInternal)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.impl.SSLHelper$2: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.security.Provider: void <init>(java.lang.String,double,java.lang.String)>(r1, d0, r2) in <io.vertx.core.net.impl.VertxTrustManagerFactory$1: void <init>(java.lang.String,double,java.lang.String)> ==> <java.security.Provider: void <init>(java.lang.String,double,java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.impl.SSLHelper$get__120: void <init>(java.util.Map)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.KeyCertOptions$getKeyMgr__121: void <init>(io.vertx.core.net.impl.KeyStoreHelper)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.HashMap: void <init>()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.HashMap: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.util.HashMap: void <init>()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.HashMap: void <init>()>
SPECIAL edge: specialinvoke $r3.<java.util.HashMap: void <init>()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.HashMap: void <init>()>
VIRTUAL edge: r5 = virtualinvoke r4.<java.security.KeyStore: java.util.Enumeration aliases()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.security.KeyStore: java.util.Enumeration aliases()>
VIRTUAL edge: r9 = virtualinvoke r4.<java.security.KeyStore: java.security.cert.Certificate getCertificate(java.lang.String)>(r8) in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.security.KeyStore: java.security.cert.Certificate getCertificate(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r4.<java.security.KeyStore: boolean isCertificateEntry(java.lang.String)>(r8) in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.security.KeyStore: boolean isCertificateEntry(java.lang.String)>
VIRTUAL edge: $z11 = virtualinvoke r4.<java.security.KeyStore: boolean isKeyEntry(java.lang.String)>(r8) in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.security.KeyStore: boolean isKeyEntry(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke r4.<java.security.KeyStore: java.security.Key getKey(java.lang.String,char[])>(r8, $r50) in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.security.KeyStore: java.security.Key getKey(java.lang.String,char[])>
VIRTUAL edge: r52 = virtualinvoke r4.<java.security.KeyStore: java.security.cert.Certificate[] getCertificateChain(java.lang.String)>(r8) in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.security.KeyStore: java.security.cert.Certificate[] getCertificateChain(java.lang.String)>
INTERFACE edge: $z10 = interfaceinvoke r5.<java.util.Enumeration: boolean hasMoreElements()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.StringTokenizer: boolean hasMoreElements()>
INTERFACE edge: $r7 = interfaceinvoke r5.<java.util.Enumeration: java.lang.Object nextElement()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.StringTokenizer: java.lang.Object nextElement()>
VIRTUAL edge: $z9 = virtualinvoke r8.<java.lang.String: boolean startsWith(java.lang.String)>("cert-") in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.lang.String: boolean startsWith(java.lang.String)>
VIRTUAL edge: virtualinvoke r42.<java.security.KeyStore: void setCertificateEntry(java.lang.String,java.security.cert.Certificate)>("cert-1", r9) in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.security.KeyStore: void setCertificateEntry(java.lang.String,java.security.cert.Certificate)>
VIRTUAL edge: virtualinvoke r43.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>(r42) in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>
INTERFACE edge: interfaceinvoke $r40.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, r43) in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r40.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, r43) in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r40.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, r43) in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r40.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, r43) in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r40.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, r43) in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r40.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, r43) in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r40.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, r43) in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r40.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, r43) in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r40.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, r43) in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r40.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, r43) in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r10.<java.util.ArrayList: void <init>()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.ArrayList: void <init>()>
INTERFACE edge: interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>(r48) in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<java.util.List: boolean addAll(java.util.Collection)>($r13) in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.ArrayList: boolean addAll(java.util.Collection)>
INTERFACE edge: $z3 = interfaceinvoke $r10.<java.util.List: boolean isEmpty()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.ArrayList: boolean isEmpty()>
INTERFACE edge: r24 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: r46 = interfaceinvoke r45.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <io.vertx.core.impl.ConcurrentHashSet: java.util.Iterator iterator()>
INTERFACE edge: r46 = interfaceinvoke r45.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: r46 = interfaceinvoke r45.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: r46 = interfaceinvoke r45.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r46 = interfaceinvoke r45.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.AbstractList: java.util.Iterator iterator()>
INTERFACE edge: r46 = interfaceinvoke r45.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2: java.util.Iterator iterator()>
INTERFACE edge: r46 = interfaceinvoke r45.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$1: java.util.Iterator iterator()>
INTERFACE edge: r46 = interfaceinvoke r45.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r46 = interfaceinvoke r45.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r46 = interfaceinvoke r45.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
INTERFACE edge: r46 = interfaceinvoke r45.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.concurrent.ConcurrentLinkedQueue: java.util.Iterator iterator()>
INTERFACE edge: $z6 = interfaceinvoke r46.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: boolean hasNext()>
INTERFACE edge: $z6 = interfaceinvoke r46.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <io.vertx.core.json.JsonArray$Iter: boolean hasNext()>
INTERFACE edge: $z6 = interfaceinvoke r46.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <io.vertx.core.json.JsonObject$Iter: boolean hasNext()>
INTERFACE edge: $z6 = interfaceinvoke r46.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: boolean hasNext()>
INTERFACE edge: $z6 = interfaceinvoke r46.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.Scanner: boolean hasNext()>
INTERFACE edge: $z6 = interfaceinvoke r46.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: boolean hasNext()>
INTERFACE edge: $z6 = interfaceinvoke r46.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: boolean hasNext()>
INTERFACE edge: $r34 = interfaceinvoke r46.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object next()>
INTERFACE edge: $r34 = interfaceinvoke r46.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <io.vertx.core.json.JsonArray$Iter: java.lang.Object next()>
INTERFACE edge: $r34 = interfaceinvoke r46.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <io.vertx.core.json.JsonObject$Iter: java.lang.Object next()>
INTERFACE edge: $r34 = interfaceinvoke r46.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: java.lang.Object next()>
INTERFACE edge: $r34 = interfaceinvoke r46.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.Scanner: java.lang.Object next()>
INTERFACE edge: $r34 = interfaceinvoke r46.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: java.lang.Object next()>
INTERFACE edge: $r34 = interfaceinvoke r46.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: java.lang.Object next()>
INTERFACE edge: $i0 = interfaceinvoke r47.<java.util.List: int size()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$1: int size()>
INTERFACE edge: $i0 = interfaceinvoke r47.<java.util.List: int size()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i0 = interfaceinvoke r47.<java.util.List: int size()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.concurrent.CopyOnWriteArrayList: int size()>
INTERFACE edge: $i0 = interfaceinvoke r47.<java.util.List: int size()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.ArrayList: int size()>
INTERFACE edge: $r35 = interfaceinvoke r47.<java.util.List: java.lang.Object get(int)>(0) in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$1: java.lang.Object get(int)>
INTERFACE edge: $r35 = interfaceinvoke r47.<java.util.List: java.lang.Object get(int)>(0) in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.LinkedList: java.lang.Object get(int)>
INTERFACE edge: $r35 = interfaceinvoke r47.<java.util.List: java.lang.Object get(int)>(0) in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
INTERFACE edge: $r35 = interfaceinvoke r47.<java.util.List: java.lang.Object get(int)>(0) in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.ArrayList: java.lang.Object get(int)>
INTERFACE edge: $r36 = interfaceinvoke r47.<java.util.List: java.lang.Object get(int)>(0) in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$1: java.lang.Object get(int)>
INTERFACE edge: $r36 = interfaceinvoke r47.<java.util.List: java.lang.Object get(int)>(0) in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.LinkedList: java.lang.Object get(int)>
INTERFACE edge: $r36 = interfaceinvoke r47.<java.util.List: java.lang.Object get(int)>(0) in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
INTERFACE edge: $r36 = interfaceinvoke r47.<java.util.List: java.lang.Object get(int)>(0) in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.ArrayList: java.lang.Object get(int)>
INTERFACE edge: $r38 = interfaceinvoke r47.<java.util.List: java.lang.Object get(int)>(1) in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$1: java.lang.Object get(int)>
INTERFACE edge: $r38 = interfaceinvoke r47.<java.util.List: java.lang.Object get(int)>(1) in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.LinkedList: java.lang.Object get(int)>
INTERFACE edge: $r38 = interfaceinvoke r47.<java.util.List: java.lang.Object get(int)>(1) in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
INTERFACE edge: $r38 = interfaceinvoke r47.<java.util.List: java.lang.Object get(int)>(1) in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.ArrayList: java.lang.Object get(int)>
VIRTUAL edge: $i1 = virtualinvoke $r37.<java.lang.Number: int intValue()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.concurrent.atomic.AtomicLong: int intValue()>
VIRTUAL edge: $i1 = virtualinvoke $r37.<java.lang.Number: int intValue()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.lang.Float: int intValue()>
VIRTUAL edge: $i1 = virtualinvoke $r37.<java.lang.Number: int intValue()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.math.BigDecimal: int intValue()>
VIRTUAL edge: $i1 = virtualinvoke $r37.<java.lang.Number: int intValue()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.lang.Double: int intValue()>
VIRTUAL edge: $i1 = virtualinvoke $r37.<java.lang.Number: int intValue()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.lang.Long: int intValue()>
VIRTUAL edge: $i1 = virtualinvoke $r37.<java.lang.Number: int intValue()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.concurrent.atomic.AtomicInteger: int intValue()>
VIRTUAL edge: $i1 = virtualinvoke $r37.<java.lang.Number: int intValue()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.lang.Short: int intValue()>
VIRTUAL edge: $i1 = virtualinvoke $r37.<java.lang.Number: int intValue()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.math.BigInteger: int intValue()>
VIRTUAL edge: $i1 = virtualinvoke $r37.<java.lang.Number: int intValue()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.lang.Byte: int intValue()>
VIRTUAL edge: $i1 = virtualinvoke $r37.<java.lang.Number: int intValue()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.lang.Integer: int intValue()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.lang.Object: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <io.vertx.core.impl.FutureImpl: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.lang.Throwable: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.lang.Integer: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.net.Proxy: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.lang.Thread: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.concurrent.CountDownLatch: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.nio.ByteOrder: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.AbstractMap: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.io.ByteArrayOutputStream: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.lang.reflect.Constructor: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.lang.Enum: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.security.Provider$Service: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <io.vertx.core.impl.verticle.CustomJavaFileObject: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.Scanner: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.EventObject: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.concurrent.atomic.AtomicInteger: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.lang.reflect.Method: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <io.vertx.core.http.StreamPriority: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.concurrent.atomic.AtomicBoolean: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.nio.charset.CodingErrorAction: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.lang.Boolean: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.lang.Package: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <io.vertx.core.http.impl.FileStreamChannel$Id: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.net.Inet6Address: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.lang.Class: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.security.KeyStore$PrivateKeyEntry: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <io.vertx.core.dns.impl.MxRecordImpl: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <io.vertx.core.eventbus.ReplyException: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.lang.Float: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <io.vertx.core.http.Http2Settings: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.nio.channels.FileChannel$MapMode: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.math.BigDecimal: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.lang.Character: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <io.vertx.core.json.JsonObject: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <io.vertx.core.http.impl.ws.WebSocketFrameImpl: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.AbstractCollection: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <io.vertx.core.buffer.impl.BufferImpl: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.jar.Attributes$Name: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.lang.String: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.Hashtable: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.io.StringWriter: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.security.Provider: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <io.vertx.core.http.CaseInsensitiveHeaders: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <io.vertx.core.VertxOptions: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.net.InetSocketAddress: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.regex.Pattern: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.lang.Character$Subset: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.concurrent.atomic.AtomicReference: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.security.CodeSigner: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <io.vertx.core.impl.FailedFuture: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.security.Timestamp: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.lang.ThreadGroup: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.net.ServerSocket: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.lang.Long: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.math.BigInteger: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.math.MathContext: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.net.NetworkInterface: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <io.vertx.core.http.impl.pool.Pool$Holder: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.lang.StackTraceElement: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.lang.reflect.Field: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.net.InetAddress: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.concurrent.atomic.AtomicLong: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.Date: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <io.vertx.core.eventbus.impl.clustered.ClusterNodeInfo: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.Locale: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.lang.Short: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.zip.ZipEntry: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.ServiceLoader: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.UUID: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <javax.security.auth.x500.X500Principal: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.logging.Level: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <io.vertx.core.http.impl.FileStreamChannel$StreamSocketAddress: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <io.vertx.core.impl.SucceededFuture: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.lang.Double: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <javax.net.ssl.SSLEngineResult: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <io.vertx.core.file.FileSystemOptions: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.io.File: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <io.vertx.core.json.JsonArray: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <io.vertx.core.net.impl.SocketAddressImpl: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.net.URL: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.net.URI: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.lang.Byte: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <io.vertx.core.net.impl.ServerID: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <io.vertx.core.metrics.MetricsOptions: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.net.Socket: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.nio.charset.CoderResult: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <io.vertx.core.dns.DnsResponseCode: java.lang.String toString()>
VIRTUAL edge: r48 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.io.FileDescriptor: java.lang.String toString()>
VIRTUAL edge: r49 = virtualinvoke $r12.<javax.security.auth.x500.X500Principal: java.lang.String getName()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <javax.security.auth.x500.X500Principal: java.lang.String getName()>
VIRTUAL edge: $r50 = virtualinvoke r6.<java.lang.String: char[] toCharArray()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.lang.String: char[] toCharArray()>
INTERFACE edge: $r16 = interfaceinvoke $r15.<java.util.List: java.util.stream.Stream stream()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.List: java.util.stream.Stream stream()>
INTERFACE edge: $r18 = interfaceinvoke $r16.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r17) in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>
INTERFACE edge: $r20 = interfaceinvoke $r18.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r19) in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>
SPECIAL edge: specialinvoke $r22.<io.vertx.core.net.impl.KeyStoreHelper$1: void <init>(io.vertx.core.net.impl.KeyStoreHelper,java.util.List,java.security.PrivateKey)>(r0, r21, r51) in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <io.vertx.core.net.impl.KeyStoreHelper$1: void <init>(io.vertx.core.net.impl.KeyStoreHelper,java.util.List,java.security.PrivateKey)>
INTERFACE edge: $z4 = interfaceinvoke r24.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: boolean hasNext()>
INTERFACE edge: $z4 = interfaceinvoke r24.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <io.vertx.core.json.JsonArray$Iter: boolean hasNext()>
INTERFACE edge: $z4 = interfaceinvoke r24.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <io.vertx.core.json.JsonObject$Iter: boolean hasNext()>
INTERFACE edge: $z4 = interfaceinvoke r24.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: boolean hasNext()>
INTERFACE edge: $z4 = interfaceinvoke r24.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.Scanner: boolean hasNext()>
INTERFACE edge: $z4 = interfaceinvoke r24.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: boolean hasNext()>
INTERFACE edge: $z4 = interfaceinvoke r24.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: boolean hasNext()>
INTERFACE edge: $r25 = interfaceinvoke r24.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object next()>
INTERFACE edge: $r25 = interfaceinvoke r24.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <io.vertx.core.json.JsonArray$Iter: java.lang.Object next()>
INTERFACE edge: $r25 = interfaceinvoke r24.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <io.vertx.core.json.JsonObject$Iter: java.lang.Object next()>
INTERFACE edge: $r25 = interfaceinvoke r24.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: java.lang.Object next()>
INTERFACE edge: $r25 = interfaceinvoke r24.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.Scanner: java.lang.Object next()>
INTERFACE edge: $r25 = interfaceinvoke r24.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: java.lang.Object next()>
INTERFACE edge: $r25 = interfaceinvoke r24.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: java.lang.Object next()>
VIRTUAL edge: $z5 = virtualinvoke r26.<java.lang.String: boolean startsWith(java.lang.String)>("*.") in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.lang.String: boolean startsWith(java.lang.String)>
VIRTUAL edge: $r30 = virtualinvoke r26.<java.lang.String: java.lang.String substring(int)>(2) in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.lang.String: java.lang.String substring(int)>
INTERFACE edge: interfaceinvoke $r29.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r30, $r22) in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r29.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r30, $r22) in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r29.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r30, $r22) in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r29.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r30, $r22) in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r29.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r30, $r22) in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r29.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r30, $r22) in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r29.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r30, $r22) in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r29.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r30, $r22) in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r29.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r30, $r22) in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r29.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r30, $r22) in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r27.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r26, $r22) in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r27.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r26, $r22) in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r27.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r26, $r22) in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r27.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r26, $r22) in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r27.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r26, $r22) in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r27.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r26, $r22) in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r27.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r26, $r22) in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r27.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r26, $r22) in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r27.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r26, $r22) in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r27.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r26, $r22) in <io.vertx.core.net.impl.KeyStoreHelper: void <init>(java.security.KeyStore,java.lang.String)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: $r2 = specialinvoke r0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction readFileInternal(java.lang.String,io.vertx.core.Handler)>(r1, null) in <io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.buffer.Buffer readFileBlocking(java.lang.String)> ==> <io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction readFileInternal(java.lang.String,io.vertx.core.Handler)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>() in <io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.buffer.Buffer readFileBlocking(java.lang.String)> ==> <io.vertx.core.file.impl.FileSystemImpl$16: java.lang.Object perform()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>() in <io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.buffer.Buffer readFileBlocking(java.lang.String)> ==> <io.vertx.core.file.impl.FileSystemImpl$17: java.lang.Object perform()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>() in <io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.buffer.Buffer readFileBlocking(java.lang.String)> ==> <io.vertx.core.file.impl.FileSystemImpl$14: java.lang.Object perform()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>() in <io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.buffer.Buffer readFileBlocking(java.lang.String)> ==> <io.vertx.core.file.impl.FileSystemImpl$15: java.lang.Object perform()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>() in <io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.buffer.Buffer readFileBlocking(java.lang.String)> ==> <io.vertx.core.file.impl.FileSystemImpl$1: java.lang.Object perform()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>() in <io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.buffer.Buffer readFileBlocking(java.lang.String)> ==> <io.vertx.core.file.impl.FileSystemImpl$2: java.lang.Object perform()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>() in <io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.buffer.Buffer readFileBlocking(java.lang.String)> ==> <io.vertx.core.file.impl.FileSystemImpl$3: java.lang.Object perform()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>() in <io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.buffer.Buffer readFileBlocking(java.lang.String)> ==> <io.vertx.core.file.impl.FileSystemImpl$18: java.lang.Object perform()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>() in <io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.buffer.Buffer readFileBlocking(java.lang.String)> ==> <io.vertx.core.file.impl.FileSystemImpl$4: java.lang.Object perform()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>() in <io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.buffer.Buffer readFileBlocking(java.lang.String)> ==> <io.vertx.core.file.impl.FileSystemImpl$19: java.lang.Object perform()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>() in <io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.buffer.Buffer readFileBlocking(java.lang.String)> ==> <io.vertx.core.file.impl.FileSystemImpl$5: java.lang.Object perform()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>() in <io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.buffer.Buffer readFileBlocking(java.lang.String)> ==> <io.vertx.core.file.impl.FileSystemImpl$6: java.lang.Object perform()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>() in <io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.buffer.Buffer readFileBlocking(java.lang.String)> ==> <io.vertx.core.file.impl.FileSystemImpl$7: java.lang.Object perform()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>() in <io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.buffer.Buffer readFileBlocking(java.lang.String)> ==> <io.vertx.core.file.impl.FileSystemImpl$8: java.lang.Object perform()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>() in <io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.buffer.Buffer readFileBlocking(java.lang.String)> ==> <io.vertx.core.file.impl.FileSystemImpl$9: java.lang.Object perform()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>() in <io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.buffer.Buffer readFileBlocking(java.lang.String)> ==> <io.vertx.core.file.impl.FileSystemImpl$20: java.lang.Object perform()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>() in <io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.buffer.Buffer readFileBlocking(java.lang.String)> ==> <io.vertx.core.file.impl.FileSystemImpl$12: java.lang.Object perform()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>() in <io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.buffer.Buffer readFileBlocking(java.lang.String)> ==> <io.vertx.core.file.impl.FileSystemImpl$13: java.lang.Object perform()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>() in <io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.buffer.Buffer readFileBlocking(java.lang.String)> ==> <io.vertx.core.file.impl.WindowsFileSystem$1: java.lang.Object perform()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>() in <io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.buffer.Buffer readFileBlocking(java.lang.String)> ==> <io.vertx.core.file.impl.FileSystemImpl$21: java.lang.Object perform()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>() in <io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.buffer.Buffer readFileBlocking(java.lang.String)> ==> <io.vertx.core.file.impl.FileSystemImpl$10: java.lang.Object perform()>
STATIC edge: staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r0) in <io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction readFileInternal(java.lang.String,io.vertx.core.Handler)> ==> <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.net.impl.KeyStoreHelper$lambda_new_3__134: void <init>()>() in <io.vertx.core.net.impl.KeyStoreHelper$lambda_new_3__134: java.util.function.Function bootstrap$()> ==> <io.vertx.core.net.impl.KeyStoreHelper$lambda_new_3__134: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.util.ArrayList: void <init>()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.util.ArrayList: void <init>()>
INTERFACE edge: interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r18) in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r9) in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke $r10.<javax.naming.ldap.LdapName: void <init>(java.lang.String)>(r2) in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <javax.naming.ldap.LdapName: void <init>(java.lang.String)>
INTERFACE edge: r16 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.util.AbstractList: java.util.Iterator iterator()>
INTERFACE edge: r16 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r16 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
INTERFACE edge: r16 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z3 = interfaceinvoke r16.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: boolean hasNext()>
INTERFACE edge: $z3 = interfaceinvoke r16.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <io.vertx.core.json.JsonArray$Iter: boolean hasNext()>
INTERFACE edge: $z3 = interfaceinvoke r16.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <io.vertx.core.json.JsonObject$Iter: boolean hasNext()>
INTERFACE edge: $z3 = interfaceinvoke r16.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: boolean hasNext()>
INTERFACE edge: $z3 = interfaceinvoke r16.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.util.Scanner: boolean hasNext()>
INTERFACE edge: $z3 = interfaceinvoke r16.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: boolean hasNext()>
INTERFACE edge: $z3 = interfaceinvoke r16.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: boolean hasNext()>
INTERFACE edge: $r12 = interfaceinvoke r16.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object next()>
INTERFACE edge: $r12 = interfaceinvoke r16.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <io.vertx.core.json.JsonArray$Iter: java.lang.Object next()>
INTERFACE edge: $r12 = interfaceinvoke r16.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <io.vertx.core.json.JsonObject$Iter: java.lang.Object next()>
INTERFACE edge: $r12 = interfaceinvoke r16.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: java.lang.Object next()>
INTERFACE edge: $r12 = interfaceinvoke r16.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.util.Scanner: java.lang.Object next()>
INTERFACE edge: $r12 = interfaceinvoke r16.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: java.lang.Object next()>
INTERFACE edge: $r12 = interfaceinvoke r16.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: java.lang.Object next()>
VIRTUAL edge: $z4 = virtualinvoke $r13.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("cn") in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.lang.Object: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <io.vertx.core.impl.FutureImpl: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.lang.Throwable: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.lang.Integer: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.net.Proxy: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.lang.Thread: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.util.concurrent.CountDownLatch: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.nio.ByteOrder: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.util.AbstractMap: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.io.ByteArrayOutputStream: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.lang.reflect.Constructor: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.lang.Enum: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.security.Provider$Service: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <io.vertx.core.impl.verticle.CustomJavaFileObject: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.util.Scanner: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.util.EventObject: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.util.concurrent.atomic.AtomicInteger: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.lang.reflect.Method: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <io.vertx.core.http.StreamPriority: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.util.concurrent.atomic.AtomicBoolean: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.nio.charset.CodingErrorAction: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.lang.Boolean: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.lang.Package: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <io.vertx.core.http.impl.FileStreamChannel$Id: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.net.Inet6Address: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.lang.Class: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.security.KeyStore$PrivateKeyEntry: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <io.vertx.core.dns.impl.MxRecordImpl: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <io.vertx.core.eventbus.ReplyException: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.lang.Float: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <io.vertx.core.http.Http2Settings: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.nio.channels.FileChannel$MapMode: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.math.BigDecimal: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.lang.Character: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <io.vertx.core.json.JsonObject: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <io.vertx.core.http.impl.ws.WebSocketFrameImpl: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.util.AbstractCollection: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <io.vertx.core.buffer.impl.BufferImpl: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.util.jar.Attributes$Name: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.lang.String: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.util.Hashtable: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.io.StringWriter: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.security.Provider: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <io.vertx.core.http.CaseInsensitiveHeaders: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <io.vertx.core.VertxOptions: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.net.InetSocketAddress: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.util.regex.Pattern: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.lang.Character$Subset: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.util.concurrent.atomic.AtomicReference: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.security.CodeSigner: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <io.vertx.core.impl.FailedFuture: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.security.Timestamp: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.lang.ThreadGroup: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.net.ServerSocket: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.lang.Long: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.math.BigInteger: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.math.MathContext: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.net.NetworkInterface: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <io.vertx.core.http.impl.pool.Pool$Holder: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.lang.StackTraceElement: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.lang.reflect.Field: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.net.InetAddress: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.util.concurrent.atomic.AtomicLong: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.util.Date: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <io.vertx.core.eventbus.impl.clustered.ClusterNodeInfo: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.util.Locale: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.lang.Short: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.util.zip.ZipEntry: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.util.ServiceLoader: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.util.UUID: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <javax.security.auth.x500.X500Principal: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.util.logging.Level: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <io.vertx.core.http.impl.FileStreamChannel$StreamSocketAddress: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <io.vertx.core.impl.SucceededFuture: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.lang.Double: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <javax.net.ssl.SSLEngineResult: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <io.vertx.core.file.FileSystemOptions: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.io.File: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <io.vertx.core.json.JsonArray: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <io.vertx.core.net.impl.SocketAddressImpl: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.net.URL: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.net.URI: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.lang.Byte: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <io.vertx.core.net.impl.ServerID: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <io.vertx.core.metrics.MetricsOptions: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.net.Socket: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.nio.charset.CoderResult: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <io.vertx.core.dns.DnsResponseCode: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.io.FileDescriptor: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke r2.<java.lang.String: java.lang.String trim()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.lang.String: java.lang.String trim()>
VIRTUAL edge: r19 = virtualinvoke $r3.<java.lang.String: java.lang.String[] split(java.lang.String)>("[,;]") in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.String: java.lang.String trim()>() in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.lang.String: java.lang.String trim()>
VIRTUAL edge: r6 = virtualinvoke $r5.<java.lang.String: java.lang.String[] split(java.lang.String)>("=") in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
VIRTUAL edge: $z1 = virtualinvoke $r8.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r7) in <io.vertx.core.net.impl.KeyStoreHelper: java.util.List getX509CertificateCommonNames(java.lang.String)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.impl.KeyStoreHelper$getValue__122: void <init>(io.vertx.core.net.PfxOptions)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.impl.KeyStoreHelper$lambda_create_1__123: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.net.PfxOptions)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.impl.KeyStoreHelper$getValue__124: void <init>(io.vertx.core.net.JksOptions)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.impl.KeyStoreHelper$lambda_create_0__125: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.net.JksOptions)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.impl.KeyStoreHelper$lambda_loadCerts_5__126: void <init>(java.security.cert.CertificateFactory)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.impl.KeyStoreHelper$lambda_loadPrivateKey_4__127: void <init>(java.security.KeyFactory)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: void <init>(int,java.lang.CharSequence,java.lang.CharSequence)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot schedule a timer with delay < 1 ms") in <io.vertx.core.impl.VertxImpl: long scheduleTimeout(io.vertx.core.impl.ContextImpl,io.vertx.core.Handler,long,boolean)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: l2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long getAndIncrement()>() in <io.vertx.core.impl.VertxImpl: long scheduleTimeout(io.vertx.core.impl.ContextImpl,io.vertx.core.Handler,long,boolean)> ==> <java.util.concurrent.atomic.AtomicLong: long getAndIncrement()>
SPECIAL edge: specialinvoke $r2.<io.vertx.core.impl.VertxImpl$InternalTimerHandler: void <init>(io.vertx.core.impl.VertxImpl,long,io.vertx.core.Handler,boolean,long,io.vertx.core.impl.ContextImpl)>(r0, l2, r3, z0, l0, r4) in <io.vertx.core.impl.VertxImpl: long scheduleTimeout(io.vertx.core.impl.ContextImpl,io.vertx.core.Handler,long,boolean)> ==> <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void <init>(io.vertx.core.impl.VertxImpl,long,io.vertx.core.Handler,boolean,long,io.vertx.core.impl.ContextImpl)>
INTERFACE edge: interfaceinvoke $r6.<java.util.concurrent.ConcurrentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r2) in <io.vertx.core.impl.VertxImpl: long scheduleTimeout(io.vertx.core.impl.ContextImpl,io.vertx.core.Handler,long,boolean)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke r4.<io.vertx.core.impl.ContextImpl: void addCloseHook(io.vertx.core.Closeable)>($r2) in <io.vertx.core.impl.VertxImpl: long scheduleTimeout(io.vertx.core.impl.ContextImpl,io.vertx.core.Handler,long,boolean)> ==> <io.vertx.core.impl.ContextImpl: void addCloseHook(io.vertx.core.Closeable)>
VIRTUAL edge: virtualinvoke r4.<io.vertx.core.impl.ContextImpl: void addCloseHook(io.vertx.core.Closeable)>($r2) in <io.vertx.core.impl.VertxImpl: long scheduleTimeout(io.vertx.core.impl.ContextImpl,io.vertx.core.Handler,long,boolean)> ==> <io.vertx.core.impl.EventLoopContext: void addCloseHook(io.vertx.core.Closeable)>
CLINIT edge: $r11 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS> in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void <init>(io.vertx.core.impl.VertxImpl,long,io.vertx.core.Handler,boolean,long,io.vertx.core.impl.ContextImpl)> ==> <java.util.concurrent.TimeUnit: void <clinit>()>
STATIC edge: $r10 = staticinvoke <io.vertx.core.impl.VertxImpl: io.vertx.core.spi.metrics.VertxMetrics access$000(io.vertx.core.impl.VertxImpl)>(r1) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void <init>(io.vertx.core.impl.VertxImpl,long,io.vertx.core.Handler,boolean,long,io.vertx.core.impl.ContextImpl)> ==> <io.vertx.core.impl.VertxImpl: io.vertx.core.spi.metrics.VertxMetrics access$000(io.vertx.core.impl.VertxImpl)>
STATIC edge: $r9 = staticinvoke <io.vertx.core.impl.VertxImpl: io.vertx.core.spi.metrics.VertxMetrics access$000(io.vertx.core.impl.VertxImpl)>(r1) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void <init>(io.vertx.core.impl.VertxImpl,long,io.vertx.core.Handler,boolean,long,io.vertx.core.impl.ContextImpl)> ==> <io.vertx.core.impl.VertxImpl: io.vertx.core.spi.metrics.VertxMetrics access$000(io.vertx.core.impl.VertxImpl)>
STATIC edge: r6 = staticinvoke <io.vertx.core.impl.VertxImpl$InternalTimerHandler$lambda_new_0__136: java.lang.Runnable bootstrap$(io.vertx.core.impl.VertxImpl$InternalTimerHandler,io.vertx.core.impl.ContextImpl)>(r0, r2) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void <init>(io.vertx.core.impl.VertxImpl,long,io.vertx.core.Handler,boolean,long,io.vertx.core.impl.ContextImpl)> ==> <io.vertx.core.impl.VertxImpl$InternalTimerHandler$lambda_new_0__136: java.lang.Runnable bootstrap$(io.vertx.core.impl.VertxImpl$InternalTimerHandler,io.vertx.core.impl.ContextImpl)>
CLINIT edge: $r9 = staticinvoke <io.vertx.core.impl.VertxImpl: io.vertx.core.spi.metrics.VertxMetrics access$000(io.vertx.core.impl.VertxImpl)>(r1) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void <init>(io.vertx.core.impl.VertxImpl,long,io.vertx.core.Handler,boolean,long,io.vertx.core.impl.ContextImpl)> ==> <io.vertx.core.impl.VertxImpl: void <clinit>()>
CLINIT edge: $r7 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS> in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void <init>(io.vertx.core.impl.VertxImpl,long,io.vertx.core.Handler,boolean,long,io.vertx.core.impl.ContextImpl)> ==> <java.util.concurrent.TimeUnit: void <clinit>()>
INTERFACE edge: r16 = interfaceinvoke $r15.<io.vertx.core.impl.VertxInternal: io.vertx.core.impl.ContextInternal getOrCreateContext()>() in <io.vertx.core.eventbus.impl.EventBusImpl: io.vertx.core.eventbus.impl.EventBusImpl$LocalRegistrationResult addLocalRegistration(java.lang.String,io.vertx.core.eventbus.impl.HandlerRegistration,boolean,boolean)> ==> <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.ContextInternal getOrCreateContext()>
VIRTUAL edge: virtualinvoke r2.<io.vertx.core.eventbus.impl.HandlerRegistration: void setHandlerContext(io.vertx.core.Context)>(r16) in <io.vertx.core.eventbus.impl.EventBusImpl: io.vertx.core.eventbus.impl.EventBusImpl$LocalRegistrationResult addLocalRegistration(java.lang.String,io.vertx.core.eventbus.impl.HandlerRegistration,boolean,boolean)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void setHandlerContext(io.vertx.core.Context)>
SPECIAL edge: specialinvoke $r3.<io.vertx.core.eventbus.impl.HandlerHolder: void <init>(io.vertx.core.spi.metrics.EventBusMetrics,io.vertx.core.eventbus.impl.HandlerRegistration,boolean,boolean,io.vertx.core.Context)>($r5, r2, z1, z2, r16) in <io.vertx.core.eventbus.impl.EventBusImpl: io.vertx.core.eventbus.impl.EventBusImpl$LocalRegistrationResult addLocalRegistration(java.lang.String,io.vertx.core.eventbus.impl.HandlerRegistration,boolean,boolean)> ==> <io.vertx.core.eventbus.impl.HandlerHolder: void <init>(io.vertx.core.spi.metrics.EventBusMetrics,io.vertx.core.eventbus.impl.HandlerRegistration,boolean,boolean,io.vertx.core.Context)>
SPECIAL edge: specialinvoke $r7.<io.vertx.core.impl.utils.ConcurrentCyclicSequence: void <init>()>() in <io.vertx.core.eventbus.impl.EventBusImpl: io.vertx.core.eventbus.impl.EventBusImpl$LocalRegistrationResult addLocalRegistration(java.lang.String,io.vertx.core.eventbus.impl.HandlerRegistration,boolean,boolean)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: void <init>()>
VIRTUAL edge: r8 = virtualinvoke $r7.<io.vertx.core.impl.utils.ConcurrentCyclicSequence: io.vertx.core.impl.utils.ConcurrentCyclicSequence add(java.lang.Object)>($r3) in <io.vertx.core.eventbus.impl.EventBusImpl: io.vertx.core.eventbus.impl.EventBusImpl$LocalRegistrationResult addLocalRegistration(java.lang.String,io.vertx.core.eventbus.impl.HandlerRegistration,boolean,boolean)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: io.vertx.core.impl.utils.ConcurrentCyclicSequence add(java.lang.Object)>
SPECIAL edge: specialinvoke $r14.<io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry: void <init>(io.vertx.core.eventbus.impl.EventBusImpl,java.lang.String,io.vertx.core.eventbus.impl.HandlerRegistration)>(r4, r0, r2) in <io.vertx.core.eventbus.impl.EventBusImpl: io.vertx.core.eventbus.impl.EventBusImpl$LocalRegistrationResult addLocalRegistration(java.lang.String,io.vertx.core.eventbus.impl.HandlerRegistration,boolean,boolean)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry: void <init>(io.vertx.core.eventbus.impl.EventBusImpl,java.lang.String,io.vertx.core.eventbus.impl.HandlerRegistration)>
INTERFACE edge: interfaceinvoke r16.<io.vertx.core.Context: void addCloseHook(io.vertx.core.Closeable)>($r14) in <io.vertx.core.eventbus.impl.EventBusImpl: io.vertx.core.eventbus.impl.EventBusImpl$LocalRegistrationResult addLocalRegistration(java.lang.String,io.vertx.core.eventbus.impl.HandlerRegistration,boolean,boolean)> ==> <io.vertx.core.impl.ContextImpl: void addCloseHook(io.vertx.core.Closeable)>
INTERFACE edge: interfaceinvoke r16.<io.vertx.core.Context: void addCloseHook(io.vertx.core.Closeable)>($r14) in <io.vertx.core.eventbus.impl.EventBusImpl: io.vertx.core.eventbus.impl.EventBusImpl$LocalRegistrationResult addLocalRegistration(java.lang.String,io.vertx.core.eventbus.impl.HandlerRegistration,boolean,boolean)> ==> <io.vertx.core.impl.EventLoopContext: void addCloseHook(io.vertx.core.Closeable)>
SPECIAL edge: specialinvoke $r13.<io.vertx.core.eventbus.impl.EventBusImpl$LocalRegistrationResult: void <init>(io.vertx.core.eventbus.impl.HandlerHolder,boolean)>($r3, $z4) in <io.vertx.core.eventbus.impl.EventBusImpl: io.vertx.core.eventbus.impl.EventBusImpl$LocalRegistrationResult addLocalRegistration(java.lang.String,io.vertx.core.eventbus.impl.HandlerRegistration,boolean,boolean)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$LocalRegistrationResult: void <init>(io.vertx.core.eventbus.impl.HandlerHolder,boolean)>
CLINIT edge: $r1 = <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object[] EMPTY_ARRAY> in <io.vertx.core.impl.utils.ConcurrentCyclicSequence: void <init>()> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: void <clinit>()>
CLINIT edge: $r5 = new io.vertx.core.impl.utils.ConcurrentCyclicSequence in <io.vertx.core.impl.utils.ConcurrentCyclicSequence: io.vertx.core.impl.utils.ConcurrentCyclicSequence add(java.lang.Object)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: void <clinit>()>
STATIC edge: r3 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r2, $i1) in <io.vertx.core.impl.utils.ConcurrentCyclicSequence: io.vertx.core.impl.utils.ConcurrentCyclicSequence add(java.lang.Object)> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r1) in <io.vertx.core.eventbus.impl.EventBusImpl: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.impl.DeploymentManager$lambda_doDeployVerticle_2__17: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r1) in <io.vertx.core.eventbus.impl.EventBusImpl: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r1) in <io.vertx.core.eventbus.impl.EventBusImpl: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.impl.FutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r1) in <io.vertx.core.eventbus.impl.EventBusImpl: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r1) in <io.vertx.core.eventbus.impl.EventBusImpl: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.impl.SucceededFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r1) in <io.vertx.core.eventbus.impl.EventBusImpl: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r1) in <io.vertx.core.eventbus.impl.EventBusImpl: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r1) in <io.vertx.core.eventbus.impl.EventBusImpl: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl$lambda_joinCluster_1__10: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r1) in <io.vertx.core.eventbus.impl.EventBusImpl: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r1) in <io.vertx.core.eventbus.impl.EventBusImpl: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.Starter$lambda_runVerticle_1__1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r1) in <io.vertx.core.eventbus.impl.EventBusImpl: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r1) in <io.vertx.core.eventbus.impl.EventBusImpl: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r1) in <io.vertx.core.eventbus.impl.EventBusImpl: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r1) in <io.vertx.core.eventbus.impl.EventBusImpl: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.Starter$lambda_startVertx_0__2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r1) in <io.vertx.core.eventbus.impl.EventBusImpl: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r1) in <io.vertx.core.eventbus.impl.EventBusImpl: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r1) in <io.vertx.core.eventbus.impl.EventBusImpl: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_start_3__19: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r1) in <io.vertx.core.eventbus.impl.EventBusImpl: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.impl.HAManager$lambda_doDeployVerticle_4__7: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r1) in <io.vertx.core.eventbus.impl.EventBusImpl: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_close_0__29: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r1) in <io.vertx.core.eventbus.impl.EventBusImpl: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r1) in <io.vertx.core.eventbus.impl.EventBusImpl: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r1) in <io.vertx.core.eventbus.impl.EventBusImpl: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r1) in <io.vertx.core.eventbus.impl.EventBusImpl: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.Starter$lambda_createLoggingHandler_2__3: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r1) in <io.vertx.core.eventbus.impl.EventBusImpl: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.impl.CompositeFutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r1) in <io.vertx.core.eventbus.impl.EventBusImpl: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r1) in <io.vertx.core.eventbus.impl.EventBusImpl: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_finalize_6__18: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r1) in <io.vertx.core.eventbus.impl.EventBusImpl: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r1) in <io.vertx.core.eventbus.impl.EventBusImpl: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl$lambda_init_0__9: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r1) in <io.vertx.core.eventbus.impl.EventBusImpl: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.impl.FailedFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r1) in <io.vertx.core.eventbus.impl.EventBusImpl: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r1) in <io.vertx.core.eventbus.impl.EventBusImpl: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_close_5__30: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<java.util.Set: boolean add(java.lang.Object)>(r3) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)> ==> <java.util.HashSet: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<java.util.Set: boolean add(java.lang.Object)>(r3) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)> ==> <java.util.AbstractCollection: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<java.util.Set: boolean add(java.lang.Object)>(r3) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.impl.ConcurrentHashSet: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<java.util.Set: boolean add(java.lang.Object)>(r3) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$1: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<java.util.Set: boolean add(java.lang.Object)>(r3) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)> ==> <java.util.TreeSet: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r7) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.impl.DeploymentManager$lambda_doDeployVerticle_2__17: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r7) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r7) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.impl.FutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r7) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r7) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.impl.SucceededFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r7) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r7) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r7) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl$lambda_joinCluster_1__10: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r7) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r7) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.Starter$lambda_runVerticle_1__1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r7) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r7) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r7) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r7) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.Starter$lambda_startVertx_0__2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r7) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r7) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r7) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_start_3__19: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r7) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.impl.HAManager$lambda_doDeployVerticle_4__7: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r7) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_close_0__29: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r7) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r7) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r7) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r7) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.Starter$lambda_createLoggingHandler_2__3: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r7) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.impl.CompositeFutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r7) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r7) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_finalize_6__18: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r7) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r7) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl$lambda_init_0__9: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r7) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.impl.FailedFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r7) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.Handler: void handle(java.lang.Object)>($r7) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void addRegistration(boolean,java.lang.String,boolean,boolean,io.vertx.core.Handler)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_close_5__30: void handle(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.eventbus.impl.EventBusImpl$lambda_addLocalRegistration_1__135: void <init>()>() in <io.vertx.core.eventbus.impl.EventBusImpl$lambda_addLocalRegistration_1__135: java.util.function.BiFunction bootstrap$()> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_addLocalRegistration_1__135: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.eventbus.impl.EventBusImpl$setResult__128: void <init>(io.vertx.core.eventbus.impl.HandlerRegistration)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.eventbus.impl.HandlerRegistration: void unregister()>() in <io.vertx.core.eventbus.impl.HandlerRegistration: void sendAsyncResultFailure(io.vertx.core.eventbus.ReplyFailure,java.lang.String)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void unregister()>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.eventbus.ReplyException: void <init>(io.vertx.core.eventbus.ReplyFailure,java.lang.String)>(r2, r3) in <io.vertx.core.eventbus.impl.HandlerRegistration: void sendAsyncResultFailure(io.vertx.core.eventbus.ReplyFailure,java.lang.String)> ==> <io.vertx.core.eventbus.ReplyException: void <init>(io.vertx.core.eventbus.ReplyFailure,java.lang.String)>
INTERFACE edge: interfaceinvoke $r4.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.eventbus.impl.HandlerRegistration: void sendAsyncResultFailure(io.vertx.core.eventbus.ReplyFailure,java.lang.String)> ==> <io.vertx.core.impl.DeploymentManager$lambda_doDeployVerticle_2__17: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.eventbus.impl.HandlerRegistration: void sendAsyncResultFailure(io.vertx.core.eventbus.ReplyFailure,java.lang.String)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl$BufferingHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.eventbus.impl.HandlerRegistration: void sendAsyncResultFailure(io.vertx.core.eventbus.ReplyFailure,java.lang.String)> ==> <io.vertx.core.impl.FutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.eventbus.impl.HandlerRegistration: void sendAsyncResultFailure(io.vertx.core.eventbus.ReplyFailure,java.lang.String)> ==> <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.eventbus.impl.HandlerRegistration: void sendAsyncResultFailure(io.vertx.core.eventbus.ReplyFailure,java.lang.String)> ==> <io.vertx.core.impl.SucceededFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.eventbus.impl.HandlerRegistration: void sendAsyncResultFailure(io.vertx.core.eventbus.ReplyFailure,java.lang.String)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.eventbus.impl.HandlerRegistration: void sendAsyncResultFailure(io.vertx.core.eventbus.ReplyFailure,java.lang.String)> ==> <io.vertx.core.http.impl.Http1xServerConnection$1Adapter: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.eventbus.impl.HandlerRegistration: void sendAsyncResultFailure(io.vertx.core.eventbus.ReplyFailure,java.lang.String)> ==> <io.vertx.core.impl.VertxImpl$lambda_joinCluster_1__10: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.eventbus.impl.HandlerRegistration: void sendAsyncResultFailure(io.vertx.core.eventbus.ReplyFailure,java.lang.String)> ==> <io.vertx.core.http.impl.WebSocketRequestHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.eventbus.impl.HandlerRegistration: void sendAsyncResultFailure(io.vertx.core.eventbus.ReplyFailure,java.lang.String)> ==> <io.vertx.core.Starter$lambda_runVerticle_1__1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.eventbus.impl.HandlerRegistration: void sendAsyncResultFailure(io.vertx.core.eventbus.ReplyFailure,java.lang.String)> ==> <io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.eventbus.impl.HandlerRegistration: void sendAsyncResultFailure(io.vertx.core.eventbus.ReplyFailure,java.lang.String)> ==> <io.vertx.core.dns.impl.DnsClientImpl$2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.eventbus.impl.HandlerRegistration: void sendAsyncResultFailure(io.vertx.core.eventbus.ReplyFailure,java.lang.String)> ==> <io.vertx.core.datagram.impl.PacketWriteStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.eventbus.impl.HandlerRegistration: void sendAsyncResultFailure(io.vertx.core.eventbus.ReplyFailure,java.lang.String)> ==> <io.vertx.core.Starter$lambda_startVertx_0__2: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.eventbus.impl.HandlerRegistration: void sendAsyncResultFailure(io.vertx.core.eventbus.ReplyFailure,java.lang.String)> ==> <io.vertx.core.parsetools.impl.RecordParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.eventbus.impl.HandlerRegistration: void sendAsyncResultFailure(io.vertx.core.eventbus.ReplyFailure,java.lang.String)> ==> <io.vertx.core.parsetools.impl.JsonParserImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.eventbus.impl.HandlerRegistration: void sendAsyncResultFailure(io.vertx.core.eventbus.ReplyFailure,java.lang.String)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_start_3__19: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.eventbus.impl.HandlerRegistration: void sendAsyncResultFailure(io.vertx.core.eventbus.ReplyFailure,java.lang.String)> ==> <io.vertx.core.impl.HAManager$lambda_doDeployVerticle_4__7: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.eventbus.impl.HandlerRegistration: void sendAsyncResultFailure(io.vertx.core.eventbus.ReplyFailure,java.lang.String)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_close_0__29: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.eventbus.impl.HandlerRegistration: void sendAsyncResultFailure(io.vertx.core.eventbus.ReplyFailure,java.lang.String)> ==> <io.vertx.core.http.impl.WebSocketImplBase$FrameAggregator: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.eventbus.impl.HandlerRegistration: void sendAsyncResultFailure(io.vertx.core.eventbus.ReplyFailure,java.lang.String)> ==> <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.eventbus.impl.HandlerRegistration: void sendAsyncResultFailure(io.vertx.core.eventbus.ReplyFailure,java.lang.String)> ==> <io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.eventbus.impl.HandlerRegistration: void sendAsyncResultFailure(io.vertx.core.eventbus.ReplyFailure,java.lang.String)> ==> <io.vertx.core.Starter$lambda_createLoggingHandler_2__3: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.eventbus.impl.HandlerRegistration: void sendAsyncResultFailure(io.vertx.core.eventbus.ReplyFailure,java.lang.String)> ==> <io.vertx.core.impl.CompositeFutureImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.eventbus.impl.HandlerRegistration: void sendAsyncResultFailure(io.vertx.core.eventbus.ReplyFailure,java.lang.String)> ==> <io.vertx.core.eventbus.impl.HandlerRegistration: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.eventbus.impl.HandlerRegistration: void sendAsyncResultFailure(io.vertx.core.eventbus.ReplyFailure,java.lang.String)> ==> <io.vertx.core.eventbus.impl.EventBusImpl$lambda_finalize_6__18: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.eventbus.impl.HandlerRegistration: void sendAsyncResultFailure(io.vertx.core.eventbus.ReplyFailure,java.lang.String)> ==> <io.vertx.core.impl.VertxImpl$TimeoutStreamImpl: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.eventbus.impl.HandlerRegistration: void sendAsyncResultFailure(io.vertx.core.eventbus.ReplyFailure,java.lang.String)> ==> <io.vertx.core.impl.VertxImpl$lambda_init_0__9: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.eventbus.impl.HandlerRegistration: void sendAsyncResultFailure(io.vertx.core.eventbus.ReplyFailure,java.lang.String)> ==> <io.vertx.core.impl.FailedFuture: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.eventbus.impl.HandlerRegistration: void sendAsyncResultFailure(io.vertx.core.eventbus.ReplyFailure,java.lang.String)> ==> <io.vertx.core.http.impl.Http2ServerConnection$1: void handle(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<io.vertx.core.Handler: void handle(java.lang.Object)>($r5) in <io.vertx.core.eventbus.impl.HandlerRegistration: void sendAsyncResultFailure(io.vertx.core.eventbus.ReplyFailure,java.lang.String)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$lambda_close_5__30: void handle(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0) in <io.vertx.core.eventbus.ReplyFailure: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
VIRTUAL edge: $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r3) in <io.vertx.core.net.impl.ServerID: boolean equals(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r1) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void sendRemote(io.vertx.core.net.impl.ServerID,io.vertx.core.eventbus.impl.MessageImpl)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
SPECIAL edge: specialinvoke $r5.<io.vertx.core.eventbus.impl.clustered.ConnectionHolder: void <init>(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus,io.vertx.core.net.impl.ServerID,io.vertx.core.eventbus.EventBusOptions)>(r0, r1, $r6) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void sendRemote(io.vertx.core.net.impl.ServerID,io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.eventbus.impl.clustered.ConnectionHolder: void <init>(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus,io.vertx.core.net.impl.ServerID,io.vertx.core.eventbus.EventBusOptions)>
VIRTUAL edge: virtualinvoke $r5.<io.vertx.core.eventbus.impl.clustered.ConnectionHolder: void connect()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void sendRemote(io.vertx.core.net.impl.ServerID,io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.eventbus.impl.clustered.ConnectionHolder: void connect()>
INTERFACE edge: $r8 = interfaceinvoke $r7.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r1, $r5) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void sendRemote(io.vertx.core.net.impl.ServerID,io.vertx.core.eventbus.impl.MessageImpl)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke r10.<io.vertx.core.eventbus.impl.clustered.ConnectionHolder: void writeMessage(io.vertx.core.eventbus.impl.clustered.ClusteredMessage)>($r11) in <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void sendRemote(io.vertx.core.net.impl.ServerID,io.vertx.core.eventbus.impl.MessageImpl)> ==> <io.vertx.core.eventbus.impl.clustered.ConnectionHolder: void writeMessage(io.vertx.core.eventbus.impl.clustered.ClusteredMessage)>
CLINIT edge: staticinvoke <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void setCertOptions(io.vertx.core.net.TCPSSLOptions,io.vertx.core.net.KeyCertOptions)>($r5, $r9) in <io.vertx.core.eventbus.impl.clustered.ConnectionHolder: void <init>(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus,io.vertx.core.net.impl.ServerID,io.vertx.core.eventbus.EventBusOptions)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void <clinit>()>
STATIC edge: staticinvoke <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void setTrustOptions(io.vertx.core.net.TCPSSLOptions,io.vertx.core.net.TrustOptions)>($r5, $r10) in <io.vertx.core.eventbus.impl.clustered.ConnectionHolder: void <init>(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus,io.vertx.core.net.impl.ServerID,io.vertx.core.eventbus.EventBusOptions)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void setTrustOptions(io.vertx.core.net.TCPSSLOptions,io.vertx.core.net.TrustOptions)>
STATIC edge: staticinvoke <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void setCertOptions(io.vertx.core.net.TCPSSLOptions,io.vertx.core.net.KeyCertOptions)>($r5, $r9) in <io.vertx.core.eventbus.impl.clustered.ConnectionHolder: void <init>(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus,io.vertx.core.net.impl.ServerID,io.vertx.core.eventbus.EventBusOptions)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void setCertOptions(io.vertx.core.net.TCPSSLOptions,io.vertx.core.net.KeyCertOptions)>
CLINIT edge: $r11 = new io.vertx.core.net.impl.NetClientImpl in <io.vertx.core.eventbus.impl.clustered.ConnectionHolder: void <init>(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus,io.vertx.core.net.impl.ServerID,io.vertx.core.eventbus.EventBusOptions)> ==> <io.vertx.core.net.impl.NetClientImpl: void <clinit>()>
CLINIT edge: staticinvoke <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: void setCertOptions(io.vertx.core.net.TCPSSLOptions,io.vertx.core.net.KeyCertOptions)>($r5, $r9) in <io.vertx.core.eventbus.impl.clustered.ConnectionHolder: void <init>(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus,io.vertx.core.net.impl.ServerID,io.vertx.core.eventbus.EventBusOptions)> ==> <io.vertx.core.eventbus.impl.EventBusImpl: void <clinit>()>
STATIC edge: $r5 = staticinvoke <io.vertx.core.eventbus.impl.clustered.ConnectionHolder$lambda_connect_0__137: io.vertx.core.Handler bootstrap$(io.vertx.core.eventbus.impl.clustered.ConnectionHolder)>(r0) in <io.vertx.core.eventbus.impl.clustered.ConnectionHolder: void connect()> ==> <io.vertx.core.eventbus.impl.clustered.ConnectionHolder$lambda_connect_0__137: io.vertx.core.Handler bootstrap$(io.vertx.core.eventbus.impl.clustered.ConnectionHolder)>
CLINIT edge: $r3 = <io.vertx.core.eventbus.impl.clustered.ConnectionHolder: io.vertx.core.logging.Logger log> in <io.vertx.core.eventbus.impl.clustered.ConnectionHolder: void writeMessage(io.vertx.core.eventbus.impl.clustered.ClusteredMessage)> ==> <io.vertx.core.eventbus.impl.clustered.ConnectionHolder: void <clinit>()>
CLINIT edge: $r0 = staticinvoke <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/net/impl/NetClientImpl;") in <io.vertx.core.net.impl.NetClientImpl: void <clinit>()> ==> <io.vertx.core.logging.LoggerFactory: void <clinit>()>
STATIC edge: $r0 = staticinvoke <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/net/impl/NetClientImpl;") in <io.vertx.core.net.impl.NetClientImpl: void <clinit>()> ==> <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.Class)>
CLINIT edge: <io.vertx.core.net.impl.NetClientImpl: io.vertx.core.logging.Logger log> = $r0 in <io.vertx.core.net.impl.NetClientImpl: void <clinit>()> ==> <io.vertx.core.net.impl.NetClientImpl: void <clinit>()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>() in <io.vertx.core.net.impl.ConnectionBase: io.netty.channel.Channel channel()> ==> <io.vertx.core.net.impl.PartialPooledByteBufAllocator$PooledChannelHandlerContext: io.netty.channel.Channel channel()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>() in <io.vertx.core.net.impl.ConnectionBase: io.netty.channel.Channel channel()> ==> <io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>
VIRTUAL edge: virtualinvoke r1.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>($r3) in <io.vertx.core.net.impl.KeyStoreHelper: javax.net.ssl.TrustManagerFactory getTrustMgrFactory(io.vertx.core.impl.VertxInternal)> ==> <javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>
SPECIAL edge: specialinvoke r0.<javax.net.ssl.TrustManagerFactorySpi: void <init>()>() in <io.vertx.core.net.impl.VertxTrustManagerFactory$2: void <init>(javax.net.ssl.TrustManager[])> ==> <javax.net.ssl.TrustManagerFactorySpi: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.TrustOptions$getTrustMgr__129: void <init>(io.vertx.core.net.impl.KeyStoreHelper)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.impl.KeyStoreHelper$readFileBlocking__131: void <init>(io.vertx.core.file.FileSystem)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.impl.KeyStoreHelper$lambda_create_2__130: void <init>(io.vertx.core.impl.VertxInternal)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.impl.KeyStoreHelper$iterator__132: void <init>(java.util.stream.Stream)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<io.vertx.core.net.impl.KeyStoreHelper: javax.net.ssl.KeyManagerFactory getKeyMgrFactory()>() in <io.vertx.core.net.KeyCertOptions: javax.net.ssl.KeyManagerFactory getKeyManagerFactory(io.vertx.core.Vertx)> ==> <io.vertx.core.net.impl.KeyStoreHelper: javax.net.ssl.KeyManagerFactory getKeyMgrFactory()>
STATIC edge: $r0 = staticinvoke <javax.net.ssl.KeyManagerFactory: java.lang.String getDefaultAlgorithm()>() in <io.vertx.core.net.impl.KeyStoreHelper: javax.net.ssl.KeyManagerFactory getKeyMgrFactory()> ==> <javax.net.ssl.KeyManagerFactory: java.lang.String getDefaultAlgorithm()>
STATIC edge: r1 = staticinvoke <javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String)>($r0) in <io.vertx.core.net.impl.KeyStoreHelper: javax.net.ssl.KeyManagerFactory getKeyMgrFactory()> ==> <javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.shareddata.impl.LocalMapImpl$lambda_typeChecked_2__133: void <init>(java.util.function.Function)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.impl.KeyStoreHelper$1: void <init>(io.vertx.core.net.impl.KeyStoreHelper,java.util.List,java.security.PrivateKey)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<io.vertx.core.file.impl.FileSystemImpl$16: void <init>(io.vertx.core.file.impl.FileSystemImpl,io.vertx.core.Handler,java.lang.String)>(r3, r4, r0) in <io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction readFileInternal(java.lang.String,io.vertx.core.Handler)> ==> <io.vertx.core.file.impl.FileSystemImpl$16: void <init>(io.vertx.core.file.impl.FileSystemImpl,io.vertx.core.Handler,java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.impl.KeyStoreHelper$lambda_new_3__134: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean equalsIgnoreCase(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void <init>(io.vertx.core.impl.VertxImpl,long,io.vertx.core.Handler,boolean,long,io.vertx.core.impl.ContextImpl)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r13.<java.util.concurrent.atomic.AtomicBoolean: void <init>()>() in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void <init>(io.vertx.core.impl.VertxImpl,long,io.vertx.core.Handler,boolean,long,io.vertx.core.impl.ContextImpl)> ==> <java.util.concurrent.atomic.AtomicBoolean: void <init>()>
VIRTUAL edge: r5 = virtualinvoke r2.<io.vertx.core.impl.ContextImpl: io.netty.channel.EventLoop nettyEventLoop()>() in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void <init>(io.vertx.core.impl.VertxImpl,long,io.vertx.core.Handler,boolean,long,io.vertx.core.impl.ContextImpl)> ==> <io.vertx.core.impl.ContextImpl: io.netty.channel.EventLoop nettyEventLoop()>
VIRTUAL edge: r5 = virtualinvoke r2.<io.vertx.core.impl.ContextImpl: io.netty.channel.EventLoop nettyEventLoop()>() in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void <init>(io.vertx.core.impl.VertxImpl,long,io.vertx.core.Handler,boolean,long,io.vertx.core.impl.ContextImpl)> ==> <io.vertx.core.impl.EventLoopContext: io.netty.channel.EventLoop nettyEventLoop()>
INTERFACE edge: interfaceinvoke $r10.<io.vertx.core.spi.metrics.VertxMetrics: void timerCreated(long)>(l0) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler: void <init>(io.vertx.core.impl.VertxImpl,long,io.vertx.core.Handler,boolean,long,io.vertx.core.impl.ContextImpl)> ==> <io.vertx.core.spi.metrics.VertxMetrics: void timerCreated(long)>
SPECIAL edge: specialinvoke $r2.<io.vertx.core.impl.VertxImpl$InternalTimerHandler$lambda_new_0__136: void <init>(io.vertx.core.impl.VertxImpl$InternalTimerHandler,io.vertx.core.impl.ContextImpl)>($r0, $r1) in <io.vertx.core.impl.VertxImpl$InternalTimerHandler$lambda_new_0__136: java.lang.Runnable bootstrap$(io.vertx.core.impl.VertxImpl$InternalTimerHandler,io.vertx.core.impl.ContextImpl)> ==> <io.vertx.core.impl.VertxImpl$InternalTimerHandler$lambda_new_0__136: void <init>(io.vertx.core.impl.VertxImpl$InternalTimerHandler,io.vertx.core.impl.ContextImpl)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.eventbus.impl.HandlerHolder: void <init>(io.vertx.core.spi.metrics.EventBusMetrics,io.vertx.core.eventbus.impl.HandlerRegistration,boolean,boolean,io.vertx.core.Context)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.impl.utils.ConcurrentCyclicSequence: void <init>(int,java.lang.Object[])>(0, $r1) in <io.vertx.core.impl.utils.ConcurrentCyclicSequence: void <init>()> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: void <init>(int,java.lang.Object[])>
VIRTUAL edge: $i2 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicInteger: int get()>() in <io.vertx.core.impl.utils.ConcurrentCyclicSequence: io.vertx.core.impl.utils.ConcurrentCyclicSequence add(java.lang.Object)> ==> <java.util.concurrent.atomic.AtomicInteger: int get()>
SPECIAL edge: specialinvoke $r5.<io.vertx.core.impl.utils.ConcurrentCyclicSequence: void <init>(int,java.lang.Object[])>($i2, r3) in <io.vertx.core.impl.utils.ConcurrentCyclicSequence: io.vertx.core.impl.utils.ConcurrentCyclicSequence add(java.lang.Object)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: void <init>(int,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.eventbus.impl.EventBusImpl$LocalRegistrationResult: void <init>(io.vertx.core.eventbus.impl.HandlerHolder,boolean)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.eventbus.impl.EventBusImpl$lambda_addLocalRegistration_1__135: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.eventbus.ReplyException: void <init>(io.vertx.core.eventbus.ReplyFailure,int,java.lang.String)>(r1, -1, r2) in <io.vertx.core.eventbus.ReplyException: void <init>(io.vertx.core.eventbus.ReplyFailure,java.lang.String)> ==> <io.vertx.core.eventbus.ReplyException: void <init>(io.vertx.core.eventbus.ReplyFailure,int,java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.eventbus.impl.clustered.ConnectionHolder: void <init>(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus,io.vertx.core.net.impl.ServerID,io.vertx.core.eventbus.EventBusOptions)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke r1.<io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: io.vertx.core.impl.VertxInternal vertx()>() in <io.vertx.core.eventbus.impl.clustered.ConnectionHolder: void <init>(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus,io.vertx.core.net.impl.ServerID,io.vertx.core.eventbus.EventBusOptions)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: io.vertx.core.impl.VertxInternal vertx()>
VIRTUAL edge: $r4 = virtualinvoke r1.<io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: io.vertx.core.spi.metrics.EventBusMetrics getMetrics()>() in <io.vertx.core.eventbus.impl.clustered.ConnectionHolder: void <init>(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus,io.vertx.core.net.impl.ServerID,io.vertx.core.eventbus.EventBusOptions)> ==> <io.vertx.core.eventbus.impl.EventBusImpl: io.vertx.core.spi.metrics.EventBusMetrics getMetrics()>
VIRTUAL edge: $r12 = virtualinvoke r1.<io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: io.vertx.core.impl.VertxInternal vertx()>() in <io.vertx.core.eventbus.impl.clustered.ConnectionHolder: void <init>(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus,io.vertx.core.net.impl.ServerID,io.vertx.core.eventbus.EventBusOptions)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredEventBus: io.vertx.core.impl.VertxInternal vertx()>
VIRTUAL edge: $r7 = virtualinvoke r6.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.json.JsonObject toJson()>() in <io.vertx.core.eventbus.impl.clustered.ConnectionHolder: void <init>(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus,io.vertx.core.net.impl.ServerID,io.vertx.core.eventbus.EventBusOptions)> ==> <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.json.JsonObject toJson()>
VIRTUAL edge: $r9 = virtualinvoke r6.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.KeyCertOptions getKeyCertOptions()>() in <io.vertx.core.eventbus.impl.clustered.ConnectionHolder: void <init>(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus,io.vertx.core.net.impl.ServerID,io.vertx.core.eventbus.EventBusOptions)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.KeyCertOptions getKeyCertOptions()>
VIRTUAL edge: $r10 = virtualinvoke r6.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.net.TrustOptions getTrustOptions()>() in <io.vertx.core.eventbus.impl.clustered.ConnectionHolder: void <init>(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus,io.vertx.core.net.impl.ServerID,io.vertx.core.eventbus.EventBusOptions)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TrustOptions getTrustOptions()>
SPECIAL edge: specialinvoke $r5.<io.vertx.core.net.NetClientOptions: void <init>(io.vertx.core.json.JsonObject)>($r7) in <io.vertx.core.eventbus.impl.clustered.ConnectionHolder: void <init>(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus,io.vertx.core.net.impl.ServerID,io.vertx.core.eventbus.EventBusOptions)> ==> <io.vertx.core.net.NetClientOptions: void <init>(io.vertx.core.json.JsonObject)>
SPECIAL edge: specialinvoke $r11.<io.vertx.core.net.impl.NetClientImpl: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.net.NetClientOptions,boolean)>($r12, $r5, 0) in <io.vertx.core.eventbus.impl.clustered.ConnectionHolder: void <init>(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus,io.vertx.core.net.impl.ServerID,io.vertx.core.eventbus.EventBusOptions)> ==> <io.vertx.core.net.impl.NetClientImpl: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.net.NetClientOptions,boolean)>
STATIC edge: staticinvoke <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)>(r1, r0) in <io.vertx.core.net.NetClientOptions: void <init>(io.vertx.core.json.JsonObject)> ==> <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)>
FINALIZE edge: null in <io.vertx.core.net.impl.NetClientImpl: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.net.NetClientOptions,boolean)> ==> <io.vertx.core.net.impl.NetClientImpl: void finalize()>
STATIC edge: $r8 = staticinvoke <io.vertx.core.net.impl.NetClientImpl$lambda_new_0__138: io.vertx.core.Closeable bootstrap$(io.vertx.core.net.impl.NetClientImpl)>(r0) in <io.vertx.core.net.impl.NetClientImpl: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.net.NetClientOptions,boolean)> ==> <io.vertx.core.net.impl.NetClientImpl$lambda_new_0__138: io.vertx.core.Closeable bootstrap$(io.vertx.core.net.impl.NetClientImpl)>
CLINIT edge: $r5 = new io.vertx.core.net.impl.SSLHelper in <io.vertx.core.net.impl.NetClientImpl: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.net.NetClientOptions,boolean)> ==> <io.vertx.core.net.impl.SSLHelper: void <clinit>()>
SPECIAL edge: specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Already connected") in <io.vertx.core.eventbus.impl.clustered.ConnectionHolder: void connect()> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.net.NetClient: io.vertx.core.net.NetClient connect(int,java.lang.String,io.vertx.core.Handler)>($i0, $r4, $r5) in <io.vertx.core.eventbus.impl.clustered.ConnectionHolder: void connect()> ==> <io.vertx.core.net.impl.NetClientImpl: io.vertx.core.net.NetClient connect(int,java.lang.String,io.vertx.core.Handler)>
VIRTUAL edge: r12 = virtualinvoke r2.<io.vertx.core.eventbus.impl.clustered.ClusteredMessage: io.vertx.core.buffer.Buffer encodeToWire()>() in <io.vertx.core.eventbus.impl.clustered.ConnectionHolder: void writeMessage(io.vertx.core.eventbus.impl.clustered.ClusteredMessage)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: io.vertx.core.buffer.Buffer encodeToWire()>
VIRTUAL edge: $r17 = virtualinvoke r2.<io.vertx.core.eventbus.impl.clustered.ClusteredMessage: java.lang.String address()>() in <io.vertx.core.eventbus.impl.clustered.ConnectionHolder: void writeMessage(io.vertx.core.eventbus.impl.clustered.ClusteredMessage)> ==> <io.vertx.core.eventbus.impl.MessageImpl: java.lang.String address()>
INTERFACE edge: $i0 = interfaceinvoke r12.<io.vertx.core.buffer.Buffer: int length()>() in <io.vertx.core.eventbus.impl.clustered.ConnectionHolder: void writeMessage(io.vertx.core.eventbus.impl.clustered.ClusteredMessage)> ==> <io.vertx.core.buffer.impl.BufferImpl: int length()>
INTERFACE edge: interfaceinvoke $r16.<io.vertx.core.spi.metrics.EventBusMetrics: void messageWritten(java.lang.String,int)>($r17, $i0) in <io.vertx.core.eventbus.impl.clustered.ConnectionHolder: void writeMessage(io.vertx.core.eventbus.impl.clustered.ClusteredMessage)> ==> <io.vertx.core.spi.metrics.EventBusMetrics: void messageWritten(java.lang.String,int)>
INTERFACE edge: interfaceinvoke $r14.<io.vertx.core.net.NetSocket: io.vertx.core.net.NetSocket write(io.vertx.core.buffer.Buffer)>(r12) in <io.vertx.core.eventbus.impl.clustered.ConnectionHolder: void writeMessage(io.vertx.core.eventbus.impl.clustered.ClusteredMessage)> ==> <io.vertx.core.net.impl.NetSocketImpl: io.vertx.core.net.NetSocket write(io.vertx.core.buffer.Buffer)>
INTERFACE edge: interfaceinvoke $r14.<io.vertx.core.net.NetSocket: io.vertx.core.net.NetSocket write(io.vertx.core.buffer.Buffer)>(r12) in <io.vertx.core.eventbus.impl.clustered.ConnectionHolder: void writeMessage(io.vertx.core.eventbus.impl.clustered.ClusteredMessage)> ==> <io.vertx.core.http.impl.VertxHttp2NetSocket: io.vertx.core.net.NetSocket write(io.vertx.core.buffer.Buffer)>
VIRTUAL edge: $z2 = virtualinvoke $r3.<io.vertx.core.logging.Logger: boolean isDebugEnabled()>() in <io.vertx.core.eventbus.impl.clustered.ConnectionHolder: void writeMessage(io.vertx.core.eventbus.impl.clustered.ClusteredMessage)> ==> <io.vertx.core.logging.Logger: boolean isDebugEnabled()>
SPECIAL edge: specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.eventbus.impl.clustered.ConnectionHolder: void writeMessage(io.vertx.core.eventbus.impl.clustered.ClusteredMessage)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not connected to server ") in <io.vertx.core.eventbus.impl.clustered.ConnectionHolder: void writeMessage(io.vertx.core.eventbus.impl.clustered.ClusteredMessage)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8) in <io.vertx.core.eventbus.impl.clustered.ConnectionHolder: void writeMessage(io.vertx.core.eventbus.impl.clustered.ClusteredMessage)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - starting queuing") in <io.vertx.core.eventbus.impl.clustered.ConnectionHolder: void writeMessage(io.vertx.core.eventbus.impl.clustered.ClusteredMessage)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.eventbus.impl.clustered.ConnectionHolder: void writeMessage(io.vertx.core.eventbus.impl.clustered.ClusteredMessage)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r6.<io.vertx.core.logging.Logger: void debug(java.lang.Object)>($r11) in <io.vertx.core.eventbus.impl.clustered.ConnectionHolder: void writeMessage(io.vertx.core.eventbus.impl.clustered.ClusteredMessage)> ==> <io.vertx.core.logging.Logger: void debug(java.lang.Object)>
SPECIAL edge: specialinvoke $r4.<java.util.ArrayDeque: void <init>()>() in <io.vertx.core.eventbus.impl.clustered.ConnectionHolder: void writeMessage(io.vertx.core.eventbus.impl.clustered.ClusteredMessage)> ==> <java.util.ArrayDeque: void <init>()>
INTERFACE edge: interfaceinvoke $r18.<java.util.Queue: boolean add(java.lang.Object)>(r2) in <io.vertx.core.eventbus.impl.clustered.ConnectionHolder: void writeMessage(io.vertx.core.eventbus.impl.clustered.ClusteredMessage)> ==> <java.util.ArrayDeque: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r18.<java.util.Queue: boolean add(java.lang.Object)>(r2) in <io.vertx.core.eventbus.impl.clustered.ConnectionHolder: void writeMessage(io.vertx.core.eventbus.impl.clustered.ClusteredMessage)> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r18.<java.util.Queue: boolean add(java.lang.Object)>(r2) in <io.vertx.core.eventbus.impl.clustered.ConnectionHolder: void writeMessage(io.vertx.core.eventbus.impl.clustered.ClusteredMessage)> ==> <java.util.concurrent.ConcurrentLinkedQueue: boolean add(java.lang.Object)>
CLINIT edge: r0 = staticinvoke <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer(int)>(1024) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: io.vertx.core.buffer.Buffer encodeToWire()> ==> <io.vertx.core.buffer.Buffer: void <clinit>()>
STATIC edge: r0 = staticinvoke <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer(int)>(1024) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: io.vertx.core.buffer.Buffer encodeToWire()> ==> <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer(int)>
CLINIT edge: $r0 = <io.vertx.core.buffer.Buffer: io.vertx.core.spi.BufferFactory factory> in <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer(int)> ==> <io.vertx.core.buffer.Buffer: void <clinit>()>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.eventbus.impl.clustered.ConnectionHolder$lambda_connect_0__137: void <init>(io.vertx.core.eventbus.impl.clustered.ConnectionHolder)>($r0) in <io.vertx.core.eventbus.impl.clustered.ConnectionHolder$lambda_connect_0__137: io.vertx.core.Handler bootstrap$(io.vertx.core.eventbus.impl.clustered.ConnectionHolder)> ==> <io.vertx.core.eventbus.impl.clustered.ConnectionHolder$lambda_connect_0__137: void <init>(io.vertx.core.eventbus.impl.clustered.ConnectionHolder)>
VIRTUAL edge: $r7 = virtualinvoke $r5.<java.lang.String: char[] toCharArray()>() in <io.vertx.core.net.impl.KeyStoreHelper: javax.net.ssl.KeyManagerFactory getKeyMgrFactory()> ==> <java.lang.String: char[] toCharArray()>
VIRTUAL edge: virtualinvoke r1.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>($r4, $r7) in <io.vertx.core.net.impl.KeyStoreHelper: javax.net.ssl.KeyManagerFactory getKeyMgrFactory()> ==> <javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>
SPECIAL edge: specialinvoke r0.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void <init>(io.vertx.core.file.impl.FileSystemImpl,io.vertx.core.Handler)>(r1, r3) in <io.vertx.core.file.impl.FileSystemImpl$16: void <init>(io.vertx.core.file.impl.FileSystemImpl,io.vertx.core.Handler,java.lang.String)> ==> <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void <init>(io.vertx.core.file.impl.FileSystemImpl,io.vertx.core.Handler)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.impl.VertxImpl$InternalTimerHandler$lambda_new_0__136: void <init>(io.vertx.core.impl.VertxImpl$InternalTimerHandler,io.vertx.core.impl.ContextImpl)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.impl.utils.ConcurrentCyclicSequence: void <init>(int,java.lang.Object[])> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(i0) in <io.vertx.core.impl.utils.ConcurrentCyclicSequence: void <init>(int,java.lang.Object[])> ==> <java.util.concurrent.atomic.AtomicInteger: void <init>(int)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.VertxException: void <init>(java.lang.String)>(r1) in <io.vertx.core.eventbus.ReplyException: void <init>(io.vertx.core.eventbus.ReplyFailure,int,java.lang.String)> ==> <io.vertx.core.VertxException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.ClientOptionsBase: void <init>(io.vertx.core.json.JsonObject)>(r1) in <io.vertx.core.net.NetClientOptions: void <init>(io.vertx.core.json.JsonObject)> ==> <io.vertx.core.net.ClientOptionsBase: void <init>(io.vertx.core.json.JsonObject)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.NetClientOptions: void init()>() in <io.vertx.core.net.NetClientOptions: void <init>(io.vertx.core.json.JsonObject)> ==> <io.vertx.core.net.NetClientOptions: void init()>
STATIC edge: staticinvoke <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)>(r1, r0) in <io.vertx.core.net.ClientOptionsBase: void <init>(io.vertx.core.json.JsonObject)> ==> <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)>
CLINIT edge: $r12 = new io.vertx.core.net.ProxyOptions in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.net.ProxyOptions: void <clinit>()>
CLINIT edge: $r0 = <io.vertx.core.net.ProxyType: io.vertx.core.net.ProxyType HTTP> in <io.vertx.core.net.ProxyOptions: void <clinit>()> ==> <io.vertx.core.net.ProxyType: void <clinit>()>
CLINIT edge: <io.vertx.core.net.ProxyOptions: io.vertx.core.net.ProxyType DEFAULT_TYPE> = $r0 in <io.vertx.core.net.ProxyOptions: void <clinit>()> ==> <io.vertx.core.net.ProxyOptions: void <clinit>()>
CLINIT edge: $r0 = new io.vertx.core.net.ProxyType in <io.vertx.core.net.ProxyType: void <clinit>()> ==> <io.vertx.core.net.ProxyType: void <clinit>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.impl.NetClientImpl: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.net.NetClientOptions,boolean)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>() in <io.vertx.core.net.impl.NetClientImpl: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.net.NetClientOptions,boolean)> ==> <java.util.concurrent.ConcurrentHashMap: void <init>()>
SPECIAL edge: specialinvoke $r3.<io.vertx.core.net.NetClientOptions: void <init>(io.vertx.core.net.NetClientOptions)>(r4) in <io.vertx.core.net.impl.NetClientImpl: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.net.NetClientOptions,boolean)> ==> <io.vertx.core.net.NetClientOptions: void <init>(io.vertx.core.net.NetClientOptions)>
VIRTUAL edge: $r6 = virtualinvoke r4.<io.vertx.core.net.NetClientOptions: io.vertx.core.net.KeyCertOptions getKeyCertOptions()>() in <io.vertx.core.net.impl.NetClientImpl: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.net.NetClientOptions,boolean)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.KeyCertOptions getKeyCertOptions()>
VIRTUAL edge: $r7 = virtualinvoke r4.<io.vertx.core.net.NetClientOptions: io.vertx.core.net.TrustOptions getTrustOptions()>() in <io.vertx.core.net.impl.NetClientImpl: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.net.NetClientOptions,boolean)> ==> <io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TrustOptions getTrustOptions()>
VIRTUAL edge: $z1 = virtualinvoke r4.<io.vertx.core.net.NetClientOptions: boolean getLogActivity()>() in <io.vertx.core.net.impl.NetClientImpl: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.net.NetClientOptions,boolean)> ==> <io.vertx.core.net.NetworkOptions: boolean getLogActivity()>
VIRTUAL edge: $i0 = virtualinvoke r4.<io.vertx.core.net.NetClientOptions: int getIdleTimeout()>() in <io.vertx.core.net.impl.NetClientImpl: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.net.NetClientOptions,boolean)> ==> <io.vertx.core.net.TCPSSLOptions: int getIdleTimeout()>
VIRTUAL edge: $r10 = virtualinvoke r4.<io.vertx.core.net.NetClientOptions: java.util.concurrent.TimeUnit getIdleTimeoutUnit()>() in <io.vertx.core.net.impl.NetClientImpl: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.net.NetClientOptions,boolean)> ==> <io.vertx.core.net.TCPSSLOptions: java.util.concurrent.TimeUnit getIdleTimeoutUnit()>
SPECIAL edge: specialinvoke $r5.<io.vertx.core.net.impl.SSLHelper: void <init>(io.vertx.core.net.NetClientOptions,io.vertx.core.net.KeyCertOptions,io.vertx.core.net.TrustOptions)>(r4, $r6, $r7) in <io.vertx.core.net.impl.NetClientImpl: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.net.NetClientOptions,boolean)> ==> <io.vertx.core.net.impl.SSLHelper: void <init>(io.vertx.core.net.NetClientOptions,io.vertx.core.net.KeyCertOptions,io.vertx.core.net.TrustOptions)>
INTERFACE edge: $r12 = interfaceinvoke r2.<io.vertx.core.impl.VertxInternal: io.vertx.core.impl.ContextInternal getContext()>() in <io.vertx.core.net.impl.NetClientImpl: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.net.NetClientOptions,boolean)> ==> <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.ContextInternal getContext()>
INTERFACE edge: r9 = interfaceinvoke r2.<io.vertx.core.impl.VertxInternal: io.vertx.core.spi.metrics.VertxMetrics metricsSPI()>() in <io.vertx.core.net.impl.NetClientImpl: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.net.NetClientOptions,boolean)> ==> <io.vertx.core.impl.VertxImpl: io.vertx.core.spi.metrics.VertxMetrics metricsSPI()>
INTERFACE edge: $z2 = interfaceinvoke $r14.<io.vertx.core.impl.ContextInternal: boolean isMultiThreadedWorkerContext()>() in <io.vertx.core.net.impl.NetClientImpl: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.net.NetClientOptions,boolean)> ==> <io.vertx.core.impl.WorkerContext: boolean isMultiThreadedWorkerContext()>
INTERFACE edge: $z2 = interfaceinvoke $r14.<io.vertx.core.impl.ContextInternal: boolean isMultiThreadedWorkerContext()>() in <io.vertx.core.net.impl.NetClientImpl: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.net.NetClientOptions,boolean)> ==> <io.vertx.core.impl.EventLoopContext: boolean isMultiThreadedWorkerContext()>
INTERFACE edge: $z2 = interfaceinvoke $r14.<io.vertx.core.impl.ContextInternal: boolean isMultiThreadedWorkerContext()>() in <io.vertx.core.net.impl.NetClientImpl: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.net.NetClientOptions,boolean)> ==> <io.vertx.core.impl.MultiThreadedWorkerContext: boolean isMultiThreadedWorkerContext()>
SPECIAL edge: specialinvoke $r17.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot use NetClient in a multi-threaded worker verticle") in <io.vertx.core.net.impl.NetClientImpl: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.net.NetClientOptions,boolean)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
INTERFACE edge: interfaceinvoke $r16.<io.vertx.core.impl.ContextInternal: void addCloseHook(io.vertx.core.Closeable)>($r15) in <io.vertx.core.net.impl.NetClientImpl: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.net.NetClientOptions,boolean)> ==> <io.vertx.core.impl.ContextImpl: void addCloseHook(io.vertx.core.Closeable)>
INTERFACE edge: interfaceinvoke $r16.<io.vertx.core.impl.ContextInternal: void addCloseHook(io.vertx.core.Closeable)>($r15) in <io.vertx.core.net.impl.NetClientImpl: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.net.NetClientOptions,boolean)> ==> <io.vertx.core.impl.EventLoopContext: void addCloseHook(io.vertx.core.Closeable)>
INTERFACE edge: $r18 = interfaceinvoke r9.<io.vertx.core.spi.metrics.VertxMetrics: io.vertx.core.spi.metrics.TCPMetrics createNetClientMetrics(io.vertx.core.net.NetClientOptions)>(r4) in <io.vertx.core.net.impl.NetClientImpl: void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.net.NetClientOptions,boolean)> ==> <io.vertx.core.spi.metrics.VertxMetrics: io.vertx.core.spi.metrics.TCPMetrics createNetClientMetrics(io.vertx.core.net.NetClientOptions)>
CLINIT edge: $r1 = <io.vertx.core.http.ClientAuth: io.vertx.core.http.ClientAuth NONE> in <io.vertx.core.net.impl.SSLHelper: void <init>(io.vertx.core.net.NetClientOptions,io.vertx.core.net.KeyCertOptions,io.vertx.core.net.TrustOptions)> ==> <io.vertx.core.http.ClientAuth: void <clinit>()>
STATIC edge: r4 = staticinvoke <io.vertx.core.net.impl.SSLHelper: io.vertx.core.net.SSLEngineOptions resolveEngineOptions(io.vertx.core.net.TCPSSLOptions)>(r3) in <io.vertx.core.net.impl.SSLHelper: void <init>(io.vertx.core.net.NetClientOptions,io.vertx.core.net.KeyCertOptions,io.vertx.core.net.TrustOptions)> ==> <io.vertx.core.net.impl.SSLHelper: io.vertx.core.net.SSLEngineOptions resolveEngineOptions(io.vertx.core.net.TCPSSLOptions)>
CLINIT edge: r4 = staticinvoke <io.vertx.core.net.impl.SSLHelper: io.vertx.core.net.SSLEngineOptions resolveEngineOptions(io.vertx.core.net.TCPSSLOptions)>(r3) in <io.vertx.core.net.impl.SSLHelper: void <init>(io.vertx.core.net.NetClientOptions,io.vertx.core.net.KeyCertOptions,io.vertx.core.net.TrustOptions)> ==> <io.vertx.core.net.impl.SSLHelper: void <clinit>()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <io.vertx.core.http.impl.HeadersAdaptor: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <io.vertx.core.impl.ConcurrentHashSet: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <java.util.ServiceLoader: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <io.vertx.core.json.JsonArray: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <java.util.AbstractList: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <io.vertx.core.json.JsonObject: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$1: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <java.util.concurrent.ConcurrentLinkedQueue: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <io.vertx.core.json.JsonArray$Iter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <io.vertx.core.json.JsonObject$Iter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <java.util.Scanner: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: boolean hasNext()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <io.vertx.core.json.JsonArray$Iter: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <io.vertx.core.json.JsonObject$Iter: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <java.util.Scanner: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: java.lang.Object next()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getKey()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getKey()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getKey()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getKey()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getKey()>
INTERFACE edge: $r15 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r15 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r15 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r15 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r15 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r15 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r16 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r16 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r16 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r16 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r16 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r16 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r11 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r11 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r11 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r11 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r11 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r11 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r12 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r12 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r12 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r12 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r12 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r12 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
VIRTUAL edge: $i0 = virtualinvoke r5.<java.lang.String: int hashCode()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <java.lang.String: int hashCode()>
VIRTUAL edge: $z6 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("hostnameVerificationAlgorithm") in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z5 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("reconnectAttempts") in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("reconnectInterval") in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setHostnameVerificationAlgorithm(java.lang.String)>($r17) in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setHostnameVerificationAlgorithm(java.lang.String)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setReconnectAttempts(int)>($i2) in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setReconnectAttempts(int)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setReconnectInterval(long)>($l1) in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setReconnectInterval(long)>
VIRTUAL edge: $i2 = virtualinvoke $r13.<java.lang.Number: int intValue()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <java.util.concurrent.atomic.AtomicLong: int intValue()>
VIRTUAL edge: $i2 = virtualinvoke $r13.<java.lang.Number: int intValue()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <java.lang.Float: int intValue()>
VIRTUAL edge: $i2 = virtualinvoke $r13.<java.lang.Number: int intValue()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <java.math.BigDecimal: int intValue()>
VIRTUAL edge: $i2 = virtualinvoke $r13.<java.lang.Number: int intValue()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <java.lang.Double: int intValue()>
VIRTUAL edge: $i2 = virtualinvoke $r13.<java.lang.Number: int intValue()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <java.lang.Long: int intValue()>
VIRTUAL edge: $i2 = virtualinvoke $r13.<java.lang.Number: int intValue()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <java.util.concurrent.atomic.AtomicInteger: int intValue()>
VIRTUAL edge: $i2 = virtualinvoke $r13.<java.lang.Number: int intValue()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <java.lang.Short: int intValue()>
VIRTUAL edge: $i2 = virtualinvoke $r13.<java.lang.Number: int intValue()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <java.math.BigInteger: int intValue()>
VIRTUAL edge: $i2 = virtualinvoke $r13.<java.lang.Number: int intValue()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <java.lang.Byte: int intValue()>
VIRTUAL edge: $i2 = virtualinvoke $r13.<java.lang.Number: int intValue()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <java.lang.Integer: int intValue()>
VIRTUAL edge: $l1 = virtualinvoke $r9.<java.lang.Number: long longValue()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <java.util.concurrent.atomic.AtomicLong: long longValue()>
VIRTUAL edge: $l1 = virtualinvoke $r9.<java.lang.Number: long longValue()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <java.lang.Float: long longValue()>
VIRTUAL edge: $l1 = virtualinvoke $r9.<java.lang.Number: long longValue()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <java.math.BigDecimal: long longValue()>
VIRTUAL edge: $l1 = virtualinvoke $r9.<java.lang.Number: long longValue()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <java.lang.Double: long longValue()>
VIRTUAL edge: $l1 = virtualinvoke $r9.<java.lang.Number: long longValue()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <java.lang.Long: long longValue()>
VIRTUAL edge: $l1 = virtualinvoke $r9.<java.lang.Number: long longValue()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <java.util.concurrent.atomic.AtomicInteger: long longValue()>
VIRTUAL edge: $l1 = virtualinvoke $r9.<java.lang.Number: long longValue()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <java.lang.Short: long longValue()>
VIRTUAL edge: $l1 = virtualinvoke $r9.<java.lang.Number: long longValue()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <java.math.BigInteger: long longValue()>
VIRTUAL edge: $l1 = virtualinvoke $r9.<java.lang.Number: long longValue()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <java.lang.Byte: long longValue()>
VIRTUAL edge: $l1 = virtualinvoke $r9.<java.lang.Number: long longValue()>() in <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)> ==> <java.lang.Integer: long longValue()>
STATIC edge: staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r0, "hostnameVerificationAlgorithm can not be null!") in <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setHostnameVerificationAlgorithm(java.lang.String)> ==> <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.net.impl.NetClientImpl: void close()>() in <io.vertx.core.net.impl.NetClientImpl: void finalize()> ==> <io.vertx.core.net.impl.NetClientImpl: void close()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void finalize()>() in <io.vertx.core.net.impl.NetClientImpl: void finalize()> ==> <java.lang.Object: void finalize()>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.net.impl.NetClientImpl$lambda_new_0__138: void <init>(io.vertx.core.net.impl.NetClientImpl)>($r0) in <io.vertx.core.net.impl.NetClientImpl$lambda_new_0__138: io.vertx.core.Closeable bootstrap$(io.vertx.core.net.impl.NetClientImpl)> ==> <io.vertx.core.net.impl.NetClientImpl$lambda_new_0__138: void <init>(io.vertx.core.net.impl.NetClientImpl)>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.net.impl.NetClientImpl: io.vertx.core.net.NetClient connect(int,java.lang.String,java.lang.String,io.vertx.core.Handler)>(i0, r1, null, r2) in <io.vertx.core.net.impl.NetClientImpl: io.vertx.core.net.NetClient connect(int,java.lang.String,io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.NetClientImpl: io.vertx.core.net.NetClient connect(int,java.lang.String,java.lang.String,io.vertx.core.Handler)>
STATIC edge: $r2 = staticinvoke <io.vertx.core.net.SocketAddress: io.vertx.core.net.SocketAddress inetSocketAddress(int,java.lang.String)>(i0, r1) in <io.vertx.core.net.impl.NetClientImpl: io.vertx.core.net.NetClient connect(int,java.lang.String,java.lang.String,io.vertx.core.Handler)> ==> <io.vertx.core.net.SocketAddress: io.vertx.core.net.SocketAddress inetSocketAddress(int,java.lang.String)>
STATIC edge: $r7 = staticinvoke <io.vertx.core.net.impl.NetClientImpl$lambda_connect_2__139: io.vertx.core.Handler bootstrap$(io.vertx.core.Handler)>(r4) in <io.vertx.core.net.impl.NetClientImpl: io.vertx.core.net.NetClient connect(int,java.lang.String,java.lang.String,io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.NetClientImpl$lambda_connect_2__139: io.vertx.core.Handler bootstrap$(io.vertx.core.Handler)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer appendInt(int)>(0) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: io.vertx.core.buffer.Buffer encodeToWire()> ==> <io.vertx.core.buffer.impl.BufferImpl: io.vertx.core.buffer.Buffer appendInt(int)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer appendByte(byte)>(1) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: io.vertx.core.buffer.Buffer encodeToWire()> ==> <io.vertx.core.buffer.impl.BufferImpl: io.vertx.core.buffer.Buffer appendByte(byte)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer appendByte(byte)>(b1) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: io.vertx.core.buffer.Buffer encodeToWire()> ==> <io.vertx.core.buffer.impl.BufferImpl: io.vertx.core.buffer.Buffer appendByte(byte)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer appendByte(byte)>($b5) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: io.vertx.core.buffer.Buffer encodeToWire()> ==> <io.vertx.core.buffer.impl.BufferImpl: io.vertx.core.buffer.Buffer appendByte(byte)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer appendInt(int)>(0) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: io.vertx.core.buffer.Buffer encodeToWire()> ==> <io.vertx.core.buffer.impl.BufferImpl: io.vertx.core.buffer.Buffer appendInt(int)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer appendInt(int)>($i2) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: io.vertx.core.buffer.Buffer encodeToWire()> ==> <io.vertx.core.buffer.impl.BufferImpl: io.vertx.core.buffer.Buffer appendInt(int)>
INTERFACE edge: $i3 = interfaceinvoke r0.<io.vertx.core.buffer.Buffer: int length()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: io.vertx.core.buffer.Buffer encodeToWire()> ==> <io.vertx.core.buffer.impl.BufferImpl: int length()>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer setInt(int,int)>(0, $i4) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: io.vertx.core.buffer.Buffer encodeToWire()> ==> <io.vertx.core.buffer.impl.BufferImpl: io.vertx.core.buffer.Buffer setInt(int,int)>
INTERFACE edge: b1 = interfaceinvoke $r4.<io.vertx.core.eventbus.MessageCodec: byte systemCodecID()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: io.vertx.core.buffer.Buffer encodeToWire()> ==> <io.vertx.core.eventbus.impl.codecs.PingMessageCodec: byte systemCodecID()>
INTERFACE edge: b1 = interfaceinvoke $r4.<io.vertx.core.eventbus.MessageCodec: byte systemCodecID()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: io.vertx.core.buffer.Buffer encodeToWire()> ==> <io.vertx.core.eventbus.impl.codecs.IntMessageCodec: byte systemCodecID()>
INTERFACE edge: b1 = interfaceinvoke $r4.<io.vertx.core.eventbus.MessageCodec: byte systemCodecID()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: io.vertx.core.buffer.Buffer encodeToWire()> ==> <io.vertx.core.eventbus.impl.codecs.ShortMessageCodec: byte systemCodecID()>
INTERFACE edge: b1 = interfaceinvoke $r4.<io.vertx.core.eventbus.MessageCodec: byte systemCodecID()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: io.vertx.core.buffer.Buffer encodeToWire()> ==> <io.vertx.core.eventbus.impl.codecs.ByteArrayMessageCodec: byte systemCodecID()>
INTERFACE edge: b1 = interfaceinvoke $r4.<io.vertx.core.eventbus.MessageCodec: byte systemCodecID()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: io.vertx.core.buffer.Buffer encodeToWire()> ==> <io.vertx.core.eventbus.impl.codecs.NullMessageCodec: byte systemCodecID()>
INTERFACE edge: b1 = interfaceinvoke $r4.<io.vertx.core.eventbus.MessageCodec: byte systemCodecID()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: io.vertx.core.buffer.Buffer encodeToWire()> ==> <io.vertx.core.eventbus.impl.codecs.StringMessageCodec: byte systemCodecID()>
INTERFACE edge: b1 = interfaceinvoke $r4.<io.vertx.core.eventbus.MessageCodec: byte systemCodecID()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: io.vertx.core.buffer.Buffer encodeToWire()> ==> <io.vertx.core.eventbus.impl.codecs.JsonObjectMessageCodec: byte systemCodecID()>
INTERFACE edge: b1 = interfaceinvoke $r4.<io.vertx.core.eventbus.MessageCodec: byte systemCodecID()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: io.vertx.core.buffer.Buffer encodeToWire()> ==> <io.vertx.core.eventbus.impl.codecs.ReplyExceptionMessageCodec: byte systemCodecID()>
INTERFACE edge: b1 = interfaceinvoke $r4.<io.vertx.core.eventbus.MessageCodec: byte systemCodecID()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: io.vertx.core.buffer.Buffer encodeToWire()> ==> <io.vertx.core.eventbus.impl.codecs.JsonArrayMessageCodec: byte systemCodecID()>
INTERFACE edge: b1 = interfaceinvoke $r4.<io.vertx.core.eventbus.MessageCodec: byte systemCodecID()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: io.vertx.core.buffer.Buffer encodeToWire()> ==> <io.vertx.core.eventbus.impl.codecs.BufferMessageCodec: byte systemCodecID()>
INTERFACE edge: b1 = interfaceinvoke $r4.<io.vertx.core.eventbus.MessageCodec: byte systemCodecID()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: io.vertx.core.buffer.Buffer encodeToWire()> ==> <io.vertx.core.eventbus.impl.codecs.DoubleMessageCodec: byte systemCodecID()>
INTERFACE edge: b1 = interfaceinvoke $r4.<io.vertx.core.eventbus.MessageCodec: byte systemCodecID()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: io.vertx.core.buffer.Buffer encodeToWire()> ==> <io.vertx.core.eventbus.impl.codecs.FloatMessageCodec: byte systemCodecID()>
INTERFACE edge: b1 = interfaceinvoke $r4.<io.vertx.core.eventbus.MessageCodec: byte systemCodecID()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: io.vertx.core.buffer.Buffer encodeToWire()> ==> <io.vertx.core.eventbus.impl.codecs.BooleanMessageCodec: byte systemCodecID()>
INTERFACE edge: b1 = interfaceinvoke $r4.<io.vertx.core.eventbus.MessageCodec: byte systemCodecID()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: io.vertx.core.buffer.Buffer encodeToWire()> ==> <io.vertx.core.eventbus.impl.codecs.CharMessageCodec: byte systemCodecID()>
INTERFACE edge: b1 = interfaceinvoke $r4.<io.vertx.core.eventbus.MessageCodec: byte systemCodecID()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: io.vertx.core.buffer.Buffer encodeToWire()> ==> <io.vertx.core.eventbus.impl.codecs.ByteMessageCodec: byte systemCodecID()>
INTERFACE edge: b1 = interfaceinvoke $r4.<io.vertx.core.eventbus.MessageCodec: byte systemCodecID()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: io.vertx.core.buffer.Buffer encodeToWire()> ==> <io.vertx.core.eventbus.impl.codecs.LongMessageCodec: byte systemCodecID()>
INTERFACE edge: $r18 = interfaceinvoke $r17.<io.vertx.core.eventbus.MessageCodec: java.lang.String name()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: io.vertx.core.buffer.Buffer encodeToWire()> ==> <io.vertx.core.eventbus.impl.codecs.PingMessageCodec: java.lang.String name()>
INTERFACE edge: $r18 = interfaceinvoke $r17.<io.vertx.core.eventbus.MessageCodec: java.lang.String name()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: io.vertx.core.buffer.Buffer encodeToWire()> ==> <io.vertx.core.eventbus.impl.codecs.IntMessageCodec: java.lang.String name()>
INTERFACE edge: $r18 = interfaceinvoke $r17.<io.vertx.core.eventbus.MessageCodec: java.lang.String name()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: io.vertx.core.buffer.Buffer encodeToWire()> ==> <io.vertx.core.eventbus.impl.codecs.ShortMessageCodec: java.lang.String name()>
INTERFACE edge: $r18 = interfaceinvoke $r17.<io.vertx.core.eventbus.MessageCodec: java.lang.String name()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: io.vertx.core.buffer.Buffer encodeToWire()> ==> <io.vertx.core.eventbus.impl.codecs.ByteArrayMessageCodec: java.lang.String name()>
INTERFACE edge: $r18 = interfaceinvoke $r17.<io.vertx.core.eventbus.MessageCodec: java.lang.String name()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: io.vertx.core.buffer.Buffer encodeToWire()> ==> <io.vertx.core.eventbus.impl.codecs.NullMessageCodec: java.lang.String name()>
INTERFACE edge: $r18 = interfaceinvoke $r17.<io.vertx.core.eventbus.MessageCodec: java.lang.String name()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: io.vertx.core.buffer.Buffer encodeToWire()> ==> <io.vertx.core.eventbus.impl.codecs.StringMessageCodec: java.lang.String name()>
INTERFACE edge: $r18 = interfaceinvoke $r17.<io.vertx.core.eventbus.MessageCodec: java.lang.String name()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: io.vertx.core.buffer.Buffer encodeToWire()> ==> <io.vertx.core.eventbus.impl.codecs.JsonObjectMessageCodec: java.lang.String name()>
INTERFACE edge: $r18 = interfaceinvoke $r17.<io.vertx.core.eventbus.MessageCodec: java.lang.String name()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: io.vertx.core.buffer.Buffer encodeToWire()> ==> <io.vertx.core.eventbus.impl.codecs.ReplyExceptionMessageCodec: java.lang.String name()>
INTERFACE edge: $r18 = interfaceinvoke $r17.<io.vertx.core.eventbus.MessageCodec: java.lang.String name()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: io.vertx.core.buffer.Buffer encodeToWire()> ==> <io.vertx.core.eventbus.impl.codecs.JsonArrayMessageCodec: java.lang.String name()>
INTERFACE edge: $r18 = interfaceinvoke $r17.<io.vertx.core.eventbus.MessageCodec: java.lang.String name()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: io.vertx.core.buffer.Buffer encodeToWire()> ==> <io.vertx.core.eventbus.impl.codecs.BufferMessageCodec: java.lang.String name()>
INTERFACE edge: $r18 = interfaceinvoke $r17.<io.vertx.core.eventbus.MessageCodec: java.lang.String name()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: io.vertx.core.buffer.Buffer encodeToWire()> ==> <io.vertx.core.eventbus.impl.codecs.DoubleMessageCodec: java.lang.String name()>
INTERFACE edge: $r18 = interfaceinvoke $r17.<io.vertx.core.eventbus.MessageCodec: java.lang.String name()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: io.vertx.core.buffer.Buffer encodeToWire()> ==> <io.vertx.core.eventbus.impl.codecs.FloatMessageCodec: java.lang.String name()>
INTERFACE edge: $r18 = interfaceinvoke $r17.<io.vertx.core.eventbus.MessageCodec: java.lang.String name()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: io.vertx.core.buffer.Buffer encodeToWire()> ==> <io.vertx.core.eventbus.impl.codecs.BooleanMessageCodec: java.lang.String name()>
INTERFACE edge: $r18 = interfaceinvoke $r17.<io.vertx.core.eventbus.MessageCodec: java.lang.String name()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: io.vertx.core.buffer.Buffer encodeToWire()> ==> <io.vertx.core.eventbus.impl.codecs.CharMessageCodec: java.lang.String name()>
INTERFACE edge: $r18 = interfaceinvoke $r17.<io.vertx.core.eventbus.MessageCodec: java.lang.String name()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: io.vertx.core.buffer.Buffer encodeToWire()> ==> <io.vertx.core.eventbus.impl.codecs.ByteMessageCodec: java.lang.String name()>
INTERFACE edge: $r18 = interfaceinvoke $r17.<io.vertx.core.eventbus.MessageCodec: java.lang.String name()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: io.vertx.core.buffer.Buffer encodeToWire()> ==> <io.vertx.core.eventbus.impl.codecs.LongMessageCodec: java.lang.String name()>
SPECIAL edge: specialinvoke r3.<io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void writeString(io.vertx.core.buffer.Buffer,java.lang.String)>(r0, $r18) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: io.vertx.core.buffer.Buffer encodeToWire()> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void writeString(io.vertx.core.buffer.Buffer,java.lang.String)>
SPECIAL edge: specialinvoke r3.<io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void writeString(io.vertx.core.buffer.Buffer,java.lang.String)>(r0, $r7) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: io.vertx.core.buffer.Buffer encodeToWire()> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void writeString(io.vertx.core.buffer.Buffer,java.lang.String)>
SPECIAL edge: specialinvoke r3.<io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void writeString(io.vertx.core.buffer.Buffer,java.lang.String)>(r0, $r15) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: io.vertx.core.buffer.Buffer encodeToWire()> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void writeString(io.vertx.core.buffer.Buffer,java.lang.String)>
SPECIAL edge: specialinvoke r3.<io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void writeString(io.vertx.core.buffer.Buffer,java.lang.String)>(r0, $r13) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: io.vertx.core.buffer.Buffer encodeToWire()> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void writeString(io.vertx.core.buffer.Buffer,java.lang.String)>
SPECIAL edge: specialinvoke r3.<io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void encodeHeaders(io.vertx.core.buffer.Buffer)>(r0) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: io.vertx.core.buffer.Buffer encodeToWire()> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void encodeHeaders(io.vertx.core.buffer.Buffer)>
SPECIAL edge: specialinvoke r3.<io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void writeBody(io.vertx.core.buffer.Buffer)>(r0) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: io.vertx.core.buffer.Buffer encodeToWire()> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void writeBody(io.vertx.core.buffer.Buffer)>
INTERFACE edge: $r1 = interfaceinvoke $r0.<io.vertx.core.spi.BufferFactory: io.vertx.core.buffer.Buffer buffer(int)>(i0) in <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer(int)> ==> <io.vertx.core.buffer.impl.BufferFactoryImpl: io.vertx.core.buffer.Buffer buffer(int)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.eventbus.impl.clustered.ConnectionHolder$lambda_connect_0__137: void <init>(io.vertx.core.eventbus.impl.clustered.ConnectionHolder)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void <init>(io.vertx.core.file.impl.FileSystemImpl,io.vertx.core.Handler)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<io.vertx.core.impl.VertxInternal: io.vertx.core.impl.ContextInternal getOrCreateContext()>() in <io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void <init>(io.vertx.core.file.impl.FileSystemImpl,io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.ContextInternal getOrCreateContext()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: void <init>(io.vertx.core.json.JsonObject)>(r1) in <io.vertx.core.net.ClientOptionsBase: void <init>(io.vertx.core.json.JsonObject)> ==> <io.vertx.core.net.TCPSSLOptions: void <init>(io.vertx.core.json.JsonObject)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.ClientOptionsBase: void init()>() in <io.vertx.core.net.ClientOptionsBase: void <init>(io.vertx.core.json.JsonObject)> ==> <io.vertx.core.net.ClientOptionsBase: void init()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.http.impl.HeadersAdaptor: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.impl.ConcurrentHashSet: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <java.util.ServiceLoader: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.json.JsonArray: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <java.util.AbstractList: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.json.JsonObject: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$1: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.http.CaseInsensitiveHeaders: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <java.util.concurrent.ConcurrentLinkedQueue: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.json.JsonArray$Iter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.json.JsonObject$Iter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <java.util.Scanner: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: boolean hasNext()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.json.JsonArray$Iter: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.json.JsonObject$Iter: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <java.util.Scanner: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: java.lang.Object next()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getKey()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getKey()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getKey()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getKey()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getKey()>
INTERFACE edge: $r24 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r24 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r24 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r24 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r24 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r24 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r25 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r25 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r25 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r25 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r25 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r25 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r20 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r20 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r20 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r20 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r20 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r20 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r21 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r21 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r21 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r21 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r21 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r21 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r16 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r16 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r16 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r16 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r16 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r16 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r17 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r17 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r17 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r17 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r17 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r17 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r11 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r11 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r11 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r11 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r11 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r11 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r13 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r13 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r13 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r13 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r13 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r13 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
VIRTUAL edge: $i0 = virtualinvoke r5.<java.lang.String: int hashCode()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <java.lang.String: int hashCode()>
VIRTUAL edge: $z10 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("connectTimeout") in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z8 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("localAddress") in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z11 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("metricsName") in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z9 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("proxyOptions") in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("trustAll") in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke $r26.<java.lang.Number: int intValue()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <java.util.concurrent.atomic.AtomicLong: int intValue()>
VIRTUAL edge: $i1 = virtualinvoke $r26.<java.lang.Number: int intValue()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <java.lang.Float: int intValue()>
VIRTUAL edge: $i1 = virtualinvoke $r26.<java.lang.Number: int intValue()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <java.math.BigDecimal: int intValue()>
VIRTUAL edge: $i1 = virtualinvoke $r26.<java.lang.Number: int intValue()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <java.lang.Double: int intValue()>
VIRTUAL edge: $i1 = virtualinvoke $r26.<java.lang.Number: int intValue()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <java.lang.Long: int intValue()>
VIRTUAL edge: $i1 = virtualinvoke $r26.<java.lang.Number: int intValue()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <java.util.concurrent.atomic.AtomicInteger: int intValue()>
VIRTUAL edge: $i1 = virtualinvoke $r26.<java.lang.Number: int intValue()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <java.lang.Short: int intValue()>
VIRTUAL edge: $i1 = virtualinvoke $r26.<java.lang.Number: int intValue()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <java.math.BigInteger: int intValue()>
VIRTUAL edge: $i1 = virtualinvoke $r26.<java.lang.Number: int intValue()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <java.lang.Byte: int intValue()>
VIRTUAL edge: $i1 = virtualinvoke $r26.<java.lang.Number: int intValue()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <java.lang.Integer: int intValue()>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setConnectTimeout(int)>($i1) in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setConnectTimeout(int)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setConnectTimeout(int)>($i1) in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.ClientOptionsBase setConnectTimeout(int)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setConnectTimeout(int)>($i1) in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.ClientOptionsBase setConnectTimeout(int)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setLocalAddress(java.lang.String)>($r22) in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setLocalAddress(java.lang.String)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setLocalAddress(java.lang.String)>($r22) in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.ClientOptionsBase setLocalAddress(java.lang.String)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setLocalAddress(java.lang.String)>($r22) in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.ClientOptionsBase setLocalAddress(java.lang.String)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setMetricsName(java.lang.String)>($r18) in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setMetricsName(java.lang.String)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setMetricsName(java.lang.String)>($r18) in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.ClientOptionsBase setMetricsName(java.lang.String)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setMetricsName(java.lang.String)>($r18) in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.ClientOptionsBase setMetricsName(java.lang.String)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setProxyOptions(io.vertx.core.net.ProxyOptions)>($r12) in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setProxyOptions(io.vertx.core.net.ProxyOptions)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setProxyOptions(io.vertx.core.net.ProxyOptions)>($r12) in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.ClientOptionsBase setProxyOptions(io.vertx.core.net.ProxyOptions)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setProxyOptions(io.vertx.core.net.ProxyOptions)>($r12) in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.ClientOptionsBase setProxyOptions(io.vertx.core.net.ProxyOptions)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setTrustAll(boolean)>($z3) in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setTrustAll(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setTrustAll(boolean)>($z3) in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.ClientOptionsBase setTrustAll(boolean)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setTrustAll(boolean)>($z3) in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.ClientOptionsBase setTrustAll(boolean)>
SPECIAL edge: specialinvoke $r12.<io.vertx.core.net.ProxyOptions: void <init>(io.vertx.core.json.JsonObject)>($r14) in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.net.ProxyOptions: void <init>(io.vertx.core.json.JsonObject)>
VIRTUAL edge: $z3 = virtualinvoke $r9.<java.lang.Boolean: boolean booleanValue()>() in <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)> ==> <java.lang.Boolean: boolean booleanValue()>
STATIC edge: staticinvoke <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)>(r1, r0) in <io.vertx.core.net.ProxyOptions: void <init>(io.vertx.core.json.JsonObject)> ==> <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)>
CLINIT edge: $r14 = staticinvoke <io.vertx.core.net.ProxyType: io.vertx.core.net.ProxyType valueOf(java.lang.String)>($r13) in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.net.ProxyType: void <clinit>()>
STATIC edge: $r14 = staticinvoke <io.vertx.core.net.ProxyType: io.vertx.core.net.ProxyType valueOf(java.lang.String)>($r13) in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.net.ProxyType: io.vertx.core.net.ProxyType valueOf(java.lang.String)>
STATIC edge: $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lio/vertx/core/net/ProxyType;", r0) in <io.vertx.core.net.ProxyType: io.vertx.core.net.ProxyType valueOf(java.lang.String)> ==> <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.net.ProxyType: void <init>(java.lang.String,int)>("HTTP", 0) in <io.vertx.core.net.ProxyType: void <clinit>()> ==> <io.vertx.core.net.ProxyType: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.net.ProxyType: void <init>(java.lang.String,int)>("SOCKS4", 1) in <io.vertx.core.net.ProxyType: void <clinit>()> ==> <io.vertx.core.net.ProxyType: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r2.<io.vertx.core.net.ProxyType: void <init>(java.lang.String,int)>("SOCKS5", 2) in <io.vertx.core.net.ProxyType: void <clinit>()> ==> <io.vertx.core.net.ProxyType: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.ClientOptionsBase: void <init>(io.vertx.core.net.ClientOptionsBase)>(r1) in <io.vertx.core.net.NetClientOptions: void <init>(io.vertx.core.net.NetClientOptions)> ==> <io.vertx.core.net.ClientOptionsBase: void <init>(io.vertx.core.net.ClientOptionsBase)>
VIRTUAL edge: $i0 = virtualinvoke r1.<io.vertx.core.net.NetClientOptions: int getReconnectAttempts()>() in <io.vertx.core.net.NetClientOptions: void <init>(io.vertx.core.net.NetClientOptions)> ==> <io.vertx.core.net.NetClientOptions: int getReconnectAttempts()>
VIRTUAL edge: $l1 = virtualinvoke r1.<io.vertx.core.net.NetClientOptions: long getReconnectInterval()>() in <io.vertx.core.net.NetClientOptions: void <init>(io.vertx.core.net.NetClientOptions)> ==> <io.vertx.core.net.NetClientOptions: long getReconnectInterval()>
VIRTUAL edge: $r2 = virtualinvoke r1.<io.vertx.core.net.NetClientOptions: java.lang.String getHostnameVerificationAlgorithm()>() in <io.vertx.core.net.NetClientOptions: void <init>(io.vertx.core.net.NetClientOptions)> ==> <io.vertx.core.net.NetClientOptions: java.lang.String getHostnameVerificationAlgorithm()>
CLINIT edge: $r7 = new io.vertx.core.net.ProxyOptions in <io.vertx.core.net.ClientOptionsBase: void <init>(io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.net.ProxyOptions: void <clinit>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.impl.SSLHelper: void <init>(io.vertx.core.net.NetClientOptions,io.vertx.core.net.KeyCertOptions,io.vertx.core.net.TrustOptions)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.util.concurrent.ConcurrentHashMap: void <init>()>() in <io.vertx.core.net.impl.SSLHelper: void <init>(io.vertx.core.net.NetClientOptions,io.vertx.core.net.KeyCertOptions,io.vertx.core.net.TrustOptions)> ==> <java.util.concurrent.ConcurrentHashMap: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke r3.<io.vertx.core.net.NetClientOptions: boolean isSsl()>() in <io.vertx.core.net.impl.SSLHelper: void <init>(io.vertx.core.net.NetClientOptions,io.vertx.core.net.KeyCertOptions,io.vertx.core.net.TrustOptions)> ==> <io.vertx.core.net.TCPSSLOptions: boolean isSsl()>
VIRTUAL edge: $z1 = virtualinvoke r3.<io.vertx.core.net.NetClientOptions: boolean isTrustAll()>() in <io.vertx.core.net.impl.SSLHelper: void <init>(io.vertx.core.net.NetClientOptions,io.vertx.core.net.KeyCertOptions,io.vertx.core.net.TrustOptions)> ==> <io.vertx.core.net.ClientOptionsBase: boolean isTrustAll()>
VIRTUAL edge: $r8 = virtualinvoke r3.<io.vertx.core.net.NetClientOptions: java.util.List getCrlPaths()>() in <io.vertx.core.net.impl.SSLHelper: void <init>(io.vertx.core.net.NetClientOptions,io.vertx.core.net.KeyCertOptions,io.vertx.core.net.TrustOptions)> ==> <io.vertx.core.net.TCPSSLOptions: java.util.List getCrlPaths()>
VIRTUAL edge: $r10 = virtualinvoke r3.<io.vertx.core.net.NetClientOptions: java.util.List getCrlValues()>() in <io.vertx.core.net.impl.SSLHelper: void <init>(io.vertx.core.net.NetClientOptions,io.vertx.core.net.KeyCertOptions,io.vertx.core.net.TrustOptions)> ==> <io.vertx.core.net.TCPSSLOptions: java.util.List getCrlValues()>
VIRTUAL edge: $r11 = virtualinvoke r3.<io.vertx.core.net.NetClientOptions: java.util.Set getEnabledCipherSuites()>() in <io.vertx.core.net.impl.SSLHelper: void <init>(io.vertx.core.net.NetClientOptions,io.vertx.core.net.KeyCertOptions,io.vertx.core.net.TrustOptions)> ==> <io.vertx.core.net.TCPSSLOptions: java.util.Set getEnabledCipherSuites()>
VIRTUAL edge: $r12 = virtualinvoke r3.<io.vertx.core.net.NetClientOptions: java.util.Set getEnabledSecureTransportProtocols()>() in <io.vertx.core.net.impl.SSLHelper: void <init>(io.vertx.core.net.NetClientOptions,io.vertx.core.net.KeyCertOptions,io.vertx.core.net.TrustOptions)> ==> <io.vertx.core.net.TCPSSLOptions: java.util.Set getEnabledSecureTransportProtocols()>
VIRTUAL edge: $r13 = virtualinvoke r3.<io.vertx.core.net.NetClientOptions: java.lang.String getHostnameVerificationAlgorithm()>() in <io.vertx.core.net.impl.SSLHelper: void <init>(io.vertx.core.net.NetClientOptions,io.vertx.core.net.KeyCertOptions,io.vertx.core.net.TrustOptions)> ==> <io.vertx.core.net.NetClientOptions: java.lang.String getHostnameVerificationAlgorithm()>
SPECIAL edge: specialinvoke $r7.<java.util.ArrayList: void <init>(java.util.Collection)>($r8) in <io.vertx.core.net.impl.SSLHelper: void <init>(io.vertx.core.net.NetClientOptions,io.vertx.core.net.KeyCertOptions,io.vertx.core.net.TrustOptions)> ==> <java.util.ArrayList: void <init>(java.util.Collection)>
SPECIAL edge: specialinvoke $r9.<java.util.ArrayList: void <init>(java.util.Collection)>($r10) in <io.vertx.core.net.impl.SSLHelper: void <init>(io.vertx.core.net.NetClientOptions,io.vertx.core.net.KeyCertOptions,io.vertx.core.net.TrustOptions)> ==> <java.util.ArrayList: void <init>(java.util.Collection)>
VIRTUAL edge: $z4 = virtualinvoke $r14.<io.vertx.core.net.OpenSSLEngineOptions: boolean isSessionCacheEnabled()>() in <io.vertx.core.net.impl.SSLHelper: void <init>(io.vertx.core.net.NetClientOptions,io.vertx.core.net.KeyCertOptions,io.vertx.core.net.TrustOptions)> ==> <io.vertx.core.net.OpenSSLEngineOptions: boolean isSessionCacheEnabled()>
SPECIAL edge: specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("reconnect attempts must be >= -1") in <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setReconnectAttempts(int)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("reconnect interval must be >= 1") in <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setReconnectInterval(long)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>() in <io.vertx.core.net.impl.NetClientImpl: void close()> ==> <java.util.HashMap: java.util.Collection values()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>() in <io.vertx.core.net.impl.NetClientImpl: void close()> ==> <java.util.IdentityHashMap: java.util.Collection values()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>() in <io.vertx.core.net.impl.NetClientImpl: void close()> ==> <java.util.Hashtable: java.util.Collection values()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>() in <io.vertx.core.net.impl.NetClientImpl: void close()> ==> <java.util.EnumMap: java.util.Collection values()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>() in <io.vertx.core.net.impl.NetClientImpl: void close()> ==> <java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>() in <io.vertx.core.net.impl.NetClientImpl: void close()> ==> <java.security.Provider: java.util.Collection values()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>() in <io.vertx.core.net.impl.NetClientImpl: void close()> ==> <java.util.jar.Attributes: java.util.Collection values()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>() in <io.vertx.core.net.impl.NetClientImpl: void close()> ==> <java.util.AbstractMap: java.util.Collection values()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>() in <io.vertx.core.net.impl.NetClientImpl: void close()> ==> <io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Collection values()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>() in <io.vertx.core.net.impl.NetClientImpl: void close()> ==> <java.util.WeakHashMap: java.util.Collection values()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.NetClientImpl: void close()> ==> <io.vertx.core.impl.ConcurrentHashSet: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.NetClientImpl: void close()> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.NetClientImpl: void close()> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.NetClientImpl: void close()> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.NetClientImpl: void close()> ==> <java.util.AbstractList: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.NetClientImpl: void close()> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.NetClientImpl: void close()> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$1: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.NetClientImpl: void close()> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.NetClientImpl: void close()> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.NetClientImpl: void close()> ==> <java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>() in <io.vertx.core.net.impl.NetClientImpl: void close()> ==> <java.util.concurrent.ConcurrentLinkedQueue: java.util.Iterator iterator()>
INTERFACE edge: $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.NetClientImpl: void close()> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.NetClientImpl: void close()> ==> <io.vertx.core.json.JsonArray$Iter: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.NetClientImpl: void close()> ==> <io.vertx.core.json.JsonObject$Iter: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.NetClientImpl: void close()> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.NetClientImpl: void close()> ==> <java.util.Scanner: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.NetClientImpl: void close()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.impl.NetClientImpl: void close()> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: boolean hasNext()>
INTERFACE edge: $r9 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.NetClientImpl: void close()> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object next()>
INTERFACE edge: $r9 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.NetClientImpl: void close()> ==> <io.vertx.core.json.JsonArray$Iter: java.lang.Object next()>
INTERFACE edge: $r9 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.NetClientImpl: void close()> ==> <io.vertx.core.json.JsonObject$Iter: java.lang.Object next()>
INTERFACE edge: $r9 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.NetClientImpl: void close()> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: java.lang.Object next()>
INTERFACE edge: $r9 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.NetClientImpl: void close()> ==> <java.util.Scanner: java.lang.Object next()>
INTERFACE edge: $r9 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.NetClientImpl: void close()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: java.lang.Object next()>
INTERFACE edge: $r9 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.impl.NetClientImpl: void close()> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: java.lang.Object next()>
VIRTUAL edge: virtualinvoke r10.<io.vertx.core.net.impl.NetSocketImpl: void close()>() in <io.vertx.core.net.impl.NetClientImpl: void close()> ==> <io.vertx.core.net.impl.NetSocketImpl: void close()>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.impl.ContextInternal: void removeCloseHook(io.vertx.core.Closeable)>($r7) in <io.vertx.core.net.impl.NetClientImpl: void close()> ==> <io.vertx.core.impl.ContextImpl: void removeCloseHook(io.vertx.core.Closeable)>
INTERFACE edge: interfaceinvoke $r8.<io.vertx.core.impl.ContextInternal: void removeCloseHook(io.vertx.core.Closeable)>($r7) in <io.vertx.core.net.impl.NetClientImpl: void close()> ==> <io.vertx.core.impl.EventLoopContext: void removeCloseHook(io.vertx.core.Closeable)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.impl.NetClientImpl$lambda_new_0__138: void <init>(io.vertx.core.net.impl.NetClientImpl)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.net.impl.NetClientImpl: void doConnect(io.vertx.core.net.SocketAddress,java.lang.String,io.vertx.core.Handler)>($r2, r3, $r7) in <io.vertx.core.net.impl.NetClientImpl: io.vertx.core.net.NetClient connect(int,java.lang.String,java.lang.String,io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.NetClientImpl: void doConnect(io.vertx.core.net.SocketAddress,java.lang.String,io.vertx.core.Handler)>
SPECIAL edge: specialinvoke $r1.<io.vertx.core.net.impl.NetClientImpl$lambda_connect_2__139: void <init>(io.vertx.core.Handler)>($r0) in <io.vertx.core.net.impl.NetClientImpl$lambda_connect_2__139: io.vertx.core.Handler bootstrap$(io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.NetClientImpl$lambda_connect_2__139: void <init>(io.vertx.core.Handler)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.buffer.impl.BufferImpl: void ensureWritable(int,int)>(i0, 4) in <io.vertx.core.buffer.impl.BufferImpl: io.vertx.core.buffer.Buffer setInt(int,int)> ==> <io.vertx.core.buffer.impl.BufferImpl: void ensureWritable(int,int)>
VIRTUAL edge: r2 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r1) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void writeString(io.vertx.core.buffer.Buffer,java.lang.String)> ==> <java.lang.String: byte[] getBytes(java.nio.charset.Charset)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer appendInt(int)>($i0) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void writeString(io.vertx.core.buffer.Buffer,java.lang.String)> ==> <io.vertx.core.buffer.impl.BufferImpl: io.vertx.core.buffer.Buffer appendInt(int)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer appendBytes(byte[])>(r2) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void writeString(io.vertx.core.buffer.Buffer,java.lang.String)> ==> <io.vertx.core.buffer.impl.BufferImpl: io.vertx.core.buffer.Buffer appendBytes(byte[])>
INTERFACE edge: $z0 = interfaceinvoke $r4.<io.vertx.core.MultiMap: boolean isEmpty()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void encodeHeaders(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.http.impl.HeadersAdaptor: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke $r4.<io.vertx.core.MultiMap: boolean isEmpty()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void encodeHeaders(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke $r4.<io.vertx.core.MultiMap: boolean isEmpty()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void encodeHeaders(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke $r4.<io.vertx.core.MultiMap: boolean isEmpty()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void encodeHeaders(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.http.CaseInsensitiveHeaders: boolean isEmpty()>
INTERFACE edge: i0 = interfaceinvoke r2.<io.vertx.core.buffer.Buffer: int length()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void encodeHeaders(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.buffer.impl.BufferImpl: int length()>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer appendInt(int)>(0) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void encodeHeaders(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.buffer.impl.BufferImpl: io.vertx.core.buffer.Buffer appendInt(int)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer appendInt(int)>($i1) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void encodeHeaders(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.buffer.impl.BufferImpl: io.vertx.core.buffer.Buffer appendInt(int)>
INTERFACE edge: i3 = interfaceinvoke r2.<io.vertx.core.buffer.Buffer: int length()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void encodeHeaders(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.buffer.impl.BufferImpl: int length()>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer setInt(int,int)>(i0, $i2) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void encodeHeaders(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.buffer.impl.BufferImpl: io.vertx.core.buffer.Buffer setInt(int,int)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer appendInt(int)>(4) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void encodeHeaders(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.buffer.impl.BufferImpl: io.vertx.core.buffer.Buffer appendInt(int)>
INTERFACE edge: $i1 = interfaceinvoke $r6.<io.vertx.core.MultiMap: int size()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void encodeHeaders(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.http.impl.HeadersAdaptor: int size()>
INTERFACE edge: $i1 = interfaceinvoke $r6.<io.vertx.core.MultiMap: int size()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void encodeHeaders(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor: int size()>
INTERFACE edge: $i1 = interfaceinvoke $r6.<io.vertx.core.MultiMap: int size()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void encodeHeaders(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders: int size()>
INTERFACE edge: $i1 = interfaceinvoke $r6.<io.vertx.core.MultiMap: int size()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void encodeHeaders(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.http.CaseInsensitiveHeaders: int size()>
INTERFACE edge: r9 = interfaceinvoke $r8.<io.vertx.core.MultiMap: java.util.List entries()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void encodeHeaders(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.http.impl.HeadersAdaptor: java.util.List entries()>
INTERFACE edge: r9 = interfaceinvoke $r8.<io.vertx.core.MultiMap: java.util.List entries()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void encodeHeaders(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor: java.util.List entries()>
INTERFACE edge: r9 = interfaceinvoke $r8.<io.vertx.core.MultiMap: java.util.List entries()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void encodeHeaders(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders: java.util.List entries()>
INTERFACE edge: r9 = interfaceinvoke $r8.<io.vertx.core.MultiMap: java.util.List entries()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void encodeHeaders(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.http.CaseInsensitiveHeaders: java.util.List entries()>
INTERFACE edge: r17 = interfaceinvoke r9.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void encodeHeaders(io.vertx.core.buffer.Buffer)> ==> <java.util.AbstractList: java.util.Iterator iterator()>
INTERFACE edge: r17 = interfaceinvoke r9.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void encodeHeaders(io.vertx.core.buffer.Buffer)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r17 = interfaceinvoke r9.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void encodeHeaders(io.vertx.core.buffer.Buffer)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
INTERFACE edge: r17 = interfaceinvoke r9.<java.util.List: java.util.Iterator iterator()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void encodeHeaders(io.vertx.core.buffer.Buffer)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z1 = interfaceinvoke r17.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void encodeHeaders(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r17.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void encodeHeaders(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.json.JsonArray$Iter: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r17.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void encodeHeaders(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.json.JsonObject$Iter: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r17.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void encodeHeaders(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r17.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void encodeHeaders(io.vertx.core.buffer.Buffer)> ==> <java.util.Scanner: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r17.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void encodeHeaders(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r17.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void encodeHeaders(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: boolean hasNext()>
INTERFACE edge: $r11 = interfaceinvoke r17.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void encodeHeaders(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object next()>
INTERFACE edge: $r11 = interfaceinvoke r17.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void encodeHeaders(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.json.JsonArray$Iter: java.lang.Object next()>
INTERFACE edge: $r11 = interfaceinvoke r17.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void encodeHeaders(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.json.JsonObject$Iter: java.lang.Object next()>
INTERFACE edge: $r11 = interfaceinvoke r17.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void encodeHeaders(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: java.lang.Object next()>
INTERFACE edge: $r11 = interfaceinvoke r17.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void encodeHeaders(io.vertx.core.buffer.Buffer)> ==> <java.util.Scanner: java.lang.Object next()>
INTERFACE edge: $r11 = interfaceinvoke r17.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void encodeHeaders(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: java.lang.Object next()>
INTERFACE edge: $r11 = interfaceinvoke r17.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void encodeHeaders(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: java.lang.Object next()>
INTERFACE edge: $r13 = interfaceinvoke r12.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void encodeHeaders(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getKey()>
INTERFACE edge: $r13 = interfaceinvoke r12.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void encodeHeaders(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getKey()>
INTERFACE edge: $r13 = interfaceinvoke r12.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void encodeHeaders(io.vertx.core.buffer.Buffer)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>
INTERFACE edge: $r13 = interfaceinvoke r12.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void encodeHeaders(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getKey()>
INTERFACE edge: $r13 = interfaceinvoke r12.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void encodeHeaders(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getKey()>
INTERFACE edge: $r13 = interfaceinvoke r12.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void encodeHeaders(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getKey()>
INTERFACE edge: $r15 = interfaceinvoke r12.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void encodeHeaders(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r15 = interfaceinvoke r12.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void encodeHeaders(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r15 = interfaceinvoke r12.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void encodeHeaders(io.vertx.core.buffer.Buffer)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r15 = interfaceinvoke r12.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void encodeHeaders(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r15 = interfaceinvoke r12.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void encodeHeaders(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r15 = interfaceinvoke r12.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void encodeHeaders(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void writeString(io.vertx.core.buffer.Buffer,java.lang.String)>(r2, $r14) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void encodeHeaders(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void writeString(io.vertx.core.buffer.Buffer,java.lang.String)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void writeString(io.vertx.core.buffer.Buffer,java.lang.String)>(r2, $r16) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void encodeHeaders(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void writeString(io.vertx.core.buffer.Buffer,java.lang.String)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.eventbus.MessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Object)>(r1, $r2) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void writeBody(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.eventbus.impl.codecs.PingMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.eventbus.MessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Object)>(r1, $r2) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void writeBody(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.eventbus.impl.codecs.IntMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.eventbus.MessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Object)>(r1, $r2) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void writeBody(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.eventbus.impl.codecs.ShortMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.eventbus.MessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Object)>(r1, $r2) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void writeBody(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.eventbus.impl.codecs.ByteArrayMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.eventbus.MessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Object)>(r1, $r2) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void writeBody(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.eventbus.impl.codecs.NullMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.eventbus.MessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Object)>(r1, $r2) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void writeBody(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.eventbus.impl.codecs.StringMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.eventbus.MessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Object)>(r1, $r2) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void writeBody(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.eventbus.impl.codecs.JsonObjectMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.eventbus.MessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Object)>(r1, $r2) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void writeBody(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.eventbus.impl.codecs.ReplyExceptionMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.eventbus.MessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Object)>(r1, $r2) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void writeBody(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.eventbus.impl.codecs.JsonArrayMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.eventbus.MessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Object)>(r1, $r2) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void writeBody(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.eventbus.impl.codecs.BufferMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.eventbus.MessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Object)>(r1, $r2) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void writeBody(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.eventbus.impl.codecs.DoubleMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.eventbus.MessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Object)>(r1, $r2) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void writeBody(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.eventbus.impl.codecs.FloatMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.eventbus.MessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Object)>(r1, $r2) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void writeBody(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.eventbus.impl.codecs.BooleanMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.eventbus.MessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Object)>(r1, $r2) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void writeBody(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.eventbus.impl.codecs.CharMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.eventbus.MessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Object)>(r1, $r2) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void writeBody(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.eventbus.impl.codecs.ByteMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<io.vertx.core.eventbus.MessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Object)>(r1, $r2) in <io.vertx.core.eventbus.impl.clustered.ClusteredMessage: void writeBody(io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.eventbus.impl.codecs.LongMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.buffer.impl.BufferImpl: void <init>(int)>(i0) in <io.vertx.core.buffer.impl.BufferFactoryImpl: io.vertx.core.buffer.Buffer buffer(int)> ==> <io.vertx.core.buffer.impl.BufferImpl: void <init>(int)>
SPECIAL edge: specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("connectTimeout must be >= 0") in <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setConnectTimeout(int)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setConnectTimeout(int)>(i0) in <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.ClientOptionsBase setConnectTimeout(int)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setConnectTimeout(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setConnectTimeout(int)>(i0) in <io.vertx.core.net.NetClientOptions: io.vertx.core.net.ClientOptionsBase setConnectTimeout(int)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setConnectTimeout(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setLocalAddress(java.lang.String)>(r1) in <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.ClientOptionsBase setLocalAddress(java.lang.String)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setLocalAddress(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setLocalAddress(java.lang.String)>(r1) in <io.vertx.core.net.NetClientOptions: io.vertx.core.net.ClientOptionsBase setLocalAddress(java.lang.String)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setLocalAddress(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setMetricsName(java.lang.String)>(r1) in <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.ClientOptionsBase setMetricsName(java.lang.String)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setMetricsName(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setMetricsName(java.lang.String)>(r1) in <io.vertx.core.net.NetClientOptions: io.vertx.core.net.ClientOptionsBase setMetricsName(java.lang.String)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setMetricsName(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setProxyOptions(io.vertx.core.net.ProxyOptions)>(r1) in <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.ClientOptionsBase setProxyOptions(io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setProxyOptions(io.vertx.core.net.ProxyOptions)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setProxyOptions(io.vertx.core.net.ProxyOptions)>(r1) in <io.vertx.core.net.NetClientOptions: io.vertx.core.net.ClientOptionsBase setProxyOptions(io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setProxyOptions(io.vertx.core.net.ProxyOptions)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setTrustAll(boolean)>(z0) in <io.vertx.core.http.HttpClientOptions: io.vertx.core.net.ClientOptionsBase setTrustAll(boolean)> ==> <io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setTrustAll(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setTrustAll(boolean)>(z0) in <io.vertx.core.net.NetClientOptions: io.vertx.core.net.ClientOptionsBase setTrustAll(boolean)> ==> <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setTrustAll(boolean)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.ProxyOptions: void <init>()>() in <io.vertx.core.net.ProxyOptions: void <init>(io.vertx.core.json.JsonObject)> ==> <io.vertx.core.net.ProxyOptions: void <init>()>
CLINIT edge: $r1 = <io.vertx.core.net.ProxyOptions: io.vertx.core.net.ProxyType DEFAULT_TYPE> in <io.vertx.core.net.ProxyOptions: void <init>()> ==> <io.vertx.core.net.ProxyOptions: void <clinit>()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.http.impl.HeadersAdaptor: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.impl.ConcurrentHashSet: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <java.util.ServiceLoader: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.json.JsonArray: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <java.util.AbstractList: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.json.JsonObject: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$1: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <java.util.concurrent.ConcurrentLinkedQueue: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.json.JsonArray$Iter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.json.JsonObject$Iter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <java.util.Scanner: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: boolean hasNext()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.impl.utils.ConcurrentCyclicSequence: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.json.JsonArray$Iter: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.json.JsonObject$Iter: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$EventLoopIterator: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <java.util.Scanner: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$2: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2$1: java.lang.Object next()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getKey()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getKey()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getKey()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getKey()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getKey()>
INTERFACE edge: $r24 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r24 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r24 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r24 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r24 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r24 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r25 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r25 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r25 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r25 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r25 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r25 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r20 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r20 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r20 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r20 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r20 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r20 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r21 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r21 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r21 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r21 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r21 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r21 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r16 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r16 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r16 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r16 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r16 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r16 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r17 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r17 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r17 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r17 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r17 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r17 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r11 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r11 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r11 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r11 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r11 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r11 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r12 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r12 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r12 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r12 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r12 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r12 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.shareddata.impl.LocalMapImpl$1: java.lang.Object getValue()>
INTERFACE edge: $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.json.JsonObject$Entry: java.lang.Object getValue()>
INTERFACE edge: $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
INTERFACE edge: $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$MapEntry: java.lang.Object getValue()>
INTERFACE edge: $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders$1: java.lang.Object getValue()>
INTERFACE edge: $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.Object getValue()>
VIRTUAL edge: $i0 = virtualinvoke r5.<java.lang.String: int hashCode()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <java.lang.String: int hashCode()>
VIRTUAL edge: $z9 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("host") in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("password") in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z8 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("port") in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z7 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("type") in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z10 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("username") in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.ProxyOptions: io.vertx.core.net.ProxyOptions setHost(java.lang.String)>($r26) in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.net.ProxyOptions: io.vertx.core.net.ProxyOptions setHost(java.lang.String)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.ProxyOptions: io.vertx.core.net.ProxyOptions setPassword(java.lang.String)>($r22) in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.net.ProxyOptions: io.vertx.core.net.ProxyOptions setPassword(java.lang.String)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.ProxyOptions: io.vertx.core.net.ProxyOptions setPort(int)>($i1) in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.net.ProxyOptions: io.vertx.core.net.ProxyOptions setPort(int)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.ProxyOptions: io.vertx.core.net.ProxyOptions setType(io.vertx.core.net.ProxyType)>($r14) in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.net.ProxyOptions: io.vertx.core.net.ProxyOptions setType(io.vertx.core.net.ProxyType)>
VIRTUAL edge: virtualinvoke r7.<io.vertx.core.net.ProxyOptions: io.vertx.core.net.ProxyOptions setUsername(java.lang.String)>($r9) in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.net.ProxyOptions: io.vertx.core.net.ProxyOptions setUsername(java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r18.<java.lang.Number: int intValue()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <java.util.concurrent.atomic.AtomicLong: int intValue()>
VIRTUAL edge: $i1 = virtualinvoke $r18.<java.lang.Number: int intValue()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <java.lang.Float: int intValue()>
VIRTUAL edge: $i1 = virtualinvoke $r18.<java.lang.Number: int intValue()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <java.math.BigDecimal: int intValue()>
VIRTUAL edge: $i1 = virtualinvoke $r18.<java.lang.Number: int intValue()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <java.lang.Double: int intValue()>
VIRTUAL edge: $i1 = virtualinvoke $r18.<java.lang.Number: int intValue()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <java.lang.Long: int intValue()>
VIRTUAL edge: $i1 = virtualinvoke $r18.<java.lang.Number: int intValue()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <java.util.concurrent.atomic.AtomicInteger: int intValue()>
VIRTUAL edge: $i1 = virtualinvoke $r18.<java.lang.Number: int intValue()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <java.lang.Short: int intValue()>
VIRTUAL edge: $i1 = virtualinvoke $r18.<java.lang.Number: int intValue()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <java.math.BigInteger: int intValue()>
VIRTUAL edge: $i1 = virtualinvoke $r18.<java.lang.Number: int intValue()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <java.lang.Byte: int intValue()>
VIRTUAL edge: $i1 = virtualinvoke $r18.<java.lang.Number: int intValue()>() in <io.vertx.core.net.ProxyOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ProxyOptions)> ==> <java.lang.Integer: int intValue()>
STATIC edge: staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r0, "Proxy host may not be null") in <io.vertx.core.net.ProxyOptions: io.vertx.core.net.ProxyOptions setHost(java.lang.String)> ==> <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r0, "Proxy type may not be null") in <io.vertx.core.net.ProxyOptions: io.vertx.core.net.ProxyOptions setType(io.vertx.core.net.ProxyType)> ==> <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0) in <io.vertx.core.net.ProxyType: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.TCPSSLOptions: void <init>(io.vertx.core.net.TCPSSLOptions)>(r1) in <io.vertx.core.net.ClientOptionsBase: void <init>(io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.net.TCPSSLOptions: void <init>(io.vertx.core.net.TCPSSLOptions)>
VIRTUAL edge: $i0 = virtualinvoke r1.<io.vertx.core.net.ClientOptionsBase: int getConnectTimeout()>() in <io.vertx.core.net.ClientOptionsBase: void <init>(io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.net.ClientOptionsBase: int getConnectTimeout()>
VIRTUAL edge: $z0 = virtualinvoke r1.<io.vertx.core.net.ClientOptionsBase: boolean isTrustAll()>() in <io.vertx.core.net.ClientOptionsBase: void <init>(io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.net.ClientOptionsBase: boolean isTrustAll()>
SPECIAL edge: specialinvoke $r7.<io.vertx.core.net.ProxyOptions: void <init>(io.vertx.core.net.ProxyOptions)>($r5) in <io.vertx.core.net.ClientOptionsBase: void <init>(io.vertx.core.net.ClientOptionsBase)> ==> <io.vertx.core.net.ProxyOptions: void <init>(io.vertx.core.net.ProxyOptions)>
VIRTUAL edge: $i0 = virtualinvoke $r4.<io.vertx.core.net.NetClientOptions: int getReconnectAttempts()>() in <io.vertx.core.net.impl.NetClientImpl: void doConnect(io.vertx.core.net.SocketAddress,java.lang.String,io.vertx.core.Handler)> ==> <io.vertx.core.net.NetClientOptions: int getReconnectAttempts()>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.net.impl.NetClientImpl: void doConnect(io.vertx.core.net.SocketAddress,java.lang.String,io.vertx.core.Handler,int)>(r1, r2, r3, $i0) in <io.vertx.core.net.impl.NetClientImpl: void doConnect(io.vertx.core.net.SocketAddress,java.lang.String,io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.NetClientImpl: void doConnect(io.vertx.core.net.SocketAddress,java.lang.String,io.vertx.core.Handler,int)>
STATIC edge: staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "No null connectHandler accepted") in <io.vertx.core.net.impl.NetClientImpl: void doConnect(io.vertx.core.net.SocketAddress,java.lang.String,io.vertx.core.Handler,int)> ==> <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>
STATIC edge: r25 = staticinvoke <io.vertx.core.net.impl.NetClientImpl$lambda_doConnect_5__140: io.vertx.core.Handler bootstrap$(io.vertx.core.net.impl.NetClientImpl,io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,io.vertx.core.net.SocketAddress,int,java.lang.String)>(r0, r4, r1, r13, i0, r24) in <io.vertx.core.net.impl.NetClientImpl: void doConnect(io.vertx.core.net.SocketAddress,java.lang.String,io.vertx.core.Handler,int)> ==> <io.vertx.core.net.impl.NetClientImpl$lambda_doConnect_5__140: io.vertx.core.Handler bootstrap$(io.vertx.core.net.impl.NetClientImpl,io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,io.vertx.core.net.SocketAddress,int,java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.impl.NetClientImpl$lambda_connect_2__139: void <init>(io.vertx.core.Handler)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<io.netty.handler.codec.http.HttpHeaders: boolean isEmpty()>() in <io.vertx.core.http.impl.HeadersAdaptor: boolean isEmpty()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders: boolean isEmpty()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.impl.HeadersAdaptor: java.util.Set names()>() in <io.vertx.core.http.impl.HeadersAdaptor: int size()> ==> <io.vertx.core.http.impl.HeadersAdaptor: java.util.Set names()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.Set: int size()>() in <io.vertx.core.http.impl.HeadersAdaptor: int size()> ==> <java.util.HashSet: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.Set: int size()>() in <io.vertx.core.http.impl.HeadersAdaptor: int size()> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.Set: int size()>() in <io.vertx.core.http.impl.HeadersAdaptor: int size()> ==> <io.vertx.core.impl.ConcurrentHashSet: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.Set: int size()>() in <io.vertx.core.http.impl.HeadersAdaptor: int size()> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$1: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.Set: int size()>() in <io.vertx.core.http.impl.HeadersAdaptor: int size()> ==> <java.util.TreeSet: int size()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.impl.Http2HeadersAdaptor: java.util.Set names()>() in <io.vertx.core.http.impl.Http2HeadersAdaptor: int size()> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor: java.util.Set names()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.Set: int size()>() in <io.vertx.core.http.impl.Http2HeadersAdaptor: int size()> ==> <java.util.HashSet: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.Set: int size()>() in <io.vertx.core.http.impl.Http2HeadersAdaptor: int size()> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.Set: int size()>() in <io.vertx.core.http.impl.Http2HeadersAdaptor: int size()> ==> <io.vertx.core.impl.ConcurrentHashSet: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.Set: int size()>() in <io.vertx.core.http.impl.Http2HeadersAdaptor: int size()> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$1: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.Set: int size()>() in <io.vertx.core.http.impl.Http2HeadersAdaptor: int size()> ==> <java.util.TreeSet: int size()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.http.CaseInsensitiveHeaders: java.util.Set names()>() in <io.vertx.core.http.CaseInsensitiveHeaders: int size()> ==> <io.vertx.core.http.CaseInsensitiveHeaders: java.util.Set names()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.Set: int size()>() in <io.vertx.core.http.CaseInsensitiveHeaders: int size()> ==> <java.util.HashSet: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.Set: int size()>() in <io.vertx.core.http.CaseInsensitiveHeaders: int size()> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.Set: int size()>() in <io.vertx.core.http.CaseInsensitiveHeaders: int size()> ==> <io.vertx.core.impl.ConcurrentHashSet: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.Set: int size()>() in <io.vertx.core.http.CaseInsensitiveHeaders: int size()> ==> <io.vertx.core.net.impl.VertxEventLoopGroup$1: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.Set: int size()>() in <io.vertx.core.http.CaseInsensitiveHeaders: int size()> ==> <java.util.TreeSet: int size()>
CLINIT edge: $r1 = <java.lang.String: java.util.Comparator CASE_INSENSITIVE_ORDER> in <io.vertx.core.http.CaseInsensitiveHeaders: java.util.Set names()> ==> <java.lang.String: void <clinit>()>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.eventbus.impl.codecs.PingMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.String)>(r1, $r3) in <io.vertx.core.eventbus.impl.codecs.PingMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Object)> ==> <io.vertx.core.eventbus.impl.codecs.PingMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.eventbus.impl.codecs.IntMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Integer)>(r1, $r3) in <io.vertx.core.eventbus.impl.codecs.IntMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Object)> ==> <io.vertx.core.eventbus.impl.codecs.IntMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Integer)>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.eventbus.impl.codecs.ShortMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Short)>(r1, $r3) in <io.vertx.core.eventbus.impl.codecs.ShortMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Object)> ==> <io.vertx.core.eventbus.impl.codecs.ShortMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Short)>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.eventbus.impl.codecs.ByteArrayMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,byte[])>(r1, $r3) in <io.vertx.core.eventbus.impl.codecs.ByteArrayMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Object)> ==> <io.vertx.core.eventbus.impl.codecs.ByteArrayMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,byte[])>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.eventbus.impl.codecs.NullMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.String)>(r1, $r3) in <io.vertx.core.eventbus.impl.codecs.NullMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Object)> ==> <io.vertx.core.eventbus.impl.codecs.NullMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.eventbus.impl.codecs.StringMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.String)>(r1, $r3) in <io.vertx.core.eventbus.impl.codecs.StringMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Object)> ==> <io.vertx.core.eventbus.impl.codecs.StringMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.eventbus.impl.codecs.JsonObjectMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,io.vertx.core.json.JsonObject)>(r1, $r3) in <io.vertx.core.eventbus.impl.codecs.JsonObjectMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Object)> ==> <io.vertx.core.eventbus.impl.codecs.JsonObjectMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,io.vertx.core.json.JsonObject)>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.eventbus.impl.codecs.ReplyExceptionMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,io.vertx.core.eventbus.ReplyException)>(r1, $r3) in <io.vertx.core.eventbus.impl.codecs.ReplyExceptionMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Object)> ==> <io.vertx.core.eventbus.impl.codecs.ReplyExceptionMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,io.vertx.core.eventbus.ReplyException)>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.eventbus.impl.codecs.JsonArrayMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,io.vertx.core.json.JsonArray)>(r1, $r3) in <io.vertx.core.eventbus.impl.codecs.JsonArrayMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Object)> ==> <io.vertx.core.eventbus.impl.codecs.JsonArrayMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,io.vertx.core.json.JsonArray)>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.eventbus.impl.codecs.BufferMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,io.vertx.core.buffer.Buffer)>(r1, $r3) in <io.vertx.core.eventbus.impl.codecs.BufferMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Object)> ==> <io.vertx.core.eventbus.impl.codecs.BufferMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,io.vertx.core.buffer.Buffer)>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.eventbus.impl.codecs.DoubleMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Double)>(r1, $r3) in <io.vertx.core.eventbus.impl.codecs.DoubleMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Object)> ==> <io.vertx.core.eventbus.impl.codecs.DoubleMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Double)>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.eventbus.impl.codecs.FloatMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Float)>(r1, $r3) in <io.vertx.core.eventbus.impl.codecs.FloatMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Object)> ==> <io.vertx.core.eventbus.impl.codecs.FloatMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Float)>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.eventbus.impl.codecs.BooleanMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Boolean)>(r1, $r3) in <io.vertx.core.eventbus.impl.codecs.BooleanMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Object)> ==> <io.vertx.core.eventbus.impl.codecs.BooleanMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Boolean)>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.eventbus.impl.codecs.CharMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Character)>(r1, $r3) in <io.vertx.core.eventbus.impl.codecs.CharMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Object)> ==> <io.vertx.core.eventbus.impl.codecs.CharMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Character)>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.eventbus.impl.codecs.ByteMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Byte)>(r1, $r3) in <io.vertx.core.eventbus.impl.codecs.ByteMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Object)> ==> <io.vertx.core.eventbus.impl.codecs.ByteMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Byte)>
VIRTUAL edge: virtualinvoke r0.<io.vertx.core.eventbus.impl.codecs.LongMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Long)>(r1, $r3) in <io.vertx.core.eventbus.impl.codecs.LongMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Object)> ==> <io.vertx.core.eventbus.impl.codecs.LongMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Long)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setConnectTimeout(int)>(i0) in <io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setConnectTimeout(int)> ==> <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setConnectTimeout(int)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setConnectTimeout(int)>(i0) in <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setConnectTimeout(int)> ==> <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setConnectTimeout(int)>
SPECIAL edge: $r2 = specialinvoke r0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setLocalAddress(java.lang.String)>(r1) in <io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setLocalAddress(java.lang.String)> ==> <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setLocalAddress(java.lang.String)>
SPECIAL edge: $r2 = specialinvoke r0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setLocalAddress(java.lang.String)>(r1) in <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setLocalAddress(java.lang.String)> ==> <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setLocalAddress(java.lang.String)>
SPECIAL edge: $r2 = specialinvoke r0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setMetricsName(java.lang.String)>(r1) in <io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setMetricsName(java.lang.String)> ==> <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setMetricsName(java.lang.String)>
SPECIAL edge: $r2 = specialinvoke r0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setMetricsName(java.lang.String)>(r1) in <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setMetricsName(java.lang.String)> ==> <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setMetricsName(java.lang.String)>
SPECIAL edge: $r2 = specialinvoke r0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setProxyOptions(io.vertx.core.net.ProxyOptions)>(r1) in <io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setProxyOptions(io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setProxyOptions(io.vertx.core.net.ProxyOptions)>
SPECIAL edge: $r2 = specialinvoke r0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setProxyOptions(io.vertx.core.net.ProxyOptions)>(r1) in <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setProxyOptions(io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setProxyOptions(io.vertx.core.net.ProxyOptions)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setTrustAll(boolean)>(z0) in <io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setTrustAll(boolean)> ==> <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setTrustAll(boolean)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setTrustAll(boolean)>(z0) in <io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setTrustAll(boolean)> ==> <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setTrustAll(boolean)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.ProxyOptions: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.net.ProxyOptions: io.vertx.core.net.ProxyOptions setPort(int)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid proxy port ") in <io.vertx.core.net.ProxyOptions: io.vertx.core.net.ProxyOptions setPort(int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0) in <io.vertx.core.net.ProxyOptions: io.vertx.core.net.ProxyOptions setPort(int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.net.ProxyOptions: io.vertx.core.net.ProxyOptions setPort(int)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4) in <io.vertx.core.net.ProxyOptions: io.vertx.core.net.ProxyOptions setPort(int)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.ProxyOptions: void <init>(io.vertx.core.net.ProxyOptions)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke r1.<io.vertx.core.net.ProxyOptions: java.lang.String getHost()>() in <io.vertx.core.net.ProxyOptions: void <init>(io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.net.ProxyOptions: java.lang.String getHost()>
VIRTUAL edge: $i0 = virtualinvoke r1.<io.vertx.core.net.ProxyOptions: int getPort()>() in <io.vertx.core.net.ProxyOptions: void <init>(io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.net.ProxyOptions: int getPort()>
VIRTUAL edge: $r3 = virtualinvoke r1.<io.vertx.core.net.ProxyOptions: java.lang.String getUsername()>() in <io.vertx.core.net.ProxyOptions: void <init>(io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.net.ProxyOptions: java.lang.String getUsername()>
VIRTUAL edge: $r4 = virtualinvoke r1.<io.vertx.core.net.ProxyOptions: java.lang.String getPassword()>() in <io.vertx.core.net.ProxyOptions: void <init>(io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.net.ProxyOptions: java.lang.String getPassword()>
VIRTUAL edge: $r5 = virtualinvoke r1.<io.vertx.core.net.ProxyOptions: io.vertx.core.net.ProxyType getType()>() in <io.vertx.core.net.ProxyOptions: void <init>(io.vertx.core.net.ProxyOptions)> ==> <io.vertx.core.net.ProxyOptions: io.vertx.core.net.ProxyType getType()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.impl.NetClientImpl: void checkClosed()>() in <io.vertx.core.net.impl.NetClientImpl: void doConnect(io.vertx.core.net.SocketAddress,java.lang.String,io.vertx.core.Handler,int)> ==> <io.vertx.core.net.impl.NetClientImpl: void checkClosed()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.impl.NetClientImpl: void applyConnectionOptions(boolean,io.netty.bootstrap.Bootstrap)>($z2, $r28) in <io.vertx.core.net.impl.NetClientImpl: void doConnect(io.vertx.core.net.SocketAddress,java.lang.String,io.vertx.core.Handler,int)> ==> <io.vertx.core.net.impl.NetClientImpl: void applyConnectionOptions(boolean,io.netty.bootstrap.Bootstrap)>
INTERFACE edge: r4 = interfaceinvoke $r3.<io.vertx.core.impl.VertxInternal: io.vertx.core.impl.ContextInternal getOrCreateContext()>() in <io.vertx.core.net.impl.NetClientImpl: void doConnect(io.vertx.core.net.SocketAddress,java.lang.String,io.vertx.core.Handler,int)> ==> <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.ContextInternal getOrCreateContext()>
VIRTUAL edge: virtualinvoke $r6.<io.vertx.core.net.impl.SSLHelper: void validate(io.vertx.core.impl.VertxInternal)>($r5) in <io.vertx.core.net.impl.NetClientImpl: void doConnect(io.vertx.core.net.SocketAddress,java.lang.String,io.vertx.core.Handler,int)> ==> <io.vertx.core.net.impl.SSLHelper: void validate(io.vertx.core.impl.VertxInternal)>
SPECIAL edge: specialinvoke $r28.<io.netty.bootstrap.Bootstrap: void <init>()>() in <io.vertx.core.net.impl.NetClientImpl: void doConnect(io.vertx.core.net.SocketAddress,java.lang.String,io.vertx.core.Handler,int)> ==> <io.netty.bootstrap.Bootstrap: void <init>()>
INTERFACE edge: $r9 = interfaceinvoke r4.<io.vertx.core.impl.ContextInternal: io.netty.channel.EventLoop nettyEventLoop()>() in <io.vertx.core.net.impl.NetClientImpl: void doConnect(io.vertx.core.net.SocketAddress,java.lang.String,io.vertx.core.Handler,int)> ==> <io.vertx.core.impl.ContextImpl: io.netty.channel.EventLoop nettyEventLoop()>
INTERFACE edge: $r9 = interfaceinvoke r4.<io.vertx.core.impl.ContextInternal: io.netty.channel.EventLoop nettyEventLoop()>() in <io.vertx.core.net.impl.NetClientImpl: void doConnect(io.vertx.core.net.SocketAddress,java.lang.String,io.vertx.core.Handler,int)> ==> <io.vertx.core.impl.EventLoopContext: io.netty.channel.EventLoop nettyEventLoop()>
INTERFACE edge: $r12 = interfaceinvoke $r11.<io.vertx.core.impl.VertxInternal: io.vertx.core.net.impl.transport.Transport transport()>() in <io.vertx.core.net.impl.NetClientImpl: void doConnect(io.vertx.core.net.SocketAddress,java.lang.String,io.vertx.core.Handler,int)> ==> <io.vertx.core.impl.VertxImpl: io.vertx.core.net.impl.transport.Transport transport()>
INTERFACE edge: $r14 = interfaceinvoke r13.<io.vertx.core.net.SocketAddress: java.lang.String path()>() in <io.vertx.core.net.impl.NetClientImpl: void doConnect(io.vertx.core.net.SocketAddress,java.lang.String,io.vertx.core.Handler,int)> ==> <io.vertx.core.net.impl.SocketAddressImpl: java.lang.String path()>
INTERFACE edge: $r17 = interfaceinvoke r13.<io.vertx.core.net.SocketAddress: java.lang.String path()>() in <io.vertx.core.net.impl.NetClientImpl: void doConnect(io.vertx.core.net.SocketAddress,java.lang.String,io.vertx.core.Handler,int)> ==> <io.vertx.core.net.impl.SocketAddressImpl: java.lang.String path()>
VIRTUAL edge: $r15 = virtualinvoke $r12.<io.vertx.core.net.impl.transport.Transport: io.netty.channel.ChannelFactory channelFactory(boolean)>($z1) in <io.vertx.core.net.impl.NetClientImpl: void doConnect(io.vertx.core.net.SocketAddress,java.lang.String,io.vertx.core.Handler,int)> ==> <io.vertx.core.net.impl.transport.EpollTransport: io.netty.channel.ChannelFactory channelFactory(boolean)>
VIRTUAL edge: $r15 = virtualinvoke $r12.<io.vertx.core.net.impl.transport.Transport: io.netty.channel.ChannelFactory channelFactory(boolean)>($z1) in <io.vertx.core.net.impl.NetClientImpl: void doConnect(io.vertx.core.net.SocketAddress,java.lang.String,io.vertx.core.Handler,int)> ==> <io.vertx.core.net.impl.transport.KQueueTransport: io.netty.channel.ChannelFactory channelFactory(boolean)>
VIRTUAL edge: $r15 = virtualinvoke $r12.<io.vertx.core.net.impl.transport.Transport: io.netty.channel.ChannelFactory channelFactory(boolean)>($z1) in <io.vertx.core.net.impl.NetClientImpl: void doConnect(io.vertx.core.net.SocketAddress,java.lang.String,io.vertx.core.Handler,int)> ==> <io.vertx.core.net.impl.transport.Transport: io.netty.channel.ChannelFactory channelFactory(boolean)>
VIRTUAL edge: $z0 = virtualinvoke $r19.<io.vertx.core.net.impl.SSLHelper: boolean isSSL()>() in <io.vertx.core.net.impl.NetClientImpl: void doConnect(io.vertx.core.net.SocketAddress,java.lang.String,io.vertx.core.Handler,int)> ==> <io.vertx.core.net.impl.SSLHelper: boolean isSSL()>
VIRTUAL edge: $r22 = virtualinvoke $r21.<io.vertx.core.net.NetClientOptions: io.vertx.core.net.ProxyOptions getProxyOptions()>() in <io.vertx.core.net.impl.NetClientImpl: void doConnect(io.vertx.core.net.SocketAddress,java.lang.String,io.vertx.core.Handler,int)> ==> <io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ProxyOptions getProxyOptions()>
SPECIAL edge: specialinvoke $r29.<io.vertx.core.net.impl.ChannelProvider: void <init>(io.netty.bootstrap.Bootstrap,io.vertx.core.net.impl.SSLHelper,boolean,io.vertx.core.impl.ContextInternal,io.vertx.core.net.ProxyOptions)>($r28, $r20, $z0, r4, $r22) in <io.vertx.core.net.impl.NetClientImpl: void doConnect(io.vertx.core.net.SocketAddress,java.lang.String,io.vertx.core.Handler,int)> ==> <io.vertx.core.net.impl.ChannelProvider: void <init>(io.netty.bootstrap.Bootstrap,io.vertx.core.net.impl.SSLHelper,boolean,io.vertx.core.impl.ContextInternal,io.vertx.core.net.ProxyOptions)>
VIRTUAL edge: virtualinvoke $r29.<io.vertx.core.net.impl.ChannelProvider: void connect(io.vertx.core.net.SocketAddress,io.vertx.core.net.SocketAddress,java.lang.String,io.vertx.core.Handler)>(r13, r13, r24, r25) in <io.vertx.core.net.impl.NetClientImpl: void doConnect(io.vertx.core.net.SocketAddress,java.lang.String,io.vertx.core.Handler,int)> ==> <io.vertx.core.net.impl.ChannelProvider: void connect(io.vertx.core.net.SocketAddress,io.vertx.core.net.SocketAddress,java.lang.String,io.vertx.core.Handler)>
STATIC edge: $r1 = staticinvoke <io.vertx.core.net.impl.transport.EpollTransport$init__142: io.netty.channel.ChannelFactory bootstrap$()>() in <io.vertx.core.net.impl.transport.EpollTransport: io.netty.channel.ChannelFactory channelFactory(boolean)> ==> <io.vertx.core.net.impl.transport.EpollTransport$init__142: io.netty.channel.ChannelFactory bootstrap$()>
STATIC edge: $r0 = staticinvoke <io.vertx.core.net.impl.transport.EpollTransport$init__141: io.netty.channel.ChannelFactory bootstrap$()>() in <io.vertx.core.net.impl.transport.EpollTransport: io.netty.channel.ChannelFactory channelFactory(boolean)> ==> <io.vertx.core.net.impl.transport.EpollTransport$init__141: io.netty.channel.ChannelFactory bootstrap$()>
STATIC edge: $r1 = staticinvoke <io.vertx.core.net.impl.transport.KQueueTransport$init__144: io.netty.channel.ChannelFactory bootstrap$()>() in <io.vertx.core.net.impl.transport.KQueueTransport: io.netty.channel.ChannelFactory channelFactory(boolean)> ==> <io.vertx.core.net.impl.transport.KQueueTransport$init__144: io.netty.channel.ChannelFactory bootstrap$()>
STATIC edge: $r0 = staticinvoke <io.vertx.core.net.impl.transport.KQueueTransport$init__143: io.netty.channel.ChannelFactory bootstrap$()>() in <io.vertx.core.net.impl.transport.KQueueTransport: io.netty.channel.ChannelFactory channelFactory(boolean)> ==> <io.vertx.core.net.impl.transport.KQueueTransport$init__143: io.netty.channel.ChannelFactory bootstrap$()>
STATIC edge: $r0 = staticinvoke <io.vertx.core.net.impl.transport.Transport$init__145: io.netty.channel.ChannelFactory bootstrap$()>() in <io.vertx.core.net.impl.transport.Transport: io.netty.channel.ChannelFactory channelFactory(boolean)> ==> <io.vertx.core.net.impl.transport.Transport$init__145: io.netty.channel.ChannelFactory bootstrap$()>
STATIC edge: r2 = staticinvoke <io.vertx.core.net.impl.ChannelProvider$lambda_connect_1__146: io.vertx.core.Handler bootstrap$(io.vertx.core.net.impl.ChannelProvider,io.vertx.core.Handler)>(r0, r1) in <io.vertx.core.net.impl.ChannelProvider: void connect(io.vertx.core.net.SocketAddress,io.vertx.core.net.SocketAddress,java.lang.String,io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.ChannelProvider$lambda_connect_1__146: io.vertx.core.Handler bootstrap$(io.vertx.core.net.impl.ChannelProvider,io.vertx.core.Handler)>
SPECIAL edge: specialinvoke $r5.<io.vertx.core.net.impl.NetClientImpl$lambda_doConnect_5__140: void <init>(io.vertx.core.net.impl.NetClientImpl,io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,io.vertx.core.net.SocketAddress,int,java.lang.String)>($r0, $r1, $r2, $r3, $i0, $r4) in <io.vertx.core.net.impl.NetClientImpl$lambda_doConnect_5__140: io.vertx.core.Handler bootstrap$(io.vertx.core.net.impl.NetClientImpl,io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,io.vertx.core.net.SocketAddress,int,java.lang.String)> ==> <io.vertx.core.net.impl.NetClientImpl$lambda_doConnect_5__140: void <init>(io.vertx.core.net.impl.NetClientImpl,io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,io.vertx.core.net.SocketAddress,int,java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<io.netty.handler.codec.http.HttpHeaders: java.util.Set names()>() in <io.vertx.core.http.impl.HeadersAdaptor: java.util.Set names()> ==> <io.vertx.core.http.impl.headers.VertxHttpHeaders: java.util.Set names()>
SPECIAL edge: specialinvoke $r3.<io.vertx.core.http.impl.Http2HeadersAdaptor$2: void <init>(io.vertx.core.http.impl.Http2HeadersAdaptor)>(r0) in <io.vertx.core.http.impl.Http2HeadersAdaptor: java.util.Set names()> ==> <io.vertx.core.http.impl.Http2HeadersAdaptor$2: void <init>(io.vertx.core.http.impl.Http2HeadersAdaptor)>
SPECIAL edge: specialinvoke $r0.<java.util.TreeSet: void <init>(java.util.Comparator)>($r1) in <io.vertx.core.http.CaseInsensitiveHeaders: java.util.Set names()> ==> <java.util.TreeSet: void <init>(java.util.Comparator)>
INTERFACE edge: interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r6) in <io.vertx.core.http.CaseInsensitiveHeaders: java.util.Set names()> ==> <java.util.TreeSet: boolean add(java.lang.Object)>
VIRTUAL edge: $r6 = virtualinvoke r7.<io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.String getKey()>() in <io.vertx.core.http.CaseInsensitiveHeaders: java.util.Set names()> ==> <io.vertx.core.http.CaseInsensitiveHeaders$MapEntry: java.lang.String getKey()>
VIRTUAL edge: $i0 = virtualinvoke r1.<java.lang.Integer: int intValue()>() in <io.vertx.core.eventbus.impl.codecs.IntMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Integer)> ==> <java.lang.Integer: int intValue()>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer appendInt(int)>($i0) in <io.vertx.core.eventbus.impl.codecs.IntMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Integer)> ==> <io.vertx.core.buffer.impl.BufferImpl: io.vertx.core.buffer.Buffer appendInt(int)>
VIRTUAL edge: $s0 = virtualinvoke r1.<java.lang.Short: short shortValue()>() in <io.vertx.core.eventbus.impl.codecs.ShortMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Short)> ==> <java.lang.Short: short shortValue()>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer appendShort(short)>($s0) in <io.vertx.core.eventbus.impl.codecs.ShortMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Short)> ==> <io.vertx.core.buffer.impl.BufferImpl: io.vertx.core.buffer.Buffer appendShort(short)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer appendInt(int)>($i0) in <io.vertx.core.eventbus.impl.codecs.ByteArrayMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,byte[])> ==> <io.vertx.core.buffer.impl.BufferImpl: io.vertx.core.buffer.Buffer appendInt(int)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer appendBytes(byte[])>(r1) in <io.vertx.core.eventbus.impl.codecs.ByteArrayMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,byte[])> ==> <io.vertx.core.buffer.impl.BufferImpl: io.vertx.core.buffer.Buffer appendBytes(byte[])>
VIRTUAL edge: r2 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r1) in <io.vertx.core.eventbus.impl.codecs.StringMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.String)> ==> <java.lang.String: byte[] getBytes(java.nio.charset.Charset)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer appendInt(int)>($i0) in <io.vertx.core.eventbus.impl.codecs.StringMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.String)> ==> <io.vertx.core.buffer.impl.BufferImpl: io.vertx.core.buffer.Buffer appendInt(int)>
INTERFACE edge: interfaceinvoke r3.<io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer appendBytes(byte[])>(r2) in <io.vertx.core.eventbus.impl.codecs.StringMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.String)> ==> <io.vertx.core.buffer.impl.BufferImpl: io.vertx.core.buffer.Buffer appendBytes(byte[])>
VIRTUAL edge: r1 = virtualinvoke r0.<io.vertx.core.json.JsonObject: io.vertx.core.buffer.Buffer toBuffer()>() in <io.vertx.core.eventbus.impl.codecs.JsonObjectMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,io.vertx.core.json.JsonObject)> ==> <io.vertx.core.json.JsonObject: io.vertx.core.buffer.Buffer toBuffer()>
INTERFACE edge: $i0 = interfaceinvoke r1.<io.vertx.core.buffer.Buffer: int length()>() in <io.vertx.core.eventbus.impl.codecs.JsonObjectMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,io.vertx.core.json.JsonObject)> ==> <io.vertx.core.buffer.impl.BufferImpl: int length()>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer appendInt(int)>($i0) in <io.vertx.core.eventbus.impl.codecs.JsonObjectMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,io.vertx.core.json.JsonObject)> ==> <io.vertx.core.buffer.impl.BufferImpl: io.vertx.core.buffer.Buffer appendInt(int)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer appendBuffer(io.vertx.core.buffer.Buffer)>(r1) in <io.vertx.core.eventbus.impl.codecs.JsonObjectMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,io.vertx.core.json.JsonObject)> ==> <io.vertx.core.buffer.impl.BufferImpl: io.vertx.core.buffer.Buffer appendBuffer(io.vertx.core.buffer.Buffer)>
CLINIT edge: $r2 = staticinvoke <io.vertx.core.json.Json: io.vertx.core.buffer.Buffer encodeToBuffer(java.lang.Object)>($r1) in <io.vertx.core.json.JsonObject: io.vertx.core.buffer.Buffer toBuffer()> ==> <io.vertx.core.json.Json: void <clinit>()>
STATIC edge: $r2 = staticinvoke <io.vertx.core.json.Json: io.vertx.core.buffer.Buffer encodeToBuffer(java.lang.Object)>($r1) in <io.vertx.core.json.JsonObject: io.vertx.core.buffer.Buffer toBuffer()> ==> <io.vertx.core.json.Json: io.vertx.core.buffer.Buffer encodeToBuffer(java.lang.Object)>
CLINIT edge: $r1 = <io.vertx.core.json.Json: com.fasterxml.jackson.databind.ObjectMapper mapper> in <io.vertx.core.json.Json: io.vertx.core.buffer.Buffer encodeToBuffer(java.lang.Object)> ==> <io.vertx.core.json.Json: void <clinit>()>
STATIC edge: $r3 = staticinvoke <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer(byte[])>($r2) in <io.vertx.core.json.Json: io.vertx.core.buffer.Buffer encodeToBuffer(java.lang.Object)> ==> <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer(byte[])>
CLINIT edge: $r3 = staticinvoke <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer(byte[])>($r2) in <io.vertx.core.json.Json: io.vertx.core.buffer.Buffer encodeToBuffer(java.lang.Object)> ==> <io.vertx.core.buffer.Buffer: void <clinit>()>
VIRTUAL edge: $r2 = virtualinvoke r1.<io.vertx.core.eventbus.ReplyException: io.vertx.core.eventbus.ReplyFailure failureType()>() in <io.vertx.core.eventbus.impl.codecs.ReplyExceptionMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,io.vertx.core.eventbus.ReplyException)> ==> <io.vertx.core.eventbus.ReplyException: io.vertx.core.eventbus.ReplyFailure failureType()>
VIRTUAL edge: $i2 = virtualinvoke r1.<io.vertx.core.eventbus.ReplyException: int failureCode()>() in <io.vertx.core.eventbus.impl.codecs.ReplyExceptionMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,io.vertx.core.eventbus.ReplyException)> ==> <io.vertx.core.eventbus.ReplyException: int failureCode()>
VIRTUAL edge: $r5 = virtualinvoke r1.<io.vertx.core.eventbus.ReplyException: java.lang.String getMessage()>() in <io.vertx.core.eventbus.impl.codecs.ReplyExceptionMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,io.vertx.core.eventbus.ReplyException)> ==> <java.lang.Throwable: java.lang.String getMessage()>
VIRTUAL edge: $r7 = virtualinvoke r1.<io.vertx.core.eventbus.ReplyException: java.lang.String getMessage()>() in <io.vertx.core.eventbus.impl.codecs.ReplyExceptionMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,io.vertx.core.eventbus.ReplyException)> ==> <java.lang.Throwable: java.lang.String getMessage()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<io.vertx.core.eventbus.ReplyFailure: int toInt()>() in <io.vertx.core.eventbus.impl.codecs.ReplyExceptionMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,io.vertx.core.eventbus.ReplyException)> ==> <io.vertx.core.eventbus.ReplyFailure: int toInt()>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer appendByte(byte)>($b1) in <io.vertx.core.eventbus.impl.codecs.ReplyExceptionMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,io.vertx.core.eventbus.ReplyException)> ==> <io.vertx.core.buffer.impl.BufferImpl: io.vertx.core.buffer.Buffer appendByte(byte)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer appendInt(int)>($i2) in <io.vertx.core.eventbus.impl.codecs.ReplyExceptionMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,io.vertx.core.eventbus.ReplyException)> ==> <io.vertx.core.buffer.impl.BufferImpl: io.vertx.core.buffer.Buffer appendInt(int)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer appendByte(byte)>(0) in <io.vertx.core.eventbus.impl.codecs.ReplyExceptionMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,io.vertx.core.eventbus.ReplyException)> ==> <io.vertx.core.buffer.impl.BufferImpl: io.vertx.core.buffer.Buffer appendByte(byte)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer appendByte(byte)>(1) in <io.vertx.core.eventbus.impl.codecs.ReplyExceptionMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,io.vertx.core.eventbus.ReplyException)> ==> <io.vertx.core.buffer.impl.BufferImpl: io.vertx.core.buffer.Buffer appendByte(byte)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer appendInt(int)>($i3) in <io.vertx.core.eventbus.impl.codecs.ReplyExceptionMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,io.vertx.core.eventbus.ReplyException)> ==> <io.vertx.core.buffer.impl.BufferImpl: io.vertx.core.buffer.Buffer appendInt(int)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer appendBytes(byte[])>(r9) in <io.vertx.core.eventbus.impl.codecs.ReplyExceptionMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,io.vertx.core.eventbus.ReplyException)> ==> <io.vertx.core.buffer.impl.BufferImpl: io.vertx.core.buffer.Buffer appendBytes(byte[])>
VIRTUAL edge: r9 = virtualinvoke $r7.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r8) in <io.vertx.core.eventbus.impl.codecs.ReplyExceptionMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,io.vertx.core.eventbus.ReplyException)> ==> <java.lang.String: byte[] getBytes(java.nio.charset.Charset)>
CLINIT edge: $r1 = <io.vertx.core.eventbus.ReplyFailure$1: int[] $SwitchMap$io$vertx$core$eventbus$ReplyFailure> in <io.vertx.core.eventbus.ReplyFailure: int toInt()> ==> <io.vertx.core.eventbus.ReplyFailure$1: void <clinit>()>
CLINIT edge: $r0 = staticinvoke <io.vertx.core.eventbus.ReplyFailure: io.vertx.core.eventbus.ReplyFailure[] values()>() in <io.vertx.core.eventbus.ReplyFailure$1: void <clinit>()> ==> <io.vertx.core.eventbus.ReplyFailure: void <clinit>()>
STATIC edge: $r0 = staticinvoke <io.vertx.core.eventbus.ReplyFailure: io.vertx.core.eventbus.ReplyFailure[] values()>() in <io.vertx.core.eventbus.ReplyFailure$1: void <clinit>()> ==> <io.vertx.core.eventbus.ReplyFailure: io.vertx.core.eventbus.ReplyFailure[] values()>
CLINIT edge: $r6 = <io.vertx.core.eventbus.ReplyFailure: io.vertx.core.eventbus.ReplyFailure RECIPIENT_FAILURE> in <io.vertx.core.eventbus.ReplyFailure$1: void <clinit>()> ==> <io.vertx.core.eventbus.ReplyFailure: void <clinit>()>
CLINIT edge: $r7 = <io.vertx.core.eventbus.ReplyFailure$1: int[] $SwitchMap$io$vertx$core$eventbus$ReplyFailure> in <io.vertx.core.eventbus.ReplyFailure$1: void <clinit>()> ==> <io.vertx.core.eventbus.ReplyFailure$1: void <clinit>()>
CLINIT edge: $r4 = <io.vertx.core.eventbus.ReplyFailure: io.vertx.core.eventbus.ReplyFailure NO_HANDLERS> in <io.vertx.core.eventbus.ReplyFailure$1: void <clinit>()> ==> <io.vertx.core.eventbus.ReplyFailure: void <clinit>()>
CLINIT edge: $r5 = <io.vertx.core.eventbus.ReplyFailure$1: int[] $SwitchMap$io$vertx$core$eventbus$ReplyFailure> in <io.vertx.core.eventbus.ReplyFailure$1: void <clinit>()> ==> <io.vertx.core.eventbus.ReplyFailure$1: void <clinit>()>
CLINIT edge: <io.vertx.core.eventbus.ReplyFailure$1: int[] $SwitchMap$io$vertx$core$eventbus$ReplyFailure> = $r1 in <io.vertx.core.eventbus.ReplyFailure$1: void <clinit>()> ==> <io.vertx.core.eventbus.ReplyFailure$1: void <clinit>()>
CLINIT edge: $r0 = <io.vertx.core.eventbus.ReplyFailure: io.vertx.core.eventbus.ReplyFailure[] $VALUES> in <io.vertx.core.eventbus.ReplyFailure: io.vertx.core.eventbus.ReplyFailure[] values()> ==> <io.vertx.core.eventbus.ReplyFailure: void <clinit>()>
VIRTUAL edge: r1 = virtualinvoke r0.<io.vertx.core.json.JsonArray: io.vertx.core.buffer.Buffer toBuffer()>() in <io.vertx.core.eventbus.impl.codecs.JsonArrayMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,io.vertx.core.json.JsonArray)> ==> <io.vertx.core.json.JsonArray: io.vertx.core.buffer.Buffer toBuffer()>
INTERFACE edge: $i0 = interfaceinvoke r1.<io.vertx.core.buffer.Buffer: int length()>() in <io.vertx.core.eventbus.impl.codecs.JsonArrayMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,io.vertx.core.json.JsonArray)> ==> <io.vertx.core.buffer.impl.BufferImpl: int length()>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer appendInt(int)>($i0) in <io.vertx.core.eventbus.impl.codecs.JsonArrayMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,io.vertx.core.json.JsonArray)> ==> <io.vertx.core.buffer.impl.BufferImpl: io.vertx.core.buffer.Buffer appendInt(int)>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer appendBuffer(io.vertx.core.buffer.Buffer)>(r1) in <io.vertx.core.eventbus.impl.codecs.JsonArrayMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,io.vertx.core.json.JsonArray)> ==> <io.vertx.core.buffer.impl.BufferImpl: io.vertx.core.buffer.Buffer appendBuffer(io.vertx.core.buffer.Buffer)>
CLINIT edge: $r2 = staticinvoke <io.vertx.core.json.Json: io.vertx.core.buffer.Buffer encodeToBuffer(java.lang.Object)>($r1) in <io.vertx.core.json.JsonArray: io.vertx.core.buffer.Buffer toBuffer()> ==> <io.vertx.core.json.Json: void <clinit>()>
STATIC edge: $r2 = staticinvoke <io.vertx.core.json.Json: io.vertx.core.buffer.Buffer encodeToBuffer(java.lang.Object)>($r1) in <io.vertx.core.json.JsonArray: io.vertx.core.buffer.Buffer toBuffer()> ==> <io.vertx.core.json.Json: io.vertx.core.buffer.Buffer encodeToBuffer(java.lang.Object)>
INTERFACE edge: $i0 = interfaceinvoke r1.<io.vertx.core.buffer.Buffer: int length()>() in <io.vertx.core.eventbus.impl.codecs.BufferMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.buffer.impl.BufferImpl: int length()>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer appendInt(int)>($i0) in <io.vertx.core.eventbus.impl.codecs.BufferMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.buffer.impl.BufferImpl: io.vertx.core.buffer.Buffer appendInt(int)>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer appendBuffer(io.vertx.core.buffer.Buffer)>(r1) in <io.vertx.core.eventbus.impl.codecs.BufferMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,io.vertx.core.buffer.Buffer)> ==> <io.vertx.core.buffer.impl.BufferImpl: io.vertx.core.buffer.Buffer appendBuffer(io.vertx.core.buffer.Buffer)>
VIRTUAL edge: $d0 = virtualinvoke r1.<java.lang.Double: double doubleValue()>() in <io.vertx.core.eventbus.impl.codecs.DoubleMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Double)> ==> <java.lang.Double: double doubleValue()>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer appendDouble(double)>($d0) in <io.vertx.core.eventbus.impl.codecs.DoubleMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Double)> ==> <io.vertx.core.buffer.impl.BufferImpl: io.vertx.core.buffer.Buffer appendDouble(double)>
VIRTUAL edge: $f0 = virtualinvoke r1.<java.lang.Float: float floatValue()>() in <io.vertx.core.eventbus.impl.codecs.FloatMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Float)> ==> <java.lang.Float: float floatValue()>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer appendFloat(float)>($f0) in <io.vertx.core.eventbus.impl.codecs.FloatMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Float)> ==> <io.vertx.core.buffer.impl.BufferImpl: io.vertx.core.buffer.Buffer appendFloat(float)>
VIRTUAL edge: $z0 = virtualinvoke r1.<java.lang.Boolean: boolean booleanValue()>() in <io.vertx.core.eventbus.impl.codecs.BooleanMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Boolean)> ==> <java.lang.Boolean: boolean booleanValue()>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer appendByte(byte)>($b0) in <io.vertx.core.eventbus.impl.codecs.BooleanMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Boolean)> ==> <io.vertx.core.buffer.impl.BufferImpl: io.vertx.core.buffer.Buffer appendByte(byte)>
VIRTUAL edge: $c0 = virtualinvoke r1.<java.lang.Character: char charValue()>() in <io.vertx.core.eventbus.impl.codecs.CharMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Character)> ==> <java.lang.Character: char charValue()>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer appendShort(short)>($s1) in <io.vertx.core.eventbus.impl.codecs.CharMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Character)> ==> <io.vertx.core.buffer.impl.BufferImpl: io.vertx.core.buffer.Buffer appendShort(short)>
VIRTUAL edge: $b0 = virtualinvoke r1.<java.lang.Byte: byte byteValue()>() in <io.vertx.core.eventbus.impl.codecs.ByteMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Byte)> ==> <java.lang.Byte: byte byteValue()>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer appendByte(byte)>($b0) in <io.vertx.core.eventbus.impl.codecs.ByteMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Byte)> ==> <io.vertx.core.buffer.impl.BufferImpl: io.vertx.core.buffer.Buffer appendByte(byte)>
VIRTUAL edge: $l0 = virtualinvoke r1.<java.lang.Long: long longValue()>() in <io.vertx.core.eventbus.impl.codecs.LongMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Long)> ==> <java.lang.Long: long longValue()>
INTERFACE edge: interfaceinvoke r0.<io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer appendLong(long)>($l0) in <io.vertx.core.eventbus.impl.codecs.LongMessageCodec: void encodeToWire(io.vertx.core.buffer.Buffer,java.lang.Long)> ==> <io.vertx.core.buffer.impl.BufferImpl: io.vertx.core.buffer.Buffer appendLong(long)>
SPECIAL edge: specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Client is closed") in <io.vertx.core.net.impl.NetClientImpl: void checkClosed()> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<io.vertx.core.impl.VertxInternal: io.vertx.core.net.impl.transport.Transport transport()>() in <io.vertx.core.net.impl.NetClientImpl: void applyConnectionOptions(boolean,io.netty.bootstrap.Bootstrap)> ==> <io.vertx.core.impl.VertxImpl: io.vertx.core.net.impl.transport.Transport transport()>
VIRTUAL edge: virtualinvoke $r2.<io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.ClientOptionsBase,boolean,io.netty.bootstrap.Bootstrap)>($r4, z0, r3) in <io.vertx.core.net.impl.NetClientImpl: void applyConnectionOptions(boolean,io.netty.bootstrap.Bootstrap)> ==> <io.vertx.core.net.impl.transport.EpollTransport: void configure(io.vertx.core.net.ClientOptionsBase,boolean,io.netty.bootstrap.Bootstrap)>
VIRTUAL edge: virtualinvoke $r2.<io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.ClientOptionsBase,boolean,io.netty.bootstrap.Bootstrap)>($r4, z0, r3) in <io.vertx.core.net.impl.NetClientImpl: void applyConnectionOptions(boolean,io.netty.bootstrap.Bootstrap)> ==> <io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.ClientOptionsBase,boolean,io.netty.bootstrap.Bootstrap)>
CLINIT edge: $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z4) in <io.vertx.core.net.impl.transport.EpollTransport: void configure(io.vertx.core.net.ClientOptionsBase,boolean,io.netty.bootstrap.Bootstrap)> ==> <java.lang.Boolean: void <clinit>()>
STATIC edge: $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2) in <io.vertx.core.net.impl.transport.EpollTransport: void configure(io.vertx.core.net.ClientOptionsBase,boolean,io.netty.bootstrap.Bootstrap)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
STATIC edge: $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1) in <io.vertx.core.net.impl.transport.EpollTransport: void configure(io.vertx.core.net.ClientOptionsBase,boolean,io.netty.bootstrap.Bootstrap)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
STATIC edge: $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z4) in <io.vertx.core.net.impl.transport.EpollTransport: void configure(io.vertx.core.net.ClientOptionsBase,boolean,io.netty.bootstrap.Bootstrap)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
CLINIT edge: $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1) in <io.vertx.core.net.impl.transport.EpollTransport: void configure(io.vertx.core.net.ClientOptionsBase,boolean,io.netty.bootstrap.Bootstrap)> ==> <java.lang.Boolean: void <clinit>()>
CLINIT edge: $r27 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1) in <io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.ClientOptionsBase,boolean,io.netty.bootstrap.Bootstrap)> ==> <java.lang.Boolean: void <clinit>()>
STATIC edge: $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4) in <io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.ClientOptionsBase,boolean,io.netty.bootstrap.Bootstrap)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5) in <io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.ClientOptionsBase,boolean,io.netty.bootstrap.Bootstrap)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6) in <io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.ClientOptionsBase,boolean,io.netty.bootstrap.Bootstrap)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7) in <io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.ClientOptionsBase,boolean,io.netty.bootstrap.Bootstrap)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i9) in <io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.ClientOptionsBase,boolean,io.netty.bootstrap.Bootstrap)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r33 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z3) in <io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.ClientOptionsBase,boolean,io.netty.bootstrap.Bootstrap)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
STATIC edge: $r30 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2) in <io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.ClientOptionsBase,boolean,io.netty.bootstrap.Bootstrap)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
STATIC edge: $r27 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1) in <io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.ClientOptionsBase,boolean,io.netty.bootstrap.Bootstrap)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
CLINIT edge: $r6 = <io.vertx.core.net.impl.PartialPooledByteBufAllocator: io.vertx.core.net.impl.PartialPooledByteBufAllocator INSTANCE> in <io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.ClientOptionsBase,boolean,io.netty.bootstrap.Bootstrap)> ==> <io.vertx.core.net.impl.PartialPooledByteBufAllocator: void <clinit>()>
CLINIT edge: $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4) in <io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.ClientOptionsBase,boolean,io.netty.bootstrap.Bootstrap)> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5) in <io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.ClientOptionsBase,boolean,io.netty.bootstrap.Bootstrap)> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6) in <io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.ClientOptionsBase,boolean,io.netty.bootstrap.Bootstrap)> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7) in <io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.ClientOptionsBase,boolean,io.netty.bootstrap.Bootstrap)> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i9) in <io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.ClientOptionsBase,boolean,io.netty.bootstrap.Bootstrap)> ==> <java.lang.Integer: void <clinit>()>
SPECIAL edge: specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>() in <io.vertx.core.net.impl.transport.Transport: io.netty.channel.ChannelFactory channelFactory(boolean)> ==> <java.lang.IllegalArgumentException: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.impl.ChannelProvider: void <init>(io.netty.bootstrap.Bootstrap,io.vertx.core.net.impl.SSLHelper,boolean,io.vertx.core.impl.ContextInternal,io.vertx.core.net.ProxyOptions)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.impl.ChannelProvider: void handleProxyConnect(io.vertx.core.net.SocketAddress,io.vertx.core.net.SocketAddress,java.lang.String,io.vertx.core.Handler)>(r4, r5, r6, r2) in <io.vertx.core.net.impl.ChannelProvider: void connect(io.vertx.core.net.SocketAddress,io.vertx.core.net.SocketAddress,java.lang.String,io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.ChannelProvider: void handleProxyConnect(io.vertx.core.net.SocketAddress,io.vertx.core.net.SocketAddress,java.lang.String,io.vertx.core.Handler)>
SPECIAL edge: specialinvoke r0.<io.vertx.core.net.impl.ChannelProvider: void handleConnect(io.vertx.core.net.SocketAddress,io.vertx.core.net.SocketAddress,java.lang.String,io.vertx.core.Handler)>(r4, r5, r6, r2) in <io.vertx.core.net.impl.ChannelProvider: void connect(io.vertx.core.net.SocketAddress,io.vertx.core.net.SocketAddress,java.lang.String,io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.ChannelProvider: void handleConnect(io.vertx.core.net.SocketAddress,io.vertx.core.net.SocketAddress,java.lang.String,io.vertx.core.Handler)>
STATIC edge: $r16 = staticinvoke <io.vertx.core.net.impl.ChannelProvider$lambda_handleProxyConnect_4__147: io.vertx.core.Handler bootstrap$(io.vertx.core.net.impl.ChannelProvider,int,io.vertx.core.net.ProxyType,java.lang.String,java.lang.String,io.vertx.core.impl.VertxInternal,io.vertx.core.net.SocketAddress,io.vertx.core.net.SocketAddress,java.lang.String,io.vertx.core.Handler)>(r0, i0, r11, r7, r9, r2, r12, r13, r14, r15) in <io.vertx.core.net.impl.ChannelProvider: void handleProxyConnect(io.vertx.core.net.SocketAddress,io.vertx.core.net.SocketAddress,java.lang.String,io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.ChannelProvider$lambda_handleProxyConnect_4__147: io.vertx.core.Handler bootstrap$(io.vertx.core.net.impl.ChannelProvider,int,io.vertx.core.net.ProxyType,java.lang.String,java.lang.String,io.vertx.core.impl.VertxInternal,io.vertx.core.net.SocketAddress,io.vertx.core.net.SocketAddress,java.lang.String,io.vertx.core.Handler)>
STATIC edge: $r17 = staticinvoke <io.vertx.core.net.impl.ChannelProvider$lambda_handleConnect_2__148: io.netty.util.concurrent.GenericFutureListener bootstrap$(io.vertx.core.net.impl.ChannelProvider,io.netty.channel.ChannelFuture,io.vertx.core.Handler)>(r0, r16, r9) in <io.vertx.core.net.impl.ChannelProvider: void handleConnect(io.vertx.core.net.SocketAddress,io.vertx.core.net.SocketAddress,java.lang.String,io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.ChannelProvider$lambda_handleConnect_2__148: io.netty.util.concurrent.GenericFutureListener bootstrap$(io.vertx.core.net.impl.ChannelProvider,io.netty.channel.ChannelFuture,io.vertx.core.Handler)>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.net.impl.transport.EpollTransport$init__142: void <init>()>() in <io.vertx.core.net.impl.transport.EpollTransport$init__142: io.netty.channel.ChannelFactory bootstrap$()> ==> <io.vertx.core.net.impl.transport.EpollTransport$init__142: void <init>()>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.net.impl.transport.EpollTransport$init__141: void <init>()>() in <io.vertx.core.net.impl.transport.EpollTransport$init__141: io.netty.channel.ChannelFactory bootstrap$()> ==> <io.vertx.core.net.impl.transport.EpollTransport$init__141: void <init>()>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.net.impl.transport.KQueueTransport$init__144: void <init>()>() in <io.vertx.core.net.impl.transport.KQueueTransport$init__144: io.netty.channel.ChannelFactory bootstrap$()> ==> <io.vertx.core.net.impl.transport.KQueueTransport$init__144: void <init>()>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.net.impl.transport.KQueueTransport$init__143: void <init>()>() in <io.vertx.core.net.impl.transport.KQueueTransport$init__143: io.netty.channel.ChannelFactory bootstrap$()> ==> <io.vertx.core.net.impl.transport.KQueueTransport$init__143: void <init>()>
SPECIAL edge: specialinvoke $r0.<io.vertx.core.net.impl.transport.Transport$init__145: void <init>()>() in <io.vertx.core.net.impl.transport.Transport$init__145: io.netty.channel.ChannelFactory bootstrap$()> ==> <io.vertx.core.net.impl.transport.Transport$init__145: void <init>()>
SPECIAL edge: specialinvoke $r2.<io.vertx.core.net.impl.ChannelProvider$lambda_connect_1__146: void <init>(io.vertx.core.net.impl.ChannelProvider,io.vertx.core.Handler)>($r0, $r1) in <io.vertx.core.net.impl.ChannelProvider$lambda_connect_1__146: io.vertx.core.Handler bootstrap$(io.vertx.core.net.impl.ChannelProvider,io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.ChannelProvider$lambda_connect_1__146: void <init>(io.vertx.core.net.impl.ChannelProvider,io.vertx.core.Handler)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.impl.NetClientImpl$lambda_doConnect_5__140: void <init>(io.vertx.core.net.impl.NetClientImpl,io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,io.vertx.core.net.SocketAddress,int,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.util.AbstractSet: void <init>()>() in <io.vertx.core.http.impl.Http2HeadersAdaptor$2: void <init>(io.vertx.core.http.impl.Http2HeadersAdaptor)> ==> <java.util.AbstractSet: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.fasterxml.jackson.databind.ObjectMapper: byte[] writeValueAsBytes(java.lang.Object)>(r0) in <io.vertx.core.json.Json: io.vertx.core.buffer.Buffer encodeToBuffer(java.lang.Object)> ==> <com.fasterxml.jackson.databind.ObjectMapper: byte[] writeValueAsBytes(java.lang.Object)>
SPECIAL edge: specialinvoke $r7.<java.lang.StringBuilder: void <init>()>() in <io.vertx.core.json.Json: io.vertx.core.buffer.Buffer encodeToBuffer(java.lang.Object)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to encode as JSON: ") in <io.vertx.core.json.Json: io.vertx.core.buffer.Buffer encodeToBuffer(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r4.<java.lang.Exception: java.lang.String getMessage()>() in <io.vertx.core.json.Json: io.vertx.core.buffer.Buffer encodeToBuffer(java.lang.Object)> ==> <java.lang.Throwable: java.lang.String getMessage()>
VIRTUAL edge: $r9 = virtualinvoke $r4.<java.lang.Exception: java.lang.String getMessage()>() in <io.vertx.core.json.Json: io.vertx.core.buffer.Buffer encodeToBuffer(java.lang.Object)> ==> <java.nio.charset.MalformedInputException: java.lang.String getMessage()>
VIRTUAL edge: $r9 = virtualinvoke $r4.<java.lang.Exception: java.lang.String getMessage()>() in <io.vertx.core.json.Json: io.vertx.core.buffer.Buffer encodeToBuffer(java.lang.Object)> ==> <java.net.URISyntaxException: java.lang.String getMessage()>
VIRTUAL edge: $r9 = virtualinvoke $r4.<java.lang.Exception: java.lang.String getMessage()>() in <io.vertx.core.json.Json: io.vertx.core.buffer.Buffer encodeToBuffer(java.lang.Object)> ==> <java.util.regex.PatternSyntaxException: java.lang.String getMessage()>
VIRTUAL edge: $r9 = virtualinvoke $r4.<java.lang.Exception: java.lang.String getMessage()>() in <io.vertx.core.json.Json: io.vertx.core.buffer.Buffer encodeToBuffer(java.lang.Object)> ==> <java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
VIRTUAL edge: $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9) in <io.vertx.core.json.Json: io.vertx.core.buffer.Buffer encodeToBuffer(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() in <io.vertx.core.json.Json: io.vertx.core.buffer.Buffer encodeToBuffer(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r6.<io.vertx.core.json.EncodeException: void <init>(java.lang.String)>($r11) in <io.vertx.core.json.Json: io.vertx.core.buffer.Buffer encodeToBuffer(java.lang.Object)> ==> <io.vertx.core.json.EncodeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<io.vertx.core.eventbus.ReplyFailure: int ordinal()>() in <io.vertx.core.eventbus.ReplyFailure: int toInt()> ==> <java.lang.Enum: int ordinal()>
SPECIAL edge: specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("How did we get here?") in <io.vertx.core.eventbus.ReplyFailure: int toInt()> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r2.<io.vertx.core.eventbus.ReplyFailure: int ordinal()>() in <io.vertx.core.eventbus.ReplyFailure$1: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $i2 = virtualinvoke $r4.<io.vertx.core.eventbus.ReplyFailure: int ordinal()>() in <io.vertx.core.eventbus.ReplyFailure$1: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $i3 = virtualinvoke $r6.<io.vertx.core.eventbus.ReplyFailure: int ordinal()>() in <io.vertx.core.eventbus.ReplyFailure$1: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.eventbus.ReplyFailure: io.vertx.core.eventbus.ReplyFailure[] values()> ==> <java.lang.Object: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.eventbus.ReplyFailure: io.vertx.core.eventbus.ReplyFailure[] values()> ==> <java.util.HashMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.eventbus.ReplyFailure: io.vertx.core.eventbus.ReplyFailure[] values()> ==> <io.vertx.core.net.PemTrustOptions: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.eventbus.ReplyFailure: io.vertx.core.eventbus.ReplyFailure[] values()> ==> <java.lang.Enum: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.eventbus.ReplyFailure: io.vertx.core.eventbus.ReplyFailure[] values()> ==> <java.util.TreeMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.eventbus.ReplyFailure: io.vertx.core.eventbus.ReplyFailure[] values()> ==> <java.util.jar.Attributes: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.eventbus.ReplyFailure: io.vertx.core.eventbus.ReplyFailure[] values()> ==> <java.util.EnumMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.eventbus.ReplyFailure: io.vertx.core.eventbus.ReplyFailure[] values()> ==> <java.util.TreeSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.eventbus.ReplyFailure: io.vertx.core.eventbus.ReplyFailure[] values()> ==> <java.util.ArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.eventbus.ReplyFailure: io.vertx.core.eventbus.ReplyFailure[] values()> ==> <java.util.HashSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.eventbus.ReplyFailure: io.vertx.core.eventbus.ReplyFailure[] values()> ==> <java.util.Hashtable: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.eventbus.ReplyFailure: io.vertx.core.eventbus.ReplyFailure[] values()> ==> <java.util.ArrayDeque: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.eventbus.ReplyFailure: io.vertx.core.eventbus.ReplyFailure[] values()> ==> <io.vertx.core.net.PemKeyCertOptions: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.eventbus.ReplyFailure: io.vertx.core.eventbus.ReplyFailure[] values()> ==> <io.vertx.core.net.JdkSSLEngineOptions: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.eventbus.ReplyFailure: io.vertx.core.eventbus.ReplyFailure[] values()> ==> <java.util.jar.Manifest: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.eventbus.ReplyFailure: io.vertx.core.eventbus.ReplyFailure[] values()> ==> <io.vertx.core.net.JksOptions: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.eventbus.ReplyFailure: io.vertx.core.eventbus.ReplyFailure[] values()> ==> <io.vertx.core.net.OpenSSLEngineOptions: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.eventbus.ReplyFailure: io.vertx.core.eventbus.ReplyFailure[] values()> ==> <java.util.concurrent.CopyOnWriteArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.eventbus.ReplyFailure: io.vertx.core.eventbus.ReplyFailure[] values()> ==> <io.vertx.core.net.PfxOptions: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.eventbus.ReplyFailure: io.vertx.core.eventbus.ReplyFailure[] values()> ==> <java.util.Date: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.eventbus.ReplyFailure: io.vertx.core.eventbus.ReplyFailure[] values()> ==> <java.util.Locale: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.eventbus.ReplyFailure: io.vertx.core.eventbus.ReplyFailure[] values()> ==> <java.util.zip.ZipEntry: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.eventbus.ReplyFailure: io.vertx.core.eventbus.ReplyFailure[] values()> ==> <java.util.AbstractMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.eventbus.ReplyFailure: io.vertx.core.eventbus.ReplyFailure[] values()> ==> <java.util.LinkedList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.vertx.core.eventbus.ReplyFailure: io.vertx.core.eventbus.ReplyFailure[] values()> ==> <java.util.IdentityHashMap: java.lang.Object clone()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char charValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<io.vertx.core.net.ClientOptionsBase: boolean isTcpFastOpen()>() in <io.vertx.core.net.impl.transport.EpollTransport: void configure(io.vertx.core.net.ClientOptionsBase,boolean,io.netty.bootstrap.Bootstrap)> ==> <io.vertx.core.net.TCPSSLOptions: boolean isTcpFastOpen()>
VIRTUAL edge: $z4 = virtualinvoke r0.<io.vertx.core.net.ClientOptionsBase: boolean isTcpFastOpen()>() in <io.vertx.core.net.impl.transport.EpollTransport: void configure(io.vertx.core.net.ClientOptionsBase,boolean,io.netty.bootstrap.Bootstrap)> ==> <io.vertx.core.net.TCPSSLOptions: boolean isTcpFastOpen()>
VIRTUAL edge: $z1 = virtualinvoke r0.<io.vertx.core.net.ClientOptionsBase: boolean isTcpQuickAck()>() in <io.vertx.core.net.impl.transport.EpollTransport: void configure(io.vertx.core.net.ClientOptionsBase,boolean,io.netty.bootstrap.Bootstrap)> ==> <io.vertx.core.net.TCPSSLOptions: boolean isTcpQuickAck()>
VIRTUAL edge: $z2 = virtualinvoke r0.<io.vertx.core.net.ClientOptionsBase: boolean isTcpCork()>() in <io.vertx.core.net.impl.transport.EpollTransport: void configure(io.vertx.core.net.ClientOptionsBase,boolean,io.netty.bootstrap.Bootstrap)> ==> <io.vertx.core.net.TCPSSLOptions: boolean isTcpCork()>
SPECIAL edge: specialinvoke r8.<io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.ClientOptionsBase,boolean,io.netty.bootstrap.Bootstrap)>(r0, z3, r1) in <io.vertx.core.net.impl.transport.EpollTransport: void configure(io.vertx.core.net.ClientOptionsBase,boolean,io.netty.bootstrap.Bootstrap)> ==> <io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.ClientOptionsBase,boolean,io.netty.bootstrap.Bootstrap)>
VIRTUAL edge: $z1 = virtualinvoke r0.<io.vertx.core.net.ClientOptionsBase: boolean isReuseAddress()>() in <io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.ClientOptionsBase,boolean,io.netty.bootstrap.Bootstrap)> ==> <io.vertx.core.net.NetworkOptions: boolean isReuseAddress()>
VIRTUAL edge: $z2 = virtualinvoke r0.<io.vertx.core.net.ClientOptionsBase: boolean isTcpNoDelay()>() in <io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.ClientOptionsBase,boolean,io.netty.bootstrap.Bootstrap)> ==> <io.vertx.core.net.TCPSSLOptions: boolean isTcpNoDelay()>
VIRTUAL edge: $z3 = virtualinvoke r0.<io.vertx.core.net.ClientOptionsBase: boolean isTcpKeepAlive()>() in <io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.ClientOptionsBase,boolean,io.netty.bootstrap.Bootstrap)> ==> <io.vertx.core.net.TCPSSLOptions: boolean isTcpKeepAlive()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.vertx.core.net.ClientOptionsBase: java.lang.String getLocalAddress()>() in <io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.ClientOptionsBase,boolean,io.netty.bootstrap.Bootstrap)> ==> <io.vertx.core.net.ClientOptionsBase: java.lang.String getLocalAddress()>
VIRTUAL edge: $r24 = virtualinvoke r0.<io.vertx.core.net.ClientOptionsBase: java.lang.String getLocalAddress()>() in <io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.ClientOptionsBase,boolean,io.netty.bootstrap.Bootstrap)> ==> <io.vertx.core.net.ClientOptionsBase: java.lang.String getLocalAddress()>
VIRTUAL edge: $i0 = virtualinvoke r0.<io.vertx.core.net.ClientOptionsBase: int getSendBufferSize()>() in <io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.ClientOptionsBase,boolean,io.netty.bootstrap.Bootstrap)> ==> <io.vertx.core.net.NetworkOptions: int getSendBufferSize()>
VIRTUAL edge: $i9 = virtualinvoke r0.<io.vertx.core.net.ClientOptionsBase: int getSendBufferSize()>() in <io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.ClientOptionsBase,boolean,io.netty.bootstrap.Bootstrap)> ==> <io.vertx.core.net.NetworkOptions: int getSendBufferSize()>
VIRTUAL edge: $i1 = virtualinvoke r0.<io.vertx.core.net.ClientOptionsBase: int getReceiveBufferSize()>() in <io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.ClientOptionsBase,boolean,io.netty.bootstrap.Bootstrap)> ==> <io.vertx.core.net.NetworkOptions: int getReceiveBufferSize()>
VIRTUAL edge: $i7 = virtualinvoke r0.<io.vertx.core.net.ClientOptionsBase: int getReceiveBufferSize()>() in <io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.ClientOptionsBase,boolean,io.netty.bootstrap.Bootstrap)> ==> <io.vertx.core.net.NetworkOptions: int getReceiveBufferSize()>
VIRTUAL edge: $i8 = virtualinvoke r0.<io.vertx.core.net.ClientOptionsBase: int getReceiveBufferSize()>() in <io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.ClientOptionsBase,boolean,io.netty.bootstrap.Bootstrap)> ==> <io.vertx.core.net.NetworkOptions: int getReceiveBufferSize()>
VIRTUAL edge: $i2 = virtualinvoke r0.<io.vertx.core.net.ClientOptionsBase: int getSoLinger()>() in <io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.ClientOptionsBase,boolean,io.netty.bootstrap.Bootstrap)> ==> <io.vertx.core.net.TCPSSLOptions: int getSoLinger()>
VIRTUAL edge: $i6 = virtualinvoke r0.<io.vertx.core.net.ClientOptionsBase: int getSoLinger()>() in <io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.ClientOptionsBase,boolean,io.netty.bootstrap.Bootstrap)> ==> <io.vertx.core.net.TCPSSLOptions: int getSoLinger()>
VIRTUAL edge: $i3 = virtualinvoke r0.<io.vertx.core.net.ClientOptionsBase: int getTrafficClass()>() in <io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.ClientOptionsBase,boolean,io.netty.bootstrap.Bootstrap)> ==> <io.vertx.core.net.NetworkOptions: int getTrafficClass()>
VIRTUAL edge: $i5 = virtualinvoke r0.<io.vertx.core.net.ClientOptionsBase: int getTrafficClass()>() in <io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.ClientOptionsBase,boolean,io.netty.bootstrap.Bootstrap)> ==> <io.vertx.core.net.NetworkOptions: int getTrafficClass()>
VIRTUAL edge: $i4 = virtualinvoke r0.<io.vertx.core.net.ClientOptionsBase: int getConnectTimeout()>() in <io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.ClientOptionsBase,boolean,io.netty.bootstrap.Bootstrap)> ==> <io.vertx.core.net.ClientOptionsBase: int getConnectTimeout()>
SPECIAL edge: specialinvoke $r18.<io.netty.channel.FixedRecvByteBufAllocator: void <init>(int)>($i8) in <io.vertx.core.net.impl.transport.Transport: void configure(io.vertx.core.net.ClientOptionsBase,boolean,io.netty.bootstrap.Bootstrap)> ==> <io.netty.channel.FixedRecvByteBufAllocator: void <init>(int)>
INTERFACE edge: r2 = interfaceinvoke $r1.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.VertxInternal owner()>() in <io.vertx.core.net.impl.ChannelProvider: void handleProxyConnect(io.vertx.core.net.SocketAddress,io.vertx.core.net.SocketAddress,java.lang.String,io.vertx.core.Handler)> ==> <io.vertx.core.impl.ContextImpl: io.vertx.core.impl.VertxInternal owner()>
INTERFACE edge: r2 = interfaceinvoke $r1.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.VertxInternal owner()>() in <io.vertx.core.net.impl.ChannelProvider: void handleProxyConnect(io.vertx.core.net.SocketAddress,io.vertx.core.net.SocketAddress,java.lang.String,io.vertx.core.Handler)> ==> <io.vertx.core.impl.EventLoopContext: io.vertx.core.impl.VertxInternal owner()>
VIRTUAL edge: r4 = virtualinvoke $r3.<io.vertx.core.net.ProxyOptions: java.lang.String getHost()>() in <io.vertx.core.net.impl.ChannelProvider: void handleProxyConnect(io.vertx.core.net.SocketAddress,io.vertx.core.net.SocketAddress,java.lang.String,io.vertx.core.Handler)> ==> <io.vertx.core.net.ProxyOptions: java.lang.String getHost()>
VIRTUAL edge: i0 = virtualinvoke $r5.<io.vertx.core.net.ProxyOptions: int getPort()>() in <io.vertx.core.net.impl.ChannelProvider: void handleProxyConnect(io.vertx.core.net.SocketAddress,io.vertx.core.net.SocketAddress,java.lang.String,io.vertx.core.Handler)> ==> <io.vertx.core.net.ProxyOptions: int getPort()>
VIRTUAL edge: r7 = virtualinvoke $r6.<io.vertx.core.net.ProxyOptions: java.lang.String getUsername()>() in <io.vertx.core.net.impl.ChannelProvider: void handleProxyConnect(io.vertx.core.net.SocketAddress,io.vertx.core.net.SocketAddress,java.lang.String,io.vertx.core.Handler)> ==> <io.vertx.core.net.ProxyOptions: java.lang.String getUsername()>
VIRTUAL edge: r9 = virtualinvoke $r8.<io.vertx.core.net.ProxyOptions: java.lang.String getPassword()>() in <io.vertx.core.net.impl.ChannelProvider: void handleProxyConnect(io.vertx.core.net.SocketAddress,io.vertx.core.net.SocketAddress,java.lang.String,io.vertx.core.Handler)> ==> <io.vertx.core.net.ProxyOptions: java.lang.String getPassword()>
VIRTUAL edge: r11 = virtualinvoke $r10.<io.vertx.core.net.ProxyOptions: io.vertx.core.net.ProxyType getType()>() in <io.vertx.core.net.impl.ChannelProvider: void handleProxyConnect(io.vertx.core.net.SocketAddress,io.vertx.core.net.SocketAddress,java.lang.String,io.vertx.core.Handler)> ==> <io.vertx.core.net.ProxyOptions: io.vertx.core.net.ProxyType getType()>
INTERFACE edge: interfaceinvoke r2.<io.vertx.core.impl.VertxInternal: void resolveAddress(java.lang.String,io.vertx.core.Handler)>(r4, $r16) in <io.vertx.core.net.impl.ChannelProvider: void handleProxyConnect(io.vertx.core.net.SocketAddress,io.vertx.core.net.SocketAddress,java.lang.String,io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl: void resolveAddress(java.lang.String,io.vertx.core.Handler)>
INTERFACE edge: r2 = interfaceinvoke $r1.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.VertxInternal owner()>() in <io.vertx.core.net.impl.ChannelProvider: void handleConnect(io.vertx.core.net.SocketAddress,io.vertx.core.net.SocketAddress,java.lang.String,io.vertx.core.Handler)> ==> <io.vertx.core.impl.ContextImpl: io.vertx.core.impl.VertxInternal owner()>
INTERFACE edge: r2 = interfaceinvoke $r1.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.VertxInternal owner()>() in <io.vertx.core.net.impl.ChannelProvider: void handleConnect(io.vertx.core.net.SocketAddress,io.vertx.core.net.SocketAddress,java.lang.String,io.vertx.core.Handler)> ==> <io.vertx.core.impl.EventLoopContext: io.vertx.core.impl.VertxInternal owner()>
INTERFACE edge: $r4 = interfaceinvoke r2.<io.vertx.core.impl.VertxInternal: io.netty.resolver.AddressResolverGroup nettyAddressResolverGroup()>() in <io.vertx.core.net.impl.ChannelProvider: void handleConnect(io.vertx.core.net.SocketAddress,io.vertx.core.net.SocketAddress,java.lang.String,io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl: io.netty.resolver.AddressResolverGroup nettyAddressResolverGroup()>
INTERFACE edge: $r13 = interfaceinvoke r2.<io.vertx.core.impl.VertxInternal: io.vertx.core.net.impl.transport.Transport transport()>() in <io.vertx.core.net.impl.ChannelProvider: void handleConnect(io.vertx.core.net.SocketAddress,io.vertx.core.net.SocketAddress,java.lang.String,io.vertx.core.Handler)> ==> <io.vertx.core.impl.VertxImpl: io.vertx.core.net.impl.transport.Transport transport()>
SPECIAL edge: specialinvoke $r19.<io.vertx.core.net.impl.ChannelProvider$2: void <init>(io.vertx.core.net.impl.ChannelProvider,io.vertx.core.net.SocketAddress,java.lang.String,io.vertx.core.Handler)>(r0, r7, r8, r9) in <io.vertx.core.net.impl.ChannelProvider: void handleConnect(io.vertx.core.net.SocketAddress,io.vertx.core.net.SocketAddress,java.lang.String,io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.ChannelProvider$2: void <init>(io.vertx.core.net.impl.ChannelProvider,io.vertx.core.net.SocketAddress,java.lang.String,io.vertx.core.Handler)>
VIRTUAL edge: $r15 = virtualinvoke $r13.<io.vertx.core.net.impl.transport.Transport: java.net.SocketAddress convert(io.vertx.core.net.SocketAddress,boolean)>(r14, 0) in <io.vertx.core.net.impl.ChannelProvider: void handleConnect(io.vertx.core.net.SocketAddress,io.vertx.core.net.SocketAddress,java.lang.String,io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.transport.EpollTransport: java.net.SocketAddress convert(io.vertx.core.net.SocketAddress,boolean)>
VIRTUAL edge: $r15 = virtualinvoke $r13.<io.vertx.core.net.impl.transport.Transport: java.net.SocketAddress convert(io.vertx.core.net.SocketAddress,boolean)>(r14, 0) in <io.vertx.core.net.impl.ChannelProvider: void handleConnect(io.vertx.core.net.SocketAddress,io.vertx.core.net.SocketAddress,java.lang.String,io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.transport.KQueueTransport: java.net.SocketAddress convert(io.vertx.core.net.SocketAddress,boolean)>
VIRTUAL edge: $r15 = virtualinvoke $r13.<io.vertx.core.net.impl.transport.Transport: java.net.SocketAddress convert(io.vertx.core.net.SocketAddress,boolean)>(r14, 0) in <io.vertx.core.net.impl.ChannelProvider: void handleConnect(io.vertx.core.net.SocketAddress,io.vertx.core.net.SocketAddress,java.lang.String,io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.transport.Transport: java.net.SocketAddress convert(io.vertx.core.net.SocketAddress,boolean)>
INTERFACE edge: interfaceinvoke r16.<io.netty.channel.ChannelFuture: io.netty.channel.ChannelFuture addListener(io.netty.util.concurrent.GenericFutureListener)>($r17) in <io.vertx.core.net.impl.ChannelProvider: void handleConnect(io.vertx.core.net.SocketAddress,io.vertx.core.net.SocketAddress,java.lang.String,io.vertx.core.Handler)> ==> <io.netty.channel.ChannelFuture: io.netty.channel.ChannelFuture addListener(io.netty.util.concurrent.GenericFutureListener)>
SPECIAL edge: specialinvoke $r9.<io.vertx.core.net.impl.ChannelProvider$lambda_handleProxyConnect_4__147: void <init>(io.vertx.core.net.impl.ChannelProvider,int,io.vertx.core.net.ProxyType,java.lang.String,java.lang.String,io.vertx.core.impl.VertxInternal,io.vertx.core.net.SocketAddress,io.vertx.core.net.SocketAddress,java.lang.String,io.vertx.core.Handler)>($r0, $i0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8) in <io.vertx.core.net.impl.ChannelProvider$lambda_handleProxyConnect_4__147: io.vertx.core.Handler bootstrap$(io.vertx.core.net.impl.ChannelProvider,int,io.vertx.core.net.ProxyType,java.lang.String,java.lang.String,io.vertx.core.impl.VertxInternal,io.vertx.core.net.SocketAddress,io.vertx.core.net.SocketAddress,java.lang.String,io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.ChannelProvider$lambda_handleProxyConnect_4__147: void <init>(io.vertx.core.net.impl.ChannelProvider,int,io.vertx.core.net.ProxyType,java.lang.String,java.lang.String,io.vertx.core.impl.VertxInternal,io.vertx.core.net.SocketAddress,io.vertx.core.net.SocketAddress,java.lang.String,io.vertx.core.Handler)>
SPECIAL edge: specialinvoke $r3.<io.vertx.core.net.impl.ChannelProvider$lambda_handleConnect_2__148: void <init>(io.vertx.core.net.impl.ChannelProvider,io.netty.channel.ChannelFuture,io.vertx.core.Handler)>($r0, $r1, $r2) in <io.vertx.core.net.impl.ChannelProvider$lambda_handleConnect_2__148: io.netty.util.concurrent.GenericFutureListener bootstrap$(io.vertx.core.net.impl.ChannelProvider,io.netty.channel.ChannelFuture,io.vertx.core.Handler)> ==> <io.vertx.core.net.impl.ChannelProvider$lambda_handleConnect_2__148: void <init>(io.vertx.core.net.impl.ChannelProvider,io.netty.channel.ChannelFuture,io.vertx.core.Handler)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.impl.transport.EpollTransport$init__142: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.impl.transport.EpollTransport$init__141: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.impl.transport.KQueueTransport$init__144: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.impl.transport.KQueueTransport$init__143: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.impl.transport.Transport$init__145: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.impl.ChannelProvider$lambda_connect_1__146: void <init>(io.vertx.core.net.impl.ChannelProvider,io.vertx.core.Handler)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: $r1 = specialinvoke r0.<io.vertx.core.impl.ContextImpl: io.vertx.core.impl.VertxInternal owner()>() in <io.vertx.core.impl.EventLoopContext: io.vertx.core.impl.VertxInternal owner()> ==> <io.vertx.core.impl.ContextImpl: io.vertx.core.impl.VertxInternal owner()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<io.vertx.core.impl.AddressResolver: io.netty.resolver.AddressResolverGroup nettyAddressResolverGroup()>() in <io.vertx.core.impl.VertxImpl: io.netty.resolver.AddressResolverGroup nettyAddressResolverGroup()> ==> <io.vertx.core.impl.AddressResolver: io.netty.resolver.AddressResolverGroup nettyAddressResolverGroup()>
SPECIAL edge: specialinvoke r0.<io.netty.channel.ChannelInitializer: void <init>()>() in <io.vertx.core.net.impl.ChannelProvider$2: void <init>(io.vertx.core.net.impl.ChannelProvider,io.vertx.core.net.SocketAddress,java.lang.String,io.vertx.core.Handler)> ==> <io.netty.channel.ChannelInitializer: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.impl.ChannelProvider$lambda_handleProxyConnect_4__147: void <init>(io.vertx.core.net.impl.ChannelProvider,int,io.vertx.core.net.ProxyType,java.lang.String,java.lang.String,io.vertx.core.impl.VertxInternal,io.vertx.core.net.SocketAddress,io.vertx.core.net.SocketAddress,java.lang.String,io.vertx.core.Handler)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.vertx.core.net.impl.ChannelProvider$lambda_handleConnect_2__148: void <init>(io.vertx.core.net.impl.ChannelProvider,io.netty.channel.ChannelFuture,io.vertx.core.Handler)> ==> <java.lang.Object: void <init>()>
