CLINIT edge: staticinvoke <com.ineunet.knife.util.Base64: void usage(java.lang.String)>("Not enough arguments.") in <com.ineunet.knife.util.Base64: void main(java.lang.String[])> ==> <com.ineunet.knife.util.Base64: void <clinit>()>
STATIC edge: staticinvoke <com.ineunet.knife.util.Base64: void usage(java.lang.String)>($r7) in <com.ineunet.knife.util.Base64: void main(java.lang.String[])> ==> <com.ineunet.knife.util.Base64: void usage(java.lang.String)>
STATIC edge: staticinvoke <com.ineunet.knife.util.Base64: void decodeFileToFile(java.lang.String,java.lang.String)>(r2, r3) in <com.ineunet.knife.util.Base64: void main(java.lang.String[])> ==> <com.ineunet.knife.util.Base64: void decodeFileToFile(java.lang.String,java.lang.String)>
STATIC edge: staticinvoke <com.ineunet.knife.util.Base64: void encodeFileToFile(java.lang.String,java.lang.String)>(r2, r3) in <com.ineunet.knife.util.Base64: void main(java.lang.String[])> ==> <com.ineunet.knife.util.Base64: void encodeFileToFile(java.lang.String,java.lang.String)>
STATIC edge: staticinvoke <com.ineunet.knife.util.Base64: void usage(java.lang.String)>("Not enough arguments.") in <com.ineunet.knife.util.Base64: void main(java.lang.String[])> ==> <com.ineunet.knife.util.Base64: void usage(java.lang.String)>
CLINIT edge: staticinvoke <com.ineunet.knife.util.Base64: void usage(java.lang.String)>($r7) in <com.ineunet.knife.util.Base64: void main(java.lang.String[])> ==> <com.ineunet.knife.util.Base64: void <clinit>()>
CLINIT edge: staticinvoke <com.ineunet.knife.util.Base64: void decodeFileToFile(java.lang.String,java.lang.String)>(r2, r3) in <com.ineunet.knife.util.Base64: void main(java.lang.String[])> ==> <com.ineunet.knife.util.Base64: void <clinit>()>
CLINIT edge: staticinvoke <com.ineunet.knife.util.Base64: void encodeFileToFile(java.lang.String,java.lang.String)>(r2, r3) in <com.ineunet.knife.util.Base64: void main(java.lang.String[])> ==> <com.ineunet.knife.util.Base64: void <clinit>()>
CLINIT edge: <com.ineunet.knife.util.Base64: byte[] _STANDARD_ALPHABET> = $r0 in <com.ineunet.knife.util.Base64: void <clinit>()> ==> <com.ineunet.knife.util.Base64: void <clinit>()>
CLINIT edge: $r1 = <java.lang.System: java.io.PrintStream err> in <com.ineunet.knife.util.Base64: void usage(java.lang.String)> ==> <java.lang.System: void <clinit>()>
CLINIT edge: r1 = staticinvoke <com.ineunet.knife.util.Base64: byte[] decodeFromFile(java.lang.String)>(r0) in <com.ineunet.knife.util.Base64: void decodeFileToFile(java.lang.String,java.lang.String)> ==> <com.ineunet.knife.util.Base64: void <clinit>()>
STATIC edge: r1 = staticinvoke <com.ineunet.knife.util.Base64: byte[] decodeFromFile(java.lang.String)>(r0) in <com.ineunet.knife.util.Base64: void decodeFileToFile(java.lang.String,java.lang.String)> ==> <com.ineunet.knife.util.Base64: byte[] decodeFromFile(java.lang.String)>
CLINIT edge: r1 = staticinvoke <com.ineunet.knife.util.Base64: java.lang.String encodeFromFile(java.lang.String)>(r0) in <com.ineunet.knife.util.Base64: void encodeFileToFile(java.lang.String,java.lang.String)> ==> <com.ineunet.knife.util.Base64: void <clinit>()>
STATIC edge: r1 = staticinvoke <com.ineunet.knife.util.Base64: java.lang.String encodeFromFile(java.lang.String)>(r0) in <com.ineunet.knife.util.Base64: void encodeFileToFile(java.lang.String,java.lang.String)> ==> <com.ineunet.knife.util.Base64: java.lang.String encodeFromFile(java.lang.String)>
CLINIT edge: $r0 = new java.io.File in <com.ineunet.knife.util.Base64: byte[] decodeFromFile(java.lang.String)> ==> <java.io.File: void <clinit>()>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r26, 0, r23, 0, i6) in <com.ineunet.knife.util.Base64: byte[] decodeFromFile(java.lang.String)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
CLINIT edge: $r17 = <java.lang.System: java.io.PrintStream err> in <com.ineunet.knife.util.Base64: byte[] decodeFromFile(java.lang.String)> ==> <java.lang.System: void <clinit>()>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r26, 0, r23, 0, i6) in <com.ineunet.knife.util.Base64: byte[] decodeFromFile(java.lang.String)> ==> <java.lang.System: void <clinit>()>
CLINIT edge: $r6 = <java.lang.System: java.io.PrintStream err> in <com.ineunet.knife.util.Base64: byte[] decodeFromFile(java.lang.String)> ==> <java.lang.System: void <clinit>()>
CLINIT edge: $r0 = new java.io.File in <com.ineunet.knife.util.Base64: java.lang.String encodeFromFile(java.lang.String)> ==> <java.io.File: void <clinit>()>
STATIC edge: $i2 = staticinvoke <java.lang.Math: int max(int,int)>($i1, 40) in <com.ineunet.knife.util.Base64: java.lang.String encodeFromFile(java.lang.String)> ==> <java.lang.Math: int max(int,int)>
CLINIT edge: $r14 = <java.lang.System: java.io.PrintStream err> in <com.ineunet.knife.util.Base64: java.lang.String encodeFromFile(java.lang.String)> ==> <java.lang.System: void <clinit>()>
CLINIT edge: $r6 = new java.lang.String in <com.ineunet.knife.util.Base64: java.lang.String encodeFromFile(java.lang.String)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: <java.lang.String: java.util.Comparator CASE_INSENSITIVE_ORDER> = null in <java.lang.String: void <clinit>()> ==> <java.lang.String: void <clinit>()>
VIRTUAL edge: $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("-e") in <com.ineunet.knife.util.Base64: void main(java.lang.String[])> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("-d") in <com.ineunet.knife.util.Base64: void main(java.lang.String[])> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r4.<java.lang.StringBuilder: void <init>()>() in <com.ineunet.knife.util.Base64: void main(java.lang.String[])> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown flag: ") in <com.ineunet.knife.util.Base64: void main(java.lang.String[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <com.ineunet.knife.util.Base64: void main(java.lang.String[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>() in <com.ineunet.knife.util.Base64: void main(java.lang.String[])> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
FINALIZE edge: null in <java.lang.Object: void <init>()> ==> <java.lang.Object: void finalize()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>(r0) in <com.ineunet.knife.util.Base64: void usage(java.lang.String)> ==> <java.io.PrintStream: void println(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>("Usage: java Base64 -e|-d inputfile outputfile") in <com.ineunet.knife.util.Base64: void usage(java.lang.String)> ==> <java.io.PrintStream: void println(java.lang.String)>
SPECIAL edge: specialinvoke $r16.<java.io.FileOutputStream: void <init>(java.lang.String)>(r4) in <com.ineunet.knife.util.Base64: void decodeFileToFile(java.lang.String,java.lang.String)> ==> <java.io.FileOutputStream: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r17.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r16) in <com.ineunet.knife.util.Base64: void decodeFileToFile(java.lang.String,java.lang.String)> ==> <java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>
VIRTUAL edge: virtualinvoke $r17.<java.io.OutputStream: void write(byte[])>(r1) in <com.ineunet.knife.util.Base64: void decodeFileToFile(java.lang.String,java.lang.String)> ==> <java.io.OutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke $r17.<java.io.OutputStream: void close()>() in <com.ineunet.knife.util.Base64: void decodeFileToFile(java.lang.String,java.lang.String)> ==> <java.io.BufferedOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r18.<java.io.IOException: void printStackTrace()>() in <com.ineunet.knife.util.Base64: void decodeFileToFile(java.lang.String,java.lang.String)> ==> <java.io.IOException: void printStackTrace()>
VIRTUAL edge: virtualinvoke r12.<java.io.OutputStream: void close()>() in <com.ineunet.knife.util.Base64: void decodeFileToFile(java.lang.String,java.lang.String)> ==> <java.io.BufferedOutputStream: void close()>
VIRTUAL edge: virtualinvoke r12.<java.io.OutputStream: void close()>() in <com.ineunet.knife.util.Base64: void decodeFileToFile(java.lang.String,java.lang.String)> ==> <java.io.BufferedOutputStream: void close()>
SPECIAL edge: specialinvoke $r17.<java.io.FileOutputStream: void <init>(java.lang.String)>(r4) in <com.ineunet.knife.util.Base64: void encodeFileToFile(java.lang.String,java.lang.String)> ==> <java.io.FileOutputStream: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r18.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r17) in <com.ineunet.knife.util.Base64: void encodeFileToFile(java.lang.String,java.lang.String)> ==> <java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>
VIRTUAL edge: virtualinvoke $r18.<java.io.OutputStream: void write(byte[])>($r5) in <com.ineunet.knife.util.Base64: void encodeFileToFile(java.lang.String,java.lang.String)> ==> <java.io.OutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke $r18.<java.io.OutputStream: void close()>() in <com.ineunet.knife.util.Base64: void encodeFileToFile(java.lang.String,java.lang.String)> ==> <java.io.BufferedOutputStream: void close()>
VIRTUAL edge: $r5 = virtualinvoke r1.<java.lang.String: byte[] getBytes(java.lang.String)>("US-ASCII") in <com.ineunet.knife.util.Base64: void encodeFileToFile(java.lang.String,java.lang.String)> ==> <java.lang.String: byte[] getBytes(java.lang.String)>
VIRTUAL edge: virtualinvoke $r19.<java.io.IOException: void printStackTrace()>() in <com.ineunet.knife.util.Base64: void encodeFileToFile(java.lang.String,java.lang.String)> ==> <java.io.IOException: void printStackTrace()>
VIRTUAL edge: virtualinvoke r13.<java.io.OutputStream: void close()>() in <com.ineunet.knife.util.Base64: void encodeFileToFile(java.lang.String,java.lang.String)> ==> <java.io.BufferedOutputStream: void close()>
VIRTUAL edge: virtualinvoke r13.<java.io.OutputStream: void close()>() in <com.ineunet.knife.util.Base64: void encodeFileToFile(java.lang.String,java.lang.String)> ==> <java.io.BufferedOutputStream: void close()>
SPECIAL edge: specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>(r1) in <com.ineunet.knife.util.Base64: byte[] decodeFromFile(java.lang.String)> ==> <java.io.File: void <init>(java.lang.String)>
VIRTUAL edge: $l0 = virtualinvoke $r0.<java.io.File: long length()>() in <com.ineunet.knife.util.Base64: byte[] decodeFromFile(java.lang.String)> ==> <java.io.File: long length()>
VIRTUAL edge: $l5 = virtualinvoke $r0.<java.io.File: long length()>() in <com.ineunet.knife.util.Base64: byte[] decodeFromFile(java.lang.String)> ==> <java.io.File: long length()>
VIRTUAL edge: $l2 = virtualinvoke $r0.<java.io.File: long length()>() in <com.ineunet.knife.util.Base64: byte[] decodeFromFile(java.lang.String)> ==> <java.io.File: long length()>
SPECIAL edge: specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() in <com.ineunet.knife.util.Base64: byte[] decodeFromFile(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File is too big for this convenience method (") in <com.ineunet.knife.util.Base64: byte[] decodeFromFile(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l5) in <com.ineunet.knife.util.Base64: byte[] decodeFromFile(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(long)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes).") in <com.ineunet.knife.util.Base64: byte[] decodeFromFile(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <com.ineunet.knife.util.Base64: byte[] decodeFromFile(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r10) in <com.ineunet.knife.util.Base64: byte[] decodeFromFile(java.lang.String)> ==> <java.io.PrintStream: void println(java.lang.String)>
VIRTUAL edge: virtualinvoke r24.<com.ineunet.knife.util.Base64$InputStream: void close()>() in <com.ineunet.knife.util.Base64: byte[] decodeFromFile(java.lang.String)> ==> <java.io.FilterInputStream: void close()>
VIRTUAL edge: virtualinvoke r24.<com.ineunet.knife.util.Base64$InputStream: void close()>() in <com.ineunet.knife.util.Base64: byte[] decodeFromFile(java.lang.String)> ==> <java.io.FilterInputStream: void close()>
VIRTUAL edge: virtualinvoke r24.<com.ineunet.knife.util.Base64$InputStream: void close()>() in <com.ineunet.knife.util.Base64: byte[] decodeFromFile(java.lang.String)> ==> <java.io.FilterInputStream: void close()>
SPECIAL edge: specialinvoke $r4.<java.io.FileInputStream: void <init>(java.io.File)>($r0) in <com.ineunet.knife.util.Base64: byte[] decodeFromFile(java.lang.String)> ==> <java.io.FileInputStream: void <init>(java.io.File)>
SPECIAL edge: specialinvoke $r3.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r4) in <com.ineunet.knife.util.Base64: byte[] decodeFromFile(java.lang.String)> ==> <java.io.BufferedInputStream: void <init>(java.io.InputStream)>
SPECIAL edge: specialinvoke $r2.<com.ineunet.knife.util.Base64$InputStream: void <init>(java.io.InputStream,int)>($r3, 0) in <com.ineunet.knife.util.Base64: byte[] decodeFromFile(java.lang.String)> ==> <com.ineunet.knife.util.Base64$InputStream: void <init>(java.io.InputStream,int)>
VIRTUAL edge: $i4 = virtualinvoke $r2.<com.ineunet.knife.util.Base64$InputStream: int read(byte[],int,int)>(r26, i6, 4096) in <com.ineunet.knife.util.Base64: byte[] decodeFromFile(java.lang.String)> ==> <com.ineunet.knife.util.Base64$InputStream: int read(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<com.ineunet.knife.util.Base64$InputStream: void close()>() in <com.ineunet.knife.util.Base64: byte[] decodeFromFile(java.lang.String)> ==> <java.io.FilterInputStream: void close()>
SPECIAL edge: specialinvoke $r16.<java.lang.StringBuilder: void <init>()>() in <com.ineunet.knife.util.Base64: byte[] decodeFromFile(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error decoding from file ") in <com.ineunet.knife.util.Base64: byte[] decodeFromFile(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <com.ineunet.knife.util.Base64: byte[] decodeFromFile(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>() in <com.ineunet.knife.util.Base64: byte[] decodeFromFile(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r17.<java.io.PrintStream: void println(java.lang.String)>($r20) in <com.ineunet.knife.util.Base64: byte[] decodeFromFile(java.lang.String)> ==> <java.io.PrintStream: void println(java.lang.String)>
CLINIT edge: $r3 = staticinvoke <com.ineunet.knife.util.Base64: byte[] access$000(int)>(i0) in <com.ineunet.knife.util.Base64$InputStream: void <init>(java.io.InputStream,int)> ==> <com.ineunet.knife.util.Base64: void <clinit>()>
STATIC edge: $r4 = staticinvoke <com.ineunet.knife.util.Base64: byte[] access$100(int)>(i0) in <com.ineunet.knife.util.Base64$InputStream: void <init>(java.io.InputStream,int)> ==> <com.ineunet.knife.util.Base64: byte[] access$100(int)>
STATIC edge: $r3 = staticinvoke <com.ineunet.knife.util.Base64: byte[] access$000(int)>(i0) in <com.ineunet.knife.util.Base64$InputStream: void <init>(java.io.InputStream,int)> ==> <com.ineunet.knife.util.Base64: byte[] access$000(int)>
CLINIT edge: $r0 = staticinvoke <com.ineunet.knife.util.Base64: byte[] getDecodabet(int)>(i0) in <com.ineunet.knife.util.Base64: byte[] access$100(int)> ==> <com.ineunet.knife.util.Base64: void <clinit>()>
STATIC edge: $r0 = staticinvoke <com.ineunet.knife.util.Base64: byte[] getDecodabet(int)>(i0) in <com.ineunet.knife.util.Base64: byte[] access$100(int)> ==> <com.ineunet.knife.util.Base64: byte[] getDecodabet(int)>
CLINIT edge: $r0 = staticinvoke <com.ineunet.knife.util.Base64: byte[] getAlphabet(int)>(i0) in <com.ineunet.knife.util.Base64: byte[] access$000(int)> ==> <com.ineunet.knife.util.Base64: void <clinit>()>
STATIC edge: $r0 = staticinvoke <com.ineunet.knife.util.Base64: byte[] getAlphabet(int)>(i0) in <com.ineunet.knife.util.Base64: byte[] access$000(int)> ==> <com.ineunet.knife.util.Base64: byte[] getAlphabet(int)>
CLINIT edge: $r2 = <com.ineunet.knife.util.Base64: byte[] _URL_SAFE_DECODABET> in <com.ineunet.knife.util.Base64: byte[] getDecodabet(int)> ==> <com.ineunet.knife.util.Base64: void <clinit>()>
CLINIT edge: $r0 = <com.ineunet.knife.util.Base64: byte[] _STANDARD_DECODABET> in <com.ineunet.knife.util.Base64: byte[] getDecodabet(int)> ==> <com.ineunet.knife.util.Base64: void <clinit>()>
CLINIT edge: $r1 = <com.ineunet.knife.util.Base64: byte[] _ORDERED_DECODABET> in <com.ineunet.knife.util.Base64: byte[] getDecodabet(int)> ==> <com.ineunet.knife.util.Base64: void <clinit>()>
CLINIT edge: $r2 = <com.ineunet.knife.util.Base64: byte[] _URL_SAFE_ALPHABET> in <com.ineunet.knife.util.Base64: byte[] getAlphabet(int)> ==> <com.ineunet.knife.util.Base64: void <clinit>()>
CLINIT edge: $r0 = <com.ineunet.knife.util.Base64: byte[] _STANDARD_ALPHABET> in <com.ineunet.knife.util.Base64: byte[] getAlphabet(int)> ==> <com.ineunet.knife.util.Base64: void <clinit>()>
CLINIT edge: $r1 = <com.ineunet.knife.util.Base64: byte[] _ORDERED_ALPHABET> in <com.ineunet.knife.util.Base64: byte[] getAlphabet(int)> ==> <com.ineunet.knife.util.Base64: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>(r1) in <com.ineunet.knife.util.Base64: java.lang.String encodeFromFile(java.lang.String)> ==> <java.io.File: void <init>(java.lang.String)>
VIRTUAL edge: $l0 = virtualinvoke $r0.<java.io.File: long length()>() in <com.ineunet.knife.util.Base64: java.lang.String encodeFromFile(java.lang.String)> ==> <java.io.File: long length()>
SPECIAL edge: specialinvoke $r5.<java.io.FileInputStream: void <init>(java.io.File)>($r0) in <com.ineunet.knife.util.Base64: java.lang.String encodeFromFile(java.lang.String)> ==> <java.io.FileInputStream: void <init>(java.io.File)>
SPECIAL edge: specialinvoke $r4.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r5) in <com.ineunet.knife.util.Base64: java.lang.String encodeFromFile(java.lang.String)> ==> <java.io.BufferedInputStream: void <init>(java.io.InputStream)>
SPECIAL edge: specialinvoke $r3.<com.ineunet.knife.util.Base64$InputStream: void <init>(java.io.InputStream,int)>($r4, 1) in <com.ineunet.knife.util.Base64: java.lang.String encodeFromFile(java.lang.String)> ==> <com.ineunet.knife.util.Base64$InputStream: void <init>(java.io.InputStream,int)>
VIRTUAL edge: $i3 = virtualinvoke $r3.<com.ineunet.knife.util.Base64$InputStream: int read(byte[],int,int)>(r2, i4, 4096) in <com.ineunet.knife.util.Base64: java.lang.String encodeFromFile(java.lang.String)> ==> <com.ineunet.knife.util.Base64$InputStream: int read(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r3.<com.ineunet.knife.util.Base64$InputStream: void close()>() in <com.ineunet.knife.util.Base64: java.lang.String encodeFromFile(java.lang.String)> ==> <java.io.FilterInputStream: void close()>
SPECIAL edge: specialinvoke $r6.<java.lang.String: void <init>(byte[],int,int,java.lang.String)>(r2, 0, i4, "UTF-8") in <com.ineunet.knife.util.Base64: java.lang.String encodeFromFile(java.lang.String)> ==> <java.lang.String: void <init>(byte[],int,int,java.lang.String)>
SPECIAL edge: specialinvoke $r13.<java.lang.StringBuilder: void <init>()>() in <com.ineunet.knife.util.Base64: java.lang.String encodeFromFile(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error encoding from file ") in <com.ineunet.knife.util.Base64: java.lang.String encodeFromFile(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <com.ineunet.knife.util.Base64: java.lang.String encodeFromFile(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>() in <com.ineunet.knife.util.Base64: java.lang.String encodeFromFile(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r14.<java.io.PrintStream: void println(java.lang.String)>($r17) in <com.ineunet.knife.util.Base64: java.lang.String encodeFromFile(java.lang.String)> ==> <java.io.PrintStream: void println(java.lang.String)>
VIRTUAL edge: virtualinvoke r20.<com.ineunet.knife.util.Base64$InputStream: void close()>() in <com.ineunet.knife.util.Base64: java.lang.String encodeFromFile(java.lang.String)> ==> <java.io.FilterInputStream: void close()>
VIRTUAL edge: virtualinvoke r20.<com.ineunet.knife.util.Base64$InputStream: void close()>() in <com.ineunet.knife.util.Base64: java.lang.String encodeFromFile(java.lang.String)> ==> <java.io.FilterInputStream: void close()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>(java.lang.String)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: void finalize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: byte[] getBytes(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.io.FilterInputStream: void <init>(java.io.InputStream)>(r1) in <com.ineunet.knife.util.Base64$InputStream: void <init>(java.io.InputStream,int)> ==> <java.io.FilterInputStream: void <init>(java.io.InputStream)>
VIRTUAL edge: i1 = virtualinvoke r0.<com.ineunet.knife.util.Base64$InputStream: int read()>() in <com.ineunet.knife.util.Base64$InputStream: int read(byte[],int,int)> ==> <com.ineunet.knife.util.Base64$InputStream: int read()>
CLINIT edge: staticinvoke <com.ineunet.knife.util.Base64: byte[] access$200(byte[],int,int,byte[],int,int)>(r10, 0, i12, $r6, 0, $i10) in <com.ineunet.knife.util.Base64$InputStream: int read()> ==> <com.ineunet.knife.util.Base64: void <clinit>()>
STATIC edge: $i6 = staticinvoke <com.ineunet.knife.util.Base64: int access$300(byte[],int,byte[],int,int)>(r12, 0, $r3, 0, $i5) in <com.ineunet.knife.util.Base64$InputStream: int read()> ==> <com.ineunet.knife.util.Base64: int access$300(byte[],int,byte[],int,int)>
STATIC edge: staticinvoke <com.ineunet.knife.util.Base64: byte[] access$200(byte[],int,int,byte[],int,int)>(r10, 0, i12, $r6, 0, $i10) in <com.ineunet.knife.util.Base64$InputStream: int read()> ==> <com.ineunet.knife.util.Base64: byte[] access$200(byte[],int,int,byte[],int,int)>
CLINIT edge: $i6 = staticinvoke <com.ineunet.knife.util.Base64: int access$300(byte[],int,byte[],int,int)>(r12, 0, $r3, 0, $i5) in <com.ineunet.knife.util.Base64$InputStream: int read()> ==> <com.ineunet.knife.util.Base64: void <clinit>()>
CLINIT edge: $i3 = staticinvoke <com.ineunet.knife.util.Base64: int decode4to3(byte[],int,byte[],int,int)>(r0, i0, r1, i1, i2) in <com.ineunet.knife.util.Base64: int access$300(byte[],int,byte[],int,int)> ==> <com.ineunet.knife.util.Base64: void <clinit>()>
STATIC edge: $i3 = staticinvoke <com.ineunet.knife.util.Base64: int decode4to3(byte[],int,byte[],int,int)>(r0, i0, r1, i1, i2) in <com.ineunet.knife.util.Base64: int access$300(byte[],int,byte[],int,int)> ==> <com.ineunet.knife.util.Base64: int decode4to3(byte[],int,byte[],int,int)>
CLINIT edge: $r2 = staticinvoke <com.ineunet.knife.util.Base64: byte[] encode3to4(byte[],int,int,byte[],int,int)>(r0, i0, i1, r1, i2, i3) in <com.ineunet.knife.util.Base64: byte[] access$200(byte[],int,int,byte[],int,int)> ==> <com.ineunet.knife.util.Base64: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.ineunet.knife.util.Base64: byte[] encode3to4(byte[],int,int,byte[],int,int)>(r0, i0, i1, r1, i2, i3) in <com.ineunet.knife.util.Base64: byte[] access$200(byte[],int,int,byte[],int,int)> ==> <com.ineunet.knife.util.Base64: byte[] encode3to4(byte[],int,int,byte[],int,int)>
CLINIT edge: r0 = staticinvoke <com.ineunet.knife.util.Base64: byte[] getDecodabet(int)>(i0) in <com.ineunet.knife.util.Base64: int decode4to3(byte[],int,byte[],int,int)> ==> <com.ineunet.knife.util.Base64: void <clinit>()>
STATIC edge: r0 = staticinvoke <com.ineunet.knife.util.Base64: byte[] getDecodabet(int)>(i0) in <com.ineunet.knife.util.Base64: int decode4to3(byte[],int,byte[],int,int)> ==> <com.ineunet.knife.util.Base64: byte[] getDecodabet(int)>
CLINIT edge: $r5 = <java.lang.System: java.io.PrintStream out> in <com.ineunet.knife.util.Base64: int decode4to3(byte[],int,byte[],int,int)> ==> <java.lang.System: void <clinit>()>
CLINIT edge: r0 = staticinvoke <com.ineunet.knife.util.Base64: byte[] getAlphabet(int)>(i0) in <com.ineunet.knife.util.Base64: byte[] encode3to4(byte[],int,int,byte[],int,int)> ==> <com.ineunet.knife.util.Base64: void <clinit>()>
STATIC edge: r0 = staticinvoke <com.ineunet.knife.util.Base64: byte[] getAlphabet(int)>(i0) in <com.ineunet.knife.util.Base64: byte[] encode3to4(byte[],int,int,byte[],int,int)> ==> <com.ineunet.knife.util.Base64: byte[] getAlphabet(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],int,int,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],int,int,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Exception: void <init>()> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Exception: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: i14 = virtualinvoke $r8.<java.io.InputStream: int read()>() in <com.ineunet.knife.util.Base64$InputStream: int read()> ==> <java.io.FilterInputStream: int read()>
VIRTUAL edge: i14 = virtualinvoke $r8.<java.io.InputStream: int read()>() in <com.ineunet.knife.util.Base64$InputStream: int read()> ==> <java.util.zip.InflaterInputStream: int read()>
VIRTUAL edge: i14 = virtualinvoke $r8.<java.io.InputStream: int read()>() in <com.ineunet.knife.util.Base64$InputStream: int read()> ==> <java.io.BufferedInputStream: int read()>
VIRTUAL edge: i14 = virtualinvoke $r8.<java.io.InputStream: int read()>() in <com.ineunet.knife.util.Base64$InputStream: int read()> ==> <java.io.ByteArrayInputStream: int read()>
VIRTUAL edge: i14 = virtualinvoke $r8.<java.io.InputStream: int read()>() in <com.ineunet.knife.util.Base64$InputStream: int read()> ==> <java.io.ObjectInputStream: int read()>
VIRTUAL edge: i14 = virtualinvoke $r8.<java.io.InputStream: int read()>() in <com.ineunet.knife.util.Base64$InputStream: int read()> ==> <java.io.FileInputStream: int read()>
VIRTUAL edge: i14 = virtualinvoke $r8.<java.io.InputStream: int read()>() in <com.ineunet.knife.util.Base64$InputStream: int read()> ==> <com.ineunet.knife.util.Base64$InputStream: int read()>
VIRTUAL edge: i16 = virtualinvoke $r4.<java.io.InputStream: int read()>() in <com.ineunet.knife.util.Base64$InputStream: int read()> ==> <java.io.FilterInputStream: int read()>
VIRTUAL edge: i16 = virtualinvoke $r4.<java.io.InputStream: int read()>() in <com.ineunet.knife.util.Base64$InputStream: int read()> ==> <java.util.zip.InflaterInputStream: int read()>
VIRTUAL edge: i16 = virtualinvoke $r4.<java.io.InputStream: int read()>() in <com.ineunet.knife.util.Base64$InputStream: int read()> ==> <java.io.BufferedInputStream: int read()>
VIRTUAL edge: i16 = virtualinvoke $r4.<java.io.InputStream: int read()>() in <com.ineunet.knife.util.Base64$InputStream: int read()> ==> <java.io.ByteArrayInputStream: int read()>
VIRTUAL edge: i16 = virtualinvoke $r4.<java.io.InputStream: int read()>() in <com.ineunet.knife.util.Base64$InputStream: int read()> ==> <java.io.ObjectInputStream: int read()>
VIRTUAL edge: i16 = virtualinvoke $r4.<java.io.InputStream: int read()>() in <com.ineunet.knife.util.Base64$InputStream: int read()> ==> <java.io.FileInputStream: int read()>
VIRTUAL edge: i16 = virtualinvoke $r4.<java.io.InputStream: int read()>() in <com.ineunet.knife.util.Base64$InputStream: int read()> ==> <com.ineunet.knife.util.Base64$InputStream: int read()>
SPECIAL edge: specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Improperly padded Base64 input.") in <com.ineunet.knife.util.Base64$InputStream: int read()> ==> <java.io.IOException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("Error in Base64 code reading stream.") in <com.ineunet.knife.util.Base64$InputStream: int read()> ==> <java.io.IOException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r4.<java.lang.StringBuilder: void <init>()>() in <com.ineunet.knife.util.Base64: int decode4to3(byte[],int,byte[],int,int)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("") in <com.ineunet.knife.util.Base64: int decode4to3(byte[],int,byte[],int,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($b65) in <com.ineunet.knife.util.Base64: int decode4to3(byte[],int,byte[],int,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ") in <com.ineunet.knife.util.Base64: int decode4to3(byte[],int,byte[],int,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($b67) in <com.ineunet.knife.util.Base64: int decode4to3(byte[],int,byte[],int,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <com.ineunet.knife.util.Base64: int decode4to3(byte[],int,byte[],int,int)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r10) in <com.ineunet.knife.util.Base64: int decode4to3(byte[],int,byte[],int,int)> ==> <java.io.PrintStream: void println(java.lang.String)>
SPECIAL edge: specialinvoke $r11.<java.lang.StringBuilder: void <init>()>() in <com.ineunet.knife.util.Base64: int decode4to3(byte[],int,byte[],int,int)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("") in <com.ineunet.knife.util.Base64: int decode4to3(byte[],int,byte[],int,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($b69) in <com.ineunet.knife.util.Base64: int decode4to3(byte[],int,byte[],int,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ") in <com.ineunet.knife.util.Base64: int decode4to3(byte[],int,byte[],int,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($b72) in <com.ineunet.knife.util.Base64: int decode4to3(byte[],int,byte[],int,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>() in <com.ineunet.knife.util.Base64: int decode4to3(byte[],int,byte[],int,int)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>($r17) in <com.ineunet.knife.util.Base64: int decode4to3(byte[],int,byte[],int,int)> ==> <java.io.PrintStream: void println(java.lang.String)>
SPECIAL edge: specialinvoke $r18.<java.lang.StringBuilder: void <init>()>() in <com.ineunet.knife.util.Base64: int decode4to3(byte[],int,byte[],int,int)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("") in <com.ineunet.knife.util.Base64: int decode4to3(byte[],int,byte[],int,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($b74) in <com.ineunet.knife.util.Base64: int decode4to3(byte[],int,byte[],int,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ") in <com.ineunet.knife.util.Base64: int decode4to3(byte[],int,byte[],int,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($b77) in <com.ineunet.knife.util.Base64: int decode4to3(byte[],int,byte[],int,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.ineunet.knife.util.Base64: int decode4to3(byte[],int,byte[],int,int)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r19.<java.io.PrintStream: void println(java.lang.String)>($r24) in <com.ineunet.knife.util.Base64: int decode4to3(byte[],int,byte[],int,int)> ==> <java.io.PrintStream: void println(java.lang.String)>
SPECIAL edge: specialinvoke $r25.<java.lang.StringBuilder: void <init>()>() in <com.ineunet.knife.util.Base64: int decode4to3(byte[],int,byte[],int,int)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("") in <com.ineunet.knife.util.Base64: int decode4to3(byte[],int,byte[],int,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($b79) in <com.ineunet.knife.util.Base64: int decode4to3(byte[],int,byte[],int,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ") in <com.ineunet.knife.util.Base64: int decode4to3(byte[],int,byte[],int,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($b82) in <com.ineunet.knife.util.Base64: int decode4to3(byte[],int,byte[],int,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>() in <com.ineunet.knife.util.Base64: int decode4to3(byte[],int,byte[],int,int)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r26.<java.io.PrintStream: void println(java.lang.String)>($r31) in <com.ineunet.knife.util.Base64: int decode4to3(byte[],int,byte[],int,int)> ==> <java.io.PrintStream: void println(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Throwable: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
