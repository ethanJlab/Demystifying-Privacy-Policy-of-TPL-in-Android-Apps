FINALIZE edge: null in <java.lang.Object: void <init>()> ==> <java.lang.Object: void finalize()>
STATIC edge: staticinvoke <org.apache.commons.io.CopyUtils: void copy(java.io.InputStream,java.io.Writer)>($r0, r3) in <org.apache.commons.io.CopyUtils: void copy(byte[],java.io.Writer)> ==> <org.apache.commons.io.CopyUtils: void copy(java.io.InputStream,java.io.Writer)>
STATIC edge: staticinvoke <org.apache.commons.io.CopyUtils: void copy(java.io.InputStream,java.io.Writer,java.lang.String)>($r0, r3, r4) in <org.apache.commons.io.CopyUtils: void copy(byte[],java.io.Writer,java.lang.String)> ==> <org.apache.commons.io.CopyUtils: void copy(java.io.InputStream,java.io.Writer,java.lang.String)>
STATIC edge: staticinvoke <org.apache.commons.io.CopyUtils: int copy(java.io.Reader,java.io.Writer)>($r0, r3) in <org.apache.commons.io.CopyUtils: void copy(java.io.InputStream,java.io.Writer)> ==> <org.apache.commons.io.CopyUtils: int copy(java.io.Reader,java.io.Writer)>
STATIC edge: staticinvoke <org.apache.commons.io.CopyUtils: int copy(java.io.Reader,java.io.Writer)>($r0, r4) in <org.apache.commons.io.CopyUtils: void copy(java.io.InputStream,java.io.Writer,java.lang.String)> ==> <org.apache.commons.io.CopyUtils: int copy(java.io.Reader,java.io.Writer)>
STATIC edge: staticinvoke <org.apache.commons.io.CopyUtils: int copy(java.io.Reader,java.io.Writer)>(r3, $r0) in <org.apache.commons.io.CopyUtils: void copy(java.io.Reader,java.io.OutputStream)> ==> <org.apache.commons.io.CopyUtils: int copy(java.io.Reader,java.io.Writer)>
STATIC edge: staticinvoke <org.apache.commons.io.CopyUtils: int copy(java.io.Reader,java.io.Writer)>($r0, $r3) in <org.apache.commons.io.CopyUtils: void copy(java.lang.String,java.io.OutputStream)> ==> <org.apache.commons.io.CopyUtils: int copy(java.io.Reader,java.io.Writer)>
CLINIT edge: $r0 = <org.apache.commons.io.filefilter.DirectoryFileFilter: org.apache.commons.io.filefilter.IOFileFilter DIRECTORY> in <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter directoryFileFilter()> ==> <org.apache.commons.io.filefilter.DirectoryFileFilter: void <clinit>()>
CLINIT edge: $r0 = <org.apache.commons.io.filefilter.FileFileFilter: org.apache.commons.io.filefilter.IOFileFilter FILE> in <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter fileFileFilter()> ==> <org.apache.commons.io.filefilter.FileFileFilter: void <clinit>()>
CLINIT edge: $r0 = <org.apache.commons.io.filefilter.TrueFileFilter: org.apache.commons.io.filefilter.IOFileFilter TRUE> in <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter trueFileFilter()> ==> <org.apache.commons.io.filefilter.TrueFileFilter: void <clinit>()>
CLINIT edge: $r0 = <org.apache.commons.io.filefilter.FalseFileFilter: org.apache.commons.io.filefilter.IOFileFilter FALSE> in <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter falseFileFilter()> ==> <org.apache.commons.io.filefilter.FalseFileFilter: void <clinit>()>
STATIC edge: $r5 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter directoryFileFilter()>() in <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter makeCVSAware(org.apache.commons.io.filefilter.IOFileFilter)> ==> <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter directoryFileFilter()>
STATIC edge: $r3 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter andFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>(r1, $r2) in <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter makeCVSAware(org.apache.commons.io.filefilter.IOFileFilter)> ==> <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter andFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>
STATIC edge: $r8 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter notFileFilter(org.apache.commons.io.filefilter.IOFileFilter)>($r7) in <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter makeCVSAware(org.apache.commons.io.filefilter.IOFileFilter)> ==> <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter notFileFilter(org.apache.commons.io.filefilter.IOFileFilter)>
STATIC edge: $r7 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter andFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>($r5, $r6) in <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter makeCVSAware(org.apache.commons.io.filefilter.IOFileFilter)> ==> <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter andFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>
STATIC edge: $r6 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter nameFileFilter(java.lang.String)>("CVS") in <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter makeCVSAware(org.apache.commons.io.filefilter.IOFileFilter)> ==> <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter nameFileFilter(java.lang.String)>
STATIC edge: $r5 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter directoryFileFilter()>() in <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter makeSVNAware(org.apache.commons.io.filefilter.IOFileFilter)> ==> <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter directoryFileFilter()>
STATIC edge: $r3 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter andFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>(r1, $r2) in <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter makeSVNAware(org.apache.commons.io.filefilter.IOFileFilter)> ==> <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter andFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>
STATIC edge: $r8 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter notFileFilter(org.apache.commons.io.filefilter.IOFileFilter)>($r7) in <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter makeSVNAware(org.apache.commons.io.filefilter.IOFileFilter)> ==> <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter notFileFilter(org.apache.commons.io.filefilter.IOFileFilter)>
STATIC edge: $r7 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter andFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>($r5, $r6) in <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter makeSVNAware(org.apache.commons.io.filefilter.IOFileFilter)> ==> <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter andFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>
STATIC edge: $r6 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter nameFileFilter(java.lang.String)>(".svn") in <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter makeSVNAware(org.apache.commons.io.filefilter.IOFileFilter)> ==> <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter nameFileFilter(java.lang.String)>
CLINIT edge: $r3 = <org.apache.commons.io.filefilter.DirectoryFileFilter: org.apache.commons.io.filefilter.IOFileFilter DIRECTORY> in <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter makeDirectoryOnly(org.apache.commons.io.filefilter.IOFileFilter)> ==> <org.apache.commons.io.filefilter.DirectoryFileFilter: void <clinit>()>
CLINIT edge: $r2 = <org.apache.commons.io.filefilter.DirectoryFileFilter: org.apache.commons.io.filefilter.IOFileFilter DIRECTORY> in <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter makeDirectoryOnly(org.apache.commons.io.filefilter.IOFileFilter)> ==> <org.apache.commons.io.filefilter.DirectoryFileFilter: void <clinit>()>
CLINIT edge: $r3 = <org.apache.commons.io.filefilter.FileFileFilter: org.apache.commons.io.filefilter.IOFileFilter FILE> in <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter makeFileOnly(org.apache.commons.io.filefilter.IOFileFilter)> ==> <org.apache.commons.io.filefilter.FileFileFilter: void <clinit>()>
CLINIT edge: $r2 = <org.apache.commons.io.filefilter.FileFileFilter: org.apache.commons.io.filefilter.IOFileFilter FILE> in <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter makeFileOnly(org.apache.commons.io.filefilter.IOFileFilter)> ==> <org.apache.commons.io.filefilter.FileFileFilter: void <clinit>()>
CLINIT edge: $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1) in <org.apache.commons.io.filefilter.AndFileFilter: java.util.List getFileFilters()> ==> <java.util.Collections: void <clinit>()>
STATIC edge: $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1) in <org.apache.commons.io.filefilter.AndFileFilter: java.util.List getFileFilters()> ==> <java.util.Collections: java.util.List unmodifiableList(java.util.List)>
CLINIT edge: $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1) in <org.apache.commons.io.filefilter.OrFileFilter: java.util.List getFileFilters()> ==> <java.util.Collections: void <clinit>()>
STATIC edge: $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1) in <org.apache.commons.io.filefilter.OrFileFilter: java.util.List getFileFilters()> ==> <java.util.Collections: java.util.List unmodifiableList(java.util.List)>
CLINIT edge: $r2 = newarray (java.lang.String)[1] in <org.apache.commons.io.filefilter.NameFileFilter: void <init>(java.lang.String,org.apache.commons.io.IOCase)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r6 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase SENSITIVE> in <org.apache.commons.io.filefilter.NameFileFilter: void <init>(java.lang.String,org.apache.commons.io.IOCase)> ==> <org.apache.commons.io.IOCase: void <clinit>()>
CLINIT edge: $r5 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase SENSITIVE> in <org.apache.commons.io.filefilter.NameFileFilter: void <init>(java.lang.String[],org.apache.commons.io.IOCase)> ==> <org.apache.commons.io.IOCase: void <clinit>()>
CLINIT edge: $r2 = newarray (java.lang.String)[$i0] in <org.apache.commons.io.filefilter.NameFileFilter: void <init>(java.util.List,org.apache.commons.io.IOCase)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r9 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase SENSITIVE> in <org.apache.commons.io.filefilter.NameFileFilter: void <init>(java.util.List,org.apache.commons.io.IOCase)> ==> <org.apache.commons.io.IOCase: void <clinit>()>
CLINIT edge: z0 = staticinvoke <org.apache.commons.io.FileUtils: boolean isFileNewer(java.io.File,long)>(r0, $l0) in <org.apache.commons.io.filefilter.AgeFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.FileUtils: void <clinit>()>
STATIC edge: z0 = staticinvoke <org.apache.commons.io.FileUtils: boolean isFileNewer(java.io.File,long)>(r0, $l0) in <org.apache.commons.io.filefilter.AgeFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.FileUtils: boolean isFileNewer(java.io.File,long)>
CLINIT edge: $r2 = newarray (java.lang.String)[1] in <org.apache.commons.io.filefilter.PrefixFileFilter: void <init>(java.lang.String)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r2 = newarray (java.lang.String)[$i0] in <org.apache.commons.io.filefilter.PrefixFileFilter: void <init>(java.util.List)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r2 = newarray (java.lang.String)[1] in <org.apache.commons.io.filefilter.SuffixFileFilter: void <init>(java.lang.String)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r2 = newarray (java.lang.String)[$i0] in <org.apache.commons.io.filefilter.SuffixFileFilter: void <init>(java.util.List)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r1 = new java.io.File in <org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <java.io.File: void <clinit>()>
CLINIT edge: $r0 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase SENSITIVE> in <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase forName(java.lang.String)> ==> <org.apache.commons.io.IOCase: void <clinit>()>
CLINIT edge: $r13 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l9) in <org.apache.commons.io.FileUtils: java.lang.String byteCountToDisplaySize(long)> ==> <java.lang.String: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l0) in <org.apache.commons.io.FileUtils: java.lang.String byteCountToDisplaySize(long)> ==> <java.lang.String: java.lang.String valueOf(long)>
STATIC edge: $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l7) in <org.apache.commons.io.FileUtils: java.lang.String byteCountToDisplaySize(long)> ==> <java.lang.String: java.lang.String valueOf(long)>
STATIC edge: $r9 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l8) in <org.apache.commons.io.FileUtils: java.lang.String byteCountToDisplaySize(long)> ==> <java.lang.String: java.lang.String valueOf(long)>
STATIC edge: $r13 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l9) in <org.apache.commons.io.FileUtils: java.lang.String byteCountToDisplaySize(long)> ==> <java.lang.String: java.lang.String valueOf(long)>
CLINIT edge: $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l0) in <org.apache.commons.io.FileUtils: java.lang.String byteCountToDisplaySize(long)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l7) in <org.apache.commons.io.FileUtils: java.lang.String byteCountToDisplaySize(long)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r9 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l8) in <org.apache.commons.io.FileUtils: java.lang.String byteCountToDisplaySize(long)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: r6 = staticinvoke <org.apache.commons.io.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File)>(r0) in <org.apache.commons.io.FileUtils: void touch(java.io.File)> ==> <org.apache.commons.io.FileUtils: void <clinit>()>
STATIC edge: $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <org.apache.commons.io.FileUtils: void touch(java.io.File)> ==> <java.lang.System: long currentTimeMillis()>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r6) in <org.apache.commons.io.FileUtils: void touch(java.io.File)> ==> <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>
STATIC edge: r6 = staticinvoke <org.apache.commons.io.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File)>(r0) in <org.apache.commons.io.FileUtils: void touch(java.io.File)> ==> <org.apache.commons.io.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File)>
CLINIT edge: $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <org.apache.commons.io.FileUtils: void touch(java.io.File)> ==> <java.lang.System: void <clinit>()>
CLINIT edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r6) in <org.apache.commons.io.FileUtils: void touch(java.io.File)> ==> <org.apache.commons.io.IOUtils: void <clinit>()>
CLINIT edge: $r1 = newarray (java.io.File)[$i0] in <org.apache.commons.io.FileUtils: java.io.File[] convertFileCollectionToFileArray(java.util.Collection)> ==> <java.io.File: void <clinit>()>
CLINIT edge: $r2 = <org.apache.commons.io.filefilter.DirectoryFileFilter: org.apache.commons.io.filefilter.IOFileFilter INSTANCE> in <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)> ==> <org.apache.commons.io.filefilter.DirectoryFileFilter: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.io.FileUtils: void innerListFiles(java.util.Collection,java.io.File,org.apache.commons.io.filefilter.IOFileFilter)>($r7, r0, $r9) in <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)> ==> <org.apache.commons.io.FileUtils: void innerListFiles(java.util.Collection,java.io.File,org.apache.commons.io.filefilter.IOFileFilter)>
STATIC edge: $r9 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter orFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>(r4, r12) in <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)> ==> <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter orFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>
STATIC edge: r12 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter andFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>(r5, $r6) in <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)> ==> <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter andFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>
STATIC edge: r4 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter andFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>(r1, $r3) in <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)> ==> <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter andFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>
STATIC edge: $r3 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter notFileFilter(org.apache.commons.io.filefilter.IOFileFilter)>($r2) in <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)> ==> <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter notFileFilter(org.apache.commons.io.filefilter.IOFileFilter)>
CLINIT edge: staticinvoke <org.apache.commons.io.FileUtils: void innerListFiles(java.util.Collection,java.io.File,org.apache.commons.io.filefilter.IOFileFilter)>($r7, r0, $r9) in <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)> ==> <org.apache.commons.io.FileUtils: void <clinit>()>
CLINIT edge: r12 = <org.apache.commons.io.filefilter.FalseFileFilter: org.apache.commons.io.filefilter.IOFileFilter INSTANCE> in <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)> ==> <org.apache.commons.io.filefilter.FalseFileFilter: void <clinit>()>
CLINIT edge: $r3 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>(r0, r1, r2) in <org.apache.commons.io.FileUtils: java.util.Iterator iterateFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)> ==> <org.apache.commons.io.FileUtils: void <clinit>()>
STATIC edge: $r3 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>(r0, r1, r2) in <org.apache.commons.io.FileUtils: java.util.Iterator iterateFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)> ==> <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>
CLINIT edge: r7 = <org.apache.commons.io.filefilter.TrueFileFilter: org.apache.commons.io.filefilter.IOFileFilter INSTANCE> in <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)> ==> <org.apache.commons.io.filefilter.TrueFileFilter: void <clinit>()>
STATIC edge: $r4 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>(r3, $r10, $r8) in <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)> ==> <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>
STATIC edge: r1 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String[] toSuffixes(java.lang.String[])>(r0) in <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)> ==> <org.apache.commons.io.FileUtils: java.lang.String[] toSuffixes(java.lang.String[])>
CLINIT edge: $r4 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>(r3, $r10, $r8) in <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)> ==> <org.apache.commons.io.FileUtils: void <clinit>()>
CLINIT edge: $r8 = <org.apache.commons.io.filefilter.FalseFileFilter: org.apache.commons.io.filefilter.IOFileFilter INSTANCE> in <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)> ==> <org.apache.commons.io.filefilter.FalseFileFilter: void <clinit>()>
CLINIT edge: $r8 = <org.apache.commons.io.filefilter.TrueFileFilter: org.apache.commons.io.filefilter.IOFileFilter INSTANCE> in <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)> ==> <org.apache.commons.io.filefilter.TrueFileFilter: void <clinit>()>
CLINIT edge: r1 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String[] toSuffixes(java.lang.String[])>(r0) in <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)> ==> <org.apache.commons.io.FileUtils: void <clinit>()>
CLINIT edge: $r2 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>(r0, r1, z0) in <org.apache.commons.io.FileUtils: java.util.Iterator iterateFiles(java.io.File,java.lang.String[],boolean)> ==> <org.apache.commons.io.FileUtils: void <clinit>()>
STATIC edge: $r2 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>(r0, r1, z0) in <org.apache.commons.io.FileUtils: java.util.Iterator iterateFiles(java.io.File,java.lang.String[],boolean)> ==> <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>
CLINIT edge: z5 = staticinvoke <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.InputStream,java.io.InputStream)>($r5, $r6) in <org.apache.commons.io.FileUtils: boolean contentEquals(java.io.File,java.io.File)> ==> <org.apache.commons.io.IOUtils: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r10) in <org.apache.commons.io.FileUtils: boolean contentEquals(java.io.File,java.io.File)> ==> <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r9) in <org.apache.commons.io.FileUtils: boolean contentEquals(java.io.File,java.io.File)> ==> <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>($r6) in <org.apache.commons.io.FileUtils: boolean contentEquals(java.io.File,java.io.File)> ==> <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>($r5) in <org.apache.commons.io.FileUtils: boolean contentEquals(java.io.File,java.io.File)> ==> <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>
STATIC edge: z5 = staticinvoke <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.InputStream,java.io.InputStream)>($r5, $r6) in <org.apache.commons.io.FileUtils: boolean contentEquals(java.io.File,java.io.File)> ==> <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.InputStream,java.io.InputStream)>
CLINIT edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r9) in <org.apache.commons.io.FileUtils: boolean contentEquals(java.io.File,java.io.File)> ==> <org.apache.commons.io.IOUtils: void <clinit>()>
CLINIT edge: $c0 = <java.io.File: char separatorChar> in <org.apache.commons.io.FileUtils: java.io.File toFile(java.net.URL)> ==> <java.io.File: void <clinit>()>
STATIC edge: $i5 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(r4, 16) in <org.apache.commons.io.FileUtils: java.io.File toFile(java.net.URL)> ==> <java.lang.Integer: int parseInt(java.lang.String,int)>
CLINIT edge: $i5 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(r4, 16) in <org.apache.commons.io.FileUtils: java.io.File toFile(java.net.URL)> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: $r1 = <org.apache.commons.io.FileUtils: java.io.File[] EMPTY_FILE_ARRAY> in <org.apache.commons.io.FileUtils: java.io.File[] toFiles(java.net.URL[])> ==> <org.apache.commons.io.FileUtils: void <clinit>()>
STATIC edge: $r5 = staticinvoke <org.apache.commons.io.FileUtils: java.io.File toFile(java.net.URL)>(r3) in <org.apache.commons.io.FileUtils: java.io.File[] toFiles(java.net.URL[])> ==> <org.apache.commons.io.FileUtils: java.io.File toFile(java.net.URL)>
CLINIT edge: $r5 = staticinvoke <org.apache.commons.io.FileUtils: java.io.File toFile(java.net.URL)>(r3) in <org.apache.commons.io.FileUtils: java.io.File[] toFiles(java.net.URL[])> ==> <org.apache.commons.io.FileUtils: void <clinit>()>
CLINIT edge: r2 = newarray (java.io.File)[$i1] in <org.apache.commons.io.FileUtils: java.io.File[] toFiles(java.net.URL[])> ==> <java.io.File: void <clinit>()>
CLINIT edge: staticinvoke <org.apache.commons.io.FileUtils: void copyFileToDirectory(java.io.File,java.io.File,boolean)>(r0, r1, 1) in <org.apache.commons.io.FileUtils: void copyFileToDirectory(java.io.File,java.io.File)> ==> <org.apache.commons.io.FileUtils: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.io.FileUtils: void copyFileToDirectory(java.io.File,java.io.File,boolean)>(r0, r1, 1) in <org.apache.commons.io.FileUtils: void copyFileToDirectory(java.io.File,java.io.File)> ==> <org.apache.commons.io.FileUtils: void copyFileToDirectory(java.io.File,java.io.File,boolean)>
CLINIT edge: $r2 = new java.io.File in <org.apache.commons.io.FileUtils: void copyFileToDirectory(java.io.File,java.io.File,boolean)> ==> <java.io.File: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)>(r1, $r2, z1) in <org.apache.commons.io.FileUtils: void copyFileToDirectory(java.io.File,java.io.File,boolean)> ==> <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)>
CLINIT edge: staticinvoke <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)>(r1, $r2, z1) in <org.apache.commons.io.FileUtils: void copyFileToDirectory(java.io.File,java.io.File,boolean)> ==> <org.apache.commons.io.FileUtils: void <clinit>()>
CLINIT edge: staticinvoke <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)>(r0, r1, 1) in <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File)> ==> <org.apache.commons.io.FileUtils: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)>(r0, r1, 1) in <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File)> ==> <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)>
CLINIT edge: staticinvoke <org.apache.commons.io.FileUtils: void doCopyFile(java.io.File,java.io.File,boolean)>(r0, r1, z3) in <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)> ==> <org.apache.commons.io.FileUtils: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.io.FileUtils: void doCopyFile(java.io.File,java.io.File,boolean)>(r0, r1, z3) in <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)> ==> <org.apache.commons.io.FileUtils: void doCopyFile(java.io.File,java.io.File,boolean)>
CLINIT edge: $r2 = new java.io.File in <org.apache.commons.io.FileUtils: void copyDirectoryToDirectory(java.io.File,java.io.File)> ==> <java.io.File: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,boolean)>(r0, $r2, 1) in <org.apache.commons.io.FileUtils: void copyDirectoryToDirectory(java.io.File,java.io.File)> ==> <org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,boolean)>
CLINIT edge: staticinvoke <org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,boolean)>(r0, $r2, 1) in <org.apache.commons.io.FileUtils: void copyDirectoryToDirectory(java.io.File,java.io.File)> ==> <org.apache.commons.io.FileUtils: void <clinit>()>
CLINIT edge: staticinvoke <org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,boolean)>(r0, r1, 1) in <org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File)> ==> <org.apache.commons.io.FileUtils: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,boolean)>(r0, r1, 1) in <org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File)> ==> <org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,boolean)>
CLINIT edge: staticinvoke <org.apache.commons.io.FileUtils: void doCopyDirectory(java.io.File,java.io.File,boolean)>(r0, r1, z3) in <org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,boolean)> ==> <org.apache.commons.io.FileUtils: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.io.FileUtils: void doCopyDirectory(java.io.File,java.io.File,boolean)>(r0, r1, z3) in <org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,boolean)> ==> <org.apache.commons.io.FileUtils: void doCopyDirectory(java.io.File,java.io.File,boolean)>
CLINIT edge: r3 = staticinvoke <org.apache.commons.io.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File)>(r2) in <org.apache.commons.io.FileUtils: void copyURLToFile(java.net.URL,java.io.File)> ==> <org.apache.commons.io.FileUtils: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r1) in <org.apache.commons.io.FileUtils: void copyURLToFile(java.net.URL,java.io.File)> ==> <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r1) in <org.apache.commons.io.FileUtils: void copyURLToFile(java.net.URL,java.io.File)> ==> <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r3) in <org.apache.commons.io.FileUtils: void copyURLToFile(java.net.URL,java.io.File)> ==> <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r3) in <org.apache.commons.io.FileUtils: void copyURLToFile(java.net.URL,java.io.File)> ==> <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: int copy(java.io.InputStream,java.io.OutputStream)>(r1, r3) in <org.apache.commons.io.FileUtils: void copyURLToFile(java.net.URL,java.io.File)> ==> <org.apache.commons.io.IOUtils: int copy(java.io.InputStream,java.io.OutputStream)>
STATIC edge: r3 = staticinvoke <org.apache.commons.io.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File)>(r2) in <org.apache.commons.io.FileUtils: void copyURLToFile(java.net.URL,java.io.File)> ==> <org.apache.commons.io.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File)>
CLINIT edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r1) in <org.apache.commons.io.FileUtils: void copyURLToFile(java.net.URL,java.io.File)> ==> <org.apache.commons.io.IOUtils: void <clinit>()>
CLINIT edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r3) in <org.apache.commons.io.FileUtils: void copyURLToFile(java.net.URL,java.io.File)> ==> <org.apache.commons.io.IOUtils: void <clinit>()>
CLINIT edge: staticinvoke <org.apache.commons.io.IOUtils: int copy(java.io.InputStream,java.io.OutputStream)>(r1, r3) in <org.apache.commons.io.FileUtils: void copyURLToFile(java.net.URL,java.io.File)> ==> <org.apache.commons.io.IOUtils: void <clinit>()>
CLINIT edge: staticinvoke <org.apache.commons.io.FileUtils: void cleanDirectory(java.io.File)>(r0) in <org.apache.commons.io.FileUtils: void deleteDirectory(java.io.File)> ==> <org.apache.commons.io.FileUtils: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.io.FileUtils: void cleanDirectory(java.io.File)>(r0) in <org.apache.commons.io.FileUtils: void deleteDirectory(java.io.File)> ==> <org.apache.commons.io.FileUtils: void cleanDirectory(java.io.File)>
CLINIT edge: staticinvoke <org.apache.commons.io.FileUtils: void forceDelete(java.io.File)>(r1) in <org.apache.commons.io.FileUtils: void cleanDirectory(java.io.File)> ==> <org.apache.commons.io.FileUtils: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.io.FileUtils: void forceDelete(java.io.File)>(r1) in <org.apache.commons.io.FileUtils: void cleanDirectory(java.io.File)> ==> <org.apache.commons.io.FileUtils: void forceDelete(java.io.File)>
STATIC edge: staticinvoke <java.lang.Thread: void sleep(long)>(100L) in <org.apache.commons.io.FileUtils: boolean waitFor(java.io.File,int)> ==> <java.lang.Thread: void sleep(long)>
CLINIT edge: r5 = staticinvoke <org.apache.commons.io.FileUtils: java.io.FileInputStream openInputStream(java.io.File)>(r0) in <org.apache.commons.io.FileUtils: java.lang.String readFileToString(java.io.File,java.lang.String)> ==> <org.apache.commons.io.FileUtils: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r5) in <org.apache.commons.io.FileUtils: java.lang.String readFileToString(java.io.File,java.lang.String)> ==> <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r5) in <org.apache.commons.io.FileUtils: java.lang.String readFileToString(java.io.File,java.lang.String)> ==> <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>
STATIC edge: r2 = staticinvoke <org.apache.commons.io.IOUtils: java.lang.String toString(java.io.InputStream,java.lang.String)>(r5, r1) in <org.apache.commons.io.FileUtils: java.lang.String readFileToString(java.io.File,java.lang.String)> ==> <org.apache.commons.io.IOUtils: java.lang.String toString(java.io.InputStream,java.lang.String)>
STATIC edge: r5 = staticinvoke <org.apache.commons.io.FileUtils: java.io.FileInputStream openInputStream(java.io.File)>(r0) in <org.apache.commons.io.FileUtils: java.lang.String readFileToString(java.io.File,java.lang.String)> ==> <org.apache.commons.io.FileUtils: java.io.FileInputStream openInputStream(java.io.File)>
CLINIT edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r5) in <org.apache.commons.io.FileUtils: java.lang.String readFileToString(java.io.File,java.lang.String)> ==> <org.apache.commons.io.IOUtils: void <clinit>()>
CLINIT edge: r2 = staticinvoke <org.apache.commons.io.IOUtils: java.lang.String toString(java.io.InputStream,java.lang.String)>(r5, r1) in <org.apache.commons.io.FileUtils: java.lang.String readFileToString(java.io.File,java.lang.String)> ==> <org.apache.commons.io.IOUtils: void <clinit>()>
CLINIT edge: $r1 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String readFileToString(java.io.File,java.lang.String)>(r0, null) in <org.apache.commons.io.FileUtils: java.lang.String readFileToString(java.io.File)> ==> <org.apache.commons.io.FileUtils: void <clinit>()>
STATIC edge: $r1 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String readFileToString(java.io.File,java.lang.String)>(r0, null) in <org.apache.commons.io.FileUtils: java.lang.String readFileToString(java.io.File)> ==> <org.apache.commons.io.FileUtils: java.lang.String readFileToString(java.io.File,java.lang.String)>
CLINIT edge: r4 = staticinvoke <org.apache.commons.io.FileUtils: java.io.FileInputStream openInputStream(java.io.File)>(r0) in <org.apache.commons.io.FileUtils: byte[] readFileToByteArray(java.io.File)> ==> <org.apache.commons.io.FileUtils: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r4) in <org.apache.commons.io.FileUtils: byte[] readFileToByteArray(java.io.File)> ==> <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r4) in <org.apache.commons.io.FileUtils: byte[] readFileToByteArray(java.io.File)> ==> <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>
STATIC edge: r1 = staticinvoke <org.apache.commons.io.IOUtils: byte[] toByteArray(java.io.InputStream)>(r4) in <org.apache.commons.io.FileUtils: byte[] readFileToByteArray(java.io.File)> ==> <org.apache.commons.io.IOUtils: byte[] toByteArray(java.io.InputStream)>
STATIC edge: r4 = staticinvoke <org.apache.commons.io.FileUtils: java.io.FileInputStream openInputStream(java.io.File)>(r0) in <org.apache.commons.io.FileUtils: byte[] readFileToByteArray(java.io.File)> ==> <org.apache.commons.io.FileUtils: java.io.FileInputStream openInputStream(java.io.File)>
CLINIT edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r4) in <org.apache.commons.io.FileUtils: byte[] readFileToByteArray(java.io.File)> ==> <org.apache.commons.io.IOUtils: void <clinit>()>
CLINIT edge: r1 = staticinvoke <org.apache.commons.io.IOUtils: byte[] toByteArray(java.io.InputStream)>(r4) in <org.apache.commons.io.FileUtils: byte[] readFileToByteArray(java.io.File)> ==> <org.apache.commons.io.IOUtils: void <clinit>()>
CLINIT edge: r5 = staticinvoke <org.apache.commons.io.FileUtils: java.io.FileInputStream openInputStream(java.io.File)>(r0) in <org.apache.commons.io.FileUtils: java.util.List readLines(java.io.File,java.lang.String)> ==> <org.apache.commons.io.FileUtils: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r5) in <org.apache.commons.io.FileUtils: java.util.List readLines(java.io.File,java.lang.String)> ==> <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r5) in <org.apache.commons.io.FileUtils: java.util.List readLines(java.io.File,java.lang.String)> ==> <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>
STATIC edge: r2 = staticinvoke <org.apache.commons.io.IOUtils: java.util.List readLines(java.io.InputStream,java.lang.String)>(r5, r1) in <org.apache.commons.io.FileUtils: java.util.List readLines(java.io.File,java.lang.String)> ==> <org.apache.commons.io.IOUtils: java.util.List readLines(java.io.InputStream,java.lang.String)>
STATIC edge: r5 = staticinvoke <org.apache.commons.io.FileUtils: java.io.FileInputStream openInputStream(java.io.File)>(r0) in <org.apache.commons.io.FileUtils: java.util.List readLines(java.io.File,java.lang.String)> ==> <org.apache.commons.io.FileUtils: java.io.FileInputStream openInputStream(java.io.File)>
CLINIT edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r5) in <org.apache.commons.io.FileUtils: java.util.List readLines(java.io.File,java.lang.String)> ==> <org.apache.commons.io.IOUtils: void <clinit>()>
CLINIT edge: r2 = staticinvoke <org.apache.commons.io.IOUtils: java.util.List readLines(java.io.InputStream,java.lang.String)>(r5, r1) in <org.apache.commons.io.FileUtils: java.util.List readLines(java.io.File,java.lang.String)> ==> <org.apache.commons.io.IOUtils: void <clinit>()>
CLINIT edge: $r1 = staticinvoke <org.apache.commons.io.FileUtils: java.util.List readLines(java.io.File,java.lang.String)>(r0, null) in <org.apache.commons.io.FileUtils: java.util.List readLines(java.io.File)> ==> <org.apache.commons.io.FileUtils: void <clinit>()>
STATIC edge: $r1 = staticinvoke <org.apache.commons.io.FileUtils: java.util.List readLines(java.io.File,java.lang.String)>(r0, null) in <org.apache.commons.io.FileUtils: java.util.List readLines(java.io.File)> ==> <org.apache.commons.io.FileUtils: java.util.List readLines(java.io.File,java.lang.String)>
CLINIT edge: r5 = staticinvoke <org.apache.commons.io.FileUtils: java.io.FileInputStream openInputStream(java.io.File)>(r0) in <org.apache.commons.io.FileUtils: org.apache.commons.io.LineIterator lineIterator(java.io.File,java.lang.String)> ==> <org.apache.commons.io.FileUtils: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r5) in <org.apache.commons.io.FileUtils: org.apache.commons.io.LineIterator lineIterator(java.io.File,java.lang.String)> ==> <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r5) in <org.apache.commons.io.FileUtils: org.apache.commons.io.LineIterator lineIterator(java.io.File,java.lang.String)> ==> <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>
STATIC edge: $r2 = staticinvoke <org.apache.commons.io.IOUtils: org.apache.commons.io.LineIterator lineIterator(java.io.InputStream,java.lang.String)>(r5, r1) in <org.apache.commons.io.FileUtils: org.apache.commons.io.LineIterator lineIterator(java.io.File,java.lang.String)> ==> <org.apache.commons.io.IOUtils: org.apache.commons.io.LineIterator lineIterator(java.io.InputStream,java.lang.String)>
STATIC edge: r5 = staticinvoke <org.apache.commons.io.FileUtils: java.io.FileInputStream openInputStream(java.io.File)>(r0) in <org.apache.commons.io.FileUtils: org.apache.commons.io.LineIterator lineIterator(java.io.File,java.lang.String)> ==> <org.apache.commons.io.FileUtils: java.io.FileInputStream openInputStream(java.io.File)>
CLINIT edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r5) in <org.apache.commons.io.FileUtils: org.apache.commons.io.LineIterator lineIterator(java.io.File,java.lang.String)> ==> <org.apache.commons.io.IOUtils: void <clinit>()>
CLINIT edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r5) in <org.apache.commons.io.FileUtils: org.apache.commons.io.LineIterator lineIterator(java.io.File,java.lang.String)> ==> <org.apache.commons.io.IOUtils: void <clinit>()>
CLINIT edge: $r2 = staticinvoke <org.apache.commons.io.IOUtils: org.apache.commons.io.LineIterator lineIterator(java.io.InputStream,java.lang.String)>(r5, r1) in <org.apache.commons.io.FileUtils: org.apache.commons.io.LineIterator lineIterator(java.io.File,java.lang.String)> ==> <org.apache.commons.io.IOUtils: void <clinit>()>
CLINIT edge: $r1 = staticinvoke <org.apache.commons.io.FileUtils: org.apache.commons.io.LineIterator lineIterator(java.io.File,java.lang.String)>(r0, null) in <org.apache.commons.io.FileUtils: org.apache.commons.io.LineIterator lineIterator(java.io.File)> ==> <org.apache.commons.io.FileUtils: void <clinit>()>
STATIC edge: $r1 = staticinvoke <org.apache.commons.io.FileUtils: org.apache.commons.io.LineIterator lineIterator(java.io.File,java.lang.String)>(r0, null) in <org.apache.commons.io.FileUtils: org.apache.commons.io.LineIterator lineIterator(java.io.File)> ==> <org.apache.commons.io.FileUtils: org.apache.commons.io.LineIterator lineIterator(java.io.File,java.lang.String)>
CLINIT edge: r5 = staticinvoke <org.apache.commons.io.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File)>(r0) in <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String,java.lang.String)> ==> <org.apache.commons.io.FileUtils: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r5) in <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String,java.lang.String)> ==> <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r5) in <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String,java.lang.String)> ==> <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void write(java.lang.String,java.io.OutputStream,java.lang.String)>(r1, r5, r2) in <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String,java.lang.String)> ==> <org.apache.commons.io.IOUtils: void write(java.lang.String,java.io.OutputStream,java.lang.String)>
STATIC edge: r5 = staticinvoke <org.apache.commons.io.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File)>(r0) in <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String,java.lang.String)> ==> <org.apache.commons.io.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File)>
CLINIT edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r5) in <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String,java.lang.String)> ==> <org.apache.commons.io.IOUtils: void <clinit>()>
CLINIT edge: staticinvoke <org.apache.commons.io.IOUtils: void write(java.lang.String,java.io.OutputStream,java.lang.String)>(r1, r5, r2) in <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String,java.lang.String)> ==> <org.apache.commons.io.IOUtils: void <clinit>()>
CLINIT edge: staticinvoke <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String,java.lang.String)>(r0, r1, null) in <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String)> ==> <org.apache.commons.io.FileUtils: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String,java.lang.String)>(r0, r1, null) in <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String)> ==> <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String,java.lang.String)>
CLINIT edge: r4 = staticinvoke <org.apache.commons.io.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File)>(r0) in <org.apache.commons.io.FileUtils: void writeByteArrayToFile(java.io.File,byte[])> ==> <org.apache.commons.io.FileUtils: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r4) in <org.apache.commons.io.FileUtils: void writeByteArrayToFile(java.io.File,byte[])> ==> <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r4) in <org.apache.commons.io.FileUtils: void writeByteArrayToFile(java.io.File,byte[])> ==> <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>
STATIC edge: r4 = staticinvoke <org.apache.commons.io.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File)>(r0) in <org.apache.commons.io.FileUtils: void writeByteArrayToFile(java.io.File,byte[])> ==> <org.apache.commons.io.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File)>
CLINIT edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r4) in <org.apache.commons.io.FileUtils: void writeByteArrayToFile(java.io.File,byte[])> ==> <org.apache.commons.io.IOUtils: void <clinit>()>
CLINIT edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r4) in <org.apache.commons.io.FileUtils: void writeByteArrayToFile(java.io.File,byte[])> ==> <org.apache.commons.io.IOUtils: void <clinit>()>
CLINIT edge: staticinvoke <org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String)>(r0, r1, r2, null) in <org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.lang.String,java.util.Collection)> ==> <org.apache.commons.io.FileUtils: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String)>(r0, r1, r2, null) in <org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.lang.String,java.util.Collection)> ==> <org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String)>
CLINIT edge: staticinvoke <org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String)>(r0, null, r1, null) in <org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.util.Collection)> ==> <org.apache.commons.io.FileUtils: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String)>(r0, null, r1, null) in <org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.util.Collection)> ==> <org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String)>
CLINIT edge: r6 = staticinvoke <org.apache.commons.io.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File)>(r0) in <org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String)> ==> <org.apache.commons.io.FileUtils: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r6) in <org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String)> ==> <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r6) in <org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String)> ==> <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)>(r1, r2, r6, r3) in <org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String)> ==> <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)>
STATIC edge: r6 = staticinvoke <org.apache.commons.io.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File)>(r0) in <org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String)> ==> <org.apache.commons.io.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File)>
CLINIT edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r6) in <org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String)> ==> <org.apache.commons.io.IOUtils: void <clinit>()>
CLINIT edge: staticinvoke <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)>(r1, r2, r6, r3) in <org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String)> ==> <org.apache.commons.io.IOUtils: void <clinit>()>
CLINIT edge: staticinvoke <org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String)>(r0, null, r1, r2) in <org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.util.Collection,java.lang.String)> ==> <org.apache.commons.io.FileUtils: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String)>(r0, null, r1, r2) in <org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.util.Collection,java.lang.String)> ==> <org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String)>
CLINIT edge: staticinvoke <org.apache.commons.io.FileUtils: void deleteDirectory(java.io.File)>(r0) in <org.apache.commons.io.FileUtils: void forceDelete(java.io.File)> ==> <org.apache.commons.io.FileUtils: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.io.FileUtils: void deleteDirectory(java.io.File)>(r0) in <org.apache.commons.io.FileUtils: void forceDelete(java.io.File)> ==> <org.apache.commons.io.FileUtils: void deleteDirectory(java.io.File)>
CLINIT edge: staticinvoke <org.apache.commons.io.FileUtils: void deleteDirectoryOnExit(java.io.File)>(r0) in <org.apache.commons.io.FileUtils: void forceDeleteOnExit(java.io.File)> ==> <org.apache.commons.io.FileUtils: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.io.FileUtils: void deleteDirectoryOnExit(java.io.File)>(r0) in <org.apache.commons.io.FileUtils: void forceDeleteOnExit(java.io.File)> ==> <org.apache.commons.io.FileUtils: void deleteDirectoryOnExit(java.io.File)>
CLINIT edge: $l2 = staticinvoke <org.apache.commons.io.FileUtils: long sizeOfDirectory(java.io.File)>(r2) in <org.apache.commons.io.FileUtils: long sizeOfDirectory(java.io.File)> ==> <org.apache.commons.io.FileUtils: void <clinit>()>
STATIC edge: $l2 = staticinvoke <org.apache.commons.io.FileUtils: long sizeOfDirectory(java.io.File)>(r2) in <org.apache.commons.io.FileUtils: long sizeOfDirectory(java.io.File)> ==> <org.apache.commons.io.FileUtils: long sizeOfDirectory(java.io.File)>
CLINIT edge: $z1 = staticinvoke <org.apache.commons.io.FileUtils: boolean isFileNewer(java.io.File,long)>(r1, $l0) in <org.apache.commons.io.FileUtils: boolean isFileNewer(java.io.File,java.io.File)> ==> <org.apache.commons.io.FileUtils: void <clinit>()>
STATIC edge: $z1 = staticinvoke <org.apache.commons.io.FileUtils: boolean isFileNewer(java.io.File,long)>(r1, $l0) in <org.apache.commons.io.FileUtils: boolean isFileNewer(java.io.File,java.io.File)> ==> <org.apache.commons.io.FileUtils: boolean isFileNewer(java.io.File,long)>
CLINIT edge: $z0 = staticinvoke <org.apache.commons.io.FileUtils: boolean isFileNewer(java.io.File,long)>(r1, $l0) in <org.apache.commons.io.FileUtils: boolean isFileNewer(java.io.File,java.util.Date)> ==> <org.apache.commons.io.FileUtils: void <clinit>()>
STATIC edge: $z0 = staticinvoke <org.apache.commons.io.FileUtils: boolean isFileNewer(java.io.File,long)>(r1, $l0) in <org.apache.commons.io.FileUtils: boolean isFileNewer(java.io.File,java.util.Date)> ==> <org.apache.commons.io.FileUtils: boolean isFileNewer(java.io.File,long)>
CLINIT edge: $z1 = staticinvoke <org.apache.commons.io.FileUtils: boolean isFileOlder(java.io.File,long)>(r1, $l0) in <org.apache.commons.io.FileUtils: boolean isFileOlder(java.io.File,java.io.File)> ==> <org.apache.commons.io.FileUtils: void <clinit>()>
STATIC edge: $z1 = staticinvoke <org.apache.commons.io.FileUtils: boolean isFileOlder(java.io.File,long)>(r1, $l0) in <org.apache.commons.io.FileUtils: boolean isFileOlder(java.io.File,java.io.File)> ==> <org.apache.commons.io.FileUtils: boolean isFileOlder(java.io.File,long)>
CLINIT edge: $z0 = staticinvoke <org.apache.commons.io.FileUtils: boolean isFileOlder(java.io.File,long)>(r1, $l0) in <org.apache.commons.io.FileUtils: boolean isFileOlder(java.io.File,java.util.Date)> ==> <org.apache.commons.io.FileUtils: void <clinit>()>
STATIC edge: $z0 = staticinvoke <org.apache.commons.io.FileUtils: boolean isFileOlder(java.io.File,long)>(r1, $l0) in <org.apache.commons.io.FileUtils: boolean isFileOlder(java.io.File,java.util.Date)> ==> <org.apache.commons.io.FileUtils: boolean isFileOlder(java.io.File,long)>
CLINIT edge: staticinvoke <org.apache.commons.io.FileUtils: java.util.zip.Checksum checksum(java.io.File,java.util.zip.Checksum)>(r2, $r0) in <org.apache.commons.io.FileUtils: long checksumCRC32(java.io.File)> ==> <org.apache.commons.io.FileUtils: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.io.FileUtils: java.util.zip.Checksum checksum(java.io.File,java.util.zip.Checksum)>(r2, $r0) in <org.apache.commons.io.FileUtils: long checksumCRC32(java.io.File)> ==> <org.apache.commons.io.FileUtils: java.util.zip.Checksum checksum(java.io.File,java.util.zip.Checksum)>
CLINIT edge: staticinvoke <org.apache.commons.io.IOUtils: int copy(java.io.InputStream,java.io.OutputStream)>($r1, $r4) in <org.apache.commons.io.FileUtils: java.util.zip.Checksum checksum(java.io.File,java.util.zip.Checksum)> ==> <org.apache.commons.io.IOUtils: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r8) in <org.apache.commons.io.FileUtils: java.util.zip.Checksum checksum(java.io.File,java.util.zip.Checksum)> ==> <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>($r1) in <org.apache.commons.io.FileUtils: java.util.zip.Checksum checksum(java.io.File,java.util.zip.Checksum)> ==> <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: int copy(java.io.InputStream,java.io.OutputStream)>($r1, $r4) in <org.apache.commons.io.FileUtils: java.util.zip.Checksum checksum(java.io.File,java.util.zip.Checksum)> ==> <org.apache.commons.io.IOUtils: int copy(java.io.InputStream,java.io.OutputStream)>
CLINIT edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r8) in <org.apache.commons.io.FileUtils: java.util.zip.Checksum checksum(java.io.File,java.util.zip.Checksum)> ==> <org.apache.commons.io.IOUtils: void <clinit>()>
CLINIT edge: $r1 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String doNormalize(java.lang.String,boolean)>(r0, 1) in <org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String)> ==> <org.apache.commons.io.FilenameUtils: void <clinit>()>
STATIC edge: $r1 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String doNormalize(java.lang.String,boolean)>(r0, 1) in <org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String)> ==> <org.apache.commons.io.FilenameUtils: java.lang.String doNormalize(java.lang.String,boolean)>
CLINIT edge: $r1 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String doNormalize(java.lang.String,boolean)>(r0, 0) in <org.apache.commons.io.FilenameUtils: java.lang.String normalizeNoEndSeparator(java.lang.String)> ==> <org.apache.commons.io.FilenameUtils: void <clinit>()>
STATIC edge: $r1 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String doNormalize(java.lang.String,boolean)>(r0, 0) in <org.apache.commons.io.FilenameUtils: java.lang.String normalizeNoEndSeparator(java.lang.String)> ==> <org.apache.commons.io.FilenameUtils: java.lang.String doNormalize(java.lang.String,boolean)>
CLINIT edge: i0 = staticinvoke <org.apache.commons.io.FilenameUtils: int getPrefixLength(java.lang.String)>(r0) in <org.apache.commons.io.FilenameUtils: java.lang.String concat(java.lang.String,java.lang.String)> ==> <org.apache.commons.io.FilenameUtils: void <clinit>()>
STATIC edge: $r7 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String)>($r6) in <org.apache.commons.io.FilenameUtils: java.lang.String concat(java.lang.String,java.lang.String)> ==> <org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String)>
STATIC edge: $r12 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String)>($r11) in <org.apache.commons.io.FilenameUtils: java.lang.String concat(java.lang.String,java.lang.String)> ==> <org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String)>
STATIC edge: $z0 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean isSeparator(char)>(c3) in <org.apache.commons.io.FilenameUtils: java.lang.String concat(java.lang.String,java.lang.String)> ==> <org.apache.commons.io.FilenameUtils: boolean isSeparator(char)>
STATIC edge: $r13 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String)>(r0) in <org.apache.commons.io.FilenameUtils: java.lang.String concat(java.lang.String,java.lang.String)> ==> <org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String)>
STATIC edge: $r14 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String)>(r0) in <org.apache.commons.io.FilenameUtils: java.lang.String concat(java.lang.String,java.lang.String)> ==> <org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String)>
STATIC edge: i0 = staticinvoke <org.apache.commons.io.FilenameUtils: int getPrefixLength(java.lang.String)>(r0) in <org.apache.commons.io.FilenameUtils: java.lang.String concat(java.lang.String,java.lang.String)> ==> <org.apache.commons.io.FilenameUtils: int getPrefixLength(java.lang.String)>
CLINIT edge: $z0 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean isSystemWindows()>() in <org.apache.commons.io.FilenameUtils: java.lang.String separatorsToSystem(java.lang.String)> ==> <org.apache.commons.io.FilenameUtils: void <clinit>()>
STATIC edge: $r1 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String separatorsToUnix(java.lang.String)>(r0) in <org.apache.commons.io.FilenameUtils: java.lang.String separatorsToSystem(java.lang.String)> ==> <org.apache.commons.io.FilenameUtils: java.lang.String separatorsToUnix(java.lang.String)>
STATIC edge: $r2 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String separatorsToWindows(java.lang.String)>(r0) in <org.apache.commons.io.FilenameUtils: java.lang.String separatorsToSystem(java.lang.String)> ==> <org.apache.commons.io.FilenameUtils: java.lang.String separatorsToWindows(java.lang.String)>
STATIC edge: $z0 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean isSystemWindows()>() in <org.apache.commons.io.FilenameUtils: java.lang.String separatorsToSystem(java.lang.String)> ==> <org.apache.commons.io.FilenameUtils: boolean isSystemWindows()>
CLINIT edge: $z4 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean isSeparator(char)>(c7) in <org.apache.commons.io.FilenameUtils: int getPrefixLength(java.lang.String)> ==> <org.apache.commons.io.FilenameUtils: void <clinit>()>
STATIC edge: $z1 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean isSeparator(char)>(c7) in <org.apache.commons.io.FilenameUtils: int getPrefixLength(java.lang.String)> ==> <org.apache.commons.io.FilenameUtils: boolean isSeparator(char)>
STATIC edge: $i1 = staticinvoke <java.lang.Math: int min(int,int)>(i20, $i21) in <org.apache.commons.io.FilenameUtils: int getPrefixLength(java.lang.String)> ==> <java.lang.Math: int min(int,int)>
STATIC edge: $z2 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean isSeparator(char)>(c15) in <org.apache.commons.io.FilenameUtils: int getPrefixLength(java.lang.String)> ==> <org.apache.commons.io.FilenameUtils: boolean isSeparator(char)>
STATIC edge: $z0 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean isSeparator(char)>(c7) in <org.apache.commons.io.FilenameUtils: int getPrefixLength(java.lang.String)> ==> <org.apache.commons.io.FilenameUtils: boolean isSeparator(char)>
STATIC edge: $z3 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean isSeparator(char)>($c3) in <org.apache.commons.io.FilenameUtils: int getPrefixLength(java.lang.String)> ==> <org.apache.commons.io.FilenameUtils: boolean isSeparator(char)>
STATIC edge: c16 = staticinvoke <java.lang.Character: char toUpperCase(char)>(c7) in <org.apache.commons.io.FilenameUtils: int getPrefixLength(java.lang.String)> ==> <java.lang.Character: char toUpperCase(char)>
STATIC edge: $i4 = staticinvoke <java.lang.Math: int min(int,int)>(i12, $i13) in <org.apache.commons.io.FilenameUtils: int getPrefixLength(java.lang.String)> ==> <java.lang.Math: int min(int,int)>
STATIC edge: $z4 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean isSeparator(char)>(c7) in <org.apache.commons.io.FilenameUtils: int getPrefixLength(java.lang.String)> ==> <org.apache.commons.io.FilenameUtils: boolean isSeparator(char)>
CLINIT edge: $z0 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean isSeparator(char)>(c7) in <org.apache.commons.io.FilenameUtils: int getPrefixLength(java.lang.String)> ==> <org.apache.commons.io.FilenameUtils: void <clinit>()>
CLINIT edge: $z3 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean isSeparator(char)>($c3) in <org.apache.commons.io.FilenameUtils: int getPrefixLength(java.lang.String)> ==> <org.apache.commons.io.FilenameUtils: void <clinit>()>
CLINIT edge: c16 = staticinvoke <java.lang.Character: char toUpperCase(char)>(c7) in <org.apache.commons.io.FilenameUtils: int getPrefixLength(java.lang.String)> ==> <java.lang.Character: void <clinit>()>
STATIC edge: $i2 = staticinvoke <java.lang.Math: int max(int,int)>(i0, i1) in <org.apache.commons.io.FilenameUtils: int indexOfLastSeparator(java.lang.String)> ==> <java.lang.Math: int max(int,int)>
CLINIT edge: i1 = staticinvoke <org.apache.commons.io.FilenameUtils: int indexOfLastSeparator(java.lang.String)>(r0) in <org.apache.commons.io.FilenameUtils: int indexOfExtension(java.lang.String)> ==> <org.apache.commons.io.FilenameUtils: void <clinit>()>
STATIC edge: i1 = staticinvoke <org.apache.commons.io.FilenameUtils: int indexOfLastSeparator(java.lang.String)>(r0) in <org.apache.commons.io.FilenameUtils: int indexOfExtension(java.lang.String)> ==> <org.apache.commons.io.FilenameUtils: int indexOfLastSeparator(java.lang.String)>
CLINIT edge: i0 = staticinvoke <org.apache.commons.io.FilenameUtils: int getPrefixLength(java.lang.String)>(r0) in <org.apache.commons.io.FilenameUtils: java.lang.String getPrefix(java.lang.String)> ==> <org.apache.commons.io.FilenameUtils: void <clinit>()>
STATIC edge: i0 = staticinvoke <org.apache.commons.io.FilenameUtils: int getPrefixLength(java.lang.String)>(r0) in <org.apache.commons.io.FilenameUtils: java.lang.String getPrefix(java.lang.String)> ==> <org.apache.commons.io.FilenameUtils: int getPrefixLength(java.lang.String)>
CLINIT edge: $r1 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String doGetPath(java.lang.String,int)>(r0, 1) in <org.apache.commons.io.FilenameUtils: java.lang.String getPath(java.lang.String)> ==> <org.apache.commons.io.FilenameUtils: void <clinit>()>
STATIC edge: $r1 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String doGetPath(java.lang.String,int)>(r0, 1) in <org.apache.commons.io.FilenameUtils: java.lang.String getPath(java.lang.String)> ==> <org.apache.commons.io.FilenameUtils: java.lang.String doGetPath(java.lang.String,int)>
CLINIT edge: $r1 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String doGetPath(java.lang.String,int)>(r0, 0) in <org.apache.commons.io.FilenameUtils: java.lang.String getPathNoEndSeparator(java.lang.String)> ==> <org.apache.commons.io.FilenameUtils: void <clinit>()>
STATIC edge: $r1 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String doGetPath(java.lang.String,int)>(r0, 0) in <org.apache.commons.io.FilenameUtils: java.lang.String getPathNoEndSeparator(java.lang.String)> ==> <org.apache.commons.io.FilenameUtils: java.lang.String doGetPath(java.lang.String,int)>
CLINIT edge: $r1 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String doGetFullPath(java.lang.String,boolean)>(r0, 1) in <org.apache.commons.io.FilenameUtils: java.lang.String getFullPath(java.lang.String)> ==> <org.apache.commons.io.FilenameUtils: void <clinit>()>
STATIC edge: $r1 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String doGetFullPath(java.lang.String,boolean)>(r0, 1) in <org.apache.commons.io.FilenameUtils: java.lang.String getFullPath(java.lang.String)> ==> <org.apache.commons.io.FilenameUtils: java.lang.String doGetFullPath(java.lang.String,boolean)>
CLINIT edge: $r1 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String doGetFullPath(java.lang.String,boolean)>(r0, 0) in <org.apache.commons.io.FilenameUtils: java.lang.String getFullPathNoEndSeparator(java.lang.String)> ==> <org.apache.commons.io.FilenameUtils: void <clinit>()>
STATIC edge: $r1 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String doGetFullPath(java.lang.String,boolean)>(r0, 0) in <org.apache.commons.io.FilenameUtils: java.lang.String getFullPathNoEndSeparator(java.lang.String)> ==> <org.apache.commons.io.FilenameUtils: java.lang.String doGetFullPath(java.lang.String,boolean)>
CLINIT edge: i0 = staticinvoke <org.apache.commons.io.FilenameUtils: int indexOfLastSeparator(java.lang.String)>(r0) in <org.apache.commons.io.FilenameUtils: java.lang.String getName(java.lang.String)> ==> <org.apache.commons.io.FilenameUtils: void <clinit>()>
STATIC edge: i0 = staticinvoke <org.apache.commons.io.FilenameUtils: int indexOfLastSeparator(java.lang.String)>(r0) in <org.apache.commons.io.FilenameUtils: java.lang.String getName(java.lang.String)> ==> <org.apache.commons.io.FilenameUtils: int indexOfLastSeparator(java.lang.String)>
CLINIT edge: $r1 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String getName(java.lang.String)>(r0) in <org.apache.commons.io.FilenameUtils: java.lang.String getBaseName(java.lang.String)> ==> <org.apache.commons.io.FilenameUtils: void <clinit>()>
STATIC edge: $r2 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String removeExtension(java.lang.String)>($r1) in <org.apache.commons.io.FilenameUtils: java.lang.String getBaseName(java.lang.String)> ==> <org.apache.commons.io.FilenameUtils: java.lang.String removeExtension(java.lang.String)>
STATIC edge: $r1 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String getName(java.lang.String)>(r0) in <org.apache.commons.io.FilenameUtils: java.lang.String getBaseName(java.lang.String)> ==> <org.apache.commons.io.FilenameUtils: java.lang.String getName(java.lang.String)>
CLINIT edge: i0 = staticinvoke <org.apache.commons.io.FilenameUtils: int indexOfExtension(java.lang.String)>(r0) in <org.apache.commons.io.FilenameUtils: java.lang.String getExtension(java.lang.String)> ==> <org.apache.commons.io.FilenameUtils: void <clinit>()>
STATIC edge: i0 = staticinvoke <org.apache.commons.io.FilenameUtils: int indexOfExtension(java.lang.String)>(r0) in <org.apache.commons.io.FilenameUtils: java.lang.String getExtension(java.lang.String)> ==> <org.apache.commons.io.FilenameUtils: int indexOfExtension(java.lang.String)>
CLINIT edge: i0 = staticinvoke <org.apache.commons.io.FilenameUtils: int indexOfExtension(java.lang.String)>(r0) in <org.apache.commons.io.FilenameUtils: java.lang.String removeExtension(java.lang.String)> ==> <org.apache.commons.io.FilenameUtils: void <clinit>()>
STATIC edge: i0 = staticinvoke <org.apache.commons.io.FilenameUtils: int indexOfExtension(java.lang.String)>(r0) in <org.apache.commons.io.FilenameUtils: java.lang.String removeExtension(java.lang.String)> ==> <org.apache.commons.io.FilenameUtils: int indexOfExtension(java.lang.String)>
CLINIT edge: $r2 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase SENSITIVE> in <org.apache.commons.io.FilenameUtils: boolean equals(java.lang.String,java.lang.String)> ==> <org.apache.commons.io.IOCase: void <clinit>()>
STATIC edge: $z0 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean equals(java.lang.String,java.lang.String,boolean,org.apache.commons.io.IOCase)>(r0, r1, 0, $r2) in <org.apache.commons.io.FilenameUtils: boolean equals(java.lang.String,java.lang.String)> ==> <org.apache.commons.io.FilenameUtils: boolean equals(java.lang.String,java.lang.String,boolean,org.apache.commons.io.IOCase)>
CLINIT edge: $z0 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean equals(java.lang.String,java.lang.String,boolean,org.apache.commons.io.IOCase)>(r0, r1, 0, $r2) in <org.apache.commons.io.FilenameUtils: boolean equals(java.lang.String,java.lang.String)> ==> <org.apache.commons.io.FilenameUtils: void <clinit>()>
CLINIT edge: $r2 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase SYSTEM> in <org.apache.commons.io.FilenameUtils: boolean equalsOnSystem(java.lang.String,java.lang.String)> ==> <org.apache.commons.io.IOCase: void <clinit>()>
STATIC edge: $z0 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean equals(java.lang.String,java.lang.String,boolean,org.apache.commons.io.IOCase)>(r0, r1, 0, $r2) in <org.apache.commons.io.FilenameUtils: boolean equalsOnSystem(java.lang.String,java.lang.String)> ==> <org.apache.commons.io.FilenameUtils: boolean equals(java.lang.String,java.lang.String,boolean,org.apache.commons.io.IOCase)>
CLINIT edge: $z0 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean equals(java.lang.String,java.lang.String,boolean,org.apache.commons.io.IOCase)>(r0, r1, 0, $r2) in <org.apache.commons.io.FilenameUtils: boolean equalsOnSystem(java.lang.String,java.lang.String)> ==> <org.apache.commons.io.FilenameUtils: void <clinit>()>
CLINIT edge: $r2 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase SENSITIVE> in <org.apache.commons.io.FilenameUtils: boolean equalsNormalized(java.lang.String,java.lang.String)> ==> <org.apache.commons.io.IOCase: void <clinit>()>
STATIC edge: $z0 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean equals(java.lang.String,java.lang.String,boolean,org.apache.commons.io.IOCase)>(r0, r1, 1, $r2) in <org.apache.commons.io.FilenameUtils: boolean equalsNormalized(java.lang.String,java.lang.String)> ==> <org.apache.commons.io.FilenameUtils: boolean equals(java.lang.String,java.lang.String,boolean,org.apache.commons.io.IOCase)>
CLINIT edge: $z0 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean equals(java.lang.String,java.lang.String,boolean,org.apache.commons.io.IOCase)>(r0, r1, 1, $r2) in <org.apache.commons.io.FilenameUtils: boolean equalsNormalized(java.lang.String,java.lang.String)> ==> <org.apache.commons.io.FilenameUtils: void <clinit>()>
CLINIT edge: $r2 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase SYSTEM> in <org.apache.commons.io.FilenameUtils: boolean equalsNormalizedOnSystem(java.lang.String,java.lang.String)> ==> <org.apache.commons.io.IOCase: void <clinit>()>
STATIC edge: $z0 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean equals(java.lang.String,java.lang.String,boolean,org.apache.commons.io.IOCase)>(r0, r1, 1, $r2) in <org.apache.commons.io.FilenameUtils: boolean equalsNormalizedOnSystem(java.lang.String,java.lang.String)> ==> <org.apache.commons.io.FilenameUtils: boolean equals(java.lang.String,java.lang.String,boolean,org.apache.commons.io.IOCase)>
CLINIT edge: $z0 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean equals(java.lang.String,java.lang.String,boolean,org.apache.commons.io.IOCase)>(r0, r1, 1, $r2) in <org.apache.commons.io.FilenameUtils: boolean equalsNormalizedOnSystem(java.lang.String,java.lang.String)> ==> <org.apache.commons.io.FilenameUtils: void <clinit>()>
CLINIT edge: r0 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String)>(r0) in <org.apache.commons.io.FilenameUtils: boolean equals(java.lang.String,java.lang.String,boolean,org.apache.commons.io.IOCase)> ==> <org.apache.commons.io.FilenameUtils: void <clinit>()>
STATIC edge: r1 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String)>(r1) in <org.apache.commons.io.FilenameUtils: boolean equals(java.lang.String,java.lang.String,boolean,org.apache.commons.io.IOCase)> ==> <org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String)>
STATIC edge: r0 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String)>(r0) in <org.apache.commons.io.FilenameUtils: boolean equals(java.lang.String,java.lang.String,boolean,org.apache.commons.io.IOCase)> ==> <org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String)>
CLINIT edge: r2 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase SENSITIVE> in <org.apache.commons.io.FilenameUtils: boolean equals(java.lang.String,java.lang.String,boolean,org.apache.commons.io.IOCase)> ==> <org.apache.commons.io.IOCase: void <clinit>()>
CLINIT edge: $i0 = staticinvoke <org.apache.commons.io.FilenameUtils: int indexOfExtension(java.lang.String)>(r0) in <org.apache.commons.io.FilenameUtils: boolean isExtension(java.lang.String,java.lang.String)> ==> <org.apache.commons.io.FilenameUtils: void <clinit>()>
STATIC edge: r2 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String getExtension(java.lang.String)>(r0) in <org.apache.commons.io.FilenameUtils: boolean isExtension(java.lang.String,java.lang.String)> ==> <org.apache.commons.io.FilenameUtils: java.lang.String getExtension(java.lang.String)>
STATIC edge: $i0 = staticinvoke <org.apache.commons.io.FilenameUtils: int indexOfExtension(java.lang.String)>(r0) in <org.apache.commons.io.FilenameUtils: boolean isExtension(java.lang.String,java.lang.String)> ==> <org.apache.commons.io.FilenameUtils: int indexOfExtension(java.lang.String)>
CLINIT edge: r2 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String getExtension(java.lang.String)>(r0) in <org.apache.commons.io.FilenameUtils: boolean isExtension(java.lang.String,java.lang.String)> ==> <org.apache.commons.io.FilenameUtils: void <clinit>()>
CLINIT edge: $i0 = staticinvoke <org.apache.commons.io.FilenameUtils: int indexOfExtension(java.lang.String)>(r0) in <org.apache.commons.io.FilenameUtils: boolean isExtension(java.lang.String,java.lang.String[])> ==> <org.apache.commons.io.FilenameUtils: void <clinit>()>
STATIC edge: r2 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String getExtension(java.lang.String)>(r0) in <org.apache.commons.io.FilenameUtils: boolean isExtension(java.lang.String,java.lang.String[])> ==> <org.apache.commons.io.FilenameUtils: java.lang.String getExtension(java.lang.String)>
STATIC edge: $i0 = staticinvoke <org.apache.commons.io.FilenameUtils: int indexOfExtension(java.lang.String)>(r0) in <org.apache.commons.io.FilenameUtils: boolean isExtension(java.lang.String,java.lang.String[])> ==> <org.apache.commons.io.FilenameUtils: int indexOfExtension(java.lang.String)>
CLINIT edge: r2 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String getExtension(java.lang.String)>(r0) in <org.apache.commons.io.FilenameUtils: boolean isExtension(java.lang.String,java.lang.String[])> ==> <org.apache.commons.io.FilenameUtils: void <clinit>()>
CLINIT edge: $i0 = staticinvoke <org.apache.commons.io.FilenameUtils: int indexOfExtension(java.lang.String)>(r0) in <org.apache.commons.io.FilenameUtils: boolean isExtension(java.lang.String,java.util.Collection)> ==> <org.apache.commons.io.FilenameUtils: void <clinit>()>
STATIC edge: r2 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String getExtension(java.lang.String)>(r0) in <org.apache.commons.io.FilenameUtils: boolean isExtension(java.lang.String,java.util.Collection)> ==> <org.apache.commons.io.FilenameUtils: java.lang.String getExtension(java.lang.String)>
STATIC edge: $i0 = staticinvoke <org.apache.commons.io.FilenameUtils: int indexOfExtension(java.lang.String)>(r0) in <org.apache.commons.io.FilenameUtils: boolean isExtension(java.lang.String,java.util.Collection)> ==> <org.apache.commons.io.FilenameUtils: int indexOfExtension(java.lang.String)>
CLINIT edge: r2 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String getExtension(java.lang.String)>(r0) in <org.apache.commons.io.FilenameUtils: boolean isExtension(java.lang.String,java.util.Collection)> ==> <org.apache.commons.io.FilenameUtils: void <clinit>()>
CLINIT edge: $r2 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase SENSITIVE> in <org.apache.commons.io.FilenameUtils: boolean wildcardMatch(java.lang.String,java.lang.String)> ==> <org.apache.commons.io.IOCase: void <clinit>()>
STATIC edge: $z0 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)>(r0, r1, $r2) in <org.apache.commons.io.FilenameUtils: boolean wildcardMatch(java.lang.String,java.lang.String)> ==> <org.apache.commons.io.FilenameUtils: boolean wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)>
CLINIT edge: $z0 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)>(r0, r1, $r2) in <org.apache.commons.io.FilenameUtils: boolean wildcardMatch(java.lang.String,java.lang.String)> ==> <org.apache.commons.io.FilenameUtils: void <clinit>()>
CLINIT edge: $r2 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase SYSTEM> in <org.apache.commons.io.FilenameUtils: boolean wildcardMatchOnSystem(java.lang.String,java.lang.String)> ==> <org.apache.commons.io.IOCase: void <clinit>()>
STATIC edge: $z0 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)>(r0, r1, $r2) in <org.apache.commons.io.FilenameUtils: boolean wildcardMatchOnSystem(java.lang.String,java.lang.String)> ==> <org.apache.commons.io.FilenameUtils: boolean wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)>
CLINIT edge: $z0 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)>(r0, r1, $r2) in <org.apache.commons.io.FilenameUtils: boolean wildcardMatchOnSystem(java.lang.String,java.lang.String)> ==> <org.apache.commons.io.FilenameUtils: void <clinit>()>
CLINIT edge: r15 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase SENSITIVE> in <org.apache.commons.io.FilenameUtils: boolean wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)> ==> <org.apache.commons.io.IOCase: void <clinit>()>
STATIC edge: r0 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String[] splitOnTokens(java.lang.String)>(r17) in <org.apache.commons.io.FilenameUtils: boolean wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)> ==> <org.apache.commons.io.FilenameUtils: java.lang.String[] splitOnTokens(java.lang.String)>
CLINIT edge: r0 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String[] splitOnTokens(java.lang.String)>(r17) in <org.apache.commons.io.FilenameUtils: boolean wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)> ==> <org.apache.commons.io.FilenameUtils: void <clinit>()>
CLINIT edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Reader)>($r1) in <org.apache.commons.io.LineIterator: void close()> ==> <org.apache.commons.io.IOUtils: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Reader)>($r1) in <org.apache.commons.io.LineIterator: void close()> ==> <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Reader)>
CLINIT edge: $r0 = new org.apache.commons.io.output.ByteArrayOutputStream in <org.apache.commons.io.IOUtils: byte[] toByteArray(java.io.InputStream)> ==> <org.apache.commons.io.output.ByteArrayOutputStream: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: int copy(java.io.InputStream,java.io.OutputStream)>(r2, $r0) in <org.apache.commons.io.IOUtils: byte[] toByteArray(java.io.InputStream)> ==> <org.apache.commons.io.IOUtils: int copy(java.io.InputStream,java.io.OutputStream)>
CLINIT edge: staticinvoke <org.apache.commons.io.IOUtils: int copy(java.io.InputStream,java.io.OutputStream)>(r2, $r0) in <org.apache.commons.io.IOUtils: byte[] toByteArray(java.io.InputStream)> ==> <org.apache.commons.io.IOUtils: void <clinit>()>
CLINIT edge: $r0 = new org.apache.commons.io.output.ByteArrayOutputStream in <org.apache.commons.io.IOUtils: byte[] toByteArray(java.io.Reader)> ==> <org.apache.commons.io.output.ByteArrayOutputStream: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void copy(java.io.Reader,java.io.OutputStream)>(r2, $r0) in <org.apache.commons.io.IOUtils: byte[] toByteArray(java.io.Reader)> ==> <org.apache.commons.io.IOUtils: void copy(java.io.Reader,java.io.OutputStream)>
CLINIT edge: staticinvoke <org.apache.commons.io.IOUtils: void copy(java.io.Reader,java.io.OutputStream)>(r2, $r0) in <org.apache.commons.io.IOUtils: byte[] toByteArray(java.io.Reader)> ==> <org.apache.commons.io.IOUtils: void <clinit>()>
CLINIT edge: $r0 = new org.apache.commons.io.output.ByteArrayOutputStream in <org.apache.commons.io.IOUtils: byte[] toByteArray(java.io.Reader,java.lang.String)> ==> <org.apache.commons.io.output.ByteArrayOutputStream: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void copy(java.io.Reader,java.io.OutputStream,java.lang.String)>(r2, $r0, r3) in <org.apache.commons.io.IOUtils: byte[] toByteArray(java.io.Reader,java.lang.String)> ==> <org.apache.commons.io.IOUtils: void copy(java.io.Reader,java.io.OutputStream,java.lang.String)>
CLINIT edge: staticinvoke <org.apache.commons.io.IOUtils: void copy(java.io.Reader,java.io.OutputStream,java.lang.String)>(r2, $r0, r3) in <org.apache.commons.io.IOUtils: byte[] toByteArray(java.io.Reader,java.lang.String)> ==> <org.apache.commons.io.IOUtils: void <clinit>()>
CLINIT edge: staticinvoke <org.apache.commons.io.IOUtils: void copy(java.io.InputStream,java.io.Writer)>(r2, $r0) in <org.apache.commons.io.IOUtils: char[] toCharArray(java.io.InputStream)> ==> <org.apache.commons.io.IOUtils: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void copy(java.io.InputStream,java.io.Writer)>(r2, $r0) in <org.apache.commons.io.IOUtils: char[] toCharArray(java.io.InputStream)> ==> <org.apache.commons.io.IOUtils: void copy(java.io.InputStream,java.io.Writer)>
CLINIT edge: staticinvoke <org.apache.commons.io.IOUtils: void copy(java.io.InputStream,java.io.Writer,java.lang.String)>(r2, $r0, r3) in <org.apache.commons.io.IOUtils: char[] toCharArray(java.io.InputStream,java.lang.String)> ==> <org.apache.commons.io.IOUtils: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void copy(java.io.InputStream,java.io.Writer,java.lang.String)>(r2, $r0, r3) in <org.apache.commons.io.IOUtils: char[] toCharArray(java.io.InputStream,java.lang.String)> ==> <org.apache.commons.io.IOUtils: void copy(java.io.InputStream,java.io.Writer,java.lang.String)>
CLINIT edge: staticinvoke <org.apache.commons.io.IOUtils: int copy(java.io.Reader,java.io.Writer)>(r2, $r0) in <org.apache.commons.io.IOUtils: char[] toCharArray(java.io.Reader)> ==> <org.apache.commons.io.IOUtils: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: int copy(java.io.Reader,java.io.Writer)>(r2, $r0) in <org.apache.commons.io.IOUtils: char[] toCharArray(java.io.Reader)> ==> <org.apache.commons.io.IOUtils: int copy(java.io.Reader,java.io.Writer)>
CLINIT edge: staticinvoke <org.apache.commons.io.IOUtils: void copy(java.io.InputStream,java.io.Writer)>(r2, $r0) in <org.apache.commons.io.IOUtils: java.lang.String toString(java.io.InputStream)> ==> <org.apache.commons.io.IOUtils: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void copy(java.io.InputStream,java.io.Writer)>(r2, $r0) in <org.apache.commons.io.IOUtils: java.lang.String toString(java.io.InputStream)> ==> <org.apache.commons.io.IOUtils: void copy(java.io.InputStream,java.io.Writer)>
CLINIT edge: staticinvoke <org.apache.commons.io.IOUtils: void copy(java.io.InputStream,java.io.Writer,java.lang.String)>(r2, $r0, r3) in <org.apache.commons.io.IOUtils: java.lang.String toString(java.io.InputStream,java.lang.String)> ==> <org.apache.commons.io.IOUtils: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void copy(java.io.InputStream,java.io.Writer,java.lang.String)>(r2, $r0, r3) in <org.apache.commons.io.IOUtils: java.lang.String toString(java.io.InputStream,java.lang.String)> ==> <org.apache.commons.io.IOUtils: void copy(java.io.InputStream,java.io.Writer,java.lang.String)>
CLINIT edge: staticinvoke <org.apache.commons.io.IOUtils: int copy(java.io.Reader,java.io.Writer)>(r2, $r0) in <org.apache.commons.io.IOUtils: java.lang.String toString(java.io.Reader)> ==> <org.apache.commons.io.IOUtils: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: int copy(java.io.Reader,java.io.Writer)>(r2, $r0) in <org.apache.commons.io.IOUtils: java.lang.String toString(java.io.Reader)> ==> <org.apache.commons.io.IOUtils: int copy(java.io.Reader,java.io.Writer)>
CLINIT edge: $r0 = new java.lang.String in <org.apache.commons.io.IOUtils: java.lang.String toString(byte[])> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r3 = new java.lang.String in <org.apache.commons.io.IOUtils: java.lang.String toString(byte[],java.lang.String)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r1 = new java.lang.String in <org.apache.commons.io.IOUtils: java.lang.String toString(byte[],java.lang.String)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r3 = staticinvoke <org.apache.commons.io.IOUtils: java.util.List readLines(java.io.Reader)>($r0) in <org.apache.commons.io.IOUtils: java.util.List readLines(java.io.InputStream)> ==> <org.apache.commons.io.IOUtils: void <clinit>()>
STATIC edge: $r3 = staticinvoke <org.apache.commons.io.IOUtils: java.util.List readLines(java.io.Reader)>($r0) in <org.apache.commons.io.IOUtils: java.util.List readLines(java.io.InputStream)> ==> <org.apache.commons.io.IOUtils: java.util.List readLines(java.io.Reader)>
CLINIT edge: $r5 = staticinvoke <org.apache.commons.io.IOUtils: java.util.List readLines(java.io.InputStream)>(r2) in <org.apache.commons.io.IOUtils: java.util.List readLines(java.io.InputStream,java.lang.String)> ==> <org.apache.commons.io.IOUtils: void <clinit>()>
STATIC edge: $r4 = staticinvoke <org.apache.commons.io.IOUtils: java.util.List readLines(java.io.Reader)>($r1) in <org.apache.commons.io.IOUtils: java.util.List readLines(java.io.InputStream,java.lang.String)> ==> <org.apache.commons.io.IOUtils: java.util.List readLines(java.io.Reader)>
STATIC edge: $r5 = staticinvoke <org.apache.commons.io.IOUtils: java.util.List readLines(java.io.InputStream)>(r2) in <org.apache.commons.io.IOUtils: java.util.List readLines(java.io.InputStream,java.lang.String)> ==> <org.apache.commons.io.IOUtils: java.util.List readLines(java.io.InputStream)>
CLINIT edge: $r4 = staticinvoke <org.apache.commons.io.IOUtils: java.util.List readLines(java.io.Reader)>($r1) in <org.apache.commons.io.IOUtils: java.util.List readLines(java.io.InputStream,java.lang.String)> ==> <org.apache.commons.io.IOUtils: void <clinit>()>
CLINIT edge: $r2 = new java.lang.String in <org.apache.commons.io.IOUtils: void write(byte[],java.io.Writer)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: staticinvoke <org.apache.commons.io.IOUtils: void write(byte[],java.io.Writer)>(r0, r2) in <org.apache.commons.io.IOUtils: void write(byte[],java.io.Writer,java.lang.String)> ==> <org.apache.commons.io.IOUtils: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void write(byte[],java.io.Writer)>(r0, r2) in <org.apache.commons.io.IOUtils: void write(byte[],java.io.Writer,java.lang.String)> ==> <org.apache.commons.io.IOUtils: void write(byte[],java.io.Writer)>
CLINIT edge: $r3 = new java.lang.String in <org.apache.commons.io.IOUtils: void write(byte[],java.io.Writer,java.lang.String)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r2 = new java.lang.String in <org.apache.commons.io.IOUtils: void write(char[],java.io.OutputStream)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: staticinvoke <org.apache.commons.io.IOUtils: void write(char[],java.io.OutputStream)>(r0, r2) in <org.apache.commons.io.IOUtils: void write(char[],java.io.OutputStream,java.lang.String)> ==> <org.apache.commons.io.IOUtils: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void write(char[],java.io.OutputStream)>(r0, r2) in <org.apache.commons.io.IOUtils: void write(char[],java.io.OutputStream,java.lang.String)> ==> <org.apache.commons.io.IOUtils: void write(char[],java.io.OutputStream)>
CLINIT edge: $r3 = new java.lang.String in <org.apache.commons.io.IOUtils: void write(char[],java.io.OutputStream,java.lang.String)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: staticinvoke <org.apache.commons.io.IOUtils: void write(java.lang.String,java.io.OutputStream)>(r0, r2) in <org.apache.commons.io.IOUtils: void write(java.lang.String,java.io.OutputStream,java.lang.String)> ==> <org.apache.commons.io.IOUtils: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void write(java.lang.String,java.io.OutputStream)>(r0, r2) in <org.apache.commons.io.IOUtils: void write(java.lang.String,java.io.OutputStream,java.lang.String)> ==> <org.apache.commons.io.IOUtils: void write(java.lang.String,java.io.OutputStream)>
CLINIT edge: staticinvoke <org.apache.commons.io.IOUtils: void write(java.lang.StringBuffer,java.io.OutputStream)>(r0, r2) in <org.apache.commons.io.IOUtils: void write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String)> ==> <org.apache.commons.io.IOUtils: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void write(java.lang.StringBuffer,java.io.OutputStream)>(r0, r2) in <org.apache.commons.io.IOUtils: void write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String)> ==> <org.apache.commons.io.IOUtils: void write(java.lang.StringBuffer,java.io.OutputStream)>
CLINIT edge: r7 = <org.apache.commons.io.IOUtils: java.lang.String LINE_SEPARATOR> in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)> ==> <org.apache.commons.io.IOUtils: void <clinit>()>
CLINIT edge: staticinvoke <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)>(r1, r8, r4) in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)> ==> <org.apache.commons.io.IOUtils: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)>(r1, r8, r4) in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)> ==> <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)>
CLINIT edge: r8 = <org.apache.commons.io.IOUtils: java.lang.String LINE_SEPARATOR> in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)> ==> <org.apache.commons.io.IOUtils: void <clinit>()>
CLINIT edge: r5 = <org.apache.commons.io.IOUtils: java.lang.String LINE_SEPARATOR> in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.Writer)> ==> <org.apache.commons.io.IOUtils: void <clinit>()>
CLINIT edge: l0 = staticinvoke <org.apache.commons.io.IOUtils: long copyLarge(java.io.InputStream,java.io.OutputStream)>(r0, r1) in <org.apache.commons.io.IOUtils: int copy(java.io.InputStream,java.io.OutputStream)> ==> <org.apache.commons.io.IOUtils: void <clinit>()>
STATIC edge: l0 = staticinvoke <org.apache.commons.io.IOUtils: long copyLarge(java.io.InputStream,java.io.OutputStream)>(r0, r1) in <org.apache.commons.io.IOUtils: int copy(java.io.InputStream,java.io.OutputStream)> ==> <org.apache.commons.io.IOUtils: long copyLarge(java.io.InputStream,java.io.OutputStream)>
CLINIT edge: staticinvoke <org.apache.commons.io.IOUtils: int copy(java.io.Reader,java.io.Writer)>($r0, r3) in <org.apache.commons.io.IOUtils: void copy(java.io.InputStream,java.io.Writer)> ==> <org.apache.commons.io.IOUtils: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: int copy(java.io.Reader,java.io.Writer)>($r0, r3) in <org.apache.commons.io.IOUtils: void copy(java.io.InputStream,java.io.Writer)> ==> <org.apache.commons.io.IOUtils: int copy(java.io.Reader,java.io.Writer)>
CLINIT edge: staticinvoke <org.apache.commons.io.IOUtils: void copy(java.io.InputStream,java.io.Writer)>(r2, r4) in <org.apache.commons.io.IOUtils: void copy(java.io.InputStream,java.io.Writer,java.lang.String)> ==> <org.apache.commons.io.IOUtils: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: int copy(java.io.Reader,java.io.Writer)>($r1, r4) in <org.apache.commons.io.IOUtils: void copy(java.io.InputStream,java.io.Writer,java.lang.String)> ==> <org.apache.commons.io.IOUtils: int copy(java.io.Reader,java.io.Writer)>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void copy(java.io.InputStream,java.io.Writer)>(r2, r4) in <org.apache.commons.io.IOUtils: void copy(java.io.InputStream,java.io.Writer,java.lang.String)> ==> <org.apache.commons.io.IOUtils: void copy(java.io.InputStream,java.io.Writer)>
CLINIT edge: staticinvoke <org.apache.commons.io.IOUtils: int copy(java.io.Reader,java.io.Writer)>($r1, r4) in <org.apache.commons.io.IOUtils: void copy(java.io.InputStream,java.io.Writer,java.lang.String)> ==> <org.apache.commons.io.IOUtils: void <clinit>()>
CLINIT edge: l0 = staticinvoke <org.apache.commons.io.IOUtils: long copyLarge(java.io.Reader,java.io.Writer)>(r0, r1) in <org.apache.commons.io.IOUtils: int copy(java.io.Reader,java.io.Writer)> ==> <org.apache.commons.io.IOUtils: void <clinit>()>
STATIC edge: l0 = staticinvoke <org.apache.commons.io.IOUtils: long copyLarge(java.io.Reader,java.io.Writer)>(r0, r1) in <org.apache.commons.io.IOUtils: int copy(java.io.Reader,java.io.Writer)> ==> <org.apache.commons.io.IOUtils: long copyLarge(java.io.Reader,java.io.Writer)>
CLINIT edge: staticinvoke <org.apache.commons.io.IOUtils: int copy(java.io.Reader,java.io.Writer)>(r3, $r0) in <org.apache.commons.io.IOUtils: void copy(java.io.Reader,java.io.OutputStream)> ==> <org.apache.commons.io.IOUtils: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: int copy(java.io.Reader,java.io.Writer)>(r3, $r0) in <org.apache.commons.io.IOUtils: void copy(java.io.Reader,java.io.OutputStream)> ==> <org.apache.commons.io.IOUtils: int copy(java.io.Reader,java.io.Writer)>
CLINIT edge: staticinvoke <org.apache.commons.io.IOUtils: void copy(java.io.Reader,java.io.OutputStream)>(r4, r2) in <org.apache.commons.io.IOUtils: void copy(java.io.Reader,java.io.OutputStream,java.lang.String)> ==> <org.apache.commons.io.IOUtils: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: int copy(java.io.Reader,java.io.Writer)>(r4, $r1) in <org.apache.commons.io.IOUtils: void copy(java.io.Reader,java.io.OutputStream,java.lang.String)> ==> <org.apache.commons.io.IOUtils: int copy(java.io.Reader,java.io.Writer)>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void copy(java.io.Reader,java.io.OutputStream)>(r4, r2) in <org.apache.commons.io.IOUtils: void copy(java.io.Reader,java.io.OutputStream,java.lang.String)> ==> <org.apache.commons.io.IOUtils: void copy(java.io.Reader,java.io.OutputStream)>
CLINIT edge: staticinvoke <org.apache.commons.io.IOUtils: int copy(java.io.Reader,java.io.Writer)>(r4, $r1) in <org.apache.commons.io.IOUtils: void copy(java.io.Reader,java.io.OutputStream,java.lang.String)> ==> <org.apache.commons.io.IOUtils: void <clinit>()>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, $i14, $r5, i16, i12) in <org.apache.commons.io.output.ByteArrayOutputStream: void write(byte[],int,int)> ==> <java.lang.System: void <clinit>()>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, $i14, $r5, i16, i12) in <org.apache.commons.io.output.ByteArrayOutputStream: void write(byte[],int,int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: i12 = staticinvoke <java.lang.Math: int min(int,int)>(i15, $i11) in <org.apache.commons.io.output.ByteArrayOutputStream: void write(byte[],int,int)> ==> <java.lang.Math: int min(int,int)>
STATIC edge: i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, i3) in <org.apache.commons.io.output.ByteArrayOutputStream: void writeTo(java.io.OutputStream)> ==> <java.lang.Math: int min(int,int)>
CLINIT edge: $r4 = <org.apache.commons.io.output.ByteArrayOutputStream: byte[] EMPTY_BYTE_ARRAY> in <org.apache.commons.io.output.ByteArrayOutputStream: byte[] toByteArray()> ==> <org.apache.commons.io.output.ByteArrayOutputStream: void <clinit>()>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, r1, i4, i2) in <org.apache.commons.io.output.ByteArrayOutputStream: byte[] toByteArray()> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, i3) in <org.apache.commons.io.output.ByteArrayOutputStream: byte[] toByteArray()> ==> <java.lang.Math: int min(int,int)>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, r1, i4, i2) in <org.apache.commons.io.output.ByteArrayOutputStream: byte[] toByteArray()> ==> <java.lang.System: void <clinit>()>
CLINIT edge: $r0 = new java.lang.String in <org.apache.commons.io.output.ByteArrayOutputStream: java.lang.String toString()> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r0 = new java.lang.String in <org.apache.commons.io.output.ByteArrayOutputStream: java.lang.String toString(java.lang.String)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $i0 = staticinvoke <java.lang.Float: int floatToIntBits(float)>(f0) in <org.apache.commons.io.EndianUtils: float swapFloat(float)> ==> <java.lang.Float: void <clinit>()>
STATIC edge: $f1 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>($i1) in <org.apache.commons.io.EndianUtils: float swapFloat(float)> ==> <java.lang.Float: float intBitsToFloat(int)>
STATIC edge: $i1 = staticinvoke <org.apache.commons.io.EndianUtils: int swapInteger(int)>($i0) in <org.apache.commons.io.EndianUtils: float swapFloat(float)> ==> <org.apache.commons.io.EndianUtils: int swapInteger(int)>
STATIC edge: $i0 = staticinvoke <java.lang.Float: int floatToIntBits(float)>(f0) in <org.apache.commons.io.EndianUtils: float swapFloat(float)> ==> <java.lang.Float: int floatToIntBits(float)>
CLINIT edge: $l0 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d0) in <org.apache.commons.io.EndianUtils: double swapDouble(double)> ==> <java.lang.Double: void <clinit>()>
STATIC edge: $d1 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l1) in <org.apache.commons.io.EndianUtils: double swapDouble(double)> ==> <java.lang.Double: double longBitsToDouble(long)>
STATIC edge: $l1 = staticinvoke <org.apache.commons.io.EndianUtils: long swapLong(long)>($l0) in <org.apache.commons.io.EndianUtils: double swapDouble(double)> ==> <org.apache.commons.io.EndianUtils: long swapLong(long)>
STATIC edge: $l0 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d0) in <org.apache.commons.io.EndianUtils: double swapDouble(double)> ==> <java.lang.Double: long doubleToLongBits(double)>
CLINIT edge: $i1 = staticinvoke <java.lang.Float: int floatToIntBits(float)>(f0) in <org.apache.commons.io.EndianUtils: void writeSwappedFloat(byte[],int,float)> ==> <java.lang.Float: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.io.EndianUtils: void writeSwappedInteger(byte[],int,int)>(r0, i0, $i1) in <org.apache.commons.io.EndianUtils: void writeSwappedFloat(byte[],int,float)> ==> <org.apache.commons.io.EndianUtils: void writeSwappedInteger(byte[],int,int)>
STATIC edge: $i1 = staticinvoke <java.lang.Float: int floatToIntBits(float)>(f0) in <org.apache.commons.io.EndianUtils: void writeSwappedFloat(byte[],int,float)> ==> <java.lang.Float: int floatToIntBits(float)>
CLINIT edge: $f0 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>($i1) in <org.apache.commons.io.EndianUtils: float readSwappedFloat(byte[],int)> ==> <java.lang.Float: void <clinit>()>
STATIC edge: $f0 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>($i1) in <org.apache.commons.io.EndianUtils: float readSwappedFloat(byte[],int)> ==> <java.lang.Float: float intBitsToFloat(int)>
STATIC edge: $i1 = staticinvoke <org.apache.commons.io.EndianUtils: int readSwappedInteger(byte[],int)>(r0, i0) in <org.apache.commons.io.EndianUtils: float readSwappedFloat(byte[],int)> ==> <org.apache.commons.io.EndianUtils: int readSwappedInteger(byte[],int)>
CLINIT edge: $l1 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d0) in <org.apache.commons.io.EndianUtils: void writeSwappedDouble(byte[],int,double)> ==> <java.lang.Double: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.io.EndianUtils: void writeSwappedLong(byte[],int,long)>(r0, i0, $l1) in <org.apache.commons.io.EndianUtils: void writeSwappedDouble(byte[],int,double)> ==> <org.apache.commons.io.EndianUtils: void writeSwappedLong(byte[],int,long)>
STATIC edge: $l1 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d0) in <org.apache.commons.io.EndianUtils: void writeSwappedDouble(byte[],int,double)> ==> <java.lang.Double: long doubleToLongBits(double)>
CLINIT edge: $d0 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l1) in <org.apache.commons.io.EndianUtils: double readSwappedDouble(byte[],int)> ==> <java.lang.Double: void <clinit>()>
STATIC edge: $d0 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l1) in <org.apache.commons.io.EndianUtils: double readSwappedDouble(byte[],int)> ==> <java.lang.Double: double longBitsToDouble(long)>
STATIC edge: $l1 = staticinvoke <org.apache.commons.io.EndianUtils: long readSwappedLong(byte[],int)>(r0, i0) in <org.apache.commons.io.EndianUtils: double readSwappedDouble(byte[],int)> ==> <org.apache.commons.io.EndianUtils: long readSwappedLong(byte[],int)>
STATIC edge: $i0 = staticinvoke <org.apache.commons.io.EndianUtils: int read(java.io.InputStream)>(r0) in <org.apache.commons.io.EndianUtils: short readSwappedShort(java.io.InputStream)> ==> <org.apache.commons.io.EndianUtils: int read(java.io.InputStream)>
STATIC edge: $i3 = staticinvoke <org.apache.commons.io.EndianUtils: int read(java.io.InputStream)>(r0) in <org.apache.commons.io.EndianUtils: short readSwappedShort(java.io.InputStream)> ==> <org.apache.commons.io.EndianUtils: int read(java.io.InputStream)>
STATIC edge: i0 = staticinvoke <org.apache.commons.io.EndianUtils: int read(java.io.InputStream)>(r0) in <org.apache.commons.io.EndianUtils: int readSwappedUnsignedShort(java.io.InputStream)> ==> <org.apache.commons.io.EndianUtils: int read(java.io.InputStream)>
STATIC edge: i1 = staticinvoke <org.apache.commons.io.EndianUtils: int read(java.io.InputStream)>(r0) in <org.apache.commons.io.EndianUtils: int readSwappedUnsignedShort(java.io.InputStream)> ==> <org.apache.commons.io.EndianUtils: int read(java.io.InputStream)>
STATIC edge: i0 = staticinvoke <org.apache.commons.io.EndianUtils: int read(java.io.InputStream)>(r0) in <org.apache.commons.io.EndianUtils: int readSwappedInteger(java.io.InputStream)> ==> <org.apache.commons.io.EndianUtils: int read(java.io.InputStream)>
STATIC edge: i3 = staticinvoke <org.apache.commons.io.EndianUtils: int read(java.io.InputStream)>(r0) in <org.apache.commons.io.EndianUtils: int readSwappedInteger(java.io.InputStream)> ==> <org.apache.commons.io.EndianUtils: int read(java.io.InputStream)>
STATIC edge: i2 = staticinvoke <org.apache.commons.io.EndianUtils: int read(java.io.InputStream)>(r0) in <org.apache.commons.io.EndianUtils: int readSwappedInteger(java.io.InputStream)> ==> <org.apache.commons.io.EndianUtils: int read(java.io.InputStream)>
STATIC edge: i1 = staticinvoke <org.apache.commons.io.EndianUtils: int read(java.io.InputStream)>(r0) in <org.apache.commons.io.EndianUtils: int readSwappedInteger(java.io.InputStream)> ==> <org.apache.commons.io.EndianUtils: int read(java.io.InputStream)>
STATIC edge: i0 = staticinvoke <org.apache.commons.io.EndianUtils: int read(java.io.InputStream)>(r0) in <org.apache.commons.io.EndianUtils: long readSwappedUnsignedInteger(java.io.InputStream)> ==> <org.apache.commons.io.EndianUtils: int read(java.io.InputStream)>
STATIC edge: i3 = staticinvoke <org.apache.commons.io.EndianUtils: int read(java.io.InputStream)>(r0) in <org.apache.commons.io.EndianUtils: long readSwappedUnsignedInteger(java.io.InputStream)> ==> <org.apache.commons.io.EndianUtils: int read(java.io.InputStream)>
STATIC edge: i2 = staticinvoke <org.apache.commons.io.EndianUtils: int read(java.io.InputStream)>(r0) in <org.apache.commons.io.EndianUtils: long readSwappedUnsignedInteger(java.io.InputStream)> ==> <org.apache.commons.io.EndianUtils: int read(java.io.InputStream)>
STATIC edge: i1 = staticinvoke <org.apache.commons.io.EndianUtils: int read(java.io.InputStream)>(r0) in <org.apache.commons.io.EndianUtils: long readSwappedUnsignedInteger(java.io.InputStream)> ==> <org.apache.commons.io.EndianUtils: int read(java.io.InputStream)>
STATIC edge: $i1 = staticinvoke <org.apache.commons.io.EndianUtils: int read(java.io.InputStream)>(r1) in <org.apache.commons.io.EndianUtils: long readSwappedLong(java.io.InputStream)> ==> <org.apache.commons.io.EndianUtils: int read(java.io.InputStream)>
STATIC edge: $l0 = staticinvoke <org.apache.commons.io.EndianUtils: long readSwappedLong(byte[],int)>(r0, 0) in <org.apache.commons.io.EndianUtils: long readSwappedLong(java.io.InputStream)> ==> <org.apache.commons.io.EndianUtils: long readSwappedLong(byte[],int)>
CLINIT edge: $i0 = staticinvoke <java.lang.Float: int floatToIntBits(float)>(f0) in <org.apache.commons.io.EndianUtils: void writeSwappedFloat(java.io.OutputStream,float)> ==> <java.lang.Float: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.io.EndianUtils: void writeSwappedInteger(java.io.OutputStream,int)>(r0, $i0) in <org.apache.commons.io.EndianUtils: void writeSwappedFloat(java.io.OutputStream,float)> ==> <org.apache.commons.io.EndianUtils: void writeSwappedInteger(java.io.OutputStream,int)>
STATIC edge: $i0 = staticinvoke <java.lang.Float: int floatToIntBits(float)>(f0) in <org.apache.commons.io.EndianUtils: void writeSwappedFloat(java.io.OutputStream,float)> ==> <java.lang.Float: int floatToIntBits(float)>
CLINIT edge: $f0 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>($i0) in <org.apache.commons.io.EndianUtils: float readSwappedFloat(java.io.InputStream)> ==> <java.lang.Float: void <clinit>()>
STATIC edge: $f0 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>($i0) in <org.apache.commons.io.EndianUtils: float readSwappedFloat(java.io.InputStream)> ==> <java.lang.Float: float intBitsToFloat(int)>
STATIC edge: $i0 = staticinvoke <org.apache.commons.io.EndianUtils: int readSwappedInteger(java.io.InputStream)>(r0) in <org.apache.commons.io.EndianUtils: float readSwappedFloat(java.io.InputStream)> ==> <org.apache.commons.io.EndianUtils: int readSwappedInteger(java.io.InputStream)>
CLINIT edge: $l0 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d0) in <org.apache.commons.io.EndianUtils: void writeSwappedDouble(java.io.OutputStream,double)> ==> <java.lang.Double: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)>(r0, $l0) in <org.apache.commons.io.EndianUtils: void writeSwappedDouble(java.io.OutputStream,double)> ==> <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)>
STATIC edge: $l0 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d0) in <org.apache.commons.io.EndianUtils: void writeSwappedDouble(java.io.OutputStream,double)> ==> <java.lang.Double: long doubleToLongBits(double)>
CLINIT edge: $d0 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l0) in <org.apache.commons.io.EndianUtils: double readSwappedDouble(java.io.InputStream)> ==> <java.lang.Double: void <clinit>()>
STATIC edge: $d0 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l0) in <org.apache.commons.io.EndianUtils: double readSwappedDouble(java.io.InputStream)> ==> <java.lang.Double: double longBitsToDouble(long)>
STATIC edge: $l0 = staticinvoke <org.apache.commons.io.EndianUtils: long readSwappedLong(java.io.InputStream)>(r0) in <org.apache.commons.io.EndianUtils: double readSwappedDouble(java.io.InputStream)> ==> <org.apache.commons.io.EndianUtils: long readSwappedLong(java.io.InputStream)>
CLINIT edge: $r2 = <org.apache.commons.io.FileCleaner: org.apache.commons.io.FileCleaningTracker theInstance> in <org.apache.commons.io.FileCleaner: void track(java.io.File,java.lang.Object)> ==> <org.apache.commons.io.FileCleaner: void <clinit>()>
CLINIT edge: $r3 = <org.apache.commons.io.FileCleaner: org.apache.commons.io.FileCleaningTracker theInstance> in <org.apache.commons.io.FileCleaner: void track(java.io.File,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)> ==> <org.apache.commons.io.FileCleaner: void <clinit>()>
CLINIT edge: $r2 = <org.apache.commons.io.FileCleaner: org.apache.commons.io.FileCleaningTracker theInstance> in <org.apache.commons.io.FileCleaner: void track(java.lang.String,java.lang.Object)> ==> <org.apache.commons.io.FileCleaner: void <clinit>()>
CLINIT edge: $r3 = <org.apache.commons.io.FileCleaner: org.apache.commons.io.FileCleaningTracker theInstance> in <org.apache.commons.io.FileCleaner: void track(java.lang.String,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)> ==> <org.apache.commons.io.FileCleaner: void <clinit>()>
CLINIT edge: $r0 = <org.apache.commons.io.FileCleaner: org.apache.commons.io.FileCleaningTracker theInstance> in <org.apache.commons.io.FileCleaner: int getTrackCount()> ==> <org.apache.commons.io.FileCleaner: void <clinit>()>
CLINIT edge: $r0 = <org.apache.commons.io.FileCleaner: org.apache.commons.io.FileCleaningTracker theInstance> in <org.apache.commons.io.FileCleaner: void exitWhenFinished()> ==> <org.apache.commons.io.FileCleaner: void <clinit>()>
CLINIT edge: $r0 = <org.apache.commons.io.FileCleaner: org.apache.commons.io.FileCleaningTracker theInstance> in <org.apache.commons.io.FileCleaner: org.apache.commons.io.FileCleaningTracker getInstance()> ==> <org.apache.commons.io.FileCleaner: void <clinit>()>
CLINIT edge: $r1 = new java.io.File in <org.apache.commons.io.FileCleaningTracker$Tracker: boolean delete()> ==> <java.io.File: void <clinit>()>
CLINIT edge: $r2 = newarray (java.lang.String)[1] in <org.apache.commons.io.filefilter.WildcardFileFilter: void <init>(java.lang.String,org.apache.commons.io.IOCase)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r6 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase SENSITIVE> in <org.apache.commons.io.filefilter.WildcardFileFilter: void <init>(java.lang.String,org.apache.commons.io.IOCase)> ==> <org.apache.commons.io.IOCase: void <clinit>()>
CLINIT edge: $r5 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase SENSITIVE> in <org.apache.commons.io.filefilter.WildcardFileFilter: void <init>(java.lang.String[],org.apache.commons.io.IOCase)> ==> <org.apache.commons.io.IOCase: void <clinit>()>
CLINIT edge: $r2 = newarray (java.lang.String)[$i0] in <org.apache.commons.io.filefilter.WildcardFileFilter: void <init>(java.util.List,org.apache.commons.io.IOCase)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r9 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase SENSITIVE> in <org.apache.commons.io.filefilter.WildcardFileFilter: void <init>(java.util.List,org.apache.commons.io.IOCase)> ==> <org.apache.commons.io.IOCase: void <clinit>()>
CLINIT edge: $z0 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)>(r2, $r5, $r4) in <org.apache.commons.io.filefilter.WildcardFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.FilenameUtils: void <clinit>()>
STATIC edge: $z0 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)>(r2, $r5, $r4) in <org.apache.commons.io.filefilter.WildcardFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.FilenameUtils: boolean wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)>
CLINIT edge: $z0 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)>(r1, $r6, $r5) in <org.apache.commons.io.filefilter.WildcardFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.FilenameUtils: void <clinit>()>
STATIC edge: $z0 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)>(r1, $r6, $r5) in <org.apache.commons.io.filefilter.WildcardFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.FilenameUtils: boolean wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)>
CLINIT edge: $r2 = newarray (java.lang.String)[1] in <org.apache.commons.io.filefilter.WildcardFilter: void <init>(java.lang.String)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r2 = newarray (java.lang.String)[$i0] in <org.apache.commons.io.filefilter.WildcardFilter: void <init>(java.util.List)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r5 = new java.io.File in <org.apache.commons.io.filefilter.WildcardFilter: boolean accept(java.io.File,java.lang.String)> ==> <java.io.File: void <clinit>()>
STATIC edge: $z0 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean wildcardMatch(java.lang.String,java.lang.String)>(r2, $r4) in <org.apache.commons.io.filefilter.WildcardFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.FilenameUtils: boolean wildcardMatch(java.lang.String,java.lang.String)>
CLINIT edge: $z0 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean wildcardMatch(java.lang.String,java.lang.String)>(r2, $r4) in <org.apache.commons.io.filefilter.WildcardFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.FilenameUtils: void <clinit>()>
CLINIT edge: $z1 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean wildcardMatch(java.lang.String,java.lang.String)>($r3, $r5) in <org.apache.commons.io.filefilter.WildcardFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.FilenameUtils: void <clinit>()>
STATIC edge: $z1 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean wildcardMatch(java.lang.String,java.lang.String)>($r3, $r5) in <org.apache.commons.io.filefilter.WildcardFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.FilenameUtils: boolean wildcardMatch(java.lang.String,java.lang.String)>
CLINIT edge: $r1 = <org.apache.commons.io.FileSystemUtils: org.apache.commons.io.FileSystemUtils INSTANCE> in <org.apache.commons.io.FileSystemUtils: long freeSpace(java.lang.String)> ==> <org.apache.commons.io.FileSystemUtils: void <clinit>()>
CLINIT edge: $r1 = <org.apache.commons.io.FileSystemUtils: org.apache.commons.io.FileSystemUtils INSTANCE> in <org.apache.commons.io.FileSystemUtils: long freeSpaceKb(java.lang.String)> ==> <org.apache.commons.io.FileSystemUtils: void <clinit>()>
CLINIT edge: $r11 = staticinvoke <org.apache.commons.io.HexDump: java.lang.StringBuffer dump(long)>(l17) in <org.apache.commons.io.HexDump: void dump(byte[],long,java.io.OutputStream,int)> ==> <org.apache.commons.io.HexDump: void <clinit>()>
STATIC edge: $r22 = staticinvoke <org.apache.commons.io.HexDump: java.lang.StringBuffer dump(byte)>($b16) in <org.apache.commons.io.HexDump: void dump(byte[],long,java.io.OutputStream,int)> ==> <org.apache.commons.io.HexDump: java.lang.StringBuffer dump(byte)>
STATIC edge: $r11 = staticinvoke <org.apache.commons.io.HexDump: java.lang.StringBuffer dump(long)>(l17) in <org.apache.commons.io.HexDump: void dump(byte[],long,java.io.OutputStream,int)> ==> <org.apache.commons.io.HexDump: java.lang.StringBuffer dump(long)>
STATIC edge: $d0 = staticinvoke <org.apache.commons.io.EndianUtils: double readSwappedDouble(java.io.InputStream)>($r1) in <org.apache.commons.io.input.SwappedDataInputStream: double readDouble()> ==> <org.apache.commons.io.EndianUtils: double readSwappedDouble(java.io.InputStream)>
STATIC edge: $f0 = staticinvoke <org.apache.commons.io.EndianUtils: float readSwappedFloat(java.io.InputStream)>($r1) in <org.apache.commons.io.input.SwappedDataInputStream: float readFloat()> ==> <org.apache.commons.io.EndianUtils: float readSwappedFloat(java.io.InputStream)>
STATIC edge: $i0 = staticinvoke <org.apache.commons.io.EndianUtils: int readSwappedInteger(java.io.InputStream)>($r1) in <org.apache.commons.io.input.SwappedDataInputStream: int readInt()> ==> <org.apache.commons.io.EndianUtils: int readSwappedInteger(java.io.InputStream)>
STATIC edge: $l0 = staticinvoke <org.apache.commons.io.EndianUtils: long readSwappedLong(java.io.InputStream)>($r1) in <org.apache.commons.io.input.SwappedDataInputStream: long readLong()> ==> <org.apache.commons.io.EndianUtils: long readSwappedLong(java.io.InputStream)>
STATIC edge: $s0 = staticinvoke <org.apache.commons.io.EndianUtils: short readSwappedShort(java.io.InputStream)>($r1) in <org.apache.commons.io.input.SwappedDataInputStream: short readShort()> ==> <org.apache.commons.io.EndianUtils: short readSwappedShort(java.io.InputStream)>
STATIC edge: $i0 = staticinvoke <org.apache.commons.io.EndianUtils: int readSwappedUnsignedShort(java.io.InputStream)>($r1) in <org.apache.commons.io.input.SwappedDataInputStream: int readUnsignedShort()> ==> <org.apache.commons.io.EndianUtils: int readSwappedUnsignedShort(java.io.InputStream)>
CLINIT edge: $r2 = new org.apache.commons.io.output.ByteArrayOutputStream in <org.apache.commons.io.output.DeferredFileOutputStream: void <init>(int,java.io.File)> ==> <org.apache.commons.io.output.ByteArrayOutputStream: void <clinit>()>
CLINIT edge: staticinvoke <org.apache.commons.io.IOUtils: int copy(java.io.InputStream,java.io.OutputStream)>($r1, r4) in <org.apache.commons.io.output.DeferredFileOutputStream: void writeTo(java.io.OutputStream)> ==> <org.apache.commons.io.IOUtils: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>($r1) in <org.apache.commons.io.output.DeferredFileOutputStream: void writeTo(java.io.OutputStream)> ==> <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>($r1) in <org.apache.commons.io.output.DeferredFileOutputStream: void writeTo(java.io.OutputStream)> ==> <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: int copy(java.io.InputStream,java.io.OutputStream)>($r1, r4) in <org.apache.commons.io.output.DeferredFileOutputStream: void writeTo(java.io.OutputStream)> ==> <org.apache.commons.io.IOUtils: int copy(java.io.InputStream,java.io.OutputStream)>
CLINIT edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>($r1) in <org.apache.commons.io.output.DeferredFileOutputStream: void writeTo(java.io.OutputStream)> ==> <org.apache.commons.io.IOUtils: void <clinit>()>
CLINIT edge: $r1 = new java.io.File in <org.apache.commons.io.output.LockableFileWriter: void <init>(java.lang.String,boolean,java.lang.String)> ==> <java.io.File: void <clinit>()>
CLINIT edge: staticinvoke <org.apache.commons.io.FileUtils: void forceMkdir(java.io.File)>($r13) in <org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File,java.lang.String,boolean,java.lang.String)> ==> <org.apache.commons.io.FileUtils: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.io.FileUtils: void forceMkdir(java.io.File)>($r2) in <org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File,java.lang.String,boolean,java.lang.String)> ==> <org.apache.commons.io.FileUtils: void forceMkdir(java.io.File)>
STATIC edge: r15 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.io.tmpdir") in <org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File,java.lang.String,boolean,java.lang.String)> ==> <java.lang.System: java.lang.String getProperty(java.lang.String)>
STATIC edge: staticinvoke <org.apache.commons.io.FileUtils: void forceMkdir(java.io.File)>($r13) in <org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File,java.lang.String,boolean,java.lang.String)> ==> <org.apache.commons.io.FileUtils: void forceMkdir(java.io.File)>
CLINIT edge: staticinvoke <org.apache.commons.io.FileUtils: void forceMkdir(java.io.File)>($r2) in <org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File,java.lang.String,boolean,java.lang.String)> ==> <org.apache.commons.io.FileUtils: void <clinit>()>
CLINIT edge: $r2 = new java.io.File in <org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File,java.lang.String,boolean,java.lang.String)> ==> <java.io.File: void <clinit>()>
CLINIT edge: r15 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.io.tmpdir") in <org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File,java.lang.String,boolean,java.lang.String)> ==> <java.lang.System: void <clinit>()>
CLINIT edge: $r0 = new org.apache.commons.io.filefilter.DirectoryFileFilter in <org.apache.commons.io.filefilter.DirectoryFileFilter: void <clinit>()> ==> <org.apache.commons.io.filefilter.DirectoryFileFilter: void <clinit>()>
CLINIT edge: $r0 = new org.apache.commons.io.filefilter.FileFileFilter in <org.apache.commons.io.filefilter.FileFileFilter: void <clinit>()> ==> <org.apache.commons.io.filefilter.FileFileFilter: void <clinit>()>
CLINIT edge: $r0 = new org.apache.commons.io.filefilter.TrueFileFilter in <org.apache.commons.io.filefilter.TrueFileFilter: void <clinit>()> ==> <org.apache.commons.io.filefilter.TrueFileFilter: void <clinit>()>
CLINIT edge: $r0 = new org.apache.commons.io.filefilter.FalseFileFilter in <org.apache.commons.io.filefilter.FalseFileFilter: void <clinit>()> ==> <org.apache.commons.io.filefilter.FalseFileFilter: void <clinit>()>
CLINIT edge: <java.lang.String: java.util.Comparator CASE_INSENSITIVE_ORDER> = null in <java.lang.String: void <clinit>()> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r0 = new org.apache.commons.io.IOCase in <org.apache.commons.io.IOCase: void <clinit>()> ==> <org.apache.commons.io.IOCase: void <clinit>()>
STATIC edge: $z0 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean isSystemWindows()>() in <org.apache.commons.io.IOCase: void <clinit>()> ==> <org.apache.commons.io.FilenameUtils: boolean isSystemWindows()>
CLINIT edge: $z0 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean isSystemWindows()>() in <org.apache.commons.io.IOCase: void <clinit>()> ==> <org.apache.commons.io.FilenameUtils: void <clinit>()>
CLINIT edge: $r0 = newarray (java.io.File)[0] in <org.apache.commons.io.FileUtils: void <clinit>()> ==> <java.io.File: void <clinit>()>
CLINIT edge: <org.apache.commons.io.FileUtils: java.io.File[] EMPTY_FILE_ARRAY> = $r0 in <org.apache.commons.io.FileUtils: void <clinit>()> ==> <org.apache.commons.io.FileUtils: void <clinit>()>
CLINIT edge: $c0 = <java.io.File: char separatorChar> in <org.apache.commons.io.IOUtils: void <clinit>()> ==> <java.io.File: void <clinit>()>
CLINIT edge: <org.apache.commons.io.IOUtils: char DIR_SEPARATOR> = $c0 in <org.apache.commons.io.IOUtils: void <clinit>()> ==> <org.apache.commons.io.IOUtils: void <clinit>()>
CLINIT edge: staticinvoke <org.apache.commons.io.FileUtils: void innerListFiles(java.util.Collection,java.io.File,org.apache.commons.io.filefilter.IOFileFilter)>(r4, $r6, r1) in <org.apache.commons.io.FileUtils: void innerListFiles(java.util.Collection,java.io.File,org.apache.commons.io.filefilter.IOFileFilter)> ==> <org.apache.commons.io.FileUtils: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.io.FileUtils: void innerListFiles(java.util.Collection,java.io.File,org.apache.commons.io.filefilter.IOFileFilter)>(r4, $r6, r1) in <org.apache.commons.io.FileUtils: void innerListFiles(java.util.Collection,java.io.File,org.apache.commons.io.filefilter.IOFileFilter)> ==> <org.apache.commons.io.FileUtils: void innerListFiles(java.util.Collection,java.io.File,org.apache.commons.io.filefilter.IOFileFilter)>
CLINIT edge: r1 = newarray (java.lang.String)[$i0] in <org.apache.commons.io.FileUtils: java.lang.String[] toSuffixes(java.lang.String[])> ==> <java.lang.String: void <clinit>()>
CLINIT edge: <java.lang.Integer: java.lang.Class TYPE> = null in <java.lang.Integer: void <clinit>()> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: staticinvoke <org.apache.commons.io.IOUtils: int copy(java.io.InputStream,java.io.OutputStream)>($r1, $r4) in <org.apache.commons.io.FileUtils: void doCopyFile(java.io.File,java.io.File,boolean)> ==> <org.apache.commons.io.IOUtils: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>($r1) in <org.apache.commons.io.FileUtils: void doCopyFile(java.io.File,java.io.File,boolean)> ==> <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>($r1) in <org.apache.commons.io.FileUtils: void doCopyFile(java.io.File,java.io.File,boolean)> ==> <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r4) in <org.apache.commons.io.FileUtils: void doCopyFile(java.io.File,java.io.File,boolean)> ==> <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r4) in <org.apache.commons.io.FileUtils: void doCopyFile(java.io.File,java.io.File,boolean)> ==> <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: int copy(java.io.InputStream,java.io.OutputStream)>($r1, $r4) in <org.apache.commons.io.FileUtils: void doCopyFile(java.io.File,java.io.File,boolean)> ==> <org.apache.commons.io.IOUtils: int copy(java.io.InputStream,java.io.OutputStream)>
CLINIT edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>($r1) in <org.apache.commons.io.FileUtils: void doCopyFile(java.io.File,java.io.File,boolean)> ==> <org.apache.commons.io.IOUtils: void <clinit>()>
CLINIT edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r4) in <org.apache.commons.io.FileUtils: void doCopyFile(java.io.File,java.io.File,boolean)> ==> <org.apache.commons.io.IOUtils: void <clinit>()>
CLINIT edge: $r3 = new java.io.File in <org.apache.commons.io.FileUtils: void doCopyDirectory(java.io.File,java.io.File,boolean)> ==> <java.io.File: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.io.FileUtils: void doCopyFile(java.io.File,java.io.File,boolean)>($r8, $r3, z2) in <org.apache.commons.io.FileUtils: void doCopyDirectory(java.io.File,java.io.File,boolean)> ==> <org.apache.commons.io.FileUtils: void doCopyFile(java.io.File,java.io.File,boolean)>
STATIC edge: staticinvoke <org.apache.commons.io.FileUtils: void doCopyDirectory(java.io.File,java.io.File,boolean)>($r9, $r3, z2) in <org.apache.commons.io.FileUtils: void doCopyDirectory(java.io.File,java.io.File,boolean)> ==> <org.apache.commons.io.FileUtils: void doCopyDirectory(java.io.File,java.io.File,boolean)>
CLINIT edge: staticinvoke <org.apache.commons.io.FileUtils: void doCopyFile(java.io.File,java.io.File,boolean)>($r8, $r3, z2) in <org.apache.commons.io.FileUtils: void doCopyDirectory(java.io.File,java.io.File,boolean)> ==> <org.apache.commons.io.FileUtils: void <clinit>()>
CLINIT edge: staticinvoke <org.apache.commons.io.FileUtils: void doCopyDirectory(java.io.File,java.io.File,boolean)>($r9, $r3, z2) in <org.apache.commons.io.FileUtils: void doCopyDirectory(java.io.File,java.io.File,boolean)> ==> <org.apache.commons.io.FileUtils: void <clinit>()>
CLINIT edge: staticinvoke <org.apache.commons.io.FileUtils: void cleanDirectoryOnExit(java.io.File)>(r0) in <org.apache.commons.io.FileUtils: void deleteDirectoryOnExit(java.io.File)> ==> <org.apache.commons.io.FileUtils: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.io.FileUtils: void cleanDirectoryOnExit(java.io.File)>(r0) in <org.apache.commons.io.FileUtils: void deleteDirectoryOnExit(java.io.File)> ==> <org.apache.commons.io.FileUtils: void cleanDirectoryOnExit(java.io.File)>
CLINIT edge: $c0 = <java.io.File: char separatorChar> in <org.apache.commons.io.FilenameUtils: void <clinit>()> ==> <java.io.File: void <clinit>()>
STATIC edge: $z0 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean isSystemWindows()>() in <org.apache.commons.io.FilenameUtils: void <clinit>()> ==> <org.apache.commons.io.FilenameUtils: boolean isSystemWindows()>
CLINIT edge: <org.apache.commons.io.FilenameUtils: char SYSTEM_SEPARATOR> = $c0 in <org.apache.commons.io.FilenameUtils: void <clinit>()> ==> <org.apache.commons.io.FilenameUtils: void <clinit>()>
CLINIT edge: i0 = staticinvoke <org.apache.commons.io.FilenameUtils: int getPrefixLength(java.lang.String)>(r0) in <org.apache.commons.io.FilenameUtils: java.lang.String doNormalize(java.lang.String,boolean)> ==> <org.apache.commons.io.FilenameUtils: void <clinit>()>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, $i18, r1, i0, $i17) in <org.apache.commons.io.FilenameUtils: java.lang.String doNormalize(java.lang.String,boolean)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, $i25, r1, $i24, $i23) in <org.apache.commons.io.FilenameUtils: java.lang.String doNormalize(java.lang.String,boolean)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, $i38, r1, $i37, $i36) in <org.apache.commons.io.FilenameUtils: java.lang.String doNormalize(java.lang.String,boolean)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i56, r1, $i48, $i47) in <org.apache.commons.io.FilenameUtils: java.lang.String doNormalize(java.lang.String,boolean)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: i0 = staticinvoke <org.apache.commons.io.FilenameUtils: int getPrefixLength(java.lang.String)>(r0) in <org.apache.commons.io.FilenameUtils: java.lang.String doNormalize(java.lang.String,boolean)> ==> <org.apache.commons.io.FilenameUtils: int getPrefixLength(java.lang.String)>
CLINIT edge: $r2 = new java.lang.String in <org.apache.commons.io.FilenameUtils: java.lang.String doNormalize(java.lang.String,boolean)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r3 = new java.lang.String in <org.apache.commons.io.FilenameUtils: java.lang.String doNormalize(java.lang.String,boolean)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r4 = new java.lang.String in <org.apache.commons.io.FilenameUtils: java.lang.String doNormalize(java.lang.String,boolean)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, $i18, r1, i0, $i17) in <org.apache.commons.io.FilenameUtils: java.lang.String doNormalize(java.lang.String,boolean)> ==> <java.lang.System: void <clinit>()>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, $i25, r1, $i24, $i23) in <org.apache.commons.io.FilenameUtils: java.lang.String doNormalize(java.lang.String,boolean)> ==> <java.lang.System: void <clinit>()>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, $i38, r1, $i37, $i36) in <org.apache.commons.io.FilenameUtils: java.lang.String doNormalize(java.lang.String,boolean)> ==> <java.lang.System: void <clinit>()>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i56, r1, $i48, $i47) in <org.apache.commons.io.FilenameUtils: java.lang.String doNormalize(java.lang.String,boolean)> ==> <java.lang.System: void <clinit>()>
CLINIT edge: $c0 = <org.apache.commons.io.FilenameUtils: char SYSTEM_SEPARATOR> in <org.apache.commons.io.FilenameUtils: boolean isSystemWindows()> ==> <org.apache.commons.io.FilenameUtils: void <clinit>()>
CLINIT edge: <java.lang.Character: java.lang.Class TYPE> = null in <java.lang.Character: void <clinit>()> ==> <java.lang.Character: void <clinit>()>
CLINIT edge: i0 = staticinvoke <org.apache.commons.io.FilenameUtils: int getPrefixLength(java.lang.String)>(r0) in <org.apache.commons.io.FilenameUtils: java.lang.String doGetPath(java.lang.String,int)> ==> <org.apache.commons.io.FilenameUtils: void <clinit>()>
STATIC edge: i1 = staticinvoke <org.apache.commons.io.FilenameUtils: int indexOfLastSeparator(java.lang.String)>(r0) in <org.apache.commons.io.FilenameUtils: java.lang.String doGetPath(java.lang.String,int)> ==> <org.apache.commons.io.FilenameUtils: int indexOfLastSeparator(java.lang.String)>
STATIC edge: i0 = staticinvoke <org.apache.commons.io.FilenameUtils: int getPrefixLength(java.lang.String)>(r0) in <org.apache.commons.io.FilenameUtils: java.lang.String doGetPath(java.lang.String,int)> ==> <org.apache.commons.io.FilenameUtils: int getPrefixLength(java.lang.String)>
CLINIT edge: i0 = staticinvoke <org.apache.commons.io.FilenameUtils: int getPrefixLength(java.lang.String)>(r0) in <org.apache.commons.io.FilenameUtils: java.lang.String doGetFullPath(java.lang.String,boolean)> ==> <org.apache.commons.io.FilenameUtils: void <clinit>()>
STATIC edge: i2 = staticinvoke <org.apache.commons.io.FilenameUtils: int indexOfLastSeparator(java.lang.String)>(r0) in <org.apache.commons.io.FilenameUtils: java.lang.String doGetFullPath(java.lang.String,boolean)> ==> <org.apache.commons.io.FilenameUtils: int indexOfLastSeparator(java.lang.String)>
STATIC edge: $r3 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String getPrefix(java.lang.String)>(r0) in <org.apache.commons.io.FilenameUtils: java.lang.String doGetFullPath(java.lang.String,boolean)> ==> <org.apache.commons.io.FilenameUtils: java.lang.String getPrefix(java.lang.String)>
STATIC edge: i0 = staticinvoke <org.apache.commons.io.FilenameUtils: int getPrefixLength(java.lang.String)>(r0) in <org.apache.commons.io.FilenameUtils: java.lang.String doGetFullPath(java.lang.String,boolean)> ==> <org.apache.commons.io.FilenameUtils: int getPrefixLength(java.lang.String)>
CLINIT edge: $r14 = newarray (java.lang.String)[1] in <org.apache.commons.io.FilenameUtils: java.lang.String[] splitOnTokens(java.lang.String)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r6 = newarray (java.lang.String)[$i2] in <org.apache.commons.io.FilenameUtils: java.lang.String[] splitOnTokens(java.lang.String)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: <org.apache.commons.io.output.ByteArrayOutputStream: byte[] EMPTY_BYTE_ARRAY> = $r0 in <org.apache.commons.io.output.ByteArrayOutputStream: void <clinit>()> ==> <org.apache.commons.io.output.ByteArrayOutputStream: void <clinit>()>
CLINIT edge: <java.lang.Float: java.lang.Class TYPE> = null in <java.lang.Float: void <clinit>()> ==> <java.lang.Float: void <clinit>()>
CLINIT edge: <java.lang.Double: java.lang.Class TYPE> = null in <java.lang.Double: void <clinit>()> ==> <java.lang.Double: void <clinit>()>
CLINIT edge: <org.apache.commons.io.FileCleaner: org.apache.commons.io.FileCleaningTracker theInstance> = $r0 in <org.apache.commons.io.FileCleaner: void <clinit>()> ==> <org.apache.commons.io.FileCleaner: void <clinit>()>
CLINIT edge: $r0 = new org.apache.commons.io.FileSystemUtils in <org.apache.commons.io.FileSystemUtils: void <clinit>()> ==> <org.apache.commons.io.FileSystemUtils: void <clinit>()>
STATIC edge: r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("os.name") in <org.apache.commons.io.FileSystemUtils: void <clinit>()> ==> <java.lang.System: java.lang.String getProperty(java.lang.String)>
CLINIT edge: <org.apache.commons.io.FileSystemUtils: int OS> = b13 in <org.apache.commons.io.FileSystemUtils: void <clinit>()> ==> <org.apache.commons.io.FileSystemUtils: void <clinit>()>
CLINIT edge: r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("os.name") in <org.apache.commons.io.FileSystemUtils: void <clinit>()> ==> <java.lang.System: void <clinit>()>
CLINIT edge: $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator") in <org.apache.commons.io.HexDump: void <clinit>()> ==> <java.lang.System: void <clinit>()>
STATIC edge: $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator") in <org.apache.commons.io.HexDump: void <clinit>()> ==> <java.lang.System: java.lang.String getProperty(java.lang.String)>
CLINIT edge: <org.apache.commons.io.HexDump: java.lang.String EOL> = $r0 in <org.apache.commons.io.HexDump: void <clinit>()> ==> <org.apache.commons.io.HexDump: void <clinit>()>
CLINIT edge: $r0 = <org.apache.commons.io.HexDump: java.lang.StringBuffer _cbuffer> in <org.apache.commons.io.HexDump: java.lang.StringBuffer dump(byte)> ==> <org.apache.commons.io.HexDump: void <clinit>()>
CLINIT edge: $r0 = <org.apache.commons.io.HexDump: java.lang.StringBuffer _lbuffer> in <org.apache.commons.io.HexDump: java.lang.StringBuffer dump(long)> ==> <org.apache.commons.io.HexDump: void <clinit>()>
CLINIT edge: staticinvoke <org.apache.commons.io.FileUtils: void forceDeleteOnExit(java.io.File)>(r1) in <org.apache.commons.io.FileUtils: void cleanDirectoryOnExit(java.io.File)> ==> <org.apache.commons.io.FileUtils: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.io.FileUtils: void forceDeleteOnExit(java.io.File)>(r1) in <org.apache.commons.io.FileUtils: void cleanDirectoryOnExit(java.io.File)> ==> <org.apache.commons.io.FileUtils: void forceDeleteOnExit(java.io.File)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Throwable: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Throwable: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Throwable: void <init>(java.lang.Throwable)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.Throwable fillInStackTrace()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.String getMessage()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.String getLocalizedMessage()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void printStackTrace()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void printStackTrace(java.io.PrintStream)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void printStackTrace(java.io.PrintWriter)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.Throwable getCause()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: void wait()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: void wait(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[])> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],int,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],int,int,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],int,int,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],int,int,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],int,int,java.nio.charset.Charset)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],int,int,java.nio.charset.Charset)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],java.nio.charset.Charset)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],java.nio.charset.Charset)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(char[])> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(char[],int,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(java.lang.StringBuffer)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(java.lang.StringBuffer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(int[],int,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(int[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(java.lang.StringBuilder)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(java.lang.StringBuilder)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int compareToIgnoreCase(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String concat(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String copyValueOf(char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String copyValueOf(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean endsWith(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean equalsIgnoreCase(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void getBytes(int,int,byte[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: byte[] getBytes()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: byte[] getBytes(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: byte[] getBytes(java.nio.charset.Charset)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void getChars(int,int,char[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int indexOf(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int indexOf(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int indexOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int indexOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int lastIndexOf(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int lastIndexOf(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int lastIndexOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int lastIndexOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean regionMatches(int,java.lang.String,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String replace(char,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean startsWith(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean startsWith(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String substring(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String substring(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: char[] toCharArray()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toLowerCase()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toLowerCase(java.util.Locale)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toUpperCase()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toUpperCase(java.util.Locale)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String trim()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean contentEquals(java.lang.StringBuffer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean contentEquals(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean matches(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String[] split(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String[] split(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.CharSequence subSequence(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int codePointAt(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int codePointBefore(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int codePointCount(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean contains(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int offsetByCodePoints(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.String: int compareTo(java.lang.String)>($r2) in <java.lang.String: int compareTo(java.lang.Object)> ==> <java.lang.String: int compareTo(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>()> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>(java.lang.String)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>(java.lang.Throwable)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class forName(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class[] getClasses()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.'annotation'.Annotation[] getAnnotations()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.String getCanonicalName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.ClassLoader getClassLoader()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Constructor[] getConstructors()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class[] getDeclaredClasses()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Object[] getEnumConstants()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Field getField(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Field[] getFields()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Type[] getGenericInterfaces()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Type getGenericSuperclass()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Method[] getMethods()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: int getModifiers()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.String getName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.String getSimpleName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.security.ProtectionDomain getProtectionDomain()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.net.URL getResource(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Object[] getSigners()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isAnnotation()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isAnnotationPresent(java.lang.Class)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isArray()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isEnum()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isLocalClass()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isMemberClass()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isSynthetic()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Object newInstance()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Package getPackage()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class asSubclass(java.lang.Class)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Object cast(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Exception: void <init>()> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Exception: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Exception: void <init>(java.lang.String)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Exception: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Exception: void <init>(java.lang.Throwable)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Exception: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.AbstractStringBuilder: void <init>()>() in <java.lang.StringBuffer: void <init>()> ==> <java.lang.AbstractStringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.AbstractStringBuilder: void <init>()>() in <java.lang.StringBuffer: void <init>(int)> ==> <java.lang.AbstractStringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.AbstractStringBuilder: void <init>()>() in <java.lang.StringBuffer: void <init>(java.lang.String)> ==> <java.lang.AbstractStringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.AbstractStringBuilder: void <init>()>() in <java.lang.StringBuffer: void <init>(java.lang.CharSequence)> ==> <java.lang.AbstractStringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void <init>(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.StringBuffer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer appendCodePoint(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: char charAt(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int codePointAt(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int codePointBefore(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int codePointCount(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer delete(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer deleteCharAt(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void ensureCapacity(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void getChars(int,int,char[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int indexOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.CharSequence,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int lastIndexOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int offsetByCodePoints(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer replace(int,int,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer reverse()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void setCharAt(int,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void setLength(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.CharSequence subSequence(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.String substring(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.String substring(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void trimToSize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: $i0 = specialinvoke r0.<java.lang.AbstractStringBuilder: int lastIndexOf(java.lang.String)>(r1) in <java.lang.StringBuffer: int lastIndexOf(java.lang.String)> ==> <java.lang.AbstractStringBuilder: int lastIndexOf(java.lang.String)>
SPECIAL edge: $i0 = specialinvoke r0.<java.lang.AbstractStringBuilder: int indexOf(java.lang.String)>(r1) in <java.lang.StringBuffer: int indexOf(java.lang.String)> ==> <java.lang.AbstractStringBuilder: int indexOf(java.lang.String)>
SPECIAL edge: $i0 = specialinvoke r0.<java.lang.AbstractStringBuilder: int length()>() in <java.lang.StringBuffer: int length()> ==> <java.lang.AbstractStringBuilder: int length()>
SPECIAL edge: $i0 = specialinvoke r0.<java.lang.AbstractStringBuilder: int capacity()>() in <java.lang.StringBuffer: int capacity()> ==> <java.lang.AbstractStringBuilder: int capacity()>
VIRTUAL edge: $r2 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence,int,int)>(r1, i0, i1) in <java.lang.StringBuffer: java.lang.Appendable append(java.lang.CharSequence,int,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence,int,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>(r1) in <java.lang.StringBuffer: java.lang.Appendable append(java.lang.CharSequence)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c0) in <java.lang.StringBuffer: java.lang.Appendable append(char)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(char)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.ClassNotFoundException: void <init>()> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassNotFoundException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.ClassNotFoundException: void <init>(java.lang.String)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassNotFoundException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.ClassNotFoundException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassNotFoundException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassNotFoundException: java.lang.Throwable getException()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassNotFoundException: java.lang.Throwable getCause()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ClassFormatError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassFormatError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ClassFormatError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassFormatError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.LinkageError: void <init>()> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.LinkageError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.LinkageError: void <init>(java.lang.String)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.LinkageError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: java.lang.String name()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: int ordinal()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: int compareTo(java.lang.Enum)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: java.lang.Class getDeclaringClass()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Enum: int compareTo(java.lang.Enum)>($r2) in <java.lang.Enum: int compareTo(java.lang.Object)> ==> <java.lang.Enum: int compareTo(java.lang.Enum)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Error: void <init>()> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Error: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Error: void <init>(java.lang.String)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Error: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Error: void <init>(java.lang.Throwable)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Error: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Float: void <init>(float)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: void <init>(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Float: void <init>(double)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: void <init>(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Float: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: int compareTo(java.lang.Float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: boolean isInfinite()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: boolean isInfinite(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: boolean isNaN()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: boolean isNaN(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: float parseFloat(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: java.lang.String toString(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: java.lang.Float valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: int compare(float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: java.lang.Float valueOf(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: java.lang.String toHexString(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Float: int compareTo(java.lang.Float)>($r2) in <java.lang.Float: int compareTo(java.lang.Object)> ==> <java.lang.Float: int compareTo(java.lang.Float)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Double: void <init>(double)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: void <init>(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Double: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: int compareTo(java.lang.Double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: boolean isInfinite()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: boolean isInfinite(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: boolean isNaN()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: boolean isNaN(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: double parseDouble(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: java.lang.String toString(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: java.lang.Double valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: int compare(double,double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: java.lang.Double valueOf(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: java.lang.String toHexString(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Double: int compareTo(java.lang.Double)>($r2) in <java.lang.Double: int compareTo(java.lang.Object)> ==> <java.lang.Double: int compareTo(java.lang.Double)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>()> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(java.lang.Object)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(boolean)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(char)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(int)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(long)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(float)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(double)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Integer: void <init>(int)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Integer: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int compareTo(java.lang.Integer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer decode(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer getInteger(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer getInteger(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer getInteger(java.lang.String,java.lang.Integer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int parseInt(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int parseInt(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toBinaryString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toHexString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toOctalString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toString(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int highestOneBit(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int lowestOneBit(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int numberOfLeadingZeros(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int numberOfTrailingZeros(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int bitCount(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int rotateLeft(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int rotateRight(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int reverseBytes(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int reverse(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int signum(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer valueOf(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Integer: int compareTo(java.lang.Integer)>($r2) in <java.lang.Integer: int compareTo(java.lang.Object)> ==> <java.lang.Integer: int compareTo(java.lang.Integer)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.NullPointerException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NullPointerException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.NullPointerException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NullPointerException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Character: void <init>(char)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: void <init>(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char charValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int compareTo(java.lang.Character)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: java.lang.Character valueOf(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isValidCodePoint(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isSupplementaryCodePoint(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isHighSurrogate(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLowSurrogate(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isSurrogatePair(char,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int charCount(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int toCodePoint(char,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointAt(java.lang.CharSequence,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointAt(char[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointAt(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointBefore(java.lang.CharSequence,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointBefore(char[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointBefore(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int toChars(int,char[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char[] toChars(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointCount(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int offsetByCodePoints(java.lang.CharSequence,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int offsetByCodePoints(char[],int,int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int digit(char,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int digit(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char forDigit(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int getNumericValue(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int getNumericValue(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int getType(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int getType(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: byte getDirectionality(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: byte getDirectionality(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isMirrored(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isMirrored(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isDefined(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isDefined(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isDigit(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isDigit(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isIdentifierIgnorable(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isIdentifierIgnorable(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isISOControl(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isISOControl(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaIdentifierPart(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaIdentifierPart(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaIdentifierStart(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaIdentifierStart(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaLetter(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaLetterOrDigit(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLetter(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLetter(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLetterOrDigit(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLetterOrDigit(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLowerCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLowerCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isSpace(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isSpaceChar(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isSpaceChar(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isTitleCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isTitleCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUnicodeIdentifierPart(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUnicodeIdentifierPart(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUnicodeIdentifierStart(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUnicodeIdentifierStart(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUpperCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUpperCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isWhitespace(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isWhitespace(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char reverseBytes(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char toLowerCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int toLowerCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: java.lang.String toString(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char toTitleCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int toTitleCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char toUpperCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int toUpperCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Character: int compareTo(java.lang.Character)>($r2) in <java.lang.Character: int compareTo(java.lang.Object)> ==> <java.lang.Character: int compareTo(java.lang.Character)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Long: void <init>(long)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: void <init>(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Long: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int compareTo(java.lang.Long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long decode(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long getLong(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long getLong(java.lang.String,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long getLong(java.lang.String,java.lang.Long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long parseLong(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long parseLong(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toBinaryString(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toHexString(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toOctalString(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toString(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toString(long,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long valueOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long highestOneBit(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long lowestOneBit(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int numberOfLeadingZeros(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int numberOfTrailingZeros(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int bitCount(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long rotateLeft(long,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long rotateRight(long,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long reverseBytes(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long reverse(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int signum(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long valueOf(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Long: int compareTo(java.lang.Long)>($r2) in <java.lang.Long: int compareTo(java.lang.Object)> ==> <java.lang.Long: int compareTo(java.lang.Long)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Short: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Short: void <init>(short)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: void <init>(short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: int compareTo(java.lang.Short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.Short decode(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: short parseShort(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: short parseShort(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.String toString(short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.Short valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.Short valueOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: short reverseBytes(short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.Short valueOf(short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Short: int compareTo(java.lang.Short)>($r2) in <java.lang.Short: int compareTo(java.lang.Object)> ==> <java.lang.Short: int compareTo(java.lang.Short)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Boolean: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Boolean: void <init>(boolean)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: void <init>(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: boolean booleanValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: int compareTo(java.lang.Boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: boolean getBoolean(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: boolean parseBoolean(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: java.lang.String toString(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: java.lang.Boolean valueOf(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Boolean: int compareTo(java.lang.Boolean)>($r2) in <java.lang.Boolean: int compareTo(java.lang.Object)> ==> <java.lang.Boolean: int compareTo(java.lang.Boolean)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Byte: void <init>(byte)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: void <init>(byte)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Byte: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: int compareTo(java.lang.Byte)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.Byte decode(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: byte parseByte(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: byte parseByte(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.String toString(byte)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.Byte valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.Byte valueOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.Byte valueOf(byte)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Byte: int compareTo(java.lang.Byte)>($r2) in <java.lang.Byte: int compareTo(java.lang.Object)> ==> <java.lang.Byte: int compareTo(java.lang.Byte)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.NoClassDefFoundError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoClassDefFoundError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.NoClassDefFoundError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoClassDefFoundError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.IndexOutOfBoundsException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IndexOutOfBoundsException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.StackOverflowError: void <init>()> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StackOverflowError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.StackOverflowError: void <init>(java.lang.String)> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StackOverflowError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.AbstractMethodError: void <init>()> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AbstractMethodError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.AbstractMethodError: void <init>(java.lang.String)> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AbstractMethodError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.IncompatibleClassChangeError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IncompatibleClassChangeError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.IncompatibleClassChangeError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IncompatibleClassChangeError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ClassCastException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassCastException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ClassCastException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassCastException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.VerifyError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.VerifyError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.VerifyError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.VerifyError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.NoSuchFieldError: void <init>()> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoSuchFieldError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.NoSuchFieldError: void <init>(java.lang.String)> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoSuchFieldError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.IllegalMonitorStateException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IllegalMonitorStateException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.IllegalMonitorStateException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IllegalMonitorStateException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.Runnable)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.Runnable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: int activeCount()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void checkAccess()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: int countStackFrames()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.Thread currentThread()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void destroy()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void dumpStack()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: int enumerate(java.lang.Thread[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.util.Map getAllStackTraces()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.ClassLoader getContextClassLoader()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getDefaultUncaughtExceptionHandler()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: long getId()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.String getName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: int getPriority()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.StackTraceElement[] getStackTrace()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.Thread$State getState()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.ThreadGroup getThreadGroup()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getUncaughtExceptionHandler()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void interrupt()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: boolean interrupted()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: boolean isAlive()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: boolean isDaemon()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: boolean isInterrupted()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void join()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void join(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void join(long,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void resume()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void run()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setDaemon(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setDefaultUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setName(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setPriority(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void sleep(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void sleep(long,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void start()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void stop()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void stop(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void suspend()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void yield()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: boolean holdsLock(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.UnknownError: void <init>()> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.UnknownError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.UnknownError: void <init>(java.lang.String)> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.UnknownError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.InternalError: void <init>()> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.InternalError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.InternalError: void <init>(java.lang.String)> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.InternalError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ArithmeticException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArithmeticException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ArithmeticException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArithmeticException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.NegativeArraySizeException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NegativeArraySizeException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.NegativeArraySizeException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NegativeArraySizeException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ClassCircularityError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassCircularityError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ClassCircularityError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassCircularityError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.NoSuchMethodError: void <init>()> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoSuchMethodError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.NoSuchMethodError: void <init>(java.lang.String)> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoSuchMethodError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IndexOutOfBoundsException: void <init>()>() in <java.lang.ArrayIndexOutOfBoundsException: void <init>()> ==> <java.lang.IndexOutOfBoundsException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArrayIndexOutOfBoundsException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IndexOutOfBoundsException: void <init>()>() in <java.lang.ArrayIndexOutOfBoundsException: void <init>(int)> ==> <java.lang.IndexOutOfBoundsException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArrayIndexOutOfBoundsException: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IndexOutOfBoundsException: void <init>()>() in <java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)> ==> <java.lang.IndexOutOfBoundsException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.ThreadDeath: void <init>()> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ThreadDeath: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.InstantiationError: void <init>()> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.InstantiationError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.InstantiationError: void <init>(java.lang.String)> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.InstantiationError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.IllegalAccessError: void <init>()> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IllegalAccessError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.IllegalAccessError: void <init>(java.lang.String)> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IllegalAccessError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.UnsatisfiedLinkError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.UnsatisfiedLinkError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.UnsatisfiedLinkError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.UnsatisfiedLinkError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ArrayStoreException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArrayStoreException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ArrayStoreException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArrayStoreException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ExceptionInInitializerError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ExceptionInInitializerError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ExceptionInInitializerError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ExceptionInInitializerError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ExceptionInInitializerError: void <init>(java.lang.Throwable)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ExceptionInInitializerError: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ExceptionInInitializerError: java.lang.Throwable getException()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ExceptionInInitializerError: java.lang.Throwable getCause()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.OutOfMemoryError: void <init>()> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.OutOfMemoryError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.OutOfMemoryError: void <init>(java.lang.String)> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.OutOfMemoryError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.apache.commons.io.CopyUtils: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(byte[])>(r1) in <org.apache.commons.io.CopyUtils: void copy(byte[],java.io.OutputStream)> ==> <org.apache.commons.io.output.NullOutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(byte[])>(r1) in <org.apache.commons.io.CopyUtils: void copy(byte[],java.io.OutputStream)> ==> <java.io.OutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(byte[])>(r1) in <org.apache.commons.io.CopyUtils: void copy(byte[],java.io.OutputStream)> ==> <org.apache.commons.io.output.ThresholdingOutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(byte[])>(r1) in <org.apache.commons.io.CopyUtils: void copy(byte[],java.io.OutputStream)> ==> <org.apache.commons.io.output.ProxyOutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(byte[])>(r1) in <org.apache.commons.io.CopyUtils: void copy(byte[],java.io.OutputStream)> ==> <org.apache.commons.io.output.TeeOutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(byte[])>(r1) in <org.apache.commons.io.CopyUtils: void copy(byte[],java.io.OutputStream)> ==> <org.apache.commons.io.output.CountingOutputStream: void write(byte[])>
SPECIAL edge: specialinvoke $r0.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1) in <org.apache.commons.io.CopyUtils: void copy(byte[],java.io.Writer)> ==> <java.io.ByteArrayInputStream: void <init>(byte[])>
SPECIAL edge: specialinvoke $r0.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1) in <org.apache.commons.io.CopyUtils: void copy(byte[],java.io.Writer,java.lang.String)> ==> <java.io.ByteArrayInputStream: void <init>(byte[])>
VIRTUAL edge: $i0 = virtualinvoke r1.<java.io.InputStream: int read(byte[])>(r0) in <org.apache.commons.io.CopyUtils: int copy(java.io.InputStream,java.io.OutputStream)> ==> <org.apache.commons.io.input.NullInputStream: int read(byte[])>
VIRTUAL edge: $i0 = virtualinvoke r1.<java.io.InputStream: int read(byte[])>(r0) in <org.apache.commons.io.CopyUtils: int copy(java.io.InputStream,java.io.OutputStream)> ==> <java.io.InputStream: int read(byte[])>
VIRTUAL edge: $i0 = virtualinvoke r1.<java.io.InputStream: int read(byte[])>(r0) in <org.apache.commons.io.CopyUtils: int copy(java.io.InputStream,java.io.OutputStream)> ==> <org.apache.commons.io.input.CountingInputStream: int read(byte[])>
VIRTUAL edge: $i0 = virtualinvoke r1.<java.io.InputStream: int read(byte[])>(r0) in <org.apache.commons.io.CopyUtils: int copy(java.io.InputStream,java.io.OutputStream)> ==> <org.apache.commons.io.input.ProxyInputStream: int read(byte[])>
VIRTUAL edge: virtualinvoke r2.<java.io.OutputStream: void write(byte[],int,int)>(r0, 0, $i0) in <org.apache.commons.io.CopyUtils: int copy(java.io.InputStream,java.io.OutputStream)> ==> <java.io.OutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r2.<java.io.OutputStream: void write(byte[],int,int)>(r0, 0, $i0) in <org.apache.commons.io.CopyUtils: int copy(java.io.InputStream,java.io.OutputStream)> ==> <java.io.PrintStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r2.<java.io.OutputStream: void write(byte[],int,int)>(r0, 0, $i0) in <org.apache.commons.io.CopyUtils: int copy(java.io.InputStream,java.io.OutputStream)> ==> <org.apache.commons.io.output.CountingOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r2.<java.io.OutputStream: void write(byte[],int,int)>(r0, 0, $i0) in <org.apache.commons.io.CopyUtils: int copy(java.io.InputStream,java.io.OutputStream)> ==> <org.apache.commons.io.output.NullOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r2.<java.io.OutputStream: void write(byte[],int,int)>(r0, 0, $i0) in <org.apache.commons.io.CopyUtils: int copy(java.io.InputStream,java.io.OutputStream)> ==> <org.apache.commons.io.output.ThresholdingOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r2.<java.io.OutputStream: void write(byte[],int,int)>(r0, 0, $i0) in <org.apache.commons.io.CopyUtils: int copy(java.io.InputStream,java.io.OutputStream)> ==> <org.apache.commons.io.output.ByteArrayOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r2.<java.io.OutputStream: void write(byte[],int,int)>(r0, 0, $i0) in <org.apache.commons.io.CopyUtils: int copy(java.io.InputStream,java.io.OutputStream)> ==> <java.io.FileOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r2.<java.io.OutputStream: void write(byte[],int,int)>(r0, 0, $i0) in <org.apache.commons.io.CopyUtils: int copy(java.io.InputStream,java.io.OutputStream)> ==> <java.io.FilterOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r2.<java.io.OutputStream: void write(byte[],int,int)>(r0, 0, $i0) in <org.apache.commons.io.CopyUtils: int copy(java.io.InputStream,java.io.OutputStream)> ==> <org.apache.commons.io.output.ProxyOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r2.<java.io.OutputStream: void write(byte[],int,int)>(r0, 0, $i0) in <org.apache.commons.io.CopyUtils: int copy(java.io.InputStream,java.io.OutputStream)> ==> <org.apache.commons.io.output.TeeOutputStream: void write(byte[],int,int)>
VIRTUAL edge: $i0 = virtualinvoke r1.<java.io.Reader: int read(char[])>(r0) in <org.apache.commons.io.CopyUtils: int copy(java.io.Reader,java.io.Writer)> ==> <org.apache.commons.io.input.NullReader: int read(char[])>
VIRTUAL edge: $i0 = virtualinvoke r1.<java.io.Reader: int read(char[])>(r0) in <org.apache.commons.io.CopyUtils: int copy(java.io.Reader,java.io.Writer)> ==> <java.io.Reader: int read(char[])>
VIRTUAL edge: virtualinvoke r2.<java.io.Writer: void write(char[],int,int)>(r0, 0, $i0) in <org.apache.commons.io.CopyUtils: int copy(java.io.Reader,java.io.Writer)> ==> <org.apache.commons.io.output.NullWriter: void write(char[],int,int)>
VIRTUAL edge: virtualinvoke r2.<java.io.Writer: void write(char[],int,int)>(r0, 0, $i0) in <org.apache.commons.io.CopyUtils: int copy(java.io.Reader,java.io.Writer)> ==> <java.io.StringWriter: void write(char[],int,int)>
VIRTUAL edge: virtualinvoke r2.<java.io.Writer: void write(char[],int,int)>(r0, 0, $i0) in <org.apache.commons.io.CopyUtils: int copy(java.io.Reader,java.io.Writer)> ==> <org.apache.commons.io.output.LockableFileWriter: void write(char[],int,int)>
VIRTUAL edge: virtualinvoke r2.<java.io.Writer: void write(char[],int,int)>(r0, 0, $i0) in <org.apache.commons.io.CopyUtils: int copy(java.io.Reader,java.io.Writer)> ==> <java.io.CharArrayWriter: void write(char[],int,int)>
VIRTUAL edge: virtualinvoke r2.<java.io.Writer: void write(char[],int,int)>(r0, 0, $i0) in <org.apache.commons.io.CopyUtils: int copy(java.io.Reader,java.io.Writer)> ==> <java.io.OutputStreamWriter: void write(char[],int,int)>
VIRTUAL edge: virtualinvoke r2.<java.io.Writer: void write(char[],int,int)>(r0, 0, $i0) in <org.apache.commons.io.CopyUtils: int copy(java.io.Reader,java.io.Writer)> ==> <java.io.PrintWriter: void write(char[],int,int)>
VIRTUAL edge: virtualinvoke r2.<java.io.Writer: void write(char[],int,int)>(r0, 0, $i0) in <org.apache.commons.io.CopyUtils: int copy(java.io.Reader,java.io.Writer)> ==> <org.apache.commons.io.output.ProxyWriter: void write(char[],int,int)>
SPECIAL edge: specialinvoke $r0.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r1) in <org.apache.commons.io.CopyUtils: void copy(java.io.InputStream,java.io.Writer)> ==> <java.io.InputStreamReader: void <init>(java.io.InputStream)>
SPECIAL edge: specialinvoke $r0.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>(r1, r2) in <org.apache.commons.io.CopyUtils: void copy(java.io.InputStream,java.io.Writer,java.lang.String)> ==> <java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>(r1) in <org.apache.commons.io.CopyUtils: void copy(java.io.Reader,java.io.OutputStream)> ==> <java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>
VIRTUAL edge: virtualinvoke $r0.<java.io.OutputStreamWriter: void flush()>() in <org.apache.commons.io.CopyUtils: void copy(java.io.Reader,java.io.OutputStream)> ==> <java.io.OutputStreamWriter: void flush()>
SPECIAL edge: specialinvoke $r0.<java.io.StringReader: void <init>(java.lang.String)>(r1) in <org.apache.commons.io.CopyUtils: void copy(java.lang.String,java.io.OutputStream)> ==> <java.io.StringReader: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r3.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>(r4) in <org.apache.commons.io.CopyUtils: void copy(java.lang.String,java.io.OutputStream)> ==> <java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>
VIRTUAL edge: virtualinvoke $r3.<java.io.OutputStreamWriter: void flush()>() in <org.apache.commons.io.CopyUtils: void copy(java.lang.String,java.io.OutputStream)> ==> <java.io.OutputStreamWriter: void flush()>
VIRTUAL edge: virtualinvoke r0.<java.io.Writer: void write(java.lang.String)>(r1) in <org.apache.commons.io.CopyUtils: void copy(java.lang.String,java.io.Writer)> ==> <java.io.PrintWriter: void write(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<java.io.Writer: void write(java.lang.String)>(r1) in <org.apache.commons.io.CopyUtils: void copy(java.lang.String,java.io.Writer)> ==> <org.apache.commons.io.output.ProxyWriter: void write(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<java.io.Writer: void write(java.lang.String)>(r1) in <org.apache.commons.io.CopyUtils: void copy(java.lang.String,java.io.Writer)> ==> <org.apache.commons.io.output.NullWriter: void write(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<java.io.Writer: void write(java.lang.String)>(r1) in <org.apache.commons.io.CopyUtils: void copy(java.lang.String,java.io.Writer)> ==> <java.io.StringWriter: void write(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<java.io.Writer: void write(java.lang.String)>(r1) in <org.apache.commons.io.CopyUtils: void copy(java.lang.String,java.io.Writer)> ==> <java.io.Writer: void write(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<java.io.Writer: void write(java.lang.String)>(r1) in <org.apache.commons.io.CopyUtils: void copy(java.lang.String,java.io.Writer)> ==> <org.apache.commons.io.output.LockableFileWriter: void write(java.lang.String)>
SPECIAL edge: specialinvoke r0.<org.apache.commons.io.DirectoryWalker$CancelException: void <init>(java.lang.String,java.io.File,int)>("Operation Cancelled", r1, i0) in <org.apache.commons.io.DirectoryWalker$CancelException: void <init>(java.io.File,int)> ==> <org.apache.commons.io.DirectoryWalker$CancelException: void <init>(java.lang.String,java.io.File,int)>
SPECIAL edge: specialinvoke r0.<java.io.IOException: void <init>(java.lang.String)>(r1) in <org.apache.commons.io.DirectoryWalker$CancelException: void <init>(java.lang.String,java.io.File,int)> ==> <java.io.IOException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.apache.commons.io.filefilter.FileFilterUtils: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<org.apache.commons.io.filefilter.PrefixFileFilter: void <init>(java.lang.String)>(r1) in <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter prefixFileFilter(java.lang.String)> ==> <org.apache.commons.io.filefilter.PrefixFileFilter: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<org.apache.commons.io.filefilter.SuffixFileFilter: void <init>(java.lang.String)>(r1) in <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter suffixFileFilter(java.lang.String)> ==> <org.apache.commons.io.filefilter.SuffixFileFilter: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<org.apache.commons.io.filefilter.NameFileFilter: void <init>(java.lang.String)>(r1) in <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter nameFileFilter(java.lang.String)> ==> <org.apache.commons.io.filefilter.NameFileFilter: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<org.apache.commons.io.filefilter.AndFileFilter: void <init>(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>(r1, r2) in <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter andFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)> ==> <org.apache.commons.io.filefilter.AndFileFilter: void <init>(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>
SPECIAL edge: specialinvoke $r0.<org.apache.commons.io.filefilter.OrFileFilter: void <init>(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>(r1, r2) in <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter orFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)> ==> <org.apache.commons.io.filefilter.OrFileFilter: void <init>(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>
SPECIAL edge: specialinvoke $r0.<org.apache.commons.io.filefilter.NotFileFilter: void <init>(org.apache.commons.io.filefilter.IOFileFilter)>(r1) in <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter notFileFilter(org.apache.commons.io.filefilter.IOFileFilter)> ==> <org.apache.commons.io.filefilter.NotFileFilter: void <init>(org.apache.commons.io.filefilter.IOFileFilter)>
SPECIAL edge: specialinvoke $r0.<org.apache.commons.io.filefilter.DelegateFileFilter: void <init>(java.io.FileFilter)>(r1) in <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter asFileFilter(java.io.FileFilter)> ==> <org.apache.commons.io.filefilter.DelegateFileFilter: void <init>(java.io.FileFilter)>
SPECIAL edge: specialinvoke $r0.<org.apache.commons.io.filefilter.DelegateFileFilter: void <init>(java.io.FilenameFilter)>(r1) in <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter asFileFilter(java.io.FilenameFilter)> ==> <org.apache.commons.io.filefilter.DelegateFileFilter: void <init>(java.io.FilenameFilter)>
SPECIAL edge: specialinvoke $r0.<org.apache.commons.io.filefilter.AgeFileFilter: void <init>(long)>(l0) in <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter ageFileFilter(long)> ==> <org.apache.commons.io.filefilter.AgeFileFilter: void <init>(long)>
SPECIAL edge: specialinvoke $r0.<org.apache.commons.io.filefilter.AgeFileFilter: void <init>(long,boolean)>(l0, z0) in <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter ageFileFilter(long,boolean)> ==> <org.apache.commons.io.filefilter.AgeFileFilter: void <init>(long,boolean)>
SPECIAL edge: specialinvoke $r0.<org.apache.commons.io.filefilter.AgeFileFilter: void <init>(java.util.Date)>(r1) in <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter ageFileFilter(java.util.Date)> ==> <org.apache.commons.io.filefilter.AgeFileFilter: void <init>(java.util.Date)>
SPECIAL edge: specialinvoke $r0.<org.apache.commons.io.filefilter.AgeFileFilter: void <init>(java.util.Date,boolean)>(r1, z0) in <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter ageFileFilter(java.util.Date,boolean)> ==> <org.apache.commons.io.filefilter.AgeFileFilter: void <init>(java.util.Date,boolean)>
SPECIAL edge: specialinvoke $r0.<org.apache.commons.io.filefilter.AgeFileFilter: void <init>(java.io.File)>(r1) in <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter ageFileFilter(java.io.File)> ==> <org.apache.commons.io.filefilter.AgeFileFilter: void <init>(java.io.File)>
SPECIAL edge: specialinvoke $r0.<org.apache.commons.io.filefilter.AgeFileFilter: void <init>(java.io.File,boolean)>(r1, z0) in <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter ageFileFilter(java.io.File,boolean)> ==> <org.apache.commons.io.filefilter.AgeFileFilter: void <init>(java.io.File,boolean)>
SPECIAL edge: specialinvoke $r0.<org.apache.commons.io.filefilter.SizeFileFilter: void <init>(long)>(l0) in <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter sizeFileFilter(long)> ==> <org.apache.commons.io.filefilter.SizeFileFilter: void <init>(long)>
SPECIAL edge: specialinvoke $r0.<org.apache.commons.io.filefilter.SizeFileFilter: void <init>(long,boolean)>(l0, z0) in <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter sizeFileFilter(long,boolean)> ==> <org.apache.commons.io.filefilter.SizeFileFilter: void <init>(long,boolean)>
SPECIAL edge: specialinvoke $r0.<org.apache.commons.io.filefilter.SizeFileFilter: void <init>(long,boolean)>(l0, 1) in <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter sizeRangeFileFilter(long,long)> ==> <org.apache.commons.io.filefilter.SizeFileFilter: void <init>(long,boolean)>
SPECIAL edge: specialinvoke $r2.<org.apache.commons.io.filefilter.SizeFileFilter: void <init>(long,boolean)>($l2, 0) in <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter sizeRangeFileFilter(long,long)> ==> <org.apache.commons.io.filefilter.SizeFileFilter: void <init>(long,boolean)>
SPECIAL edge: specialinvoke $r4.<org.apache.commons.io.filefilter.AndFileFilter: void <init>(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>($r0, $r2) in <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter sizeRangeFileFilter(long,long)> ==> <org.apache.commons.io.filefilter.AndFileFilter: void <init>(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>
SPECIAL edge: specialinvoke $r1.<org.apache.commons.io.filefilter.AndFileFilter: void <init>(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>($r2, r0) in <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter makeDirectoryOnly(org.apache.commons.io.filefilter.IOFileFilter)> ==> <org.apache.commons.io.filefilter.AndFileFilter: void <init>(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>
SPECIAL edge: specialinvoke $r1.<org.apache.commons.io.filefilter.AndFileFilter: void <init>(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>($r2, r0) in <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter makeFileOnly(org.apache.commons.io.filefilter.IOFileFilter)> ==> <org.apache.commons.io.filefilter.AndFileFilter: void <init>(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>
SPECIAL edge: specialinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>() in <org.apache.commons.io.filefilter.DelegateFileFilter: void <init>(java.io.FilenameFilter)> ==> <org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The FilenameFilter must not be null") in <org.apache.commons.io.filefilter.DelegateFileFilter: void <init>(java.io.FilenameFilter)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>() in <org.apache.commons.io.filefilter.DelegateFileFilter: void <init>(java.io.FileFilter)> ==> <org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The FileFilter must not be null") in <org.apache.commons.io.filefilter.DelegateFileFilter: void <init>(java.io.FileFilter)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
INTERFACE edge: $z1 = interfaceinvoke $r3.<java.io.FileFilter: boolean accept(java.io.File)>(r2) in <org.apache.commons.io.filefilter.DelegateFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.TrueFileFilter: boolean accept(java.io.File)>
INTERFACE edge: $z1 = interfaceinvoke $r3.<java.io.FileFilter: boolean accept(java.io.File)>(r2) in <org.apache.commons.io.filefilter.DelegateFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.FalseFileFilter: boolean accept(java.io.File)>
INTERFACE edge: $z1 = interfaceinvoke $r3.<java.io.FileFilter: boolean accept(java.io.File)>(r2) in <org.apache.commons.io.filefilter.DelegateFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.AgeFileFilter: boolean accept(java.io.File)>
INTERFACE edge: $z1 = interfaceinvoke $r3.<java.io.FileFilter: boolean accept(java.io.File)>(r2) in <org.apache.commons.io.filefilter.DelegateFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.DirectoryFileFilter: boolean accept(java.io.File)>
INTERFACE edge: $z1 = interfaceinvoke $r3.<java.io.FileFilter: boolean accept(java.io.File)>(r2) in <org.apache.commons.io.filefilter.DelegateFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.HiddenFileFilter: boolean accept(java.io.File)>
INTERFACE edge: $z1 = interfaceinvoke $r3.<java.io.FileFilter: boolean accept(java.io.File)>(r2) in <org.apache.commons.io.filefilter.DelegateFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.SuffixFileFilter: boolean accept(java.io.File)>
INTERFACE edge: $z1 = interfaceinvoke $r3.<java.io.FileFilter: boolean accept(java.io.File)>(r2) in <org.apache.commons.io.filefilter.DelegateFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.NotFileFilter: boolean accept(java.io.File)>
INTERFACE edge: $z1 = interfaceinvoke $r3.<java.io.FileFilter: boolean accept(java.io.File)>(r2) in <org.apache.commons.io.filefilter.DelegateFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.WildcardFilter: boolean accept(java.io.File)>
INTERFACE edge: $z1 = interfaceinvoke $r3.<java.io.FileFilter: boolean accept(java.io.File)>(r2) in <org.apache.commons.io.filefilter.DelegateFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.WildcardFileFilter: boolean accept(java.io.File)>
INTERFACE edge: $z1 = interfaceinvoke $r3.<java.io.FileFilter: boolean accept(java.io.File)>(r2) in <org.apache.commons.io.filefilter.DelegateFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.DelegateFileFilter: boolean accept(java.io.File)>
INTERFACE edge: $z1 = interfaceinvoke $r3.<java.io.FileFilter: boolean accept(java.io.File)>(r2) in <org.apache.commons.io.filefilter.DelegateFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.CanWriteFileFilter: boolean accept(java.io.File)>
INTERFACE edge: $z1 = interfaceinvoke $r3.<java.io.FileFilter: boolean accept(java.io.File)>(r2) in <org.apache.commons.io.filefilter.DelegateFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.FileFileFilter: boolean accept(java.io.File)>
INTERFACE edge: $z1 = interfaceinvoke $r3.<java.io.FileFilter: boolean accept(java.io.File)>(r2) in <org.apache.commons.io.filefilter.DelegateFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.PrefixFileFilter: boolean accept(java.io.File)>
INTERFACE edge: $z1 = interfaceinvoke $r3.<java.io.FileFilter: boolean accept(java.io.File)>(r2) in <org.apache.commons.io.filefilter.DelegateFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.NameFileFilter: boolean accept(java.io.File)>
INTERFACE edge: $z1 = interfaceinvoke $r3.<java.io.FileFilter: boolean accept(java.io.File)>(r2) in <org.apache.commons.io.filefilter.DelegateFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.EmptyFileFilter: boolean accept(java.io.File)>
INTERFACE edge: $z1 = interfaceinvoke $r3.<java.io.FileFilter: boolean accept(java.io.File)>(r2) in <org.apache.commons.io.filefilter.DelegateFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.SizeFileFilter: boolean accept(java.io.File)>
INTERFACE edge: $z1 = interfaceinvoke $r3.<java.io.FileFilter: boolean accept(java.io.File)>(r2) in <org.apache.commons.io.filefilter.DelegateFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.AndFileFilter: boolean accept(java.io.File)>
INTERFACE edge: $z1 = interfaceinvoke $r3.<java.io.FileFilter: boolean accept(java.io.File)>(r2) in <org.apache.commons.io.filefilter.DelegateFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.CanReadFileFilter: boolean accept(java.io.File)>
INTERFACE edge: $z1 = interfaceinvoke $r3.<java.io.FileFilter: boolean accept(java.io.File)>(r2) in <org.apache.commons.io.filefilter.DelegateFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.OrFileFilter: boolean accept(java.io.File)>
SPECIAL edge: $z0 = specialinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File)>(r2) in <org.apache.commons.io.filefilter.DelegateFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File)>
INTERFACE edge: $z1 = interfaceinvoke $r4.<java.io.FilenameFilter: boolean accept(java.io.File,java.lang.String)>(r2, r3) in <org.apache.commons.io.filefilter.DelegateFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.filefilter.TrueFileFilter: boolean accept(java.io.File,java.lang.String)>
INTERFACE edge: $z1 = interfaceinvoke $r4.<java.io.FilenameFilter: boolean accept(java.io.File,java.lang.String)>(r2, r3) in <org.apache.commons.io.filefilter.DelegateFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.filefilter.FalseFileFilter: boolean accept(java.io.File,java.lang.String)>
INTERFACE edge: $z1 = interfaceinvoke $r4.<java.io.FilenameFilter: boolean accept(java.io.File,java.lang.String)>(r2, r3) in <org.apache.commons.io.filefilter.DelegateFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File,java.lang.String)>
INTERFACE edge: $z1 = interfaceinvoke $r4.<java.io.FilenameFilter: boolean accept(java.io.File,java.lang.String)>(r2, r3) in <org.apache.commons.io.filefilter.DelegateFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.filefilter.SuffixFileFilter: boolean accept(java.io.File,java.lang.String)>
INTERFACE edge: $z1 = interfaceinvoke $r4.<java.io.FilenameFilter: boolean accept(java.io.File,java.lang.String)>(r2, r3) in <org.apache.commons.io.filefilter.DelegateFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.filefilter.NotFileFilter: boolean accept(java.io.File,java.lang.String)>
INTERFACE edge: $z1 = interfaceinvoke $r4.<java.io.FilenameFilter: boolean accept(java.io.File,java.lang.String)>(r2, r3) in <org.apache.commons.io.filefilter.DelegateFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.filefilter.WildcardFilter: boolean accept(java.io.File,java.lang.String)>
INTERFACE edge: $z1 = interfaceinvoke $r4.<java.io.FilenameFilter: boolean accept(java.io.File,java.lang.String)>(r2, r3) in <org.apache.commons.io.filefilter.DelegateFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.filefilter.WildcardFileFilter: boolean accept(java.io.File,java.lang.String)>
INTERFACE edge: $z1 = interfaceinvoke $r4.<java.io.FilenameFilter: boolean accept(java.io.File,java.lang.String)>(r2, r3) in <org.apache.commons.io.filefilter.DelegateFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.filefilter.DelegateFileFilter: boolean accept(java.io.File,java.lang.String)>
INTERFACE edge: $z1 = interfaceinvoke $r4.<java.io.FilenameFilter: boolean accept(java.io.File,java.lang.String)>(r2, r3) in <org.apache.commons.io.filefilter.DelegateFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.filefilter.PrefixFileFilter: boolean accept(java.io.File,java.lang.String)>
INTERFACE edge: $z1 = interfaceinvoke $r4.<java.io.FilenameFilter: boolean accept(java.io.File,java.lang.String)>(r2, r3) in <org.apache.commons.io.filefilter.DelegateFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.filefilter.NameFileFilter: boolean accept(java.io.File,java.lang.String)>
INTERFACE edge: $z1 = interfaceinvoke $r4.<java.io.FilenameFilter: boolean accept(java.io.File,java.lang.String)>(r2, r3) in <org.apache.commons.io.filefilter.DelegateFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.filefilter.AndFileFilter: boolean accept(java.io.File,java.lang.String)>
INTERFACE edge: $z1 = interfaceinvoke $r4.<java.io.FilenameFilter: boolean accept(java.io.File,java.lang.String)>(r2, r3) in <org.apache.commons.io.filefilter.DelegateFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.filefilter.OrFileFilter: boolean accept(java.io.File,java.lang.String)>
SPECIAL edge: $z0 = specialinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File,java.lang.String)>(r2, r3) in <org.apache.commons.io.filefilter.DelegateFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File,java.lang.String)>
SPECIAL edge: specialinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>() in <org.apache.commons.io.filefilter.AndFileFilter: void <init>()> ==> <org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.ArrayList: void <init>()>() in <org.apache.commons.io.filefilter.AndFileFilter: void <init>()> ==> <java.util.ArrayList: void <init>()>
SPECIAL edge: specialinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>() in <org.apache.commons.io.filefilter.AndFileFilter: void <init>(java.util.List)> ==> <org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>
SPECIAL edge: specialinvoke $r3.<java.util.ArrayList: void <init>()>() in <org.apache.commons.io.filefilter.AndFileFilter: void <init>(java.util.List)> ==> <java.util.ArrayList: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.util.ArrayList: void <init>(java.util.Collection)>(r1) in <org.apache.commons.io.filefilter.AndFileFilter: void <init>(java.util.List)> ==> <java.util.ArrayList: void <init>(java.util.Collection)>
SPECIAL edge: specialinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>() in <org.apache.commons.io.filefilter.AndFileFilter: void <init>(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)> ==> <org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.io.filefilter.AndFileFilter: void addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)>(r1) in <org.apache.commons.io.filefilter.AndFileFilter: void <init>(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)> ==> <org.apache.commons.io.filefilter.AndFileFilter: void addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.io.filefilter.AndFileFilter: void addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)>(r3) in <org.apache.commons.io.filefilter.AndFileFilter: void <init>(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)> ==> <org.apache.commons.io.filefilter.AndFileFilter: void addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)>
SPECIAL edge: specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The filters must not be null") in <org.apache.commons.io.filefilter.AndFileFilter: void <init>(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r4.<java.util.ArrayList: void <init>()>() in <org.apache.commons.io.filefilter.AndFileFilter: void <init>(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)> ==> <java.util.ArrayList: void <init>()>
INTERFACE edge: interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1) in <org.apache.commons.io.filefilter.AndFileFilter: void addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)> ==> <java.util.Vector: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1) in <org.apache.commons.io.filefilter.AndFileFilter: void addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1) in <org.apache.commons.io.filefilter.AndFileFilter: void addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>(r1) in <org.apache.commons.io.filefilter.AndFileFilter: boolean removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter)> ==> <java.util.Vector: boolean remove(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>(r1) in <org.apache.commons.io.filefilter.AndFileFilter: boolean removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter)> ==> <java.util.LinkedList: boolean remove(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>(r1) in <org.apache.commons.io.filefilter.AndFileFilter: boolean removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter)> ==> <java.util.ArrayList: boolean remove(java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>(r2) in <org.apache.commons.io.filefilter.AndFileFilter: void setFileFilters(java.util.List)> ==> <java.util.ArrayList: void <init>(java.util.Collection)>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.List: int size()>() in <org.apache.commons.io.filefilter.AndFileFilter: boolean accept(java.io.File)> ==> <java.util.Vector: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.List: int size()>() in <org.apache.commons.io.filefilter.AndFileFilter: boolean accept(java.io.File)> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.List: int size()>() in <org.apache.commons.io.filefilter.AndFileFilter: boolean accept(java.io.File)> ==> <java.util.ArrayList: int size()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>() in <org.apache.commons.io.filefilter.AndFileFilter: boolean accept(java.io.File)> ==> <java.util.AbstractList: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>() in <org.apache.commons.io.filefilter.AndFileFilter: boolean accept(java.io.File)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>() in <org.apache.commons.io.filefilter.AndFileFilter: boolean accept(java.io.File)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <org.apache.commons.io.filefilter.AndFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.LineIterator: boolean hasNext()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <org.apache.commons.io.filefilter.AndFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.LineIterator: java.lang.Object next()>
INTERFACE edge: $z1 = interfaceinvoke r5.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>(r6) in <org.apache.commons.io.filefilter.AndFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.TrueFileFilter: boolean accept(java.io.File)>
INTERFACE edge: $z1 = interfaceinvoke r5.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>(r6) in <org.apache.commons.io.filefilter.AndFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.FalseFileFilter: boolean accept(java.io.File)>
INTERFACE edge: $z1 = interfaceinvoke r5.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>(r6) in <org.apache.commons.io.filefilter.AndFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.AgeFileFilter: boolean accept(java.io.File)>
INTERFACE edge: $z1 = interfaceinvoke r5.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>(r6) in <org.apache.commons.io.filefilter.AndFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.DirectoryFileFilter: boolean accept(java.io.File)>
INTERFACE edge: $z1 = interfaceinvoke r5.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>(r6) in <org.apache.commons.io.filefilter.AndFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.HiddenFileFilter: boolean accept(java.io.File)>
INTERFACE edge: $z1 = interfaceinvoke r5.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>(r6) in <org.apache.commons.io.filefilter.AndFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.SuffixFileFilter: boolean accept(java.io.File)>
INTERFACE edge: $z1 = interfaceinvoke r5.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>(r6) in <org.apache.commons.io.filefilter.AndFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.NotFileFilter: boolean accept(java.io.File)>
INTERFACE edge: $z1 = interfaceinvoke r5.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>(r6) in <org.apache.commons.io.filefilter.AndFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.WildcardFilter: boolean accept(java.io.File)>
INTERFACE edge: $z1 = interfaceinvoke r5.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>(r6) in <org.apache.commons.io.filefilter.AndFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.WildcardFileFilter: boolean accept(java.io.File)>
INTERFACE edge: $z1 = interfaceinvoke r5.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>(r6) in <org.apache.commons.io.filefilter.AndFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.DelegateFileFilter: boolean accept(java.io.File)>
INTERFACE edge: $z1 = interfaceinvoke r5.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>(r6) in <org.apache.commons.io.filefilter.AndFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.CanWriteFileFilter: boolean accept(java.io.File)>
INTERFACE edge: $z1 = interfaceinvoke r5.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>(r6) in <org.apache.commons.io.filefilter.AndFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.FileFileFilter: boolean accept(java.io.File)>
INTERFACE edge: $z1 = interfaceinvoke r5.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>(r6) in <org.apache.commons.io.filefilter.AndFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.PrefixFileFilter: boolean accept(java.io.File)>
INTERFACE edge: $z1 = interfaceinvoke r5.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>(r6) in <org.apache.commons.io.filefilter.AndFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.NameFileFilter: boolean accept(java.io.File)>
INTERFACE edge: $z1 = interfaceinvoke r5.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>(r6) in <org.apache.commons.io.filefilter.AndFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.EmptyFileFilter: boolean accept(java.io.File)>
INTERFACE edge: $z1 = interfaceinvoke r5.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>(r6) in <org.apache.commons.io.filefilter.AndFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.SizeFileFilter: boolean accept(java.io.File)>
INTERFACE edge: $z1 = interfaceinvoke r5.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>(r6) in <org.apache.commons.io.filefilter.AndFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.AndFileFilter: boolean accept(java.io.File)>
INTERFACE edge: $z1 = interfaceinvoke r5.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>(r6) in <org.apache.commons.io.filefilter.AndFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.CanReadFileFilter: boolean accept(java.io.File)>
INTERFACE edge: $z1 = interfaceinvoke r5.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>(r6) in <org.apache.commons.io.filefilter.AndFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.OrFileFilter: boolean accept(java.io.File)>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.List: int size()>() in <org.apache.commons.io.filefilter.AndFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <java.util.Vector: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.List: int size()>() in <org.apache.commons.io.filefilter.AndFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.List: int size()>() in <org.apache.commons.io.filefilter.AndFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <java.util.ArrayList: int size()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>() in <org.apache.commons.io.filefilter.AndFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <java.util.AbstractList: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>() in <org.apache.commons.io.filefilter.AndFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>() in <org.apache.commons.io.filefilter.AndFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <org.apache.commons.io.filefilter.AndFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.LineIterator: boolean hasNext()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <org.apache.commons.io.filefilter.AndFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.LineIterator: java.lang.Object next()>
INTERFACE edge: $z1 = interfaceinvoke r5.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File,java.lang.String)>(r6, r7) in <org.apache.commons.io.filefilter.AndFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File,java.lang.String)>
INTERFACE edge: $z1 = interfaceinvoke r5.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File,java.lang.String)>(r6, r7) in <org.apache.commons.io.filefilter.AndFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.filefilter.DelegateFileFilter: boolean accept(java.io.File,java.lang.String)>
INTERFACE edge: $z1 = interfaceinvoke r5.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File,java.lang.String)>(r6, r7) in <org.apache.commons.io.filefilter.AndFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.filefilter.AndFileFilter: boolean accept(java.io.File,java.lang.String)>
INTERFACE edge: $z1 = interfaceinvoke r5.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File,java.lang.String)>(r6, r7) in <org.apache.commons.io.filefilter.AndFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.filefilter.PrefixFileFilter: boolean accept(java.io.File,java.lang.String)>
INTERFACE edge: $z1 = interfaceinvoke r5.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File,java.lang.String)>(r6, r7) in <org.apache.commons.io.filefilter.AndFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.filefilter.SuffixFileFilter: boolean accept(java.io.File,java.lang.String)>
INTERFACE edge: $z1 = interfaceinvoke r5.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File,java.lang.String)>(r6, r7) in <org.apache.commons.io.filefilter.AndFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.filefilter.OrFileFilter: boolean accept(java.io.File,java.lang.String)>
INTERFACE edge: $z1 = interfaceinvoke r5.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File,java.lang.String)>(r6, r7) in <org.apache.commons.io.filefilter.AndFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.filefilter.FalseFileFilter: boolean accept(java.io.File,java.lang.String)>
INTERFACE edge: $z1 = interfaceinvoke r5.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File,java.lang.String)>(r6, r7) in <org.apache.commons.io.filefilter.AndFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.filefilter.WildcardFilter: boolean accept(java.io.File,java.lang.String)>
INTERFACE edge: $z1 = interfaceinvoke r5.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File,java.lang.String)>(r6, r7) in <org.apache.commons.io.filefilter.AndFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.filefilter.NameFileFilter: boolean accept(java.io.File,java.lang.String)>
INTERFACE edge: $z1 = interfaceinvoke r5.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File,java.lang.String)>(r6, r7) in <org.apache.commons.io.filefilter.AndFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.filefilter.WildcardFileFilter: boolean accept(java.io.File,java.lang.String)>
INTERFACE edge: $z1 = interfaceinvoke r5.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File,java.lang.String)>(r6, r7) in <org.apache.commons.io.filefilter.AndFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.filefilter.NotFileFilter: boolean accept(java.io.File,java.lang.String)>
INTERFACE edge: $z1 = interfaceinvoke r5.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File,java.lang.String)>(r6, r7) in <org.apache.commons.io.filefilter.AndFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.filefilter.TrueFileFilter: boolean accept(java.io.File,java.lang.String)>
SPECIAL edge: specialinvoke r0.<org.apache.commons.io.filefilter.SizeFileFilter: void <init>(long,boolean)>(l0, 1) in <org.apache.commons.io.filefilter.SizeFileFilter: void <init>(long)> ==> <org.apache.commons.io.filefilter.SizeFileFilter: void <init>(long,boolean)>
SPECIAL edge: specialinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>() in <org.apache.commons.io.filefilter.SizeFileFilter: void <init>(long,boolean)> ==> <org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The size must be non-negative") in <org.apache.commons.io.filefilter.SizeFileFilter: void <init>(long,boolean)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $l0 = virtualinvoke r0.<java.io.File: long length()>() in <org.apache.commons.io.filefilter.SizeFileFilter: boolean accept(java.io.File)> ==> <java.io.File: long length()>
SPECIAL edge: specialinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>() in <org.apache.commons.io.filefilter.OrFileFilter: void <init>()> ==> <org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.ArrayList: void <init>()>() in <org.apache.commons.io.filefilter.OrFileFilter: void <init>()> ==> <java.util.ArrayList: void <init>()>
SPECIAL edge: specialinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>() in <org.apache.commons.io.filefilter.OrFileFilter: void <init>(java.util.List)> ==> <org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>
SPECIAL edge: specialinvoke $r3.<java.util.ArrayList: void <init>()>() in <org.apache.commons.io.filefilter.OrFileFilter: void <init>(java.util.List)> ==> <java.util.ArrayList: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.util.ArrayList: void <init>(java.util.Collection)>(r1) in <org.apache.commons.io.filefilter.OrFileFilter: void <init>(java.util.List)> ==> <java.util.ArrayList: void <init>(java.util.Collection)>
SPECIAL edge: specialinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>() in <org.apache.commons.io.filefilter.OrFileFilter: void <init>(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)> ==> <org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.io.filefilter.OrFileFilter: void addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)>(r1) in <org.apache.commons.io.filefilter.OrFileFilter: void <init>(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)> ==> <org.apache.commons.io.filefilter.OrFileFilter: void addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.io.filefilter.OrFileFilter: void addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)>(r3) in <org.apache.commons.io.filefilter.OrFileFilter: void <init>(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)> ==> <org.apache.commons.io.filefilter.OrFileFilter: void addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)>
SPECIAL edge: specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The filters must not be null") in <org.apache.commons.io.filefilter.OrFileFilter: void <init>(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r4.<java.util.ArrayList: void <init>()>() in <org.apache.commons.io.filefilter.OrFileFilter: void <init>(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)> ==> <java.util.ArrayList: void <init>()>
INTERFACE edge: interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1) in <org.apache.commons.io.filefilter.OrFileFilter: void addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)> ==> <java.util.Vector: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1) in <org.apache.commons.io.filefilter.OrFileFilter: void addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1) in <org.apache.commons.io.filefilter.OrFileFilter: void addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>(r1) in <org.apache.commons.io.filefilter.OrFileFilter: boolean removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter)> ==> <java.util.Vector: boolean remove(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>(r1) in <org.apache.commons.io.filefilter.OrFileFilter: boolean removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter)> ==> <java.util.LinkedList: boolean remove(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>(r1) in <org.apache.commons.io.filefilter.OrFileFilter: boolean removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter)> ==> <java.util.ArrayList: boolean remove(java.lang.Object)>
INTERFACE edge: r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>() in <org.apache.commons.io.filefilter.OrFileFilter: boolean accept(java.io.File)> ==> <java.util.AbstractList: java.util.Iterator iterator()>
INTERFACE edge: r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>() in <org.apache.commons.io.filefilter.OrFileFilter: boolean accept(java.io.File)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>() in <org.apache.commons.io.filefilter.OrFileFilter: boolean accept(java.io.File)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() in <org.apache.commons.io.filefilter.OrFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.LineIterator: boolean hasNext()>
INTERFACE edge: $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() in <org.apache.commons.io.filefilter.OrFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.LineIterator: java.lang.Object next()>
INTERFACE edge: $z1 = interfaceinvoke r4.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>(r5) in <org.apache.commons.io.filefilter.OrFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.AgeFileFilter: boolean accept(java.io.File)>
INTERFACE edge: $z1 = interfaceinvoke r4.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>(r5) in <org.apache.commons.io.filefilter.OrFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.DelegateFileFilter: boolean accept(java.io.File)>
INTERFACE edge: $z1 = interfaceinvoke r4.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>(r5) in <org.apache.commons.io.filefilter.OrFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.AndFileFilter: boolean accept(java.io.File)>
INTERFACE edge: $z1 = interfaceinvoke r4.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>(r5) in <org.apache.commons.io.filefilter.OrFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.FileFileFilter: boolean accept(java.io.File)>
INTERFACE edge: $z1 = interfaceinvoke r4.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>(r5) in <org.apache.commons.io.filefilter.OrFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.DirectoryFileFilter: boolean accept(java.io.File)>
INTERFACE edge: $z1 = interfaceinvoke r4.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>(r5) in <org.apache.commons.io.filefilter.OrFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.PrefixFileFilter: boolean accept(java.io.File)>
INTERFACE edge: $z1 = interfaceinvoke r4.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>(r5) in <org.apache.commons.io.filefilter.OrFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.SizeFileFilter: boolean accept(java.io.File)>
INTERFACE edge: $z1 = interfaceinvoke r4.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>(r5) in <org.apache.commons.io.filefilter.OrFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.HiddenFileFilter: boolean accept(java.io.File)>
INTERFACE edge: $z1 = interfaceinvoke r4.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>(r5) in <org.apache.commons.io.filefilter.OrFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.SuffixFileFilter: boolean accept(java.io.File)>
INTERFACE edge: $z1 = interfaceinvoke r4.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>(r5) in <org.apache.commons.io.filefilter.OrFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.OrFileFilter: boolean accept(java.io.File)>
INTERFACE edge: $z1 = interfaceinvoke r4.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>(r5) in <org.apache.commons.io.filefilter.OrFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.FalseFileFilter: boolean accept(java.io.File)>
INTERFACE edge: $z1 = interfaceinvoke r4.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>(r5) in <org.apache.commons.io.filefilter.OrFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.EmptyFileFilter: boolean accept(java.io.File)>
INTERFACE edge: $z1 = interfaceinvoke r4.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>(r5) in <org.apache.commons.io.filefilter.OrFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.WildcardFilter: boolean accept(java.io.File)>
INTERFACE edge: $z1 = interfaceinvoke r4.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>(r5) in <org.apache.commons.io.filefilter.OrFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.NameFileFilter: boolean accept(java.io.File)>
INTERFACE edge: $z1 = interfaceinvoke r4.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>(r5) in <org.apache.commons.io.filefilter.OrFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.WildcardFileFilter: boolean accept(java.io.File)>
INTERFACE edge: $z1 = interfaceinvoke r4.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>(r5) in <org.apache.commons.io.filefilter.OrFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.NotFileFilter: boolean accept(java.io.File)>
INTERFACE edge: $z1 = interfaceinvoke r4.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>(r5) in <org.apache.commons.io.filefilter.OrFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.TrueFileFilter: boolean accept(java.io.File)>
INTERFACE edge: $z1 = interfaceinvoke r4.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>(r5) in <org.apache.commons.io.filefilter.OrFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.CanReadFileFilter: boolean accept(java.io.File)>
INTERFACE edge: $z1 = interfaceinvoke r4.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>(r5) in <org.apache.commons.io.filefilter.OrFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.CanWriteFileFilter: boolean accept(java.io.File)>
INTERFACE edge: r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>() in <org.apache.commons.io.filefilter.OrFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <java.util.AbstractList: java.util.Iterator iterator()>
INTERFACE edge: r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>() in <org.apache.commons.io.filefilter.OrFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>() in <org.apache.commons.io.filefilter.OrFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() in <org.apache.commons.io.filefilter.OrFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.LineIterator: boolean hasNext()>
INTERFACE edge: $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() in <org.apache.commons.io.filefilter.OrFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.LineIterator: java.lang.Object next()>
INTERFACE edge: $z1 = interfaceinvoke r4.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File,java.lang.String)>(r5, r6) in <org.apache.commons.io.filefilter.OrFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File,java.lang.String)>
INTERFACE edge: $z1 = interfaceinvoke r4.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File,java.lang.String)>(r5, r6) in <org.apache.commons.io.filefilter.OrFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.filefilter.DelegateFileFilter: boolean accept(java.io.File,java.lang.String)>
INTERFACE edge: $z1 = interfaceinvoke r4.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File,java.lang.String)>(r5, r6) in <org.apache.commons.io.filefilter.OrFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.filefilter.AndFileFilter: boolean accept(java.io.File,java.lang.String)>
INTERFACE edge: $z1 = interfaceinvoke r4.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File,java.lang.String)>(r5, r6) in <org.apache.commons.io.filefilter.OrFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.filefilter.PrefixFileFilter: boolean accept(java.io.File,java.lang.String)>
INTERFACE edge: $z1 = interfaceinvoke r4.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File,java.lang.String)>(r5, r6) in <org.apache.commons.io.filefilter.OrFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.filefilter.SuffixFileFilter: boolean accept(java.io.File,java.lang.String)>
INTERFACE edge: $z1 = interfaceinvoke r4.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File,java.lang.String)>(r5, r6) in <org.apache.commons.io.filefilter.OrFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.filefilter.OrFileFilter: boolean accept(java.io.File,java.lang.String)>
INTERFACE edge: $z1 = interfaceinvoke r4.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File,java.lang.String)>(r5, r6) in <org.apache.commons.io.filefilter.OrFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.filefilter.FalseFileFilter: boolean accept(java.io.File,java.lang.String)>
INTERFACE edge: $z1 = interfaceinvoke r4.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File,java.lang.String)>(r5, r6) in <org.apache.commons.io.filefilter.OrFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.filefilter.WildcardFilter: boolean accept(java.io.File,java.lang.String)>
INTERFACE edge: $z1 = interfaceinvoke r4.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File,java.lang.String)>(r5, r6) in <org.apache.commons.io.filefilter.OrFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.filefilter.NameFileFilter: boolean accept(java.io.File,java.lang.String)>
INTERFACE edge: $z1 = interfaceinvoke r4.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File,java.lang.String)>(r5, r6) in <org.apache.commons.io.filefilter.OrFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.filefilter.WildcardFileFilter: boolean accept(java.io.File,java.lang.String)>
INTERFACE edge: $z1 = interfaceinvoke r4.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File,java.lang.String)>(r5, r6) in <org.apache.commons.io.filefilter.OrFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.filefilter.NotFileFilter: boolean accept(java.io.File,java.lang.String)>
INTERFACE edge: $z1 = interfaceinvoke r4.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File,java.lang.String)>(r5, r6) in <org.apache.commons.io.filefilter.OrFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.filefilter.TrueFileFilter: boolean accept(java.io.File,java.lang.String)>
SPECIAL edge: specialinvoke r0.<org.apache.commons.io.filefilter.NameFileFilter: void <init>(java.lang.String,org.apache.commons.io.IOCase)>(r1, null) in <org.apache.commons.io.filefilter.NameFileFilter: void <init>(java.lang.String)> ==> <org.apache.commons.io.filefilter.NameFileFilter: void <init>(java.lang.String,org.apache.commons.io.IOCase)>
SPECIAL edge: specialinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>() in <org.apache.commons.io.filefilter.NameFileFilter: void <init>(java.lang.String,org.apache.commons.io.IOCase)> ==> <org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>
SPECIAL edge: specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The wildcard must not be null") in <org.apache.commons.io.filefilter.NameFileFilter: void <init>(java.lang.String,org.apache.commons.io.IOCase)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<org.apache.commons.io.filefilter.NameFileFilter: void <init>(java.lang.String[],org.apache.commons.io.IOCase)>(r1, null) in <org.apache.commons.io.filefilter.NameFileFilter: void <init>(java.lang.String[])> ==> <org.apache.commons.io.filefilter.NameFileFilter: void <init>(java.lang.String[],org.apache.commons.io.IOCase)>
SPECIAL edge: specialinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>() in <org.apache.commons.io.filefilter.NameFileFilter: void <init>(java.lang.String[],org.apache.commons.io.IOCase)> ==> <org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>
SPECIAL edge: specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The array of names must not be null") in <org.apache.commons.io.filefilter.NameFileFilter: void <init>(java.lang.String[],org.apache.commons.io.IOCase)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<org.apache.commons.io.filefilter.NameFileFilter: void <init>(java.util.List,org.apache.commons.io.IOCase)>(r1, null) in <org.apache.commons.io.filefilter.NameFileFilter: void <init>(java.util.List)> ==> <org.apache.commons.io.filefilter.NameFileFilter: void <init>(java.util.List,org.apache.commons.io.IOCase)>
SPECIAL edge: specialinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>() in <org.apache.commons.io.filefilter.NameFileFilter: void <init>(java.util.List,org.apache.commons.io.IOCase)> ==> <org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>
SPECIAL edge: specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The list of names must not be null") in <org.apache.commons.io.filefilter.NameFileFilter: void <init>(java.util.List,org.apache.commons.io.IOCase)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
INTERFACE edge: $i0 = interfaceinvoke r1.<java.util.List: int size()>() in <org.apache.commons.io.filefilter.NameFileFilter: void <init>(java.util.List,org.apache.commons.io.IOCase)> ==> <java.util.Vector: int size()>
INTERFACE edge: $i0 = interfaceinvoke r1.<java.util.List: int size()>() in <org.apache.commons.io.filefilter.NameFileFilter: void <init>(java.util.List,org.apache.commons.io.IOCase)> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i0 = interfaceinvoke r1.<java.util.List: int size()>() in <org.apache.commons.io.filefilter.NameFileFilter: void <init>(java.util.List,org.apache.commons.io.IOCase)> ==> <java.util.ArrayList: int size()>
INTERFACE edge: $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r2) in <org.apache.commons.io.filefilter.NameFileFilter: void <init>(java.util.List,org.apache.commons.io.IOCase)> ==> <java.util.Vector: java.lang.Object[] toArray(java.lang.Object[])>
INTERFACE edge: $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r2) in <org.apache.commons.io.filefilter.NameFileFilter: void <init>(java.util.List,org.apache.commons.io.IOCase)> ==> <java.util.LinkedList: java.lang.Object[] toArray(java.lang.Object[])>
INTERFACE edge: $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r2) in <org.apache.commons.io.filefilter.NameFileFilter: void <init>(java.util.List,org.apache.commons.io.IOCase)> ==> <java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>
VIRTUAL edge: r1 = virtualinvoke r0.<java.io.File: java.lang.String getName()>() in <org.apache.commons.io.filefilter.NameFileFilter: boolean accept(java.io.File)> ==> <java.io.File: java.lang.String getName()>
VIRTUAL edge: $z0 = virtualinvoke $r6.<org.apache.commons.io.IOCase: boolean checkEquals(java.lang.String,java.lang.String)>(r1, $r5) in <org.apache.commons.io.filefilter.NameFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.IOCase: boolean checkEquals(java.lang.String,java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r5.<org.apache.commons.io.IOCase: boolean checkEquals(java.lang.String,java.lang.String)>(r2, $r4) in <org.apache.commons.io.filefilter.NameFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.IOCase: boolean checkEquals(java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>() in <org.apache.commons.io.filefilter.NotFileFilter: void <init>(org.apache.commons.io.filefilter.IOFileFilter)> ==> <org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The filter must not be null") in <org.apache.commons.io.filefilter.NotFileFilter: void <init>(org.apache.commons.io.filefilter.IOFileFilter)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>(r1) in <org.apache.commons.io.filefilter.NotFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.AgeFileFilter: boolean accept(java.io.File)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>(r1) in <org.apache.commons.io.filefilter.NotFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.DelegateFileFilter: boolean accept(java.io.File)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>(r1) in <org.apache.commons.io.filefilter.NotFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.AndFileFilter: boolean accept(java.io.File)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>(r1) in <org.apache.commons.io.filefilter.NotFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.FileFileFilter: boolean accept(java.io.File)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>(r1) in <org.apache.commons.io.filefilter.NotFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.DirectoryFileFilter: boolean accept(java.io.File)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>(r1) in <org.apache.commons.io.filefilter.NotFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.PrefixFileFilter: boolean accept(java.io.File)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>(r1) in <org.apache.commons.io.filefilter.NotFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.SizeFileFilter: boolean accept(java.io.File)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>(r1) in <org.apache.commons.io.filefilter.NotFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.HiddenFileFilter: boolean accept(java.io.File)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>(r1) in <org.apache.commons.io.filefilter.NotFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.SuffixFileFilter: boolean accept(java.io.File)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>(r1) in <org.apache.commons.io.filefilter.NotFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.OrFileFilter: boolean accept(java.io.File)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>(r1) in <org.apache.commons.io.filefilter.NotFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.FalseFileFilter: boolean accept(java.io.File)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>(r1) in <org.apache.commons.io.filefilter.NotFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.EmptyFileFilter: boolean accept(java.io.File)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>(r1) in <org.apache.commons.io.filefilter.NotFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.WildcardFilter: boolean accept(java.io.File)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>(r1) in <org.apache.commons.io.filefilter.NotFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.NameFileFilter: boolean accept(java.io.File)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>(r1) in <org.apache.commons.io.filefilter.NotFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.WildcardFileFilter: boolean accept(java.io.File)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>(r1) in <org.apache.commons.io.filefilter.NotFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.NotFileFilter: boolean accept(java.io.File)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>(r1) in <org.apache.commons.io.filefilter.NotFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.TrueFileFilter: boolean accept(java.io.File)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>(r1) in <org.apache.commons.io.filefilter.NotFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.CanReadFileFilter: boolean accept(java.io.File)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>(r1) in <org.apache.commons.io.filefilter.NotFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.CanWriteFileFilter: boolean accept(java.io.File)>
INTERFACE edge: $z0 = interfaceinvoke $r3.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File,java.lang.String)>(r1, r2) in <org.apache.commons.io.filefilter.NotFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File,java.lang.String)>
INTERFACE edge: $z0 = interfaceinvoke $r3.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File,java.lang.String)>(r1, r2) in <org.apache.commons.io.filefilter.NotFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.filefilter.DelegateFileFilter: boolean accept(java.io.File,java.lang.String)>
INTERFACE edge: $z0 = interfaceinvoke $r3.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File,java.lang.String)>(r1, r2) in <org.apache.commons.io.filefilter.NotFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.filefilter.AndFileFilter: boolean accept(java.io.File,java.lang.String)>
INTERFACE edge: $z0 = interfaceinvoke $r3.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File,java.lang.String)>(r1, r2) in <org.apache.commons.io.filefilter.NotFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.filefilter.PrefixFileFilter: boolean accept(java.io.File,java.lang.String)>
INTERFACE edge: $z0 = interfaceinvoke $r3.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File,java.lang.String)>(r1, r2) in <org.apache.commons.io.filefilter.NotFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.filefilter.SuffixFileFilter: boolean accept(java.io.File,java.lang.String)>
INTERFACE edge: $z0 = interfaceinvoke $r3.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File,java.lang.String)>(r1, r2) in <org.apache.commons.io.filefilter.NotFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.filefilter.OrFileFilter: boolean accept(java.io.File,java.lang.String)>
INTERFACE edge: $z0 = interfaceinvoke $r3.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File,java.lang.String)>(r1, r2) in <org.apache.commons.io.filefilter.NotFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.filefilter.FalseFileFilter: boolean accept(java.io.File,java.lang.String)>
INTERFACE edge: $z0 = interfaceinvoke $r3.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File,java.lang.String)>(r1, r2) in <org.apache.commons.io.filefilter.NotFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.filefilter.WildcardFilter: boolean accept(java.io.File,java.lang.String)>
INTERFACE edge: $z0 = interfaceinvoke $r3.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File,java.lang.String)>(r1, r2) in <org.apache.commons.io.filefilter.NotFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.filefilter.NameFileFilter: boolean accept(java.io.File,java.lang.String)>
INTERFACE edge: $z0 = interfaceinvoke $r3.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File,java.lang.String)>(r1, r2) in <org.apache.commons.io.filefilter.NotFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.filefilter.WildcardFileFilter: boolean accept(java.io.File,java.lang.String)>
INTERFACE edge: $z0 = interfaceinvoke $r3.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File,java.lang.String)>(r1, r2) in <org.apache.commons.io.filefilter.NotFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.filefilter.NotFileFilter: boolean accept(java.io.File,java.lang.String)>
INTERFACE edge: $z0 = interfaceinvoke $r3.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File,java.lang.String)>(r1, r2) in <org.apache.commons.io.filefilter.NotFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.filefilter.TrueFileFilter: boolean accept(java.io.File,java.lang.String)>
SPECIAL edge: specialinvoke r0.<org.apache.commons.io.filefilter.AgeFileFilter: void <init>(long,boolean)>(l0, 1) in <org.apache.commons.io.filefilter.AgeFileFilter: void <init>(long)> ==> <org.apache.commons.io.filefilter.AgeFileFilter: void <init>(long,boolean)>
SPECIAL edge: specialinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>() in <org.apache.commons.io.filefilter.AgeFileFilter: void <init>(long,boolean)> ==> <org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>
SPECIAL edge: specialinvoke r0.<org.apache.commons.io.filefilter.AgeFileFilter: void <init>(java.util.Date,boolean)>(r1, 1) in <org.apache.commons.io.filefilter.AgeFileFilter: void <init>(java.util.Date)> ==> <org.apache.commons.io.filefilter.AgeFileFilter: void <init>(java.util.Date,boolean)>
VIRTUAL edge: $l0 = virtualinvoke r1.<java.util.Date: long getTime()>() in <org.apache.commons.io.filefilter.AgeFileFilter: void <init>(java.util.Date,boolean)> ==> <java.util.Date: long getTime()>
SPECIAL edge: specialinvoke r0.<org.apache.commons.io.filefilter.AgeFileFilter: void <init>(long,boolean)>($l0, z0) in <org.apache.commons.io.filefilter.AgeFileFilter: void <init>(java.util.Date,boolean)> ==> <org.apache.commons.io.filefilter.AgeFileFilter: void <init>(long,boolean)>
SPECIAL edge: specialinvoke r0.<org.apache.commons.io.filefilter.AgeFileFilter: void <init>(java.io.File,boolean)>(r1, 1) in <org.apache.commons.io.filefilter.AgeFileFilter: void <init>(java.io.File)> ==> <org.apache.commons.io.filefilter.AgeFileFilter: void <init>(java.io.File,boolean)>
VIRTUAL edge: $l0 = virtualinvoke r1.<java.io.File: long lastModified()>() in <org.apache.commons.io.filefilter.AgeFileFilter: void <init>(java.io.File,boolean)> ==> <java.io.File: long lastModified()>
SPECIAL edge: specialinvoke r0.<org.apache.commons.io.filefilter.AgeFileFilter: void <init>(long,boolean)>($l0, z0) in <org.apache.commons.io.filefilter.AgeFileFilter: void <init>(java.io.File,boolean)> ==> <org.apache.commons.io.filefilter.AgeFileFilter: void <init>(long,boolean)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.io.File: boolean isFile()>() in <org.apache.commons.io.filefilter.FileFileFilter: boolean accept(java.io.File)> ==> <java.io.File: boolean isFile()>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.io.File: boolean isDirectory()>() in <org.apache.commons.io.filefilter.DirectoryFileFilter: boolean accept(java.io.File)> ==> <java.io.File: boolean isDirectory()>
SPECIAL edge: specialinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>() in <org.apache.commons.io.filefilter.PrefixFileFilter: void <init>(java.lang.String)> ==> <org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The prefix must not be null") in <org.apache.commons.io.filefilter.PrefixFileFilter: void <init>(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>() in <org.apache.commons.io.filefilter.PrefixFileFilter: void <init>(java.lang.String[])> ==> <org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The array of prefixes must not be null") in <org.apache.commons.io.filefilter.PrefixFileFilter: void <init>(java.lang.String[])> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>() in <org.apache.commons.io.filefilter.PrefixFileFilter: void <init>(java.util.List)> ==> <org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>
SPECIAL edge: specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The list of prefixes must not be null") in <org.apache.commons.io.filefilter.PrefixFileFilter: void <init>(java.util.List)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
INTERFACE edge: $i0 = interfaceinvoke r1.<java.util.List: int size()>() in <org.apache.commons.io.filefilter.PrefixFileFilter: void <init>(java.util.List)> ==> <java.util.Vector: int size()>
INTERFACE edge: $i0 = interfaceinvoke r1.<java.util.List: int size()>() in <org.apache.commons.io.filefilter.PrefixFileFilter: void <init>(java.util.List)> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i0 = interfaceinvoke r1.<java.util.List: int size()>() in <org.apache.commons.io.filefilter.PrefixFileFilter: void <init>(java.util.List)> ==> <java.util.ArrayList: int size()>
INTERFACE edge: $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r2) in <org.apache.commons.io.filefilter.PrefixFileFilter: void <init>(java.util.List)> ==> <java.util.Vector: java.lang.Object[] toArray(java.lang.Object[])>
INTERFACE edge: $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r2) in <org.apache.commons.io.filefilter.PrefixFileFilter: void <init>(java.util.List)> ==> <java.util.LinkedList: java.lang.Object[] toArray(java.lang.Object[])>
INTERFACE edge: $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r2) in <org.apache.commons.io.filefilter.PrefixFileFilter: void <init>(java.util.List)> ==> <java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>
VIRTUAL edge: r1 = virtualinvoke r0.<java.io.File: java.lang.String getName()>() in <org.apache.commons.io.filefilter.PrefixFileFilter: boolean accept(java.io.File)> ==> <java.io.File: java.lang.String getName()>
VIRTUAL edge: $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>($r5) in <org.apache.commons.io.filefilter.PrefixFileFilter: boolean accept(java.io.File)> ==> <java.lang.String: boolean startsWith(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String)>($r4) in <org.apache.commons.io.filefilter.PrefixFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <java.lang.String: boolean startsWith(java.lang.String)>
SPECIAL edge: specialinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>() in <org.apache.commons.io.filefilter.SuffixFileFilter: void <init>(java.lang.String)> ==> <org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The suffix must not be null") in <org.apache.commons.io.filefilter.SuffixFileFilter: void <init>(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>() in <org.apache.commons.io.filefilter.SuffixFileFilter: void <init>(java.lang.String[])> ==> <org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The array of suffixes must not be null") in <org.apache.commons.io.filefilter.SuffixFileFilter: void <init>(java.lang.String[])> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>() in <org.apache.commons.io.filefilter.SuffixFileFilter: void <init>(java.util.List)> ==> <org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>
SPECIAL edge: specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The list of suffixes must not be null") in <org.apache.commons.io.filefilter.SuffixFileFilter: void <init>(java.util.List)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
INTERFACE edge: $i0 = interfaceinvoke r1.<java.util.List: int size()>() in <org.apache.commons.io.filefilter.SuffixFileFilter: void <init>(java.util.List)> ==> <java.util.Vector: int size()>
INTERFACE edge: $i0 = interfaceinvoke r1.<java.util.List: int size()>() in <org.apache.commons.io.filefilter.SuffixFileFilter: void <init>(java.util.List)> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i0 = interfaceinvoke r1.<java.util.List: int size()>() in <org.apache.commons.io.filefilter.SuffixFileFilter: void <init>(java.util.List)> ==> <java.util.ArrayList: int size()>
INTERFACE edge: $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r2) in <org.apache.commons.io.filefilter.SuffixFileFilter: void <init>(java.util.List)> ==> <java.util.Vector: java.lang.Object[] toArray(java.lang.Object[])>
INTERFACE edge: $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r2) in <org.apache.commons.io.filefilter.SuffixFileFilter: void <init>(java.util.List)> ==> <java.util.LinkedList: java.lang.Object[] toArray(java.lang.Object[])>
INTERFACE edge: $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r2) in <org.apache.commons.io.filefilter.SuffixFileFilter: void <init>(java.util.List)> ==> <java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>
VIRTUAL edge: r1 = virtualinvoke r0.<java.io.File: java.lang.String getName()>() in <org.apache.commons.io.filefilter.SuffixFileFilter: boolean accept(java.io.File)> ==> <java.io.File: java.lang.String getName()>
VIRTUAL edge: $z0 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>($r5) in <org.apache.commons.io.filefilter.SuffixFileFilter: boolean accept(java.io.File)> ==> <java.lang.String: boolean endsWith(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r2.<java.lang.String: boolean endsWith(java.lang.String)>($r4) in <org.apache.commons.io.filefilter.SuffixFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <java.lang.String: boolean endsWith(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.io.File: java.io.File getParentFile()>() in <org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File)> ==> <java.io.File: java.io.File getParentFile()>
VIRTUAL edge: $r3 = virtualinvoke r1.<java.io.File: java.lang.String getName()>() in <org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File)> ==> <java.io.File: java.lang.String getName()>
VIRTUAL edge: $z0 = virtualinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File,java.lang.String)>($r2, $r3) in <org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File,java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File,java.lang.String)>($r2, $r3) in <org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.SuffixFileFilter: boolean accept(java.io.File,java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File,java.lang.String)>($r2, $r3) in <org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.NotFileFilter: boolean accept(java.io.File,java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File,java.lang.String)>($r2, $r3) in <org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.WildcardFilter: boolean accept(java.io.File,java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File,java.lang.String)>($r2, $r3) in <org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.WildcardFileFilter: boolean accept(java.io.File,java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File,java.lang.String)>($r2, $r3) in <org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.DelegateFileFilter: boolean accept(java.io.File,java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File,java.lang.String)>($r2, $r3) in <org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.PrefixFileFilter: boolean accept(java.io.File,java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File,java.lang.String)>($r2, $r3) in <org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.NameFileFilter: boolean accept(java.io.File,java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File,java.lang.String)>($r2, $r3) in <org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.AndFileFilter: boolean accept(java.io.File,java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File,java.lang.String)>($r2, $r3) in <org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File)> ==> <org.apache.commons.io.filefilter.OrFileFilter: boolean accept(java.io.File,java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>(r2, r3) in <org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <java.io.File: void <init>(java.io.File,java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File)>($r1) in <org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.filefilter.AgeFileFilter: boolean accept(java.io.File)>
VIRTUAL edge: $z0 = virtualinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File)>($r1) in <org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.filefilter.DelegateFileFilter: boolean accept(java.io.File)>
VIRTUAL edge: $z0 = virtualinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File)>($r1) in <org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.filefilter.AndFileFilter: boolean accept(java.io.File)>
VIRTUAL edge: $z0 = virtualinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File)>($r1) in <org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File)>
VIRTUAL edge: $z0 = virtualinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File)>($r1) in <org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.filefilter.FileFileFilter: boolean accept(java.io.File)>
VIRTUAL edge: $z0 = virtualinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File)>($r1) in <org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.filefilter.DirectoryFileFilter: boolean accept(java.io.File)>
VIRTUAL edge: $z0 = virtualinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File)>($r1) in <org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.filefilter.PrefixFileFilter: boolean accept(java.io.File)>
VIRTUAL edge: $z0 = virtualinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File)>($r1) in <org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.filefilter.SizeFileFilter: boolean accept(java.io.File)>
VIRTUAL edge: $z0 = virtualinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File)>($r1) in <org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.filefilter.HiddenFileFilter: boolean accept(java.io.File)>
VIRTUAL edge: $z0 = virtualinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File)>($r1) in <org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.filefilter.SuffixFileFilter: boolean accept(java.io.File)>
VIRTUAL edge: $z0 = virtualinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File)>($r1) in <org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.filefilter.OrFileFilter: boolean accept(java.io.File)>
VIRTUAL edge: $z0 = virtualinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File)>($r1) in <org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.filefilter.EmptyFileFilter: boolean accept(java.io.File)>
VIRTUAL edge: $z0 = virtualinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File)>($r1) in <org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.filefilter.WildcardFilter: boolean accept(java.io.File)>
VIRTUAL edge: $z0 = virtualinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File)>($r1) in <org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.filefilter.NameFileFilter: boolean accept(java.io.File)>
VIRTUAL edge: $z0 = virtualinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File)>($r1) in <org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.filefilter.WildcardFileFilter: boolean accept(java.io.File)>
VIRTUAL edge: $z0 = virtualinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File)>($r1) in <org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.filefilter.NotFileFilter: boolean accept(java.io.File)>
VIRTUAL edge: $z0 = virtualinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File)>($r1) in <org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.filefilter.CanReadFileFilter: boolean accept(java.io.File)>
VIRTUAL edge: $z0 = virtualinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File)>($r1) in <org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File,java.lang.String)> ==> <org.apache.commons.io.filefilter.CanWriteFileFilter: boolean accept(java.io.File)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r1) in <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase forName(java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r1) in <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase forName(java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r1) in <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase forName(java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r8.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase forName(java.lang.String)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid IOCase name: ") in <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase forName(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1) in <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase forName(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase forName(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11) in <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase forName(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.lang.NullPointerException: void <init>(java.lang.String)>("The strings must not be null") in <org.apache.commons.io.IOCase: boolean checkEquals(java.lang.String,java.lang.String)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
VIRTUAL edge: $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>(r2) in <org.apache.commons.io.IOCase: boolean checkEquals(java.lang.String,java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r2) in <org.apache.commons.io.IOCase: boolean checkEquals(java.lang.String,java.lang.String)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.String: int length()>() in <org.apache.commons.io.IOCase: boolean checkStartsWith(java.lang.String,java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: $z1 = virtualinvoke r0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>($z2, 0, r2, 0, $i0) in <org.apache.commons.io.IOCase: boolean checkStartsWith(java.lang.String,java.lang.String)> ==> <java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>
VIRTUAL edge: i0 = virtualinvoke r0.<java.lang.String: int length()>() in <org.apache.commons.io.IOCase: boolean checkEndsWith(java.lang.String,java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: $i1 = virtualinvoke r1.<java.lang.String: int length()>() in <org.apache.commons.io.IOCase: boolean checkEndsWith(java.lang.String,java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: $z1 = virtualinvoke r1.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>($z2, $i2, r0, 0, i0) in <org.apache.commons.io.IOCase: boolean checkEndsWith(java.lang.String,java.lang.String)> ==> <java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>
VIRTUAL edge: $i1 = virtualinvoke r2.<java.lang.String: int length()>() in <org.apache.commons.io.IOCase: boolean checkRegionMatches(java.lang.String,int,java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: $z1 = virtualinvoke r0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>($z2, i0, r2, 0, $i1) in <org.apache.commons.io.IOCase: boolean checkRegionMatches(java.lang.String,int,java.lang.String)> ==> <java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.apache.commons.io.FileUtils: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.io.File: boolean exists()>() in <org.apache.commons.io.FileUtils: java.io.FileInputStream openInputStream(java.io.File)> ==> <java.io.File: boolean exists()>
VIRTUAL edge: $z1 = virtualinvoke r0.<java.io.File: boolean isDirectory()>() in <org.apache.commons.io.FileUtils: java.io.FileInputStream openInputStream(java.io.File)> ==> <java.io.File: boolean isDirectory()>
VIRTUAL edge: $z2 = virtualinvoke r0.<java.io.File: boolean canRead()>() in <org.apache.commons.io.FileUtils: java.io.FileInputStream openInputStream(java.io.File)> ==> <java.io.File: boolean canRead()>
SPECIAL edge: specialinvoke $r15.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.FileUtils: java.io.FileInputStream openInputStream(java.io.File)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("File \'") in <org.apache.commons.io.FileUtils: java.io.FileInputStream openInputStream(java.io.File)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0) in <org.apache.commons.io.FileUtils: java.io.FileInputStream openInputStream(java.io.File)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' exists but is a directory") in <org.apache.commons.io.FileUtils: java.io.FileInputStream openInputStream(java.io.File)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.FileUtils: java.io.FileInputStream openInputStream(java.io.File)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r14.<java.io.IOException: void <init>(java.lang.String)>($r19) in <org.apache.commons.io.FileUtils: java.io.FileInputStream openInputStream(java.io.File)> ==> <java.io.IOException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r9.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.FileUtils: java.io.FileInputStream openInputStream(java.io.File)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("File \'") in <org.apache.commons.io.FileUtils: java.io.FileInputStream openInputStream(java.io.File)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0) in <org.apache.commons.io.FileUtils: java.io.FileInputStream openInputStream(java.io.File)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' cannot be read") in <org.apache.commons.io.FileUtils: java.io.FileInputStream openInputStream(java.io.File)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.FileUtils: java.io.FileInputStream openInputStream(java.io.File)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>($r13) in <org.apache.commons.io.FileUtils: java.io.FileInputStream openInputStream(java.io.File)> ==> <java.io.IOException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.FileUtils: java.io.FileInputStream openInputStream(java.io.File)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("File \'") in <org.apache.commons.io.FileUtils: java.io.FileInputStream openInputStream(java.io.File)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0) in <org.apache.commons.io.FileUtils: java.io.FileInputStream openInputStream(java.io.File)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' does not exist") in <org.apache.commons.io.FileUtils: java.io.FileInputStream openInputStream(java.io.File)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.FileUtils: java.io.FileInputStream openInputStream(java.io.File)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r1.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r6) in <org.apache.commons.io.FileUtils: java.io.FileInputStream openInputStream(java.io.File)> ==> <java.io.FileNotFoundException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r7.<java.io.FileInputStream: void <init>(java.io.File)>(r0) in <org.apache.commons.io.FileUtils: java.io.FileInputStream openInputStream(java.io.File)> ==> <java.io.FileInputStream: void <init>(java.io.File)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.io.File: boolean exists()>() in <org.apache.commons.io.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File)> ==> <java.io.File: boolean exists()>
VIRTUAL edge: $z3 = virtualinvoke r0.<java.io.File: boolean isDirectory()>() in <org.apache.commons.io.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File)> ==> <java.io.File: boolean isDirectory()>
VIRTUAL edge: $z4 = virtualinvoke r0.<java.io.File: boolean canWrite()>() in <org.apache.commons.io.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File)> ==> <java.io.File: boolean canWrite()>
VIRTUAL edge: r1 = virtualinvoke r0.<java.io.File: java.io.File getParentFile()>() in <org.apache.commons.io.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File)> ==> <java.io.File: java.io.File getParentFile()>
SPECIAL edge: specialinvoke $r15.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("File \'") in <org.apache.commons.io.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0) in <org.apache.commons.io.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' exists but is a directory") in <org.apache.commons.io.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r14.<java.io.IOException: void <init>(java.lang.String)>($r19) in <org.apache.commons.io.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File)> ==> <java.io.IOException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r9.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("File \'") in <org.apache.commons.io.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0) in <org.apache.commons.io.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' cannot be written to") in <org.apache.commons.io.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>($r13) in <org.apache.commons.io.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File)> ==> <java.io.IOException: void <init>(java.lang.String)>
VIRTUAL edge: $z1 = virtualinvoke r1.<java.io.File: boolean exists()>() in <org.apache.commons.io.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File)> ==> <java.io.File: boolean exists()>
VIRTUAL edge: $z2 = virtualinvoke r1.<java.io.File: boolean mkdirs()>() in <org.apache.commons.io.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File)> ==> <java.io.File: boolean mkdirs()>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("File \'") in <org.apache.commons.io.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0) in <org.apache.commons.io.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' could not be created") in <org.apache.commons.io.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>($r7) in <org.apache.commons.io.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File)> ==> <java.io.IOException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r20.<java.io.FileOutputStream: void <init>(java.io.File)>(r0) in <org.apache.commons.io.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File)> ==> <java.io.FileOutputStream: void <init>(java.io.File)>
SPECIAL edge: specialinvoke $r12.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.FileUtils: java.lang.String byteCountToDisplaySize(long)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r14 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13) in <org.apache.commons.io.FileUtils: java.lang.String byteCountToDisplaySize(long)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" GB") in <org.apache.commons.io.FileUtils: java.lang.String byteCountToDisplaySize(long)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.FileUtils: java.lang.String byteCountToDisplaySize(long)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r8.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.FileUtils: java.lang.String byteCountToDisplaySize(long)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9) in <org.apache.commons.io.FileUtils: java.lang.String byteCountToDisplaySize(long)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" MB") in <org.apache.commons.io.FileUtils: java.lang.String byteCountToDisplaySize(long)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: r16 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.FileUtils: java.lang.String byteCountToDisplaySize(long)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r4.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.FileUtils: java.lang.String byteCountToDisplaySize(long)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5) in <org.apache.commons.io.FileUtils: java.lang.String byteCountToDisplaySize(long)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" KB") in <org.apache.commons.io.FileUtils: java.lang.String byteCountToDisplaySize(long)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: r16 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.FileUtils: java.lang.String byteCountToDisplaySize(long)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.FileUtils: java.lang.String byteCountToDisplaySize(long)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1) in <org.apache.commons.io.FileUtils: java.lang.String byteCountToDisplaySize(long)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" bytes") in <org.apache.commons.io.FileUtils: java.lang.String byteCountToDisplaySize(long)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: r16 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.FileUtils: java.lang.String byteCountToDisplaySize(long)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.io.File: boolean exists()>() in <org.apache.commons.io.FileUtils: void touch(java.io.File)> ==> <java.io.File: boolean exists()>
VIRTUAL edge: z1 = virtualinvoke r0.<java.io.File: boolean setLastModified(long)>($l0) in <org.apache.commons.io.FileUtils: void touch(java.io.File)> ==> <java.io.File: boolean setLastModified(long)>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.FileUtils: void touch(java.io.File)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unable to set the last modification time for ") in <org.apache.commons.io.FileUtils: void touch(java.io.File)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0) in <org.apache.commons.io.FileUtils: void touch(java.io.File)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.FileUtils: void touch(java.io.File)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>($r5) in <org.apache.commons.io.FileUtils: void touch(java.io.File)> ==> <java.io.IOException: void <init>(java.lang.String)>
INTERFACE edge: $i0 = interfaceinvoke r0.<java.util.Collection: int size()>() in <org.apache.commons.io.FileUtils: java.io.File[] convertFileCollectionToFileArray(java.util.Collection)> ==> <java.util.Vector: int size()>
INTERFACE edge: $i0 = interfaceinvoke r0.<java.util.Collection: int size()>() in <org.apache.commons.io.FileUtils: java.io.File[] convertFileCollectionToFileArray(java.util.Collection)> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i0 = interfaceinvoke r0.<java.util.Collection: int size()>() in <org.apache.commons.io.FileUtils: java.io.File[] convertFileCollectionToFileArray(java.util.Collection)> ==> <java.util.ArrayList: int size()>
INTERFACE edge: $r2 = interfaceinvoke r0.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r1) in <org.apache.commons.io.FileUtils: java.io.File[] convertFileCollectionToFileArray(java.util.Collection)> ==> <java.util.Vector: java.lang.Object[] toArray(java.lang.Object[])>
INTERFACE edge: $r2 = interfaceinvoke r0.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r1) in <org.apache.commons.io.FileUtils: java.io.File[] convertFileCollectionToFileArray(java.util.Collection)> ==> <java.util.LinkedList: java.lang.Object[] toArray(java.lang.Object[])>
INTERFACE edge: $r2 = interfaceinvoke r0.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r1) in <org.apache.commons.io.FileUtils: java.io.File[] convertFileCollectionToFileArray(java.util.Collection)> ==> <java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.io.File: boolean isDirectory()>() in <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)> ==> <java.io.File: boolean isDirectory()>
SPECIAL edge: specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameter \'directory\' is not a directory") in <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r10.<java.lang.NullPointerException: void <init>(java.lang.String)>("Parameter \'fileFilter\' is null") in <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r7.<java.util.LinkedList: void <init>()>() in <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)> ==> <java.util.LinkedList: void <init>()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>() in <org.apache.commons.io.FileUtils: java.util.Iterator iterateFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)> ==> <java.util.AbstractList: java.util.Iterator iterator()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>() in <org.apache.commons.io.FileUtils: java.util.Iterator iterateFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>() in <org.apache.commons.io.FileUtils: java.util.Iterator iterateFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke $r9.<org.apache.commons.io.filefilter.SuffixFileFilter: void <init>(java.lang.String[])>(r1) in <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)> ==> <org.apache.commons.io.filefilter.SuffixFileFilter: void <init>(java.lang.String[])>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>() in <org.apache.commons.io.FileUtils: java.util.Iterator iterateFiles(java.io.File,java.lang.String[],boolean)> ==> <java.util.AbstractList: java.util.Iterator iterator()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>() in <org.apache.commons.io.FileUtils: java.util.Iterator iterateFiles(java.io.File,java.lang.String[],boolean)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>() in <org.apache.commons.io.FileUtils: java.util.Iterator iterateFiles(java.io.File,java.lang.String[],boolean)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
VIRTUAL edge: z0 = virtualinvoke r0.<java.io.File: boolean exists()>() in <org.apache.commons.io.FileUtils: boolean contentEquals(java.io.File,java.io.File)> ==> <java.io.File: boolean exists()>
VIRTUAL edge: $z2 = virtualinvoke r0.<java.io.File: boolean isDirectory()>() in <org.apache.commons.io.FileUtils: boolean contentEquals(java.io.File,java.io.File)> ==> <java.io.File: boolean isDirectory()>
VIRTUAL edge: $l0 = virtualinvoke r0.<java.io.File: long length()>() in <org.apache.commons.io.FileUtils: boolean contentEquals(java.io.File,java.io.File)> ==> <java.io.File: long length()>
VIRTUAL edge: $r3 = virtualinvoke r0.<java.io.File: java.io.File getCanonicalFile()>() in <org.apache.commons.io.FileUtils: boolean contentEquals(java.io.File,java.io.File)> ==> <java.io.File: java.io.File getCanonicalFile()>
VIRTUAL edge: $z1 = virtualinvoke r1.<java.io.File: boolean exists()>() in <org.apache.commons.io.FileUtils: boolean contentEquals(java.io.File,java.io.File)> ==> <java.io.File: boolean exists()>
VIRTUAL edge: $z3 = virtualinvoke r1.<java.io.File: boolean isDirectory()>() in <org.apache.commons.io.FileUtils: boolean contentEquals(java.io.File,java.io.File)> ==> <java.io.File: boolean isDirectory()>
VIRTUAL edge: $l1 = virtualinvoke r1.<java.io.File: long length()>() in <org.apache.commons.io.FileUtils: boolean contentEquals(java.io.File,java.io.File)> ==> <java.io.File: long length()>
VIRTUAL edge: $r4 = virtualinvoke r1.<java.io.File: java.io.File getCanonicalFile()>() in <org.apache.commons.io.FileUtils: boolean contentEquals(java.io.File,java.io.File)> ==> <java.io.File: java.io.File getCanonicalFile()>
SPECIAL edge: specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Can\'t compare directories, only files") in <org.apache.commons.io.FileUtils: boolean contentEquals(java.io.File,java.io.File)> ==> <java.io.IOException: void <init>(java.lang.String)>
VIRTUAL edge: $z4 = virtualinvoke $r3.<java.io.File: boolean equals(java.lang.Object)>($r4) in <org.apache.commons.io.FileUtils: boolean contentEquals(java.io.File,java.io.File)> ==> <java.io.File: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r5.<java.io.FileInputStream: void <init>(java.io.File)>(r0) in <org.apache.commons.io.FileUtils: boolean contentEquals(java.io.File,java.io.File)> ==> <java.io.FileInputStream: void <init>(java.io.File)>
SPECIAL edge: specialinvoke $r6.<java.io.FileInputStream: void <init>(java.io.File)>(r1) in <org.apache.commons.io.FileUtils: boolean contentEquals(java.io.File,java.io.File)> ==> <java.io.FileInputStream: void <init>(java.io.File)>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.net.URL: java.lang.String getProtocol()>() in <org.apache.commons.io.FileUtils: java.io.File toFile(java.net.URL)> ==> <java.net.URL: java.lang.String getProtocol()>
VIRTUAL edge: $r2 = virtualinvoke r0.<java.net.URL: java.lang.String getFile()>() in <org.apache.commons.io.FileUtils: java.io.File toFile(java.net.URL)> ==> <java.net.URL: java.lang.String getFile()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("file") in <org.apache.commons.io.FileUtils: java.io.File toFile(java.net.URL)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: r11 = virtualinvoke $r2.<java.lang.String: java.lang.String replace(char,char)>(47, $c0) in <org.apache.commons.io.FileUtils: java.io.File toFile(java.net.URL)> ==> <java.lang.String: java.lang.String replace(char,char)>
VIRTUAL edge: $i9 = virtualinvoke r11.<java.lang.String: int indexOf(int,int)>(37, i8) in <org.apache.commons.io.FileUtils: java.io.File toFile(java.net.URL)> ==> <java.lang.String: int indexOf(int,int)>
VIRTUAL edge: $i2 = virtualinvoke r11.<java.lang.String: int length()>() in <org.apache.commons.io.FileUtils: java.io.File toFile(java.net.URL)> ==> <java.lang.String: int length()>
VIRTUAL edge: r4 = virtualinvoke r11.<java.lang.String: java.lang.String substring(int,int)>($i4, $i3) in <org.apache.commons.io.FileUtils: java.io.File toFile(java.net.URL)> ==> <java.lang.String: java.lang.String substring(int,int)>
VIRTUAL edge: $r6 = virtualinvoke r11.<java.lang.String: java.lang.String substring(int,int)>(0, $i9) in <org.apache.commons.io.FileUtils: java.io.File toFile(java.net.URL)> ==> <java.lang.String: java.lang.String substring(int,int)>
VIRTUAL edge: $r9 = virtualinvoke r11.<java.lang.String: java.lang.String substring(int)>($i7) in <org.apache.commons.io.FileUtils: java.io.File toFile(java.net.URL)> ==> <java.lang.String: java.lang.String substring(int)>
SPECIAL edge: specialinvoke $r5.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.FileUtils: java.io.File toFile(java.net.URL)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6) in <org.apache.commons.io.FileUtils: java.io.File toFile(java.net.URL)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c6) in <org.apache.commons.io.FileUtils: java.io.File toFile(java.net.URL)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(char)>
VIRTUAL edge: $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9) in <org.apache.commons.io.FileUtils: java.io.File toFile(java.net.URL)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.FileUtils: java.io.File toFile(java.net.URL)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>(r11) in <org.apache.commons.io.FileUtils: java.io.File toFile(java.net.URL)> ==> <java.io.File: void <init>(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke r3.<java.net.URL: java.lang.String getProtocol()>() in <org.apache.commons.io.FileUtils: java.io.File[] toFiles(java.net.URL[])> ==> <java.net.URL: java.lang.String getProtocol()>
VIRTUAL edge: $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("file") in <org.apache.commons.io.FileUtils: java.io.File[] toFiles(java.net.URL[])> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r7.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.FileUtils: java.io.File[] toFiles(java.net.URL[])> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("URL could not be converted to a File: ") in <org.apache.commons.io.FileUtils: java.io.File[] toFiles(java.net.URL[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r3) in <org.apache.commons.io.FileUtils: java.io.File[] toFiles(java.net.URL[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.FileUtils: java.io.File[] toFiles(java.net.URL[])> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10) in <org.apache.commons.io.FileUtils: java.io.File[] toFiles(java.net.URL[])> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.io.File: java.net.URL toURL()>() in <org.apache.commons.io.FileUtils: java.net.URL[] toURLs(java.io.File[])> ==> <java.io.File: java.net.URL toURL()>
SPECIAL edge: specialinvoke $r10.<java.lang.NullPointerException: void <init>(java.lang.String)>("Destination must not be null") in <org.apache.commons.io.FileUtils: void copyFileToDirectory(java.io.File,java.io.File,boolean)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.io.File: boolean exists()>() in <org.apache.commons.io.FileUtils: void copyFileToDirectory(java.io.File,java.io.File,boolean)> ==> <java.io.File: boolean exists()>
VIRTUAL edge: $z2 = virtualinvoke r0.<java.io.File: boolean isDirectory()>() in <org.apache.commons.io.FileUtils: void copyFileToDirectory(java.io.File,java.io.File,boolean)> ==> <java.io.File: boolean isDirectory()>
SPECIAL edge: specialinvoke $r5.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.FileUtils: void copyFileToDirectory(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Destination \'") in <org.apache.commons.io.FileUtils: void copyFileToDirectory(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0) in <org.apache.commons.io.FileUtils: void copyFileToDirectory(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' is not a directory") in <org.apache.commons.io.FileUtils: void copyFileToDirectory(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.FileUtils: void copyFileToDirectory(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9) in <org.apache.commons.io.FileUtils: void copyFileToDirectory(java.io.File,java.io.File,boolean)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r1.<java.io.File: java.lang.String getName()>() in <org.apache.commons.io.FileUtils: void copyFileToDirectory(java.io.File,java.io.File,boolean)> ==> <java.io.File: java.lang.String getName()>
SPECIAL edge: specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>(r0, $r3) in <org.apache.commons.io.FileUtils: void copyFileToDirectory(java.io.File,java.io.File,boolean)> ==> <java.io.File: void <init>(java.io.File,java.lang.String)>
SPECIAL edge: specialinvoke $r40.<java.lang.NullPointerException: void <init>(java.lang.String)>("Source must not be null") in <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r39.<java.lang.NullPointerException: void <init>(java.lang.String)>("Destination must not be null") in <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.io.File: boolean exists()>() in <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)> ==> <java.io.File: boolean exists()>
VIRTUAL edge: $z1 = virtualinvoke r0.<java.io.File: boolean isDirectory()>() in <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)> ==> <java.io.File: boolean isDirectory()>
VIRTUAL edge: $r2 = virtualinvoke r0.<java.io.File: java.lang.String getCanonicalPath()>() in <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)> ==> <java.io.File: java.lang.String getCanonicalPath()>
SPECIAL edge: specialinvoke $r34.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Source \'") in <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0) in <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' does not exist") in <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r33.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r38) in <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)> ==> <java.io.FileNotFoundException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r28.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Source \'") in <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0) in <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' exists but is a directory") in <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r27.<java.io.IOException: void <init>(java.lang.String)>($r32) in <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)> ==> <java.io.IOException: void <init>(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r1.<java.io.File: java.lang.String getCanonicalPath()>() in <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)> ==> <java.io.File: java.lang.String getCanonicalPath()>
VIRTUAL edge: $r4 = virtualinvoke r1.<java.io.File: java.io.File getParentFile()>() in <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)> ==> <java.io.File: java.io.File getParentFile()>
VIRTUAL edge: $r11 = virtualinvoke r1.<java.io.File: java.io.File getParentFile()>() in <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)> ==> <java.io.File: java.io.File getParentFile()>
VIRTUAL edge: $r12 = virtualinvoke r1.<java.io.File: java.io.File getParentFile()>() in <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)> ==> <java.io.File: java.io.File getParentFile()>
VIRTUAL edge: $z7 = virtualinvoke r1.<java.io.File: boolean exists()>() in <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)> ==> <java.io.File: boolean exists()>
VIRTUAL edge: $z4 = virtualinvoke r1.<java.io.File: boolean canWrite()>() in <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)> ==> <java.io.File: boolean canWrite()>
VIRTUAL edge: $z2 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3) in <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r20.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Source \'") in <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0) in <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' and destination \'") in <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1) in <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' are the same") in <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r19.<java.io.IOException: void <init>(java.lang.String)>($r26) in <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)> ==> <java.io.IOException: void <init>(java.lang.String)>
VIRTUAL edge: $z5 = virtualinvoke $r11.<java.io.File: boolean exists()>() in <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)> ==> <java.io.File: boolean exists()>
VIRTUAL edge: $z6 = virtualinvoke $r12.<java.io.File: boolean mkdirs()>() in <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)> ==> <java.io.File: boolean mkdirs()>
SPECIAL edge: specialinvoke $r14.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Destination \'") in <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1) in <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' directory cannot be created") in <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r13.<java.io.IOException: void <init>(java.lang.String)>($r18) in <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)> ==> <java.io.IOException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r6.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Destination \'") in <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1) in <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' exists but is read-only") in <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>($r10) in <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)> ==> <java.io.IOException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r17.<java.lang.NullPointerException: void <init>(java.lang.String)>("Source must not be null") in <org.apache.commons.io.FileUtils: void copyDirectoryToDirectory(java.io.File,java.io.File)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.io.File: boolean exists()>() in <org.apache.commons.io.FileUtils: void copyDirectoryToDirectory(java.io.File,java.io.File)> ==> <java.io.File: boolean exists()>
VIRTUAL edge: $z3 = virtualinvoke r0.<java.io.File: boolean isDirectory()>() in <org.apache.commons.io.FileUtils: void copyDirectoryToDirectory(java.io.File,java.io.File)> ==> <java.io.File: boolean isDirectory()>
VIRTUAL edge: $r3 = virtualinvoke r0.<java.io.File: java.lang.String getName()>() in <org.apache.commons.io.FileUtils: void copyDirectoryToDirectory(java.io.File,java.io.File)> ==> <java.io.File: java.lang.String getName()>
SPECIAL edge: specialinvoke $r12.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.FileUtils: void copyDirectoryToDirectory(java.io.File,java.io.File)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Source \'") in <org.apache.commons.io.FileUtils: void copyDirectoryToDirectory(java.io.File,java.io.File)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1) in <org.apache.commons.io.FileUtils: void copyDirectoryToDirectory(java.io.File,java.io.File)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' is not a directory") in <org.apache.commons.io.FileUtils: void copyDirectoryToDirectory(java.io.File,java.io.File)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.FileUtils: void copyDirectoryToDirectory(java.io.File,java.io.File)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16) in <org.apache.commons.io.FileUtils: void copyDirectoryToDirectory(java.io.File,java.io.File)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r10.<java.lang.NullPointerException: void <init>(java.lang.String)>("Destination must not be null") in <org.apache.commons.io.FileUtils: void copyDirectoryToDirectory(java.io.File,java.io.File)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
VIRTUAL edge: $z1 = virtualinvoke r1.<java.io.File: boolean exists()>() in <org.apache.commons.io.FileUtils: void copyDirectoryToDirectory(java.io.File,java.io.File)> ==> <java.io.File: boolean exists()>
VIRTUAL edge: $z2 = virtualinvoke r1.<java.io.File: boolean isDirectory()>() in <org.apache.commons.io.FileUtils: void copyDirectoryToDirectory(java.io.File,java.io.File)> ==> <java.io.File: boolean isDirectory()>
SPECIAL edge: specialinvoke $r5.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.FileUtils: void copyDirectoryToDirectory(java.io.File,java.io.File)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Destination \'") in <org.apache.commons.io.FileUtils: void copyDirectoryToDirectory(java.io.File,java.io.File)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1) in <org.apache.commons.io.FileUtils: void copyDirectoryToDirectory(java.io.File,java.io.File)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' is not a directory") in <org.apache.commons.io.FileUtils: void copyDirectoryToDirectory(java.io.File,java.io.File)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.FileUtils: void copyDirectoryToDirectory(java.io.File,java.io.File)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9) in <org.apache.commons.io.FileUtils: void copyDirectoryToDirectory(java.io.File,java.io.File)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, $r3) in <org.apache.commons.io.FileUtils: void copyDirectoryToDirectory(java.io.File,java.io.File)> ==> <java.io.File: void <init>(java.io.File,java.lang.String)>
SPECIAL edge: specialinvoke $r25.<java.lang.NullPointerException: void <init>(java.lang.String)>("Source must not be null") in <org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,boolean)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r24.<java.lang.NullPointerException: void <init>(java.lang.String)>("Destination must not be null") in <org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,boolean)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.io.File: boolean exists()>() in <org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,boolean)> ==> <java.io.File: boolean exists()>
VIRTUAL edge: $z1 = virtualinvoke r0.<java.io.File: boolean isDirectory()>() in <org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,boolean)> ==> <java.io.File: boolean isDirectory()>
VIRTUAL edge: $r2 = virtualinvoke r0.<java.io.File: java.lang.String getCanonicalPath()>() in <org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,boolean)> ==> <java.io.File: java.lang.String getCanonicalPath()>
SPECIAL edge: specialinvoke $r19.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Source \'") in <org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0) in <org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' does not exist") in <org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r18.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r23) in <org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,boolean)> ==> <java.io.FileNotFoundException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r13.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Source \'") in <org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0) in <org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' exists but is not a directory") in <org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r12.<java.io.IOException: void <init>(java.lang.String)>($r17) in <org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,boolean)> ==> <java.io.IOException: void <init>(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r1.<java.io.File: java.lang.String getCanonicalPath()>() in <org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,boolean)> ==> <java.io.File: java.lang.String getCanonicalPath()>
VIRTUAL edge: $z2 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3) in <org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,boolean)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r5.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Source \'") in <org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0) in <org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' and destination \'") in <org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1) in <org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' are the same") in <org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>($r11) in <org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,boolean)> ==> <java.io.IOException: void <init>(java.lang.String)>
VIRTUAL edge: r1 = virtualinvoke r0.<java.net.URL: java.io.InputStream openStream()>() in <org.apache.commons.io.FileUtils: void copyURLToFile(java.net.URL,java.io.File)> ==> <java.net.URL: java.io.InputStream openStream()>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.io.File: boolean exists()>() in <org.apache.commons.io.FileUtils: void deleteDirectory(java.io.File)> ==> <java.io.File: boolean exists()>
VIRTUAL edge: $z1 = virtualinvoke r0.<java.io.File: boolean delete()>() in <org.apache.commons.io.FileUtils: void deleteDirectory(java.io.File)> ==> <java.io.File: boolean delete()>
SPECIAL edge: specialinvoke $r1.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.FileUtils: void deleteDirectory(java.io.File)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unable to delete directory ") in <org.apache.commons.io.FileUtils: void deleteDirectory(java.io.File)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0) in <org.apache.commons.io.FileUtils: void deleteDirectory(java.io.File)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".") in <org.apache.commons.io.FileUtils: void deleteDirectory(java.io.File)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.FileUtils: void deleteDirectory(java.io.File)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>(r5) in <org.apache.commons.io.FileUtils: void deleteDirectory(java.io.File)> ==> <java.io.IOException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.io.File: boolean exists()>() in <org.apache.commons.io.FileUtils: void cleanDirectory(java.io.File)> ==> <java.io.File: boolean exists()>
VIRTUAL edge: $z1 = virtualinvoke r0.<java.io.File: boolean isDirectory()>() in <org.apache.commons.io.FileUtils: void cleanDirectory(java.io.File)> ==> <java.io.File: boolean isDirectory()>
VIRTUAL edge: r19 = virtualinvoke r0.<java.io.File: java.io.File[] listFiles()>() in <org.apache.commons.io.FileUtils: void cleanDirectory(java.io.File)> ==> <java.io.File: java.io.File[] listFiles()>
SPECIAL edge: specialinvoke $r11.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.FileUtils: void cleanDirectory(java.io.File)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0) in <org.apache.commons.io.FileUtils: void cleanDirectory(java.io.File)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" does not exist") in <org.apache.commons.io.FileUtils: void cleanDirectory(java.io.File)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: r17 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.FileUtils: void cleanDirectory(java.io.File)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r17) in <org.apache.commons.io.FileUtils: void cleanDirectory(java.io.File)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r7.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.FileUtils: void cleanDirectory(java.io.File)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0) in <org.apache.commons.io.FileUtils: void cleanDirectory(java.io.File)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is not a directory") in <org.apache.commons.io.FileUtils: void cleanDirectory(java.io.File)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: r18 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.FileUtils: void cleanDirectory(java.io.File)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r18) in <org.apache.commons.io.FileUtils: void cleanDirectory(java.io.File)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.FileUtils: void cleanDirectory(java.io.File)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Failed to list contents of ") in <org.apache.commons.io.FileUtils: void cleanDirectory(java.io.File)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0) in <org.apache.commons.io.FileUtils: void cleanDirectory(java.io.File)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.FileUtils: void cleanDirectory(java.io.File)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>($r6) in <org.apache.commons.io.FileUtils: void cleanDirectory(java.io.File)> ==> <java.io.IOException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.io.File: boolean exists()>() in <org.apache.commons.io.FileUtils: boolean waitFor(java.io.File,int)> ==> <java.io.File: boolean exists()>
VIRTUAL edge: virtualinvoke r4.<java.io.OutputStream: void write(byte[])>(r1) in <org.apache.commons.io.FileUtils: void writeByteArrayToFile(java.io.File,byte[])> ==> <java.io.OutputStream: void write(byte[])>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.io.File: boolean isDirectory()>() in <org.apache.commons.io.FileUtils: void forceDelete(java.io.File)> ==> <java.io.File: boolean isDirectory()>
VIRTUAL edge: $z1 = virtualinvoke r0.<java.io.File: boolean exists()>() in <org.apache.commons.io.FileUtils: void forceDelete(java.io.File)> ==> <java.io.File: boolean exists()>
VIRTUAL edge: $z2 = virtualinvoke r0.<java.io.File: boolean delete()>() in <org.apache.commons.io.FileUtils: void forceDelete(java.io.File)> ==> <java.io.File: boolean delete()>
SPECIAL edge: specialinvoke $r7.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.FileUtils: void forceDelete(java.io.File)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("File does not exist: ") in <org.apache.commons.io.FileUtils: void forceDelete(java.io.File)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0) in <org.apache.commons.io.FileUtils: void forceDelete(java.io.File)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.FileUtils: void forceDelete(java.io.File)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r6.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r10) in <org.apache.commons.io.FileUtils: void forceDelete(java.io.File)> ==> <java.io.FileNotFoundException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.FileUtils: void forceDelete(java.io.File)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unable to delete file: ") in <org.apache.commons.io.FileUtils: void forceDelete(java.io.File)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0) in <org.apache.commons.io.FileUtils: void forceDelete(java.io.File)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.FileUtils: void forceDelete(java.io.File)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>(r4) in <org.apache.commons.io.FileUtils: void forceDelete(java.io.File)> ==> <java.io.IOException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.io.File: boolean isDirectory()>() in <org.apache.commons.io.FileUtils: void forceDeleteOnExit(java.io.File)> ==> <java.io.File: boolean isDirectory()>
VIRTUAL edge: virtualinvoke r0.<java.io.File: void deleteOnExit()>() in <org.apache.commons.io.FileUtils: void forceDeleteOnExit(java.io.File)> ==> <java.io.File: void deleteOnExit()>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.io.File: boolean exists()>() in <org.apache.commons.io.FileUtils: void forceMkdir(java.io.File)> ==> <java.io.File: boolean exists()>
VIRTUAL edge: $z2 = virtualinvoke r0.<java.io.File: boolean isFile()>() in <org.apache.commons.io.FileUtils: void forceMkdir(java.io.File)> ==> <java.io.File: boolean isFile()>
VIRTUAL edge: $z1 = virtualinvoke r0.<java.io.File: boolean mkdirs()>() in <org.apache.commons.io.FileUtils: void forceMkdir(java.io.File)> ==> <java.io.File: boolean mkdirs()>
SPECIAL edge: specialinvoke $r5.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.FileUtils: void forceMkdir(java.io.File)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("File ") in <org.apache.commons.io.FileUtils: void forceMkdir(java.io.File)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0) in <org.apache.commons.io.FileUtils: void forceMkdir(java.io.File)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" exists and is ") in <org.apache.commons.io.FileUtils: void forceMkdir(java.io.File)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("not a directory. Unable to create directory.") in <org.apache.commons.io.FileUtils: void forceMkdir(java.io.File)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.FileUtils: void forceMkdir(java.io.File)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>(r11) in <org.apache.commons.io.FileUtils: void forceMkdir(java.io.File)> ==> <java.io.IOException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.FileUtils: void forceMkdir(java.io.File)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unable to create directory ") in <org.apache.commons.io.FileUtils: void forceMkdir(java.io.File)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0) in <org.apache.commons.io.FileUtils: void forceMkdir(java.io.File)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: r12 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.FileUtils: void forceMkdir(java.io.File)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>(r12) in <org.apache.commons.io.FileUtils: void forceMkdir(java.io.File)> ==> <java.io.IOException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.io.File: boolean exists()>() in <org.apache.commons.io.FileUtils: long sizeOfDirectory(java.io.File)> ==> <java.io.File: boolean exists()>
VIRTUAL edge: $z1 = virtualinvoke r0.<java.io.File: boolean isDirectory()>() in <org.apache.commons.io.FileUtils: long sizeOfDirectory(java.io.File)> ==> <java.io.File: boolean isDirectory()>
VIRTUAL edge: r1 = virtualinvoke r0.<java.io.File: java.io.File[] listFiles()>() in <org.apache.commons.io.FileUtils: long sizeOfDirectory(java.io.File)> ==> <java.io.File: java.io.File[] listFiles()>
SPECIAL edge: specialinvoke $r7.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.FileUtils: long sizeOfDirectory(java.io.File)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0) in <org.apache.commons.io.FileUtils: long sizeOfDirectory(java.io.File)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" does not exist") in <org.apache.commons.io.FileUtils: long sizeOfDirectory(java.io.File)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.FileUtils: long sizeOfDirectory(java.io.File)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r11) in <org.apache.commons.io.FileUtils: long sizeOfDirectory(java.io.File)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.FileUtils: long sizeOfDirectory(java.io.File)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0) in <org.apache.commons.io.FileUtils: long sizeOfDirectory(java.io.File)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is not a directory") in <org.apache.commons.io.FileUtils: long sizeOfDirectory(java.io.File)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: r12 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.FileUtils: long sizeOfDirectory(java.io.File)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r12) in <org.apache.commons.io.FileUtils: long sizeOfDirectory(java.io.File)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $z2 = virtualinvoke r2.<java.io.File: boolean isDirectory()>() in <org.apache.commons.io.FileUtils: long sizeOfDirectory(java.io.File)> ==> <java.io.File: boolean isDirectory()>
VIRTUAL edge: $l1 = virtualinvoke r2.<java.io.File: long length()>() in <org.apache.commons.io.FileUtils: long sizeOfDirectory(java.io.File)> ==> <java.io.File: long length()>
SPECIAL edge: specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No specified reference file") in <org.apache.commons.io.FileUtils: boolean isFileNewer(java.io.File,java.io.File)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.io.File: boolean exists()>() in <org.apache.commons.io.FileUtils: boolean isFileNewer(java.io.File,java.io.File)> ==> <java.io.File: boolean exists()>
VIRTUAL edge: $l0 = virtualinvoke r0.<java.io.File: long lastModified()>() in <org.apache.commons.io.FileUtils: boolean isFileNewer(java.io.File,java.io.File)> ==> <java.io.File: long lastModified()>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.FileUtils: boolean isFileNewer(java.io.File,java.io.File)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The reference file \'") in <org.apache.commons.io.FileUtils: boolean isFileNewer(java.io.File,java.io.File)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1) in <org.apache.commons.io.FileUtils: boolean isFileNewer(java.io.File,java.io.File)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' doesn\'t exist") in <org.apache.commons.io.FileUtils: boolean isFileNewer(java.io.File,java.io.File)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.FileUtils: boolean isFileNewer(java.io.File,java.io.File)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7) in <org.apache.commons.io.FileUtils: boolean isFileNewer(java.io.File,java.io.File)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No specified date") in <org.apache.commons.io.FileUtils: boolean isFileNewer(java.io.File,java.util.Date)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $l0 = virtualinvoke r0.<java.util.Date: long getTime()>() in <org.apache.commons.io.FileUtils: boolean isFileNewer(java.io.File,java.util.Date)> ==> <java.util.Date: long getTime()>
SPECIAL edge: specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No specified file") in <org.apache.commons.io.FileUtils: boolean isFileNewer(java.io.File,long)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.io.File: boolean exists()>() in <org.apache.commons.io.FileUtils: boolean isFileNewer(java.io.File,long)> ==> <java.io.File: boolean exists()>
VIRTUAL edge: $l0 = virtualinvoke r0.<java.io.File: long lastModified()>() in <org.apache.commons.io.FileUtils: boolean isFileNewer(java.io.File,long)> ==> <java.io.File: long lastModified()>
SPECIAL edge: specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No specified reference file") in <org.apache.commons.io.FileUtils: boolean isFileOlder(java.io.File,java.io.File)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.io.File: boolean exists()>() in <org.apache.commons.io.FileUtils: boolean isFileOlder(java.io.File,java.io.File)> ==> <java.io.File: boolean exists()>
VIRTUAL edge: $l0 = virtualinvoke r0.<java.io.File: long lastModified()>() in <org.apache.commons.io.FileUtils: boolean isFileOlder(java.io.File,java.io.File)> ==> <java.io.File: long lastModified()>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.FileUtils: boolean isFileOlder(java.io.File,java.io.File)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The reference file \'") in <org.apache.commons.io.FileUtils: boolean isFileOlder(java.io.File,java.io.File)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1) in <org.apache.commons.io.FileUtils: boolean isFileOlder(java.io.File,java.io.File)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' doesn\'t exist") in <org.apache.commons.io.FileUtils: boolean isFileOlder(java.io.File,java.io.File)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.FileUtils: boolean isFileOlder(java.io.File,java.io.File)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7) in <org.apache.commons.io.FileUtils: boolean isFileOlder(java.io.File,java.io.File)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No specified date") in <org.apache.commons.io.FileUtils: boolean isFileOlder(java.io.File,java.util.Date)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $l0 = virtualinvoke r0.<java.util.Date: long getTime()>() in <org.apache.commons.io.FileUtils: boolean isFileOlder(java.io.File,java.util.Date)> ==> <java.util.Date: long getTime()>
SPECIAL edge: specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No specified file") in <org.apache.commons.io.FileUtils: boolean isFileOlder(java.io.File,long)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.io.File: boolean exists()>() in <org.apache.commons.io.FileUtils: boolean isFileOlder(java.io.File,long)> ==> <java.io.File: boolean exists()>
VIRTUAL edge: $l0 = virtualinvoke r0.<java.io.File: long lastModified()>() in <org.apache.commons.io.FileUtils: boolean isFileOlder(java.io.File,long)> ==> <java.io.File: long lastModified()>
SPECIAL edge: specialinvoke $r0.<java.util.zip.CRC32: void <init>()>() in <org.apache.commons.io.FileUtils: long checksumCRC32(java.io.File)> ==> <java.util.zip.CRC32: void <init>()>
VIRTUAL edge: $l0 = virtualinvoke $r0.<java.util.zip.CRC32: long getValue()>() in <org.apache.commons.io.FileUtils: long checksumCRC32(java.io.File)> ==> <java.util.zip.CRC32: long getValue()>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.io.File: boolean isDirectory()>() in <org.apache.commons.io.FileUtils: java.util.zip.Checksum checksum(java.io.File,java.util.zip.Checksum)> ==> <java.io.File: boolean isDirectory()>
SPECIAL edge: specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Checksums can\'t be computed on directories") in <org.apache.commons.io.FileUtils: java.util.zip.Checksum checksum(java.io.File,java.util.zip.Checksum)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r2.<java.io.FileInputStream: void <init>(java.io.File)>(r0) in <org.apache.commons.io.FileUtils: java.util.zip.Checksum checksum(java.io.File,java.util.zip.Checksum)> ==> <java.io.FileInputStream: void <init>(java.io.File)>
SPECIAL edge: specialinvoke $r1.<java.util.zip.CheckedInputStream: void <init>(java.io.InputStream,java.util.zip.Checksum)>($r2, r3) in <org.apache.commons.io.FileUtils: java.util.zip.Checksum checksum(java.io.File,java.util.zip.Checksum)> ==> <java.util.zip.CheckedInputStream: void <init>(java.io.InputStream,java.util.zip.Checksum)>
SPECIAL edge: specialinvoke $r4.<org.apache.commons.io.output.NullOutputStream: void <init>()>() in <org.apache.commons.io.FileUtils: java.util.zip.Checksum checksum(java.io.File,java.util.zip.Checksum)> ==> <org.apache.commons.io.output.NullOutputStream: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.apache.commons.io.FilenameUtils: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: i1 = virtualinvoke r1.<java.lang.String: int length()>() in <org.apache.commons.io.FilenameUtils: java.lang.String concat(java.lang.String,java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: c3 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i2) in <org.apache.commons.io.FilenameUtils: java.lang.String concat(java.lang.String,java.lang.String)> ==> <java.lang.String: char charAt(int)>
SPECIAL edge: specialinvoke $r8.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.FilenameUtils: java.lang.String concat(java.lang.String,java.lang.String)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1) in <org.apache.commons.io.FilenameUtils: java.lang.String concat(java.lang.String,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0) in <org.apache.commons.io.FilenameUtils: java.lang.String concat(java.lang.String,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.FilenameUtils: java.lang.String concat(java.lang.String,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.FilenameUtils: java.lang.String concat(java.lang.String,java.lang.String)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1) in <org.apache.commons.io.FilenameUtils: java.lang.String concat(java.lang.String,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(47) in <org.apache.commons.io.FilenameUtils: java.lang.String concat(java.lang.String,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(char)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0) in <org.apache.commons.io.FilenameUtils: java.lang.String concat(java.lang.String,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.FilenameUtils: java.lang.String concat(java.lang.String,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(92) in <org.apache.commons.io.FilenameUtils: java.lang.String separatorsToUnix(java.lang.String)> ==> <java.lang.String: int indexOf(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.lang.String: java.lang.String replace(char,char)>(92, 47) in <org.apache.commons.io.FilenameUtils: java.lang.String separatorsToUnix(java.lang.String)> ==> <java.lang.String: java.lang.String replace(char,char)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(47) in <org.apache.commons.io.FilenameUtils: java.lang.String separatorsToWindows(java.lang.String)> ==> <java.lang.String: int indexOf(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.lang.String: java.lang.String replace(char,char)>(47, 92) in <org.apache.commons.io.FilenameUtils: java.lang.String separatorsToWindows(java.lang.String)> ==> <java.lang.String: java.lang.String replace(char,char)>
VIRTUAL edge: i0 = virtualinvoke r0.<java.lang.String: int length()>() in <org.apache.commons.io.FilenameUtils: int getPrefixLength(java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: c7 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0) in <org.apache.commons.io.FilenameUtils: int getPrefixLength(java.lang.String)> ==> <java.lang.String: char charAt(int)>
VIRTUAL edge: i9 = virtualinvoke r0.<java.lang.String: int indexOf(int,int)>(47, 1) in <org.apache.commons.io.FilenameUtils: int getPrefixLength(java.lang.String)> ==> <java.lang.String: int indexOf(int,int)>
VIRTUAL edge: i10 = virtualinvoke r0.<java.lang.String: int indexOf(int,int)>(92, 1) in <org.apache.commons.io.FilenameUtils: int getPrefixLength(java.lang.String)> ==> <java.lang.String: int indexOf(int,int)>
VIRTUAL edge: c15 = virtualinvoke r0.<java.lang.String: char charAt(int)>(1) in <org.apache.commons.io.FilenameUtils: int getPrefixLength(java.lang.String)> ==> <java.lang.String: char charAt(int)>
VIRTUAL edge: $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(2) in <org.apache.commons.io.FilenameUtils: int getPrefixLength(java.lang.String)> ==> <java.lang.String: char charAt(int)>
VIRTUAL edge: i17 = virtualinvoke r0.<java.lang.String: int indexOf(int,int)>(47, 2) in <org.apache.commons.io.FilenameUtils: int getPrefixLength(java.lang.String)> ==> <java.lang.String: int indexOf(int,int)>
VIRTUAL edge: i18 = virtualinvoke r0.<java.lang.String: int indexOf(int,int)>(92, 2) in <org.apache.commons.io.FilenameUtils: int getPrefixLength(java.lang.String)> ==> <java.lang.String: int indexOf(int,int)>
VIRTUAL edge: i0 = virtualinvoke r0.<java.lang.String: int lastIndexOf(int)>(47) in <org.apache.commons.io.FilenameUtils: int indexOfLastSeparator(java.lang.String)> ==> <java.lang.String: int lastIndexOf(int)>
VIRTUAL edge: i1 = virtualinvoke r0.<java.lang.String: int lastIndexOf(int)>(92) in <org.apache.commons.io.FilenameUtils: int indexOfLastSeparator(java.lang.String)> ==> <java.lang.String: int lastIndexOf(int)>
VIRTUAL edge: i0 = virtualinvoke r0.<java.lang.String: int lastIndexOf(int)>(46) in <org.apache.commons.io.FilenameUtils: int indexOfExtension(java.lang.String)> ==> <java.lang.String: int lastIndexOf(int)>
VIRTUAL edge: $i1 = virtualinvoke r0.<java.lang.String: int length()>() in <org.apache.commons.io.FilenameUtils: java.lang.String getPrefix(java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i0) in <org.apache.commons.io.FilenameUtils: java.lang.String getPrefix(java.lang.String)> ==> <java.lang.String: java.lang.String substring(int,int)>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.FilenameUtils: java.lang.String getPrefix(java.lang.String)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0) in <org.apache.commons.io.FilenameUtils: java.lang.String getPrefix(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(47) in <org.apache.commons.io.FilenameUtils: java.lang.String getPrefix(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(char)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.FilenameUtils: java.lang.String getPrefix(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i1) in <org.apache.commons.io.FilenameUtils: java.lang.String getName(java.lang.String)> ==> <java.lang.String: java.lang.String substring(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i1) in <org.apache.commons.io.FilenameUtils: java.lang.String getExtension(java.lang.String)> ==> <java.lang.String: java.lang.String substring(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i0) in <org.apache.commons.io.FilenameUtils: java.lang.String removeExtension(java.lang.String)> ==> <java.lang.String: java.lang.String substring(int,int)>
VIRTUAL edge: $z1 = virtualinvoke r2.<org.apache.commons.io.IOCase: boolean checkEquals(java.lang.String,java.lang.String)>(r0, r1) in <org.apache.commons.io.FilenameUtils: boolean equals(java.lang.String,java.lang.String,boolean,org.apache.commons.io.IOCase)> ==> <org.apache.commons.io.IOCase: boolean checkEquals(java.lang.String,java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke r1.<java.lang.String: int length()>() in <org.apache.commons.io.FilenameUtils: boolean isExtension(java.lang.String,java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(r1) in <org.apache.commons.io.FilenameUtils: boolean isExtension(java.lang.String,java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r3) in <org.apache.commons.io.FilenameUtils: boolean isExtension(java.lang.String,java.lang.String[])> ==> <java.lang.String: boolean equals(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Collection: boolean isEmpty()>() in <org.apache.commons.io.FilenameUtils: boolean isExtension(java.lang.String,java.util.Collection)> ==> <java.util.Vector: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Collection: boolean isEmpty()>() in <org.apache.commons.io.FilenameUtils: boolean isExtension(java.lang.String,java.util.Collection)> ==> <java.util.AbstractCollection: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Collection: boolean isEmpty()>() in <org.apache.commons.io.FilenameUtils: boolean isExtension(java.lang.String,java.util.Collection)> ==> <java.util.ArrayList: boolean isEmpty()>
INTERFACE edge: r3 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>() in <org.apache.commons.io.FilenameUtils: boolean isExtension(java.lang.String,java.util.Collection)> ==> <java.util.AbstractList: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>() in <org.apache.commons.io.FilenameUtils: boolean isExtension(java.lang.String,java.util.Collection)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>() in <org.apache.commons.io.FilenameUtils: boolean isExtension(java.lang.String,java.util.Collection)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <org.apache.commons.io.FilenameUtils: boolean isExtension(java.lang.String,java.util.Collection)> ==> <org.apache.commons.io.LineIterator: boolean hasNext()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <org.apache.commons.io.FilenameUtils: boolean isExtension(java.lang.String,java.util.Collection)> ==> <org.apache.commons.io.LineIterator: java.lang.Object next()>
VIRTUAL edge: $z2 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r4) in <org.apache.commons.io.FilenameUtils: boolean isExtension(java.lang.String,java.util.Collection)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: r16 = virtualinvoke r15.<org.apache.commons.io.IOCase: java.lang.String convertCase(java.lang.String)>(r13) in <org.apache.commons.io.FilenameUtils: boolean wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)> ==> <org.apache.commons.io.IOCase: java.lang.String convertCase(java.lang.String)>
VIRTUAL edge: r17 = virtualinvoke r15.<org.apache.commons.io.IOCase: java.lang.String convertCase(java.lang.String)>(r14) in <org.apache.commons.io.FilenameUtils: boolean wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)> ==> <org.apache.commons.io.IOCase: java.lang.String convertCase(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.util.Stack: void <init>()>() in <org.apache.commons.io.FilenameUtils: boolean wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)> ==> <java.util.Stack: void <init>()>
VIRTUAL edge: $i8 = virtualinvoke $r1.<java.util.Stack: int size()>() in <org.apache.commons.io.FilenameUtils: boolean wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)> ==> <java.util.Vector: int size()>
VIRTUAL edge: $r11 = virtualinvoke $r1.<java.util.Stack: java.lang.Object pop()>() in <org.apache.commons.io.FilenameUtils: boolean wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)> ==> <java.util.Stack: java.lang.Object pop()>
VIRTUAL edge: virtualinvoke $r1.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r9) in <org.apache.commons.io.FilenameUtils: boolean wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)> ==> <java.util.Stack: java.lang.Object push(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.util.Stack: int size()>() in <org.apache.commons.io.FilenameUtils: boolean wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)> ==> <java.util.Vector: int size()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("?") in <org.apache.commons.io.FilenameUtils: boolean wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("*") in <org.apache.commons.io.FilenameUtils: boolean wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: i6 = virtualinvoke r16.<java.lang.String: int length()>() in <org.apache.commons.io.FilenameUtils: boolean wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)> ==> <java.lang.String: int length()>
VIRTUAL edge: i6 = virtualinvoke r16.<java.lang.String: int indexOf(java.lang.String,int)>($r7, i6) in <org.apache.commons.io.FilenameUtils: boolean wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)> ==> <java.lang.String: int indexOf(java.lang.String,int)>
VIRTUAL edge: i10 = virtualinvoke r16.<java.lang.String: int indexOf(java.lang.String,int)>($r8, $i3) in <org.apache.commons.io.FilenameUtils: boolean wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)> ==> <java.lang.String: int indexOf(java.lang.String,int)>
VIRTUAL edge: $z2 = virtualinvoke r16.<java.lang.String: boolean startsWith(java.lang.String,int)>($r5, i6) in <org.apache.commons.io.FilenameUtils: boolean wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)> ==> <java.lang.String: boolean startsWith(java.lang.String,int)>
VIRTUAL edge: $i1 = virtualinvoke r16.<java.lang.String: int length()>() in <org.apache.commons.io.FilenameUtils: boolean wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)> ==> <java.lang.String: int length()>
VIRTUAL edge: $i2 = virtualinvoke $r6.<java.lang.String: int length()>() in <org.apache.commons.io.FilenameUtils: boolean wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)> ==> <java.lang.String: int length()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.apache.commons.io.LineIterator: void <init>(java.io.Reader)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Reader must not be null") in <org.apache.commons.io.LineIterator: void <init>(java.io.Reader)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r2.<java.io.BufferedReader: void <init>(java.io.Reader)>(r1) in <org.apache.commons.io.LineIterator: void <init>(java.io.Reader)> ==> <java.io.BufferedReader: void <init>(java.io.Reader)>
VIRTUAL edge: r6 = virtualinvoke $r2.<java.io.BufferedReader: java.lang.String readLine()>() in <org.apache.commons.io.LineIterator: boolean hasNext()> ==> <java.io.BufferedReader: java.lang.String readLine()>
VIRTUAL edge: $z1 = virtualinvoke r0.<org.apache.commons.io.LineIterator: boolean isValidLine(java.lang.String)>(r6) in <org.apache.commons.io.LineIterator: boolean hasNext()> ==> <org.apache.commons.io.LineIterator: boolean isValidLine(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.io.LineIterator: void close()>() in <org.apache.commons.io.LineIterator: boolean hasNext()> ==> <org.apache.commons.io.LineIterator: void close()>
VIRTUAL edge: $r5 = virtualinvoke $r9.<java.io.IOException: java.lang.String toString()>() in <org.apache.commons.io.LineIterator: boolean hasNext()> ==> <java.lang.Throwable: java.lang.String toString()>
SPECIAL edge: specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5) in <org.apache.commons.io.LineIterator: boolean hasNext()> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<org.apache.commons.io.LineIterator: java.lang.String nextLine()>() in <org.apache.commons.io.LineIterator: java.lang.Object next()> ==> <org.apache.commons.io.LineIterator: java.lang.String nextLine()>
VIRTUAL edge: $z0 = virtualinvoke r0.<org.apache.commons.io.LineIterator: boolean hasNext()>() in <org.apache.commons.io.LineIterator: java.lang.String nextLine()> ==> <org.apache.commons.io.LineIterator: boolean hasNext()>
SPECIAL edge: specialinvoke $r2.<java.util.NoSuchElementException: void <init>(java.lang.String)>("No more lines") in <org.apache.commons.io.LineIterator: java.lang.String nextLine()> ==> <java.util.NoSuchElementException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Remove unsupported on LineIterator") in <org.apache.commons.io.LineIterator: void remove()> ==> <java.lang.UnsupportedOperationException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.io.LineIterator: void close()>() in <org.apache.commons.io.LineIterator: void closeQuietly(org.apache.commons.io.LineIterator)> ==> <org.apache.commons.io.LineIterator: void close()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.apache.commons.io.IOUtils: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke r0.<java.io.Reader: void close()>() in <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Reader)> ==> <java.io.BufferedReader: void close()>
VIRTUAL edge: virtualinvoke r0.<java.io.Reader: void close()>() in <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Reader)> ==> <java.io.StringReader: void close()>
VIRTUAL edge: virtualinvoke r0.<java.io.Reader: void close()>() in <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Reader)> ==> <java.io.InputStreamReader: void close()>
VIRTUAL edge: virtualinvoke r0.<java.io.Reader: void close()>() in <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Reader)> ==> <org.apache.commons.io.input.NullReader: void close()>
VIRTUAL edge: virtualinvoke r0.<java.io.Writer: void close()>() in <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Writer)> ==> <java.io.PrintWriter: void close()>
VIRTUAL edge: virtualinvoke r0.<java.io.Writer: void close()>() in <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Writer)> ==> <org.apache.commons.io.output.ProxyWriter: void close()>
VIRTUAL edge: virtualinvoke r0.<java.io.Writer: void close()>() in <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Writer)> ==> <org.apache.commons.io.output.NullWriter: void close()>
VIRTUAL edge: virtualinvoke r0.<java.io.Writer: void close()>() in <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Writer)> ==> <java.io.StringWriter: void close()>
VIRTUAL edge: virtualinvoke r0.<java.io.Writer: void close()>() in <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Writer)> ==> <org.apache.commons.io.output.LockableFileWriter: void close()>
VIRTUAL edge: virtualinvoke r0.<java.io.Writer: void close()>() in <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Writer)> ==> <java.io.OutputStreamWriter: void close()>
VIRTUAL edge: virtualinvoke r0.<java.io.Writer: void close()>() in <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Writer)> ==> <java.io.CharArrayWriter: void close()>
VIRTUAL edge: virtualinvoke r0.<java.io.InputStream: void close()>() in <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)> ==> <java.io.FilterInputStream: void close()>
VIRTUAL edge: virtualinvoke r0.<java.io.InputStream: void close()>() in <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)> ==> <java.io.BufferedInputStream: void close()>
VIRTUAL edge: virtualinvoke r0.<java.io.InputStream: void close()>() in <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)> ==> <org.apache.commons.io.input.ProxyInputStream: void close()>
VIRTUAL edge: virtualinvoke r0.<java.io.InputStream: void close()>() in <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)> ==> <java.io.ByteArrayInputStream: void close()>
VIRTUAL edge: virtualinvoke r0.<java.io.InputStream: void close()>() in <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)> ==> <org.apache.commons.io.input.NullInputStream: void close()>
VIRTUAL edge: virtualinvoke r0.<java.io.InputStream: void close()>() in <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)> ==> <java.io.ObjectInputStream: void close()>
VIRTUAL edge: virtualinvoke r0.<java.io.InputStream: void close()>() in <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)> ==> <java.io.FileInputStream: void close()>
VIRTUAL edge: virtualinvoke r0.<java.io.InputStream: void close()>() in <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)> ==> <org.apache.commons.io.input.DemuxInputStream: void close()>
VIRTUAL edge: virtualinvoke r0.<java.io.InputStream: void close()>() in <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)> ==> <java.io.InputStream: void close()>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void close()>() in <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)> ==> <java.io.OutputStream: void close()>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void close()>() in <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)> ==> <java.io.PrintStream: void close()>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void close()>() in <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)> ==> <org.apache.commons.io.output.ProxyOutputStream: void close()>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void close()>() in <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)> ==> <org.apache.commons.io.output.DeferredFileOutputStream: void close()>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void close()>() in <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)> ==> <org.apache.commons.io.output.ByteArrayOutputStream: void close()>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void close()>() in <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)> ==> <java.io.FileOutputStream: void close()>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void close()>() in <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)> ==> <java.io.FilterOutputStream: void close()>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void close()>() in <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)> ==> <org.apache.commons.io.output.DemuxOutputStream: void close()>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void close()>() in <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)> ==> <org.apache.commons.io.output.TeeOutputStream: void close()>
SPECIAL edge: specialinvoke $r0.<org.apache.commons.io.output.ByteArrayOutputStream: void <init>()>() in <org.apache.commons.io.IOUtils: byte[] toByteArray(java.io.InputStream)> ==> <org.apache.commons.io.output.ByteArrayOutputStream: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] toByteArray()>() in <org.apache.commons.io.IOUtils: byte[] toByteArray(java.io.InputStream)> ==> <org.apache.commons.io.output.ByteArrayOutputStream: byte[] toByteArray()>
SPECIAL edge: specialinvoke $r0.<org.apache.commons.io.output.ByteArrayOutputStream: void <init>()>() in <org.apache.commons.io.IOUtils: byte[] toByteArray(java.io.Reader)> ==> <org.apache.commons.io.output.ByteArrayOutputStream: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] toByteArray()>() in <org.apache.commons.io.IOUtils: byte[] toByteArray(java.io.Reader)> ==> <org.apache.commons.io.output.ByteArrayOutputStream: byte[] toByteArray()>
SPECIAL edge: specialinvoke $r0.<org.apache.commons.io.output.ByteArrayOutputStream: void <init>()>() in <org.apache.commons.io.IOUtils: byte[] toByteArray(java.io.Reader,java.lang.String)> ==> <org.apache.commons.io.output.ByteArrayOutputStream: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] toByteArray()>() in <org.apache.commons.io.IOUtils: byte[] toByteArray(java.io.Reader,java.lang.String)> ==> <org.apache.commons.io.output.ByteArrayOutputStream: byte[] toByteArray()>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.lang.String: byte[] getBytes()>() in <org.apache.commons.io.IOUtils: byte[] toByteArray(java.lang.String)> ==> <java.lang.String: byte[] getBytes()>
SPECIAL edge: specialinvoke $r0.<java.io.CharArrayWriter: void <init>()>() in <org.apache.commons.io.IOUtils: char[] toCharArray(java.io.InputStream)> ==> <java.io.CharArrayWriter: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r0.<java.io.CharArrayWriter: char[] toCharArray()>() in <org.apache.commons.io.IOUtils: char[] toCharArray(java.io.InputStream)> ==> <java.io.CharArrayWriter: char[] toCharArray()>
SPECIAL edge: specialinvoke $r0.<java.io.CharArrayWriter: void <init>()>() in <org.apache.commons.io.IOUtils: char[] toCharArray(java.io.InputStream,java.lang.String)> ==> <java.io.CharArrayWriter: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r0.<java.io.CharArrayWriter: char[] toCharArray()>() in <org.apache.commons.io.IOUtils: char[] toCharArray(java.io.InputStream,java.lang.String)> ==> <java.io.CharArrayWriter: char[] toCharArray()>
SPECIAL edge: specialinvoke $r0.<java.io.CharArrayWriter: void <init>()>() in <org.apache.commons.io.IOUtils: char[] toCharArray(java.io.Reader)> ==> <java.io.CharArrayWriter: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r0.<java.io.CharArrayWriter: char[] toCharArray()>() in <org.apache.commons.io.IOUtils: char[] toCharArray(java.io.Reader)> ==> <java.io.CharArrayWriter: char[] toCharArray()>
SPECIAL edge: specialinvoke $r0.<java.io.StringWriter: void <init>()>() in <org.apache.commons.io.IOUtils: java.lang.String toString(java.io.InputStream)> ==> <java.io.StringWriter: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r0.<java.io.StringWriter: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: java.lang.String toString(java.io.InputStream)> ==> <java.io.StringWriter: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<java.io.StringWriter: void <init>()>() in <org.apache.commons.io.IOUtils: java.lang.String toString(java.io.InputStream,java.lang.String)> ==> <java.io.StringWriter: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r0.<java.io.StringWriter: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: java.lang.String toString(java.io.InputStream,java.lang.String)> ==> <java.io.StringWriter: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<java.io.StringWriter: void <init>()>() in <org.apache.commons.io.IOUtils: java.lang.String toString(java.io.Reader)> ==> <java.io.StringWriter: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r0.<java.io.StringWriter: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: java.lang.String toString(java.io.Reader)> ==> <java.io.StringWriter: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<java.lang.String: void <init>(byte[])>(r1) in <org.apache.commons.io.IOUtils: java.lang.String toString(byte[])> ==> <java.lang.String: void <init>(byte[])>
SPECIAL edge: specialinvoke $r3.<java.lang.String: void <init>(byte[])>(r2) in <org.apache.commons.io.IOUtils: java.lang.String toString(byte[],java.lang.String)> ==> <java.lang.String: void <init>(byte[])>
SPECIAL edge: specialinvoke $r1.<java.lang.String: void <init>(byte[],java.lang.String)>(r2, r0) in <org.apache.commons.io.IOUtils: java.lang.String toString(byte[],java.lang.String)> ==> <java.lang.String: void <init>(byte[],java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r1) in <org.apache.commons.io.IOUtils: java.util.List readLines(java.io.InputStream)> ==> <java.io.InputStreamReader: void <init>(java.io.InputStream)>
SPECIAL edge: specialinvoke $r1.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>(r2, r0) in <org.apache.commons.io.IOUtils: java.util.List readLines(java.io.InputStream,java.lang.String)> ==> <java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.io.BufferedReader: void <init>(java.io.Reader)>(r1) in <org.apache.commons.io.IOUtils: java.util.List readLines(java.io.Reader)> ==> <java.io.BufferedReader: void <init>(java.io.Reader)>
VIRTUAL edge: r5 = virtualinvoke $r0.<java.io.BufferedReader: java.lang.String readLine()>() in <org.apache.commons.io.IOUtils: java.util.List readLines(java.io.Reader)> ==> <java.io.BufferedReader: java.lang.String readLine()>
VIRTUAL edge: r5 = virtualinvoke $r0.<java.io.BufferedReader: java.lang.String readLine()>() in <org.apache.commons.io.IOUtils: java.util.List readLines(java.io.Reader)> ==> <java.io.BufferedReader: java.lang.String readLine()>
SPECIAL edge: specialinvoke $r3.<java.util.ArrayList: void <init>()>() in <org.apache.commons.io.IOUtils: java.util.List readLines(java.io.Reader)> ==> <java.util.ArrayList: void <init>()>
INTERFACE edge: interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r5) in <org.apache.commons.io.IOUtils: java.util.List readLines(java.io.Reader)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<org.apache.commons.io.LineIterator: void <init>(java.io.Reader)>(r1) in <org.apache.commons.io.IOUtils: org.apache.commons.io.LineIterator lineIterator(java.io.Reader)> ==> <org.apache.commons.io.LineIterator: void <init>(java.io.Reader)>
SPECIAL edge: specialinvoke $r4.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r2) in <org.apache.commons.io.IOUtils: org.apache.commons.io.LineIterator lineIterator(java.io.InputStream,java.lang.String)> ==> <java.io.InputStreamReader: void <init>(java.io.InputStream)>
SPECIAL edge: specialinvoke $r1.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>(r2, r0) in <org.apache.commons.io.IOUtils: org.apache.commons.io.LineIterator lineIterator(java.io.InputStream,java.lang.String)> ==> <java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>
SPECIAL edge: specialinvoke $r3.<org.apache.commons.io.LineIterator: void <init>(java.io.Reader)>(r5) in <org.apache.commons.io.IOUtils: org.apache.commons.io.LineIterator lineIterator(java.io.InputStream,java.lang.String)> ==> <org.apache.commons.io.LineIterator: void <init>(java.io.Reader)>
VIRTUAL edge: r1 = virtualinvoke r0.<java.lang.String: byte[] getBytes()>() in <org.apache.commons.io.IOUtils: java.io.InputStream toInputStream(java.lang.String)> ==> <java.lang.String: byte[] getBytes()>
SPECIAL edge: specialinvoke $r2.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1) in <org.apache.commons.io.IOUtils: java.io.InputStream toInputStream(java.lang.String)> ==> <java.io.ByteArrayInputStream: void <init>(byte[])>
VIRTUAL edge: $r4 = virtualinvoke r1.<java.lang.String: byte[] getBytes(java.lang.String)>(r0) in <org.apache.commons.io.IOUtils: java.io.InputStream toInputStream(java.lang.String,java.lang.String)> ==> <java.lang.String: byte[] getBytes(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke r1.<java.lang.String: byte[] getBytes()>() in <org.apache.commons.io.IOUtils: java.io.InputStream toInputStream(java.lang.String,java.lang.String)> ==> <java.lang.String: byte[] getBytes()>
SPECIAL edge: specialinvoke $r3.<java.io.ByteArrayInputStream: void <init>(byte[])>($r4) in <org.apache.commons.io.IOUtils: java.io.InputStream toInputStream(java.lang.String,java.lang.String)> ==> <java.io.ByteArrayInputStream: void <init>(byte[])>
VIRTUAL edge: virtualinvoke r1.<java.io.OutputStream: void write(byte[])>(r0) in <org.apache.commons.io.IOUtils: void write(byte[],java.io.OutputStream)> ==> <java.io.OutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r1.<java.io.OutputStream: void write(byte[])>(r0) in <org.apache.commons.io.IOUtils: void write(byte[],java.io.OutputStream)> ==> <org.apache.commons.io.output.CountingOutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r1.<java.io.OutputStream: void write(byte[])>(r0) in <org.apache.commons.io.IOUtils: void write(byte[],java.io.OutputStream)> ==> <org.apache.commons.io.output.NullOutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r1.<java.io.OutputStream: void write(byte[])>(r0) in <org.apache.commons.io.IOUtils: void write(byte[],java.io.OutputStream)> ==> <org.apache.commons.io.output.ThresholdingOutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r1.<java.io.OutputStream: void write(byte[])>(r0) in <org.apache.commons.io.IOUtils: void write(byte[],java.io.OutputStream)> ==> <org.apache.commons.io.output.ProxyOutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r1.<java.io.OutputStream: void write(byte[])>(r0) in <org.apache.commons.io.IOUtils: void write(byte[],java.io.OutputStream)> ==> <org.apache.commons.io.output.TeeOutputStream: void write(byte[])>
SPECIAL edge: specialinvoke $r2.<java.lang.String: void <init>(byte[])>(r0) in <org.apache.commons.io.IOUtils: void write(byte[],java.io.Writer)> ==> <java.lang.String: void <init>(byte[])>
VIRTUAL edge: virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>($r2) in <org.apache.commons.io.IOUtils: void write(byte[],java.io.Writer)> ==> <java.io.PrintWriter: void write(java.lang.String)>
VIRTUAL edge: virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>($r2) in <org.apache.commons.io.IOUtils: void write(byte[],java.io.Writer)> ==> <org.apache.commons.io.output.ProxyWriter: void write(java.lang.String)>
VIRTUAL edge: virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>($r2) in <org.apache.commons.io.IOUtils: void write(byte[],java.io.Writer)> ==> <org.apache.commons.io.output.NullWriter: void write(java.lang.String)>
VIRTUAL edge: virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>($r2) in <org.apache.commons.io.IOUtils: void write(byte[],java.io.Writer)> ==> <java.io.StringWriter: void write(java.lang.String)>
VIRTUAL edge: virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>($r2) in <org.apache.commons.io.IOUtils: void write(byte[],java.io.Writer)> ==> <java.io.Writer: void write(java.lang.String)>
VIRTUAL edge: virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>($r2) in <org.apache.commons.io.IOUtils: void write(byte[],java.io.Writer)> ==> <org.apache.commons.io.output.LockableFileWriter: void write(java.lang.String)>
SPECIAL edge: specialinvoke $r3.<java.lang.String: void <init>(byte[],java.lang.String)>(r0, r1) in <org.apache.commons.io.IOUtils: void write(byte[],java.io.Writer,java.lang.String)> ==> <java.lang.String: void <init>(byte[],java.lang.String)>
VIRTUAL edge: virtualinvoke r2.<java.io.Writer: void write(java.lang.String)>($r3) in <org.apache.commons.io.IOUtils: void write(byte[],java.io.Writer,java.lang.String)> ==> <java.io.PrintWriter: void write(java.lang.String)>
VIRTUAL edge: virtualinvoke r2.<java.io.Writer: void write(java.lang.String)>($r3) in <org.apache.commons.io.IOUtils: void write(byte[],java.io.Writer,java.lang.String)> ==> <org.apache.commons.io.output.ProxyWriter: void write(java.lang.String)>
VIRTUAL edge: virtualinvoke r2.<java.io.Writer: void write(java.lang.String)>($r3) in <org.apache.commons.io.IOUtils: void write(byte[],java.io.Writer,java.lang.String)> ==> <org.apache.commons.io.output.NullWriter: void write(java.lang.String)>
VIRTUAL edge: virtualinvoke r2.<java.io.Writer: void write(java.lang.String)>($r3) in <org.apache.commons.io.IOUtils: void write(byte[],java.io.Writer,java.lang.String)> ==> <java.io.StringWriter: void write(java.lang.String)>
VIRTUAL edge: virtualinvoke r2.<java.io.Writer: void write(java.lang.String)>($r3) in <org.apache.commons.io.IOUtils: void write(byte[],java.io.Writer,java.lang.String)> ==> <java.io.Writer: void write(java.lang.String)>
VIRTUAL edge: virtualinvoke r2.<java.io.Writer: void write(java.lang.String)>($r3) in <org.apache.commons.io.IOUtils: void write(byte[],java.io.Writer,java.lang.String)> ==> <org.apache.commons.io.output.LockableFileWriter: void write(java.lang.String)>
VIRTUAL edge: virtualinvoke r1.<java.io.Writer: void write(char[])>(r0) in <org.apache.commons.io.IOUtils: void write(char[],java.io.Writer)> ==> <java.io.PrintWriter: void write(char[])>
VIRTUAL edge: virtualinvoke r1.<java.io.Writer: void write(char[])>(r0) in <org.apache.commons.io.IOUtils: void write(char[],java.io.Writer)> ==> <org.apache.commons.io.output.ProxyWriter: void write(char[])>
VIRTUAL edge: virtualinvoke r1.<java.io.Writer: void write(char[])>(r0) in <org.apache.commons.io.IOUtils: void write(char[],java.io.Writer)> ==> <org.apache.commons.io.output.NullWriter: void write(char[])>
VIRTUAL edge: virtualinvoke r1.<java.io.Writer: void write(char[])>(r0) in <org.apache.commons.io.IOUtils: void write(char[],java.io.Writer)> ==> <java.io.Writer: void write(char[])>
VIRTUAL edge: virtualinvoke r1.<java.io.Writer: void write(char[])>(r0) in <org.apache.commons.io.IOUtils: void write(char[],java.io.Writer)> ==> <org.apache.commons.io.output.LockableFileWriter: void write(char[])>
SPECIAL edge: specialinvoke $r2.<java.lang.String: void <init>(char[])>(r0) in <org.apache.commons.io.IOUtils: void write(char[],java.io.OutputStream)> ==> <java.lang.String: void <init>(char[])>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.String: byte[] getBytes()>() in <org.apache.commons.io.IOUtils: void write(char[],java.io.OutputStream)> ==> <java.lang.String: byte[] getBytes()>
VIRTUAL edge: virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r3) in <org.apache.commons.io.IOUtils: void write(char[],java.io.OutputStream)> ==> <java.io.OutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r3) in <org.apache.commons.io.IOUtils: void write(char[],java.io.OutputStream)> ==> <org.apache.commons.io.output.CountingOutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r3) in <org.apache.commons.io.IOUtils: void write(char[],java.io.OutputStream)> ==> <org.apache.commons.io.output.NullOutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r3) in <org.apache.commons.io.IOUtils: void write(char[],java.io.OutputStream)> ==> <org.apache.commons.io.output.ThresholdingOutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r3) in <org.apache.commons.io.IOUtils: void write(char[],java.io.OutputStream)> ==> <org.apache.commons.io.output.ProxyOutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r3) in <org.apache.commons.io.IOUtils: void write(char[],java.io.OutputStream)> ==> <org.apache.commons.io.output.TeeOutputStream: void write(byte[])>
SPECIAL edge: specialinvoke $r3.<java.lang.String: void <init>(char[])>(r0) in <org.apache.commons.io.IOUtils: void write(char[],java.io.OutputStream,java.lang.String)> ==> <java.lang.String: void <init>(char[])>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.String: byte[] getBytes(java.lang.String)>(r1) in <org.apache.commons.io.IOUtils: void write(char[],java.io.OutputStream,java.lang.String)> ==> <java.lang.String: byte[] getBytes(java.lang.String)>
VIRTUAL edge: virtualinvoke r2.<java.io.OutputStream: void write(byte[])>($r4) in <org.apache.commons.io.IOUtils: void write(char[],java.io.OutputStream,java.lang.String)> ==> <java.io.OutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r2.<java.io.OutputStream: void write(byte[])>($r4) in <org.apache.commons.io.IOUtils: void write(char[],java.io.OutputStream,java.lang.String)> ==> <org.apache.commons.io.output.CountingOutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r2.<java.io.OutputStream: void write(byte[])>($r4) in <org.apache.commons.io.IOUtils: void write(char[],java.io.OutputStream,java.lang.String)> ==> <org.apache.commons.io.output.NullOutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r2.<java.io.OutputStream: void write(byte[])>($r4) in <org.apache.commons.io.IOUtils: void write(char[],java.io.OutputStream,java.lang.String)> ==> <org.apache.commons.io.output.ThresholdingOutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r2.<java.io.OutputStream: void write(byte[])>($r4) in <org.apache.commons.io.IOUtils: void write(char[],java.io.OutputStream,java.lang.String)> ==> <org.apache.commons.io.output.ProxyOutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r2.<java.io.OutputStream: void write(byte[])>($r4) in <org.apache.commons.io.IOUtils: void write(char[],java.io.OutputStream,java.lang.String)> ==> <org.apache.commons.io.output.TeeOutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>(r0) in <org.apache.commons.io.IOUtils: void write(java.lang.String,java.io.Writer)> ==> <java.io.PrintWriter: void write(java.lang.String)>
VIRTUAL edge: virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>(r0) in <org.apache.commons.io.IOUtils: void write(java.lang.String,java.io.Writer)> ==> <org.apache.commons.io.output.ProxyWriter: void write(java.lang.String)>
VIRTUAL edge: virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>(r0) in <org.apache.commons.io.IOUtils: void write(java.lang.String,java.io.Writer)> ==> <org.apache.commons.io.output.NullWriter: void write(java.lang.String)>
VIRTUAL edge: virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>(r0) in <org.apache.commons.io.IOUtils: void write(java.lang.String,java.io.Writer)> ==> <java.io.StringWriter: void write(java.lang.String)>
VIRTUAL edge: virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>(r0) in <org.apache.commons.io.IOUtils: void write(java.lang.String,java.io.Writer)> ==> <java.io.Writer: void write(java.lang.String)>
VIRTUAL edge: virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>(r0) in <org.apache.commons.io.IOUtils: void write(java.lang.String,java.io.Writer)> ==> <org.apache.commons.io.output.LockableFileWriter: void write(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r0.<java.lang.String: byte[] getBytes()>() in <org.apache.commons.io.IOUtils: void write(java.lang.String,java.io.OutputStream)> ==> <java.lang.String: byte[] getBytes()>
VIRTUAL edge: virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r2) in <org.apache.commons.io.IOUtils: void write(java.lang.String,java.io.OutputStream)> ==> <java.io.OutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r2) in <org.apache.commons.io.IOUtils: void write(java.lang.String,java.io.OutputStream)> ==> <org.apache.commons.io.output.CountingOutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r2) in <org.apache.commons.io.IOUtils: void write(java.lang.String,java.io.OutputStream)> ==> <org.apache.commons.io.output.NullOutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r2) in <org.apache.commons.io.IOUtils: void write(java.lang.String,java.io.OutputStream)> ==> <org.apache.commons.io.output.ThresholdingOutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r2) in <org.apache.commons.io.IOUtils: void write(java.lang.String,java.io.OutputStream)> ==> <org.apache.commons.io.output.ProxyOutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r2) in <org.apache.commons.io.IOUtils: void write(java.lang.String,java.io.OutputStream)> ==> <org.apache.commons.io.output.TeeOutputStream: void write(byte[])>
VIRTUAL edge: $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.lang.String)>(r1) in <org.apache.commons.io.IOUtils: void write(java.lang.String,java.io.OutputStream,java.lang.String)> ==> <java.lang.String: byte[] getBytes(java.lang.String)>
VIRTUAL edge: virtualinvoke r2.<java.io.OutputStream: void write(byte[])>($r3) in <org.apache.commons.io.IOUtils: void write(java.lang.String,java.io.OutputStream,java.lang.String)> ==> <java.io.OutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r2.<java.io.OutputStream: void write(byte[])>($r3) in <org.apache.commons.io.IOUtils: void write(java.lang.String,java.io.OutputStream,java.lang.String)> ==> <org.apache.commons.io.output.CountingOutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r2.<java.io.OutputStream: void write(byte[])>($r3) in <org.apache.commons.io.IOUtils: void write(java.lang.String,java.io.OutputStream,java.lang.String)> ==> <org.apache.commons.io.output.NullOutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r2.<java.io.OutputStream: void write(byte[])>($r3) in <org.apache.commons.io.IOUtils: void write(java.lang.String,java.io.OutputStream,java.lang.String)> ==> <org.apache.commons.io.output.ThresholdingOutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r2.<java.io.OutputStream: void write(byte[])>($r3) in <org.apache.commons.io.IOUtils: void write(java.lang.String,java.io.OutputStream,java.lang.String)> ==> <org.apache.commons.io.output.ProxyOutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r2.<java.io.OutputStream: void write(byte[])>($r3) in <org.apache.commons.io.IOUtils: void write(java.lang.String,java.io.OutputStream,java.lang.String)> ==> <org.apache.commons.io.output.TeeOutputStream: void write(byte[])>
VIRTUAL edge: $r2 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void write(java.lang.StringBuffer,java.io.Writer)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>($r2) in <org.apache.commons.io.IOUtils: void write(java.lang.StringBuffer,java.io.Writer)> ==> <java.io.PrintWriter: void write(java.lang.String)>
VIRTUAL edge: virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>($r2) in <org.apache.commons.io.IOUtils: void write(java.lang.StringBuffer,java.io.Writer)> ==> <org.apache.commons.io.output.ProxyWriter: void write(java.lang.String)>
VIRTUAL edge: virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>($r2) in <org.apache.commons.io.IOUtils: void write(java.lang.StringBuffer,java.io.Writer)> ==> <org.apache.commons.io.output.NullWriter: void write(java.lang.String)>
VIRTUAL edge: virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>($r2) in <org.apache.commons.io.IOUtils: void write(java.lang.StringBuffer,java.io.Writer)> ==> <java.io.StringWriter: void write(java.lang.String)>
VIRTUAL edge: virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>($r2) in <org.apache.commons.io.IOUtils: void write(java.lang.StringBuffer,java.io.Writer)> ==> <java.io.Writer: void write(java.lang.String)>
VIRTUAL edge: virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>($r2) in <org.apache.commons.io.IOUtils: void write(java.lang.StringBuffer,java.io.Writer)> ==> <org.apache.commons.io.output.LockableFileWriter: void write(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void write(java.lang.StringBuffer,java.io.OutputStream)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.String: byte[] getBytes()>() in <org.apache.commons.io.IOUtils: void write(java.lang.StringBuffer,java.io.OutputStream)> ==> <java.lang.String: byte[] getBytes()>
VIRTUAL edge: virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r3) in <org.apache.commons.io.IOUtils: void write(java.lang.StringBuffer,java.io.OutputStream)> ==> <java.io.OutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r3) in <org.apache.commons.io.IOUtils: void write(java.lang.StringBuffer,java.io.OutputStream)> ==> <org.apache.commons.io.output.CountingOutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r3) in <org.apache.commons.io.IOUtils: void write(java.lang.StringBuffer,java.io.OutputStream)> ==> <org.apache.commons.io.output.NullOutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r3) in <org.apache.commons.io.IOUtils: void write(java.lang.StringBuffer,java.io.OutputStream)> ==> <org.apache.commons.io.output.ThresholdingOutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r3) in <org.apache.commons.io.IOUtils: void write(java.lang.StringBuffer,java.io.OutputStream)> ==> <org.apache.commons.io.output.ProxyOutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r3) in <org.apache.commons.io.IOUtils: void write(java.lang.StringBuffer,java.io.OutputStream)> ==> <org.apache.commons.io.output.TeeOutputStream: void write(byte[])>
VIRTUAL edge: $r3 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.String: byte[] getBytes(java.lang.String)>(r1) in <org.apache.commons.io.IOUtils: void write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String)> ==> <java.lang.String: byte[] getBytes(java.lang.String)>
VIRTUAL edge: virtualinvoke r2.<java.io.OutputStream: void write(byte[])>($r4) in <org.apache.commons.io.IOUtils: void write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String)> ==> <java.io.OutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r2.<java.io.OutputStream: void write(byte[])>($r4) in <org.apache.commons.io.IOUtils: void write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String)> ==> <org.apache.commons.io.output.CountingOutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r2.<java.io.OutputStream: void write(byte[])>($r4) in <org.apache.commons.io.IOUtils: void write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String)> ==> <org.apache.commons.io.output.NullOutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r2.<java.io.OutputStream: void write(byte[])>($r4) in <org.apache.commons.io.IOUtils: void write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String)> ==> <org.apache.commons.io.output.ThresholdingOutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r2.<java.io.OutputStream: void write(byte[])>($r4) in <org.apache.commons.io.IOUtils: void write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String)> ==> <org.apache.commons.io.output.ProxyOutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r2.<java.io.OutputStream: void write(byte[])>($r4) in <org.apache.commons.io.IOUtils: void write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String)> ==> <org.apache.commons.io.output.TeeOutputStream: void write(byte[])>
INTERFACE edge: r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)> ==> <java.util.AbstractList: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)> ==> <org.apache.commons.io.LineIterator: boolean hasNext()>
INTERFACE edge: r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)> ==> <org.apache.commons.io.LineIterator: java.lang.Object next()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)> ==> <java.lang.Object: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)> ==> <java.net.InetAddress: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)> ==> <java.net.URI: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)> ==> <java.lang.String: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)> ==> <java.net.Proxy: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)> ==> <java.lang.Package: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)> ==> <java.io.ObjectStreamField: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)> ==> <java.net.NetworkInterface: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)> ==> <org.apache.commons.io.FileDeleteStrategy: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)> ==> <org.apache.commons.io.IOCase: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)> ==> <java.lang.Class: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)> ==> <java.lang.Character: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)> ==> <java.io.ObjectStreamClass: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)> ==> <java.lang.StackTraceElement: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)> ==> <java.lang.Character$Subset: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)> ==> <java.nio.charset.CoderResult: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)> ==> <java.lang.Throwable: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)> ==> <java.util.Locale: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)> ==> <java.nio.ByteOrder: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)> ==> <java.lang.Thread: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)> ==> <java.net.URL: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)> ==> <java.lang.Boolean: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)> ==> <java.security.CodeSigner: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)> ==> <java.security.Timestamp: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)> ==> <java.lang.ThreadGroup: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)> ==> <java.nio.channels.FileChannel$MapMode: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)> ==> <java.io.FileDescriptor: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)> ==> <java.io.File: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)> ==> <java.nio.charset.CodingErrorAction: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)> ==> <java.util.Date: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)> ==> <java.lang.reflect.Method: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)> ==> <java.lang.reflect.Field: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)> ==> <java.lang.reflect.Constructor: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)> ==> <org.apache.commons.io.output.ByteArrayOutputStream: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)> ==> <java.lang.Enum: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)> ==> <java.io.StringWriter: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)> ==> <java.io.CharArrayWriter: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)> ==> <java.lang.Short: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)> ==> <java.lang.Byte: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)> ==> <java.lang.Long: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)> ==> <java.lang.Double: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)> ==> <java.lang.Float: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)> ==> <java.lang.Integer: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)> ==> <java.util.Hashtable: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)> ==> <java.util.AbstractCollection: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)> ==> <java.util.Vector: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.String: byte[] getBytes()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)> ==> <java.lang.String: byte[] getBytes()>
VIRTUAL edge: virtualinvoke r3.<java.io.OutputStream: void write(byte[])>($r6) in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)> ==> <java.io.OutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r3.<java.io.OutputStream: void write(byte[])>($r6) in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)> ==> <org.apache.commons.io.output.CountingOutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r3.<java.io.OutputStream: void write(byte[])>($r6) in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)> ==> <org.apache.commons.io.output.NullOutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r3.<java.io.OutputStream: void write(byte[])>($r6) in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)> ==> <org.apache.commons.io.output.ThresholdingOutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r3.<java.io.OutputStream: void write(byte[])>($r6) in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)> ==> <org.apache.commons.io.output.ProxyOutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r3.<java.io.OutputStream: void write(byte[])>($r6) in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)> ==> <org.apache.commons.io.output.TeeOutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r3.<java.io.OutputStream: void write(byte[])>($r4) in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)> ==> <java.io.OutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r3.<java.io.OutputStream: void write(byte[])>($r4) in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)> ==> <org.apache.commons.io.output.CountingOutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r3.<java.io.OutputStream: void write(byte[])>($r4) in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)> ==> <org.apache.commons.io.output.NullOutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r3.<java.io.OutputStream: void write(byte[])>($r4) in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)> ==> <org.apache.commons.io.output.ThresholdingOutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r3.<java.io.OutputStream: void write(byte[])>($r4) in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)> ==> <org.apache.commons.io.output.ProxyOutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r3.<java.io.OutputStream: void write(byte[])>($r4) in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)> ==> <org.apache.commons.io.output.TeeOutputStream: void write(byte[])>
VIRTUAL edge: $r4 = virtualinvoke r7.<java.lang.String: byte[] getBytes()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)> ==> <java.lang.String: byte[] getBytes()>
INTERFACE edge: r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)> ==> <java.util.AbstractList: java.util.Iterator iterator()>
INTERFACE edge: r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)> ==> <org.apache.commons.io.LineIterator: boolean hasNext()>
INTERFACE edge: r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)> ==> <org.apache.commons.io.LineIterator: java.lang.Object next()>
VIRTUAL edge: $r6 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)> ==> <java.lang.Throwable: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)> ==> <java.lang.Object: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)> ==> <java.lang.ThreadGroup: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)> ==> <java.lang.Integer: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)> ==> <java.util.Vector: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)> ==> <java.net.Proxy: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)> ==> <java.lang.Long: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)> ==> <java.lang.Thread: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)> ==> <java.io.ObjectStreamField: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)> ==> <java.net.NetworkInterface: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)> ==> <org.apache.commons.io.output.ByteArrayOutputStream: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)> ==> <java.nio.ByteOrder: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)> ==> <java.lang.reflect.Constructor: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)> ==> <java.lang.StackTraceElement: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)> ==> <java.lang.reflect.Field: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)> ==> <java.util.Date: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)> ==> <java.lang.Character$Subset: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)> ==> <java.util.Locale: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)> ==> <java.lang.Short: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)> ==> <java.lang.reflect.Method: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)> ==> <java.lang.Enum: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)> ==> <java.nio.charset.CodingErrorAction: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)> ==> <java.lang.Boolean: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)> ==> <java.util.AbstractCollection: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)> ==> <java.lang.Package: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)> ==> <java.lang.Class: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)> ==> <java.lang.Float: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)> ==> <java.nio.channels.FileChannel$MapMode: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)> ==> <java.net.InetAddress: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)> ==> <java.lang.Character: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)> ==> <java.lang.Double: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)> ==> <java.lang.String: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)> ==> <java.util.Hashtable: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)> ==> <java.io.StringWriter: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)> ==> <java.io.File: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)> ==> <java.net.URL: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)> ==> <java.net.URI: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)> ==> <java.lang.Byte: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)> ==> <java.io.CharArrayWriter: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)> ==> <org.apache.commons.io.IOCase: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)> ==> <org.apache.commons.io.FileDeleteStrategy: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)> ==> <java.io.ObjectStreamClass: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)> ==> <java.security.CodeSigner: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)> ==> <java.nio.charset.CoderResult: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)> ==> <java.io.FileDescriptor: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)> ==> <java.security.Timestamp: java.lang.String toString()>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.String: byte[] getBytes(java.lang.String)>(r0) in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)> ==> <java.lang.String: byte[] getBytes(java.lang.String)>
VIRTUAL edge: virtualinvoke r4.<java.io.OutputStream: void write(byte[])>($r7) in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)> ==> <java.io.OutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r4.<java.io.OutputStream: void write(byte[])>($r7) in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)> ==> <org.apache.commons.io.output.CountingOutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r4.<java.io.OutputStream: void write(byte[])>($r7) in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)> ==> <org.apache.commons.io.output.NullOutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r4.<java.io.OutputStream: void write(byte[])>($r7) in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)> ==> <org.apache.commons.io.output.ThresholdingOutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r4.<java.io.OutputStream: void write(byte[])>($r7) in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)> ==> <org.apache.commons.io.output.ProxyOutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r4.<java.io.OutputStream: void write(byte[])>($r7) in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)> ==> <org.apache.commons.io.output.TeeOutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r4.<java.io.OutputStream: void write(byte[])>($r5) in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)> ==> <java.io.OutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r4.<java.io.OutputStream: void write(byte[])>($r5) in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)> ==> <org.apache.commons.io.output.CountingOutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r4.<java.io.OutputStream: void write(byte[])>($r5) in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)> ==> <org.apache.commons.io.output.NullOutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r4.<java.io.OutputStream: void write(byte[])>($r5) in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)> ==> <org.apache.commons.io.output.ThresholdingOutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r4.<java.io.OutputStream: void write(byte[])>($r5) in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)> ==> <org.apache.commons.io.output.ProxyOutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r4.<java.io.OutputStream: void write(byte[])>($r5) in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)> ==> <org.apache.commons.io.output.TeeOutputStream: void write(byte[])>
VIRTUAL edge: $r5 = virtualinvoke r8.<java.lang.String: byte[] getBytes(java.lang.String)>(r0) in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)> ==> <java.lang.String: byte[] getBytes(java.lang.String)>
INTERFACE edge: r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.Writer)> ==> <java.util.AbstractList: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.Writer)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.Writer)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.Writer)> ==> <org.apache.commons.io.LineIterator: boolean hasNext()>
INTERFACE edge: r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.Writer)> ==> <org.apache.commons.io.LineIterator: java.lang.Object next()>
VIRTUAL edge: $r4 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.Writer)> ==> <java.lang.Throwable: java.lang.String toString()>
VIRTUAL edge: $r4 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.Writer)> ==> <java.lang.Object: java.lang.String toString()>
VIRTUAL edge: $r4 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.Writer)> ==> <java.lang.ThreadGroup: java.lang.String toString()>
VIRTUAL edge: $r4 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.Writer)> ==> <java.lang.Integer: java.lang.String toString()>
VIRTUAL edge: $r4 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.Writer)> ==> <java.util.Vector: java.lang.String toString()>
VIRTUAL edge: $r4 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.Writer)> ==> <java.net.Proxy: java.lang.String toString()>
VIRTUAL edge: $r4 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.Writer)> ==> <java.lang.Long: java.lang.String toString()>
VIRTUAL edge: $r4 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.Writer)> ==> <java.lang.Thread: java.lang.String toString()>
VIRTUAL edge: $r4 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.Writer)> ==> <java.io.ObjectStreamField: java.lang.String toString()>
VIRTUAL edge: $r4 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.Writer)> ==> <java.net.NetworkInterface: java.lang.String toString()>
VIRTUAL edge: $r4 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.Writer)> ==> <org.apache.commons.io.output.ByteArrayOutputStream: java.lang.String toString()>
VIRTUAL edge: $r4 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.Writer)> ==> <java.nio.ByteOrder: java.lang.String toString()>
VIRTUAL edge: $r4 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.Writer)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r4 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.Writer)> ==> <java.lang.reflect.Constructor: java.lang.String toString()>
VIRTUAL edge: $r4 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.Writer)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: $r4 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.Writer)> ==> <java.lang.StackTraceElement: java.lang.String toString()>
VIRTUAL edge: $r4 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.Writer)> ==> <java.lang.reflect.Field: java.lang.String toString()>
VIRTUAL edge: $r4 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.Writer)> ==> <java.util.Date: java.lang.String toString()>
VIRTUAL edge: $r4 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.Writer)> ==> <java.lang.Character$Subset: java.lang.String toString()>
VIRTUAL edge: $r4 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.Writer)> ==> <java.util.Locale: java.lang.String toString()>
VIRTUAL edge: $r4 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.Writer)> ==> <java.lang.Short: java.lang.String toString()>
VIRTUAL edge: $r4 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.Writer)> ==> <java.lang.reflect.Method: java.lang.String toString()>
VIRTUAL edge: $r4 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.Writer)> ==> <java.lang.Enum: java.lang.String toString()>
VIRTUAL edge: $r4 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.Writer)> ==> <java.nio.charset.CodingErrorAction: java.lang.String toString()>
VIRTUAL edge: $r4 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.Writer)> ==> <java.lang.Boolean: java.lang.String toString()>
VIRTUAL edge: $r4 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.Writer)> ==> <java.util.AbstractCollection: java.lang.String toString()>
VIRTUAL edge: $r4 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.Writer)> ==> <java.lang.Package: java.lang.String toString()>
VIRTUAL edge: $r4 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.Writer)> ==> <java.lang.Class: java.lang.String toString()>
VIRTUAL edge: $r4 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.Writer)> ==> <java.lang.Float: java.lang.String toString()>
VIRTUAL edge: $r4 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.Writer)> ==> <java.nio.channels.FileChannel$MapMode: java.lang.String toString()>
VIRTUAL edge: $r4 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.Writer)> ==> <java.net.InetAddress: java.lang.String toString()>
VIRTUAL edge: $r4 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.Writer)> ==> <java.lang.Character: java.lang.String toString()>
VIRTUAL edge: $r4 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.Writer)> ==> <java.lang.Double: java.lang.String toString()>
VIRTUAL edge: $r4 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.Writer)> ==> <java.lang.String: java.lang.String toString()>
VIRTUAL edge: $r4 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.Writer)> ==> <java.util.Hashtable: java.lang.String toString()>
VIRTUAL edge: $r4 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.Writer)> ==> <java.io.StringWriter: java.lang.String toString()>
VIRTUAL edge: $r4 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.Writer)> ==> <java.io.File: java.lang.String toString()>
VIRTUAL edge: $r4 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.Writer)> ==> <java.net.URL: java.lang.String toString()>
VIRTUAL edge: $r4 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.Writer)> ==> <java.net.URI: java.lang.String toString()>
VIRTUAL edge: $r4 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.Writer)> ==> <java.lang.Byte: java.lang.String toString()>
VIRTUAL edge: $r4 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.Writer)> ==> <java.io.CharArrayWriter: java.lang.String toString()>
VIRTUAL edge: $r4 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.Writer)> ==> <org.apache.commons.io.IOCase: java.lang.String toString()>
VIRTUAL edge: $r4 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.Writer)> ==> <org.apache.commons.io.FileDeleteStrategy: java.lang.String toString()>
VIRTUAL edge: $r4 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.Writer)> ==> <java.io.ObjectStreamClass: java.lang.String toString()>
VIRTUAL edge: $r4 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.Writer)> ==> <java.security.CodeSigner: java.lang.String toString()>
VIRTUAL edge: $r4 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.Writer)> ==> <java.nio.charset.CoderResult: java.lang.String toString()>
VIRTUAL edge: $r4 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.Writer)> ==> <java.io.FileDescriptor: java.lang.String toString()>
VIRTUAL edge: $r4 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.Writer)> ==> <java.security.Timestamp: java.lang.String toString()>
VIRTUAL edge: virtualinvoke r3.<java.io.Writer: void write(java.lang.String)>($r4) in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.Writer)> ==> <java.io.PrintWriter: void write(java.lang.String)>
VIRTUAL edge: virtualinvoke r3.<java.io.Writer: void write(java.lang.String)>($r4) in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.Writer)> ==> <org.apache.commons.io.output.ProxyWriter: void write(java.lang.String)>
VIRTUAL edge: virtualinvoke r3.<java.io.Writer: void write(java.lang.String)>($r4) in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.Writer)> ==> <org.apache.commons.io.output.NullWriter: void write(java.lang.String)>
VIRTUAL edge: virtualinvoke r3.<java.io.Writer: void write(java.lang.String)>($r4) in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.Writer)> ==> <java.io.StringWriter: void write(java.lang.String)>
VIRTUAL edge: virtualinvoke r3.<java.io.Writer: void write(java.lang.String)>($r4) in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.Writer)> ==> <java.io.Writer: void write(java.lang.String)>
VIRTUAL edge: virtualinvoke r3.<java.io.Writer: void write(java.lang.String)>($r4) in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.Writer)> ==> <org.apache.commons.io.output.LockableFileWriter: void write(java.lang.String)>
VIRTUAL edge: virtualinvoke r3.<java.io.Writer: void write(java.lang.String)>(r5) in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.Writer)> ==> <java.io.PrintWriter: void write(java.lang.String)>
VIRTUAL edge: virtualinvoke r3.<java.io.Writer: void write(java.lang.String)>(r5) in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.Writer)> ==> <org.apache.commons.io.output.ProxyWriter: void write(java.lang.String)>
VIRTUAL edge: virtualinvoke r3.<java.io.Writer: void write(java.lang.String)>(r5) in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.Writer)> ==> <org.apache.commons.io.output.NullWriter: void write(java.lang.String)>
VIRTUAL edge: virtualinvoke r3.<java.io.Writer: void write(java.lang.String)>(r5) in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.Writer)> ==> <java.io.StringWriter: void write(java.lang.String)>
VIRTUAL edge: virtualinvoke r3.<java.io.Writer: void write(java.lang.String)>(r5) in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.Writer)> ==> <java.io.Writer: void write(java.lang.String)>
VIRTUAL edge: virtualinvoke r3.<java.io.Writer: void write(java.lang.String)>(r5) in <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.Writer)> ==> <org.apache.commons.io.output.LockableFileWriter: void write(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r1.<java.io.InputStream: int read(byte[])>(r0) in <org.apache.commons.io.IOUtils: long copyLarge(java.io.InputStream,java.io.OutputStream)> ==> <java.io.InputStream: int read(byte[])>
VIRTUAL edge: $i0 = virtualinvoke r1.<java.io.InputStream: int read(byte[])>(r0) in <org.apache.commons.io.IOUtils: long copyLarge(java.io.InputStream,java.io.OutputStream)> ==> <org.apache.commons.io.input.ProxyInputStream: int read(byte[])>
VIRTUAL edge: $i0 = virtualinvoke r1.<java.io.InputStream: int read(byte[])>(r0) in <org.apache.commons.io.IOUtils: long copyLarge(java.io.InputStream,java.io.OutputStream)> ==> <org.apache.commons.io.input.CountingInputStream: int read(byte[])>
VIRTUAL edge: $i0 = virtualinvoke r1.<java.io.InputStream: int read(byte[])>(r0) in <org.apache.commons.io.IOUtils: long copyLarge(java.io.InputStream,java.io.OutputStream)> ==> <org.apache.commons.io.input.NullInputStream: int read(byte[])>
VIRTUAL edge: virtualinvoke r2.<java.io.OutputStream: void write(byte[],int,int)>(r0, 0, $i0) in <org.apache.commons.io.IOUtils: long copyLarge(java.io.InputStream,java.io.OutputStream)> ==> <java.io.OutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r2.<java.io.OutputStream: void write(byte[],int,int)>(r0, 0, $i0) in <org.apache.commons.io.IOUtils: long copyLarge(java.io.InputStream,java.io.OutputStream)> ==> <java.io.PrintStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r2.<java.io.OutputStream: void write(byte[],int,int)>(r0, 0, $i0) in <org.apache.commons.io.IOUtils: long copyLarge(java.io.InputStream,java.io.OutputStream)> ==> <org.apache.commons.io.output.CountingOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r2.<java.io.OutputStream: void write(byte[],int,int)>(r0, 0, $i0) in <org.apache.commons.io.IOUtils: long copyLarge(java.io.InputStream,java.io.OutputStream)> ==> <org.apache.commons.io.output.NullOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r2.<java.io.OutputStream: void write(byte[],int,int)>(r0, 0, $i0) in <org.apache.commons.io.IOUtils: long copyLarge(java.io.InputStream,java.io.OutputStream)> ==> <org.apache.commons.io.output.ThresholdingOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r2.<java.io.OutputStream: void write(byte[],int,int)>(r0, 0, $i0) in <org.apache.commons.io.IOUtils: long copyLarge(java.io.InputStream,java.io.OutputStream)> ==> <org.apache.commons.io.output.ByteArrayOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r2.<java.io.OutputStream: void write(byte[],int,int)>(r0, 0, $i0) in <org.apache.commons.io.IOUtils: long copyLarge(java.io.InputStream,java.io.OutputStream)> ==> <java.io.FileOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r2.<java.io.OutputStream: void write(byte[],int,int)>(r0, 0, $i0) in <org.apache.commons.io.IOUtils: long copyLarge(java.io.InputStream,java.io.OutputStream)> ==> <java.io.FilterOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r2.<java.io.OutputStream: void write(byte[],int,int)>(r0, 0, $i0) in <org.apache.commons.io.IOUtils: long copyLarge(java.io.InputStream,java.io.OutputStream)> ==> <org.apache.commons.io.output.ProxyOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r2.<java.io.OutputStream: void write(byte[],int,int)>(r0, 0, $i0) in <org.apache.commons.io.IOUtils: long copyLarge(java.io.InputStream,java.io.OutputStream)> ==> <org.apache.commons.io.output.TeeOutputStream: void write(byte[],int,int)>
SPECIAL edge: specialinvoke $r0.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r1) in <org.apache.commons.io.IOUtils: void copy(java.io.InputStream,java.io.Writer)> ==> <java.io.InputStreamReader: void <init>(java.io.InputStream)>
SPECIAL edge: specialinvoke $r1.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>(r2, r0) in <org.apache.commons.io.IOUtils: void copy(java.io.InputStream,java.io.Writer,java.lang.String)> ==> <java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r1.<java.io.Reader: int read(char[])>(r0) in <org.apache.commons.io.IOUtils: long copyLarge(java.io.Reader,java.io.Writer)> ==> <java.io.Reader: int read(char[])>
VIRTUAL edge: $i0 = virtualinvoke r1.<java.io.Reader: int read(char[])>(r0) in <org.apache.commons.io.IOUtils: long copyLarge(java.io.Reader,java.io.Writer)> ==> <org.apache.commons.io.input.NullReader: int read(char[])>
VIRTUAL edge: virtualinvoke r2.<java.io.Writer: void write(char[],int,int)>(r0, 0, $i0) in <org.apache.commons.io.IOUtils: long copyLarge(java.io.Reader,java.io.Writer)> ==> <java.io.PrintWriter: void write(char[],int,int)>
VIRTUAL edge: virtualinvoke r2.<java.io.Writer: void write(char[],int,int)>(r0, 0, $i0) in <org.apache.commons.io.IOUtils: long copyLarge(java.io.Reader,java.io.Writer)> ==> <org.apache.commons.io.output.ProxyWriter: void write(char[],int,int)>
VIRTUAL edge: virtualinvoke r2.<java.io.Writer: void write(char[],int,int)>(r0, 0, $i0) in <org.apache.commons.io.IOUtils: long copyLarge(java.io.Reader,java.io.Writer)> ==> <org.apache.commons.io.output.NullWriter: void write(char[],int,int)>
VIRTUAL edge: virtualinvoke r2.<java.io.Writer: void write(char[],int,int)>(r0, 0, $i0) in <org.apache.commons.io.IOUtils: long copyLarge(java.io.Reader,java.io.Writer)> ==> <java.io.StringWriter: void write(char[],int,int)>
VIRTUAL edge: virtualinvoke r2.<java.io.Writer: void write(char[],int,int)>(r0, 0, $i0) in <org.apache.commons.io.IOUtils: long copyLarge(java.io.Reader,java.io.Writer)> ==> <org.apache.commons.io.output.LockableFileWriter: void write(char[],int,int)>
VIRTUAL edge: virtualinvoke r2.<java.io.Writer: void write(char[],int,int)>(r0, 0, $i0) in <org.apache.commons.io.IOUtils: long copyLarge(java.io.Reader,java.io.Writer)> ==> <java.io.OutputStreamWriter: void write(char[],int,int)>
VIRTUAL edge: virtualinvoke r2.<java.io.Writer: void write(char[],int,int)>(r0, 0, $i0) in <org.apache.commons.io.IOUtils: long copyLarge(java.io.Reader,java.io.Writer)> ==> <java.io.CharArrayWriter: void write(char[],int,int)>
SPECIAL edge: specialinvoke $r0.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>(r1) in <org.apache.commons.io.IOUtils: void copy(java.io.Reader,java.io.OutputStream)> ==> <java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>
VIRTUAL edge: virtualinvoke $r0.<java.io.OutputStreamWriter: void flush()>() in <org.apache.commons.io.IOUtils: void copy(java.io.Reader,java.io.OutputStream)> ==> <java.io.OutputStreamWriter: void flush()>
SPECIAL edge: specialinvoke $r1.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>(r2, r0) in <org.apache.commons.io.IOUtils: void copy(java.io.Reader,java.io.OutputStream,java.lang.String)> ==> <java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStreamWriter: void flush()>() in <org.apache.commons.io.IOUtils: void copy(java.io.Reader,java.io.OutputStream,java.lang.String)> ==> <java.io.OutputStreamWriter: void flush()>
SPECIAL edge: specialinvoke $r4.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r6) in <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.InputStream,java.io.InputStream)> ==> <java.io.BufferedInputStream: void <init>(java.io.InputStream)>
SPECIAL edge: specialinvoke $r5.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r7) in <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.InputStream,java.io.InputStream)> ==> <java.io.BufferedInputStream: void <init>(java.io.InputStream)>
VIRTUAL edge: i0 = virtualinvoke $r8.<java.io.InputStream: int read()>() in <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.InputStream,java.io.InputStream)> ==> <java.io.FilterInputStream: int read()>
VIRTUAL edge: i0 = virtualinvoke $r8.<java.io.InputStream: int read()>() in <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.InputStream,java.io.InputStream)> ==> <java.util.zip.CheckedInputStream: int read()>
VIRTUAL edge: i0 = virtualinvoke $r8.<java.io.InputStream: int read()>() in <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.InputStream,java.io.InputStream)> ==> <java.io.BufferedInputStream: int read()>
VIRTUAL edge: i0 = virtualinvoke $r8.<java.io.InputStream: int read()>() in <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.InputStream,java.io.InputStream)> ==> <org.apache.commons.io.input.ProxyInputStream: int read()>
VIRTUAL edge: i0 = virtualinvoke $r8.<java.io.InputStream: int read()>() in <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.InputStream,java.io.InputStream)> ==> <java.io.ByteArrayInputStream: int read()>
VIRTUAL edge: i0 = virtualinvoke $r8.<java.io.InputStream: int read()>() in <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.InputStream,java.io.InputStream)> ==> <org.apache.commons.io.input.CountingInputStream: int read()>
VIRTUAL edge: i0 = virtualinvoke $r8.<java.io.InputStream: int read()>() in <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.InputStream,java.io.InputStream)> ==> <org.apache.commons.io.input.NullInputStream: int read()>
VIRTUAL edge: i0 = virtualinvoke $r8.<java.io.InputStream: int read()>() in <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.InputStream,java.io.InputStream)> ==> <java.io.ObjectInputStream: int read()>
VIRTUAL edge: i0 = virtualinvoke $r8.<java.io.InputStream: int read()>() in <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.InputStream,java.io.InputStream)> ==> <java.io.FileInputStream: int read()>
VIRTUAL edge: i0 = virtualinvoke $r8.<java.io.InputStream: int read()>() in <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.InputStream,java.io.InputStream)> ==> <org.apache.commons.io.input.DemuxInputStream: int read()>
VIRTUAL edge: i1 = virtualinvoke $r9.<java.io.InputStream: int read()>() in <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.InputStream,java.io.InputStream)> ==> <java.io.FilterInputStream: int read()>
VIRTUAL edge: i1 = virtualinvoke $r9.<java.io.InputStream: int read()>() in <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.InputStream,java.io.InputStream)> ==> <java.util.zip.CheckedInputStream: int read()>
VIRTUAL edge: i1 = virtualinvoke $r9.<java.io.InputStream: int read()>() in <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.InputStream,java.io.InputStream)> ==> <java.io.BufferedInputStream: int read()>
VIRTUAL edge: i1 = virtualinvoke $r9.<java.io.InputStream: int read()>() in <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.InputStream,java.io.InputStream)> ==> <org.apache.commons.io.input.ProxyInputStream: int read()>
VIRTUAL edge: i1 = virtualinvoke $r9.<java.io.InputStream: int read()>() in <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.InputStream,java.io.InputStream)> ==> <java.io.ByteArrayInputStream: int read()>
VIRTUAL edge: i1 = virtualinvoke $r9.<java.io.InputStream: int read()>() in <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.InputStream,java.io.InputStream)> ==> <org.apache.commons.io.input.CountingInputStream: int read()>
VIRTUAL edge: i1 = virtualinvoke $r9.<java.io.InputStream: int read()>() in <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.InputStream,java.io.InputStream)> ==> <org.apache.commons.io.input.NullInputStream: int read()>
VIRTUAL edge: i1 = virtualinvoke $r9.<java.io.InputStream: int read()>() in <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.InputStream,java.io.InputStream)> ==> <java.io.ObjectInputStream: int read()>
VIRTUAL edge: i1 = virtualinvoke $r9.<java.io.InputStream: int read()>() in <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.InputStream,java.io.InputStream)> ==> <java.io.FileInputStream: int read()>
VIRTUAL edge: i1 = virtualinvoke $r9.<java.io.InputStream: int read()>() in <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.InputStream,java.io.InputStream)> ==> <org.apache.commons.io.input.DemuxInputStream: int read()>
VIRTUAL edge: i0 = virtualinvoke $r10.<java.io.InputStream: int read()>() in <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.InputStream,java.io.InputStream)> ==> <java.io.FilterInputStream: int read()>
VIRTUAL edge: i0 = virtualinvoke $r10.<java.io.InputStream: int read()>() in <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.InputStream,java.io.InputStream)> ==> <java.util.zip.CheckedInputStream: int read()>
VIRTUAL edge: i0 = virtualinvoke $r10.<java.io.InputStream: int read()>() in <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.InputStream,java.io.InputStream)> ==> <java.io.BufferedInputStream: int read()>
VIRTUAL edge: i0 = virtualinvoke $r10.<java.io.InputStream: int read()>() in <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.InputStream,java.io.InputStream)> ==> <org.apache.commons.io.input.ProxyInputStream: int read()>
VIRTUAL edge: i0 = virtualinvoke $r10.<java.io.InputStream: int read()>() in <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.InputStream,java.io.InputStream)> ==> <java.io.ByteArrayInputStream: int read()>
VIRTUAL edge: i0 = virtualinvoke $r10.<java.io.InputStream: int read()>() in <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.InputStream,java.io.InputStream)> ==> <org.apache.commons.io.input.CountingInputStream: int read()>
VIRTUAL edge: i0 = virtualinvoke $r10.<java.io.InputStream: int read()>() in <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.InputStream,java.io.InputStream)> ==> <org.apache.commons.io.input.NullInputStream: int read()>
VIRTUAL edge: i0 = virtualinvoke $r10.<java.io.InputStream: int read()>() in <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.InputStream,java.io.InputStream)> ==> <java.io.ObjectInputStream: int read()>
VIRTUAL edge: i0 = virtualinvoke $r10.<java.io.InputStream: int read()>() in <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.InputStream,java.io.InputStream)> ==> <java.io.FileInputStream: int read()>
VIRTUAL edge: i0 = virtualinvoke $r10.<java.io.InputStream: int read()>() in <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.InputStream,java.io.InputStream)> ==> <org.apache.commons.io.input.DemuxInputStream: int read()>
VIRTUAL edge: i2 = virtualinvoke $r11.<java.io.InputStream: int read()>() in <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.InputStream,java.io.InputStream)> ==> <java.io.FilterInputStream: int read()>
VIRTUAL edge: i2 = virtualinvoke $r11.<java.io.InputStream: int read()>() in <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.InputStream,java.io.InputStream)> ==> <java.util.zip.CheckedInputStream: int read()>
VIRTUAL edge: i2 = virtualinvoke $r11.<java.io.InputStream: int read()>() in <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.InputStream,java.io.InputStream)> ==> <java.io.BufferedInputStream: int read()>
VIRTUAL edge: i2 = virtualinvoke $r11.<java.io.InputStream: int read()>() in <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.InputStream,java.io.InputStream)> ==> <org.apache.commons.io.input.ProxyInputStream: int read()>
VIRTUAL edge: i2 = virtualinvoke $r11.<java.io.InputStream: int read()>() in <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.InputStream,java.io.InputStream)> ==> <java.io.ByteArrayInputStream: int read()>
VIRTUAL edge: i2 = virtualinvoke $r11.<java.io.InputStream: int read()>() in <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.InputStream,java.io.InputStream)> ==> <org.apache.commons.io.input.CountingInputStream: int read()>
VIRTUAL edge: i2 = virtualinvoke $r11.<java.io.InputStream: int read()>() in <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.InputStream,java.io.InputStream)> ==> <org.apache.commons.io.input.NullInputStream: int read()>
VIRTUAL edge: i2 = virtualinvoke $r11.<java.io.InputStream: int read()>() in <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.InputStream,java.io.InputStream)> ==> <java.io.ObjectInputStream: int read()>
VIRTUAL edge: i2 = virtualinvoke $r11.<java.io.InputStream: int read()>() in <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.InputStream,java.io.InputStream)> ==> <java.io.FileInputStream: int read()>
VIRTUAL edge: i2 = virtualinvoke $r11.<java.io.InputStream: int read()>() in <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.InputStream,java.io.InputStream)> ==> <org.apache.commons.io.input.DemuxInputStream: int read()>
SPECIAL edge: specialinvoke $r4.<java.io.BufferedReader: void <init>(java.io.Reader)>($r6) in <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.Reader,java.io.Reader)> ==> <java.io.BufferedReader: void <init>(java.io.Reader)>
SPECIAL edge: specialinvoke $r5.<java.io.BufferedReader: void <init>(java.io.Reader)>($r7) in <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.Reader,java.io.Reader)> ==> <java.io.BufferedReader: void <init>(java.io.Reader)>
VIRTUAL edge: i0 = virtualinvoke $r8.<java.io.Reader: int read()>() in <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.Reader,java.io.Reader)> ==> <java.io.Reader: int read()>
VIRTUAL edge: i0 = virtualinvoke $r8.<java.io.Reader: int read()>() in <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.Reader,java.io.Reader)> ==> <java.io.BufferedReader: int read()>
VIRTUAL edge: i0 = virtualinvoke $r8.<java.io.Reader: int read()>() in <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.Reader,java.io.Reader)> ==> <java.io.StringReader: int read()>
VIRTUAL edge: i0 = virtualinvoke $r8.<java.io.Reader: int read()>() in <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.Reader,java.io.Reader)> ==> <java.io.InputStreamReader: int read()>
VIRTUAL edge: i0 = virtualinvoke $r8.<java.io.Reader: int read()>() in <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.Reader,java.io.Reader)> ==> <org.apache.commons.io.input.NullReader: int read()>
VIRTUAL edge: i1 = virtualinvoke $r9.<java.io.Reader: int read()>() in <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.Reader,java.io.Reader)> ==> <java.io.Reader: int read()>
VIRTUAL edge: i1 = virtualinvoke $r9.<java.io.Reader: int read()>() in <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.Reader,java.io.Reader)> ==> <java.io.BufferedReader: int read()>
VIRTUAL edge: i1 = virtualinvoke $r9.<java.io.Reader: int read()>() in <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.Reader,java.io.Reader)> ==> <java.io.StringReader: int read()>
VIRTUAL edge: i1 = virtualinvoke $r9.<java.io.Reader: int read()>() in <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.Reader,java.io.Reader)> ==> <java.io.InputStreamReader: int read()>
VIRTUAL edge: i1 = virtualinvoke $r9.<java.io.Reader: int read()>() in <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.Reader,java.io.Reader)> ==> <org.apache.commons.io.input.NullReader: int read()>
VIRTUAL edge: i0 = virtualinvoke $r10.<java.io.Reader: int read()>() in <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.Reader,java.io.Reader)> ==> <java.io.Reader: int read()>
VIRTUAL edge: i0 = virtualinvoke $r10.<java.io.Reader: int read()>() in <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.Reader,java.io.Reader)> ==> <java.io.BufferedReader: int read()>
VIRTUAL edge: i0 = virtualinvoke $r10.<java.io.Reader: int read()>() in <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.Reader,java.io.Reader)> ==> <java.io.StringReader: int read()>
VIRTUAL edge: i0 = virtualinvoke $r10.<java.io.Reader: int read()>() in <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.Reader,java.io.Reader)> ==> <java.io.InputStreamReader: int read()>
VIRTUAL edge: i0 = virtualinvoke $r10.<java.io.Reader: int read()>() in <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.Reader,java.io.Reader)> ==> <org.apache.commons.io.input.NullReader: int read()>
VIRTUAL edge: i2 = virtualinvoke $r11.<java.io.Reader: int read()>() in <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.Reader,java.io.Reader)> ==> <java.io.Reader: int read()>
VIRTUAL edge: i2 = virtualinvoke $r11.<java.io.Reader: int read()>() in <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.Reader,java.io.Reader)> ==> <java.io.BufferedReader: int read()>
VIRTUAL edge: i2 = virtualinvoke $r11.<java.io.Reader: int read()>() in <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.Reader,java.io.Reader)> ==> <java.io.StringReader: int read()>
VIRTUAL edge: i2 = virtualinvoke $r11.<java.io.Reader: int read()>() in <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.Reader,java.io.Reader)> ==> <java.io.InputStreamReader: int read()>
VIRTUAL edge: i2 = virtualinvoke $r11.<java.io.Reader: int read()>() in <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.Reader,java.io.Reader)> ==> <org.apache.commons.io.input.NullReader: int read()>
SPECIAL edge: specialinvoke r0.<java.io.OutputStream: void <init>()>() in <org.apache.commons.io.output.NullOutputStream: void <init>()> ==> <java.io.OutputStream: void <init>()>
SPECIAL edge: specialinvoke r0.<org.apache.commons.io.output.ByteArrayOutputStream: void <init>(int)>(1024) in <org.apache.commons.io.output.ByteArrayOutputStream: void <init>()> ==> <org.apache.commons.io.output.ByteArrayOutputStream: void <init>(int)>
SPECIAL edge: specialinvoke r0.<java.io.OutputStream: void <init>()>() in <org.apache.commons.io.output.ByteArrayOutputStream: void <init>(int)> ==> <java.io.OutputStream: void <init>()>
SPECIAL edge: specialinvoke r0.<org.apache.commons.io.output.ByteArrayOutputStream: void needNewBuffer(int)>(i0) in <org.apache.commons.io.output.ByteArrayOutputStream: void <init>(int)> ==> <org.apache.commons.io.output.ByteArrayOutputStream: void needNewBuffer(int)>
SPECIAL edge: specialinvoke $r1.<java.util.ArrayList: void <init>()>() in <org.apache.commons.io.output.ByteArrayOutputStream: void <init>(int)> ==> <java.util.ArrayList: void <init>()>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.output.ByteArrayOutputStream: void <init>(int)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Negative initial size: ") in <org.apache.commons.io.output.ByteArrayOutputStream: void <init>(int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0) in <org.apache.commons.io.output.ByteArrayOutputStream: void <init>(int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(int)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.output.ByteArrayOutputStream: void <init>(int)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6) in <org.apache.commons.io.output.ByteArrayOutputStream: void <init>(int)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
STATIC edge: i19 = staticinvoke <java.lang.Math: int max(int,int)>($i7, $i6) in <org.apache.commons.io.output.ByteArrayOutputStream: void needNewBuffer(int)> ==> <java.lang.Math: int max(int,int)>
SPECIAL edge: specialinvoke $r8.<java.lang.IndexOutOfBoundsException: void <init>()>() in <org.apache.commons.io.output.ByteArrayOutputStream: void write(byte[],int,int)> ==> <java.lang.IndexOutOfBoundsException: void <init>()>
SPECIAL edge: specialinvoke r1.<org.apache.commons.io.output.ByteArrayOutputStream: void needNewBuffer(int)>(i7) in <org.apache.commons.io.output.ByteArrayOutputStream: void write(byte[],int,int)> ==> <org.apache.commons.io.output.ByteArrayOutputStream: void needNewBuffer(int)>
SPECIAL edge: specialinvoke r0.<org.apache.commons.io.output.ByteArrayOutputStream: void needNewBuffer(int)>($i8) in <org.apache.commons.io.output.ByteArrayOutputStream: void write(int)> ==> <org.apache.commons.io.output.ByteArrayOutputStream: void needNewBuffer(int)>
SPECIAL edge: $r1 = specialinvoke r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] getBuffer(int)>($i0) in <org.apache.commons.io.output.ByteArrayOutputStream: void reset()> ==> <org.apache.commons.io.output.ByteArrayOutputStream: byte[] getBuffer(int)>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.List: int size()>() in <org.apache.commons.io.output.ByteArrayOutputStream: void writeTo(java.io.OutputStream)> ==> <java.util.Vector: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.List: int size()>() in <org.apache.commons.io.output.ByteArrayOutputStream: void writeTo(java.io.OutputStream)> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.List: int size()>() in <org.apache.commons.io.output.ByteArrayOutputStream: void writeTo(java.io.OutputStream)> ==> <java.util.ArrayList: int size()>
SPECIAL edge: r2 = specialinvoke r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] getBuffer(int)>(i4) in <org.apache.commons.io.output.ByteArrayOutputStream: void writeTo(java.io.OutputStream)> ==> <org.apache.commons.io.output.ByteArrayOutputStream: byte[] getBuffer(int)>
VIRTUAL edge: virtualinvoke r3.<java.io.OutputStream: void write(byte[],int,int)>(r2, 0, i2) in <org.apache.commons.io.output.ByteArrayOutputStream: void writeTo(java.io.OutputStream)> ==> <java.io.OutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r3.<java.io.OutputStream: void write(byte[],int,int)>(r2, 0, i2) in <org.apache.commons.io.output.ByteArrayOutputStream: void writeTo(java.io.OutputStream)> ==> <java.io.PrintStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r3.<java.io.OutputStream: void write(byte[],int,int)>(r2, 0, i2) in <org.apache.commons.io.output.ByteArrayOutputStream: void writeTo(java.io.OutputStream)> ==> <org.apache.commons.io.output.CountingOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r3.<java.io.OutputStream: void write(byte[],int,int)>(r2, 0, i2) in <org.apache.commons.io.output.ByteArrayOutputStream: void writeTo(java.io.OutputStream)> ==> <org.apache.commons.io.output.NullOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r3.<java.io.OutputStream: void write(byte[],int,int)>(r2, 0, i2) in <org.apache.commons.io.output.ByteArrayOutputStream: void writeTo(java.io.OutputStream)> ==> <org.apache.commons.io.output.ThresholdingOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r3.<java.io.OutputStream: void write(byte[],int,int)>(r2, 0, i2) in <org.apache.commons.io.output.ByteArrayOutputStream: void writeTo(java.io.OutputStream)> ==> <org.apache.commons.io.output.ByteArrayOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r3.<java.io.OutputStream: void write(byte[],int,int)>(r2, 0, i2) in <org.apache.commons.io.output.ByteArrayOutputStream: void writeTo(java.io.OutputStream)> ==> <java.io.FileOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r3.<java.io.OutputStream: void write(byte[],int,int)>(r2, 0, i2) in <org.apache.commons.io.output.ByteArrayOutputStream: void writeTo(java.io.OutputStream)> ==> <java.io.FilterOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r3.<java.io.OutputStream: void write(byte[],int,int)>(r2, 0, i2) in <org.apache.commons.io.output.ByteArrayOutputStream: void writeTo(java.io.OutputStream)> ==> <org.apache.commons.io.output.ProxyOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r3.<java.io.OutputStream: void write(byte[],int,int)>(r2, 0, i2) in <org.apache.commons.io.output.ByteArrayOutputStream: void writeTo(java.io.OutputStream)> ==> <org.apache.commons.io.output.TeeOutputStream: void write(byte[],int,int)>
INTERFACE edge: $i0 = interfaceinvoke $r2.<java.util.List: int size()>() in <org.apache.commons.io.output.ByteArrayOutputStream: byte[] toByteArray()> ==> <java.util.Vector: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r2.<java.util.List: int size()>() in <org.apache.commons.io.output.ByteArrayOutputStream: byte[] toByteArray()> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r2.<java.util.List: int size()>() in <org.apache.commons.io.output.ByteArrayOutputStream: byte[] toByteArray()> ==> <java.util.ArrayList: int size()>
SPECIAL edge: r3 = specialinvoke r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] getBuffer(int)>(i5) in <org.apache.commons.io.output.ByteArrayOutputStream: byte[] toByteArray()> ==> <org.apache.commons.io.output.ByteArrayOutputStream: byte[] getBuffer(int)>
VIRTUAL edge: $r2 = virtualinvoke r1.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] toByteArray()>() in <org.apache.commons.io.output.ByteArrayOutputStream: java.lang.String toString()> ==> <org.apache.commons.io.output.ByteArrayOutputStream: byte[] toByteArray()>
SPECIAL edge: specialinvoke $r0.<java.lang.String: void <init>(byte[])>($r2) in <org.apache.commons.io.output.ByteArrayOutputStream: java.lang.String toString()> ==> <java.lang.String: void <init>(byte[])>
VIRTUAL edge: $r2 = virtualinvoke r1.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] toByteArray()>() in <org.apache.commons.io.output.ByteArrayOutputStream: java.lang.String toString(java.lang.String)> ==> <org.apache.commons.io.output.ByteArrayOutputStream: byte[] toByteArray()>
SPECIAL edge: specialinvoke $r0.<java.lang.String: void <init>(byte[],java.lang.String)>($r2, r3) in <org.apache.commons.io.output.ByteArrayOutputStream: java.lang.String toString(java.lang.String)> ==> <java.lang.String: void <init>(byte[],java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.apache.commons.io.EndianUtils: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b3) in <org.apache.commons.io.EndianUtils: void writeSwappedShort(java.io.OutputStream,short)> ==> <java.io.PrintStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b3) in <org.apache.commons.io.EndianUtils: void writeSwappedShort(java.io.OutputStream,short)> ==> <org.apache.commons.io.output.CountingOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b3) in <org.apache.commons.io.EndianUtils: void writeSwappedShort(java.io.OutputStream,short)> ==> <org.apache.commons.io.output.NullOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b3) in <org.apache.commons.io.EndianUtils: void writeSwappedShort(java.io.OutputStream,short)> ==> <org.apache.commons.io.output.ThresholdingOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b3) in <org.apache.commons.io.EndianUtils: void writeSwappedShort(java.io.OutputStream,short)> ==> <org.apache.commons.io.output.ByteArrayOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b3) in <org.apache.commons.io.EndianUtils: void writeSwappedShort(java.io.OutputStream,short)> ==> <java.io.FileOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b3) in <org.apache.commons.io.EndianUtils: void writeSwappedShort(java.io.OutputStream,short)> ==> <java.io.FilterOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b3) in <org.apache.commons.io.EndianUtils: void writeSwappedShort(java.io.OutputStream,short)> ==> <org.apache.commons.io.output.DemuxOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b3) in <org.apache.commons.io.EndianUtils: void writeSwappedShort(java.io.OutputStream,short)> ==> <org.apache.commons.io.output.ProxyOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b3) in <org.apache.commons.io.EndianUtils: void writeSwappedShort(java.io.OutputStream,short)> ==> <org.apache.commons.io.output.TeeOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b6) in <org.apache.commons.io.EndianUtils: void writeSwappedShort(java.io.OutputStream,short)> ==> <java.io.PrintStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b6) in <org.apache.commons.io.EndianUtils: void writeSwappedShort(java.io.OutputStream,short)> ==> <org.apache.commons.io.output.CountingOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b6) in <org.apache.commons.io.EndianUtils: void writeSwappedShort(java.io.OutputStream,short)> ==> <org.apache.commons.io.output.NullOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b6) in <org.apache.commons.io.EndianUtils: void writeSwappedShort(java.io.OutputStream,short)> ==> <org.apache.commons.io.output.ThresholdingOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b6) in <org.apache.commons.io.EndianUtils: void writeSwappedShort(java.io.OutputStream,short)> ==> <org.apache.commons.io.output.ByteArrayOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b6) in <org.apache.commons.io.EndianUtils: void writeSwappedShort(java.io.OutputStream,short)> ==> <java.io.FileOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b6) in <org.apache.commons.io.EndianUtils: void writeSwappedShort(java.io.OutputStream,short)> ==> <java.io.FilterOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b6) in <org.apache.commons.io.EndianUtils: void writeSwappedShort(java.io.OutputStream,short)> ==> <org.apache.commons.io.output.DemuxOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b6) in <org.apache.commons.io.EndianUtils: void writeSwappedShort(java.io.OutputStream,short)> ==> <org.apache.commons.io.output.ProxyOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b6) in <org.apache.commons.io.EndianUtils: void writeSwappedShort(java.io.OutputStream,short)> ==> <org.apache.commons.io.output.TeeOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b3) in <org.apache.commons.io.EndianUtils: void writeSwappedInteger(java.io.OutputStream,int)> ==> <java.io.PrintStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b3) in <org.apache.commons.io.EndianUtils: void writeSwappedInteger(java.io.OutputStream,int)> ==> <org.apache.commons.io.output.CountingOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b3) in <org.apache.commons.io.EndianUtils: void writeSwappedInteger(java.io.OutputStream,int)> ==> <org.apache.commons.io.output.NullOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b3) in <org.apache.commons.io.EndianUtils: void writeSwappedInteger(java.io.OutputStream,int)> ==> <org.apache.commons.io.output.ThresholdingOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b3) in <org.apache.commons.io.EndianUtils: void writeSwappedInteger(java.io.OutputStream,int)> ==> <org.apache.commons.io.output.ByteArrayOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b3) in <org.apache.commons.io.EndianUtils: void writeSwappedInteger(java.io.OutputStream,int)> ==> <java.io.FileOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b3) in <org.apache.commons.io.EndianUtils: void writeSwappedInteger(java.io.OutputStream,int)> ==> <java.io.FilterOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b3) in <org.apache.commons.io.EndianUtils: void writeSwappedInteger(java.io.OutputStream,int)> ==> <org.apache.commons.io.output.DemuxOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b3) in <org.apache.commons.io.EndianUtils: void writeSwappedInteger(java.io.OutputStream,int)> ==> <org.apache.commons.io.output.ProxyOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b3) in <org.apache.commons.io.EndianUtils: void writeSwappedInteger(java.io.OutputStream,int)> ==> <org.apache.commons.io.output.TeeOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b6) in <org.apache.commons.io.EndianUtils: void writeSwappedInteger(java.io.OutputStream,int)> ==> <java.io.PrintStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b6) in <org.apache.commons.io.EndianUtils: void writeSwappedInteger(java.io.OutputStream,int)> ==> <org.apache.commons.io.output.CountingOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b6) in <org.apache.commons.io.EndianUtils: void writeSwappedInteger(java.io.OutputStream,int)> ==> <org.apache.commons.io.output.NullOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b6) in <org.apache.commons.io.EndianUtils: void writeSwappedInteger(java.io.OutputStream,int)> ==> <org.apache.commons.io.output.ThresholdingOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b6) in <org.apache.commons.io.EndianUtils: void writeSwappedInteger(java.io.OutputStream,int)> ==> <org.apache.commons.io.output.ByteArrayOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b6) in <org.apache.commons.io.EndianUtils: void writeSwappedInteger(java.io.OutputStream,int)> ==> <java.io.FileOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b6) in <org.apache.commons.io.EndianUtils: void writeSwappedInteger(java.io.OutputStream,int)> ==> <java.io.FilterOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b6) in <org.apache.commons.io.EndianUtils: void writeSwappedInteger(java.io.OutputStream,int)> ==> <org.apache.commons.io.output.DemuxOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b6) in <org.apache.commons.io.EndianUtils: void writeSwappedInteger(java.io.OutputStream,int)> ==> <org.apache.commons.io.output.ProxyOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b6) in <org.apache.commons.io.EndianUtils: void writeSwappedInteger(java.io.OutputStream,int)> ==> <org.apache.commons.io.output.TeeOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b9) in <org.apache.commons.io.EndianUtils: void writeSwappedInteger(java.io.OutputStream,int)> ==> <java.io.PrintStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b9) in <org.apache.commons.io.EndianUtils: void writeSwappedInteger(java.io.OutputStream,int)> ==> <org.apache.commons.io.output.CountingOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b9) in <org.apache.commons.io.EndianUtils: void writeSwappedInteger(java.io.OutputStream,int)> ==> <org.apache.commons.io.output.NullOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b9) in <org.apache.commons.io.EndianUtils: void writeSwappedInteger(java.io.OutputStream,int)> ==> <org.apache.commons.io.output.ThresholdingOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b9) in <org.apache.commons.io.EndianUtils: void writeSwappedInteger(java.io.OutputStream,int)> ==> <org.apache.commons.io.output.ByteArrayOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b9) in <org.apache.commons.io.EndianUtils: void writeSwappedInteger(java.io.OutputStream,int)> ==> <java.io.FileOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b9) in <org.apache.commons.io.EndianUtils: void writeSwappedInteger(java.io.OutputStream,int)> ==> <java.io.FilterOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b9) in <org.apache.commons.io.EndianUtils: void writeSwappedInteger(java.io.OutputStream,int)> ==> <org.apache.commons.io.output.DemuxOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b9) in <org.apache.commons.io.EndianUtils: void writeSwappedInteger(java.io.OutputStream,int)> ==> <org.apache.commons.io.output.ProxyOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b9) in <org.apache.commons.io.EndianUtils: void writeSwappedInteger(java.io.OutputStream,int)> ==> <org.apache.commons.io.output.TeeOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b12) in <org.apache.commons.io.EndianUtils: void writeSwappedInteger(java.io.OutputStream,int)> ==> <java.io.PrintStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b12) in <org.apache.commons.io.EndianUtils: void writeSwappedInteger(java.io.OutputStream,int)> ==> <org.apache.commons.io.output.CountingOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b12) in <org.apache.commons.io.EndianUtils: void writeSwappedInteger(java.io.OutputStream,int)> ==> <org.apache.commons.io.output.NullOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b12) in <org.apache.commons.io.EndianUtils: void writeSwappedInteger(java.io.OutputStream,int)> ==> <org.apache.commons.io.output.ThresholdingOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b12) in <org.apache.commons.io.EndianUtils: void writeSwappedInteger(java.io.OutputStream,int)> ==> <org.apache.commons.io.output.ByteArrayOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b12) in <org.apache.commons.io.EndianUtils: void writeSwappedInteger(java.io.OutputStream,int)> ==> <java.io.FileOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b12) in <org.apache.commons.io.EndianUtils: void writeSwappedInteger(java.io.OutputStream,int)> ==> <java.io.FilterOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b12) in <org.apache.commons.io.EndianUtils: void writeSwappedInteger(java.io.OutputStream,int)> ==> <org.apache.commons.io.output.DemuxOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b12) in <org.apache.commons.io.EndianUtils: void writeSwappedInteger(java.io.OutputStream,int)> ==> <org.apache.commons.io.output.ProxyOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b12) in <org.apache.commons.io.EndianUtils: void writeSwappedInteger(java.io.OutputStream,int)> ==> <org.apache.commons.io.output.TeeOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b4) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <java.io.PrintStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b4) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <org.apache.commons.io.output.CountingOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b4) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <org.apache.commons.io.output.NullOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b4) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <org.apache.commons.io.output.ThresholdingOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b4) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <org.apache.commons.io.output.ByteArrayOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b4) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <java.io.FileOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b4) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <java.io.FilterOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b4) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <org.apache.commons.io.output.DemuxOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b4) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <org.apache.commons.io.output.ProxyOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b4) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <org.apache.commons.io.output.TeeOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b8) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <java.io.PrintStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b8) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <org.apache.commons.io.output.CountingOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b8) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <org.apache.commons.io.output.NullOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b8) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <org.apache.commons.io.output.ThresholdingOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b8) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <org.apache.commons.io.output.ByteArrayOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b8) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <java.io.FileOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b8) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <java.io.FilterOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b8) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <org.apache.commons.io.output.DemuxOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b8) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <org.apache.commons.io.output.ProxyOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b8) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <org.apache.commons.io.output.TeeOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b12) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <java.io.PrintStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b12) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <org.apache.commons.io.output.CountingOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b12) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <org.apache.commons.io.output.NullOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b12) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <org.apache.commons.io.output.ThresholdingOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b12) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <org.apache.commons.io.output.ByteArrayOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b12) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <java.io.FileOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b12) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <java.io.FilterOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b12) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <org.apache.commons.io.output.DemuxOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b12) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <org.apache.commons.io.output.ProxyOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b12) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <org.apache.commons.io.output.TeeOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b16) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <java.io.PrintStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b16) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <org.apache.commons.io.output.CountingOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b16) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <org.apache.commons.io.output.NullOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b16) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <org.apache.commons.io.output.ThresholdingOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b16) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <org.apache.commons.io.output.ByteArrayOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b16) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <java.io.FileOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b16) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <java.io.FilterOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b16) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <org.apache.commons.io.output.DemuxOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b16) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <org.apache.commons.io.output.ProxyOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b16) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <org.apache.commons.io.output.TeeOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b20) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <java.io.PrintStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b20) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <org.apache.commons.io.output.CountingOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b20) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <org.apache.commons.io.output.NullOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b20) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <org.apache.commons.io.output.ThresholdingOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b20) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <org.apache.commons.io.output.ByteArrayOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b20) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <java.io.FileOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b20) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <java.io.FilterOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b20) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <org.apache.commons.io.output.DemuxOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b20) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <org.apache.commons.io.output.ProxyOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b20) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <org.apache.commons.io.output.TeeOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b24) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <java.io.PrintStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b24) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <org.apache.commons.io.output.CountingOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b24) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <org.apache.commons.io.output.NullOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b24) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <org.apache.commons.io.output.ThresholdingOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b24) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <org.apache.commons.io.output.ByteArrayOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b24) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <java.io.FileOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b24) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <java.io.FilterOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b24) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <org.apache.commons.io.output.DemuxOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b24) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <org.apache.commons.io.output.ProxyOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b24) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <org.apache.commons.io.output.TeeOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b28) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <java.io.PrintStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b28) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <org.apache.commons.io.output.CountingOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b28) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <org.apache.commons.io.output.NullOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b28) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <org.apache.commons.io.output.ThresholdingOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b28) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <org.apache.commons.io.output.ByteArrayOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b28) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <java.io.FileOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b28) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <java.io.FilterOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b28) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <org.apache.commons.io.output.DemuxOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b28) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <org.apache.commons.io.output.ProxyOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b28) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <org.apache.commons.io.output.TeeOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b32) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <java.io.PrintStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b32) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <org.apache.commons.io.output.CountingOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b32) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <org.apache.commons.io.output.NullOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b32) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <org.apache.commons.io.output.ThresholdingOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b32) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <org.apache.commons.io.output.ByteArrayOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b32) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <java.io.FileOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b32) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <java.io.FilterOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b32) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <org.apache.commons.io.output.DemuxOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b32) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <org.apache.commons.io.output.ProxyOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void write(int)>($b32) in <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> ==> <org.apache.commons.io.output.TeeOutputStream: void write(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.apache.commons.io.FileCleaner: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r2.<org.apache.commons.io.FileCleaningTracker: void track(java.io.File,java.lang.Object)>(r0, r1) in <org.apache.commons.io.FileCleaner: void track(java.io.File,java.lang.Object)> ==> <org.apache.commons.io.FileCleaningTracker: void track(java.io.File,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r3.<org.apache.commons.io.FileCleaningTracker: void track(java.io.File,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)>(r0, r1, r2) in <org.apache.commons.io.FileCleaner: void track(java.io.File,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)> ==> <org.apache.commons.io.FileCleaningTracker: void track(java.io.File,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)>
VIRTUAL edge: virtualinvoke $r2.<org.apache.commons.io.FileCleaningTracker: void track(java.lang.String,java.lang.Object)>(r0, r1) in <org.apache.commons.io.FileCleaner: void track(java.lang.String,java.lang.Object)> ==> <org.apache.commons.io.FileCleaningTracker: void track(java.lang.String,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r3.<org.apache.commons.io.FileCleaningTracker: void track(java.lang.String,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)>(r0, r1, r2) in <org.apache.commons.io.FileCleaner: void track(java.lang.String,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)> ==> <org.apache.commons.io.FileCleaningTracker: void track(java.lang.String,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)>
VIRTUAL edge: $i0 = virtualinvoke $r0.<org.apache.commons.io.FileCleaningTracker: int getTrackCount()>() in <org.apache.commons.io.FileCleaner: int getTrackCount()> ==> <org.apache.commons.io.FileCleaningTracker: int getTrackCount()>
VIRTUAL edge: virtualinvoke $r0.<org.apache.commons.io.FileCleaningTracker: void exitWhenFinished()>() in <org.apache.commons.io.FileCleaner: void exitWhenFinished()> ==> <org.apache.commons.io.FileCleaningTracker: void exitWhenFinished()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.apache.commons.io.FileCleaningTracker: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.ref.ReferenceQueue: void <init>()>() in <org.apache.commons.io.FileCleaningTracker: void <init>()> ==> <java.lang.ref.ReferenceQueue: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.util.Vector: void <init>()>() in <org.apache.commons.io.FileCleaningTracker: void <init>()> ==> <java.util.Vector: void <init>()>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.io.FileCleaningTracker: void track(java.io.File,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)>(r1, r2, $r3) in <org.apache.commons.io.FileCleaningTracker: void track(java.io.File,java.lang.Object)> ==> <org.apache.commons.io.FileCleaningTracker: void track(java.io.File,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)>
SPECIAL edge: specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("The file must not be null") in <org.apache.commons.io.FileCleaningTracker: void track(java.io.File,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r0.<java.io.File: java.lang.String getPath()>() in <org.apache.commons.io.FileCleaningTracker: void track(java.io.File,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)> ==> <java.io.File: java.lang.String getPath()>
SPECIAL edge: specialinvoke r1.<org.apache.commons.io.FileCleaningTracker: void addTracker(java.lang.String,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)>($r2, r3, r4) in <org.apache.commons.io.FileCleaningTracker: void track(java.io.File,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)> ==> <org.apache.commons.io.FileCleaningTracker: void addTracker(java.lang.String,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.io.FileCleaningTracker: void track(java.lang.String,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)>(r1, r2, $r3) in <org.apache.commons.io.FileCleaningTracker: void track(java.lang.String,java.lang.Object)> ==> <org.apache.commons.io.FileCleaningTracker: void track(java.lang.String,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)>
SPECIAL edge: specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("The path must not be null") in <org.apache.commons.io.FileCleaningTracker: void track(java.lang.String,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r1.<org.apache.commons.io.FileCleaningTracker: void addTracker(java.lang.String,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)>(r0, r2, r3) in <org.apache.commons.io.FileCleaningTracker: void track(java.lang.String,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)> ==> <org.apache.commons.io.FileCleaningTracker: void addTracker(java.lang.String,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.Collection: int size()>() in <org.apache.commons.io.FileCleaningTracker: int getTrackCount()> ==> <java.util.Vector: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.Collection: int size()>() in <org.apache.commons.io.FileCleaningTracker: int getTrackCount()> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.Collection: int size()>() in <org.apache.commons.io.FileCleaningTracker: int getTrackCount()> ==> <java.util.ArrayList: int size()>
VIRTUAL edge: virtualinvoke $r4.<java.lang.Thread: void interrupt()>() in <org.apache.commons.io.FileCleaningTracker: void exitWhenFinished()> ==> <java.lang.Thread: void interrupt()>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.io.File: boolean exists()>() in <org.apache.commons.io.FileDeleteStrategy: boolean deleteQuietly(java.io.File)> ==> <java.io.File: boolean exists()>
VIRTUAL edge: $z1 = virtualinvoke r1.<org.apache.commons.io.FileDeleteStrategy: boolean doDelete(java.io.File)>(r0) in <org.apache.commons.io.FileDeleteStrategy: boolean deleteQuietly(java.io.File)> ==> <org.apache.commons.io.FileDeleteStrategy: boolean doDelete(java.io.File)>
VIRTUAL edge: $z1 = virtualinvoke r1.<org.apache.commons.io.FileDeleteStrategy: boolean doDelete(java.io.File)>(r0) in <org.apache.commons.io.FileDeleteStrategy: boolean deleteQuietly(java.io.File)> ==> <org.apache.commons.io.FileDeleteStrategy$ForceFileDeleteStrategy: boolean doDelete(java.io.File)>
CLINIT edge: staticinvoke <org.apache.commons.io.FileUtils: void forceDelete(java.io.File)>(r0) in <org.apache.commons.io.FileDeleteStrategy$ForceFileDeleteStrategy: boolean doDelete(java.io.File)> ==> <org.apache.commons.io.FileUtils: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.io.FileUtils: void forceDelete(java.io.File)>(r0) in <org.apache.commons.io.FileDeleteStrategy$ForceFileDeleteStrategy: boolean doDelete(java.io.File)> ==> <org.apache.commons.io.FileUtils: void forceDelete(java.io.File)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.io.File: boolean exists()>() in <org.apache.commons.io.FileDeleteStrategy: void delete(java.io.File)> ==> <java.io.File: boolean exists()>
VIRTUAL edge: $z1 = virtualinvoke r1.<org.apache.commons.io.FileDeleteStrategy: boolean doDelete(java.io.File)>(r0) in <org.apache.commons.io.FileDeleteStrategy: void delete(java.io.File)> ==> <org.apache.commons.io.FileDeleteStrategy: boolean doDelete(java.io.File)>
VIRTUAL edge: $z1 = virtualinvoke r1.<org.apache.commons.io.FileDeleteStrategy: boolean doDelete(java.io.File)>(r0) in <org.apache.commons.io.FileDeleteStrategy: void delete(java.io.File)> ==> <org.apache.commons.io.FileDeleteStrategy$ForceFileDeleteStrategy: boolean doDelete(java.io.File)>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.FileDeleteStrategy: void delete(java.io.File)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Deletion failed: ") in <org.apache.commons.io.FileDeleteStrategy: void delete(java.io.File)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0) in <org.apache.commons.io.FileDeleteStrategy: void delete(java.io.File)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.FileDeleteStrategy: void delete(java.io.File)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>($r6) in <org.apache.commons.io.FileDeleteStrategy: void delete(java.io.File)> ==> <java.io.IOException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.FileDeleteStrategy: java.lang.String toString()> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("FileDeleteStrategy[") in <org.apache.commons.io.FileDeleteStrategy: java.lang.String toString()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3) in <org.apache.commons.io.FileDeleteStrategy: java.lang.String toString()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]") in <org.apache.commons.io.FileDeleteStrategy: java.lang.String toString()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.FileDeleteStrategy: java.lang.String toString()> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>($r2) in <org.apache.commons.io.FileCleaningTracker$Tracker: boolean delete()> ==> <java.io.File: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<org.apache.commons.io.FileDeleteStrategy: boolean deleteQuietly(java.io.File)>($r1) in <org.apache.commons.io.FileCleaningTracker$Tracker: boolean delete()> ==> <org.apache.commons.io.FileDeleteStrategy: boolean deleteQuietly(java.io.File)>
INTERFACE edge: $i0 = interfaceinvoke $r7.<java.util.Collection: int size()>() in <org.apache.commons.io.FileCleaningTracker$Reaper: void run()> ==> <java.util.Vector: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r7.<java.util.Collection: int size()>() in <org.apache.commons.io.FileCleaningTracker$Reaper: void run()> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r7.<java.util.Collection: int size()>() in <org.apache.commons.io.FileCleaningTracker$Reaper: void run()> ==> <java.util.ArrayList: int size()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.ref.ReferenceQueue: java.lang.ref.Reference remove()>() in <org.apache.commons.io.FileCleaningTracker$Reaper: void run()> ==> <java.lang.ref.ReferenceQueue: java.lang.ref.Reference remove()>
VIRTUAL edge: virtualinvoke r10.<org.apache.commons.io.FileCleaningTracker$Tracker: boolean delete()>() in <org.apache.commons.io.FileCleaningTracker$Reaper: void run()> ==> <org.apache.commons.io.FileCleaningTracker$Tracker: boolean delete()>
VIRTUAL edge: virtualinvoke r10.<org.apache.commons.io.FileCleaningTracker$Tracker: void clear()>() in <org.apache.commons.io.FileCleaningTracker$Reaper: void run()> ==> <java.lang.ref.Reference: void clear()>
INTERFACE edge: interfaceinvoke $r5.<java.util.Collection: boolean remove(java.lang.Object)>(r10) in <org.apache.commons.io.FileCleaningTracker$Reaper: void run()> ==> <java.util.Vector: boolean remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<java.util.Collection: boolean remove(java.lang.Object)>(r10) in <org.apache.commons.io.FileCleaningTracker$Reaper: void run()> ==> <java.util.LinkedList: boolean remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<java.util.Collection: boolean remove(java.lang.Object)>(r10) in <org.apache.commons.io.FileCleaningTracker$Reaper: void run()> ==> <java.util.ArrayList: boolean remove(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.io.File: boolean canRead()>() in <org.apache.commons.io.filefilter.CanReadFileFilter: boolean accept(java.io.File)> ==> <java.io.File: boolean canRead()>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.io.File: boolean canWrite()>() in <org.apache.commons.io.filefilter.CanWriteFileFilter: boolean accept(java.io.File)> ==> <java.io.File: boolean canWrite()>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.io.File: boolean isDirectory()>() in <org.apache.commons.io.filefilter.EmptyFileFilter: boolean accept(java.io.File)> ==> <java.io.File: boolean isDirectory()>
VIRTUAL edge: r1 = virtualinvoke r0.<java.io.File: java.io.File[] listFiles()>() in <org.apache.commons.io.filefilter.EmptyFileFilter: boolean accept(java.io.File)> ==> <java.io.File: java.io.File[] listFiles()>
VIRTUAL edge: $l0 = virtualinvoke r0.<java.io.File: long length()>() in <org.apache.commons.io.filefilter.EmptyFileFilter: boolean accept(java.io.File)> ==> <java.io.File: long length()>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.io.File: boolean isHidden()>() in <org.apache.commons.io.filefilter.HiddenFileFilter: boolean accept(java.io.File)> ==> <java.io.File: boolean isHidden()>
SPECIAL edge: specialinvoke r0.<org.apache.commons.io.filefilter.WildcardFileFilter: void <init>(java.lang.String,org.apache.commons.io.IOCase)>(r1, null) in <org.apache.commons.io.filefilter.WildcardFileFilter: void <init>(java.lang.String)> ==> <org.apache.commons.io.filefilter.WildcardFileFilter: void <init>(java.lang.String,org.apache.commons.io.IOCase)>
SPECIAL edge: specialinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>() in <org.apache.commons.io.filefilter.WildcardFileFilter: void <init>(java.lang.String,org.apache.commons.io.IOCase)> ==> <org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>
SPECIAL edge: specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The wildcard must not be null") in <org.apache.commons.io.filefilter.WildcardFileFilter: void <init>(java.lang.String,org.apache.commons.io.IOCase)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<org.apache.commons.io.filefilter.WildcardFileFilter: void <init>(java.lang.String[],org.apache.commons.io.IOCase)>(r1, null) in <org.apache.commons.io.filefilter.WildcardFileFilter: void <init>(java.lang.String[])> ==> <org.apache.commons.io.filefilter.WildcardFileFilter: void <init>(java.lang.String[],org.apache.commons.io.IOCase)>
SPECIAL edge: specialinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>() in <org.apache.commons.io.filefilter.WildcardFileFilter: void <init>(java.lang.String[],org.apache.commons.io.IOCase)> ==> <org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>
SPECIAL edge: specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The wildcard array must not be null") in <org.apache.commons.io.filefilter.WildcardFileFilter: void <init>(java.lang.String[],org.apache.commons.io.IOCase)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<org.apache.commons.io.filefilter.WildcardFileFilter: void <init>(java.util.List,org.apache.commons.io.IOCase)>(r1, null) in <org.apache.commons.io.filefilter.WildcardFileFilter: void <init>(java.util.List)> ==> <org.apache.commons.io.filefilter.WildcardFileFilter: void <init>(java.util.List,org.apache.commons.io.IOCase)>
SPECIAL edge: specialinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>() in <org.apache.commons.io.filefilter.WildcardFileFilter: void <init>(java.util.List,org.apache.commons.io.IOCase)> ==> <org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>
SPECIAL edge: specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The wildcard list must not be null") in <org.apache.commons.io.filefilter.WildcardFileFilter: void <init>(java.util.List,org.apache.commons.io.IOCase)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
INTERFACE edge: $i0 = interfaceinvoke r1.<java.util.List: int size()>() in <org.apache.commons.io.filefilter.WildcardFileFilter: void <init>(java.util.List,org.apache.commons.io.IOCase)> ==> <java.util.Vector: int size()>
INTERFACE edge: $i0 = interfaceinvoke r1.<java.util.List: int size()>() in <org.apache.commons.io.filefilter.WildcardFileFilter: void <init>(java.util.List,org.apache.commons.io.IOCase)> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i0 = interfaceinvoke r1.<java.util.List: int size()>() in <org.apache.commons.io.filefilter.WildcardFileFilter: void <init>(java.util.List,org.apache.commons.io.IOCase)> ==> <java.util.ArrayList: int size()>
INTERFACE edge: $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r2) in <org.apache.commons.io.filefilter.WildcardFileFilter: void <init>(java.util.List,org.apache.commons.io.IOCase)> ==> <java.util.Vector: java.lang.Object[] toArray(java.lang.Object[])>
INTERFACE edge: $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r2) in <org.apache.commons.io.filefilter.WildcardFileFilter: void <init>(java.util.List,org.apache.commons.io.IOCase)> ==> <java.util.LinkedList: java.lang.Object[] toArray(java.lang.Object[])>
INTERFACE edge: $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r2) in <org.apache.commons.io.filefilter.WildcardFileFilter: void <init>(java.util.List,org.apache.commons.io.IOCase)> ==> <java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>
VIRTUAL edge: r1 = virtualinvoke r0.<java.io.File: java.lang.String getName()>() in <org.apache.commons.io.filefilter.WildcardFileFilter: boolean accept(java.io.File)> ==> <java.io.File: java.lang.String getName()>
SPECIAL edge: specialinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>() in <org.apache.commons.io.filefilter.WildcardFilter: void <init>(java.lang.String)> ==> <org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The wildcard must not be null") in <org.apache.commons.io.filefilter.WildcardFilter: void <init>(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>() in <org.apache.commons.io.filefilter.WildcardFilter: void <init>(java.lang.String[])> ==> <org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The wildcard array must not be null") in <org.apache.commons.io.filefilter.WildcardFilter: void <init>(java.lang.String[])> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>() in <org.apache.commons.io.filefilter.WildcardFilter: void <init>(java.util.List)> ==> <org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>
SPECIAL edge: specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The wildcard list must not be null") in <org.apache.commons.io.filefilter.WildcardFilter: void <init>(java.util.List)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
INTERFACE edge: $i0 = interfaceinvoke r1.<java.util.List: int size()>() in <org.apache.commons.io.filefilter.WildcardFilter: void <init>(java.util.List)> ==> <java.util.Vector: int size()>
INTERFACE edge: $i0 = interfaceinvoke r1.<java.util.List: int size()>() in <org.apache.commons.io.filefilter.WildcardFilter: void <init>(java.util.List)> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i0 = interfaceinvoke r1.<java.util.List: int size()>() in <org.apache.commons.io.filefilter.WildcardFilter: void <init>(java.util.List)> ==> <java.util.ArrayList: int size()>
INTERFACE edge: $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r2) in <org.apache.commons.io.filefilter.WildcardFilter: void <init>(java.util.List)> ==> <java.util.Vector: java.lang.Object[] toArray(java.lang.Object[])>
INTERFACE edge: $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r2) in <org.apache.commons.io.filefilter.WildcardFilter: void <init>(java.util.List)> ==> <java.util.LinkedList: java.lang.Object[] toArray(java.lang.Object[])>
INTERFACE edge: $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r2) in <org.apache.commons.io.filefilter.WildcardFilter: void <init>(java.util.List)> ==> <java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>
SPECIAL edge: specialinvoke $r5.<java.io.File: void <init>(java.io.File,java.lang.String)>(r0, r2) in <org.apache.commons.io.filefilter.WildcardFilter: boolean accept(java.io.File,java.lang.String)> ==> <java.io.File: void <init>(java.io.File,java.lang.String)>
VIRTUAL edge: $z1 = virtualinvoke $r5.<java.io.File: boolean isDirectory()>() in <org.apache.commons.io.filefilter.WildcardFilter: boolean accept(java.io.File,java.lang.String)> ==> <java.io.File: boolean isDirectory()>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.io.File: boolean isDirectory()>() in <org.apache.commons.io.filefilter.WildcardFilter: boolean accept(java.io.File)> ==> <java.io.File: boolean isDirectory()>
VIRTUAL edge: $r3 = virtualinvoke r0.<java.io.File: java.lang.String getName()>() in <org.apache.commons.io.filefilter.WildcardFilter: boolean accept(java.io.File)> ==> <java.io.File: java.lang.String getName()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.apache.commons.io.FileSystemUtils: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $l1 = virtualinvoke $r1.<org.apache.commons.io.FileSystemUtils: long freeSpaceOS(java.lang.String,int,boolean)>(r0, $i0, 0) in <org.apache.commons.io.FileSystemUtils: long freeSpace(java.lang.String)> ==> <org.apache.commons.io.FileSystemUtils: long freeSpaceOS(java.lang.String,int,boolean)>
VIRTUAL edge: $l1 = virtualinvoke $r1.<org.apache.commons.io.FileSystemUtils: long freeSpaceOS(java.lang.String,int,boolean)>(r0, $i0, 1) in <org.apache.commons.io.FileSystemUtils: long freeSpaceKb(java.lang.String)> ==> <org.apache.commons.io.FileSystemUtils: long freeSpaceOS(java.lang.String,int,boolean)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.apache.commons.io.HexDump: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.HexDump: void dump(byte[],long,java.io.OutputStream,int)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("illegal index: ") in <org.apache.commons.io.HexDump: void dump(byte[],long,java.io.OutputStream,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0) in <org.apache.commons.io.HexDump: void dump(byte[],long,java.io.OutputStream,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(int)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" into array of length ") in <org.apache.commons.io.HexDump: void dump(byte[],long,java.io.OutputStream,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1) in <org.apache.commons.io.HexDump: void dump(byte[],long,java.io.OutputStream,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(int)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.HexDump: void dump(byte[],long,java.io.OutputStream,int)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>($r7) in <org.apache.commons.io.HexDump: void dump(byte[],long,java.io.OutputStream,int)> ==> <java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r24.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("cannot write to nullstream") in <org.apache.commons.io.HexDump: void dump(byte[],long,java.io.OutputStream,int)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r9.<java.lang.StringBuffer: void <init>(int)>(74) in <org.apache.commons.io.HexDump: void dump(byte[],long,java.io.OutputStream,int)> ==> <java.lang.StringBuffer: void <init>(int)>
VIRTUAL edge: $r12 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.StringBuffer)>($r11) in <org.apache.commons.io.HexDump: void dump(byte[],long,java.io.OutputStream,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.StringBuffer)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.StringBuffer)>($r22) in <org.apache.commons.io.HexDump: void dump(byte[],long,java.io.OutputStream,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.StringBuffer)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  ") in <org.apache.commons.io.HexDump: void dump(byte[],long,java.io.OutputStream,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32) in <org.apache.commons.io.HexDump: void dump(byte[],long,java.io.OutputStream,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(char)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c14) in <org.apache.commons.io.HexDump: void dump(byte[],long,java.io.OutputStream,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(char)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(46) in <org.apache.commons.io.HexDump: void dump(byte[],long,java.io.OutputStream,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(char)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14) in <org.apache.commons.io.HexDump: void dump(byte[],long,java.io.OutputStream,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.HexDump: void dump(byte[],long,java.io.OutputStream,int)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuffer: void setLength(int)>(0) in <org.apache.commons.io.HexDump: void dump(byte[],long,java.io.OutputStream,int)> ==> <java.lang.StringBuffer: void setLength(int)>
VIRTUAL edge: virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32) in <org.apache.commons.io.HexDump: void dump(byte[],long,java.io.OutputStream,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(char)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.String: byte[] getBytes()>() in <org.apache.commons.io.HexDump: void dump(byte[],long,java.io.OutputStream,int)> ==> <java.lang.String: byte[] getBytes()>
VIRTUAL edge: virtualinvoke r8.<java.io.OutputStream: void write(byte[])>($r17) in <org.apache.commons.io.HexDump: void dump(byte[],long,java.io.OutputStream,int)> ==> <java.io.OutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r8.<java.io.OutputStream: void write(byte[])>($r17) in <org.apache.commons.io.HexDump: void dump(byte[],long,java.io.OutputStream,int)> ==> <org.apache.commons.io.output.CountingOutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r8.<java.io.OutputStream: void write(byte[])>($r17) in <org.apache.commons.io.HexDump: void dump(byte[],long,java.io.OutputStream,int)> ==> <org.apache.commons.io.output.NullOutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r8.<java.io.OutputStream: void write(byte[])>($r17) in <org.apache.commons.io.HexDump: void dump(byte[],long,java.io.OutputStream,int)> ==> <org.apache.commons.io.output.ThresholdingOutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r8.<java.io.OutputStream: void write(byte[])>($r17) in <org.apache.commons.io.HexDump: void dump(byte[],long,java.io.OutputStream,int)> ==> <org.apache.commons.io.output.ProxyOutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r8.<java.io.OutputStream: void write(byte[])>($r17) in <org.apache.commons.io.HexDump: void dump(byte[],long,java.io.OutputStream,int)> ==> <org.apache.commons.io.output.TeeOutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r8.<java.io.OutputStream: void flush()>() in <org.apache.commons.io.HexDump: void dump(byte[],long,java.io.OutputStream,int)> ==> <java.io.OutputStream: void flush()>
VIRTUAL edge: virtualinvoke r8.<java.io.OutputStream: void flush()>() in <org.apache.commons.io.HexDump: void dump(byte[],long,java.io.OutputStream,int)> ==> <java.io.PrintStream: void flush()>
VIRTUAL edge: virtualinvoke r8.<java.io.OutputStream: void flush()>() in <org.apache.commons.io.HexDump: void dump(byte[],long,java.io.OutputStream,int)> ==> <org.apache.commons.io.output.ProxyOutputStream: void flush()>
VIRTUAL edge: virtualinvoke r8.<java.io.OutputStream: void flush()>() in <org.apache.commons.io.HexDump: void dump(byte[],long,java.io.OutputStream,int)> ==> <org.apache.commons.io.output.ThresholdingOutputStream: void flush()>
VIRTUAL edge: virtualinvoke r8.<java.io.OutputStream: void flush()>() in <org.apache.commons.io.HexDump: void dump(byte[],long,java.io.OutputStream,int)> ==> <java.io.FilterOutputStream: void flush()>
VIRTUAL edge: virtualinvoke r8.<java.io.OutputStream: void flush()>() in <org.apache.commons.io.HexDump: void dump(byte[],long,java.io.OutputStream,int)> ==> <org.apache.commons.io.output.DemuxOutputStream: void flush()>
VIRTUAL edge: virtualinvoke r8.<java.io.OutputStream: void flush()>() in <org.apache.commons.io.HexDump: void dump(byte[],long,java.io.OutputStream,int)> ==> <org.apache.commons.io.output.TeeOutputStream: void flush()>
SPECIAL edge: specialinvoke r0.<java.io.ObjectInputStream: void <init>(java.io.InputStream)>(r1) in <org.apache.commons.io.input.ClassLoaderObjectInputStream: void <init>(java.lang.ClassLoader,java.io.InputStream)> ==> <java.io.ObjectInputStream: void <init>(java.io.InputStream)>
SPECIAL edge: specialinvoke r0.<org.apache.commons.io.input.ProxyInputStream: void <init>(java.io.InputStream)>(r1) in <org.apache.commons.io.input.CountingInputStream: void <init>(java.io.InputStream)> ==> <org.apache.commons.io.input.ProxyInputStream: void <init>(java.io.InputStream)>
SPECIAL edge: i0 = specialinvoke r0.<org.apache.commons.io.input.ProxyInputStream: int read(byte[])>(r1) in <org.apache.commons.io.input.CountingInputStream: int read(byte[])> ==> <org.apache.commons.io.input.ProxyInputStream: int read(byte[])>
SPECIAL edge: i2 = specialinvoke r0.<org.apache.commons.io.input.ProxyInputStream: int read(byte[],int,int)>(r1, i0, i1) in <org.apache.commons.io.input.CountingInputStream: int read(byte[],int,int)> ==> <org.apache.commons.io.input.ProxyInputStream: int read(byte[],int,int)>
SPECIAL edge: i0 = specialinvoke r0.<org.apache.commons.io.input.ProxyInputStream: int read()>() in <org.apache.commons.io.input.CountingInputStream: int read()> ==> <org.apache.commons.io.input.ProxyInputStream: int read()>
SPECIAL edge: l1 = specialinvoke r0.<org.apache.commons.io.input.ProxyInputStream: long skip(long)>(l0) in <org.apache.commons.io.input.CountingInputStream: long skip(long)> ==> <org.apache.commons.io.input.ProxyInputStream: long skip(long)>
VIRTUAL edge: l0 = virtualinvoke r0.<org.apache.commons.io.input.CountingInputStream: long getByteCount()>() in <org.apache.commons.io.input.CountingInputStream: int getCount()> ==> <org.apache.commons.io.input.CountingInputStream: long getByteCount()>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.input.CountingInputStream: int getCount()> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The byte count ") in <org.apache.commons.io.input.CountingInputStream: int getCount()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>(l0) in <org.apache.commons.io.input.CountingInputStream: int getCount()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(long)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is too large to be converted to an int") in <org.apache.commons.io.input.CountingInputStream: int getCount()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.input.CountingInputStream: int getCount()> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r1.<java.lang.ArithmeticException: void <init>(java.lang.String)>($r6) in <org.apache.commons.io.input.CountingInputStream: int getCount()> ==> <java.lang.ArithmeticException: void <init>(java.lang.String)>
VIRTUAL edge: l0 = virtualinvoke r0.<org.apache.commons.io.input.CountingInputStream: long resetByteCount()>() in <org.apache.commons.io.input.CountingInputStream: int resetCount()> ==> <org.apache.commons.io.input.CountingInputStream: long resetByteCount()>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.input.CountingInputStream: int resetCount()> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The byte count ") in <org.apache.commons.io.input.CountingInputStream: int resetCount()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>(l0) in <org.apache.commons.io.input.CountingInputStream: int resetCount()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(long)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is too large to be converted to an int") in <org.apache.commons.io.input.CountingInputStream: int resetCount()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.input.CountingInputStream: int resetCount()> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r1.<java.lang.ArithmeticException: void <init>(java.lang.String)>($r6) in <org.apache.commons.io.input.CountingInputStream: int resetCount()> ==> <java.lang.ArithmeticException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.io.FilterInputStream: void <init>(java.io.InputStream)>(r1) in <org.apache.commons.io.input.ProxyInputStream: void <init>(java.io.InputStream)> ==> <java.io.FilterInputStream: void <init>(java.io.InputStream)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.io.InputStream: int read()>() in <org.apache.commons.io.input.ProxyInputStream: int read()> ==> <java.io.FilterInputStream: int read()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.io.InputStream: int read()>() in <org.apache.commons.io.input.ProxyInputStream: int read()> ==> <java.util.zip.CheckedInputStream: int read()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.io.InputStream: int read()>() in <org.apache.commons.io.input.ProxyInputStream: int read()> ==> <java.io.BufferedInputStream: int read()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.io.InputStream: int read()>() in <org.apache.commons.io.input.ProxyInputStream: int read()> ==> <org.apache.commons.io.input.ProxyInputStream: int read()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.io.InputStream: int read()>() in <org.apache.commons.io.input.ProxyInputStream: int read()> ==> <java.io.ByteArrayInputStream: int read()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.io.InputStream: int read()>() in <org.apache.commons.io.input.ProxyInputStream: int read()> ==> <org.apache.commons.io.input.CountingInputStream: int read()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.io.InputStream: int read()>() in <org.apache.commons.io.input.ProxyInputStream: int read()> ==> <org.apache.commons.io.input.NullInputStream: int read()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.io.InputStream: int read()>() in <org.apache.commons.io.input.ProxyInputStream: int read()> ==> <java.io.ObjectInputStream: int read()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.io.InputStream: int read()>() in <org.apache.commons.io.input.ProxyInputStream: int read()> ==> <java.io.FileInputStream: int read()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.io.InputStream: int read()>() in <org.apache.commons.io.input.ProxyInputStream: int read()> ==> <org.apache.commons.io.input.DemuxInputStream: int read()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.io.InputStream: int read(byte[])>(r1) in <org.apache.commons.io.input.ProxyInputStream: int read(byte[])> ==> <java.io.InputStream: int read(byte[])>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.io.InputStream: int read(byte[])>(r1) in <org.apache.commons.io.input.ProxyInputStream: int read(byte[])> ==> <org.apache.commons.io.input.ProxyInputStream: int read(byte[])>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.io.InputStream: int read(byte[])>(r1) in <org.apache.commons.io.input.ProxyInputStream: int read(byte[])> ==> <org.apache.commons.io.input.CountingInputStream: int read(byte[])>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.io.InputStream: int read(byte[])>(r1) in <org.apache.commons.io.input.ProxyInputStream: int read(byte[])> ==> <org.apache.commons.io.input.NullInputStream: int read(byte[])>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.io.InputStream: int read(byte[],int,int)>(r1, i0, i1) in <org.apache.commons.io.input.ProxyInputStream: int read(byte[],int,int)> ==> <java.io.FilterInputStream: int read(byte[],int,int)>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.io.InputStream: int read(byte[],int,int)>(r1, i0, i1) in <org.apache.commons.io.input.ProxyInputStream: int read(byte[],int,int)> ==> <java.util.zip.CheckedInputStream: int read(byte[],int,int)>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.io.InputStream: int read(byte[],int,int)>(r1, i0, i1) in <org.apache.commons.io.input.ProxyInputStream: int read(byte[],int,int)> ==> <java.io.BufferedInputStream: int read(byte[],int,int)>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.io.InputStream: int read(byte[],int,int)>(r1, i0, i1) in <org.apache.commons.io.input.ProxyInputStream: int read(byte[],int,int)> ==> <org.apache.commons.io.input.ProxyInputStream: int read(byte[],int,int)>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.io.InputStream: int read(byte[],int,int)>(r1, i0, i1) in <org.apache.commons.io.input.ProxyInputStream: int read(byte[],int,int)> ==> <java.io.ByteArrayInputStream: int read(byte[],int,int)>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.io.InputStream: int read(byte[],int,int)>(r1, i0, i1) in <org.apache.commons.io.input.ProxyInputStream: int read(byte[],int,int)> ==> <org.apache.commons.io.input.CountingInputStream: int read(byte[],int,int)>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.io.InputStream: int read(byte[],int,int)>(r1, i0, i1) in <org.apache.commons.io.input.ProxyInputStream: int read(byte[],int,int)> ==> <org.apache.commons.io.input.NullInputStream: int read(byte[],int,int)>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.io.InputStream: int read(byte[],int,int)>(r1, i0, i1) in <org.apache.commons.io.input.ProxyInputStream: int read(byte[],int,int)> ==> <java.io.ObjectInputStream: int read(byte[],int,int)>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.io.InputStream: int read(byte[],int,int)>(r1, i0, i1) in <org.apache.commons.io.input.ProxyInputStream: int read(byte[],int,int)> ==> <java.io.FileInputStream: int read(byte[],int,int)>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.io.InputStream: int read(byte[],int,int)>(r1, i0, i1) in <org.apache.commons.io.input.ProxyInputStream: int read(byte[],int,int)> ==> <java.io.InputStream: int read(byte[],int,int)>
VIRTUAL edge: $l1 = virtualinvoke $r1.<java.io.InputStream: long skip(long)>(l0) in <org.apache.commons.io.input.ProxyInputStream: long skip(long)> ==> <java.io.FilterInputStream: long skip(long)>
VIRTUAL edge: $l1 = virtualinvoke $r1.<java.io.InputStream: long skip(long)>(l0) in <org.apache.commons.io.input.ProxyInputStream: long skip(long)> ==> <java.util.zip.CheckedInputStream: long skip(long)>
VIRTUAL edge: $l1 = virtualinvoke $r1.<java.io.InputStream: long skip(long)>(l0) in <org.apache.commons.io.input.ProxyInputStream: long skip(long)> ==> <java.io.BufferedInputStream: long skip(long)>
VIRTUAL edge: $l1 = virtualinvoke $r1.<java.io.InputStream: long skip(long)>(l0) in <org.apache.commons.io.input.ProxyInputStream: long skip(long)> ==> <org.apache.commons.io.input.ProxyInputStream: long skip(long)>
VIRTUAL edge: $l1 = virtualinvoke $r1.<java.io.InputStream: long skip(long)>(l0) in <org.apache.commons.io.input.ProxyInputStream: long skip(long)> ==> <java.io.ByteArrayInputStream: long skip(long)>
VIRTUAL edge: $l1 = virtualinvoke $r1.<java.io.InputStream: long skip(long)>(l0) in <org.apache.commons.io.input.ProxyInputStream: long skip(long)> ==> <org.apache.commons.io.input.CountingInputStream: long skip(long)>
VIRTUAL edge: $l1 = virtualinvoke $r1.<java.io.InputStream: long skip(long)>(l0) in <org.apache.commons.io.input.ProxyInputStream: long skip(long)> ==> <org.apache.commons.io.input.NullInputStream: long skip(long)>
VIRTUAL edge: $l1 = virtualinvoke $r1.<java.io.InputStream: long skip(long)>(l0) in <org.apache.commons.io.input.ProxyInputStream: long skip(long)> ==> <java.io.InputStream: long skip(long)>
VIRTUAL edge: $l1 = virtualinvoke $r1.<java.io.InputStream: long skip(long)>(l0) in <org.apache.commons.io.input.ProxyInputStream: long skip(long)> ==> <java.io.FileInputStream: long skip(long)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.io.InputStream: int available()>() in <org.apache.commons.io.input.ProxyInputStream: int available()> ==> <java.io.FilterInputStream: int available()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.io.InputStream: int available()>() in <org.apache.commons.io.input.ProxyInputStream: int available()> ==> <java.io.BufferedInputStream: int available()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.io.InputStream: int available()>() in <org.apache.commons.io.input.ProxyInputStream: int available()> ==> <org.apache.commons.io.input.ProxyInputStream: int available()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.io.InputStream: int available()>() in <org.apache.commons.io.input.ProxyInputStream: int available()> ==> <java.io.ByteArrayInputStream: int available()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.io.InputStream: int available()>() in <org.apache.commons.io.input.ProxyInputStream: int available()> ==> <org.apache.commons.io.input.NullInputStream: int available()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.io.InputStream: int available()>() in <org.apache.commons.io.input.ProxyInputStream: int available()> ==> <java.io.ObjectInputStream: int available()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.io.InputStream: int available()>() in <org.apache.commons.io.input.ProxyInputStream: int available()> ==> <java.io.FileInputStream: int available()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.io.InputStream: int available()>() in <org.apache.commons.io.input.ProxyInputStream: int available()> ==> <java.io.InputStream: int available()>
VIRTUAL edge: virtualinvoke $r1.<java.io.InputStream: void close()>() in <org.apache.commons.io.input.ProxyInputStream: void close()> ==> <java.io.FilterInputStream: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.InputStream: void close()>() in <org.apache.commons.io.input.ProxyInputStream: void close()> ==> <java.io.BufferedInputStream: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.InputStream: void close()>() in <org.apache.commons.io.input.ProxyInputStream: void close()> ==> <org.apache.commons.io.input.ProxyInputStream: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.InputStream: void close()>() in <org.apache.commons.io.input.ProxyInputStream: void close()> ==> <java.io.ByteArrayInputStream: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.InputStream: void close()>() in <org.apache.commons.io.input.ProxyInputStream: void close()> ==> <org.apache.commons.io.input.NullInputStream: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.InputStream: void close()>() in <org.apache.commons.io.input.ProxyInputStream: void close()> ==> <java.io.ObjectInputStream: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.InputStream: void close()>() in <org.apache.commons.io.input.ProxyInputStream: void close()> ==> <java.io.FileInputStream: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.InputStream: void close()>() in <org.apache.commons.io.input.ProxyInputStream: void close()> ==> <org.apache.commons.io.input.DemuxInputStream: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.InputStream: void close()>() in <org.apache.commons.io.input.ProxyInputStream: void close()> ==> <java.io.InputStream: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.InputStream: void mark(int)>(i0) in <org.apache.commons.io.input.ProxyInputStream: void mark(int)> ==> <java.io.FilterInputStream: void mark(int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.InputStream: void mark(int)>(i0) in <org.apache.commons.io.input.ProxyInputStream: void mark(int)> ==> <java.io.BufferedInputStream: void mark(int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.InputStream: void mark(int)>(i0) in <org.apache.commons.io.input.ProxyInputStream: void mark(int)> ==> <org.apache.commons.io.input.ProxyInputStream: void mark(int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.InputStream: void mark(int)>(i0) in <org.apache.commons.io.input.ProxyInputStream: void mark(int)> ==> <java.io.ByteArrayInputStream: void mark(int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.InputStream: void mark(int)>(i0) in <org.apache.commons.io.input.ProxyInputStream: void mark(int)> ==> <org.apache.commons.io.input.NullInputStream: void mark(int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.InputStream: void mark(int)>(i0) in <org.apache.commons.io.input.ProxyInputStream: void mark(int)> ==> <java.io.InputStream: void mark(int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.InputStream: void reset()>() in <org.apache.commons.io.input.ProxyInputStream: void reset()> ==> <java.io.FilterInputStream: void reset()>
VIRTUAL edge: virtualinvoke $r1.<java.io.InputStream: void reset()>() in <org.apache.commons.io.input.ProxyInputStream: void reset()> ==> <java.io.BufferedInputStream: void reset()>
VIRTUAL edge: virtualinvoke $r1.<java.io.InputStream: void reset()>() in <org.apache.commons.io.input.ProxyInputStream: void reset()> ==> <org.apache.commons.io.input.ProxyInputStream: void reset()>
VIRTUAL edge: virtualinvoke $r1.<java.io.InputStream: void reset()>() in <org.apache.commons.io.input.ProxyInputStream: void reset()> ==> <java.io.ByteArrayInputStream: void reset()>
VIRTUAL edge: virtualinvoke $r1.<java.io.InputStream: void reset()>() in <org.apache.commons.io.input.ProxyInputStream: void reset()> ==> <org.apache.commons.io.input.NullInputStream: void reset()>
VIRTUAL edge: virtualinvoke $r1.<java.io.InputStream: void reset()>() in <org.apache.commons.io.input.ProxyInputStream: void reset()> ==> <java.io.InputStream: void reset()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.io.InputStream: boolean markSupported()>() in <org.apache.commons.io.input.ProxyInputStream: boolean markSupported()> ==> <java.io.FilterInputStream: boolean markSupported()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.io.InputStream: boolean markSupported()>() in <org.apache.commons.io.input.ProxyInputStream: boolean markSupported()> ==> <java.io.BufferedInputStream: boolean markSupported()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.io.InputStream: boolean markSupported()>() in <org.apache.commons.io.input.ProxyInputStream: boolean markSupported()> ==> <org.apache.commons.io.input.ProxyInputStream: boolean markSupported()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.io.InputStream: boolean markSupported()>() in <org.apache.commons.io.input.ProxyInputStream: boolean markSupported()> ==> <java.io.ByteArrayInputStream: boolean markSupported()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.io.InputStream: boolean markSupported()>() in <org.apache.commons.io.input.ProxyInputStream: boolean markSupported()> ==> <org.apache.commons.io.input.NullInputStream: boolean markSupported()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.io.InputStream: boolean markSupported()>() in <org.apache.commons.io.input.ProxyInputStream: boolean markSupported()> ==> <java.io.InputStream: boolean markSupported()>
SPECIAL edge: specialinvoke r0.<java.io.InputStream: void <init>()>() in <org.apache.commons.io.input.DemuxInputStream: void <init>()> ==> <java.io.InputStream: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.InheritableThreadLocal: void <init>()>() in <org.apache.commons.io.input.DemuxInputStream: void <init>()> ==> <java.lang.InheritableThreadLocal: void <init>()>
SPECIAL edge: r1 = specialinvoke r0.<org.apache.commons.io.input.DemuxInputStream: java.io.InputStream getStream()>() in <org.apache.commons.io.input.DemuxInputStream: java.io.InputStream bindStream(java.io.InputStream)> ==> <org.apache.commons.io.input.DemuxInputStream: java.io.InputStream getStream()>
VIRTUAL edge: virtualinvoke $r3.<java.lang.InheritableThreadLocal: void set(java.lang.Object)>(r2) in <org.apache.commons.io.input.DemuxInputStream: java.io.InputStream bindStream(java.io.InputStream)> ==> <java.lang.ThreadLocal: void set(java.lang.Object)>
SPECIAL edge: r1 = specialinvoke r0.<org.apache.commons.io.input.DemuxInputStream: java.io.InputStream getStream()>() in <org.apache.commons.io.input.DemuxInputStream: void close()> ==> <org.apache.commons.io.input.DemuxInputStream: java.io.InputStream getStream()>
VIRTUAL edge: virtualinvoke r1.<java.io.InputStream: void close()>() in <org.apache.commons.io.input.DemuxInputStream: void close()> ==> <java.io.FilterInputStream: void close()>
VIRTUAL edge: virtualinvoke r1.<java.io.InputStream: void close()>() in <org.apache.commons.io.input.DemuxInputStream: void close()> ==> <java.io.BufferedInputStream: void close()>
VIRTUAL edge: virtualinvoke r1.<java.io.InputStream: void close()>() in <org.apache.commons.io.input.DemuxInputStream: void close()> ==> <org.apache.commons.io.input.ProxyInputStream: void close()>
VIRTUAL edge: virtualinvoke r1.<java.io.InputStream: void close()>() in <org.apache.commons.io.input.DemuxInputStream: void close()> ==> <java.io.ByteArrayInputStream: void close()>
VIRTUAL edge: virtualinvoke r1.<java.io.InputStream: void close()>() in <org.apache.commons.io.input.DemuxInputStream: void close()> ==> <org.apache.commons.io.input.NullInputStream: void close()>
VIRTUAL edge: virtualinvoke r1.<java.io.InputStream: void close()>() in <org.apache.commons.io.input.DemuxInputStream: void close()> ==> <java.io.ObjectInputStream: void close()>
VIRTUAL edge: virtualinvoke r1.<java.io.InputStream: void close()>() in <org.apache.commons.io.input.DemuxInputStream: void close()> ==> <java.io.FileInputStream: void close()>
VIRTUAL edge: virtualinvoke r1.<java.io.InputStream: void close()>() in <org.apache.commons.io.input.DemuxInputStream: void close()> ==> <org.apache.commons.io.input.DemuxInputStream: void close()>
VIRTUAL edge: virtualinvoke r1.<java.io.InputStream: void close()>() in <org.apache.commons.io.input.DemuxInputStream: void close()> ==> <java.io.InputStream: void close()>
SPECIAL edge: r1 = specialinvoke r0.<org.apache.commons.io.input.DemuxInputStream: java.io.InputStream getStream()>() in <org.apache.commons.io.input.DemuxInputStream: int read()> ==> <org.apache.commons.io.input.DemuxInputStream: java.io.InputStream getStream()>
VIRTUAL edge: $i0 = virtualinvoke r1.<java.io.InputStream: int read()>() in <org.apache.commons.io.input.DemuxInputStream: int read()> ==> <java.io.FilterInputStream: int read()>
VIRTUAL edge: $i0 = virtualinvoke r1.<java.io.InputStream: int read()>() in <org.apache.commons.io.input.DemuxInputStream: int read()> ==> <java.util.zip.CheckedInputStream: int read()>
VIRTUAL edge: $i0 = virtualinvoke r1.<java.io.InputStream: int read()>() in <org.apache.commons.io.input.DemuxInputStream: int read()> ==> <java.io.BufferedInputStream: int read()>
VIRTUAL edge: $i0 = virtualinvoke r1.<java.io.InputStream: int read()>() in <org.apache.commons.io.input.DemuxInputStream: int read()> ==> <org.apache.commons.io.input.ProxyInputStream: int read()>
VIRTUAL edge: $i0 = virtualinvoke r1.<java.io.InputStream: int read()>() in <org.apache.commons.io.input.DemuxInputStream: int read()> ==> <java.io.ByteArrayInputStream: int read()>
VIRTUAL edge: $i0 = virtualinvoke r1.<java.io.InputStream: int read()>() in <org.apache.commons.io.input.DemuxInputStream: int read()> ==> <org.apache.commons.io.input.CountingInputStream: int read()>
VIRTUAL edge: $i0 = virtualinvoke r1.<java.io.InputStream: int read()>() in <org.apache.commons.io.input.DemuxInputStream: int read()> ==> <org.apache.commons.io.input.NullInputStream: int read()>
VIRTUAL edge: $i0 = virtualinvoke r1.<java.io.InputStream: int read()>() in <org.apache.commons.io.input.DemuxInputStream: int read()> ==> <java.io.ObjectInputStream: int read()>
VIRTUAL edge: $i0 = virtualinvoke r1.<java.io.InputStream: int read()>() in <org.apache.commons.io.input.DemuxInputStream: int read()> ==> <java.io.FileInputStream: int read()>
VIRTUAL edge: $i0 = virtualinvoke r1.<java.io.InputStream: int read()>() in <org.apache.commons.io.input.DemuxInputStream: int read()> ==> <org.apache.commons.io.input.DemuxInputStream: int read()>
SPECIAL edge: specialinvoke r0.<org.apache.commons.io.input.NullInputStream: void <init>(long,boolean,boolean)>(l0, 1, 0) in <org.apache.commons.io.input.NullInputStream: void <init>(long)> ==> <org.apache.commons.io.input.NullInputStream: void <init>(long,boolean,boolean)>
SPECIAL edge: specialinvoke r0.<java.io.InputStream: void <init>()>() in <org.apache.commons.io.input.NullInputStream: void <init>(long,boolean,boolean)> ==> <java.io.InputStream: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Mark not supported") in <org.apache.commons.io.input.NullInputStream: void mark(int)> ==> <java.lang.UnsupportedOperationException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("Read after end of file") in <org.apache.commons.io.input.NullInputStream: int read()> ==> <java.io.IOException: void <init>(java.lang.String)>
SPECIAL edge: $i6 = specialinvoke r0.<org.apache.commons.io.input.NullInputStream: int doEndOfFile()>() in <org.apache.commons.io.input.NullInputStream: int read()> ==> <org.apache.commons.io.input.NullInputStream: int doEndOfFile()>
VIRTUAL edge: $i5 = virtualinvoke r0.<org.apache.commons.io.input.NullInputStream: int processByte()>() in <org.apache.commons.io.input.NullInputStream: int read()> ==> <org.apache.commons.io.input.NullInputStream: int processByte()>
VIRTUAL edge: $i1 = virtualinvoke r0.<org.apache.commons.io.input.NullInputStream: int read(byte[],int,int)>(r1, 0, $i0) in <org.apache.commons.io.input.NullInputStream: int read(byte[])> ==> <org.apache.commons.io.input.NullInputStream: int read(byte[],int,int)>
SPECIAL edge: specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Read after end of file") in <org.apache.commons.io.input.NullInputStream: int read(byte[],int,int)> ==> <java.io.IOException: void <init>(java.lang.String)>
SPECIAL edge: $i16 = specialinvoke r0.<org.apache.commons.io.input.NullInputStream: int doEndOfFile()>() in <org.apache.commons.io.input.NullInputStream: int read(byte[],int,int)> ==> <org.apache.commons.io.input.NullInputStream: int doEndOfFile()>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.io.input.NullInputStream: void processBytes(byte[],int,int)>(r1, i10, i17) in <org.apache.commons.io.input.NullInputStream: int read(byte[],int,int)> ==> <org.apache.commons.io.input.NullInputStream: void processBytes(byte[],int,int)>
SPECIAL edge: specialinvoke $r10.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Mark not supported") in <org.apache.commons.io.input.NullInputStream: void reset()> ==> <java.lang.UnsupportedOperationException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>("No position has been marked") in <org.apache.commons.io.input.NullInputStream: void reset()> ==> <java.io.IOException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.input.NullInputStream: void reset()> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Marked position [") in <org.apache.commons.io.input.NullInputStream: void reset()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>($l8) in <org.apache.commons.io.input.NullInputStream: void reset()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(long)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] is no longer valid - passed the read limit [") in <org.apache.commons.io.input.NullInputStream: void reset()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>($l9) in <org.apache.commons.io.input.NullInputStream: void reset()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(long)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]") in <org.apache.commons.io.input.NullInputStream: void reset()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.input.NullInputStream: void reset()> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>($r8) in <org.apache.commons.io.input.NullInputStream: void reset()> ==> <java.io.IOException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("Skip after end of file") in <org.apache.commons.io.input.NullInputStream: long skip(long)> ==> <java.io.IOException: void <init>(java.lang.String)>
SPECIAL edge: $i13 = specialinvoke r0.<org.apache.commons.io.input.NullInputStream: int doEndOfFile()>() in <org.apache.commons.io.input.NullInputStream: long skip(long)> ==> <org.apache.commons.io.input.NullInputStream: int doEndOfFile()>
SPECIAL edge: specialinvoke r0.<org.apache.commons.io.input.NullReader: void <init>(long,boolean,boolean)>(l0, 1, 0) in <org.apache.commons.io.input.NullReader: void <init>(long)> ==> <org.apache.commons.io.input.NullReader: void <init>(long,boolean,boolean)>
SPECIAL edge: specialinvoke r0.<java.io.Reader: void <init>()>() in <org.apache.commons.io.input.NullReader: void <init>(long,boolean,boolean)> ==> <java.io.Reader: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Mark not supported") in <org.apache.commons.io.input.NullReader: void mark(int)> ==> <java.lang.UnsupportedOperationException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("Read after end of file") in <org.apache.commons.io.input.NullReader: int read()> ==> <java.io.IOException: void <init>(java.lang.String)>
SPECIAL edge: $i6 = specialinvoke r0.<org.apache.commons.io.input.NullReader: int doEndOfFile()>() in <org.apache.commons.io.input.NullReader: int read()> ==> <org.apache.commons.io.input.NullReader: int doEndOfFile()>
VIRTUAL edge: $i5 = virtualinvoke r0.<org.apache.commons.io.input.NullReader: int processChar()>() in <org.apache.commons.io.input.NullReader: int read()> ==> <org.apache.commons.io.input.NullReader: int processChar()>
VIRTUAL edge: $i1 = virtualinvoke r0.<org.apache.commons.io.input.NullReader: int read(char[],int,int)>(r1, 0, $i0) in <org.apache.commons.io.input.NullReader: int read(char[])> ==> <org.apache.commons.io.input.NullReader: int read(char[],int,int)>
SPECIAL edge: specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Read after end of file") in <org.apache.commons.io.input.NullReader: int read(char[],int,int)> ==> <java.io.IOException: void <init>(java.lang.String)>
SPECIAL edge: $i16 = specialinvoke r0.<org.apache.commons.io.input.NullReader: int doEndOfFile()>() in <org.apache.commons.io.input.NullReader: int read(char[],int,int)> ==> <org.apache.commons.io.input.NullReader: int doEndOfFile()>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.io.input.NullReader: void processChars(char[],int,int)>(r1, i10, i17) in <org.apache.commons.io.input.NullReader: int read(char[],int,int)> ==> <org.apache.commons.io.input.NullReader: void processChars(char[],int,int)>
SPECIAL edge: specialinvoke $r10.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Mark not supported") in <org.apache.commons.io.input.NullReader: void reset()> ==> <java.lang.UnsupportedOperationException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>("No position has been marked") in <org.apache.commons.io.input.NullReader: void reset()> ==> <java.io.IOException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.input.NullReader: void reset()> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Marked position [") in <org.apache.commons.io.input.NullReader: void reset()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>($l8) in <org.apache.commons.io.input.NullReader: void reset()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(long)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] is no longer valid - passed the read limit [") in <org.apache.commons.io.input.NullReader: void reset()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>($l9) in <org.apache.commons.io.input.NullReader: void reset()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(long)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]") in <org.apache.commons.io.input.NullReader: void reset()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.input.NullReader: void reset()> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>($r8) in <org.apache.commons.io.input.NullReader: void reset()> ==> <java.io.IOException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("Skip after end of file") in <org.apache.commons.io.input.NullReader: long skip(long)> ==> <java.io.IOException: void <init>(java.lang.String)>
SPECIAL edge: $i13 = specialinvoke r0.<org.apache.commons.io.input.NullReader: int doEndOfFile()>() in <org.apache.commons.io.input.NullReader: long skip(long)> ==> <org.apache.commons.io.input.NullReader: int doEndOfFile()>
SPECIAL edge: specialinvoke r0.<java.io.FilterReader: void <init>(java.io.Reader)>(r1) in <org.apache.commons.io.input.ProxyReader: void <init>(java.io.Reader)> ==> <java.io.FilterReader: void <init>(java.io.Reader)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.io.Reader: int read()>() in <org.apache.commons.io.input.ProxyReader: int read()> ==> <java.io.Reader: int read()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.io.Reader: int read()>() in <org.apache.commons.io.input.ProxyReader: int read()> ==> <java.io.BufferedReader: int read()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.io.Reader: int read()>() in <org.apache.commons.io.input.ProxyReader: int read()> ==> <java.io.StringReader: int read()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.io.Reader: int read()>() in <org.apache.commons.io.input.ProxyReader: int read()> ==> <java.io.InputStreamReader: int read()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.io.Reader: int read()>() in <org.apache.commons.io.input.ProxyReader: int read()> ==> <org.apache.commons.io.input.NullReader: int read()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.io.Reader: int read(char[])>(r1) in <org.apache.commons.io.input.ProxyReader: int read(char[])> ==> <java.io.Reader: int read(char[])>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.io.Reader: int read(char[])>(r1) in <org.apache.commons.io.input.ProxyReader: int read(char[])> ==> <org.apache.commons.io.input.NullReader: int read(char[])>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.io.Reader: int read(char[],int,int)>(r1, i0, i1) in <org.apache.commons.io.input.ProxyReader: int read(char[],int,int)> ==> <java.io.BufferedReader: int read(char[],int,int)>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.io.Reader: int read(char[],int,int)>(r1, i0, i1) in <org.apache.commons.io.input.ProxyReader: int read(char[],int,int)> ==> <java.io.StringReader: int read(char[],int,int)>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.io.Reader: int read(char[],int,int)>(r1, i0, i1) in <org.apache.commons.io.input.ProxyReader: int read(char[],int,int)> ==> <java.io.InputStreamReader: int read(char[],int,int)>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.io.Reader: int read(char[],int,int)>(r1, i0, i1) in <org.apache.commons.io.input.ProxyReader: int read(char[],int,int)> ==> <org.apache.commons.io.input.NullReader: int read(char[],int,int)>
VIRTUAL edge: $l1 = virtualinvoke $r1.<java.io.Reader: long skip(long)>(l0) in <org.apache.commons.io.input.ProxyReader: long skip(long)> ==> <java.io.Reader: long skip(long)>
VIRTUAL edge: $l1 = virtualinvoke $r1.<java.io.Reader: long skip(long)>(l0) in <org.apache.commons.io.input.ProxyReader: long skip(long)> ==> <java.io.BufferedReader: long skip(long)>
VIRTUAL edge: $l1 = virtualinvoke $r1.<java.io.Reader: long skip(long)>(l0) in <org.apache.commons.io.input.ProxyReader: long skip(long)> ==> <java.io.StringReader: long skip(long)>
VIRTUAL edge: $l1 = virtualinvoke $r1.<java.io.Reader: long skip(long)>(l0) in <org.apache.commons.io.input.ProxyReader: long skip(long)> ==> <org.apache.commons.io.input.NullReader: long skip(long)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.io.Reader: boolean ready()>() in <org.apache.commons.io.input.ProxyReader: boolean ready()> ==> <java.io.Reader: boolean ready()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.io.Reader: boolean ready()>() in <org.apache.commons.io.input.ProxyReader: boolean ready()> ==> <java.io.BufferedReader: boolean ready()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.io.Reader: boolean ready()>() in <org.apache.commons.io.input.ProxyReader: boolean ready()> ==> <java.io.StringReader: boolean ready()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.io.Reader: boolean ready()>() in <org.apache.commons.io.input.ProxyReader: boolean ready()> ==> <java.io.InputStreamReader: boolean ready()>
VIRTUAL edge: virtualinvoke $r1.<java.io.Reader: void close()>() in <org.apache.commons.io.input.ProxyReader: void close()> ==> <java.io.BufferedReader: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.Reader: void close()>() in <org.apache.commons.io.input.ProxyReader: void close()> ==> <java.io.StringReader: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.Reader: void close()>() in <org.apache.commons.io.input.ProxyReader: void close()> ==> <java.io.InputStreamReader: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.Reader: void close()>() in <org.apache.commons.io.input.ProxyReader: void close()> ==> <org.apache.commons.io.input.NullReader: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.Reader: void mark(int)>(i0) in <org.apache.commons.io.input.ProxyReader: void mark(int)> ==> <java.io.Reader: void mark(int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.Reader: void mark(int)>(i0) in <org.apache.commons.io.input.ProxyReader: void mark(int)> ==> <java.io.BufferedReader: void mark(int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.Reader: void mark(int)>(i0) in <org.apache.commons.io.input.ProxyReader: void mark(int)> ==> <java.io.StringReader: void mark(int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.Reader: void mark(int)>(i0) in <org.apache.commons.io.input.ProxyReader: void mark(int)> ==> <org.apache.commons.io.input.NullReader: void mark(int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.Reader: void reset()>() in <org.apache.commons.io.input.ProxyReader: void reset()> ==> <java.io.Reader: void reset()>
VIRTUAL edge: virtualinvoke $r1.<java.io.Reader: void reset()>() in <org.apache.commons.io.input.ProxyReader: void reset()> ==> <java.io.BufferedReader: void reset()>
VIRTUAL edge: virtualinvoke $r1.<java.io.Reader: void reset()>() in <org.apache.commons.io.input.ProxyReader: void reset()> ==> <java.io.StringReader: void reset()>
VIRTUAL edge: virtualinvoke $r1.<java.io.Reader: void reset()>() in <org.apache.commons.io.input.ProxyReader: void reset()> ==> <org.apache.commons.io.input.NullReader: void reset()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.io.Reader: boolean markSupported()>() in <org.apache.commons.io.input.ProxyReader: boolean markSupported()> ==> <java.io.Reader: boolean markSupported()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.io.Reader: boolean markSupported()>() in <org.apache.commons.io.input.ProxyReader: boolean markSupported()> ==> <java.io.BufferedReader: boolean markSupported()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.io.Reader: boolean markSupported()>() in <org.apache.commons.io.input.ProxyReader: boolean markSupported()> ==> <java.io.StringReader: boolean markSupported()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.io.Reader: boolean markSupported()>() in <org.apache.commons.io.input.ProxyReader: boolean markSupported()> ==> <org.apache.commons.io.input.NullReader: boolean markSupported()>
SPECIAL edge: specialinvoke r0.<org.apache.commons.io.input.ProxyInputStream: void <init>(java.io.InputStream)>(r1) in <org.apache.commons.io.input.SwappedDataInputStream: void <init>(java.io.InputStream)> ==> <org.apache.commons.io.input.ProxyInputStream: void <init>(java.io.InputStream)>
VIRTUAL edge: $b0 = virtualinvoke r0.<org.apache.commons.io.input.SwappedDataInputStream: byte readByte()>() in <org.apache.commons.io.input.SwappedDataInputStream: boolean readBoolean()> ==> <org.apache.commons.io.input.SwappedDataInputStream: byte readByte()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.io.InputStream: int read()>() in <org.apache.commons.io.input.SwappedDataInputStream: byte readByte()> ==> <java.io.FilterInputStream: int read()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.io.InputStream: int read()>() in <org.apache.commons.io.input.SwappedDataInputStream: byte readByte()> ==> <java.util.zip.CheckedInputStream: int read()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.io.InputStream: int read()>() in <org.apache.commons.io.input.SwappedDataInputStream: byte readByte()> ==> <java.io.BufferedInputStream: int read()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.io.InputStream: int read()>() in <org.apache.commons.io.input.SwappedDataInputStream: byte readByte()> ==> <org.apache.commons.io.input.ProxyInputStream: int read()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.io.InputStream: int read()>() in <org.apache.commons.io.input.SwappedDataInputStream: byte readByte()> ==> <java.io.ByteArrayInputStream: int read()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.io.InputStream: int read()>() in <org.apache.commons.io.input.SwappedDataInputStream: byte readByte()> ==> <org.apache.commons.io.input.CountingInputStream: int read()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.io.InputStream: int read()>() in <org.apache.commons.io.input.SwappedDataInputStream: byte readByte()> ==> <org.apache.commons.io.input.NullInputStream: int read()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.io.InputStream: int read()>() in <org.apache.commons.io.input.SwappedDataInputStream: byte readByte()> ==> <java.io.ObjectInputStream: int read()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.io.InputStream: int read()>() in <org.apache.commons.io.input.SwappedDataInputStream: byte readByte()> ==> <java.io.FileInputStream: int read()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.io.InputStream: int read()>() in <org.apache.commons.io.input.SwappedDataInputStream: byte readByte()> ==> <org.apache.commons.io.input.DemuxInputStream: int read()>
VIRTUAL edge: $s0 = virtualinvoke r0.<org.apache.commons.io.input.SwappedDataInputStream: short readShort()>() in <org.apache.commons.io.input.SwappedDataInputStream: char readChar()> ==> <org.apache.commons.io.input.SwappedDataInputStream: short readShort()>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.io.input.SwappedDataInputStream: void readFully(byte[],int,int)>(r1, 0, $i0) in <org.apache.commons.io.input.SwappedDataInputStream: void readFully(byte[])> ==> <org.apache.commons.io.input.SwappedDataInputStream: void readFully(byte[],int,int)>
VIRTUAL edge: i4 = virtualinvoke r0.<org.apache.commons.io.input.SwappedDataInputStream: int read(byte[],int,int)>(r1, i3, i5) in <org.apache.commons.io.input.SwappedDataInputStream: void readFully(byte[],int,int)> ==> <org.apache.commons.io.input.ProxyInputStream: int read(byte[],int,int)>
SPECIAL edge: specialinvoke $r2.<java.io.EOFException: void <init>()>() in <org.apache.commons.io.input.SwappedDataInputStream: void readFully(byte[],int,int)> ==> <java.io.EOFException: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation not supported: readLine()") in <org.apache.commons.io.input.SwappedDataInputStream: java.lang.String readLine()> ==> <java.lang.UnsupportedOperationException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.io.InputStream: int read()>() in <org.apache.commons.io.input.SwappedDataInputStream: int readUnsignedByte()> ==> <java.io.FilterInputStream: int read()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.io.InputStream: int read()>() in <org.apache.commons.io.input.SwappedDataInputStream: int readUnsignedByte()> ==> <java.util.zip.CheckedInputStream: int read()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.io.InputStream: int read()>() in <org.apache.commons.io.input.SwappedDataInputStream: int readUnsignedByte()> ==> <java.io.BufferedInputStream: int read()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.io.InputStream: int read()>() in <org.apache.commons.io.input.SwappedDataInputStream: int readUnsignedByte()> ==> <org.apache.commons.io.input.ProxyInputStream: int read()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.io.InputStream: int read()>() in <org.apache.commons.io.input.SwappedDataInputStream: int readUnsignedByte()> ==> <java.io.ByteArrayInputStream: int read()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.io.InputStream: int read()>() in <org.apache.commons.io.input.SwappedDataInputStream: int readUnsignedByte()> ==> <org.apache.commons.io.input.CountingInputStream: int read()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.io.InputStream: int read()>() in <org.apache.commons.io.input.SwappedDataInputStream: int readUnsignedByte()> ==> <org.apache.commons.io.input.NullInputStream: int read()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.io.InputStream: int read()>() in <org.apache.commons.io.input.SwappedDataInputStream: int readUnsignedByte()> ==> <java.io.ObjectInputStream: int read()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.io.InputStream: int read()>() in <org.apache.commons.io.input.SwappedDataInputStream: int readUnsignedByte()> ==> <java.io.FileInputStream: int read()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.io.InputStream: int read()>() in <org.apache.commons.io.input.SwappedDataInputStream: int readUnsignedByte()> ==> <org.apache.commons.io.input.DemuxInputStream: int read()>
SPECIAL edge: specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation not supported: readUTF()") in <org.apache.commons.io.input.SwappedDataInputStream: java.lang.String readUTF()> ==> <java.lang.UnsupportedOperationException: void <init>(java.lang.String)>
VIRTUAL edge: $l2 = virtualinvoke $r1.<java.io.InputStream: long skip(long)>($l1) in <org.apache.commons.io.input.SwappedDataInputStream: int skipBytes(int)> ==> <java.io.FilterInputStream: long skip(long)>
VIRTUAL edge: $l2 = virtualinvoke $r1.<java.io.InputStream: long skip(long)>($l1) in <org.apache.commons.io.input.SwappedDataInputStream: int skipBytes(int)> ==> <java.util.zip.CheckedInputStream: long skip(long)>
VIRTUAL edge: $l2 = virtualinvoke $r1.<java.io.InputStream: long skip(long)>($l1) in <org.apache.commons.io.input.SwappedDataInputStream: int skipBytes(int)> ==> <java.io.BufferedInputStream: long skip(long)>
VIRTUAL edge: $l2 = virtualinvoke $r1.<java.io.InputStream: long skip(long)>($l1) in <org.apache.commons.io.input.SwappedDataInputStream: int skipBytes(int)> ==> <org.apache.commons.io.input.ProxyInputStream: long skip(long)>
VIRTUAL edge: $l2 = virtualinvoke $r1.<java.io.InputStream: long skip(long)>($l1) in <org.apache.commons.io.input.SwappedDataInputStream: int skipBytes(int)> ==> <java.io.ByteArrayInputStream: long skip(long)>
VIRTUAL edge: $l2 = virtualinvoke $r1.<java.io.InputStream: long skip(long)>($l1) in <org.apache.commons.io.input.SwappedDataInputStream: int skipBytes(int)> ==> <org.apache.commons.io.input.CountingInputStream: long skip(long)>
VIRTUAL edge: $l2 = virtualinvoke $r1.<java.io.InputStream: long skip(long)>($l1) in <org.apache.commons.io.input.SwappedDataInputStream: int skipBytes(int)> ==> <org.apache.commons.io.input.NullInputStream: long skip(long)>
VIRTUAL edge: $l2 = virtualinvoke $r1.<java.io.InputStream: long skip(long)>($l1) in <org.apache.commons.io.input.SwappedDataInputStream: int skipBytes(int)> ==> <java.io.InputStream: long skip(long)>
VIRTUAL edge: $l2 = virtualinvoke $r1.<java.io.InputStream: long skip(long)>($l1) in <org.apache.commons.io.input.SwappedDataInputStream: int skipBytes(int)> ==> <java.io.FileInputStream: long skip(long)>
SPECIAL edge: specialinvoke r0.<org.apache.commons.io.output.ProxyOutputStream: void <init>(java.io.OutputStream)>(r1) in <org.apache.commons.io.output.CountingOutputStream: void <init>(java.io.OutputStream)> ==> <org.apache.commons.io.output.ProxyOutputStream: void <init>(java.io.OutputStream)>
SPECIAL edge: specialinvoke r0.<org.apache.commons.io.output.ProxyOutputStream: void write(byte[])>(r1) in <org.apache.commons.io.output.CountingOutputStream: void write(byte[])> ==> <org.apache.commons.io.output.ProxyOutputStream: void write(byte[])>
SPECIAL edge: specialinvoke r0.<org.apache.commons.io.output.ProxyOutputStream: void write(byte[],int,int)>(r1, i4, i0) in <org.apache.commons.io.output.CountingOutputStream: void write(byte[],int,int)> ==> <org.apache.commons.io.output.ProxyOutputStream: void write(byte[],int,int)>
SPECIAL edge: specialinvoke r0.<org.apache.commons.io.output.ProxyOutputStream: void write(int)>(i2) in <org.apache.commons.io.output.CountingOutputStream: void write(int)> ==> <org.apache.commons.io.output.ProxyOutputStream: void write(int)>
VIRTUAL edge: l0 = virtualinvoke r0.<org.apache.commons.io.output.CountingOutputStream: long getByteCount()>() in <org.apache.commons.io.output.CountingOutputStream: int getCount()> ==> <org.apache.commons.io.output.CountingOutputStream: long getByteCount()>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.output.CountingOutputStream: int getCount()> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The byte count ") in <org.apache.commons.io.output.CountingOutputStream: int getCount()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>(l0) in <org.apache.commons.io.output.CountingOutputStream: int getCount()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(long)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is too large to be converted to an int") in <org.apache.commons.io.output.CountingOutputStream: int getCount()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.output.CountingOutputStream: int getCount()> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r1.<java.lang.ArithmeticException: void <init>(java.lang.String)>($r6) in <org.apache.commons.io.output.CountingOutputStream: int getCount()> ==> <java.lang.ArithmeticException: void <init>(java.lang.String)>
VIRTUAL edge: l0 = virtualinvoke r0.<org.apache.commons.io.output.CountingOutputStream: long resetByteCount()>() in <org.apache.commons.io.output.CountingOutputStream: int resetCount()> ==> <org.apache.commons.io.output.CountingOutputStream: long resetByteCount()>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.output.CountingOutputStream: int resetCount()> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The byte count ") in <org.apache.commons.io.output.CountingOutputStream: int resetCount()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>(l0) in <org.apache.commons.io.output.CountingOutputStream: int resetCount()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(long)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is too large to be converted to an int") in <org.apache.commons.io.output.CountingOutputStream: int resetCount()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.output.CountingOutputStream: int resetCount()> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r1.<java.lang.ArithmeticException: void <init>(java.lang.String)>($r6) in <org.apache.commons.io.output.CountingOutputStream: int resetCount()> ==> <java.lang.ArithmeticException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.io.FilterOutputStream: void <init>(java.io.OutputStream)>(r1) in <org.apache.commons.io.output.ProxyOutputStream: void <init>(java.io.OutputStream)> ==> <java.io.FilterOutputStream: void <init>(java.io.OutputStream)>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void write(int)>(i0) in <org.apache.commons.io.output.ProxyOutputStream: void write(int)> ==> <java.io.PrintStream: void write(int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void write(int)>(i0) in <org.apache.commons.io.output.ProxyOutputStream: void write(int)> ==> <org.apache.commons.io.output.CountingOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void write(int)>(i0) in <org.apache.commons.io.output.ProxyOutputStream: void write(int)> ==> <org.apache.commons.io.output.NullOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void write(int)>(i0) in <org.apache.commons.io.output.ProxyOutputStream: void write(int)> ==> <org.apache.commons.io.output.ThresholdingOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void write(int)>(i0) in <org.apache.commons.io.output.ProxyOutputStream: void write(int)> ==> <org.apache.commons.io.output.ByteArrayOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void write(int)>(i0) in <org.apache.commons.io.output.ProxyOutputStream: void write(int)> ==> <java.io.FileOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void write(int)>(i0) in <org.apache.commons.io.output.ProxyOutputStream: void write(int)> ==> <java.io.FilterOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void write(int)>(i0) in <org.apache.commons.io.output.ProxyOutputStream: void write(int)> ==> <org.apache.commons.io.output.DemuxOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void write(int)>(i0) in <org.apache.commons.io.output.ProxyOutputStream: void write(int)> ==> <org.apache.commons.io.output.ProxyOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void write(int)>(i0) in <org.apache.commons.io.output.ProxyOutputStream: void write(int)> ==> <org.apache.commons.io.output.TeeOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[])>(r1) in <org.apache.commons.io.output.ProxyOutputStream: void write(byte[])> ==> <java.io.OutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[])>(r1) in <org.apache.commons.io.output.ProxyOutputStream: void write(byte[])> ==> <org.apache.commons.io.output.CountingOutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[])>(r1) in <org.apache.commons.io.output.ProxyOutputStream: void write(byte[])> ==> <org.apache.commons.io.output.NullOutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[])>(r1) in <org.apache.commons.io.output.ProxyOutputStream: void write(byte[])> ==> <org.apache.commons.io.output.ThresholdingOutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[])>(r1) in <org.apache.commons.io.output.ProxyOutputStream: void write(byte[])> ==> <org.apache.commons.io.output.ProxyOutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[])>(r1) in <org.apache.commons.io.output.ProxyOutputStream: void write(byte[])> ==> <org.apache.commons.io.output.TeeOutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1) in <org.apache.commons.io.output.ProxyOutputStream: void write(byte[],int,int)> ==> <java.io.OutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1) in <org.apache.commons.io.output.ProxyOutputStream: void write(byte[],int,int)> ==> <java.io.PrintStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1) in <org.apache.commons.io.output.ProxyOutputStream: void write(byte[],int,int)> ==> <org.apache.commons.io.output.CountingOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1) in <org.apache.commons.io.output.ProxyOutputStream: void write(byte[],int,int)> ==> <org.apache.commons.io.output.NullOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1) in <org.apache.commons.io.output.ProxyOutputStream: void write(byte[],int,int)> ==> <org.apache.commons.io.output.ThresholdingOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1) in <org.apache.commons.io.output.ProxyOutputStream: void write(byte[],int,int)> ==> <org.apache.commons.io.output.ByteArrayOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1) in <org.apache.commons.io.output.ProxyOutputStream: void write(byte[],int,int)> ==> <java.io.FileOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1) in <org.apache.commons.io.output.ProxyOutputStream: void write(byte[],int,int)> ==> <java.io.FilterOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1) in <org.apache.commons.io.output.ProxyOutputStream: void write(byte[],int,int)> ==> <org.apache.commons.io.output.ProxyOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1) in <org.apache.commons.io.output.ProxyOutputStream: void write(byte[],int,int)> ==> <org.apache.commons.io.output.TeeOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void flush()>() in <org.apache.commons.io.output.ProxyOutputStream: void flush()> ==> <java.io.OutputStream: void flush()>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void flush()>() in <org.apache.commons.io.output.ProxyOutputStream: void flush()> ==> <java.io.PrintStream: void flush()>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void flush()>() in <org.apache.commons.io.output.ProxyOutputStream: void flush()> ==> <org.apache.commons.io.output.ProxyOutputStream: void flush()>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void flush()>() in <org.apache.commons.io.output.ProxyOutputStream: void flush()> ==> <org.apache.commons.io.output.ThresholdingOutputStream: void flush()>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void flush()>() in <org.apache.commons.io.output.ProxyOutputStream: void flush()> ==> <java.io.FilterOutputStream: void flush()>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void flush()>() in <org.apache.commons.io.output.ProxyOutputStream: void flush()> ==> <org.apache.commons.io.output.DemuxOutputStream: void flush()>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void flush()>() in <org.apache.commons.io.output.ProxyOutputStream: void flush()> ==> <org.apache.commons.io.output.TeeOutputStream: void flush()>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void close()>() in <org.apache.commons.io.output.ProxyOutputStream: void close()> ==> <java.io.OutputStream: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void close()>() in <org.apache.commons.io.output.ProxyOutputStream: void close()> ==> <java.io.PrintStream: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void close()>() in <org.apache.commons.io.output.ProxyOutputStream: void close()> ==> <org.apache.commons.io.output.ProxyOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void close()>() in <org.apache.commons.io.output.ProxyOutputStream: void close()> ==> <org.apache.commons.io.output.DeferredFileOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void close()>() in <org.apache.commons.io.output.ProxyOutputStream: void close()> ==> <org.apache.commons.io.output.ByteArrayOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void close()>() in <org.apache.commons.io.output.ProxyOutputStream: void close()> ==> <java.io.FileOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void close()>() in <org.apache.commons.io.output.ProxyOutputStream: void close()> ==> <java.io.FilterOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void close()>() in <org.apache.commons.io.output.ProxyOutputStream: void close()> ==> <org.apache.commons.io.output.DemuxOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void close()>() in <org.apache.commons.io.output.ProxyOutputStream: void close()> ==> <org.apache.commons.io.output.TeeOutputStream: void close()>
SPECIAL edge: specialinvoke r0.<org.apache.commons.io.output.ThresholdingOutputStream: void <init>(int)>(i0) in <org.apache.commons.io.output.DeferredFileOutputStream: void <init>(int,java.io.File)> ==> <org.apache.commons.io.output.ThresholdingOutputStream: void <init>(int)>
SPECIAL edge: specialinvoke $r2.<org.apache.commons.io.output.ByteArrayOutputStream: void <init>()>() in <org.apache.commons.io.output.DeferredFileOutputStream: void <init>(int,java.io.File)> ==> <org.apache.commons.io.output.ByteArrayOutputStream: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke r0.<org.apache.commons.io.output.DeferredFileOutputStream: boolean isThresholdExceeded()>() in <org.apache.commons.io.output.DeferredFileOutputStream: boolean isInMemory()> ==> <org.apache.commons.io.output.ThresholdingOutputStream: boolean isThresholdExceeded()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] toByteArray()>() in <org.apache.commons.io.output.DeferredFileOutputStream: byte[] getData()> ==> <org.apache.commons.io.output.ByteArrayOutputStream: byte[] toByteArray()>
SPECIAL edge: specialinvoke r0.<org.apache.commons.io.output.ThresholdingOutputStream: void close()>() in <org.apache.commons.io.output.DeferredFileOutputStream: void close()> ==> <org.apache.commons.io.output.ThresholdingOutputStream: void close()>
SPECIAL edge: specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>("Stream not closed") in <org.apache.commons.io.output.DeferredFileOutputStream: void writeTo(java.io.OutputStream)> ==> <java.io.IOException: void <init>(java.lang.String)>
VIRTUAL edge: $z1 = virtualinvoke r0.<org.apache.commons.io.output.DeferredFileOutputStream: boolean isInMemory()>() in <org.apache.commons.io.output.DeferredFileOutputStream: void writeTo(java.io.OutputStream)> ==> <org.apache.commons.io.output.DeferredFileOutputStream: boolean isInMemory()>
VIRTUAL edge: virtualinvoke $r5.<org.apache.commons.io.output.ByteArrayOutputStream: void writeTo(java.io.OutputStream)>(r4) in <org.apache.commons.io.output.DeferredFileOutputStream: void writeTo(java.io.OutputStream)> ==> <org.apache.commons.io.output.ByteArrayOutputStream: void writeTo(java.io.OutputStream)>
SPECIAL edge: specialinvoke $r1.<java.io.FileInputStream: void <init>(java.io.File)>($r2) in <org.apache.commons.io.output.DeferredFileOutputStream: void writeTo(java.io.OutputStream)> ==> <java.io.FileInputStream: void <init>(java.io.File)>
SPECIAL edge: specialinvoke r0.<java.io.OutputStream: void <init>()>() in <org.apache.commons.io.output.ThresholdingOutputStream: void <init>(int)> ==> <java.io.OutputStream: void <init>()>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.io.output.ThresholdingOutputStream: void checkThreshold(int)>(1) in <org.apache.commons.io.output.ThresholdingOutputStream: void write(int)> ==> <org.apache.commons.io.output.ThresholdingOutputStream: void checkThreshold(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<org.apache.commons.io.output.ThresholdingOutputStream: java.io.OutputStream getStream()>() in <org.apache.commons.io.output.ThresholdingOutputStream: void write(int)> ==> <org.apache.commons.io.output.DeferredFileOutputStream: java.io.OutputStream getStream()>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void write(int)>(i0) in <org.apache.commons.io.output.ThresholdingOutputStream: void write(int)> ==> <java.io.PrintStream: void write(int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void write(int)>(i0) in <org.apache.commons.io.output.ThresholdingOutputStream: void write(int)> ==> <org.apache.commons.io.output.CountingOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void write(int)>(i0) in <org.apache.commons.io.output.ThresholdingOutputStream: void write(int)> ==> <org.apache.commons.io.output.NullOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void write(int)>(i0) in <org.apache.commons.io.output.ThresholdingOutputStream: void write(int)> ==> <org.apache.commons.io.output.ThresholdingOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void write(int)>(i0) in <org.apache.commons.io.output.ThresholdingOutputStream: void write(int)> ==> <org.apache.commons.io.output.ByteArrayOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void write(int)>(i0) in <org.apache.commons.io.output.ThresholdingOutputStream: void write(int)> ==> <java.io.FileOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void write(int)>(i0) in <org.apache.commons.io.output.ThresholdingOutputStream: void write(int)> ==> <java.io.FilterOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void write(int)>(i0) in <org.apache.commons.io.output.ThresholdingOutputStream: void write(int)> ==> <org.apache.commons.io.output.DemuxOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void write(int)>(i0) in <org.apache.commons.io.output.ThresholdingOutputStream: void write(int)> ==> <org.apache.commons.io.output.ProxyOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void write(int)>(i0) in <org.apache.commons.io.output.ThresholdingOutputStream: void write(int)> ==> <org.apache.commons.io.output.TeeOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.io.output.ThresholdingOutputStream: void checkThreshold(int)>($i0) in <org.apache.commons.io.output.ThresholdingOutputStream: void write(byte[])> ==> <org.apache.commons.io.output.ThresholdingOutputStream: void checkThreshold(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<org.apache.commons.io.output.ThresholdingOutputStream: java.io.OutputStream getStream()>() in <org.apache.commons.io.output.ThresholdingOutputStream: void write(byte[])> ==> <org.apache.commons.io.output.DeferredFileOutputStream: java.io.OutputStream getStream()>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[])>(r1) in <org.apache.commons.io.output.ThresholdingOutputStream: void write(byte[])> ==> <java.io.OutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[])>(r1) in <org.apache.commons.io.output.ThresholdingOutputStream: void write(byte[])> ==> <org.apache.commons.io.output.CountingOutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[])>(r1) in <org.apache.commons.io.output.ThresholdingOutputStream: void write(byte[])> ==> <org.apache.commons.io.output.NullOutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[])>(r1) in <org.apache.commons.io.output.ThresholdingOutputStream: void write(byte[])> ==> <org.apache.commons.io.output.ThresholdingOutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[])>(r1) in <org.apache.commons.io.output.ThresholdingOutputStream: void write(byte[])> ==> <org.apache.commons.io.output.ProxyOutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[])>(r1) in <org.apache.commons.io.output.ThresholdingOutputStream: void write(byte[])> ==> <org.apache.commons.io.output.TeeOutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.io.output.ThresholdingOutputStream: void checkThreshold(int)>(i0) in <org.apache.commons.io.output.ThresholdingOutputStream: void write(byte[],int,int)> ==> <org.apache.commons.io.output.ThresholdingOutputStream: void checkThreshold(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<org.apache.commons.io.output.ThresholdingOutputStream: java.io.OutputStream getStream()>() in <org.apache.commons.io.output.ThresholdingOutputStream: void write(byte[],int,int)> ==> <org.apache.commons.io.output.DeferredFileOutputStream: java.io.OutputStream getStream()>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void write(byte[],int,int)>(r2, i1, i0) in <org.apache.commons.io.output.ThresholdingOutputStream: void write(byte[],int,int)> ==> <java.io.OutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void write(byte[],int,int)>(r2, i1, i0) in <org.apache.commons.io.output.ThresholdingOutputStream: void write(byte[],int,int)> ==> <java.io.PrintStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void write(byte[],int,int)>(r2, i1, i0) in <org.apache.commons.io.output.ThresholdingOutputStream: void write(byte[],int,int)> ==> <org.apache.commons.io.output.CountingOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void write(byte[],int,int)>(r2, i1, i0) in <org.apache.commons.io.output.ThresholdingOutputStream: void write(byte[],int,int)> ==> <org.apache.commons.io.output.NullOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void write(byte[],int,int)>(r2, i1, i0) in <org.apache.commons.io.output.ThresholdingOutputStream: void write(byte[],int,int)> ==> <org.apache.commons.io.output.ThresholdingOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void write(byte[],int,int)>(r2, i1, i0) in <org.apache.commons.io.output.ThresholdingOutputStream: void write(byte[],int,int)> ==> <org.apache.commons.io.output.ByteArrayOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void write(byte[],int,int)>(r2, i1, i0) in <org.apache.commons.io.output.ThresholdingOutputStream: void write(byte[],int,int)> ==> <java.io.FileOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void write(byte[],int,int)>(r2, i1, i0) in <org.apache.commons.io.output.ThresholdingOutputStream: void write(byte[],int,int)> ==> <java.io.FilterOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void write(byte[],int,int)>(r2, i1, i0) in <org.apache.commons.io.output.ThresholdingOutputStream: void write(byte[],int,int)> ==> <org.apache.commons.io.output.ProxyOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void write(byte[],int,int)>(r2, i1, i0) in <org.apache.commons.io.output.ThresholdingOutputStream: void write(byte[],int,int)> ==> <org.apache.commons.io.output.TeeOutputStream: void write(byte[],int,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<org.apache.commons.io.output.ThresholdingOutputStream: java.io.OutputStream getStream()>() in <org.apache.commons.io.output.ThresholdingOutputStream: void flush()> ==> <org.apache.commons.io.output.DeferredFileOutputStream: java.io.OutputStream getStream()>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void flush()>() in <org.apache.commons.io.output.ThresholdingOutputStream: void flush()> ==> <java.io.OutputStream: void flush()>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void flush()>() in <org.apache.commons.io.output.ThresholdingOutputStream: void flush()> ==> <java.io.PrintStream: void flush()>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void flush()>() in <org.apache.commons.io.output.ThresholdingOutputStream: void flush()> ==> <org.apache.commons.io.output.ProxyOutputStream: void flush()>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void flush()>() in <org.apache.commons.io.output.ThresholdingOutputStream: void flush()> ==> <org.apache.commons.io.output.ThresholdingOutputStream: void flush()>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void flush()>() in <org.apache.commons.io.output.ThresholdingOutputStream: void flush()> ==> <java.io.FilterOutputStream: void flush()>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void flush()>() in <org.apache.commons.io.output.ThresholdingOutputStream: void flush()> ==> <org.apache.commons.io.output.DemuxOutputStream: void flush()>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void flush()>() in <org.apache.commons.io.output.ThresholdingOutputStream: void flush()> ==> <org.apache.commons.io.output.TeeOutputStream: void flush()>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.io.output.ThresholdingOutputStream: void flush()>() in <org.apache.commons.io.output.ThresholdingOutputStream: void close()> ==> <org.apache.commons.io.output.ThresholdingOutputStream: void flush()>
VIRTUAL edge: $r1 = virtualinvoke r0.<org.apache.commons.io.output.ThresholdingOutputStream: java.io.OutputStream getStream()>() in <org.apache.commons.io.output.ThresholdingOutputStream: void close()> ==> <org.apache.commons.io.output.DeferredFileOutputStream: java.io.OutputStream getStream()>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void close()>() in <org.apache.commons.io.output.ThresholdingOutputStream: void close()> ==> <java.io.OutputStream: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void close()>() in <org.apache.commons.io.output.ThresholdingOutputStream: void close()> ==> <java.io.PrintStream: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void close()>() in <org.apache.commons.io.output.ThresholdingOutputStream: void close()> ==> <org.apache.commons.io.output.ProxyOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void close()>() in <org.apache.commons.io.output.ThresholdingOutputStream: void close()> ==> <org.apache.commons.io.output.DeferredFileOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void close()>() in <org.apache.commons.io.output.ThresholdingOutputStream: void close()> ==> <org.apache.commons.io.output.ByteArrayOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void close()>() in <org.apache.commons.io.output.ThresholdingOutputStream: void close()> ==> <java.io.FileOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void close()>() in <org.apache.commons.io.output.ThresholdingOutputStream: void close()> ==> <java.io.FilterOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void close()>() in <org.apache.commons.io.output.ThresholdingOutputStream: void close()> ==> <org.apache.commons.io.output.DemuxOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void close()>() in <org.apache.commons.io.output.ThresholdingOutputStream: void close()> ==> <org.apache.commons.io.output.TeeOutputStream: void close()>
SPECIAL edge: specialinvoke r0.<java.io.OutputStream: void <init>()>() in <org.apache.commons.io.output.DemuxOutputStream: void <init>()> ==> <java.io.OutputStream: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.InheritableThreadLocal: void <init>()>() in <org.apache.commons.io.output.DemuxOutputStream: void <init>()> ==> <java.lang.InheritableThreadLocal: void <init>()>
SPECIAL edge: r1 = specialinvoke r0.<org.apache.commons.io.output.DemuxOutputStream: java.io.OutputStream getStream()>() in <org.apache.commons.io.output.DemuxOutputStream: java.io.OutputStream bindStream(java.io.OutputStream)> ==> <org.apache.commons.io.output.DemuxOutputStream: java.io.OutputStream getStream()>
VIRTUAL edge: virtualinvoke $r3.<java.lang.InheritableThreadLocal: void set(java.lang.Object)>(r2) in <org.apache.commons.io.output.DemuxOutputStream: java.io.OutputStream bindStream(java.io.OutputStream)> ==> <java.lang.ThreadLocal: void set(java.lang.Object)>
SPECIAL edge: r1 = specialinvoke r0.<org.apache.commons.io.output.DemuxOutputStream: java.io.OutputStream getStream()>() in <org.apache.commons.io.output.DemuxOutputStream: void close()> ==> <org.apache.commons.io.output.DemuxOutputStream: java.io.OutputStream getStream()>
VIRTUAL edge: virtualinvoke r1.<java.io.OutputStream: void close()>() in <org.apache.commons.io.output.DemuxOutputStream: void close()> ==> <java.io.OutputStream: void close()>
VIRTUAL edge: virtualinvoke r1.<java.io.OutputStream: void close()>() in <org.apache.commons.io.output.DemuxOutputStream: void close()> ==> <java.io.PrintStream: void close()>
VIRTUAL edge: virtualinvoke r1.<java.io.OutputStream: void close()>() in <org.apache.commons.io.output.DemuxOutputStream: void close()> ==> <org.apache.commons.io.output.ProxyOutputStream: void close()>
VIRTUAL edge: virtualinvoke r1.<java.io.OutputStream: void close()>() in <org.apache.commons.io.output.DemuxOutputStream: void close()> ==> <org.apache.commons.io.output.DeferredFileOutputStream: void close()>
VIRTUAL edge: virtualinvoke r1.<java.io.OutputStream: void close()>() in <org.apache.commons.io.output.DemuxOutputStream: void close()> ==> <org.apache.commons.io.output.ByteArrayOutputStream: void close()>
VIRTUAL edge: virtualinvoke r1.<java.io.OutputStream: void close()>() in <org.apache.commons.io.output.DemuxOutputStream: void close()> ==> <java.io.FileOutputStream: void close()>
VIRTUAL edge: virtualinvoke r1.<java.io.OutputStream: void close()>() in <org.apache.commons.io.output.DemuxOutputStream: void close()> ==> <java.io.FilterOutputStream: void close()>
VIRTUAL edge: virtualinvoke r1.<java.io.OutputStream: void close()>() in <org.apache.commons.io.output.DemuxOutputStream: void close()> ==> <org.apache.commons.io.output.DemuxOutputStream: void close()>
VIRTUAL edge: virtualinvoke r1.<java.io.OutputStream: void close()>() in <org.apache.commons.io.output.DemuxOutputStream: void close()> ==> <org.apache.commons.io.output.TeeOutputStream: void close()>
SPECIAL edge: r1 = specialinvoke r0.<org.apache.commons.io.output.DemuxOutputStream: java.io.OutputStream getStream()>() in <org.apache.commons.io.output.DemuxOutputStream: void flush()> ==> <org.apache.commons.io.output.DemuxOutputStream: java.io.OutputStream getStream()>
VIRTUAL edge: virtualinvoke r1.<java.io.OutputStream: void flush()>() in <org.apache.commons.io.output.DemuxOutputStream: void flush()> ==> <java.io.OutputStream: void flush()>
VIRTUAL edge: virtualinvoke r1.<java.io.OutputStream: void flush()>() in <org.apache.commons.io.output.DemuxOutputStream: void flush()> ==> <java.io.PrintStream: void flush()>
VIRTUAL edge: virtualinvoke r1.<java.io.OutputStream: void flush()>() in <org.apache.commons.io.output.DemuxOutputStream: void flush()> ==> <org.apache.commons.io.output.ProxyOutputStream: void flush()>
VIRTUAL edge: virtualinvoke r1.<java.io.OutputStream: void flush()>() in <org.apache.commons.io.output.DemuxOutputStream: void flush()> ==> <org.apache.commons.io.output.ThresholdingOutputStream: void flush()>
VIRTUAL edge: virtualinvoke r1.<java.io.OutputStream: void flush()>() in <org.apache.commons.io.output.DemuxOutputStream: void flush()> ==> <java.io.FilterOutputStream: void flush()>
VIRTUAL edge: virtualinvoke r1.<java.io.OutputStream: void flush()>() in <org.apache.commons.io.output.DemuxOutputStream: void flush()> ==> <org.apache.commons.io.output.DemuxOutputStream: void flush()>
VIRTUAL edge: virtualinvoke r1.<java.io.OutputStream: void flush()>() in <org.apache.commons.io.output.DemuxOutputStream: void flush()> ==> <org.apache.commons.io.output.TeeOutputStream: void flush()>
SPECIAL edge: r1 = specialinvoke r0.<org.apache.commons.io.output.DemuxOutputStream: java.io.OutputStream getStream()>() in <org.apache.commons.io.output.DemuxOutputStream: void write(int)> ==> <org.apache.commons.io.output.DemuxOutputStream: java.io.OutputStream getStream()>
VIRTUAL edge: virtualinvoke r1.<java.io.OutputStream: void write(int)>(i0) in <org.apache.commons.io.output.DemuxOutputStream: void write(int)> ==> <java.io.PrintStream: void write(int)>
VIRTUAL edge: virtualinvoke r1.<java.io.OutputStream: void write(int)>(i0) in <org.apache.commons.io.output.DemuxOutputStream: void write(int)> ==> <org.apache.commons.io.output.CountingOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r1.<java.io.OutputStream: void write(int)>(i0) in <org.apache.commons.io.output.DemuxOutputStream: void write(int)> ==> <org.apache.commons.io.output.NullOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r1.<java.io.OutputStream: void write(int)>(i0) in <org.apache.commons.io.output.DemuxOutputStream: void write(int)> ==> <org.apache.commons.io.output.ThresholdingOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r1.<java.io.OutputStream: void write(int)>(i0) in <org.apache.commons.io.output.DemuxOutputStream: void write(int)> ==> <org.apache.commons.io.output.ByteArrayOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r1.<java.io.OutputStream: void write(int)>(i0) in <org.apache.commons.io.output.DemuxOutputStream: void write(int)> ==> <java.io.FileOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r1.<java.io.OutputStream: void write(int)>(i0) in <org.apache.commons.io.output.DemuxOutputStream: void write(int)> ==> <java.io.FilterOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r1.<java.io.OutputStream: void write(int)>(i0) in <org.apache.commons.io.output.DemuxOutputStream: void write(int)> ==> <org.apache.commons.io.output.DemuxOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r1.<java.io.OutputStream: void write(int)>(i0) in <org.apache.commons.io.output.DemuxOutputStream: void write(int)> ==> <org.apache.commons.io.output.ProxyOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke r1.<java.io.OutputStream: void write(int)>(i0) in <org.apache.commons.io.output.DemuxOutputStream: void write(int)> ==> <org.apache.commons.io.output.TeeOutputStream: void write(int)>
SPECIAL edge: specialinvoke r0.<org.apache.commons.io.output.LockableFileWriter: void <init>(java.lang.String,boolean,java.lang.String)>(r1, 0, null) in <org.apache.commons.io.output.LockableFileWriter: void <init>(java.lang.String)> ==> <org.apache.commons.io.output.LockableFileWriter: void <init>(java.lang.String,boolean,java.lang.String)>
SPECIAL edge: specialinvoke r0.<org.apache.commons.io.output.LockableFileWriter: void <init>(java.lang.String,boolean,java.lang.String)>(r1, z0, null) in <org.apache.commons.io.output.LockableFileWriter: void <init>(java.lang.String,boolean)> ==> <org.apache.commons.io.output.LockableFileWriter: void <init>(java.lang.String,boolean,java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>(r2) in <org.apache.commons.io.output.LockableFileWriter: void <init>(java.lang.String,boolean,java.lang.String)> ==> <java.io.File: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File,boolean,java.lang.String)>($r1, z0, r3) in <org.apache.commons.io.output.LockableFileWriter: void <init>(java.lang.String,boolean,java.lang.String)> ==> <org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File,boolean,java.lang.String)>
SPECIAL edge: specialinvoke r0.<org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File,boolean,java.lang.String)>(r1, 0, null) in <org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File)> ==> <org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File,boolean,java.lang.String)>
SPECIAL edge: specialinvoke r0.<org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File,boolean,java.lang.String)>(r1, z0, null) in <org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File,boolean)> ==> <org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File,boolean,java.lang.String)>
SPECIAL edge: specialinvoke r0.<org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File,java.lang.String,boolean,java.lang.String)>(r1, null, z0, r2) in <org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File,boolean,java.lang.String)> ==> <org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File,java.lang.String,boolean,java.lang.String)>
SPECIAL edge: specialinvoke r0.<org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File,java.lang.String,boolean,java.lang.String)>(r1, r2, 0, null) in <org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File,java.lang.String)> ==> <org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File,java.lang.String,boolean,java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.io.Writer: void <init>()>() in <org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File,java.lang.String,boolean,java.lang.String)> ==> <java.io.Writer: void <init>()>
SPECIAL edge: specialinvoke r0.<org.apache.commons.io.output.LockableFileWriter: void testLockDir(java.io.File)>($r2) in <org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File,java.lang.String,boolean,java.lang.String)> ==> <org.apache.commons.io.output.LockableFileWriter: void testLockDir(java.io.File)>
SPECIAL edge: specialinvoke r0.<org.apache.commons.io.output.LockableFileWriter: void createLock()>() in <org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File,java.lang.String,boolean,java.lang.String)> ==> <org.apache.commons.io.output.LockableFileWriter: void createLock()>
SPECIAL edge: $r11 = specialinvoke r0.<org.apache.commons.io.output.LockableFileWriter: java.io.Writer initWriter(java.io.File,java.lang.String,boolean)>(r16, r10, z1) in <org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File,java.lang.String,boolean,java.lang.String)> ==> <org.apache.commons.io.output.LockableFileWriter: java.io.Writer initWriter(java.io.File,java.lang.String,boolean)>
VIRTUAL edge: r16 = virtualinvoke r14.<java.io.File: java.io.File getAbsoluteFile()>() in <org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File,java.lang.String,boolean,java.lang.String)> ==> <java.io.File: java.io.File getAbsoluteFile()>
VIRTUAL edge: $r1 = virtualinvoke r16.<java.io.File: java.io.File getParentFile()>() in <org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File,java.lang.String,boolean,java.lang.String)> ==> <java.io.File: java.io.File getParentFile()>
VIRTUAL edge: $r13 = virtualinvoke r16.<java.io.File: java.io.File getParentFile()>() in <org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File,java.lang.String,boolean,java.lang.String)> ==> <java.io.File: java.io.File getParentFile()>
VIRTUAL edge: $z0 = virtualinvoke r16.<java.io.File: boolean isDirectory()>() in <org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File,java.lang.String,boolean,java.lang.String)> ==> <java.io.File: boolean isDirectory()>
VIRTUAL edge: $r6 = virtualinvoke r16.<java.io.File: java.lang.String getName()>() in <org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File,java.lang.String,boolean,java.lang.String)> ==> <java.io.File: java.lang.String getName()>
SPECIAL edge: specialinvoke $r12.<java.io.IOException: void <init>(java.lang.String)>("File specified is a directory") in <org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File,java.lang.String,boolean,java.lang.String)> ==> <java.io.IOException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>(r15) in <org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File,java.lang.String,boolean,java.lang.String)> ==> <java.io.File: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r5.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File,java.lang.String,boolean,java.lang.String)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6) in <org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File,java.lang.String,boolean,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".lck") in <org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File,java.lang.String,boolean,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File,java.lang.String,boolean,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, $r9) in <org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File,java.lang.String,boolean,java.lang.String)> ==> <java.io.File: void <init>(java.io.File,java.lang.String)>
STATIC edge: $r15 = staticinvoke <org.apache.commons.io.output.LockableFileWriter: java.lang.Class class$(java.lang.String)>("org.apache.commons.io.output.LockableFileWriter") in <org.apache.commons.io.output.LockableFileWriter: void createLock()> ==> <org.apache.commons.io.output.LockableFileWriter: java.lang.Class class$(java.lang.String)>
CLINIT edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Writer)>(null) in <org.apache.commons.io.output.LockableFileWriter: java.io.Writer initWriter(java.io.File,java.lang.String,boolean)> ==> <org.apache.commons.io.IOUtils: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r12) in <org.apache.commons.io.output.LockableFileWriter: java.io.Writer initWriter(java.io.File,java.lang.String,boolean)> ==> <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Writer)>(null) in <org.apache.commons.io.output.LockableFileWriter: java.io.Writer initWriter(java.io.File,java.lang.String,boolean)> ==> <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Writer)>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r12) in <org.apache.commons.io.output.LockableFileWriter: java.io.Writer initWriter(java.io.File,java.lang.String,boolean)> ==> <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Writer)>(null) in <org.apache.commons.io.output.LockableFileWriter: java.io.Writer initWriter(java.io.File,java.lang.String,boolean)> ==> <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Writer)>
CLINIT edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Writer)>(null) in <org.apache.commons.io.output.LockableFileWriter: java.io.Writer initWriter(java.io.File,java.lang.String,boolean)> ==> <org.apache.commons.io.IOUtils: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0) in <org.apache.commons.io.output.LockableFileWriter: java.lang.Class class$(java.lang.String)> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
VIRTUAL edge: virtualinvoke $r1.<java.io.Writer: void close()>() in <org.apache.commons.io.output.LockableFileWriter: void close()> ==> <java.io.PrintWriter: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.Writer: void close()>() in <org.apache.commons.io.output.LockableFileWriter: void close()> ==> <org.apache.commons.io.output.ProxyWriter: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.Writer: void close()>() in <org.apache.commons.io.output.LockableFileWriter: void close()> ==> <org.apache.commons.io.output.NullWriter: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.Writer: void close()>() in <org.apache.commons.io.output.LockableFileWriter: void close()> ==> <java.io.StringWriter: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.Writer: void close()>() in <org.apache.commons.io.output.LockableFileWriter: void close()> ==> <org.apache.commons.io.output.LockableFileWriter: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.Writer: void close()>() in <org.apache.commons.io.output.LockableFileWriter: void close()> ==> <java.io.OutputStreamWriter: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.Writer: void close()>() in <org.apache.commons.io.output.LockableFileWriter: void close()> ==> <java.io.CharArrayWriter: void close()>
VIRTUAL edge: virtualinvoke $r2.<java.io.File: boolean delete()>() in <org.apache.commons.io.output.LockableFileWriter: void close()> ==> <java.io.File: boolean delete()>
VIRTUAL edge: virtualinvoke $r5.<java.io.File: boolean delete()>() in <org.apache.commons.io.output.LockableFileWriter: void close()> ==> <java.io.File: boolean delete()>
VIRTUAL edge: virtualinvoke $r1.<java.io.Writer: void write(int)>(i0) in <org.apache.commons.io.output.LockableFileWriter: void write(int)> ==> <java.io.PrintWriter: void write(int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.Writer: void write(int)>(i0) in <org.apache.commons.io.output.LockableFileWriter: void write(int)> ==> <org.apache.commons.io.output.ProxyWriter: void write(int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.Writer: void write(int)>(i0) in <org.apache.commons.io.output.LockableFileWriter: void write(int)> ==> <org.apache.commons.io.output.NullWriter: void write(int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.Writer: void write(int)>(i0) in <org.apache.commons.io.output.LockableFileWriter: void write(int)> ==> <java.io.StringWriter: void write(int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.Writer: void write(int)>(i0) in <org.apache.commons.io.output.LockableFileWriter: void write(int)> ==> <java.io.Writer: void write(int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.Writer: void write(int)>(i0) in <org.apache.commons.io.output.LockableFileWriter: void write(int)> ==> <org.apache.commons.io.output.LockableFileWriter: void write(int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.Writer: void write(int)>(i0) in <org.apache.commons.io.output.LockableFileWriter: void write(int)> ==> <java.io.OutputStreamWriter: void write(int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.Writer: void write(int)>(i0) in <org.apache.commons.io.output.LockableFileWriter: void write(int)> ==> <java.io.CharArrayWriter: void write(int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.Writer: void write(char[])>(r1) in <org.apache.commons.io.output.LockableFileWriter: void write(char[])> ==> <java.io.PrintWriter: void write(char[])>
VIRTUAL edge: virtualinvoke $r2.<java.io.Writer: void write(char[])>(r1) in <org.apache.commons.io.output.LockableFileWriter: void write(char[])> ==> <org.apache.commons.io.output.ProxyWriter: void write(char[])>
VIRTUAL edge: virtualinvoke $r2.<java.io.Writer: void write(char[])>(r1) in <org.apache.commons.io.output.LockableFileWriter: void write(char[])> ==> <org.apache.commons.io.output.NullWriter: void write(char[])>
VIRTUAL edge: virtualinvoke $r2.<java.io.Writer: void write(char[])>(r1) in <org.apache.commons.io.output.LockableFileWriter: void write(char[])> ==> <java.io.Writer: void write(char[])>
VIRTUAL edge: virtualinvoke $r2.<java.io.Writer: void write(char[])>(r1) in <org.apache.commons.io.output.LockableFileWriter: void write(char[])> ==> <org.apache.commons.io.output.LockableFileWriter: void write(char[])>
VIRTUAL edge: virtualinvoke $r2.<java.io.Writer: void write(char[],int,int)>(r1, i0, i1) in <org.apache.commons.io.output.LockableFileWriter: void write(char[],int,int)> ==> <java.io.PrintWriter: void write(char[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.Writer: void write(char[],int,int)>(r1, i0, i1) in <org.apache.commons.io.output.LockableFileWriter: void write(char[],int,int)> ==> <org.apache.commons.io.output.ProxyWriter: void write(char[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.Writer: void write(char[],int,int)>(r1, i0, i1) in <org.apache.commons.io.output.LockableFileWriter: void write(char[],int,int)> ==> <org.apache.commons.io.output.NullWriter: void write(char[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.Writer: void write(char[],int,int)>(r1, i0, i1) in <org.apache.commons.io.output.LockableFileWriter: void write(char[],int,int)> ==> <java.io.StringWriter: void write(char[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.Writer: void write(char[],int,int)>(r1, i0, i1) in <org.apache.commons.io.output.LockableFileWriter: void write(char[],int,int)> ==> <org.apache.commons.io.output.LockableFileWriter: void write(char[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.Writer: void write(char[],int,int)>(r1, i0, i1) in <org.apache.commons.io.output.LockableFileWriter: void write(char[],int,int)> ==> <java.io.OutputStreamWriter: void write(char[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.Writer: void write(char[],int,int)>(r1, i0, i1) in <org.apache.commons.io.output.LockableFileWriter: void write(char[],int,int)> ==> <java.io.CharArrayWriter: void write(char[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>(r1) in <org.apache.commons.io.output.LockableFileWriter: void write(java.lang.String)> ==> <java.io.PrintWriter: void write(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>(r1) in <org.apache.commons.io.output.LockableFileWriter: void write(java.lang.String)> ==> <org.apache.commons.io.output.ProxyWriter: void write(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>(r1) in <org.apache.commons.io.output.LockableFileWriter: void write(java.lang.String)> ==> <org.apache.commons.io.output.NullWriter: void write(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>(r1) in <org.apache.commons.io.output.LockableFileWriter: void write(java.lang.String)> ==> <java.io.StringWriter: void write(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>(r1) in <org.apache.commons.io.output.LockableFileWriter: void write(java.lang.String)> ==> <java.io.Writer: void write(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>(r1) in <org.apache.commons.io.output.LockableFileWriter: void write(java.lang.String)> ==> <org.apache.commons.io.output.LockableFileWriter: void write(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<java.io.Writer: void write(java.lang.String,int,int)>(r1, i0, i1) in <org.apache.commons.io.output.LockableFileWriter: void write(java.lang.String,int,int)> ==> <java.io.PrintWriter: void write(java.lang.String,int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.Writer: void write(java.lang.String,int,int)>(r1, i0, i1) in <org.apache.commons.io.output.LockableFileWriter: void write(java.lang.String,int,int)> ==> <org.apache.commons.io.output.ProxyWriter: void write(java.lang.String,int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.Writer: void write(java.lang.String,int,int)>(r1, i0, i1) in <org.apache.commons.io.output.LockableFileWriter: void write(java.lang.String,int,int)> ==> <org.apache.commons.io.output.NullWriter: void write(java.lang.String,int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.Writer: void write(java.lang.String,int,int)>(r1, i0, i1) in <org.apache.commons.io.output.LockableFileWriter: void write(java.lang.String,int,int)> ==> <java.io.StringWriter: void write(java.lang.String,int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.Writer: void write(java.lang.String,int,int)>(r1, i0, i1) in <org.apache.commons.io.output.LockableFileWriter: void write(java.lang.String,int,int)> ==> <java.io.Writer: void write(java.lang.String,int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.Writer: void write(java.lang.String,int,int)>(r1, i0, i1) in <org.apache.commons.io.output.LockableFileWriter: void write(java.lang.String,int,int)> ==> <org.apache.commons.io.output.LockableFileWriter: void write(java.lang.String,int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.Writer: void write(java.lang.String,int,int)>(r1, i0, i1) in <org.apache.commons.io.output.LockableFileWriter: void write(java.lang.String,int,int)> ==> <java.io.OutputStreamWriter: void write(java.lang.String,int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.Writer: void write(java.lang.String,int,int)>(r1, i0, i1) in <org.apache.commons.io.output.LockableFileWriter: void write(java.lang.String,int,int)> ==> <java.io.CharArrayWriter: void write(java.lang.String,int,int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.Writer: void flush()>() in <org.apache.commons.io.output.LockableFileWriter: void flush()> ==> <java.io.PrintWriter: void flush()>
VIRTUAL edge: virtualinvoke $r1.<java.io.Writer: void flush()>() in <org.apache.commons.io.output.LockableFileWriter: void flush()> ==> <org.apache.commons.io.output.ProxyWriter: void flush()>
VIRTUAL edge: virtualinvoke $r1.<java.io.Writer: void flush()>() in <org.apache.commons.io.output.LockableFileWriter: void flush()> ==> <org.apache.commons.io.output.NullWriter: void flush()>
VIRTUAL edge: virtualinvoke $r1.<java.io.Writer: void flush()>() in <org.apache.commons.io.output.LockableFileWriter: void flush()> ==> <java.io.StringWriter: void flush()>
VIRTUAL edge: virtualinvoke $r1.<java.io.Writer: void flush()>() in <org.apache.commons.io.output.LockableFileWriter: void flush()> ==> <org.apache.commons.io.output.LockableFileWriter: void flush()>
VIRTUAL edge: virtualinvoke $r1.<java.io.Writer: void flush()>() in <org.apache.commons.io.output.LockableFileWriter: void flush()> ==> <java.io.OutputStreamWriter: void flush()>
VIRTUAL edge: virtualinvoke $r1.<java.io.Writer: void flush()>() in <org.apache.commons.io.output.LockableFileWriter: void flush()> ==> <java.io.CharArrayWriter: void flush()>
SPECIAL edge: specialinvoke r0.<java.io.Writer: void <init>()>() in <org.apache.commons.io.output.NullWriter: void <init>()> ==> <java.io.Writer: void <init>()>
SPECIAL edge: specialinvoke r0.<java.io.FilterWriter: void <init>(java.io.Writer)>(r1) in <org.apache.commons.io.output.ProxyWriter: void <init>(java.io.Writer)> ==> <java.io.FilterWriter: void <init>(java.io.Writer)>
VIRTUAL edge: virtualinvoke $r1.<java.io.Writer: void write(int)>(i0) in <org.apache.commons.io.output.ProxyWriter: void write(int)> ==> <java.io.PrintWriter: void write(int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.Writer: void write(int)>(i0) in <org.apache.commons.io.output.ProxyWriter: void write(int)> ==> <org.apache.commons.io.output.ProxyWriter: void write(int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.Writer: void write(int)>(i0) in <org.apache.commons.io.output.ProxyWriter: void write(int)> ==> <org.apache.commons.io.output.NullWriter: void write(int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.Writer: void write(int)>(i0) in <org.apache.commons.io.output.ProxyWriter: void write(int)> ==> <java.io.StringWriter: void write(int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.Writer: void write(int)>(i0) in <org.apache.commons.io.output.ProxyWriter: void write(int)> ==> <java.io.Writer: void write(int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.Writer: void write(int)>(i0) in <org.apache.commons.io.output.ProxyWriter: void write(int)> ==> <org.apache.commons.io.output.LockableFileWriter: void write(int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.Writer: void write(int)>(i0) in <org.apache.commons.io.output.ProxyWriter: void write(int)> ==> <java.io.OutputStreamWriter: void write(int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.Writer: void write(int)>(i0) in <org.apache.commons.io.output.ProxyWriter: void write(int)> ==> <java.io.CharArrayWriter: void write(int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.Writer: void write(char[])>(r1) in <org.apache.commons.io.output.ProxyWriter: void write(char[])> ==> <java.io.PrintWriter: void write(char[])>
VIRTUAL edge: virtualinvoke $r2.<java.io.Writer: void write(char[])>(r1) in <org.apache.commons.io.output.ProxyWriter: void write(char[])> ==> <org.apache.commons.io.output.ProxyWriter: void write(char[])>
VIRTUAL edge: virtualinvoke $r2.<java.io.Writer: void write(char[])>(r1) in <org.apache.commons.io.output.ProxyWriter: void write(char[])> ==> <org.apache.commons.io.output.NullWriter: void write(char[])>
VIRTUAL edge: virtualinvoke $r2.<java.io.Writer: void write(char[])>(r1) in <org.apache.commons.io.output.ProxyWriter: void write(char[])> ==> <java.io.Writer: void write(char[])>
VIRTUAL edge: virtualinvoke $r2.<java.io.Writer: void write(char[])>(r1) in <org.apache.commons.io.output.ProxyWriter: void write(char[])> ==> <org.apache.commons.io.output.LockableFileWriter: void write(char[])>
VIRTUAL edge: virtualinvoke $r2.<java.io.Writer: void write(char[],int,int)>(r1, i0, i1) in <org.apache.commons.io.output.ProxyWriter: void write(char[],int,int)> ==> <java.io.PrintWriter: void write(char[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.Writer: void write(char[],int,int)>(r1, i0, i1) in <org.apache.commons.io.output.ProxyWriter: void write(char[],int,int)> ==> <org.apache.commons.io.output.ProxyWriter: void write(char[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.Writer: void write(char[],int,int)>(r1, i0, i1) in <org.apache.commons.io.output.ProxyWriter: void write(char[],int,int)> ==> <org.apache.commons.io.output.NullWriter: void write(char[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.Writer: void write(char[],int,int)>(r1, i0, i1) in <org.apache.commons.io.output.ProxyWriter: void write(char[],int,int)> ==> <java.io.StringWriter: void write(char[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.Writer: void write(char[],int,int)>(r1, i0, i1) in <org.apache.commons.io.output.ProxyWriter: void write(char[],int,int)> ==> <org.apache.commons.io.output.LockableFileWriter: void write(char[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.Writer: void write(char[],int,int)>(r1, i0, i1) in <org.apache.commons.io.output.ProxyWriter: void write(char[],int,int)> ==> <java.io.OutputStreamWriter: void write(char[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.Writer: void write(char[],int,int)>(r1, i0, i1) in <org.apache.commons.io.output.ProxyWriter: void write(char[],int,int)> ==> <java.io.CharArrayWriter: void write(char[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>(r1) in <org.apache.commons.io.output.ProxyWriter: void write(java.lang.String)> ==> <java.io.PrintWriter: void write(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>(r1) in <org.apache.commons.io.output.ProxyWriter: void write(java.lang.String)> ==> <org.apache.commons.io.output.ProxyWriter: void write(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>(r1) in <org.apache.commons.io.output.ProxyWriter: void write(java.lang.String)> ==> <org.apache.commons.io.output.NullWriter: void write(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>(r1) in <org.apache.commons.io.output.ProxyWriter: void write(java.lang.String)> ==> <java.io.StringWriter: void write(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>(r1) in <org.apache.commons.io.output.ProxyWriter: void write(java.lang.String)> ==> <java.io.Writer: void write(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>(r1) in <org.apache.commons.io.output.ProxyWriter: void write(java.lang.String)> ==> <org.apache.commons.io.output.LockableFileWriter: void write(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<java.io.Writer: void write(java.lang.String,int,int)>(r1, i0, i1) in <org.apache.commons.io.output.ProxyWriter: void write(java.lang.String,int,int)> ==> <java.io.PrintWriter: void write(java.lang.String,int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.Writer: void write(java.lang.String,int,int)>(r1, i0, i1) in <org.apache.commons.io.output.ProxyWriter: void write(java.lang.String,int,int)> ==> <org.apache.commons.io.output.ProxyWriter: void write(java.lang.String,int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.Writer: void write(java.lang.String,int,int)>(r1, i0, i1) in <org.apache.commons.io.output.ProxyWriter: void write(java.lang.String,int,int)> ==> <org.apache.commons.io.output.NullWriter: void write(java.lang.String,int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.Writer: void write(java.lang.String,int,int)>(r1, i0, i1) in <org.apache.commons.io.output.ProxyWriter: void write(java.lang.String,int,int)> ==> <java.io.StringWriter: void write(java.lang.String,int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.Writer: void write(java.lang.String,int,int)>(r1, i0, i1) in <org.apache.commons.io.output.ProxyWriter: void write(java.lang.String,int,int)> ==> <java.io.Writer: void write(java.lang.String,int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.Writer: void write(java.lang.String,int,int)>(r1, i0, i1) in <org.apache.commons.io.output.ProxyWriter: void write(java.lang.String,int,int)> ==> <org.apache.commons.io.output.LockableFileWriter: void write(java.lang.String,int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.Writer: void write(java.lang.String,int,int)>(r1, i0, i1) in <org.apache.commons.io.output.ProxyWriter: void write(java.lang.String,int,int)> ==> <java.io.OutputStreamWriter: void write(java.lang.String,int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.Writer: void write(java.lang.String,int,int)>(r1, i0, i1) in <org.apache.commons.io.output.ProxyWriter: void write(java.lang.String,int,int)> ==> <java.io.CharArrayWriter: void write(java.lang.String,int,int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.Writer: void flush()>() in <org.apache.commons.io.output.ProxyWriter: void flush()> ==> <java.io.PrintWriter: void flush()>
VIRTUAL edge: virtualinvoke $r1.<java.io.Writer: void flush()>() in <org.apache.commons.io.output.ProxyWriter: void flush()> ==> <org.apache.commons.io.output.ProxyWriter: void flush()>
VIRTUAL edge: virtualinvoke $r1.<java.io.Writer: void flush()>() in <org.apache.commons.io.output.ProxyWriter: void flush()> ==> <org.apache.commons.io.output.NullWriter: void flush()>
VIRTUAL edge: virtualinvoke $r1.<java.io.Writer: void flush()>() in <org.apache.commons.io.output.ProxyWriter: void flush()> ==> <java.io.StringWriter: void flush()>
VIRTUAL edge: virtualinvoke $r1.<java.io.Writer: void flush()>() in <org.apache.commons.io.output.ProxyWriter: void flush()> ==> <org.apache.commons.io.output.LockableFileWriter: void flush()>
VIRTUAL edge: virtualinvoke $r1.<java.io.Writer: void flush()>() in <org.apache.commons.io.output.ProxyWriter: void flush()> ==> <java.io.OutputStreamWriter: void flush()>
VIRTUAL edge: virtualinvoke $r1.<java.io.Writer: void flush()>() in <org.apache.commons.io.output.ProxyWriter: void flush()> ==> <java.io.CharArrayWriter: void flush()>
VIRTUAL edge: virtualinvoke $r1.<java.io.Writer: void close()>() in <org.apache.commons.io.output.ProxyWriter: void close()> ==> <java.io.PrintWriter: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.Writer: void close()>() in <org.apache.commons.io.output.ProxyWriter: void close()> ==> <org.apache.commons.io.output.ProxyWriter: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.Writer: void close()>() in <org.apache.commons.io.output.ProxyWriter: void close()> ==> <org.apache.commons.io.output.NullWriter: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.Writer: void close()>() in <org.apache.commons.io.output.ProxyWriter: void close()> ==> <java.io.StringWriter: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.Writer: void close()>() in <org.apache.commons.io.output.ProxyWriter: void close()> ==> <org.apache.commons.io.output.LockableFileWriter: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.Writer: void close()>() in <org.apache.commons.io.output.ProxyWriter: void close()> ==> <java.io.OutputStreamWriter: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.Writer: void close()>() in <org.apache.commons.io.output.ProxyWriter: void close()> ==> <java.io.CharArrayWriter: void close()>
SPECIAL edge: specialinvoke r0.<org.apache.commons.io.output.ProxyOutputStream: void <init>(java.io.OutputStream)>(r1) in <org.apache.commons.io.output.TeeOutputStream: void <init>(java.io.OutputStream,java.io.OutputStream)> ==> <org.apache.commons.io.output.ProxyOutputStream: void <init>(java.io.OutputStream)>
SPECIAL edge: specialinvoke r0.<org.apache.commons.io.output.ProxyOutputStream: void write(byte[])>(r1) in <org.apache.commons.io.output.TeeOutputStream: void write(byte[])> ==> <org.apache.commons.io.output.ProxyOutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[])>(r1) in <org.apache.commons.io.output.TeeOutputStream: void write(byte[])> ==> <java.io.OutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[])>(r1) in <org.apache.commons.io.output.TeeOutputStream: void write(byte[])> ==> <org.apache.commons.io.output.CountingOutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[])>(r1) in <org.apache.commons.io.output.TeeOutputStream: void write(byte[])> ==> <org.apache.commons.io.output.NullOutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[])>(r1) in <org.apache.commons.io.output.TeeOutputStream: void write(byte[])> ==> <org.apache.commons.io.output.ThresholdingOutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[])>(r1) in <org.apache.commons.io.output.TeeOutputStream: void write(byte[])> ==> <org.apache.commons.io.output.ProxyOutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[])>(r1) in <org.apache.commons.io.output.TeeOutputStream: void write(byte[])> ==> <org.apache.commons.io.output.TeeOutputStream: void write(byte[])>
SPECIAL edge: specialinvoke r0.<org.apache.commons.io.output.ProxyOutputStream: void write(byte[],int,int)>(r1, i0, i1) in <org.apache.commons.io.output.TeeOutputStream: void write(byte[],int,int)> ==> <org.apache.commons.io.output.ProxyOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1) in <org.apache.commons.io.output.TeeOutputStream: void write(byte[],int,int)> ==> <java.io.OutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1) in <org.apache.commons.io.output.TeeOutputStream: void write(byte[],int,int)> ==> <java.io.PrintStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1) in <org.apache.commons.io.output.TeeOutputStream: void write(byte[],int,int)> ==> <org.apache.commons.io.output.CountingOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1) in <org.apache.commons.io.output.TeeOutputStream: void write(byte[],int,int)> ==> <org.apache.commons.io.output.NullOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1) in <org.apache.commons.io.output.TeeOutputStream: void write(byte[],int,int)> ==> <org.apache.commons.io.output.ThresholdingOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1) in <org.apache.commons.io.output.TeeOutputStream: void write(byte[],int,int)> ==> <org.apache.commons.io.output.ByteArrayOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1) in <org.apache.commons.io.output.TeeOutputStream: void write(byte[],int,int)> ==> <java.io.FileOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1) in <org.apache.commons.io.output.TeeOutputStream: void write(byte[],int,int)> ==> <java.io.FilterOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1) in <org.apache.commons.io.output.TeeOutputStream: void write(byte[],int,int)> ==> <org.apache.commons.io.output.ProxyOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1) in <org.apache.commons.io.output.TeeOutputStream: void write(byte[],int,int)> ==> <org.apache.commons.io.output.TeeOutputStream: void write(byte[],int,int)>
SPECIAL edge: specialinvoke r0.<org.apache.commons.io.output.ProxyOutputStream: void write(int)>(i0) in <org.apache.commons.io.output.TeeOutputStream: void write(int)> ==> <org.apache.commons.io.output.ProxyOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void write(int)>(i0) in <org.apache.commons.io.output.TeeOutputStream: void write(int)> ==> <java.io.PrintStream: void write(int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void write(int)>(i0) in <org.apache.commons.io.output.TeeOutputStream: void write(int)> ==> <org.apache.commons.io.output.CountingOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void write(int)>(i0) in <org.apache.commons.io.output.TeeOutputStream: void write(int)> ==> <org.apache.commons.io.output.NullOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void write(int)>(i0) in <org.apache.commons.io.output.TeeOutputStream: void write(int)> ==> <org.apache.commons.io.output.ThresholdingOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void write(int)>(i0) in <org.apache.commons.io.output.TeeOutputStream: void write(int)> ==> <org.apache.commons.io.output.ByteArrayOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void write(int)>(i0) in <org.apache.commons.io.output.TeeOutputStream: void write(int)> ==> <java.io.FileOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void write(int)>(i0) in <org.apache.commons.io.output.TeeOutputStream: void write(int)> ==> <java.io.FilterOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void write(int)>(i0) in <org.apache.commons.io.output.TeeOutputStream: void write(int)> ==> <org.apache.commons.io.output.DemuxOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void write(int)>(i0) in <org.apache.commons.io.output.TeeOutputStream: void write(int)> ==> <org.apache.commons.io.output.ProxyOutputStream: void write(int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void write(int)>(i0) in <org.apache.commons.io.output.TeeOutputStream: void write(int)> ==> <org.apache.commons.io.output.TeeOutputStream: void write(int)>
SPECIAL edge: specialinvoke r0.<org.apache.commons.io.output.ProxyOutputStream: void flush()>() in <org.apache.commons.io.output.TeeOutputStream: void flush()> ==> <org.apache.commons.io.output.ProxyOutputStream: void flush()>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void flush()>() in <org.apache.commons.io.output.TeeOutputStream: void flush()> ==> <java.io.OutputStream: void flush()>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void flush()>() in <org.apache.commons.io.output.TeeOutputStream: void flush()> ==> <java.io.PrintStream: void flush()>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void flush()>() in <org.apache.commons.io.output.TeeOutputStream: void flush()> ==> <org.apache.commons.io.output.ProxyOutputStream: void flush()>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void flush()>() in <org.apache.commons.io.output.TeeOutputStream: void flush()> ==> <org.apache.commons.io.output.ThresholdingOutputStream: void flush()>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void flush()>() in <org.apache.commons.io.output.TeeOutputStream: void flush()> ==> <java.io.FilterOutputStream: void flush()>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void flush()>() in <org.apache.commons.io.output.TeeOutputStream: void flush()> ==> <org.apache.commons.io.output.DemuxOutputStream: void flush()>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void flush()>() in <org.apache.commons.io.output.TeeOutputStream: void flush()> ==> <org.apache.commons.io.output.TeeOutputStream: void flush()>
SPECIAL edge: specialinvoke r0.<org.apache.commons.io.output.ProxyOutputStream: void close()>() in <org.apache.commons.io.output.TeeOutputStream: void close()> ==> <org.apache.commons.io.output.ProxyOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void close()>() in <org.apache.commons.io.output.TeeOutputStream: void close()> ==> <java.io.OutputStream: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void close()>() in <org.apache.commons.io.output.TeeOutputStream: void close()> ==> <java.io.PrintStream: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void close()>() in <org.apache.commons.io.output.TeeOutputStream: void close()> ==> <org.apache.commons.io.output.ProxyOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void close()>() in <org.apache.commons.io.output.TeeOutputStream: void close()> ==> <org.apache.commons.io.output.DeferredFileOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void close()>() in <org.apache.commons.io.output.TeeOutputStream: void close()> ==> <org.apache.commons.io.output.ByteArrayOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void close()>() in <org.apache.commons.io.output.TeeOutputStream: void close()> ==> <java.io.FileOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void close()>() in <org.apache.commons.io.output.TeeOutputStream: void close()> ==> <java.io.FilterOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void close()>() in <org.apache.commons.io.output.TeeOutputStream: void close()> ==> <org.apache.commons.io.output.DemuxOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void close()>() in <org.apache.commons.io.output.TeeOutputStream: void close()> ==> <org.apache.commons.io.output.TeeOutputStream: void close()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: void finalize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<org.apache.commons.io.filefilter.DirectoryFileFilter: void <init>()>() in <org.apache.commons.io.filefilter.DirectoryFileFilter: void <clinit>()> ==> <org.apache.commons.io.filefilter.DirectoryFileFilter: void <init>()>
SPECIAL edge: specialinvoke $r0.<org.apache.commons.io.filefilter.FileFileFilter: void <init>()>() in <org.apache.commons.io.filefilter.FileFileFilter: void <clinit>()> ==> <org.apache.commons.io.filefilter.FileFileFilter: void <init>()>
SPECIAL edge: specialinvoke $r0.<org.apache.commons.io.filefilter.TrueFileFilter: void <init>()>() in <org.apache.commons.io.filefilter.TrueFileFilter: void <clinit>()> ==> <org.apache.commons.io.filefilter.TrueFileFilter: void <init>()>
SPECIAL edge: specialinvoke $r0.<org.apache.commons.io.filefilter.FalseFileFilter: void <init>()>() in <org.apache.commons.io.filefilter.FalseFileFilter: void <clinit>()> ==> <org.apache.commons.io.filefilter.FalseFileFilter: void <init>()>
SPECIAL edge: specialinvoke $r0.<org.apache.commons.io.IOCase: void <init>(java.lang.String,boolean)>("Sensitive", 1) in <org.apache.commons.io.IOCase: void <clinit>()> ==> <org.apache.commons.io.IOCase: void <init>(java.lang.String,boolean)>
SPECIAL edge: specialinvoke $r1.<org.apache.commons.io.IOCase: void <init>(java.lang.String,boolean)>("Insensitive", 0) in <org.apache.commons.io.IOCase: void <clinit>()> ==> <org.apache.commons.io.IOCase: void <init>(java.lang.String,boolean)>
SPECIAL edge: specialinvoke $r2.<org.apache.commons.io.IOCase: void <init>(java.lang.String,boolean)>("System", $z1) in <org.apache.commons.io.IOCase: void <clinit>()> ==> <org.apache.commons.io.IOCase: void <init>(java.lang.String,boolean)>
SPECIAL edge: specialinvoke $r0.<java.io.StringWriter: void <init>(int)>(4) in <org.apache.commons.io.IOUtils: void <clinit>()> ==> <java.io.StringWriter: void <init>(int)>
VIRTUAL edge: $r4 = virtualinvoke $r0.<java.io.StringWriter: java.lang.String toString()>() in <org.apache.commons.io.IOUtils: void <clinit>()> ==> <java.io.StringWriter: java.lang.String toString()>
SPECIAL edge: specialinvoke $r2.<java.io.PrintWriter: void <init>(java.io.Writer)>($r0) in <org.apache.commons.io.IOUtils: void <clinit>()> ==> <java.io.PrintWriter: void <init>(java.io.Writer)>
VIRTUAL edge: virtualinvoke $r2.<java.io.PrintWriter: void println()>() in <org.apache.commons.io.IOUtils: void <clinit>()> ==> <java.io.PrintWriter: void println()>
VIRTUAL edge: r2 = virtualinvoke r0.<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>(r1) in <org.apache.commons.io.FileUtils: void innerListFiles(java.util.Collection,java.io.File,org.apache.commons.io.filefilter.IOFileFilter)> ==> <java.io.File: java.io.File[] listFiles(java.io.FileFilter)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.io.File: boolean isDirectory()>() in <org.apache.commons.io.FileUtils: void innerListFiles(java.util.Collection,java.io.File,org.apache.commons.io.filefilter.IOFileFilter)> ==> <java.io.File: boolean isDirectory()>
INTERFACE edge: interfaceinvoke r4.<java.util.Collection: boolean add(java.lang.Object)>($r5) in <org.apache.commons.io.FileUtils: void innerListFiles(java.util.Collection,java.io.File,org.apache.commons.io.filefilter.IOFileFilter)> ==> <java.util.Vector: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<java.util.Collection: boolean add(java.lang.Object)>($r5) in <org.apache.commons.io.FileUtils: void innerListFiles(java.util.Collection,java.io.File,org.apache.commons.io.filefilter.IOFileFilter)> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<java.util.Collection: boolean add(java.lang.Object)>($r5) in <org.apache.commons.io.FileUtils: void innerListFiles(java.util.Collection,java.io.File,org.apache.commons.io.filefilter.IOFileFilter)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.FileUtils: java.lang.String[] toSuffixes(java.lang.String[])> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".") in <org.apache.commons.io.FileUtils: java.lang.String[] toSuffixes(java.lang.String[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4) in <org.apache.commons.io.FileUtils: java.lang.String[] toSuffixes(java.lang.String[])> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.FileUtils: java.lang.String[] toSuffixes(java.lang.String[])> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.io.File: boolean exists()>() in <org.apache.commons.io.FileUtils: void doCopyFile(java.io.File,java.io.File,boolean)> ==> <java.io.File: boolean exists()>
VIRTUAL edge: $z3 = virtualinvoke r0.<java.io.File: boolean isDirectory()>() in <org.apache.commons.io.FileUtils: void doCopyFile(java.io.File,java.io.File,boolean)> ==> <java.io.File: boolean isDirectory()>
VIRTUAL edge: $l2 = virtualinvoke r0.<java.io.File: long length()>() in <org.apache.commons.io.FileUtils: void doCopyFile(java.io.File,java.io.File,boolean)> ==> <java.io.File: long length()>
VIRTUAL edge: virtualinvoke r0.<java.io.File: boolean setLastModified(long)>($l4) in <org.apache.commons.io.FileUtils: void doCopyFile(java.io.File,java.io.File,boolean)> ==> <java.io.File: boolean setLastModified(long)>
SPECIAL edge: specialinvoke $r15.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.FileUtils: void doCopyFile(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Destination \'") in <org.apache.commons.io.FileUtils: void doCopyFile(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0) in <org.apache.commons.io.FileUtils: void doCopyFile(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' exists but is a directory") in <org.apache.commons.io.FileUtils: void doCopyFile(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.FileUtils: void doCopyFile(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r14.<java.io.IOException: void <init>(java.lang.String)>($r19) in <org.apache.commons.io.FileUtils: void doCopyFile(java.io.File,java.io.File,boolean)> ==> <java.io.IOException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.io.FileInputStream: void <init>(java.io.File)>(r2) in <org.apache.commons.io.FileUtils: void doCopyFile(java.io.File,java.io.File,boolean)> ==> <java.io.FileInputStream: void <init>(java.io.File)>
SPECIAL edge: specialinvoke $r4.<java.io.FileOutputStream: void <init>(java.io.File)>(r0) in <org.apache.commons.io.FileUtils: void doCopyFile(java.io.File,java.io.File,boolean)> ==> <java.io.FileOutputStream: void <init>(java.io.File)>
VIRTUAL edge: $l1 = virtualinvoke r2.<java.io.File: long length()>() in <org.apache.commons.io.FileUtils: void doCopyFile(java.io.File,java.io.File,boolean)> ==> <java.io.File: long length()>
VIRTUAL edge: $l4 = virtualinvoke r2.<java.io.File: long lastModified()>() in <org.apache.commons.io.FileUtils: void doCopyFile(java.io.File,java.io.File,boolean)> ==> <java.io.File: long lastModified()>
SPECIAL edge: specialinvoke $r7.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.FileUtils: void doCopyFile(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Failed to copy full contents from \'") in <org.apache.commons.io.FileUtils: void doCopyFile(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r2) in <org.apache.commons.io.FileUtils: void doCopyFile(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' to \'") in <org.apache.commons.io.FileUtils: void doCopyFile(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0) in <org.apache.commons.io.FileUtils: void doCopyFile(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'") in <org.apache.commons.io.FileUtils: void doCopyFile(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.FileUtils: void doCopyFile(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>($r13) in <org.apache.commons.io.FileUtils: void doCopyFile(java.io.File,java.io.File,boolean)> ==> <java.io.IOException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.io.File: boolean exists()>() in <org.apache.commons.io.FileUtils: void doCopyDirectory(java.io.File,java.io.File,boolean)> ==> <java.io.File: boolean exists()>
VIRTUAL edge: $z5 = virtualinvoke r0.<java.io.File: boolean isDirectory()>() in <org.apache.commons.io.FileUtils: void doCopyDirectory(java.io.File,java.io.File,boolean)> ==> <java.io.File: boolean isDirectory()>
VIRTUAL edge: $z1 = virtualinvoke r0.<java.io.File: boolean mkdirs()>() in <org.apache.commons.io.FileUtils: void doCopyDirectory(java.io.File,java.io.File,boolean)> ==> <java.io.File: boolean mkdirs()>
VIRTUAL edge: virtualinvoke r0.<java.io.File: boolean setLastModified(long)>($l1) in <org.apache.commons.io.FileUtils: void doCopyDirectory(java.io.File,java.io.File,boolean)> ==> <java.io.File: boolean setLastModified(long)>
VIRTUAL edge: $z6 = virtualinvoke r0.<java.io.File: boolean canWrite()>() in <org.apache.commons.io.FileUtils: void doCopyDirectory(java.io.File,java.io.File,boolean)> ==> <java.io.File: boolean canWrite()>
SPECIAL edge: specialinvoke $r28.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.FileUtils: void doCopyDirectory(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Destination \'") in <org.apache.commons.io.FileUtils: void doCopyDirectory(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0) in <org.apache.commons.io.FileUtils: void doCopyDirectory(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' exists but is not a directory") in <org.apache.commons.io.FileUtils: void doCopyDirectory(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.FileUtils: void doCopyDirectory(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r27.<java.io.IOException: void <init>(java.lang.String)>($r32) in <org.apache.commons.io.FileUtils: void doCopyDirectory(java.io.File,java.io.File,boolean)> ==> <java.io.IOException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r22.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.FileUtils: void doCopyDirectory(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Destination \'") in <org.apache.commons.io.FileUtils: void doCopyDirectory(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0) in <org.apache.commons.io.FileUtils: void doCopyDirectory(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' directory cannot be created") in <org.apache.commons.io.FileUtils: void doCopyDirectory(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.FileUtils: void doCopyDirectory(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r21.<java.io.IOException: void <init>(java.lang.String)>($r26) in <org.apache.commons.io.FileUtils: void doCopyDirectory(java.io.File,java.io.File,boolean)> ==> <java.io.IOException: void <init>(java.lang.String)>
VIRTUAL edge: $l1 = virtualinvoke r1.<java.io.File: long lastModified()>() in <org.apache.commons.io.FileUtils: void doCopyDirectory(java.io.File,java.io.File,boolean)> ==> <java.io.File: long lastModified()>
VIRTUAL edge: r2 = virtualinvoke r1.<java.io.File: java.io.File[] listFiles()>() in <org.apache.commons.io.FileUtils: void doCopyDirectory(java.io.File,java.io.File,boolean)> ==> <java.io.File: java.io.File[] listFiles()>
SPECIAL edge: specialinvoke $r16.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.FileUtils: void doCopyDirectory(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Destination \'") in <org.apache.commons.io.FileUtils: void doCopyDirectory(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0) in <org.apache.commons.io.FileUtils: void doCopyDirectory(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' cannot be written to") in <org.apache.commons.io.FileUtils: void doCopyDirectory(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.FileUtils: void doCopyDirectory(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r15.<java.io.IOException: void <init>(java.lang.String)>($r20) in <org.apache.commons.io.FileUtils: void doCopyDirectory(java.io.File,java.io.File,boolean)> ==> <java.io.IOException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r11.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.FileUtils: void doCopyDirectory(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Failed to list contents of ") in <org.apache.commons.io.FileUtils: void doCopyDirectory(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1) in <org.apache.commons.io.FileUtils: void doCopyDirectory(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.FileUtils: void doCopyDirectory(java.io.File,java.io.File,boolean)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>($r14) in <org.apache.commons.io.FileUtils: void doCopyDirectory(java.io.File,java.io.File,boolean)> ==> <java.io.IOException: void <init>(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.io.File: java.lang.String getName()>() in <org.apache.commons.io.FileUtils: void doCopyDirectory(java.io.File,java.io.File,boolean)> ==> <java.io.File: java.lang.String getName()>
SPECIAL edge: specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>(r0, $r5) in <org.apache.commons.io.FileUtils: void doCopyDirectory(java.io.File,java.io.File,boolean)> ==> <java.io.File: void <init>(java.io.File,java.lang.String)>
VIRTUAL edge: $z3 = virtualinvoke $r7.<java.io.File: boolean isDirectory()>() in <org.apache.commons.io.FileUtils: void doCopyDirectory(java.io.File,java.io.File,boolean)> ==> <java.io.File: boolean isDirectory()>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.io.File: boolean exists()>() in <org.apache.commons.io.FileUtils: void deleteDirectoryOnExit(java.io.File)> ==> <java.io.File: boolean exists()>
VIRTUAL edge: virtualinvoke r0.<java.io.File: void deleteOnExit()>() in <org.apache.commons.io.FileUtils: void deleteDirectoryOnExit(java.io.File)> ==> <java.io.File: void deleteOnExit()>
VIRTUAL edge: i54 = virtualinvoke r0.<java.lang.String: int length()>() in <org.apache.commons.io.FilenameUtils: java.lang.String doNormalize(java.lang.String,boolean)> ==> <java.lang.String: int length()>
VIRTUAL edge: $i2 = virtualinvoke r0.<java.lang.String: int length()>() in <org.apache.commons.io.FilenameUtils: java.lang.String doNormalize(java.lang.String,boolean)> ==> <java.lang.String: int length()>
VIRTUAL edge: virtualinvoke r0.<java.lang.String: void getChars(int,int,char[],int)>(0, $i2, r1, 0) in <org.apache.commons.io.FilenameUtils: java.lang.String doNormalize(java.lang.String,boolean)> ==> <java.lang.String: void getChars(int,int,char[],int)>
SPECIAL edge: specialinvoke $r4.<java.lang.String: void <init>(char[],int,int)>(r1, 0, i54) in <org.apache.commons.io.FilenameUtils: java.lang.String doNormalize(java.lang.String,boolean)> ==> <java.lang.String: void <init>(char[],int,int)>
SPECIAL edge: specialinvoke $r3.<java.lang.String: void <init>(char[],int,int)>(r1, 0, i54) in <org.apache.commons.io.FilenameUtils: java.lang.String doNormalize(java.lang.String,boolean)> ==> <java.lang.String: void <init>(char[],int,int)>
SPECIAL edge: specialinvoke $r2.<java.lang.String: void <init>(char[],int,int)>(r1, 0, $i7) in <org.apache.commons.io.FilenameUtils: java.lang.String doNormalize(java.lang.String,boolean)> ==> <java.lang.String: void <init>(char[],int,int)>
VIRTUAL edge: $i2 = virtualinvoke r0.<java.lang.String: int length()>() in <org.apache.commons.io.FilenameUtils: java.lang.String doGetPath(java.lang.String,int)> ==> <java.lang.String: int length()>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i0, $i4) in <org.apache.commons.io.FilenameUtils: java.lang.String doGetPath(java.lang.String,int)> ==> <java.lang.String: java.lang.String substring(int,int)>
VIRTUAL edge: $i1 = virtualinvoke r0.<java.lang.String: int length()>() in <org.apache.commons.io.FilenameUtils: java.lang.String doGetFullPath(java.lang.String,boolean)> ==> <java.lang.String: int length()>
VIRTUAL edge: $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i0) in <org.apache.commons.io.FilenameUtils: java.lang.String doGetFullPath(java.lang.String,boolean)> ==> <java.lang.String: java.lang.String substring(int,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i3) in <org.apache.commons.io.FilenameUtils: java.lang.String doGetFullPath(java.lang.String,boolean)> ==> <java.lang.String: java.lang.String substring(int,int)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>("?") in <org.apache.commons.io.FilenameUtils: java.lang.String[] splitOnTokens(java.lang.String)> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $i11 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>("*") in <org.apache.commons.io.FilenameUtils: java.lang.String[] splitOnTokens(java.lang.String)> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: r1 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>() in <org.apache.commons.io.FilenameUtils: java.lang.String[] splitOnTokens(java.lang.String)> ==> <java.lang.String: char[] toCharArray()>
SPECIAL edge: specialinvoke $r2.<java.util.ArrayList: void <init>()>() in <org.apache.commons.io.FilenameUtils: java.lang.String[] splitOnTokens(java.lang.String)> ==> <java.util.ArrayList: void <init>()>
VIRTUAL edge: virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r12) in <org.apache.commons.io.FilenameUtils: java.lang.String[] splitOnTokens(java.lang.String)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>("?") in <org.apache.commons.io.FilenameUtils: java.lang.String[] splitOnTokens(java.lang.String)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.util.ArrayList: int size()>() in <org.apache.commons.io.FilenameUtils: java.lang.String[] splitOnTokens(java.lang.String)> ==> <java.util.ArrayList: int size()>
VIRTUAL edge: $i7 = virtualinvoke $r2.<java.util.ArrayList: int size()>() in <org.apache.commons.io.FilenameUtils: java.lang.String[] splitOnTokens(java.lang.String)> ==> <java.util.ArrayList: int size()>
VIRTUAL edge: $r11 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>($i8) in <org.apache.commons.io.FilenameUtils: java.lang.String[] splitOnTokens(java.lang.String)> ==> <java.util.ArrayList: java.lang.Object get(int)>
VIRTUAL edge: virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>("*") in <org.apache.commons.io.FilenameUtils: java.lang.String[] splitOnTokens(java.lang.String)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r10) in <org.apache.commons.io.FilenameUtils: java.lang.String[] splitOnTokens(java.lang.String)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.util.ArrayList: int size()>() in <org.apache.commons.io.FilenameUtils: java.lang.String[] splitOnTokens(java.lang.String)> ==> <java.util.ArrayList: int size()>
VIRTUAL edge: $r7 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r6) in <org.apache.commons.io.FilenameUtils: java.lang.String[] splitOnTokens(java.lang.String)> ==> <java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>
SPECIAL edge: specialinvoke $r4.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.FilenameUtils: java.lang.String[] splitOnTokens(java.lang.String)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $i4 = virtualinvoke $r4.<java.lang.StringBuffer: int length()>() in <org.apache.commons.io.FilenameUtils: java.lang.String[] splitOnTokens(java.lang.String)> ==> <java.lang.StringBuffer: int length()>
VIRTUAL edge: $r12 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.FilenameUtils: java.lang.String[] splitOnTokens(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r4.<java.lang.StringBuffer: void setLength(int)>(0) in <org.apache.commons.io.FilenameUtils: java.lang.String[] splitOnTokens(java.lang.String)> ==> <java.lang.StringBuffer: void setLength(int)>
VIRTUAL edge: virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c10) in <org.apache.commons.io.FilenameUtils: java.lang.String[] splitOnTokens(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(char)>
VIRTUAL edge: $i1 = virtualinvoke $r4.<java.lang.StringBuffer: int length()>() in <org.apache.commons.io.FilenameUtils: java.lang.String[] splitOnTokens(java.lang.String)> ==> <java.lang.StringBuffer: int length()>
VIRTUAL edge: $r10 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.FilenameUtils: java.lang.String[] splitOnTokens(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: $z2 = virtualinvoke $r11.<java.lang.Object: boolean equals(java.lang.Object)>("*") in <org.apache.commons.io.FilenameUtils: java.lang.String[] splitOnTokens(java.lang.String)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r11.<java.lang.Object: boolean equals(java.lang.Object)>("*") in <org.apache.commons.io.FilenameUtils: java.lang.String[] splitOnTokens(java.lang.String)> ==> <java.lang.Integer: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r11.<java.lang.Object: boolean equals(java.lang.Object)>("*") in <org.apache.commons.io.FilenameUtils: java.lang.String[] splitOnTokens(java.lang.String)> ==> <java.util.Vector: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r11.<java.lang.Object: boolean equals(java.lang.Object)>("*") in <org.apache.commons.io.FilenameUtils: java.lang.String[] splitOnTokens(java.lang.String)> ==> <java.net.Proxy: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r11.<java.lang.Object: boolean equals(java.lang.Object)>("*") in <org.apache.commons.io.FilenameUtils: java.lang.String[] splitOnTokens(java.lang.String)> ==> <java.lang.Long: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r11.<java.lang.Object: boolean equals(java.lang.Object)>("*") in <org.apache.commons.io.FilenameUtils: java.lang.String[] splitOnTokens(java.lang.String)> ==> <java.net.NetworkInterface: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r11.<java.lang.Object: boolean equals(java.lang.Object)>("*") in <org.apache.commons.io.FilenameUtils: java.lang.String[] splitOnTokens(java.lang.String)> ==> <java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r11.<java.lang.Object: boolean equals(java.lang.Object)>("*") in <org.apache.commons.io.FilenameUtils: java.lang.String[] splitOnTokens(java.lang.String)> ==> <java.lang.StackTraceElement: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r11.<java.lang.Object: boolean equals(java.lang.Object)>("*") in <org.apache.commons.io.FilenameUtils: java.lang.String[] splitOnTokens(java.lang.String)> ==> <java.lang.reflect.Field: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r11.<java.lang.Object: boolean equals(java.lang.Object)>("*") in <org.apache.commons.io.FilenameUtils: java.lang.String[] splitOnTokens(java.lang.String)> ==> <java.util.Date: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r11.<java.lang.Object: boolean equals(java.lang.Object)>("*") in <org.apache.commons.io.FilenameUtils: java.lang.String[] splitOnTokens(java.lang.String)> ==> <java.lang.Character$Subset: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r11.<java.lang.Object: boolean equals(java.lang.Object)>("*") in <org.apache.commons.io.FilenameUtils: java.lang.String[] splitOnTokens(java.lang.String)> ==> <java.util.Locale: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r11.<java.lang.Object: boolean equals(java.lang.Object)>("*") in <org.apache.commons.io.FilenameUtils: java.lang.String[] splitOnTokens(java.lang.String)> ==> <java.lang.Short: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r11.<java.lang.Object: boolean equals(java.lang.Object)>("*") in <org.apache.commons.io.FilenameUtils: java.lang.String[] splitOnTokens(java.lang.String)> ==> <java.lang.reflect.Method: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r11.<java.lang.Object: boolean equals(java.lang.Object)>("*") in <org.apache.commons.io.FilenameUtils: java.lang.String[] splitOnTokens(java.lang.String)> ==> <java.lang.Enum: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r11.<java.lang.Object: boolean equals(java.lang.Object)>("*") in <org.apache.commons.io.FilenameUtils: java.lang.String[] splitOnTokens(java.lang.String)> ==> <java.lang.Boolean: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r11.<java.lang.Object: boolean equals(java.lang.Object)>("*") in <org.apache.commons.io.FilenameUtils: java.lang.String[] splitOnTokens(java.lang.String)> ==> <java.util.AbstractList: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r11.<java.lang.Object: boolean equals(java.lang.Object)>("*") in <org.apache.commons.io.FilenameUtils: java.lang.String[] splitOnTokens(java.lang.String)> ==> <java.lang.Float: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r11.<java.lang.Object: boolean equals(java.lang.Object)>("*") in <org.apache.commons.io.FilenameUtils: java.lang.String[] splitOnTokens(java.lang.String)> ==> <java.net.InetAddress: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r11.<java.lang.Object: boolean equals(java.lang.Object)>("*") in <org.apache.commons.io.FilenameUtils: java.lang.String[] splitOnTokens(java.lang.String)> ==> <java.lang.Character: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r11.<java.lang.Object: boolean equals(java.lang.Object)>("*") in <org.apache.commons.io.FilenameUtils: java.lang.String[] splitOnTokens(java.lang.String)> ==> <java.lang.Double: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r11.<java.lang.Object: boolean equals(java.lang.Object)>("*") in <org.apache.commons.io.FilenameUtils: java.lang.String[] splitOnTokens(java.lang.String)> ==> <java.util.ArrayList: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r11.<java.lang.Object: boolean equals(java.lang.Object)>("*") in <org.apache.commons.io.FilenameUtils: java.lang.String[] splitOnTokens(java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r11.<java.lang.Object: boolean equals(java.lang.Object)>("*") in <org.apache.commons.io.FilenameUtils: java.lang.String[] splitOnTokens(java.lang.String)> ==> <java.util.Hashtable: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r11.<java.lang.Object: boolean equals(java.lang.Object)>("*") in <org.apache.commons.io.FilenameUtils: java.lang.String[] splitOnTokens(java.lang.String)> ==> <java.io.File: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r11.<java.lang.Object: boolean equals(java.lang.Object)>("*") in <org.apache.commons.io.FilenameUtils: java.lang.String[] splitOnTokens(java.lang.String)> ==> <java.net.URL: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r11.<java.lang.Object: boolean equals(java.lang.Object)>("*") in <org.apache.commons.io.FilenameUtils: java.lang.String[] splitOnTokens(java.lang.String)> ==> <java.net.URI: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r11.<java.lang.Object: boolean equals(java.lang.Object)>("*") in <org.apache.commons.io.FilenameUtils: java.lang.String[] splitOnTokens(java.lang.String)> ==> <java.lang.Byte: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r11.<java.lang.Object: boolean equals(java.lang.Object)>("*") in <org.apache.commons.io.FilenameUtils: java.lang.String[] splitOnTokens(java.lang.String)> ==> <java.security.CodeSigner: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r11.<java.lang.Object: boolean equals(java.lang.Object)>("*") in <org.apache.commons.io.FilenameUtils: java.lang.String[] splitOnTokens(java.lang.String)> ==> <java.security.Timestamp: boolean equals(java.lang.Object)>
VIRTUAL edge: i0 = virtualinvoke r0.<java.io.InputStream: int read()>() in <org.apache.commons.io.EndianUtils: int read(java.io.InputStream)> ==> <java.io.FilterInputStream: int read()>
VIRTUAL edge: i0 = virtualinvoke r0.<java.io.InputStream: int read()>() in <org.apache.commons.io.EndianUtils: int read(java.io.InputStream)> ==> <java.util.zip.CheckedInputStream: int read()>
VIRTUAL edge: i0 = virtualinvoke r0.<java.io.InputStream: int read()>() in <org.apache.commons.io.EndianUtils: int read(java.io.InputStream)> ==> <java.io.BufferedInputStream: int read()>
VIRTUAL edge: i0 = virtualinvoke r0.<java.io.InputStream: int read()>() in <org.apache.commons.io.EndianUtils: int read(java.io.InputStream)> ==> <org.apache.commons.io.input.ProxyInputStream: int read()>
VIRTUAL edge: i0 = virtualinvoke r0.<java.io.InputStream: int read()>() in <org.apache.commons.io.EndianUtils: int read(java.io.InputStream)> ==> <java.io.ByteArrayInputStream: int read()>
VIRTUAL edge: i0 = virtualinvoke r0.<java.io.InputStream: int read()>() in <org.apache.commons.io.EndianUtils: int read(java.io.InputStream)> ==> <org.apache.commons.io.input.CountingInputStream: int read()>
VIRTUAL edge: i0 = virtualinvoke r0.<java.io.InputStream: int read()>() in <org.apache.commons.io.EndianUtils: int read(java.io.InputStream)> ==> <org.apache.commons.io.input.NullInputStream: int read()>
VIRTUAL edge: i0 = virtualinvoke r0.<java.io.InputStream: int read()>() in <org.apache.commons.io.EndianUtils: int read(java.io.InputStream)> ==> <java.io.ObjectInputStream: int read()>
VIRTUAL edge: i0 = virtualinvoke r0.<java.io.InputStream: int read()>() in <org.apache.commons.io.EndianUtils: int read(java.io.InputStream)> ==> <java.io.FileInputStream: int read()>
VIRTUAL edge: i0 = virtualinvoke r0.<java.io.InputStream: int read()>() in <org.apache.commons.io.EndianUtils: int read(java.io.InputStream)> ==> <org.apache.commons.io.input.DemuxInputStream: int read()>
SPECIAL edge: specialinvoke $r1.<java.io.EOFException: void <init>(java.lang.String)>("Unexpected EOF reached") in <org.apache.commons.io.EndianUtils: int read(java.io.InputStream)> ==> <java.io.EOFException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<org.apache.commons.io.FileCleaningTracker: void <init>()>() in <org.apache.commons.io.FileCleaner: void <clinit>()> ==> <org.apache.commons.io.FileCleaningTracker: void <init>()>
SPECIAL edge: specialinvoke $r0.<org.apache.commons.io.FileSystemUtils: void <init>()>() in <org.apache.commons.io.FileSystemUtils: void <clinit>()> ==> <org.apache.commons.io.FileSystemUtils: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("os.name not found") in <org.apache.commons.io.FileSystemUtils: void <clinit>()> ==> <java.io.IOException: void <init>(java.lang.String)>
VIRTUAL edge: r4 = virtualinvoke r3.<java.lang.String: java.lang.String toLowerCase()>() in <org.apache.commons.io.FileSystemUtils: void <clinit>()> ==> <java.lang.String: java.lang.String toLowerCase()>
VIRTUAL edge: $i0 = virtualinvoke r4.<java.lang.String: int indexOf(java.lang.String)>("windows") in <org.apache.commons.io.FileSystemUtils: void <clinit>()> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke r4.<java.lang.String: int indexOf(java.lang.String)>("linux") in <org.apache.commons.io.FileSystemUtils: void <clinit>()> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $i2 = virtualinvoke r4.<java.lang.String: int indexOf(java.lang.String)>("sun os") in <org.apache.commons.io.FileSystemUtils: void <clinit>()> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $i3 = virtualinvoke r4.<java.lang.String: int indexOf(java.lang.String)>("sunos") in <org.apache.commons.io.FileSystemUtils: void <clinit>()> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $i4 = virtualinvoke r4.<java.lang.String: int indexOf(java.lang.String)>("solaris") in <org.apache.commons.io.FileSystemUtils: void <clinit>()> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $i5 = virtualinvoke r4.<java.lang.String: int indexOf(java.lang.String)>("mpe/ix") in <org.apache.commons.io.FileSystemUtils: void <clinit>()> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $i6 = virtualinvoke r4.<java.lang.String: int indexOf(java.lang.String)>("freebsd") in <org.apache.commons.io.FileSystemUtils: void <clinit>()> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $i7 = virtualinvoke r4.<java.lang.String: int indexOf(java.lang.String)>("irix") in <org.apache.commons.io.FileSystemUtils: void <clinit>()> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $i8 = virtualinvoke r4.<java.lang.String: int indexOf(java.lang.String)>("digital unix") in <org.apache.commons.io.FileSystemUtils: void <clinit>()> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $i9 = virtualinvoke r4.<java.lang.String: int indexOf(java.lang.String)>("unix") in <org.apache.commons.io.FileSystemUtils: void <clinit>()> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $i10 = virtualinvoke r4.<java.lang.String: int indexOf(java.lang.String)>("mac os x") in <org.apache.commons.io.FileSystemUtils: void <clinit>()> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $i11 = virtualinvoke r4.<java.lang.String: int indexOf(java.lang.String)>("hp-ux") in <org.apache.commons.io.FileSystemUtils: void <clinit>()> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $i12 = virtualinvoke r4.<java.lang.String: int indexOf(java.lang.String)>("aix") in <org.apache.commons.io.FileSystemUtils: void <clinit>()> ==> <java.lang.String: int indexOf(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.lang.StringBuffer: void <init>(int)>(8) in <org.apache.commons.io.HexDump: void <clinit>()> ==> <java.lang.StringBuffer: void <init>(int)>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuffer: void <init>(int)>(2) in <org.apache.commons.io.HexDump: void <clinit>()> ==> <java.lang.StringBuffer: void <init>(int)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuffer: void setLength(int)>(0) in <org.apache.commons.io.HexDump: java.lang.StringBuffer dump(byte)> ==> <java.lang.StringBuffer: void setLength(int)>
VIRTUAL edge: virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c5) in <org.apache.commons.io.HexDump: java.lang.StringBuffer dump(byte)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(char)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuffer: void setLength(int)>(0) in <org.apache.commons.io.HexDump: java.lang.StringBuffer dump(long)> ==> <java.lang.StringBuffer: void setLength(int)>
VIRTUAL edge: virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c5) in <org.apache.commons.io.HexDump: java.lang.StringBuffer dump(long)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(char)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.io.File: boolean exists()>() in <org.apache.commons.io.FileUtils: void cleanDirectoryOnExit(java.io.File)> ==> <java.io.File: boolean exists()>
VIRTUAL edge: $z1 = virtualinvoke r0.<java.io.File: boolean isDirectory()>() in <org.apache.commons.io.FileUtils: void cleanDirectoryOnExit(java.io.File)> ==> <java.io.File: boolean isDirectory()>
VIRTUAL edge: r19 = virtualinvoke r0.<java.io.File: java.io.File[] listFiles()>() in <org.apache.commons.io.FileUtils: void cleanDirectoryOnExit(java.io.File)> ==> <java.io.File: java.io.File[] listFiles()>
SPECIAL edge: specialinvoke $r11.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.FileUtils: void cleanDirectoryOnExit(java.io.File)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0) in <org.apache.commons.io.FileUtils: void cleanDirectoryOnExit(java.io.File)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" does not exist") in <org.apache.commons.io.FileUtils: void cleanDirectoryOnExit(java.io.File)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: r17 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.FileUtils: void cleanDirectoryOnExit(java.io.File)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r17) in <org.apache.commons.io.FileUtils: void cleanDirectoryOnExit(java.io.File)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r7.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.FileUtils: void cleanDirectoryOnExit(java.io.File)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0) in <org.apache.commons.io.FileUtils: void cleanDirectoryOnExit(java.io.File)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is not a directory") in <org.apache.commons.io.FileUtils: void cleanDirectoryOnExit(java.io.File)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: r18 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.FileUtils: void cleanDirectoryOnExit(java.io.File)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r18) in <org.apache.commons.io.FileUtils: void cleanDirectoryOnExit(java.io.File)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.FileUtils: void cleanDirectoryOnExit(java.io.File)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Failed to list contents of ") in <org.apache.commons.io.FileUtils: void cleanDirectoryOnExit(java.io.File)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0) in <org.apache.commons.io.FileUtils: void cleanDirectoryOnExit(java.io.File)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.FileUtils: void cleanDirectoryOnExit(java.io.File)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>($r6) in <org.apache.commons.io.FileUtils: void cleanDirectoryOnExit(java.io.File)> ==> <java.io.IOException: void <init>(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase()>() in <org.apache.commons.io.IOCase: java.lang.String convertCase(java.lang.String)> ==> <java.lang.String: java.lang.String toLowerCase()>
INTERFACE edge: $i1 = interfaceinvoke $r1.<java.util.List: int size()>() in <org.apache.commons.io.output.ByteArrayOutputStream: void needNewBuffer(int)> ==> <java.util.Vector: int size()>
INTERFACE edge: $i1 = interfaceinvoke $r1.<java.util.List: int size()>() in <org.apache.commons.io.output.ByteArrayOutputStream: void needNewBuffer(int)> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i1 = interfaceinvoke $r1.<java.util.List: int size()>() in <org.apache.commons.io.output.ByteArrayOutputStream: void needNewBuffer(int)> ==> <java.util.ArrayList: int size()>
SPECIAL edge: $r10 = specialinvoke r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] getBuffer(int)>($i18) in <org.apache.commons.io.output.ByteArrayOutputStream: void needNewBuffer(int)> ==> <org.apache.commons.io.output.ByteArrayOutputStream: byte[] getBuffer(int)>
INTERFACE edge: interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r6) in <org.apache.commons.io.output.ByteArrayOutputStream: void needNewBuffer(int)> ==> <java.util.Vector: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r6) in <org.apache.commons.io.output.ByteArrayOutputStream: void needNewBuffer(int)> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r6) in <org.apache.commons.io.output.ByteArrayOutputStream: void needNewBuffer(int)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0) in <org.apache.commons.io.output.ByteArrayOutputStream: byte[] getBuffer(int)> ==> <java.util.Vector: java.lang.Object get(int)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0) in <org.apache.commons.io.output.ByteArrayOutputStream: byte[] getBuffer(int)> ==> <java.util.LinkedList: java.lang.Object get(int)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0) in <org.apache.commons.io.output.ByteArrayOutputStream: byte[] getBuffer(int)> ==> <java.util.ArrayList: java.lang.Object get(int)>
SPECIAL edge: specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No new trackers can be added once exitWhenFinished() is called") in <org.apache.commons.io.FileCleaningTracker: void addTracker(java.lang.String,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r8.<org.apache.commons.io.FileCleaningTracker$Reaper: void <init>(org.apache.commons.io.FileCleaningTracker)>(r0) in <org.apache.commons.io.FileCleaningTracker: void addTracker(java.lang.String,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)> ==> <org.apache.commons.io.FileCleaningTracker$Reaper: void <init>(org.apache.commons.io.FileCleaningTracker)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.Thread: void start()>() in <org.apache.commons.io.FileCleaningTracker: void addTracker(java.lang.String,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)> ==> <java.lang.Thread: void start()>
THREAD edge: virtualinvoke $r9.<java.lang.Thread: void start()>() in <org.apache.commons.io.FileCleaningTracker: void addTracker(java.lang.String,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)> ==> <org.apache.commons.io.FileCleaningTracker$Reaper: void run()>
THREAD edge: virtualinvoke $r9.<java.lang.Thread: void start()>() in <org.apache.commons.io.FileCleaningTracker: void addTracker(java.lang.String,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)> ==> <java.lang.Thread: void run()>
SPECIAL edge: specialinvoke $r2.<org.apache.commons.io.FileCleaningTracker$Tracker: void <init>(java.lang.String,org.apache.commons.io.FileDeleteStrategy,java.lang.Object,java.lang.ref.ReferenceQueue)>(r3, r4, r5, $r6) in <org.apache.commons.io.FileCleaningTracker: void addTracker(java.lang.String,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)> ==> <org.apache.commons.io.FileCleaningTracker$Tracker: void <init>(java.lang.String,org.apache.commons.io.FileDeleteStrategy,java.lang.Object,java.lang.ref.ReferenceQueue)>
INTERFACE edge: interfaceinvoke $r7.<java.util.Collection: boolean add(java.lang.Object)>($r2) in <org.apache.commons.io.FileCleaningTracker: void addTracker(java.lang.String,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)> ==> <java.util.Vector: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r7.<java.util.Collection: boolean add(java.lang.Object)>($r2) in <org.apache.commons.io.FileCleaningTracker: void addTracker(java.lang.String,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r7.<java.util.Collection: boolean add(java.lang.Object)>($r2) in <org.apache.commons.io.FileCleaningTracker: void addTracker(java.lang.String,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
CLINIT edge: $r6 = <org.apache.commons.io.FileDeleteStrategy: org.apache.commons.io.FileDeleteStrategy NORMAL> in <org.apache.commons.io.FileCleaningTracker$Tracker: void <init>(java.lang.String,org.apache.commons.io.FileDeleteStrategy,java.lang.Object,java.lang.ref.ReferenceQueue)> ==> <org.apache.commons.io.FileDeleteStrategy: void <clinit>()>
CLINIT edge: $r0 = new org.apache.commons.io.FileDeleteStrategy in <org.apache.commons.io.FileDeleteStrategy: void <clinit>()> ==> <org.apache.commons.io.FileDeleteStrategy: void <clinit>()>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.io.File: boolean delete()>() in <org.apache.commons.io.FileDeleteStrategy: boolean doDelete(java.io.File)> ==> <java.io.File: boolean delete()>
SPECIAL edge: specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Path must not be empty") in <org.apache.commons.io.FileSystemUtils: long freeSpaceOS(java.lang.String,int,boolean)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $l3 = virtualinvoke r1.<org.apache.commons.io.FileSystemUtils: long freeSpaceWindows(java.lang.String)>(r0) in <org.apache.commons.io.FileSystemUtils: long freeSpaceOS(java.lang.String,int,boolean)> ==> <org.apache.commons.io.FileSystemUtils: long freeSpaceWindows(java.lang.String)>
VIRTUAL edge: $l4 = virtualinvoke r1.<org.apache.commons.io.FileSystemUtils: long freeSpaceWindows(java.lang.String)>(r0) in <org.apache.commons.io.FileSystemUtils: long freeSpaceOS(java.lang.String,int,boolean)> ==> <org.apache.commons.io.FileSystemUtils: long freeSpaceWindows(java.lang.String)>
VIRTUAL edge: $l2 = virtualinvoke r1.<org.apache.commons.io.FileSystemUtils: long freeSpaceUnix(java.lang.String,boolean,boolean)>(r0, z0, 0) in <org.apache.commons.io.FileSystemUtils: long freeSpaceOS(java.lang.String,int,boolean)> ==> <org.apache.commons.io.FileSystemUtils: long freeSpaceUnix(java.lang.String,boolean,boolean)>
VIRTUAL edge: $l1 = virtualinvoke r1.<org.apache.commons.io.FileSystemUtils: long freeSpaceUnix(java.lang.String,boolean,boolean)>(r0, z0, 1) in <org.apache.commons.io.FileSystemUtils: long freeSpaceOS(java.lang.String,int,boolean)> ==> <org.apache.commons.io.FileSystemUtils: long freeSpaceUnix(java.lang.String,boolean,boolean)>
SPECIAL edge: specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Unsupported operating system") in <org.apache.commons.io.FileSystemUtils: long freeSpaceOS(java.lang.String,int,boolean)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Exception caught when determining operating system") in <org.apache.commons.io.FileSystemUtils: long freeSpaceOS(java.lang.String,int,boolean)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
CLINIT edge: r12 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String)>(r11) in <org.apache.commons.io.FileSystemUtils: long freeSpaceWindows(java.lang.String)> ==> <org.apache.commons.io.FilenameUtils: void <clinit>()>
STATIC edge: r12 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String)>(r11) in <org.apache.commons.io.FileSystemUtils: long freeSpaceWindows(java.lang.String)> ==> <org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String)>
CLINIT edge: $r13 = newarray (java.lang.String)[3] in <org.apache.commons.io.FileSystemUtils: long freeSpaceWindows(java.lang.String)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: r32 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String)>(r31) in <org.apache.commons.io.FileSystemUtils: long freeSpaceUnix(java.lang.String,boolean,boolean)> ==> <org.apache.commons.io.FilenameUtils: void <clinit>()>
STATIC edge: r32 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String)>(r31) in <org.apache.commons.io.FileSystemUtils: long freeSpaceUnix(java.lang.String,boolean,boolean)> ==> <org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String)>
CLINIT edge: $r34 = newarray (java.lang.String)[2] in <org.apache.commons.io.FileSystemUtils: long freeSpaceUnix(java.lang.String,boolean,boolean)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r34 = newarray (java.lang.String)[3] in <org.apache.commons.io.FileSystemUtils: long freeSpaceUnix(java.lang.String,boolean,boolean)> ==> <java.lang.String: void <clinit>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.InheritableThreadLocal: java.lang.Object get()>() in <org.apache.commons.io.input.DemuxInputStream: java.io.InputStream getStream()> ==> <java.lang.ThreadLocal: java.lang.Object get()>
SPECIAL edge: specialinvoke $r1.<java.io.EOFException: void <init>()>() in <org.apache.commons.io.input.NullInputStream: int doEndOfFile()> ==> <java.io.EOFException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.io.EOFException: void <init>()>() in <org.apache.commons.io.input.NullReader: int doEndOfFile()> ==> <java.io.EOFException: void <init>()>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.io.output.ThresholdingOutputStream: void thresholdReached()>() in <org.apache.commons.io.output.ThresholdingOutputStream: void checkThreshold(int)> ==> <org.apache.commons.io.output.DeferredFileOutputStream: void thresholdReached()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.InheritableThreadLocal: java.lang.Object get()>() in <org.apache.commons.io.output.DemuxOutputStream: java.io.OutputStream getStream()> ==> <java.lang.ThreadLocal: java.lang.Object get()>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.io.File: boolean exists()>() in <org.apache.commons.io.output.LockableFileWriter: void testLockDir(java.io.File)> ==> <java.io.File: boolean exists()>
VIRTUAL edge: $r10 = virtualinvoke r0.<java.io.File: java.lang.String getAbsolutePath()>() in <org.apache.commons.io.output.LockableFileWriter: void testLockDir(java.io.File)> ==> <java.io.File: java.lang.String getAbsolutePath()>
VIRTUAL edge: $z1 = virtualinvoke r0.<java.io.File: boolean canWrite()>() in <org.apache.commons.io.output.LockableFileWriter: void testLockDir(java.io.File)> ==> <java.io.File: boolean canWrite()>
VIRTUAL edge: $r4 = virtualinvoke r0.<java.io.File: java.lang.String getAbsolutePath()>() in <org.apache.commons.io.output.LockableFileWriter: void testLockDir(java.io.File)> ==> <java.io.File: java.lang.String getAbsolutePath()>
SPECIAL edge: specialinvoke $r8.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.output.LockableFileWriter: void testLockDir(java.io.File)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not find lockDir: ") in <org.apache.commons.io.output.LockableFileWriter: void testLockDir(java.io.File)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10) in <org.apache.commons.io.output.LockableFileWriter: void testLockDir(java.io.File)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.output.LockableFileWriter: void testLockDir(java.io.File)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>($r12) in <org.apache.commons.io.output.LockableFileWriter: void testLockDir(java.io.File)> ==> <java.io.IOException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.output.LockableFileWriter: void testLockDir(java.io.File)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not write to lockDir: ") in <org.apache.commons.io.output.LockableFileWriter: void testLockDir(java.io.File)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4) in <org.apache.commons.io.output.LockableFileWriter: void testLockDir(java.io.File)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.output.LockableFileWriter: void testLockDir(java.io.File)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>($r6) in <org.apache.commons.io.output.LockableFileWriter: void testLockDir(java.io.File)> ==> <java.io.IOException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.io.File: boolean createNewFile()>() in <org.apache.commons.io.output.LockableFileWriter: void createLock()> ==> <java.io.File: boolean createNewFile()>
SPECIAL edge: specialinvoke $r6.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.output.LockableFileWriter: void createLock()> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Can\'t write file, lock ") in <org.apache.commons.io.output.LockableFileWriter: void createLock()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.io.File: java.lang.String getAbsolutePath()>() in <org.apache.commons.io.output.LockableFileWriter: void createLock()> ==> <java.io.File: java.lang.String getAbsolutePath()>
VIRTUAL edge: $r10 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9) in <org.apache.commons.io.output.LockableFileWriter: void createLock()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" exists") in <org.apache.commons.io.output.LockableFileWriter: void createLock()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.output.LockableFileWriter: void createLock()> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>($r12) in <org.apache.commons.io.output.LockableFileWriter: void createLock()> ==> <java.io.IOException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r4.<java.io.File: void deleteOnExit()>() in <org.apache.commons.io.output.LockableFileWriter: void createLock()> ==> <java.io.File: void deleteOnExit()>
VIRTUAL edge: z0 = virtualinvoke r0.<java.io.File: boolean exists()>() in <org.apache.commons.io.output.LockableFileWriter: java.io.Writer initWriter(java.io.File,java.lang.String,boolean)> ==> <java.io.File: boolean exists()>
VIRTUAL edge: $r6 = virtualinvoke r0.<java.io.File: java.lang.String getAbsolutePath()>() in <org.apache.commons.io.output.LockableFileWriter: java.io.Writer initWriter(java.io.File,java.lang.String,boolean)> ==> <java.io.File: java.lang.String getAbsolutePath()>
VIRTUAL edge: $r3 = virtualinvoke r0.<java.io.File: java.lang.String getAbsolutePath()>() in <org.apache.commons.io.output.LockableFileWriter: java.io.Writer initWriter(java.io.File,java.lang.String,boolean)> ==> <java.io.File: java.lang.String getAbsolutePath()>
VIRTUAL edge: virtualinvoke r0.<java.io.File: boolean delete()>() in <org.apache.commons.io.output.LockableFileWriter: java.io.Writer initWriter(java.io.File,java.lang.String,boolean)> ==> <java.io.File: boolean delete()>
VIRTUAL edge: virtualinvoke r0.<java.io.File: boolean delete()>() in <org.apache.commons.io.output.LockableFileWriter: java.io.Writer initWriter(java.io.File,java.lang.String,boolean)> ==> <java.io.File: boolean delete()>
SPECIAL edge: specialinvoke $r16.<java.io.FileWriter: void <init>(java.lang.String,boolean)>($r6, z1) in <org.apache.commons.io.output.LockableFileWriter: java.io.Writer initWriter(java.io.File,java.lang.String,boolean)> ==> <java.io.FileWriter: void <init>(java.lang.String,boolean)>
SPECIAL edge: specialinvoke $r17.<java.io.FileOutputStream: void <init>(java.lang.String,boolean)>($r3, z1) in <org.apache.commons.io.output.LockableFileWriter: java.io.Writer initWriter(java.io.File,java.lang.String,boolean)> ==> <java.io.FileOutputStream: void <init>(java.lang.String,boolean)>
SPECIAL edge: specialinvoke $r18.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>($r17, r1) in <org.apache.commons.io.output.LockableFileWriter: java.io.Writer initWriter(java.io.File,java.lang.String,boolean)> ==> <java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>
VIRTUAL edge: virtualinvoke $r11.<java.io.File: boolean delete()>() in <org.apache.commons.io.output.LockableFileWriter: java.io.Writer initWriter(java.io.File,java.lang.String,boolean)> ==> <java.io.File: boolean delete()>
VIRTUAL edge: virtualinvoke $r9.<java.io.File: boolean delete()>() in <org.apache.commons.io.output.LockableFileWriter: java.io.Writer initWriter(java.io.File,java.lang.String,boolean)> ==> <java.io.File: boolean delete()>
VIRTUAL edge: $r5 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>() in <org.apache.commons.io.output.LockableFileWriter: java.lang.Class class$(java.lang.String)> ==> <java.lang.Throwable: java.lang.String getMessage()>
SPECIAL edge: specialinvoke $r4.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r5) in <org.apache.commons.io.output.LockableFileWriter: java.lang.Class class$(java.lang.String)> ==> <java.lang.NoClassDefFoundError: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>() in <org.apache.commons.io.filefilter.DirectoryFileFilter: void <init>()> ==> <org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>
SPECIAL edge: specialinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>() in <org.apache.commons.io.filefilter.FileFileFilter: void <init>()> ==> <org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.apache.commons.io.filefilter.TrueFileFilter: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.apache.commons.io.filefilter.FalseFileFilter: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.apache.commons.io.IOCase: void <init>(java.lang.String,boolean)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Thread: void <init>(java.lang.String)>("File Reaper") in <org.apache.commons.io.FileCleaningTracker$Reaper: void <init>(org.apache.commons.io.FileCleaningTracker)> ==> <java.lang.Thread: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.io.FileCleaningTracker$Reaper: void setPriority(int)>(10) in <org.apache.commons.io.FileCleaningTracker$Reaper: void <init>(org.apache.commons.io.FileCleaningTracker)> ==> <java.lang.Thread: void setPriority(int)>
VIRTUAL edge: virtualinvoke r0.<org.apache.commons.io.FileCleaningTracker$Reaper: void setDaemon(boolean)>(1) in <org.apache.commons.io.FileCleaningTracker$Reaper: void <init>(org.apache.commons.io.FileCleaningTracker)> ==> <java.lang.Thread: void setDaemon(boolean)>
SPECIAL edge: specialinvoke r0.<java.lang.ref.PhantomReference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>(r1, r2) in <org.apache.commons.io.FileCleaningTracker$Tracker: void <init>(java.lang.String,org.apache.commons.io.FileDeleteStrategy,java.lang.Object,java.lang.ref.ReferenceQueue)> ==> <java.lang.ref.PhantomReference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>
SPECIAL edge: specialinvoke $r0.<org.apache.commons.io.FileDeleteStrategy: void <init>(java.lang.String)>("Normal") in <org.apache.commons.io.FileDeleteStrategy: void <clinit>()> ==> <org.apache.commons.io.FileDeleteStrategy: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<org.apache.commons.io.FileDeleteStrategy$ForceFileDeleteStrategy: void <init>()>() in <org.apache.commons.io.FileDeleteStrategy: void <clinit>()> ==> <org.apache.commons.io.FileDeleteStrategy$ForceFileDeleteStrategy: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke r12.<java.lang.String: int length()>() in <org.apache.commons.io.FileSystemUtils: long freeSpaceWindows(java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: $c3 = virtualinvoke r12.<java.lang.String: char charAt(int)>(1) in <org.apache.commons.io.FileSystemUtils: long freeSpaceWindows(java.lang.String)> ==> <java.lang.String: char charAt(int)>
VIRTUAL edge: r12 = virtualinvoke r12.<java.lang.String: java.lang.String substring(int,int)>(0, 2) in <org.apache.commons.io.FileSystemUtils: long freeSpaceWindows(java.lang.String)> ==> <java.lang.String: java.lang.String substring(int,int)>
SPECIAL edge: specialinvoke $r14.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.FileSystemUtils: long freeSpaceWindows(java.lang.String)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("dir /-c ") in <org.apache.commons.io.FileSystemUtils: long freeSpaceWindows(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r12) in <org.apache.commons.io.FileSystemUtils: long freeSpaceWindows(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.FileSystemUtils: long freeSpaceWindows(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: r2 = virtualinvoke r1.<org.apache.commons.io.FileSystemUtils: java.util.List performCommand(java.lang.String[],int)>($r13, 2147483647) in <org.apache.commons.io.FileSystemUtils: long freeSpaceWindows(java.lang.String)> ==> <org.apache.commons.io.FileSystemUtils: java.util.List performCommand(java.lang.String[],int)>
VIRTUAL edge: $l2 = virtualinvoke r1.<org.apache.commons.io.FileSystemUtils: long parseDir(java.lang.String,java.lang.String)>(r10, r12) in <org.apache.commons.io.FileSystemUtils: long freeSpaceWindows(java.lang.String)> ==> <org.apache.commons.io.FileSystemUtils: long parseDir(java.lang.String,java.lang.String)>
INTERFACE edge: $i4 = interfaceinvoke r2.<java.util.List: int size()>() in <org.apache.commons.io.FileSystemUtils: long freeSpaceWindows(java.lang.String)> ==> <java.util.Vector: int size()>
INTERFACE edge: $i4 = interfaceinvoke r2.<java.util.List: int size()>() in <org.apache.commons.io.FileSystemUtils: long freeSpaceWindows(java.lang.String)> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i4 = interfaceinvoke r2.<java.util.List: int size()>() in <org.apache.commons.io.FileSystemUtils: long freeSpaceWindows(java.lang.String)> ==> <java.util.ArrayList: int size()>
INTERFACE edge: $r9 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i5) in <org.apache.commons.io.FileSystemUtils: long freeSpaceWindows(java.lang.String)> ==> <java.util.Vector: java.lang.Object get(int)>
INTERFACE edge: $r9 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i5) in <org.apache.commons.io.FileSystemUtils: long freeSpaceWindows(java.lang.String)> ==> <java.util.LinkedList: java.lang.Object get(int)>
INTERFACE edge: $r9 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i5) in <org.apache.commons.io.FileSystemUtils: long freeSpaceWindows(java.lang.String)> ==> <java.util.ArrayList: java.lang.Object get(int)>
VIRTUAL edge: $i1 = virtualinvoke r10.<java.lang.String: int length()>() in <org.apache.commons.io.FileSystemUtils: long freeSpaceWindows(java.lang.String)> ==> <java.lang.String: int length()>
SPECIAL edge: specialinvoke $r4.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.FileSystemUtils: long freeSpaceWindows(java.lang.String)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Command line \'dir /-c\' did not return any info for path \'") in <org.apache.commons.io.FileSystemUtils: long freeSpaceWindows(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r12) in <org.apache.commons.io.FileSystemUtils: long freeSpaceWindows(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'") in <org.apache.commons.io.FileSystemUtils: long freeSpaceWindows(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.FileSystemUtils: long freeSpaceWindows(java.lang.String)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>($r8) in <org.apache.commons.io.FileSystemUtils: long freeSpaceWindows(java.lang.String)> ==> <java.io.IOException: void <init>(java.lang.String)>
CLINIT edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r35) in <org.apache.commons.io.FileSystemUtils: java.util.List performCommand(java.lang.String[],int)> ==> <org.apache.commons.io.IOUtils: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Reader)>(r38) in <org.apache.commons.io.FileSystemUtils: java.util.List performCommand(java.lang.String[],int)> ==> <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Reader)>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r37) in <org.apache.commons.io.FileSystemUtils: java.util.List performCommand(java.lang.String[],int)> ==> <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r36) in <org.apache.commons.io.FileSystemUtils: java.util.List performCommand(java.lang.String[],int)> ==> <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r35) in <org.apache.commons.io.FileSystemUtils: java.util.List performCommand(java.lang.String[],int)> ==> <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>
STATIC edge: $r31 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r3) in <org.apache.commons.io.FileSystemUtils: java.util.List performCommand(java.lang.String[],int)> ==> <java.util.Arrays: java.util.List asList(java.lang.Object[])>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Reader)>($r44) in <org.apache.commons.io.FileSystemUtils: java.util.List performCommand(java.lang.String[],int)> ==> <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Reader)>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r37) in <org.apache.commons.io.FileSystemUtils: java.util.List performCommand(java.lang.String[],int)> ==> <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r36) in <org.apache.commons.io.FileSystemUtils: java.util.List performCommand(java.lang.String[],int)> ==> <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r35) in <org.apache.commons.io.FileSystemUtils: java.util.List performCommand(java.lang.String[],int)> ==> <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>
STATIC edge: $r10 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r3) in <org.apache.commons.io.FileSystemUtils: java.util.List performCommand(java.lang.String[],int)> ==> <java.util.Arrays: java.util.List asList(java.lang.Object[])>
STATIC edge: $r18 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r3) in <org.apache.commons.io.FileSystemUtils: java.util.List performCommand(java.lang.String[],int)> ==> <java.util.Arrays: java.util.List asList(java.lang.Object[])>
CLINIT edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r35) in <org.apache.commons.io.FileSystemUtils: java.util.List performCommand(java.lang.String[],int)> ==> <org.apache.commons.io.IOUtils: void <clinit>()>
CLINIT edge: $z1 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c9) in <org.apache.commons.io.FileSystemUtils: long parseDir(java.lang.String,java.lang.String)> ==> <java.lang.Character: void <clinit>()>
STATIC edge: $z0 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c10) in <org.apache.commons.io.FileSystemUtils: long parseDir(java.lang.String,java.lang.String)> ==> <java.lang.Character: boolean isDigit(char)>
STATIC edge: $z1 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c9) in <org.apache.commons.io.FileSystemUtils: long parseDir(java.lang.String,java.lang.String)> ==> <java.lang.Character: boolean isDigit(char)>
CLINIT edge: $z0 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c10) in <org.apache.commons.io.FileSystemUtils: long parseDir(java.lang.String,java.lang.String)> ==> <java.lang.Character: void <clinit>()>
VIRTUAL edge: $i0 = virtualinvoke r31.<java.lang.String: int length()>() in <org.apache.commons.io.FileSystemUtils: long freeSpaceUnix(java.lang.String,boolean,boolean)> ==> <java.lang.String: int length()>
SPECIAL edge: specialinvoke $r30.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Path must not be empty") in <org.apache.commons.io.FileSystemUtils: long freeSpaceUnix(java.lang.String,boolean,boolean)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r27.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.FileSystemUtils: long freeSpaceUnix(java.lang.String,boolean,boolean)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("-") in <org.apache.commons.io.FileSystemUtils: long freeSpaceUnix(java.lang.String,boolean,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("k") in <org.apache.commons.io.FileSystemUtils: long freeSpaceUnix(java.lang.String,boolean,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: r33 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.FileSystemUtils: long freeSpaceUnix(java.lang.String,boolean,boolean)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r24.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.FileSystemUtils: long freeSpaceUnix(java.lang.String,boolean,boolean)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r33) in <org.apache.commons.io.FileSystemUtils: long freeSpaceUnix(java.lang.String,boolean,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("P") in <org.apache.commons.io.FileSystemUtils: long freeSpaceUnix(java.lang.String,boolean,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: r33 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.FileSystemUtils: long freeSpaceUnix(java.lang.String,boolean,boolean)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: $i1 = virtualinvoke r33.<java.lang.String: int length()>() in <org.apache.commons.io.FileSystemUtils: long freeSpaceUnix(java.lang.String,boolean,boolean)> ==> <java.lang.String: int length()>
VIRTUAL edge: r2 = virtualinvoke r1.<org.apache.commons.io.FileSystemUtils: java.util.List performCommand(java.lang.String[],int)>($r34, 3) in <org.apache.commons.io.FileSystemUtils: long freeSpaceUnix(java.lang.String,boolean,boolean)> ==> <org.apache.commons.io.FileSystemUtils: java.util.List performCommand(java.lang.String[],int)>
VIRTUAL edge: $l4 = virtualinvoke r1.<org.apache.commons.io.FileSystemUtils: long parseBytes(java.lang.String,java.lang.String)>(r37, r32) in <org.apache.commons.io.FileSystemUtils: long freeSpaceUnix(java.lang.String,boolean,boolean)> ==> <org.apache.commons.io.FileSystemUtils: long parseBytes(java.lang.String,java.lang.String)>
INTERFACE edge: $i2 = interfaceinvoke r2.<java.util.List: int size()>() in <org.apache.commons.io.FileSystemUtils: long freeSpaceUnix(java.lang.String,boolean,boolean)> ==> <java.util.Vector: int size()>
INTERFACE edge: $i2 = interfaceinvoke r2.<java.util.List: int size()>() in <org.apache.commons.io.FileSystemUtils: long freeSpaceUnix(java.lang.String,boolean,boolean)> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i2 = interfaceinvoke r2.<java.util.List: int size()>() in <org.apache.commons.io.FileSystemUtils: long freeSpaceUnix(java.lang.String,boolean,boolean)> ==> <java.util.ArrayList: int size()>
INTERFACE edge: $r3 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(1) in <org.apache.commons.io.FileSystemUtils: long freeSpaceUnix(java.lang.String,boolean,boolean)> ==> <java.util.Vector: java.lang.Object get(int)>
INTERFACE edge: $r3 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(1) in <org.apache.commons.io.FileSystemUtils: long freeSpaceUnix(java.lang.String,boolean,boolean)> ==> <java.util.LinkedList: java.lang.Object get(int)>
INTERFACE edge: $r3 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(1) in <org.apache.commons.io.FileSystemUtils: long freeSpaceUnix(java.lang.String,boolean,boolean)> ==> <java.util.ArrayList: java.lang.Object get(int)>
INTERFACE edge: $i6 = interfaceinvoke r2.<java.util.List: int size()>() in <org.apache.commons.io.FileSystemUtils: long freeSpaceUnix(java.lang.String,boolean,boolean)> ==> <java.util.Vector: int size()>
INTERFACE edge: $i6 = interfaceinvoke r2.<java.util.List: int size()>() in <org.apache.commons.io.FileSystemUtils: long freeSpaceUnix(java.lang.String,boolean,boolean)> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i6 = interfaceinvoke r2.<java.util.List: int size()>() in <org.apache.commons.io.FileSystemUtils: long freeSpaceUnix(java.lang.String,boolean,boolean)> ==> <java.util.ArrayList: int size()>
INTERFACE edge: $r15 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(2) in <org.apache.commons.io.FileSystemUtils: long freeSpaceUnix(java.lang.String,boolean,boolean)> ==> <java.util.Vector: java.lang.Object get(int)>
INTERFACE edge: $r15 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(2) in <org.apache.commons.io.FileSystemUtils: long freeSpaceUnix(java.lang.String,boolean,boolean)> ==> <java.util.LinkedList: java.lang.Object get(int)>
INTERFACE edge: $r15 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(2) in <org.apache.commons.io.FileSystemUtils: long freeSpaceUnix(java.lang.String,boolean,boolean)> ==> <java.util.ArrayList: java.lang.Object get(int)>
SPECIAL edge: specialinvoke $r18.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.FileSystemUtils: long freeSpaceUnix(java.lang.String,boolean,boolean)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Command line \'df\' did not return info as expected for path \'") in <org.apache.commons.io.FileSystemUtils: long freeSpaceUnix(java.lang.String,boolean,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r32) in <org.apache.commons.io.FileSystemUtils: long freeSpaceUnix(java.lang.String,boolean,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'- response was ") in <org.apache.commons.io.FileSystemUtils: long freeSpaceUnix(java.lang.String,boolean,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r2) in <org.apache.commons.io.FileSystemUtils: long freeSpaceUnix(java.lang.String,boolean,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.FileSystemUtils: long freeSpaceUnix(java.lang.String,boolean,boolean)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r17.<java.io.IOException: void <init>(java.lang.String)>($r23) in <org.apache.commons.io.FileSystemUtils: long freeSpaceUnix(java.lang.String,boolean,boolean)> ==> <java.io.IOException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r5.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r4, " ") in <org.apache.commons.io.FileSystemUtils: long freeSpaceUnix(java.lang.String,boolean,boolean)> ==> <java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>
VIRTUAL edge: $i3 = virtualinvoke $r5.<java.util.StringTokenizer: int countTokens()>() in <org.apache.commons.io.FileSystemUtils: long freeSpaceUnix(java.lang.String,boolean,boolean)> ==> <java.util.StringTokenizer: int countTokens()>
VIRTUAL edge: $i5 = virtualinvoke $r5.<java.util.StringTokenizer: int countTokens()>() in <org.apache.commons.io.FileSystemUtils: long freeSpaceUnix(java.lang.String,boolean,boolean)> ==> <java.util.StringTokenizer: int countTokens()>
VIRTUAL edge: virtualinvoke $r5.<java.util.StringTokenizer: java.lang.String nextToken()>() in <org.apache.commons.io.FileSystemUtils: long freeSpaceUnix(java.lang.String,boolean,boolean)> ==> <java.util.StringTokenizer: java.lang.String nextToken()>
SPECIAL edge: specialinvoke $r16.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r36, " ") in <org.apache.commons.io.FileSystemUtils: long freeSpaceUnix(java.lang.String,boolean,boolean)> ==> <java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r10.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.FileSystemUtils: long freeSpaceUnix(java.lang.String,boolean,boolean)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Command line \'df\' did not return data as expected for path \'") in <org.apache.commons.io.FileSystemUtils: long freeSpaceUnix(java.lang.String,boolean,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r32) in <org.apache.commons.io.FileSystemUtils: long freeSpaceUnix(java.lang.String,boolean,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'- check path is valid") in <org.apache.commons.io.FileSystemUtils: long freeSpaceUnix(java.lang.String,boolean,boolean)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.FileSystemUtils: long freeSpaceUnix(java.lang.String,boolean,boolean)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>($r14) in <org.apache.commons.io.FileSystemUtils: long freeSpaceUnix(java.lang.String,boolean,boolean)> ==> <java.io.IOException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r35.<java.util.StringTokenizer: java.lang.String nextToken()>() in <org.apache.commons.io.FileSystemUtils: long freeSpaceUnix(java.lang.String,boolean,boolean)> ==> <java.util.StringTokenizer: java.lang.String nextToken()>
VIRTUAL edge: virtualinvoke r35.<java.util.StringTokenizer: java.lang.String nextToken()>() in <org.apache.commons.io.FileSystemUtils: long freeSpaceUnix(java.lang.String,boolean,boolean)> ==> <java.util.StringTokenizer: java.lang.String nextToken()>
VIRTUAL edge: r37 = virtualinvoke r35.<java.util.StringTokenizer: java.lang.String nextToken()>() in <org.apache.commons.io.FileSystemUtils: long freeSpaceUnix(java.lang.String,boolean,boolean)> ==> <java.util.StringTokenizer: java.lang.String nextToken()>
CLINIT edge: l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r0) in <org.apache.commons.io.FileSystemUtils: long parseBytes(java.lang.String,java.lang.String)> ==> <java.lang.Long: void <clinit>()>
STATIC edge: l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r0) in <org.apache.commons.io.FileSystemUtils: long parseBytes(java.lang.String,java.lang.String)> ==> <java.lang.Long: long parseLong(java.lang.String)>
CLINIT edge: <java.lang.Long: java.lang.Class TYPE> = null in <java.lang.Long: void <clinit>()> ==> <java.lang.Long: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<java.io.FileOutputStream: void <init>(java.io.File)>($r2) in <org.apache.commons.io.output.DeferredFileOutputStream: void thresholdReached()> ==> <java.io.FileOutputStream: void <init>(java.io.File)>
VIRTUAL edge: virtualinvoke $r4.<org.apache.commons.io.output.ByteArrayOutputStream: void writeTo(java.io.OutputStream)>($r0) in <org.apache.commons.io.output.DeferredFileOutputStream: void thresholdReached()> ==> <org.apache.commons.io.output.ByteArrayOutputStream: void writeTo(java.io.OutputStream)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.apache.commons.io.FileDeleteStrategy: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<org.apache.commons.io.FileDeleteStrategy: void <init>(java.lang.String)>("Force") in <org.apache.commons.io.FileDeleteStrategy$ForceFileDeleteStrategy: void <init>()> ==> <org.apache.commons.io.FileDeleteStrategy: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r42.<java.util.ArrayList: void <init>(int)>(20) in <org.apache.commons.io.FileSystemUtils: java.util.List performCommand(java.lang.String[],int)> ==> <java.util.ArrayList: void <init>(int)>
INTERFACE edge: $i4 = interfaceinvoke $r42.<java.util.List: int size()>() in <org.apache.commons.io.FileSystemUtils: java.util.List performCommand(java.lang.String[],int)> ==> <java.util.ArrayList: int size()>
INTERFACE edge: interfaceinvoke $r42.<java.util.List: boolean add(java.lang.Object)>(r40) in <org.apache.commons.io.FileSystemUtils: java.util.List performCommand(java.lang.String[],int)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: $i2 = interfaceinvoke $r42.<java.util.List: int size()>() in <org.apache.commons.io.FileSystemUtils: java.util.List performCommand(java.lang.String[],int)> ==> <java.util.ArrayList: int size()>
VIRTUAL edge: r34 = virtualinvoke r2.<org.apache.commons.io.FileSystemUtils: java.lang.Process openProcess(java.lang.String[])>(r3) in <org.apache.commons.io.FileSystemUtils: java.util.List performCommand(java.lang.String[],int)> ==> <org.apache.commons.io.FileSystemUtils: java.lang.Process openProcess(java.lang.String[])>
SPECIAL edge: specialinvoke $r43.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r35) in <org.apache.commons.io.FileSystemUtils: java.util.List performCommand(java.lang.String[],int)> ==> <java.io.InputStreamReader: void <init>(java.io.InputStream)>
SPECIAL edge: specialinvoke $r44.<java.io.BufferedReader: void <init>(java.io.Reader)>($r43) in <org.apache.commons.io.FileSystemUtils: java.util.List performCommand(java.lang.String[],int)> ==> <java.io.BufferedReader: void <init>(java.io.Reader)>
VIRTUAL edge: r39 = virtualinvoke $r44.<java.io.BufferedReader: java.lang.String readLine()>() in <org.apache.commons.io.FileSystemUtils: java.util.List performCommand(java.lang.String[],int)> ==> <java.io.BufferedReader: java.lang.String readLine()>
VIRTUAL edge: r39 = virtualinvoke $r44.<java.io.BufferedReader: java.lang.String readLine()>() in <org.apache.commons.io.FileSystemUtils: java.util.List performCommand(java.lang.String[],int)> ==> <java.io.BufferedReader: java.lang.String readLine()>
VIRTUAL edge: $r21 = virtualinvoke r39.<java.lang.String: java.lang.String toLowerCase()>() in <org.apache.commons.io.FileSystemUtils: java.util.List performCommand(java.lang.String[],int)> ==> <java.lang.String: java.lang.String toLowerCase()>
VIRTUAL edge: r40 = virtualinvoke $r21.<java.lang.String: java.lang.String trim()>() in <org.apache.commons.io.FileSystemUtils: java.util.List performCommand(java.lang.String[],int)> ==> <java.lang.String: java.lang.String trim()>
SPECIAL edge: specialinvoke $r45.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.FileSystemUtils: java.util.List performCommand(java.lang.String[],int)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r15 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Command line returned OS error code \'") in <org.apache.commons.io.FileSystemUtils: java.util.List performCommand(java.lang.String[],int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i3) in <org.apache.commons.io.FileSystemUtils: java.util.List performCommand(java.lang.String[],int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(int)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' for command ") in <org.apache.commons.io.FileSystemUtils: java.util.List performCommand(java.lang.String[],int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r19 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r18) in <org.apache.commons.io.FileSystemUtils: java.util.List performCommand(java.lang.String[],int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.FileSystemUtils: java.util.List performCommand(java.lang.String[],int)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r46.<java.io.IOException: void <init>(java.lang.String)>($r20) in <org.apache.commons.io.FileSystemUtils: java.util.List performCommand(java.lang.String[],int)> ==> <java.io.IOException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r47.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.FileSystemUtils: java.util.List performCommand(java.lang.String[],int)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r9 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Command line did not return any info for command ") in <org.apache.commons.io.FileSystemUtils: java.util.List performCommand(java.lang.String[],int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r10) in <org.apache.commons.io.FileSystemUtils: java.util.List performCommand(java.lang.String[],int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.FileSystemUtils: java.util.List performCommand(java.lang.String[],int)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r48.<java.io.IOException: void <init>(java.lang.String)>($r12) in <org.apache.commons.io.FileSystemUtils: java.util.List performCommand(java.lang.String[],int)> ==> <java.io.IOException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r49.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.FileSystemUtils: java.util.List performCommand(java.lang.String[],int)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r27 = virtualinvoke $r49.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Command line threw an InterruptedException \'") in <org.apache.commons.io.FileSystemUtils: java.util.List performCommand(java.lang.String[],int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r28 = virtualinvoke $r51.<java.lang.InterruptedException: java.lang.String getMessage()>() in <org.apache.commons.io.FileSystemUtils: java.util.List performCommand(java.lang.String[],int)> ==> <java.lang.InterruptedException: java.lang.String getMessage()>
VIRTUAL edge: $r29 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r28) in <org.apache.commons.io.FileSystemUtils: java.util.List performCommand(java.lang.String[],int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' for command ") in <org.apache.commons.io.FileSystemUtils: java.util.List performCommand(java.lang.String[],int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r32 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r31) in <org.apache.commons.io.FileSystemUtils: java.util.List performCommand(java.lang.String[],int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
VIRTUAL edge: $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.FileSystemUtils: java.util.List performCommand(java.lang.String[],int)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r50.<java.io.IOException: void <init>(java.lang.String)>($r33) in <org.apache.commons.io.FileSystemUtils: java.util.List performCommand(java.lang.String[],int)> ==> <java.io.IOException: void <init>(java.lang.String)>
STATIC edge: $r0 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>() in <org.apache.commons.io.FileSystemUtils: java.lang.Process openProcess(java.lang.String[])> ==> <java.lang.Runtime: java.lang.Runtime getRuntime()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.String: int length()>() in <org.apache.commons.io.FileSystemUtils: long parseDir(java.lang.String,java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: c9 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i8) in <org.apache.commons.io.FileSystemUtils: long parseDir(java.lang.String,java.lang.String)> ==> <java.lang.String: char charAt(int)>
VIRTUAL edge: c10 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i8) in <org.apache.commons.io.FileSystemUtils: long parseDir(java.lang.String,java.lang.String)> ==> <java.lang.String: char charAt(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i6, i7) in <org.apache.commons.io.FileSystemUtils: long parseDir(java.lang.String,java.lang.String)> ==> <java.lang.String: java.lang.String substring(int,int)>
SPECIAL edge: specialinvoke $r8.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.FileSystemUtils: long parseDir(java.lang.String,java.lang.String)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Command line \'dir /-c\' did not return valid info for path \'") in <org.apache.commons.io.FileSystemUtils: long parseDir(java.lang.String,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r5) in <org.apache.commons.io.FileSystemUtils: long parseDir(java.lang.String,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'") in <org.apache.commons.io.FileSystemUtils: long parseDir(java.lang.String,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.FileSystemUtils: long parseDir(java.lang.String,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>($r12) in <org.apache.commons.io.FileSystemUtils: long parseDir(java.lang.String,java.lang.String)> ==> <java.io.IOException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.lang.StringBuffer: void <init>(java.lang.String)>($r2) in <org.apache.commons.io.FileSystemUtils: long parseDir(java.lang.String,java.lang.String)> ==> <java.lang.StringBuffer: void <init>(java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.StringBuffer: int length()>() in <org.apache.commons.io.FileSystemUtils: long parseDir(java.lang.String,java.lang.String)> ==> <java.lang.StringBuffer: int length()>
VIRTUAL edge: $c3 = virtualinvoke $r1.<java.lang.StringBuffer: char charAt(int)>(i11) in <org.apache.commons.io.FileSystemUtils: long parseDir(java.lang.String,java.lang.String)> ==> <java.lang.StringBuffer: char charAt(int)>
VIRTUAL edge: $c5 = virtualinvoke $r1.<java.lang.StringBuffer: char charAt(int)>(i11) in <org.apache.commons.io.FileSystemUtils: long parseDir(java.lang.String,java.lang.String)> ==> <java.lang.StringBuffer: char charAt(int)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer deleteCharAt(int)>($i4) in <org.apache.commons.io.FileSystemUtils: long parseDir(java.lang.String,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer deleteCharAt(int)>
VIRTUAL edge: $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.FileSystemUtils: long parseDir(java.lang.String,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: $l2 = virtualinvoke r3.<org.apache.commons.io.FileSystemUtils: long parseBytes(java.lang.String,java.lang.String)>($r4, r5) in <org.apache.commons.io.FileSystemUtils: long parseDir(java.lang.String,java.lang.String)> ==> <org.apache.commons.io.FileSystemUtils: long parseBytes(java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.FileSystemUtils: long parseBytes(java.lang.String,java.lang.String)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Command line \'df\' did not find free space in response for path \'") in <org.apache.commons.io.FileSystemUtils: long parseBytes(java.lang.String,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4) in <org.apache.commons.io.FileSystemUtils: long parseBytes(java.lang.String,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'- check path is valid") in <org.apache.commons.io.FileSystemUtils: long parseBytes(java.lang.String,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.FileSystemUtils: long parseBytes(java.lang.String,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>($r7) in <org.apache.commons.io.FileSystemUtils: long parseBytes(java.lang.String,java.lang.String)> ==> <java.io.IOException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r10.<java.lang.StringBuffer: void <init>()>() in <org.apache.commons.io.FileSystemUtils: long parseBytes(java.lang.String,java.lang.String)> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Command line \'df\' did not return numeric data as expected for path \'") in <org.apache.commons.io.FileSystemUtils: long parseBytes(java.lang.String,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4) in <org.apache.commons.io.FileSystemUtils: long parseBytes(java.lang.String,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'- check path is valid") in <org.apache.commons.io.FileSystemUtils: long parseBytes(java.lang.String,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>() in <org.apache.commons.io.FileSystemUtils: long parseBytes(java.lang.String,java.lang.String)> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>($r14) in <org.apache.commons.io.FileSystemUtils: long parseBytes(java.lang.String,java.lang.String)> ==> <java.io.IOException: void <init>(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r0.<java.lang.Runtime: java.lang.Process exec(java.lang.String[])>(r1) in <org.apache.commons.io.FileSystemUtils: java.lang.Process openProcess(java.lang.String[])> ==> <java.lang.Runtime: java.lang.Process exec(java.lang.String[])>
