FINALIZE edge: null in <java.lang.Object: void <init>()> ==> <java.lang.Object: void finalize()>
CLINIT edge: $r0 = <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarHandler: org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarHandler INSTANCE> in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarHandler: org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarHandler getInstance()> ==> <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarHandler: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>(r4, "UTF-8") in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: java.util.jar.JarFile getJarFile()> ==> <java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>
STATIC edge: $r1 = staticinvoke <io.atlassian.util.concurrent.CopyOnWriteMap: io.atlassian.util.concurrent.CopyOnWriteMap$Builder builder()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: void <init>(java.io.File)> ==> <io.atlassian.util.concurrent.CopyOnWriteMap: io.atlassian.util.concurrent.CopyOnWriteMap$Builder builder()>
STATIC edge: staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.String,java.lang.Object)>($z0, "The plugin installation directory must exist, %s", $r7) in <com.atlassian.plugin.repositories.FilePluginInstaller: void <init>(java.io.File)> ==> <com.google.common.base.Preconditions: void checkState(boolean,java.lang.String,java.lang.Object)>
STATIC edge: $r5 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r4) in <com.atlassian.plugin.repositories.FilePluginInstaller: void <init>(java.io.File)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
CLINIT edge: $r2 = new java.io.File in <com.atlassian.plugin.repositories.FilePluginInstaller: void installPlugin(java.lang.String,com.atlassian.plugin.PluginArtifact)> ==> <java.io.File: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: int copy(java.io.InputStream,java.io.OutputStream)>(r30, $r7) in <com.atlassian.plugin.repositories.FilePluginInstaller: void installPlugin(java.lang.String,com.atlassian.plugin.PluginArtifact)> ==> <org.apache.commons.io.IOUtils: int copy(java.io.InputStream,java.io.OutputStream)>
STATIC edge: staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "The plugin artifact must not be null") in <com.atlassian.plugin.repositories.FilePluginInstaller: void installPlugin(java.lang.String,com.atlassian.plugin.PluginArtifact)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>
STATIC edge: staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "The plugin key must be specified") in <com.atlassian.plugin.repositories.FilePluginInstaller: void installPlugin(java.lang.String,com.atlassian.plugin.PluginArtifact)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>
CLINIT edge: $r27 = <com.atlassian.plugin.repositories.FilePluginInstaller: org.slf4j.Logger log> in <com.atlassian.plugin.repositories.FilePluginInstaller: void installPlugin(java.lang.String,com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.repositories.FilePluginInstaller: void <clinit>()>
CLINIT edge: $r5 = new java.io.File in <com.atlassian.plugin.repositories.FilePluginInstaller: void revertInstalledPlugin(java.lang.String)> ==> <java.io.File: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.io.FileUtils: void moveFile(java.io.File,java.io.File)>($r10, $r11) in <com.atlassian.plugin.repositories.FilePluginInstaller: void revertInstalledPlugin(java.lang.String)> ==> <org.apache.commons.io.FileUtils: void moveFile(java.io.File,java.io.File)>
CLINIT edge: $r17 = <com.atlassian.plugin.repositories.FilePluginInstaller: org.slf4j.Logger log> in <com.atlassian.plugin.repositories.FilePluginInstaller: void revertInstalledPlugin(java.lang.String)> ==> <com.atlassian.plugin.repositories.FilePluginInstaller: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "backupFile") in <com.atlassian.plugin.repositories.FilePluginInstaller$BackupRepresentation: void <init>(java.io.File,java.lang.String)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>
STATIC edge: $r5 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r4, "originalPluginArtifactFilename") in <com.atlassian.plugin.repositories.FilePluginInstaller$BackupRepresentation: void <init>(java.io.File,java.lang.String)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>
STATIC edge: $r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "oldBackup") in <com.atlassian.plugin.repositories.FilePluginInstaller$BackupRepresentation: void <init>(com.atlassian.plugin.repositories.FilePluginInstaller$BackupRepresentation,java.lang.String)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>
STATIC edge: $r7 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r6, "currentPluginFilename") in <com.atlassian.plugin.repositories.FilePluginInstaller$BackupRepresentation: void <init>(com.atlassian.plugin.repositories.FilePluginInstaller$BackupRepresentation,java.lang.String)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>
STATIC edge: $r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1) in <com.atlassian.plugin.loaders.classloading.ForwardingScanner: void <init>(com.atlassian.plugin.loaders.classloading.Scanner)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
STATIC edge: $r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1) in <com.atlassian.plugin.util.resource.AlternativePluginResourceLoader: void <init>(com.atlassian.plugin.Plugin)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
CLINIT edge: $r5 = new java.math.BigInteger in <com.atlassian.plugin.util.VersionStringComparator$VersionStringComponentComparator: int compare(java.lang.String,java.lang.String)> ==> <java.math.BigInteger: void <clinit>()>
CLINIT edge: $r1 = <com.atlassian.plugin.util.VersionStringComparator: java.util.regex.Pattern SNAPSHOT_PATTERN> in <com.atlassian.plugin.util.VersionStringComparator: boolean isSnapshotVersion(java.lang.String)> ==> <com.atlassian.plugin.util.VersionStringComparator: void <clinit>()>
STATIC edge: $z0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isNotEmpty(java.lang.CharSequence)>(r0) in <com.atlassian.plugin.util.VersionStringComparator: int compare(java.lang.String,java.lang.String)> ==> <org.apache.commons.lang3.StringUtils: boolean isNotEmpty(java.lang.CharSequence)>
STATIC edge: $z1 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isNotEmpty(java.lang.CharSequence)>(r1) in <com.atlassian.plugin.util.VersionStringComparator: int compare(java.lang.String,java.lang.String)> ==> <org.apache.commons.lang3.StringUtils: boolean isNotEmpty(java.lang.CharSequence)>
CLINIT edge: staticinvoke <com.atlassian.plugin.util.ClassLoaderStack: void push(java.lang.ClassLoader)>($r1) in <com.atlassian.plugin.util.ContextClassLoaderSettingInvocationHandler: java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])> ==> <com.atlassian.plugin.util.ClassLoaderStack: void <clinit>()>
STATIC edge: staticinvoke <com.atlassian.plugin.util.ClassLoaderStack: java.lang.ClassLoader pop()>() in <com.atlassian.plugin.util.ContextClassLoaderSettingInvocationHandler: java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])> ==> <com.atlassian.plugin.util.ClassLoaderStack: java.lang.ClassLoader pop()>
STATIC edge: staticinvoke <com.atlassian.plugin.util.ClassLoaderStack: java.lang.ClassLoader pop()>() in <com.atlassian.plugin.util.ContextClassLoaderSettingInvocationHandler: java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])> ==> <com.atlassian.plugin.util.ClassLoaderStack: java.lang.ClassLoader pop()>
STATIC edge: staticinvoke <com.atlassian.plugin.util.ClassLoaderStack: void push(java.lang.ClassLoader)>($r1) in <com.atlassian.plugin.util.ContextClassLoaderSettingInvocationHandler: java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])> ==> <com.atlassian.plugin.util.ClassLoaderStack: void push(java.lang.ClassLoader)>
CLINIT edge: staticinvoke <com.atlassian.plugin.util.ClassLoaderStack: java.lang.ClassLoader pop()>() in <com.atlassian.plugin.util.ContextClassLoaderSettingInvocationHandler: java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])> ==> <com.atlassian.plugin.util.ClassLoaderStack: void <clinit>()>
CLINIT edge: $r1 = <com.atlassian.plugin.util.ClassLoaderStack: java.lang.ThreadLocal CLASS_LOADER_STACK> in <com.atlassian.plugin.util.ClassLoaderStack: void push(java.lang.ClassLoader)> ==> <com.atlassian.plugin.util.ClassLoaderStack: void <clinit>()>
STATIC edge: $r5 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() in <com.atlassian.plugin.util.ClassLoaderStack: void push(java.lang.ClassLoader)> ==> <java.lang.Thread: java.lang.Thread currentThread()>
STATIC edge: $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() in <com.atlassian.plugin.util.ClassLoaderStack: void push(java.lang.ClassLoader)> ==> <java.lang.Thread: java.lang.Thread currentThread()>
CLINIT edge: $r0 = <com.atlassian.plugin.util.ClassLoaderStack: java.lang.ThreadLocal CLASS_LOADER_STACK> in <com.atlassian.plugin.util.ClassLoaderStack: java.lang.ClassLoader pop()> ==> <com.atlassian.plugin.util.ClassLoaderStack: void <clinit>()>
STATIC edge: $r5 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() in <com.atlassian.plugin.util.ClassLoaderStack: java.lang.ClassLoader pop()> ==> <java.lang.Thread: java.lang.Thread currentThread()>
STATIC edge: $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() in <com.atlassian.plugin.util.ClassLoaderStack: java.lang.ClassLoader pop()> ==> <java.lang.Thread: java.lang.Thread currentThread()>
CLINIT edge: $r10 = staticinvoke <java.util.Collections: java.util.List emptyList()>() in <com.atlassian.plugin.loaders.FileListScanner: java.util.Collection scan()> ==> <java.util.Collections: void <clinit>()>
STATIC edge: $r10 = staticinvoke <java.util.Collections: java.util.List emptyList()>() in <com.atlassian.plugin.loaders.FileListScanner: java.util.Collection scan()> ==> <java.util.Collections: java.util.List emptyList()>
CLINIT edge: $r2 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>($r1) in <com.atlassian.plugin.loaders.FileListScanner: java.util.Collection getDeploymentUnits()> ==> <java.util.Collections: void <clinit>()>
STATIC edge: $r2 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>($r1) in <com.atlassian.plugin.loaders.FileListScanner: java.util.Collection getDeploymentUnits()> ==> <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>
CLINIT edge: $r0 = <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode: com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode[] $VALUES> in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode: com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode[] values()> ==> <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lcom/atlassian/plugin/manager/store/SynchronizedPluginPersistentStateStore$LockMode;", r0) in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode: com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode valueOf(java.lang.String)> ==> <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
CLINIT edge: $r0 = staticinvoke <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode: java.lang.String access$100()>() in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore: java.lang.String getLockModeProperty()> ==> <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode: void <clinit>()>
STATIC edge: $r0 = staticinvoke <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode: java.lang.String access$100()>() in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore: java.lang.String getLockModeProperty()> ==> <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode: java.lang.String access$100()>
CLINIT edge: $r2 = staticinvoke <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode: com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode current()>() in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore)> ==> <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode: com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode current()>() in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore)> ==> <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode: com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode current()>
STATIC edge: $r4 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r3) in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore,java.util.concurrent.locks.ReadWriteLock)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
STATIC edge: $r9 = staticinvoke <io.atlassian.util.concurrent.ManagedLocks: io.atlassian.util.concurrent.ManagedLock$ReadWrite manageReadWrite(java.util.concurrent.locks.ReadWriteLock)>($r8) in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore,java.util.concurrent.locks.ReadWriteLock)> ==> <io.atlassian.util.concurrent.ManagedLocks: io.atlassian.util.concurrent.ManagedLock$ReadWrite manageReadWrite(java.util.concurrent.locks.ReadWriteLock)>
STATIC edge: $r7 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r6) in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore,java.util.concurrent.locks.ReadWriteLock)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
CLINIT edge: $r2 = <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore: org.slf4j.Logger log> in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore: void save(com.atlassian.plugin.manager.PluginPersistentState)> ==> <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore: void <clinit>()>
STATIC edge: $r7 = staticinvoke <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$lambda_save_0__17: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore,com.atlassian.plugin.manager.PluginPersistentState)>(r0, r6) in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore: void save(com.atlassian.plugin.manager.PluginPersistentState)> ==> <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$lambda_save_0__17: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore,com.atlassian.plugin.manager.PluginPersistentState)>
STATIC edge: $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore: void save(com.atlassian.plugin.manager.PluginPersistentState)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
CLINIT edge: $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore: void save(com.atlassian.plugin.manager.PluginPersistentState)> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: $r2 = <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore: org.slf4j.Logger log> in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore: com.atlassian.plugin.manager.PluginPersistentState load()> ==> <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore: void <clinit>()>
STATIC edge: $r8 = staticinvoke <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$load__18: java.util.function.Supplier bootstrap$(com.atlassian.plugin.manager.PluginPersistentStateStore)>($r6) in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore: com.atlassian.plugin.manager.PluginPersistentState load()> ==> <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$load__18: java.util.function.Supplier bootstrap$(com.atlassian.plugin.manager.PluginPersistentStateStore)>
STATIC edge: $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore: com.atlassian.plugin.manager.PluginPersistentState load()> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
CLINIT edge: $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore: com.atlassian.plugin.manager.PluginPersistentState load()> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(r0) in <com.atlassian.plugin.util.EnumUtils: java.lang.Enum enumValueFromProperty(java.lang.String,java.lang.Enum[],java.lang.Enum)> ==> <java.lang.System: void <clinit>()>
STATIC edge: r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(r0) in <com.atlassian.plugin.util.EnumUtils: java.lang.Enum enumValueFromProperty(java.lang.String,java.lang.Enum[],java.lang.Enum)> ==> <java.lang.System: java.lang.String getProperty(java.lang.String)>
STATIC edge: $r4 = staticinvoke <com.atlassian.plugin.manager.PluginPersistentState$getKey__186: java.util.function.Function bootstrap$()>() in <com.atlassian.plugin.manager.PluginPersistentState: java.util.Map getMap()> ==> <com.atlassian.plugin.manager.PluginPersistentState$getKey__186: java.util.function.Function bootstrap$()>
STATIC edge: $r6 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toMap(java.util.function.Function,java.util.function.Function)>($r4, $r5) in <com.atlassian.plugin.manager.PluginPersistentState: java.util.Map getMap()> ==> <java.util.stream.Collectors: java.util.stream.Collector toMap(java.util.function.Function,java.util.function.Function)>
STATIC edge: $r5 = staticinvoke <com.atlassian.plugin.manager.PluginPersistentState$lambda_getMap_0__189: java.util.function.Function bootstrap$()>() in <com.atlassian.plugin.manager.PluginPersistentState: java.util.Map getMap()> ==> <com.atlassian.plugin.manager.PluginPersistentState$lambda_getMap_0__189: java.util.function.Function bootstrap$()>
STATIC edge: $r5 = staticinvoke <com.atlassian.plugin.manager.PluginPersistentState$getKey__187: java.util.function.Function bootstrap$()>() in <com.atlassian.plugin.manager.PluginPersistentState: java.util.Map getPluginStateMap(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.PluginPersistentState$getKey__187: java.util.function.Function bootstrap$()>
STATIC edge: $r7 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toMap(java.util.function.Function,java.util.function.Function)>($r5, $r6) in <com.atlassian.plugin.manager.PluginPersistentState: java.util.Map getPluginStateMap(com.atlassian.plugin.Plugin)> ==> <java.util.stream.Collectors: java.util.stream.Collector toMap(java.util.function.Function,java.util.function.Function)>
STATIC edge: $r6 = staticinvoke <com.atlassian.plugin.manager.PluginPersistentState$lambda_getPluginStateMap_1__188: java.util.function.Function bootstrap$()>() in <com.atlassian.plugin.manager.PluginPersistentState: java.util.Map getPluginStateMap(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.PluginPersistentState$lambda_getPluginStateMap_1__188: java.util.function.Function bootstrap$()>
STATIC edge: $r5 = staticinvoke <com.atlassian.plugin.manager.PluginPersistentState$Builder$getKey__100: java.util.function.Function bootstrap$()>() in <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder addState(java.util.Map)> ==> <com.atlassian.plugin.manager.PluginPersistentState$Builder$getKey__100: java.util.function.Function bootstrap$()>
STATIC edge: $r7 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toMap(java.util.function.Function,java.util.function.Function)>($r5, $r6) in <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder addState(java.util.Map)> ==> <java.util.stream.Collectors: java.util.stream.Collector toMap(java.util.function.Function,java.util.function.Function)>
STATIC edge: $r6 = staticinvoke <com.atlassian.plugin.manager.PluginPersistentState$Builder$lambda_addState_0__102: java.util.function.Function bootstrap$()>() in <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder addState(java.util.Map)> ==> <com.atlassian.plugin.manager.PluginPersistentState$Builder$lambda_addState_0__102: java.util.function.Function bootstrap$()>
STATIC edge: r0 = staticinvoke <com.atlassian.plugin.PluginRestartState: com.atlassian.plugin.PluginRestartState[] values()>() in <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder setPluginRestartState(java.lang.String,com.atlassian.plugin.PluginRestartState)> ==> <com.atlassian.plugin.PluginRestartState: com.atlassian.plugin.PluginRestartState[] values()>
STATIC edge: $r7 = staticinvoke <com.atlassian.plugin.manager.PluginEnabledState: com.atlassian.plugin.manager.PluginEnabledState getPluginEnabledStateWithCurrentTime(boolean)>(1) in <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder setPluginRestartState(java.lang.String,com.atlassian.plugin.PluginRestartState)> ==> <com.atlassian.plugin.manager.PluginEnabledState: com.atlassian.plugin.manager.PluginEnabledState getPluginEnabledStateWithCurrentTime(boolean)>
STATIC edge: $r6 = staticinvoke <com.atlassian.plugin.manager.PluginPersistentState$Util: java.lang.String buildStateKey(java.lang.String,com.atlassian.plugin.PluginRestartState)>(r4, r1) in <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder setPluginRestartState(java.lang.String,com.atlassian.plugin.PluginRestartState)> ==> <com.atlassian.plugin.manager.PluginPersistentState$Util: java.lang.String buildStateKey(java.lang.String,com.atlassian.plugin.PluginRestartState)>
STATIC edge: $r11 = staticinvoke <com.atlassian.plugin.manager.PluginPersistentState$Util: java.lang.String buildStateKey(java.lang.String,com.atlassian.plugin.PluginRestartState)>(r4, r9) in <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder setPluginRestartState(java.lang.String,com.atlassian.plugin.PluginRestartState)> ==> <com.atlassian.plugin.manager.PluginPersistentState$Util: java.lang.String buildStateKey(java.lang.String,com.atlassian.plugin.PluginRestartState)>
CLINIT edge: $r2 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r1) in <com.atlassian.plugin.manager.DefaultPluginPersistentState: java.util.Map getStatesMap()> ==> <java.util.Collections: void <clinit>()>
STATIC edge: $r2 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r1) in <com.atlassian.plugin.manager.DefaultPluginPersistentState: java.util.Map getStatesMap()> ==> <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>
STATIC edge: $r5 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginPersistentState$lambda_getPluginEnabledStateMap_0__128: java.util.function.Predicate bootstrap$(com.atlassian.plugin.Plugin)>(r4) in <com.atlassian.plugin.manager.DefaultPluginPersistentState: java.util.Map getPluginEnabledStateMap(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DefaultPluginPersistentState$lambda_getPluginEnabledStateMap_0__128: java.util.function.Predicate bootstrap$(com.atlassian.plugin.Plugin)>
STATIC edge: $r9 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toMap(java.util.function.Function,java.util.function.Function)>($r7, $r8) in <com.atlassian.plugin.manager.DefaultPluginPersistentState: java.util.Map getPluginEnabledStateMap(com.atlassian.plugin.Plugin)> ==> <java.util.stream.Collectors: java.util.stream.Collector toMap(java.util.function.Function,java.util.function.Function)>
STATIC edge: $r8 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginPersistentState$getValue__132: java.util.function.Function bootstrap$()>() in <com.atlassian.plugin.manager.DefaultPluginPersistentState: java.util.Map getPluginEnabledStateMap(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DefaultPluginPersistentState$getValue__132: java.util.function.Function bootstrap$()>
STATIC edge: $r7 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginPersistentState$getKey__129: java.util.function.Function bootstrap$()>() in <com.atlassian.plugin.manager.DefaultPluginPersistentState: java.util.Map getPluginEnabledStateMap(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DefaultPluginPersistentState$getKey__129: java.util.function.Function bootstrap$()>
STATIC edge: r0 = staticinvoke <com.atlassian.plugin.PluginRestartState: com.atlassian.plugin.PluginRestartState[] values()>() in <com.atlassian.plugin.manager.DefaultPluginPersistentState: com.atlassian.plugin.PluginRestartState getPluginRestartState(java.lang.String)> ==> <com.atlassian.plugin.PluginRestartState: com.atlassian.plugin.PluginRestartState[] values()>
STATIC edge: $r6 = staticinvoke <com.atlassian.plugin.manager.PluginPersistentState$Util: java.lang.String buildStateKey(java.lang.String,com.atlassian.plugin.PluginRestartState)>(r4, r2) in <com.atlassian.plugin.manager.DefaultPluginPersistentState: com.atlassian.plugin.PluginRestartState getPluginRestartState(java.lang.String)> ==> <com.atlassian.plugin.manager.PluginPersistentState$Util: java.lang.String buildStateKey(java.lang.String,com.atlassian.plugin.PluginRestartState)>
CLINIT edge: $r9 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r0) in <com.atlassian.plugin.manager.DefaultPluginPersistentState: java.util.Map getPluginEnabledStateMap(java.util.Map)> ==> <java.util.Collections: void <clinit>()>
STATIC edge: $r9 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r0) in <com.atlassian.plugin.manager.DefaultPluginPersistentState: java.util.Map getPluginEnabledStateMap(java.util.Map)> ==> <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>
STATIC edge: $r6 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toMap(java.util.function.Function,java.util.function.Function)>($r4, $r5) in <com.atlassian.plugin.manager.DefaultPluginPersistentState: java.util.Map getPluginEnabledStateMap(java.util.Map)> ==> <java.util.stream.Collectors: java.util.stream.Collector toMap(java.util.function.Function,java.util.function.Function)>
STATIC edge: $r5 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginPersistentState$lambda_getPluginEnabledStateMap_1__133: java.util.function.Function bootstrap$()>() in <com.atlassian.plugin.manager.DefaultPluginPersistentState: java.util.Map getPluginEnabledStateMap(java.util.Map)> ==> <com.atlassian.plugin.manager.DefaultPluginPersistentState$lambda_getPluginEnabledStateMap_1__133: java.util.function.Function bootstrap$()>
STATIC edge: $r4 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginPersistentState$getKey__130: java.util.function.Function bootstrap$()>() in <com.atlassian.plugin.manager.DefaultPluginPersistentState: java.util.Map getPluginEnabledStateMap(java.util.Map)> ==> <com.atlassian.plugin.manager.DefaultPluginPersistentState$getKey__130: java.util.function.Function bootstrap$()>
CLINIT edge: r3 = staticinvoke <com.atlassian.plugin.parsers.XmlDescriptorParserUtils: com.atlassian.plugin.ModuleDescriptor newModuleDescriptor(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)>(r0, r1, r2) in <com.atlassian.plugin.parsers.XmlDescriptorParserUtils: com.atlassian.plugin.ModuleDescriptor addModule(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin,org.dom4j.Element)> ==> <com.atlassian.plugin.parsers.XmlDescriptorParserUtils: void <clinit>()>
STATIC edge: r3 = staticinvoke <com.atlassian.plugin.parsers.XmlDescriptorParserUtils: com.atlassian.plugin.ModuleDescriptor newModuleDescriptor(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)>(r0, r1, r2) in <com.atlassian.plugin.parsers.XmlDescriptorParserUtils: com.atlassian.plugin.ModuleDescriptor addModule(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin,org.dom4j.Element)> ==> <com.atlassian.plugin.parsers.XmlDescriptorParserUtils: com.atlassian.plugin.ModuleDescriptor newModuleDescriptor(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)>
STATIC edge: r8 = staticinvoke <com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)>(r2, r4, r9, r7) in <com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptorFactory: com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptor createUnrecognisedModuleDescriptor(com.atlassian.plugin.Plugin,org.dom4j.Element,java.lang.Throwable,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)>
STATIC edge: $r1 = staticinvoke <java.util.Optional: java.util.Optional empty()>() in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void <init>(com.atlassian.plugin.module.ModuleFactory)> ==> <java.util.Optional: java.util.Optional empty()>
STATIC edge: $r4 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r3, "Module creator factory cannot be null") in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void <init>(com.atlassian.plugin.module.ModuleFactory)> ==> <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>
CLINIT edge: $r25 = <java.lang.Boolean: java.lang.Boolean TRUE> in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void init(com.atlassian.plugin.Plugin,org.dom4j.Element)> ==> <java.lang.Boolean: void <clinit>()>
STATIC edge: $r21 = staticinvoke <com.atlassian.plugin.Resources: com.atlassian.plugin.Resources fromXml(org.dom4j.Element)>(r1) in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void init(com.atlassian.plugin.Plugin,org.dom4j.Element)> ==> <com.atlassian.plugin.Resources: com.atlassian.plugin.Resources fromXml(org.dom4j.Element)>
STATIC edge: $r24 = staticinvoke <java.lang.Float: java.lang.Float valueOf(java.lang.String)>($r23) in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void init(com.atlassian.plugin.Plugin,org.dom4j.Element)> ==> <java.lang.Float: java.lang.Float valueOf(java.lang.String)>
STATIC edge: $r15 = staticinvoke <com.atlassian.plugin.loaders.LoaderUtils: java.util.Map getParams(org.dom4j.Element)>(r1) in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void init(com.atlassian.plugin.Plugin,org.dom4j.Element)> ==> <com.atlassian.plugin.loaders.LoaderUtils: java.util.Map getParams(org.dom4j.Element)>
STATIC edge: $r30 = staticinvoke <java.util.Optional: java.util.Optional empty()>() in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void init(com.atlassian.plugin.Plugin,org.dom4j.Element)> ==> <java.util.Optional: java.util.Optional empty()>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.util.Assertions: java.lang.Object notNull(java.lang.String,java.lang.Object)>("plugin", r2) in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void init(com.atlassian.plugin.Plugin,org.dom4j.Element)> ==> <com.atlassian.plugin.util.Assertions: java.lang.Object notNull(java.lang.String,java.lang.Object)>
CLINIT edge: $r24 = staticinvoke <java.lang.Float: java.lang.Float valueOf(java.lang.String)>($r23) in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void init(com.atlassian.plugin.Plugin,org.dom4j.Element)> ==> <java.lang.Float: void <clinit>()>
STATIC edge: $z0 = staticinvoke <com.atlassian.plugin.util.JavaVersionUtils: boolean satisfiesMinVersion(float)>($f0) in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: boolean satisfiesMinJavaVersion()> ==> <com.atlassian.plugin.util.JavaVersionUtils: boolean satisfiesMinVersion(float)>
STATIC edge: staticinvoke <com.atlassian.plugin.util.validation.ValidationPattern$Rule: void access$100(com.atlassian.plugin.util.validation.ValidationPattern$Rule,org.dom4j.Node,java.util.List)>(r19, r17, $r22) in <com.atlassian.plugin.util.validation.ValidationPattern: void evaluate(org.dom4j.Node)> ==> <com.atlassian.plugin.util.validation.ValidationPattern$Rule: void access$100(com.atlassian.plugin.util.validation.ValidationPattern$Rule,org.dom4j.Node,java.util.List)>
STATIC edge: staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r0, "Tried to calculate the hash code of a null module descriptor.") in <com.atlassian.plugin.descriptors.ModuleDescriptors$HashCodeBuilder: com.atlassian.plugin.descriptors.ModuleDescriptors$HashCodeBuilder descriptor(com.atlassian.plugin.ModuleDescriptor)> ==> <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>($r1, "Tried to calculate the hash code of a null module descriptor.") in <com.atlassian.plugin.descriptors.ModuleDescriptors$HashCodeBuilder: int toHashCode()> ==> <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>
STATIC edge: $r1 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/atlassian/plugin/module/PrefixDelegatingModuleFactory;") in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: void <init>(java.util.Set)> ==> <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
STATIC edge: staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "The className cannot be null") in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: java.lang.Object createModule(java.lang.String,com.atlassian.plugin.ModuleDescriptor)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>
STATIC edge: staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r2, "The moduleDescriptor cannot be null") in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: java.lang.Object createModule(java.lang.String,com.atlassian.plugin.ModuleDescriptor)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>
STATIC edge: staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "The class name cannot be null") in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: java.lang.Class guessModuleClass(java.lang.String,com.atlassian.plugin.ModuleDescriptor)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>
STATIC edge: staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r2, "The module descriptor cannot be null") in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: java.lang.Class guessModuleClass(java.lang.String,com.atlassian.plugin.ModuleDescriptor)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>
STATIC edge: staticinvoke <com.atlassian.plugin.util.ClassUtils: void findAllTypes(java.lang.Class,java.util.Set)>(r2, $r0) in <com.atlassian.plugin.util.ClassUtils: java.util.Set findAllTypes(java.lang.Class)> ==> <com.atlassian.plugin.util.ClassUtils: void findAllTypes(java.lang.Class,java.util.Set)>
STATIC edge: staticinvoke <com.atlassian.plugin.util.ClassUtils: void findAllTypes(java.lang.Class,java.util.Set)>($r2, r1) in <com.atlassian.plugin.util.ClassUtils: void findAllTypes(java.lang.Class,java.util.Set)> ==> <com.atlassian.plugin.util.ClassUtils: void findAllTypes(java.lang.Class,java.util.Set)>
STATIC edge: staticinvoke <com.atlassian.plugin.util.ClassUtils: void findAllTypes(java.lang.Class,java.util.Set)>($r5, r1) in <com.atlassian.plugin.util.ClassUtils: void findAllTypes(java.lang.Class,java.util.Set)> ==> <com.atlassian.plugin.util.ClassUtils: void findAllTypes(java.lang.Class,java.util.Set)>
STATIC edge: r20 = staticinvoke <com.atlassian.plugin.util.ClassUtils: java.lang.Class getClass(java.lang.reflect.Type)>($r33) in <com.atlassian.plugin.util.ClassUtils: java.util.List getTypeArguments(java.lang.Class,java.lang.Class)> ==> <com.atlassian.plugin.util.ClassUtils: java.lang.Class getClass(java.lang.reflect.Type)>
STATIC edge: $r6 = staticinvoke <com.atlassian.plugin.util.ClassUtils: java.lang.Class getClass(java.lang.reflect.Type)>($r35) in <com.atlassian.plugin.util.ClassUtils: java.util.List getTypeArguments(java.lang.Class,java.lang.Class)> ==> <com.atlassian.plugin.util.ClassUtils: java.lang.Class getClass(java.lang.reflect.Type)>
STATIC edge: r20 = staticinvoke <com.atlassian.plugin.util.ClassUtils: java.lang.Class getClass(java.lang.reflect.Type)>($r34) in <com.atlassian.plugin.util.ClassUtils: java.util.List getTypeArguments(java.lang.Class,java.lang.Class)> ==> <com.atlassian.plugin.util.ClassUtils: java.lang.Class getClass(java.lang.reflect.Type)>
STATIC edge: staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r0, "Tried to build an equals implementation for a null module descriptor. This is not allowed.") in <com.atlassian.plugin.descriptors.ModuleDescriptors$EqualsBuilder: com.atlassian.plugin.descriptors.ModuleDescriptors$EqualsBuilder descriptor(com.atlassian.plugin.ModuleDescriptor)> ==> <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>($r1, "Tried to build an equals implementation for a null module descriptor. This is not allowed.") in <com.atlassian.plugin.descriptors.ModuleDescriptors$EqualsBuilder: boolean isEqualTo(java.lang.Object)> ==> <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>
CLINIT edge: $r14 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r11) in <com.atlassian.plugin.ModulePermissionException: void <init>(java.lang.String,java.util.Set)> ==> <java.util.Collections: void <clinit>()>
STATIC edge: $r14 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r11) in <com.atlassian.plugin.ModulePermissionException: void <init>(java.lang.String,java.util.Set)> ==> <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>
STATIC edge: $r12 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r6) in <com.atlassian.plugin.ModulePermissionException: void <init>(java.lang.String,java.util.Set)> ==> <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
STATIC edge: $r9 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r3) in <com.atlassian.plugin.ModulePermissionException: void <init>(java.lang.String,java.util.Set)> ==> <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
STATIC edge: $r9 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Object)>($r8, "Plugin container accessor is null. Plugin: %s. Module name: %s.", r7, r1) in <com.atlassian.plugin.module.ClassPrefixModuleFactory: java.lang.Object createModule(java.lang.String,com.atlassian.plugin.ModuleDescriptor)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Object)>
STATIC edge: $r3 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2) in <com.atlassian.plugin.util.validation.ValidationException: void <init>(java.lang.String,java.util.List)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
STATIC edge: $r5 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.util.Collection)>($r4) in <com.atlassian.plugin.util.validation.ValidationException: void <init>(java.lang.String,java.util.List)> ==> <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.util.Collection)>
STATIC edge: $r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1) in <com.atlassian.plugin.util.resource.AlternativeClassLoaderResourceLoader: void <init>(java.lang.Class)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
CLINIT edge: $r1 = <com.atlassian.plugin.util.VersionRange: java.util.regex.Pattern RANGE_PATTERN> in <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange parse(java.lang.String)> ==> <com.atlassian.plugin.util.VersionRange: void <clinit>()>
STATIC edge: staticinvoke <com.google.common.base.Preconditions: void checkState(boolean)>($z12) in <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange parse(java.lang.String)> ==> <com.google.common.base.Preconditions: void checkState(boolean)>
STATIC edge: r31 = staticinvoke <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange$ActualVersionRangeBuilder unbounded()>() in <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange parse(java.lang.String)> ==> <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange$ActualVersionRangeBuilder unbounded()>
STATIC edge: r31 = staticinvoke <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange$ActualVersionRangeBuilder exclude(java.lang.String)>(r12) in <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange parse(java.lang.String)> ==> <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange$ActualVersionRangeBuilder exclude(java.lang.String)>
STATIC edge: r31 = staticinvoke <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange$ActualVersionRangeBuilder include(java.lang.String)>(r12) in <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange parse(java.lang.String)> ==> <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange$ActualVersionRangeBuilder include(java.lang.String)>
STATIC edge: staticinvoke <com.google.common.base.Preconditions: void checkState(boolean)>($z10) in <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange parse(java.lang.String)> ==> <com.google.common.base.Preconditions: void checkState(boolean)>
STATIC edge: $r28 = staticinvoke <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange single(java.lang.String)>(r12) in <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange parse(java.lang.String)> ==> <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange single(java.lang.String)>
STATIC edge: $r29 = staticinvoke <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange$ActualVersionRangeBuilder include(java.lang.String)>(r12) in <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange parse(java.lang.String)> ==> <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange$ActualVersionRangeBuilder include(java.lang.String)>
STATIC edge: staticinvoke <com.google.common.base.Preconditions: void checkState(boolean)>($z8) in <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange parse(java.lang.String)> ==> <com.google.common.base.Preconditions: void checkState(boolean)>
STATIC edge: staticinvoke <com.google.common.base.Preconditions: void checkState(boolean)>($z7) in <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange parse(java.lang.String)> ==> <com.google.common.base.Preconditions: void checkState(boolean)>
STATIC edge: staticinvoke <com.google.common.base.Preconditions: void checkState(boolean)>($z6) in <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange parse(java.lang.String)> ==> <com.google.common.base.Preconditions: void checkState(boolean)>
STATIC edge: staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z5, "No version configured for range!") in <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange parse(java.lang.String)> ==> <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>
STATIC edge: staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z0, $r10) in <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange parse(java.lang.String)> ==> <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>
STATIC edge: $i0 = staticinvoke <java.util.Objects: int hash(java.lang.Object[])>($r0) in <com.atlassian.plugin.util.VersionRange$OrVersionRange: int hashCode()> ==> <java.util.Objects: int hash(java.lang.Object[])>
STATIC edge: $z0 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r6, $r5) in <com.atlassian.plugin.util.VersionRange$OrVersionRange: boolean equals(java.lang.Object)> ==> <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
STATIC edge: $z1 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r8, $r7) in <com.atlassian.plugin.util.VersionRange$OrVersionRange: boolean equals(java.lang.Object)> ==> <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
CLINIT edge: $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0) in <com.atlassian.plugin.util.VersionRange$LeftUnboundedVersionRange: int hashCode()> ==> <java.lang.Boolean: void <clinit>()>
STATIC edge: $i0 = staticinvoke <java.util.Objects: int hash(java.lang.Object[])>($r0) in <com.atlassian.plugin.util.VersionRange$LeftUnboundedVersionRange: int hashCode()> ==> <java.util.Objects: int hash(java.lang.Object[])>
STATIC edge: $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0) in <com.atlassian.plugin.util.VersionRange$LeftUnboundedVersionRange: int hashCode()> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
CLINIT edge: $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0) in <com.atlassian.plugin.util.VersionRange$LeftUnboundedVersionRange: boolean equals(java.lang.Object)> ==> <java.lang.Boolean: void <clinit>()>
STATIC edge: $z3 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r8, $r7) in <com.atlassian.plugin.util.VersionRange$LeftUnboundedVersionRange: boolean equals(java.lang.Object)> ==> <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
STATIC edge: $z2 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r5, $r6) in <com.atlassian.plugin.util.VersionRange$LeftUnboundedVersionRange: boolean equals(java.lang.Object)> ==> <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
STATIC edge: $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1) in <com.atlassian.plugin.util.VersionRange$LeftUnboundedVersionRange: boolean equals(java.lang.Object)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
STATIC edge: $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0) in <com.atlassian.plugin.util.VersionRange$LeftUnboundedVersionRange: boolean equals(java.lang.Object)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
CLINIT edge: $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0) in <com.atlassian.plugin.util.VersionRange$ActualVersionRange: int hashCode()> ==> <java.lang.Boolean: void <clinit>()>
STATIC edge: $i0 = staticinvoke <java.util.Objects: int hash(java.lang.Object[])>($r0) in <com.atlassian.plugin.util.VersionRange$ActualVersionRange: int hashCode()> ==> <java.util.Objects: int hash(java.lang.Object[])>
STATIC edge: $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1) in <com.atlassian.plugin.util.VersionRange$ActualVersionRange: int hashCode()> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
STATIC edge: $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0) in <com.atlassian.plugin.util.VersionRange$ActualVersionRange: int hashCode()> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
CLINIT edge: $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0) in <com.atlassian.plugin.util.VersionRange$ActualVersionRange: boolean equals(java.lang.Object)> ==> <java.lang.Boolean: void <clinit>()>
STATIC edge: $z7 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r12, $r11) in <com.atlassian.plugin.util.VersionRange$ActualVersionRange: boolean equals(java.lang.Object)> ==> <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
STATIC edge: $z6 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r9, $r10) in <com.atlassian.plugin.util.VersionRange$ActualVersionRange: boolean equals(java.lang.Object)> ==> <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
STATIC edge: $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z5) in <com.atlassian.plugin.util.VersionRange$ActualVersionRange: boolean equals(java.lang.Object)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
STATIC edge: $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z4) in <com.atlassian.plugin.util.VersionRange$ActualVersionRange: boolean equals(java.lang.Object)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
STATIC edge: $z3 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r8, $r7) in <com.atlassian.plugin.util.VersionRange$ActualVersionRange: boolean equals(java.lang.Object)> ==> <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
STATIC edge: $z2 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r5, $r6) in <com.atlassian.plugin.util.VersionRange$ActualVersionRange: boolean equals(java.lang.Object)> ==> <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
STATIC edge: $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1) in <com.atlassian.plugin.util.VersionRange$ActualVersionRange: boolean equals(java.lang.Object)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
STATIC edge: $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0) in <com.atlassian.plugin.util.VersionRange$ActualVersionRange: boolean equals(java.lang.Object)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
STATIC edge: $i0 = staticinvoke <java.util.Objects: int hash(java.lang.Object[])>($r0) in <com.atlassian.plugin.util.VersionRange$SingleVersionRange: int hashCode()> ==> <java.util.Objects: int hash(java.lang.Object[])>
STATIC edge: $z0 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r6, $r5) in <com.atlassian.plugin.util.VersionRange$SingleVersionRange: boolean equals(java.lang.Object)> ==> <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
CLINIT edge: $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0) in <com.atlassian.plugin.util.VersionRange$RightUnboundedVersionRange: int hashCode()> ==> <java.lang.Boolean: void <clinit>()>
STATIC edge: $i0 = staticinvoke <java.util.Objects: int hash(java.lang.Object[])>($r0) in <com.atlassian.plugin.util.VersionRange$RightUnboundedVersionRange: int hashCode()> ==> <java.util.Objects: int hash(java.lang.Object[])>
STATIC edge: $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0) in <com.atlassian.plugin.util.VersionRange$RightUnboundedVersionRange: int hashCode()> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
CLINIT edge: $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0) in <com.atlassian.plugin.util.VersionRange$RightUnboundedVersionRange: boolean equals(java.lang.Object)> ==> <java.lang.Boolean: void <clinit>()>
STATIC edge: $z3 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r8, $r7) in <com.atlassian.plugin.util.VersionRange$RightUnboundedVersionRange: boolean equals(java.lang.Object)> ==> <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
STATIC edge: $z2 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r5, $r6) in <com.atlassian.plugin.util.VersionRange$RightUnboundedVersionRange: boolean equals(java.lang.Object)> ==> <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
STATIC edge: $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1) in <com.atlassian.plugin.util.VersionRange$RightUnboundedVersionRange: boolean equals(java.lang.Object)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
STATIC edge: $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0) in <com.atlassian.plugin.util.VersionRange$RightUnboundedVersionRange: boolean equals(java.lang.Object)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
STATIC edge: $r1 = staticinvoke <io.atlassian.util.concurrent.CopyOnWriteMap: io.atlassian.util.concurrent.CopyOnWriteMap$Builder builder()>() in <com.atlassian.plugin.manager.PluginRegistryImpl: void <init>()> ==> <io.atlassian.util.concurrent.CopyOnWriteMap: io.atlassian.util.concurrent.CopyOnWriteMap$Builder builder()>
STATIC edge: $r2 = staticinvoke <com.atlassian.plugin.manager.store.PluginPersistentStateStoreMigrator$lambda_removeDirectives_0__1: io.atlassian.fugue.Effect bootstrap$(com.atlassian.plugin.manager.PluginPersistentStateStore)>(r1) in <com.atlassian.plugin.manager.store.PluginPersistentStateStoreMigrator: void removeDirectives(com.atlassian.plugin.manager.PluginPersistentStateStore)> ==> <com.atlassian.plugin.manager.store.PluginPersistentStateStoreMigrator$lambda_removeDirectives_0__1: io.atlassian.fugue.Effect bootstrap$(com.atlassian.plugin.manager.PluginPersistentStateStore)>
CLINIT edge: r12 = staticinvoke <com.atlassian.plugin.manager.store.PluginPersistentStateStoreMigrator: java.lang.String removeDirectivesFromKey(java.lang.String)>(r11) in <com.atlassian.plugin.manager.store.PluginPersistentStateStoreMigrator: void lambda$removeDirectives$0(com.atlassian.plugin.manager.PluginPersistentStateStore,com.atlassian.plugin.manager.PluginPersistentState$Builder)> ==> <com.atlassian.plugin.manager.store.PluginPersistentStateStoreMigrator: void <clinit>()>
STATIC edge: r12 = staticinvoke <com.atlassian.plugin.manager.store.PluginPersistentStateStoreMigrator: java.lang.String removeDirectivesFromKey(java.lang.String)>(r11) in <com.atlassian.plugin.manager.store.PluginPersistentStateStoreMigrator: void lambda$removeDirectives$0(com.atlassian.plugin.manager.PluginPersistentStateStore,com.atlassian.plugin.manager.PluginPersistentState$Builder)> ==> <com.atlassian.plugin.manager.store.PluginPersistentStateStoreMigrator: java.lang.String removeDirectivesFromKey(java.lang.String)>
STATIC edge: r3 = staticinvoke <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder create(com.atlassian.plugin.manager.PluginPersistentState)>($r2) in <com.atlassian.plugin.manager.PluginPersistentStateModifier: void apply(io.atlassian.fugue.Effect)> ==> <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder create(com.atlassian.plugin.manager.PluginPersistentState)>
STATIC edge: $r2 = staticinvoke <com.atlassian.plugin.manager.PluginPersistentStateModifier$lambda_setEnabled_0__103: io.atlassian.fugue.Effect bootstrap$(com.atlassian.plugin.Plugin,boolean)>(r1, z0) in <com.atlassian.plugin.manager.PluginPersistentStateModifier: void setEnabled(com.atlassian.plugin.Plugin,boolean)> ==> <com.atlassian.plugin.manager.PluginPersistentStateModifier$lambda_setEnabled_0__103: io.atlassian.fugue.Effect bootstrap$(com.atlassian.plugin.Plugin,boolean)>
STATIC edge: $r2 = staticinvoke <com.atlassian.plugin.manager.PluginPersistentStateModifier$lambda_setEnabled_1__104: io.atlassian.fugue.Effect bootstrap$(com.atlassian.plugin.ModuleDescriptor,boolean)>(r1, z0) in <com.atlassian.plugin.manager.PluginPersistentStateModifier: void setEnabled(com.atlassian.plugin.ModuleDescriptor,boolean)> ==> <com.atlassian.plugin.manager.PluginPersistentStateModifier$lambda_setEnabled_1__104: io.atlassian.fugue.Effect bootstrap$(com.atlassian.plugin.ModuleDescriptor,boolean)>
STATIC edge: $r1 = staticinvoke <com.atlassian.plugin.manager.PluginPersistentStateModifier$clearPluginRestartState__105: io.atlassian.fugue.Effect bootstrap$()>() in <com.atlassian.plugin.manager.PluginPersistentStateModifier: void clearPluginRestartState()> ==> <com.atlassian.plugin.manager.PluginPersistentStateModifier$clearPluginRestartState__105: io.atlassian.fugue.Effect bootstrap$()>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.manager.PluginPersistentStateModifier$lambda_setPluginRestartState_2__106: io.atlassian.fugue.Effect bootstrap$(java.lang.String,com.atlassian.plugin.PluginRestartState)>(r1, r2) in <com.atlassian.plugin.manager.PluginPersistentStateModifier: void setPluginRestartState(java.lang.String,com.atlassian.plugin.PluginRestartState)> ==> <com.atlassian.plugin.manager.PluginPersistentStateModifier$lambda_setPluginRestartState_2__106: io.atlassian.fugue.Effect bootstrap$(java.lang.String,com.atlassian.plugin.PluginRestartState)>
STATIC edge: $r2 = staticinvoke <com.atlassian.plugin.manager.PluginPersistentStateModifier$lambda_addState_3__107: io.atlassian.fugue.Effect bootstrap$(java.util.Map)>(r1) in <com.atlassian.plugin.manager.PluginPersistentStateModifier: void addState(java.util.Map)> ==> <com.atlassian.plugin.manager.PluginPersistentStateModifier$lambda_addState_3__107: io.atlassian.fugue.Effect bootstrap$(java.util.Map)>
STATIC edge: $r2 = staticinvoke <com.atlassian.plugin.manager.PluginPersistentStateModifier$lambda_addPluginEnabledState_4__108: io.atlassian.fugue.Effect bootstrap$(java.util.Map)>(r1) in <com.atlassian.plugin.manager.PluginPersistentStateModifier: void addPluginEnabledState(java.util.Map)> ==> <com.atlassian.plugin.manager.PluginPersistentStateModifier$lambda_addPluginEnabledState_4__108: io.atlassian.fugue.Effect bootstrap$(java.util.Map)>
STATIC edge: $r2 = staticinvoke <com.atlassian.plugin.manager.PluginPersistentStateModifier$lambda_removeState_5__110: io.atlassian.fugue.Effect bootstrap$(com.atlassian.plugin.Plugin)>(r1) in <com.atlassian.plugin.manager.PluginPersistentStateModifier: void removeState(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.PluginPersistentStateModifier$lambda_removeState_5__110: io.atlassian.fugue.Effect bootstrap$(com.atlassian.plugin.Plugin)>
STATIC edge: $r2 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginPersistentState: java.util.Map getPluginEnabledStateMap(java.util.Map)>(r1) in <com.atlassian.plugin.manager.PluginPersistentStateModifier: void lambda$addState$3(java.util.Map,com.atlassian.plugin.manager.PluginPersistentState$Builder)> ==> <com.atlassian.plugin.manager.DefaultPluginPersistentState: java.util.Map getPluginEnabledStateMap(java.util.Map)>
CLINIT edge: $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0) in <com.atlassian.plugin.parsers.SafeModeCommandLineArguments: boolean isDisabledByParam(java.lang.String)> ==> <java.lang.Boolean: void <clinit>()>
STATIC edge: $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0) in <com.atlassian.plugin.parsers.SafeModeCommandLineArguments: boolean isDisabledByParam(java.lang.String)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.parsers.SafeModeCommandLineArguments$lambda_isDisabledByParam_0__190: java.util.function.Function bootstrap$(java.lang.String)>(r2) in <com.atlassian.plugin.parsers.SafeModeCommandLineArguments: boolean isDisabledByParam(java.lang.String)> ==> <com.atlassian.plugin.parsers.SafeModeCommandLineArguments$lambda_isDisabledByParam_0__190: java.util.function.Function bootstrap$(java.lang.String)>
CLINIT edge: $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0) in <com.atlassian.plugin.parsers.SafeModeCommandLineArguments: java.lang.Boolean lambda$isDisabledByParam$0(java.lang.String,java.util.List)> ==> <java.lang.Boolean: void <clinit>()>
STATIC edge: $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0) in <com.atlassian.plugin.parsers.SafeModeCommandLineArguments: java.lang.Boolean lambda$isDisabledByParam$0(java.lang.String,java.util.List)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
CLINIT edge: $r17 = new java.io.File in <com.atlassian.plugin.DefaultPluginArtifactFactory: com.atlassian.plugin.PluginArtifact create(java.net.URI)> ==> <java.io.File: void <clinit>()>
CLINIT edge: $r18 = new com.atlassian.plugin.JarPluginArtifact in <com.atlassian.plugin.DefaultPluginArtifactFactory: com.atlassian.plugin.PluginArtifact create(java.net.URI)> ==> <com.atlassian.plugin.JarPluginArtifact: void <clinit>()>
STATIC edge: $r2 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1) in <com.atlassian.plugin.JarPluginArtifact: void <init>(java.io.File,com.atlassian.plugin.ReferenceMode)> ==> <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r4) in <com.atlassian.plugin.JarPluginArtifact: boolean doesResourceExist(java.lang.String)> ==> <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(null) in <com.atlassian.plugin.JarPluginArtifact: boolean doesResourceExist(java.lang.String)> ==> <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>
STATIC edge: staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r0, "The file name must not be null") in <com.atlassian.plugin.JarPluginArtifact: java.io.InputStream getResourceAsStream(java.lang.String)> ==> <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>
STATIC edge: $r4 = staticinvoke <com.atlassian.plugin.JarPluginArtifact$lambda_containsJavaExecutableCode_0__2: java.util.function.Predicate bootstrap$(com.atlassian.plugin.JarPluginArtifact)>(r0) in <com.atlassian.plugin.JarPluginArtifact: boolean containsJavaExecutableCode()> ==> <com.atlassian.plugin.JarPluginArtifact$lambda_containsJavaExecutableCode_0__2: java.util.function.Predicate bootstrap$(com.atlassian.plugin.JarPluginArtifact)>
STATIC edge: $r4 = staticinvoke <com.atlassian.plugin.JarPluginArtifact$isSpringContext__3: java.util.function.Predicate bootstrap$(com.atlassian.plugin.JarPluginArtifact)>(r0) in <com.atlassian.plugin.JarPluginArtifact: boolean containsSpringContext()> ==> <com.atlassian.plugin.JarPluginArtifact$isSpringContext__3: java.util.function.Predicate bootstrap$(com.atlassian.plugin.JarPluginArtifact)>
STATIC edge: $r4 = staticinvoke <java.util.regex.Pattern: java.lang.String quote(java.lang.String)>(r3) in <com.atlassian.plugin.JarPluginArtifact: java.util.Set extraModuleDescriptorFiles(java.lang.String)> ==> <java.util.regex.Pattern: java.lang.String quote(java.lang.String)>
STATIC edge: $r15 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toSet()>() in <com.atlassian.plugin.JarPluginArtifact: java.util.Set extraModuleDescriptorFiles(java.lang.String)> ==> <java.util.stream.Collectors: java.util.stream.Collector toSet()>
STATIC edge: $r13 = staticinvoke <com.atlassian.plugin.JarPluginArtifact$getName__5: java.util.function.Function bootstrap$()>() in <com.atlassian.plugin.JarPluginArtifact: java.util.Set extraModuleDescriptorFiles(java.lang.String)> ==> <com.atlassian.plugin.JarPluginArtifact$getName__5: java.util.function.Function bootstrap$()>
STATIC edge: $r11 = staticinvoke <com.atlassian.plugin.JarPluginArtifact$lambda_extraModuleDescriptorFiles_1__4: java.util.function.Predicate bootstrap$(java.util.regex.Matcher)>(r9) in <com.atlassian.plugin.JarPluginArtifact: java.util.Set extraModuleDescriptorFiles(java.lang.String)> ==> <com.atlassian.plugin.JarPluginArtifact$lambda_extraModuleDescriptorFiles_1__4: java.util.function.Predicate bootstrap$(java.util.regex.Matcher)>
STATIC edge: $r8 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>($r7) in <com.atlassian.plugin.JarPluginArtifact: java.util.Set extraModuleDescriptorFiles(java.lang.String)> ==> <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
CLINIT edge: $r0 = new com.atlassian.plugin.parsers.XmlDescriptorParser in <com.atlassian.plugin.parsers.XmlDescriptorParserFactory: com.atlassian.plugin.parsers.DescriptorParser getInstance(java.io.InputStream,java.util.Set)> ==> <com.atlassian.plugin.parsers.XmlDescriptorParser: void <clinit>()>
CLINIT edge: $r1 = new com.atlassian.plugin.parsers.PluginDescriptorReader in <com.atlassian.plugin.parsers.XmlDescriptorParser: void <init>(org.dom4j.Document,java.util.Set)> ==> <com.atlassian.plugin.parsers.PluginDescriptorReader: void <clinit>()>
STATIC edge: $r6 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r4) in <com.atlassian.plugin.parsers.XmlDescriptorParser: void <init>(org.dom4j.Document,java.util.Set)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
STATIC edge: $r3 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r2, "XML descriptor source document cannot be null") in <com.atlassian.plugin.parsers.XmlDescriptorParser: void <init>(org.dom4j.Document,java.util.Set)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>
CLINIT edge: $r4 = staticinvoke <com.atlassian.plugin.parsers.XmlDescriptorParser: org.dom4j.Document createDocument(java.io.InputStream)>($r3) in <com.atlassian.plugin.parsers.XmlDescriptorParser: void <init>(java.io.InputStream,java.util.Set)> ==> <com.atlassian.plugin.parsers.XmlDescriptorParser: void <clinit>()>
STATIC edge: $r4 = staticinvoke <com.atlassian.plugin.parsers.XmlDescriptorParser: org.dom4j.Document createDocument(java.io.InputStream)>($r3) in <com.atlassian.plugin.parsers.XmlDescriptorParser: void <init>(java.io.InputStream,java.util.Set)> ==> <com.atlassian.plugin.parsers.XmlDescriptorParser: org.dom4j.Document createDocument(java.io.InputStream)>
STATIC edge: $r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "XML descriptor source cannot be null") in <com.atlassian.plugin.parsers.XmlDescriptorParser: void <init>(java.io.InputStream,java.util.Set)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>
CLINIT edge: r11 = staticinvoke <com.atlassian.plugin.parsers.XmlDescriptorParser: org.dom4j.Document createDocument(java.io.InputStream)>(r1) in <com.atlassian.plugin.parsers.XmlDescriptorParser: void <init>(java.io.InputStream,java.lang.Iterable,java.util.Set)> ==> <com.atlassian.plugin.parsers.XmlDescriptorParser: void <clinit>()>
STATIC edge: $r9 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r8) in <com.atlassian.plugin.parsers.XmlDescriptorParser: void <init>(java.io.InputStream,java.lang.Iterable,java.util.Set)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
STATIC edge: r12 = staticinvoke <com.atlassian.plugin.parsers.XmlDescriptorParser: org.dom4j.Document mergeDocuments(org.dom4j.Document,java.lang.Iterable)>(r11, r6) in <com.atlassian.plugin.parsers.XmlDescriptorParser: void <init>(java.io.InputStream,java.lang.Iterable,java.util.Set)> ==> <com.atlassian.plugin.parsers.XmlDescriptorParser: org.dom4j.Document mergeDocuments(org.dom4j.Document,java.lang.Iterable)>
STATIC edge: r6 = staticinvoke <com.google.common.collect.Iterables: java.lang.Iterable transform(java.lang.Iterable,com.google.common.base.Function)>(r3, $r5) in <com.atlassian.plugin.parsers.XmlDescriptorParser: void <init>(java.io.InputStream,java.lang.Iterable,java.util.Set)> ==> <com.google.common.collect.Iterables: java.lang.Iterable transform(java.lang.Iterable,com.google.common.base.Function)>
STATIC edge: $r5 = staticinvoke <com.atlassian.plugin.parsers.XmlDescriptorParser$createDocument__7: com.google.common.base.Function bootstrap$()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: void <init>(java.io.InputStream,java.lang.Iterable,java.util.Set)> ==> <com.atlassian.plugin.parsers.XmlDescriptorParser$createDocument__7: com.google.common.base.Function bootstrap$()>
STATIC edge: r11 = staticinvoke <com.atlassian.plugin.parsers.XmlDescriptorParser: org.dom4j.Document createDocument(java.io.InputStream)>(r1) in <com.atlassian.plugin.parsers.XmlDescriptorParser: void <init>(java.io.InputStream,java.lang.Iterable,java.util.Set)> ==> <com.atlassian.plugin.parsers.XmlDescriptorParser: org.dom4j.Document createDocument(java.io.InputStream)>
STATIC edge: staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r3, "Supplemental XML descriptors cannot be null") in <com.atlassian.plugin.parsers.XmlDescriptorParser: void <init>(java.io.InputStream,java.lang.Iterable,java.util.Set)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>
STATIC edge: staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "XML descriptor source cannot be null") in <com.atlassian.plugin.parsers.XmlDescriptorParser: void <init>(java.io.InputStream,java.lang.Iterable,java.util.Set)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>
CLINIT edge: $r7 = new com.atlassian.plugin.parsers.PluginDescriptorReader in <com.atlassian.plugin.parsers.XmlDescriptorParser: void <init>(java.io.InputStream,java.lang.Iterable,java.util.Set)> ==> <com.atlassian.plugin.parsers.PluginDescriptorReader: void <clinit>()>
CLINIT edge: $r1 = <com.atlassian.plugin.parsers.XmlDescriptorParser$NoopErrorHandler: com.atlassian.plugin.parsers.XmlDescriptorParser$NoopErrorHandler INSTANCE> in <com.atlassian.plugin.parsers.XmlDescriptorParser: org.dom4j.Document createDocument(java.io.InputStream)> ==> <com.atlassian.plugin.parsers.XmlDescriptorParser$NoopErrorHandler: void <clinit>()>
STATIC edge: r0 = staticinvoke <com.atlassian.security.xml.SecureXmlParserFactory: javax.xml.parsers.DocumentBuilder newNamespaceAwareDocumentBuilder()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: org.dom4j.Document createDocument(java.io.InputStream)> ==> <com.atlassian.security.xml.SecureXmlParserFactory: javax.xml.parsers.DocumentBuilder newNamespaceAwareDocumentBuilder()>
CLINIT edge: $r26 = <com.atlassian.plugin.parsers.XmlDescriptorParser: org.slf4j.Logger log> in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.Plugin configurePlugin(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.parsers.XmlDescriptorParser: void <clinit>()>
STATIC edge: $r28 = staticinvoke <com.atlassian.plugin.impl.UnloadablePluginFactory: com.atlassian.plugin.impl.UnloadablePlugin createUnloadablePlugin(com.atlassian.plugin.Plugin)>(r0) in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.Plugin configurePlugin(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.UnloadablePluginFactory: com.atlassian.plugin.impl.UnloadablePlugin createUnloadablePlugin(com.atlassian.plugin.Plugin)>
STATIC edge: $r8 = staticinvoke <com.atlassian.plugin.parsers.XmlDescriptorParser$getI18nNameKey__8: java.util.function.Supplier bootstrap$(com.atlassian.plugin.Plugin)>(r0) in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.Plugin configurePlugin(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.parsers.XmlDescriptorParser$getI18nNameKey__8: java.util.function.Supplier bootstrap$(com.atlassian.plugin.Plugin)>
CLINIT edge: $r3 = staticinvoke <com.atlassian.plugin.parsers.XmlDescriptorParserUtils: com.atlassian.plugin.ModuleDescriptor addModule(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin,org.dom4j.Element)>(r0, r1, r2) in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.ModuleDescriptor addModule(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin,org.dom4j.Element)> ==> <com.atlassian.plugin.parsers.XmlDescriptorParserUtils: void <clinit>()>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.parsers.XmlDescriptorParserUtils: com.atlassian.plugin.ModuleDescriptor addModule(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin,org.dom4j.Element)>(r0, r1, r2) in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.ModuleDescriptor addModule(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin,org.dom4j.Element)> ==> <com.atlassian.plugin.parsers.XmlDescriptorParserUtils: com.atlassian.plugin.ModuleDescriptor addModule(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin,org.dom4j.Element)>
CLINIT edge: $r4 = staticinvoke <com.atlassian.plugin.parsers.XmlDescriptorParserUtils: org.dom4j.Document removeAllNamespaces(org.dom4j.Document)>($r3) in <com.atlassian.plugin.parsers.PluginDescriptorReader: void <init>(org.dom4j.Document,java.util.Set)> ==> <com.atlassian.plugin.parsers.XmlDescriptorParserUtils: void <clinit>()>
STATIC edge: $r8 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet copyOf(java.util.Collection)>($r7) in <com.atlassian.plugin.parsers.PluginDescriptorReader: void <init>(org.dom4j.Document,java.util.Set)> ==> <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet copyOf(java.util.Collection)>
STATIC edge: $r6 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r5) in <com.atlassian.plugin.parsers.PluginDescriptorReader: void <init>(org.dom4j.Document,java.util.Set)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
STATIC edge: $r4 = staticinvoke <com.atlassian.plugin.parsers.XmlDescriptorParserUtils: org.dom4j.Document removeAllNamespaces(org.dom4j.Document)>($r3) in <com.atlassian.plugin.parsers.PluginDescriptorReader: void <init>(org.dom4j.Document,java.util.Set)> ==> <com.atlassian.plugin.parsers.XmlDescriptorParserUtils: org.dom4j.Document removeAllNamespaces(org.dom4j.Document)>
STATIC edge: $r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1) in <com.atlassian.plugin.parsers.PluginDescriptorReader: void <init>(org.dom4j.Document,java.util.Set)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
CLINIT edge: $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r2) in <com.atlassian.plugin.parsers.PluginDescriptorReader: boolean isSystemPlugin()> ==> <java.lang.Boolean: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r2) in <com.atlassian.plugin.parsers.PluginDescriptorReader: boolean isSystemPlugin()> ==> <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>
STATIC edge: $r3 = staticinvoke <java.util.Optional: java.util.Optional ofNullable(java.lang.Object)>($r2) in <com.atlassian.plugin.parsers.PluginDescriptorReader: java.util.Optional getI18nPluginNameKey()> ==> <java.util.Optional: java.util.Optional ofNullable(java.lang.Object)>
CLINIT edge: $r2 = staticinvoke <com.atlassian.plugin.parsers.PluginDescriptorReader: java.util.List elements(org.dom4j.Element)>($r1) in <com.atlassian.plugin.parsers.PluginDescriptorReader: java.util.Optional getPluginInformation()> ==> <com.atlassian.plugin.parsers.PluginDescriptorReader: void <clinit>()>
STATIC edge: $r6 = staticinvoke <com.atlassian.plugin.parsers.PluginDescriptorReader$lambda_getPluginInformation_0__126: java.util.function.Predicate bootstrap$()>() in <com.atlassian.plugin.parsers.PluginDescriptorReader: java.util.Optional getPluginInformation()> ==> <com.atlassian.plugin.parsers.PluginDescriptorReader$lambda_getPluginInformation_0__126: java.util.function.Predicate bootstrap$()>
STATIC edge: $r4 = staticinvoke <com.atlassian.plugin.parsers.PluginDescriptorReader$nonNull__122: java.util.function.Predicate bootstrap$()>() in <com.atlassian.plugin.parsers.PluginDescriptorReader: java.util.Optional getPluginInformation()> ==> <com.atlassian.plugin.parsers.PluginDescriptorReader$nonNull__122: java.util.function.Predicate bootstrap$()>
STATIC edge: $r2 = staticinvoke <com.atlassian.plugin.parsers.PluginDescriptorReader: java.util.List elements(org.dom4j.Element)>($r1) in <com.atlassian.plugin.parsers.PluginDescriptorReader: java.util.Optional getPluginInformation()> ==> <com.atlassian.plugin.parsers.PluginDescriptorReader: java.util.List elements(org.dom4j.Element)>
CLINIT edge: $r2 = staticinvoke <com.atlassian.plugin.parsers.PluginDescriptorReader: java.util.List elements(org.dom4j.Element)>($r1) in <com.atlassian.plugin.parsers.PluginDescriptorReader: java.lang.Iterable getModules(com.atlassian.plugin.InstallationMode)> ==> <com.atlassian.plugin.parsers.PluginDescriptorReader: void <clinit>()>
STATIC edge: $r9 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>() in <com.atlassian.plugin.parsers.PluginDescriptorReader: java.lang.Iterable getModules(com.atlassian.plugin.InstallationMode)> ==> <java.util.stream.Collectors: java.util.stream.Collector toList()>
STATIC edge: $r7 = staticinvoke <com.atlassian.plugin.parsers.PluginDescriptorReader$lambda_getModules_2__127: java.util.function.Predicate bootstrap$(com.atlassian.plugin.parsers.PluginDescriptorReader,com.atlassian.plugin.InstallationMode)>(r0, r6) in <com.atlassian.plugin.parsers.PluginDescriptorReader: java.lang.Iterable getModules(com.atlassian.plugin.InstallationMode)> ==> <com.atlassian.plugin.parsers.PluginDescriptorReader$lambda_getModules_2__127: java.util.function.Predicate bootstrap$(com.atlassian.plugin.parsers.PluginDescriptorReader,com.atlassian.plugin.InstallationMode)>
STATIC edge: $r4 = staticinvoke <com.atlassian.plugin.parsers.PluginDescriptorReader$lambda_getModules_1__123: java.util.function.Predicate bootstrap$()>() in <com.atlassian.plugin.parsers.PluginDescriptorReader: java.lang.Iterable getModules(com.atlassian.plugin.InstallationMode)> ==> <com.atlassian.plugin.parsers.PluginDescriptorReader$lambda_getModules_1__123: java.util.function.Predicate bootstrap$()>
STATIC edge: $r2 = staticinvoke <com.atlassian.plugin.parsers.PluginDescriptorReader: java.util.List elements(org.dom4j.Element)>($r1) in <com.atlassian.plugin.parsers.PluginDescriptorReader: java.lang.Iterable getModules(com.atlassian.plugin.InstallationMode)> ==> <com.atlassian.plugin.parsers.PluginDescriptorReader: java.util.List elements(org.dom4j.Element)>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.parsers.PluginDescriptorReader$init__124: com.google.common.base.Function bootstrap$()>() in <com.atlassian.plugin.parsers.PluginDescriptorReader: java.lang.Iterable getModuleReaders(com.atlassian.plugin.InstallationMode)> ==> <com.atlassian.plugin.parsers.PluginDescriptorReader$init__124: com.google.common.base.Function bootstrap$()>
STATIC edge: $r4 = staticinvoke <com.google.common.collect.Iterables: java.lang.Iterable transform(java.lang.Iterable,com.google.common.base.Function)>($r2, $r3) in <com.atlassian.plugin.parsers.PluginDescriptorReader: java.lang.Iterable getModuleReaders(com.atlassian.plugin.InstallationMode)> ==> <com.google.common.collect.Iterables: java.lang.Iterable transform(java.lang.Iterable,com.google.common.base.Function)>
STATIC edge: $r2 = staticinvoke <com.atlassian.plugin.Resources: com.atlassian.plugin.Resources fromXml(org.dom4j.Element)>($r1) in <com.atlassian.plugin.parsers.PluginDescriptorReader: com.atlassian.plugin.Resources getResources()> ==> <com.atlassian.plugin.Resources: com.atlassian.plugin.Resources fromXml(org.dom4j.Element)>
CLINIT edge: $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r11) in <com.atlassian.plugin.parsers.PluginDescriptorReader: int getPluginsVersion()> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r11) in <com.atlassian.plugin.parsers.PluginDescriptorReader: int getPluginsVersion()> ==> <java.lang.Integer: int parseInt(java.lang.String)>
CLINIT edge: $z0 = staticinvoke <com.atlassian.plugin.util.PluginUtils: boolean doesModuleElementApplyToApplication(org.dom4j.Element,java.util.Set,com.atlassian.plugin.InstallationMode)>(r0, $r3, r2) in <com.atlassian.plugin.parsers.PluginDescriptorReader: boolean lambda$getModules$2(com.atlassian.plugin.InstallationMode,org.dom4j.Element)> ==> <com.atlassian.plugin.util.PluginUtils: void <clinit>()>
STATIC edge: $z0 = staticinvoke <com.atlassian.plugin.util.PluginUtils: boolean doesModuleElementApplyToApplication(org.dom4j.Element,java.util.Set,com.atlassian.plugin.InstallationMode)>(r0, $r3, r2) in <com.atlassian.plugin.parsers.PluginDescriptorReader: boolean lambda$getModules$2(com.atlassian.plugin.InstallationMode,org.dom4j.Element)> ==> <com.atlassian.plugin.util.PluginUtils: boolean doesModuleElementApplyToApplication(org.dom4j.Element,java.util.Set,com.atlassian.plugin.InstallationMode)>
CLINIT edge: $r4 = <com.atlassian.plugin.parsers.PluginDescriptorReader: org.slf4j.Logger log> in <com.atlassian.plugin.parsers.PluginDescriptorReader: boolean lambda$getModules$2(com.atlassian.plugin.InstallationMode,org.dom4j.Element)> ==> <com.atlassian.plugin.parsers.PluginDescriptorReader: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.atlassian.plugin.parsers.PluginInformationReader$getTextTrim__152: java.util.function.Function bootstrap$()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional getDescription()> ==> <com.atlassian.plugin.parsers.PluginInformationReader$getTextTrim__152: java.util.function.Function bootstrap$()>
STATIC edge: $r2 = staticinvoke <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getDescriptionKey_0__153: java.util.function.Function bootstrap$()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional getDescriptionKey()> ==> <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getDescriptionKey_0__153: java.util.function.Function bootstrap$()>
STATIC edge: $r2 = staticinvoke <com.atlassian.plugin.parsers.PluginInformationReader$getTextTrim__154: java.util.function.Function bootstrap$()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional getVersion()> ==> <com.atlassian.plugin.parsers.PluginInformationReader$getTextTrim__154: java.util.function.Function bootstrap$()>
STATIC edge: $r2 = staticinvoke <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getVendorName_1__156: java.util.function.Function bootstrap$()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional getVendorName()> ==> <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getVendorName_1__156: java.util.function.Function bootstrap$()>
STATIC edge: $r2 = staticinvoke <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getVendorUrl_2__157: java.util.function.Function bootstrap$()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional getVendorUrl()> ==> <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getVendorUrl_2__157: java.util.function.Function bootstrap$()>
CLINIT edge: $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0) in <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional getScopeKey()> ==> <java.lang.Boolean: void <clinit>()>
STATIC edge: staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, "Value of scope key can\'t be blank") in <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional getScopeKey()> ==> <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>
STATIC edge: $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0) in <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional getScopeKey()> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
STATIC edge: $r4 = staticinvoke <com.atlassian.plugin.parsers.PluginInformationReader$isEmpty__159: java.util.function.Function bootstrap$()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional getScopeKey()> ==> <com.atlassian.plugin.parsers.PluginInformationReader$isEmpty__159: java.util.function.Function bootstrap$()>
STATIC edge: $r2 = staticinvoke <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getScopeKey_3__158: java.util.function.Function bootstrap$()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional getScopeKey()> ==> <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getScopeKey_3__158: java.util.function.Function bootstrap$()>
CLINIT edge: $r7 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r6) in <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Map getParameters()> ==> <java.util.Collections: void <clinit>()>
STATIC edge: $r7 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r6) in <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Map getParameters()> ==> <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>
STATIC edge: $r4 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toMap(java.util.function.Function,java.util.function.Function)>($r2, $r3) in <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Map getParameters()> ==> <java.util.stream.Collectors: java.util.stream.Collector toMap(java.util.function.Function,java.util.function.Function)>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.parsers.PluginInformationReader$getText__169: java.util.function.Function bootstrap$()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Map getParameters()> ==> <com.atlassian.plugin.parsers.PluginInformationReader$getText__169: java.util.function.Function bootstrap$()>
STATIC edge: $r2 = staticinvoke <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getParameters_4__160: java.util.function.Function bootstrap$()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Map getParameters()> ==> <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getParameters_4__160: java.util.function.Function bootstrap$()>
CLINIT edge: $r7 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r6) in <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Map getPermissions()> ==> <java.util.Collections: void <clinit>()>
STATIC edge: $r7 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r6) in <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Map getPermissions()> ==> <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>
STATIC edge: $r4 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toMap(java.util.function.Function,java.util.function.Function)>($r2, $r3) in <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Map getPermissions()> ==> <java.util.stream.Collectors: java.util.stream.Collector toMap(java.util.function.Function,java.util.function.Function)>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getPermissions_5__170: java.util.function.Function bootstrap$()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Map getPermissions()> ==> <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getPermissions_5__170: java.util.function.Function bootstrap$()>
STATIC edge: $r2 = staticinvoke <com.atlassian.plugin.parsers.PluginInformationReader$getTextTrim__162: java.util.function.Function bootstrap$()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Map getPermissions()> ==> <com.atlassian.plugin.parsers.PluginInformationReader$getTextTrim__162: java.util.function.Function bootstrap$()>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getPermissions_7__163: com.google.common.base.Predicate bootstrap$(com.atlassian.plugin.InstallationMode)>(r2) in <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Set getPermissions(com.atlassian.plugin.InstallationMode)> ==> <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getPermissions_7__163: com.google.common.base.Predicate bootstrap$(com.atlassian.plugin.InstallationMode)>
STATIC edge: $r6 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet copyOf(java.util.Collection)>($r5) in <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Set getPermissions(com.atlassian.plugin.InstallationMode)> ==> <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet copyOf(java.util.Collection)>
STATIC edge: $r4 = staticinvoke <com.google.common.collect.Maps: java.util.Map filterValues(java.util.Map,com.google.common.base.Predicate)>($r1, $r3) in <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Set getPermissions(com.atlassian.plugin.InstallationMode)> ==> <com.google.common.collect.Maps: java.util.Map filterValues(java.util.Map,com.google.common.base.Predicate)>
STATIC edge: $r2 = staticinvoke <com.atlassian.plugin.parsers.PluginInformationReader$getTextTrim__164: java.util.function.Function bootstrap$()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional getStartup()> ==> <com.atlassian.plugin.parsers.PluginInformationReader$getTextTrim__164: java.util.function.Function bootstrap$()>
STATIC edge: r0 = staticinvoke <com.google.common.collect.Sets: java.util.LinkedHashSet newLinkedHashSet()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.Iterable getModuleScanFolders()> ==> <com.google.common.collect.Sets: java.util.LinkedHashSet newLinkedHashSet()>
STATIC edge: $r7 = staticinvoke <com.atlassian.plugin.parsers.PluginInformationReader$emptyList__171: java.util.function.Supplier bootstrap$()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.Iterable getModuleScanFolders()> ==> <com.atlassian.plugin.parsers.PluginInformationReader$emptyList__171: java.util.function.Supplier bootstrap$()>
STATIC edge: $r5 = staticinvoke <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getModuleScanFolders_9__167: java.util.function.Function bootstrap$(java.util.Set)>(r0) in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.Iterable getModuleScanFolders()> ==> <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getModuleScanFolders_9__167: java.util.function.Function bootstrap$(java.util.Set)>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getModuleScanFolders_8__165: java.util.function.Function bootstrap$(java.util.Set)>(r0) in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.Iterable getModuleScanFolders()> ==> <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getModuleScanFolders_8__165: java.util.function.Function bootstrap$(java.util.Set)>
STATIC edge: $z0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isNotBlank(java.lang.CharSequence)>($r1) in <com.atlassian.plugin.parsers.PluginInformationReader: boolean lambda$getPermissionElements$11(org.dom4j.Element)> ==> <org.apache.commons.lang3.StringUtils: boolean isNotBlank(java.lang.CharSequence)>
CLINIT edge: $r1 = staticinvoke <com.atlassian.plugin.parsers.PluginDescriptorReader: java.util.List elements(org.dom4j.Element,java.lang.String)>(r0, "permission") in <com.atlassian.plugin.parsers.PluginInformationReader: java.util.stream.Stream lambda$getPermissionElements$10(org.dom4j.Element)> ==> <com.atlassian.plugin.parsers.PluginDescriptorReader: void <clinit>()>
STATIC edge: $r1 = staticinvoke <com.atlassian.plugin.parsers.PluginDescriptorReader: java.util.List elements(org.dom4j.Element,java.lang.String)>(r0, "permission") in <com.atlassian.plugin.parsers.PluginInformationReader: java.util.stream.Stream lambda$getPermissionElements$10(org.dom4j.Element)> ==> <com.atlassian.plugin.parsers.PluginDescriptorReader: java.util.List elements(org.dom4j.Element,java.lang.String)>
CLINIT edge: r1 = staticinvoke <com.atlassian.plugin.parsers.PluginDescriptorReader: java.util.List elements(org.dom4j.Element,java.lang.String)>(r0, "folder") in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.Iterable lambda$getModuleScanFolders$8(java.util.Set,org.dom4j.Element)> ==> <com.atlassian.plugin.parsers.PluginDescriptorReader: void <clinit>()>
STATIC edge: r1 = staticinvoke <com.atlassian.plugin.parsers.PluginDescriptorReader: java.util.List elements(org.dom4j.Element,java.lang.String)>(r0, "folder") in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.Iterable lambda$getModuleScanFolders$8(java.util.Set,org.dom4j.Element)> ==> <com.atlassian.plugin.parsers.PluginDescriptorReader: java.util.List elements(org.dom4j.Element,java.lang.String)>
CLINIT edge: $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1) in <com.atlassian.plugin.parsers.PluginInformationReader: boolean lambda$getPermissions$7(com.atlassian.plugin.InstallationMode,java.util.Optional)> ==> <java.lang.Boolean: void <clinit>()>
STATIC edge: $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1) in <com.atlassian.plugin.parsers.PluginInformationReader: boolean lambda$getPermissions$7(com.atlassian.plugin.InstallationMode,java.util.Optional)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
STATIC edge: $r4 = staticinvoke <com.atlassian.plugin.parsers.PluginInformationReader$lambda_null_6__177: java.util.function.Function bootstrap$(com.atlassian.plugin.InstallationMode)>(r3) in <com.atlassian.plugin.parsers.PluginInformationReader: boolean lambda$getPermissions$7(com.atlassian.plugin.InstallationMode,java.util.Optional)> ==> <com.atlassian.plugin.parsers.PluginInformationReader$lambda_null_6__177: java.util.function.Function bootstrap$(com.atlassian.plugin.InstallationMode)>
STATIC edge: $r1 = staticinvoke <com.atlassian.plugin.parsers.PluginInformationReader$of__175: java.util.function.Function bootstrap$()>() in <com.atlassian.plugin.parsers.PluginInformationReader: boolean lambda$getPermissions$7(com.atlassian.plugin.InstallationMode,java.util.Optional)> ==> <com.atlassian.plugin.parsers.PluginInformationReader$of__175: java.util.function.Function bootstrap$()>
CLINIT edge: $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0) in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.Boolean lambda$null$6(com.atlassian.plugin.InstallationMode,com.atlassian.plugin.InstallationMode)> ==> <java.lang.Boolean: void <clinit>()>
STATIC edge: $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0) in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.Boolean lambda$null$6(com.atlassian.plugin.InstallationMode,com.atlassian.plugin.InstallationMode)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
STATIC edge: $r2 = staticinvoke <java.util.Optional: java.util.Optional ofNullable(java.lang.Object)>($r1) in <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional lambda$getPermissions$5(org.dom4j.Element)> ==> <java.util.Optional: java.util.Optional ofNullable(java.lang.Object)>
STATIC edge: r8 = staticinvoke <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)>(r2, r4, r9, r7) in <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: com.atlassian.plugin.descriptors.UnloadableModuleDescriptor createUnloadableModuleDescriptor(com.atlassian.plugin.Plugin,org.dom4j.Element,java.lang.Throwable,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)>
STATIC edge: r10 = staticinvoke <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)>(r5, $r6, $r12, r9) in <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: com.atlassian.plugin.descriptors.UnloadableModuleDescriptor createUnloadableModuleDescriptor(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor,java.lang.Throwable)> ==> <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)>
CLINIT edge: $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0) in <com.atlassian.plugin.impl.UnloadablePlugin: void <init>(java.lang.String)> ==> <java.lang.System: void <clinit>()>
STATIC edge: $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0) in <com.atlassian.plugin.impl.UnloadablePlugin: void <init>(java.lang.String)> ==> <java.lang.System: int identityHashCode(java.lang.Object)>
STATIC edge: $r1 = staticinvoke <com.atlassian.plugin.impl.UnloadablePluginFactory: com.atlassian.plugin.impl.UnloadablePlugin createUnloadablePlugin(com.atlassian.plugin.Plugin,com.atlassian.plugin.descriptors.UnloadableModuleDescriptor)>(r0, null) in <com.atlassian.plugin.impl.UnloadablePluginFactory: com.atlassian.plugin.impl.UnloadablePlugin createUnloadablePlugin(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.UnloadablePluginFactory: com.atlassian.plugin.impl.UnloadablePlugin createUnloadablePlugin(com.atlassian.plugin.Plugin,com.atlassian.plugin.descriptors.UnloadableModuleDescriptor)>
STATIC edge: $r5 = staticinvoke <com.atlassian.plugin.parsers.PluginInformationReader$ElementWithForApplicationsPredicate$lambda_test_0__31: java.util.function.Predicate bootstrap$(java.lang.String)>(r1) in <com.atlassian.plugin.parsers.PluginInformationReader$ElementWithForApplicationsPredicate: boolean test(org.dom4j.Element)> ==> <com.atlassian.plugin.parsers.PluginInformationReader$ElementWithForApplicationsPredicate$lambda_test_0__31: java.util.function.Predicate bootstrap$(java.lang.String)>
STATIC edge: $r4 = staticinvoke <java.util.Optional: java.util.Optional ofNullable(java.lang.Object)>($r3) in <com.atlassian.plugin.parsers.PluginInformationReader$GetAttributeFunction: java.util.Optional apply(org.dom4j.Element)> ==> <java.util.Optional: java.util.Optional ofNullable(java.lang.Object)>
CLINIT edge: $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r1) in <com.atlassian.plugin.parsers.PluginInformationReader$ParseAttributeValueAsFloatFunction: java.lang.Float apply(org.dom4j.Attribute)> ==> <java.lang.Float: void <clinit>()>
STATIC edge: $r2 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0) in <com.atlassian.plugin.parsers.PluginInformationReader$ParseAttributeValueAsFloatFunction: java.lang.Float apply(org.dom4j.Attribute)> ==> <java.lang.Float: java.lang.Float valueOf(float)>
STATIC edge: $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r1) in <com.atlassian.plugin.parsers.PluginInformationReader$ParseAttributeValueAsFloatFunction: java.lang.Float apply(org.dom4j.Attribute)> ==> <java.lang.Float: float parseFloat(java.lang.String)>
STATIC edge: $r2 = staticinvoke <com.atlassian.plugin.util.ClassLoaderUtils: java.lang.Class loadClass(java.lang.String,java.lang.Class)>(r0, r1) in <com.atlassian.plugin.impl.StaticPlugin: java.lang.Class loadClass(java.lang.String,java.lang.Class)> ==> <com.atlassian.plugin.util.ClassLoaderUtils: java.lang.Class loadClass(java.lang.String,java.lang.Class)>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.util.ClassLoaderUtils: java.net.URL getResource(java.lang.String,java.lang.Class)>(r0, $r2) in <com.atlassian.plugin.impl.StaticPlugin: java.net.URL getResource(java.lang.String)> ==> <com.atlassian.plugin.util.ClassLoaderUtils: java.net.URL getResource(java.lang.String,java.lang.Class)>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.util.ClassLoaderUtils: java.io.InputStream getResourceAsStream(java.lang.String,java.lang.Class)>(r0, $r2) in <com.atlassian.plugin.impl.StaticPlugin: java.io.InputStream getResourceAsStream(java.lang.String)> ==> <com.atlassian.plugin.util.ClassLoaderUtils: java.io.InputStream getResourceAsStream(java.lang.String,java.lang.Class)>
CLINIT edge: $z0 = staticinvoke <com.atlassian.plugin.util.PluginUtils: boolean isAtlassianDevMode()>() in <com.atlassian.plugin.util.PluginUtils: boolean doesPluginRequireRestart(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.util.PluginUtils: void <clinit>()>
STATIC edge: $z0 = staticinvoke <com.atlassian.plugin.util.PluginUtils: boolean isAtlassianDevMode()>() in <com.atlassian.plugin.util.PluginUtils: boolean doesPluginRequireRestart(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.util.PluginUtils: boolean isAtlassianDevMode()>
CLINIT edge: $r6 = <com.atlassian.plugin.util.PluginUtils: org.slf4j.Logger logger> in <com.atlassian.plugin.util.PluginUtils: boolean doesModuleElementApplyToApplication(org.dom4j.Element,java.util.Set,com.atlassian.plugin.InstallationMode)> ==> <com.atlassian.plugin.util.PluginUtils: void <clinit>()>
STATIC edge: $r11 = staticinvoke <com.atlassian.plugin.util.PluginUtils: java.lang.String asString(java.util.Set)>(r2) in <com.atlassian.plugin.util.PluginUtils: boolean doesModuleElementApplyToApplication(org.dom4j.Element,java.util.Set,com.atlassian.plugin.InstallationMode)> ==> <com.atlassian.plugin.util.PluginUtils: java.lang.String asString(java.util.Set)>
STATIC edge: r4 = staticinvoke <com.atlassian.plugin.util.ModuleRestricts: com.atlassian.plugin.util.ModuleRestricts parse(org.dom4j.Element)>(r0) in <com.atlassian.plugin.util.PluginUtils: boolean doesModuleElementApplyToApplication(org.dom4j.Element,java.util.Set,com.atlassian.plugin.InstallationMode)> ==> <com.atlassian.plugin.util.ModuleRestricts: com.atlassian.plugin.util.ModuleRestricts parse(org.dom4j.Element)>
STATIC edge: staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2) in <com.atlassian.plugin.util.PluginUtils: boolean doesModuleElementApplyToApplication(org.dom4j.Element,java.util.Set,com.atlassian.plugin.InstallationMode)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
STATIC edge: staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0) in <com.atlassian.plugin.util.PluginUtils: boolean doesModuleElementApplyToApplication(org.dom4j.Element,java.util.Set,com.atlassian.plugin.InstallationMode)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
CLINIT edge: $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("atlassian.plugins.enable.wait", "300") in <com.atlassian.plugin.util.PluginUtils: int getDefaultEnablingWaitPeriod()> ==> <java.lang.System: void <clinit>()>
STATIC edge: $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r0) in <com.atlassian.plugin.util.PluginUtils: int getDefaultEnablingWaitPeriod()> ==> <java.lang.Integer: int parseInt(java.lang.String)>
STATIC edge: $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("atlassian.plugins.enable.wait", "300") in <com.atlassian.plugin.util.PluginUtils: int getDefaultEnablingWaitPeriod()> ==> <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>
CLINIT edge: $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r0) in <com.atlassian.plugin.util.PluginUtils: int getDefaultEnablingWaitPeriod()> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: $z0 = staticinvoke <java.lang.Boolean: boolean getBoolean(java.lang.String)>("atlassian.dev.mode") in <com.atlassian.plugin.util.PluginUtils: boolean isAtlassianDevMode()> ==> <java.lang.Boolean: void <clinit>()>
STATIC edge: $z0 = staticinvoke <java.lang.Boolean: boolean getBoolean(java.lang.String)>("atlassian.dev.mode") in <com.atlassian.plugin.util.PluginUtils: boolean isAtlassianDevMode()> ==> <java.lang.Boolean: boolean getBoolean(java.lang.String)>
STATIC edge: $r2 = staticinvoke <com.google.common.base.MoreObjects: com.google.common.base.MoreObjects$ToStringHelper toStringHelper(java.lang.String)>($r1) in <com.atlassian.plugin.util.PluginUtils: java.lang.String lambda$asString$0(com.atlassian.plugin.Application)> ==> <com.google.common.base.MoreObjects: com.google.common.base.MoreObjects$ToStringHelper toStringHelper(java.lang.String)>
STATIC edge: $r1 = staticinvoke <io.atlassian.util.concurrent.CopyOnWriteMap: io.atlassian.util.concurrent.CopyOnWriteMap$Builder builder()>() in <com.atlassian.plugin.impl.AbstractPlugin: void <init>(com.atlassian.plugin.PluginArtifact)> ==> <io.atlassian.util.concurrent.CopyOnWriteMap: io.atlassian.util.concurrent.CopyOnWriteMap$Builder builder()>
STATIC edge: $r12 = staticinvoke <com.google.common.base.Suppliers: com.google.common.base.Supplier memoize(com.google.common.base.Supplier)>($r11) in <com.atlassian.plugin.impl.AbstractPlugin: void <init>(com.atlassian.plugin.PluginArtifact)> ==> <com.google.common.base.Suppliers: com.google.common.base.Supplier memoize(com.google.common.base.Supplier)>
STATIC edge: $r11 = staticinvoke <com.atlassian.plugin.impl.AbstractPlugin$getPermissionsInternal__135: com.google.common.base.Supplier bootstrap$(com.atlassian.plugin.impl.AbstractPlugin)>(r0) in <com.atlassian.plugin.impl.AbstractPlugin: void <init>(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.impl.AbstractPlugin$getPermissionsInternal__135: com.google.common.base.Supplier bootstrap$(com.atlassian.plugin.impl.AbstractPlugin)>
STATIC edge: $z0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isNotBlank(java.lang.CharSequence)>($r1) in <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getName()> ==> <org.apache.commons.lang3.StringUtils: boolean isNotBlank(java.lang.CharSequence)>
STATIC edge: $z1 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isNotBlank(java.lang.CharSequence)>($r2) in <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getName()> ==> <org.apache.commons.lang3.StringUtils: boolean isNotBlank(java.lang.CharSequence)>
CLINIT edge: $r1 = <com.atlassian.plugin.impl.AbstractPlugin: org.slf4j.Logger log> in <com.atlassian.plugin.impl.AbstractPlugin: void enable()> ==> <com.atlassian.plugin.impl.AbstractPlugin: void <clinit>()>
CLINIT edge: $r20 = <com.atlassian.plugin.impl.AbstractPlugin: org.slf4j.Logger log> in <com.atlassian.plugin.impl.AbstractPlugin: void enable()> ==> <com.atlassian.plugin.impl.AbstractPlugin: void <clinit>()>
CLINIT edge: $r4 = <com.atlassian.plugin.impl.AbstractPlugin: org.slf4j.Logger log> in <com.atlassian.plugin.impl.AbstractPlugin: void disable()> ==> <com.atlassian.plugin.impl.AbstractPlugin: void <clinit>()>
CLINIT edge: $r14 = <com.atlassian.plugin.impl.AbstractPlugin: org.slf4j.Logger log> in <com.atlassian.plugin.impl.AbstractPlugin: void disable()> ==> <com.atlassian.plugin.impl.AbstractPlugin: void <clinit>()>
CLINIT edge: $r9 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r8) in <com.atlassian.plugin.impl.AbstractPlugin: java.util.Set getPermissionsInternal()> ==> <java.util.Collections: void <clinit>()>
STATIC edge: $r9 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r8) in <com.atlassian.plugin.impl.AbstractPlugin: java.util.Set getPermissionsInternal()> ==> <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>
STATIC edge: $r6 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toSet()>() in <com.atlassian.plugin.impl.AbstractPlugin: java.util.Set getPermissionsInternal()> ==> <java.util.stream.Collectors: java.util.stream.Collector toSet()>
STATIC edge: $r4 = staticinvoke <com.atlassian.plugin.impl.AbstractPlugin$getName__137: java.util.function.Function bootstrap$()>() in <com.atlassian.plugin.impl.AbstractPlugin: java.util.Set getPermissionsInternal()> ==> <com.atlassian.plugin.impl.AbstractPlugin$getName__137: java.util.function.Function bootstrap$()>
STATIC edge: $r3 = staticinvoke <java.util.stream.StreamSupport: java.util.stream.Stream stream(java.util.Spliterator,boolean)>($r2, 0) in <com.atlassian.plugin.impl.AbstractPlugin: java.util.Set getPermissionsInternal()> ==> <java.util.stream.StreamSupport: java.util.stream.Stream stream(java.util.Spliterator,boolean)>
CLINIT edge: $r1 = <com.atlassian.plugin.impl.AbstractPlugin: org.slf4j.Logger log> in <com.atlassian.plugin.impl.AbstractPlugin: void install()> ==> <com.atlassian.plugin.impl.AbstractPlugin: void <clinit>()>
CLINIT edge: $r14 = <com.atlassian.plugin.impl.AbstractPlugin: org.slf4j.Logger log> in <com.atlassian.plugin.impl.AbstractPlugin: void install()> ==> <com.atlassian.plugin.impl.AbstractPlugin: void <clinit>()>
CLINIT edge: $r4 = <com.atlassian.plugin.impl.AbstractPlugin: org.slf4j.Logger log> in <com.atlassian.plugin.impl.AbstractPlugin: void uninstall()> ==> <com.atlassian.plugin.impl.AbstractPlugin: void <clinit>()>
CLINIT edge: $r12 = <com.atlassian.plugin.impl.AbstractPlugin: org.slf4j.Logger log> in <com.atlassian.plugin.impl.AbstractPlugin: void uninstall()> ==> <com.atlassian.plugin.impl.AbstractPlugin: void <clinit>()>
CLINIT edge: $r3 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r0) in <com.atlassian.plugin.impl.AbstractPlugin: java.lang.Iterable getDynamicModuleDescriptors()> ==> <java.util.Collections: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r0) in <com.atlassian.plugin.impl.AbstractPlugin: java.lang.Iterable getDynamicModuleDescriptors()> ==> <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>
CLINIT edge: r7 = staticinvoke <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String cleanVersionString(java.lang.String)>($r19) in <com.atlassian.plugin.impl.AbstractPlugin: int compareTo(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: void <clinit>()>
STATIC edge: $z4 = staticinvoke <com.atlassian.plugin.util.VersionStringComparator: boolean isSnapshotVersion(java.lang.String)>(r9) in <com.atlassian.plugin.impl.AbstractPlugin: int compareTo(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.util.VersionStringComparator: boolean isSnapshotVersion(java.lang.String)>
STATIC edge: $z3 = staticinvoke <com.atlassian.plugin.util.VersionStringComparator: boolean isSnapshotVersion(java.lang.String)>(r7) in <com.atlassian.plugin.impl.AbstractPlugin: int compareTo(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.util.VersionStringComparator: boolean isSnapshotVersion(java.lang.String)>
STATIC edge: $z2 = staticinvoke <com.atlassian.plugin.util.VersionStringComparator: boolean isValidVersionString(java.lang.String)>(r9) in <com.atlassian.plugin.impl.AbstractPlugin: int compareTo(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.util.VersionStringComparator: boolean isValidVersionString(java.lang.String)>
STATIC edge: $z5 = staticinvoke <com.atlassian.plugin.util.VersionStringComparator: boolean isValidVersionString(java.lang.String)>(r9) in <com.atlassian.plugin.impl.AbstractPlugin: int compareTo(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.util.VersionStringComparator: boolean isValidVersionString(java.lang.String)>
STATIC edge: $z1 = staticinvoke <com.atlassian.plugin.util.VersionStringComparator: boolean isValidVersionString(java.lang.String)>(r7) in <com.atlassian.plugin.impl.AbstractPlugin: int compareTo(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.util.VersionStringComparator: boolean isValidVersionString(java.lang.String)>
STATIC edge: r9 = staticinvoke <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String cleanVersionString(java.lang.String)>($r20) in <com.atlassian.plugin.impl.AbstractPlugin: int compareTo(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String cleanVersionString(java.lang.String)>
STATIC edge: r7 = staticinvoke <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String cleanVersionString(java.lang.String)>($r19) in <com.atlassian.plugin.impl.AbstractPlugin: int compareTo(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String cleanVersionString(java.lang.String)>
CLINIT edge: $z1 = staticinvoke <com.atlassian.plugin.util.VersionStringComparator: boolean isValidVersionString(java.lang.String)>(r7) in <com.atlassian.plugin.impl.AbstractPlugin: int compareTo(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.util.VersionStringComparator: void <clinit>()>
CLINIT edge: $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1) in <com.atlassian.plugin.impl.AbstractPlugin: boolean lambda$getPermissionsForCurrentInstallationMode$0(com.atlassian.plugin.InstallationMode,com.atlassian.plugin.PluginPermission)> ==> <java.lang.Boolean: void <clinit>()>
STATIC edge: $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1) in <com.atlassian.plugin.impl.AbstractPlugin: boolean lambda$getPermissionsForCurrentInstallationMode$0(com.atlassian.plugin.InstallationMode,com.atlassian.plugin.PluginPermission)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
STATIC edge: $r4 = staticinvoke <com.atlassian.plugin.impl.AbstractPlugin$equals__138: java.util.function.Function bootstrap$(com.atlassian.plugin.InstallationMode)>(r2) in <com.atlassian.plugin.impl.AbstractPlugin: boolean lambda$getPermissionsForCurrentInstallationMode$0(com.atlassian.plugin.InstallationMode,com.atlassian.plugin.PluginPermission)> ==> <com.atlassian.plugin.impl.AbstractPlugin$equals__138: java.util.function.Function bootstrap$(com.atlassian.plugin.InstallationMode)>
STATIC edge: $r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() in <com.atlassian.plugin.util.ClassLoaderUtils: java.lang.Class loadClass(java.lang.String,java.lang.Class)> ==> <java.lang.Thread: java.lang.Thread currentThread()>
STATIC edge: $r13 = staticinvoke <com.atlassian.plugin.util.ClassLoaderUtils: java.lang.Class coerce(java.lang.Class)>($r12) in <com.atlassian.plugin.util.ClassLoaderUtils: java.lang.Class loadClass(java.lang.String,java.lang.Class)> ==> <com.atlassian.plugin.util.ClassLoaderUtils: java.lang.Class coerce(java.lang.Class)>
STATIC edge: $r18 = staticinvoke <com.atlassian.plugin.util.ClassLoaderUtils: java.lang.Class coerce(java.lang.Class)>($r17) in <com.atlassian.plugin.util.ClassLoaderUtils: java.lang.Class loadClass(java.lang.String,java.lang.Class)> ==> <com.atlassian.plugin.util.ClassLoaderUtils: java.lang.Class coerce(java.lang.Class)>
STATIC edge: $r4 = staticinvoke <com.atlassian.plugin.util.ClassLoaderUtils: java.lang.Class coerce(java.lang.Class)>($r3) in <com.atlassian.plugin.util.ClassLoaderUtils: java.lang.Class loadClass(java.lang.String,java.lang.Class)> ==> <com.atlassian.plugin.util.ClassLoaderUtils: java.lang.Class coerce(java.lang.Class)>
STATIC edge: $r3 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r2) in <com.atlassian.plugin.util.ClassLoaderUtils: java.lang.Class loadClass(java.lang.String,java.lang.Class)> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
STATIC edge: $r6 = staticinvoke <com.atlassian.plugin.util.ClassLoaderUtils: java.lang.Class coerce(java.lang.Class)>($r5) in <com.atlassian.plugin.util.ClassLoaderUtils: java.lang.Class loadClass(java.lang.String,java.lang.Class)> ==> <com.atlassian.plugin.util.ClassLoaderUtils: java.lang.Class coerce(java.lang.Class)>
STATIC edge: $r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() in <com.atlassian.plugin.util.ClassLoaderUtils: java.net.URL getResource(java.lang.String,java.lang.Class)> ==> <java.lang.Thread: java.lang.Thread currentThread()>
STATIC edge: $r7 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() in <com.atlassian.plugin.util.ClassLoaderUtils: java.net.URL getResource(java.lang.String,java.lang.Class)> ==> <java.lang.Thread: java.lang.Thread currentThread()>
STATIC edge: $r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() in <com.atlassian.plugin.util.ClassLoaderUtils: java.util.Enumeration getResources(java.lang.String,java.lang.Class)> ==> <java.lang.Thread: java.lang.Thread currentThread()>
STATIC edge: $r7 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() in <com.atlassian.plugin.util.ClassLoaderUtils: java.util.Enumeration getResources(java.lang.String,java.lang.Class)> ==> <java.lang.Thread: java.lang.Thread currentThread()>
STATIC edge: r2 = staticinvoke <com.atlassian.plugin.util.ClassLoaderUtils: java.net.URL getResource(java.lang.String,java.lang.Class)>(r0, r1) in <com.atlassian.plugin.util.ClassLoaderUtils: java.io.InputStream getResourceAsStream(java.lang.String,java.lang.Class)> ==> <com.atlassian.plugin.util.ClassLoaderUtils: java.net.URL getResource(java.lang.String,java.lang.Class)>
CLINIT edge: $r0 = <java.lang.System: java.io.PrintStream out> in <com.atlassian.plugin.util.ClassLoaderUtils: void printClassLoader()> ==> <java.lang.System: void <clinit>()>
STATIC edge: staticinvoke <com.atlassian.plugin.util.ClassLoaderUtils: void printClassLoader(java.lang.ClassLoader)>($r2) in <com.atlassian.plugin.util.ClassLoaderUtils: void printClassLoader()> ==> <com.atlassian.plugin.util.ClassLoaderUtils: void printClassLoader(java.lang.ClassLoader)>
STATIC edge: $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() in <com.atlassian.plugin.util.ClassLoaderUtils: void printClassLoader()> ==> <java.lang.Thread: java.lang.Thread currentThread()>
CLINIT edge: $r1 = <java.lang.System: java.io.PrintStream out> in <com.atlassian.plugin.util.ClassLoaderUtils: void printClassLoader(java.lang.ClassLoader)> ==> <java.lang.System: void <clinit>()>
STATIC edge: staticinvoke <com.atlassian.plugin.util.ClassLoaderUtils: void printClassLoader(java.lang.ClassLoader)>($r7) in <com.atlassian.plugin.util.ClassLoaderUtils: void printClassLoader(java.lang.ClassLoader)> ==> <com.atlassian.plugin.util.ClassLoaderUtils: void printClassLoader(java.lang.ClassLoader)>
STATIC edge: $z0 = staticinvoke <com.google.common.collect.Iterables: boolean isEmpty(java.lang.Iterable)>($r1) in <com.atlassian.plugin.util.ModuleRestricts: boolean isValidFor(java.util.Set,com.atlassian.plugin.InstallationMode)> ==> <com.google.common.collect.Iterables: boolean isEmpty(java.lang.Iterable)>
STATIC edge: $z2 = staticinvoke <com.google.common.collect.Iterables: boolean any(java.lang.Iterable,com.google.common.base.Predicate)>($r8, $r6) in <com.atlassian.plugin.util.ModuleRestricts: boolean isValidFor(java.util.Set,com.atlassian.plugin.InstallationMode)> ==> <com.google.common.collect.Iterables: boolean any(java.lang.Iterable,com.google.common.base.Predicate)>
STATIC edge: staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "No application defined for \'restrict\' element.") in <com.atlassian.plugin.util.ModuleRestricts: com.atlassian.plugin.util.ModuleRestricts$ModuleRestrict lambda$parseApplicationsFromRestrictElements$0(org.dom4j.Element)> ==> <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>
STATIC edge: $r6 = staticinvoke <com.atlassian.plugin.util.ModuleRestricts: com.atlassian.plugin.util.VersionRange parseVersionRange(org.dom4j.Element)>(r0) in <com.atlassian.plugin.util.ModuleRestricts: com.atlassian.plugin.util.ModuleRestricts$ModuleRestrict lambda$parseApplicationsFromRestrictElements$0(org.dom4j.Element)> ==> <com.atlassian.plugin.util.ModuleRestricts: com.atlassian.plugin.util.VersionRange parseVersionRange(org.dom4j.Element)>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.util.ModuleRestricts: java.util.Optional parseInstallationMode(org.dom4j.Element)>(r0) in <com.atlassian.plugin.util.ModuleRestricts: com.atlassian.plugin.util.ModuleRestricts$ModuleRestrict lambda$parseApplicationsFromRestrictElements$0(org.dom4j.Element)> ==> <com.atlassian.plugin.util.ModuleRestricts: java.util.Optional parseInstallationMode(org.dom4j.Element)>
STATIC edge: $r0 = staticinvoke <com.google.common.base.MoreObjects: com.google.common.base.MoreObjects$ToStringHelper toStringHelper(java.lang.String)>("restrict") in <com.atlassian.plugin.util.ModuleRestricts$ModuleRestrict: java.lang.String toString()> ==> <com.google.common.base.MoreObjects: com.google.common.base.MoreObjects$ToStringHelper toStringHelper(java.lang.String)>
STATIC edge: $r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1) in <com.atlassian.plugin.util.ModuleRestricts$RestrictMatchesApplication: void <init>(com.atlassian.plugin.Application,com.atlassian.plugin.InstallationMode)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
STATIC edge: $r5 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r4) in <com.atlassian.plugin.util.ModuleRestricts$RestrictMatchesApplication: void <init>(com.atlassian.plugin.Application,com.atlassian.plugin.InstallationMode)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isNotBlank(java.lang.CharSequence)>(r0) in <com.atlassian.plugin.util.ModuleRestricts$IsNotBlankPredicate: boolean apply(java.lang.String)> ==> <org.apache.commons.lang3.StringUtils: boolean isNotBlank(java.lang.CharSequence)>
CLINIT edge: $r14 = newarray (java.lang.String)[0] in <com.atlassian.plugin.url.InnerJarURLConnection: void <init>(java.net.URL)> ==> <java.lang.String: void <clinit>()>
STATIC edge: $r1 = staticinvoke <com.atlassian.plugin.url.InnerJarURLConnection: java.net.URL normaliseURL(java.net.URL)>(r19) in <com.atlassian.plugin.url.InnerJarURLConnection: void <init>(java.net.URL)> ==> <com.atlassian.plugin.url.InnerJarURLConnection: java.net.URL normaliseURL(java.net.URL)>
STATIC edge: $r3 = staticinvoke <java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>(r4, "UTF-8") in <com.atlassian.plugin.url.InnerJarURLConnection: java.util.jar.JarFile getJarFile()> ==> <java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>
CLINIT edge: $r4 = <com.atlassian.plugin.util.FileUtils: org.slf4j.Logger log> in <com.atlassian.plugin.util.FileUtils: void conditionallyExtractZipFile(java.net.URL,java.io.File)> ==> <com.atlassian.plugin.util.FileUtils: void <clinit>()>
CLINIT edge: $r10 = <com.atlassian.plugin.util.zip.AbstractUnzipper: org.slf4j.Logger log> in <com.atlassian.plugin.util.zip.AbstractUnzipper: void conditionalUnzip()> ==> <com.atlassian.plugin.util.zip.AbstractUnzipper: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.io.FileUtils: void cleanDirectory(java.io.File)>($r12) in <com.atlassian.plugin.util.zip.AbstractUnzipper: void conditionalUnzip()> ==> <org.apache.commons.io.FileUtils: void cleanDirectory(java.io.File)>
STATIC edge: $r5 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toMap(java.util.function.Function,java.util.function.Function)>($r3, $r4) in <com.atlassian.plugin.util.zip.AbstractUnzipper: void conditionalUnzip()> ==> <java.util.stream.Collectors: java.util.stream.Collector toMap(java.util.function.Function,java.util.function.Function)>
STATIC edge: $r4 = staticinvoke <com.atlassian.plugin.util.zip.AbstractUnzipper$getTime__97: java.util.function.Function bootstrap$()>() in <com.atlassian.plugin.util.zip.AbstractUnzipper: void conditionalUnzip()> ==> <com.atlassian.plugin.util.zip.AbstractUnzipper$getTime__97: java.util.function.Function bootstrap$()>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.util.zip.AbstractUnzipper$getName__96: java.util.function.Function bootstrap$()>() in <com.atlassian.plugin.util.zip.AbstractUnzipper: void conditionalUnzip()> ==> <com.atlassian.plugin.util.zip.AbstractUnzipper$getName__96: java.util.function.Function bootstrap$()>
STATIC edge: $r2 = staticinvoke <java.util.Arrays: java.util.stream.Stream stream(java.lang.Object[])>($r1) in <com.atlassian.plugin.util.zip.AbstractUnzipper: void conditionalUnzip()> ==> <java.util.Arrays: java.util.stream.Stream stream(java.lang.Object[])>
STATIC edge: $r5 = staticinvoke <com.atlassian.plugin.manager.DependentPlugins$getKey__112: com.google.common.base.Function bootstrap$()>() in <com.atlassian.plugin.manager.DependentPlugins: void <init>(java.util.Collection,java.lang.Iterable,java.util.Set)> ==> <com.atlassian.plugin.manager.DependentPlugins$getKey__112: com.google.common.base.Function bootstrap$()>
STATIC edge: r6 = staticinvoke <com.google.common.collect.Maps: com.google.common.collect.ImmutableMap uniqueIndex(java.lang.Iterable,com.google.common.base.Function)>(r3, $r5) in <com.atlassian.plugin.manager.DependentPlugins: void <init>(java.util.Collection,java.lang.Iterable,java.util.Set)> ==> <com.google.common.collect.Maps: com.google.common.collect.ImmutableMap uniqueIndex(java.lang.Iterable,com.google.common.base.Function)>
CLINIT edge: $r1 = <com.atlassian.plugin.manager.DependentPlugins: java.util.Set ALL_TYPES> in <com.atlassian.plugin.manager.DependentPlugins: java.util.List toStringList()> ==> <com.atlassian.plugin.manager.DependentPlugins: void <clinit>()>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.manager.DependentPlugins$lambda_toStringList_2__116: java.util.function.Predicate bootstrap$()>() in <com.atlassian.plugin.manager.DependentPlugins: java.util.List toStringList(java.util.Set)> ==> <com.atlassian.plugin.manager.DependentPlugins$lambda_toStringList_2__116: java.util.function.Predicate bootstrap$()>
STATIC edge: $r10 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>() in <com.atlassian.plugin.manager.DependentPlugins: java.util.List toStringList(java.util.Set)> ==> <java.util.stream.Collectors: java.util.stream.Collector toList()>
STATIC edge: $r8 = staticinvoke <com.atlassian.plugin.manager.DependentPlugins$lambda_toStringList_4__119: java.util.function.Function bootstrap$()>() in <com.atlassian.plugin.manager.DependentPlugins: java.util.List toStringList(java.util.Set)> ==> <com.atlassian.plugin.manager.DependentPlugins$lambda_toStringList_4__119: java.util.function.Function bootstrap$()>
STATIC edge: $r6 = staticinvoke <com.atlassian.plugin.manager.DependentPlugins$lambda_toStringList_3__117: java.util.function.Predicate bootstrap$(java.util.Set)>(r5) in <com.atlassian.plugin.manager.DependentPlugins: java.util.List toStringList(java.util.Set)> ==> <com.atlassian.plugin.manager.DependentPlugins$lambda_toStringList_3__117: java.util.function.Predicate bootstrap$(java.util.Set)>
CLINIT edge: $r1 = <com.atlassian.plugin.manager.DependentPlugins: java.util.Set ALL_TYPES> in <com.atlassian.plugin.manager.DependentPlugins: java.util.List getPlugins(boolean)> ==> <com.atlassian.plugin.manager.DependentPlugins: void <clinit>()>
STATIC edge: staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z2, $r11) in <com.atlassian.plugin.manager.DependentPlugins: java.util.List getPluginsByTypes(java.util.Set,boolean)> ==> <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>
STATIC edge: $r21 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>() in <com.atlassian.plugin.manager.DependentPlugins: java.util.List getPluginsByTypes(java.util.Set,boolean)> ==> <java.util.stream.Collectors: java.util.stream.Collector toList()>
STATIC edge: $r19 = staticinvoke <com.atlassian.plugin.manager.DependentPlugins$getPlugin__121: java.util.function.Function bootstrap$()>() in <com.atlassian.plugin.manager.DependentPlugins: java.util.List getPluginsByTypes(java.util.Set,boolean)> ==> <com.atlassian.plugin.manager.DependentPlugins$getPlugin__121: java.util.function.Function bootstrap$()>
STATIC edge: $r17 = staticinvoke <com.atlassian.plugin.manager.DependentPlugins$lambda_getPluginsByTypes_6__120: java.util.function.Predicate bootstrap$(java.util.Set)>(r8) in <com.atlassian.plugin.manager.DependentPlugins: java.util.List getPluginsByTypes(java.util.Set,boolean)> ==> <com.atlassian.plugin.manager.DependentPlugins$lambda_getPluginsByTypes_6__120: java.util.function.Predicate bootstrap$(java.util.Set)>
STATIC edge: $r15 = staticinvoke <com.atlassian.plugin.manager.DependentPlugins$lambda_getPluginsByTypes_5__118: java.util.function.Predicate bootstrap$(boolean)>(z0) in <com.atlassian.plugin.manager.DependentPlugins: java.util.List getPluginsByTypes(java.util.Set,boolean)> ==> <com.atlassian.plugin.manager.DependentPlugins$lambda_getPluginsByTypes_5__118: java.util.function.Predicate bootstrap$(boolean)>
CLINIT edge: $r1 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>() in <com.atlassian.plugin.util.ChainingClassLoader: void <init>(java.lang.ClassLoader[])> ==> <java.util.Collections: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>() in <com.atlassian.plugin.util.ChainingClassLoader: void <init>(java.lang.ClassLoader[])> ==> <java.util.Collections: java.util.Map emptyMap()>
STATIC edge: $r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1) in <com.atlassian.plugin.util.ChainingClassLoader: void <init>(java.util.Map,java.lang.ClassLoader[])> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
STATIC edge: staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "ClassLoader arguments cannot be null") in <com.atlassian.plugin.util.ChainingClassLoader: void <init>(java.util.Map,java.lang.ClassLoader[])> ==> <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>
STATIC edge: $r8 = staticinvoke <com.atlassian.plugin.util.ChainingClassLoader$nonNull__176: java.util.function.Predicate bootstrap$()>() in <com.atlassian.plugin.util.ChainingClassLoader: void <init>(java.util.Map,java.lang.ClassLoader[])> ==> <com.atlassian.plugin.util.ChainingClassLoader$nonNull__176: java.util.function.Predicate bootstrap$()>
STATIC edge: $r5 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.lang.Object[])>(r4) in <com.atlassian.plugin.util.ChainingClassLoader: void <init>(java.util.Map,java.lang.ClassLoader[])> ==> <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.lang.Object[])>
CLINIT edge: $r4 = <com.atlassian.plugin.util.ChainingClassLoader: org.slf4j.Logger log> in <com.atlassian.plugin.util.ChainingClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)> ==> <com.atlassian.plugin.util.ChainingClassLoader: void <clinit>()>
STATIC edge: $r11 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$1$lambda_test_0__6: java.util.function.Supplier bootstrap$(java.util.function.Predicate,com.atlassian.plugin.Plugin)>($r10, r0) in <com.atlassian.plugin.manager.DefaultPluginManager$1: boolean test(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$1$lambda_test_0__6: java.util.function.Supplier bootstrap$(java.util.function.Predicate,com.atlassian.plugin.Plugin)>
CLINIT edge: $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0) in <com.atlassian.plugin.manager.DefaultPluginManager$1: java.lang.Boolean lambda$test$0(java.util.function.Predicate,com.atlassian.plugin.Plugin)> ==> <java.lang.Boolean: void <clinit>()>
STATIC edge: $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0) in <com.atlassian.plugin.manager.DefaultPluginManager$1: java.lang.Boolean lambda$test$0(java.util.function.Predicate,com.atlassian.plugin.Plugin)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
CLINIT edge: $r1 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.manager.DefaultPluginManager$Builder newBuilder()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore,java.util.List,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void <clinit>()>
STATIC edge: $r1 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.manager.DefaultPluginManager$Builder newBuilder()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore,java.util.List,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.manager.DefaultPluginManager$Builder newBuilder()>
CLINIT edge: $r1 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.manager.DefaultPluginManager$Builder newBuilder()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore,java.util.List,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager,com.atlassian.plugin.exception.PluginExceptionInterception)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void <clinit>()>
STATIC edge: $r1 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.manager.DefaultPluginManager$Builder newBuilder()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore,java.util.List,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager,com.atlassian.plugin.exception.PluginExceptionInterception)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.manager.DefaultPluginManager$Builder newBuilder()>
CLINIT edge: $r1 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.manager.DefaultPluginManager$Builder newBuilder()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore,java.util.List,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager,boolean)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void <clinit>()>
STATIC edge: $r1 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.manager.DefaultPluginManager$Builder newBuilder()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore,java.util.List,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager,boolean)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.manager.DefaultPluginManager$Builder newBuilder()>
CLINIT edge: $r1 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.manager.DefaultPluginManager$Builder newBuilder()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore,java.util.List,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager,java.util.function.Predicate)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void <clinit>()>
STATIC edge: $r1 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.manager.DefaultPluginManager$Builder newBuilder()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore,java.util.List,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager,java.util.function.Predicate)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.manager.DefaultPluginManager$Builder newBuilder()>
CLINIT edge: $r1 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.manager.DefaultPluginManager$Builder newBuilder()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore,java.util.List,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager,com.atlassian.plugin.exception.PluginExceptionInterception,java.util.function.Predicate)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void <clinit>()>
STATIC edge: $r1 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.manager.DefaultPluginManager$Builder newBuilder()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore,java.util.List,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager,com.atlassian.plugin.exception.PluginExceptionInterception,java.util.function.Predicate)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.manager.DefaultPluginManager$Builder newBuilder()>
CLINIT edge: $r1 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.manager.DefaultPluginManager$Builder newBuilder()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore,java.util.List,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager,com.atlassian.plugin.exception.PluginExceptionInterception,boolean)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void <clinit>()>
STATIC edge: $r1 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.manager.DefaultPluginManager$Builder newBuilder()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore,java.util.List,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager,com.atlassian.plugin.exception.PluginExceptionInterception,boolean)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.manager.DefaultPluginManager$Builder newBuilder()>
CLINIT edge: $r1 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.manager.DefaultPluginManager$Builder newBuilder()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore,java.util.List,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager,com.atlassian.plugin.exception.PluginExceptionInterception,boolean,java.util.function.Predicate)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void <clinit>()>
STATIC edge: $r1 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.manager.DefaultPluginManager$Builder newBuilder()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore,java.util.List,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager,com.atlassian.plugin.exception.PluginExceptionInterception,boolean,java.util.function.Predicate)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.manager.DefaultPluginManager$Builder newBuilder()>
STATIC edge: $r2 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$lambda_init_3__37: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager)>(r0) in <com.atlassian.plugin.manager.DefaultPluginManager: void init()> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_init_3__37: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager)>
STATIC edge: $r2 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$lambda_earlyStartup_5__38: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager)>(r0) in <com.atlassian.plugin.manager.DefaultPluginManager: void earlyStartup()> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_earlyStartup_5__38: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager)>
STATIC edge: $r2 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$lambda_lateStartup_6__39: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager)>(r0) in <com.atlassian.plugin.manager.DefaultPluginManager: void lateStartup()> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_lateStartup_6__39: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager)>
STATIC edge: $r2 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$lambda_shutdown_7__40: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager)>(r0) in <com.atlassian.plugin.manager.DefaultPluginManager: void shutdown()> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_shutdown_7__40: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager)>
STATIC edge: $r2 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$lambda_warmRestart_8__41: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager)>(r0) in <com.atlassian.plugin.manager.DefaultPluginManager: void warmRestart()> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_warmRestart_8__41: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager)>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$lambda_onPluginModuleAvailable_9__42: java.util.function.Supplier bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.event.events.PluginModuleAvailableEvent)>(r0, r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void onPluginModuleAvailable(com.atlassian.plugin.event.events.PluginModuleAvailableEvent)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_onPluginModuleAvailable_9__42: java.util.function.Supplier bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.event.events.PluginModuleAvailableEvent)>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$lambda_onPluginModuleUnavailable_10__43: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.event.events.PluginModuleUnavailableEvent)>(r0, r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void onPluginModuleUnavailable(com.atlassian.plugin.event.events.PluginModuleUnavailableEvent)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_onPluginModuleUnavailable_10__43: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.event.events.PluginModuleUnavailableEvent)>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$lambda_onPluginContainerUnavailable_11__44: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.event.events.PluginContainerUnavailableEvent)>(r0, r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void onPluginContainerUnavailable(com.atlassian.plugin.event.events.PluginContainerUnavailableEvent)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_onPluginContainerUnavailable_11__44: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.event.events.PluginContainerUnavailableEvent)>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$lambda_onPluginRefresh_12__45: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.event.events.PluginRefreshedEvent)>(r0, r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void onPluginRefresh(com.atlassian.plugin.event.events.PluginRefreshedEvent)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_onPluginRefresh_12__45: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.event.events.PluginRefreshedEvent)>
STATIC edge: $r5 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$lambda_installPlugins_13__46: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.PluginArtifact[],java.util.Map)>(r2, r3, $r0) in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.Set installPlugins(com.atlassian.plugin.PluginArtifact[])> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_installPlugins_13__46: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.PluginArtifact[],java.util.Map)>
CLINIT edge: $r3 = <com.atlassian.plugin.manager.StateTracker$State: com.atlassian.plugin.manager.StateTracker$State RESUMING> in <com.atlassian.plugin.manager.DefaultPluginManager: int scanForNewPlugins()> ==> <com.atlassian.plugin.manager.StateTracker$State: void <clinit>()>
STATIC edge: $r7 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$lambda_scanForNewPlugins_14__47: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,java.util.concurrent.atomic.AtomicInteger)>(r0, $r4) in <com.atlassian.plugin.manager.DefaultPluginManager: int scanForNewPlugins()> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_scanForNewPlugins_14__47: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,java.util.concurrent.atomic.AtomicInteger)>
STATIC edge: staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.String,java.lang.Object)>($z0, "Cannot scanForNewPlugins in state %s", r2) in <com.atlassian.plugin.manager.DefaultPluginManager: int scanForNewPlugins()> ==> <com.google.common.base.Preconditions: void checkState(boolean,java.lang.String,java.lang.Object)>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$lambda_uninstall_15__48: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.Plugin)>(r0, r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void uninstall(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_uninstall_15__48: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.Plugin)>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$lambda_uninstallPlugins_19__49: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,java.util.Collection)>(r0, r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void uninstallPlugins(java.util.Collection)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_uninstallPlugins_19__49: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,java.util.Collection)>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$lambda_revertRestartRequiredChange_20__50: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,java.lang.String)>(r0, r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void revertRestartRequiredChange(java.lang.String)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_revertRestartRequiredChange_20__50: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,java.lang.String)>
STATIC edge: $r5 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.Collection getPlugins(java.util.function.Predicate)> ==> <java.util.stream.Collectors: java.util.stream.Collector toList()>
STATIC edge: $r7 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector collectingAndThen(java.util.stream.Collector,java.util.function.Function)>($r5, $r6) in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.Collection getPlugins(java.util.function.Predicate)> ==> <java.util.stream.Collectors: java.util.stream.Collector collectingAndThen(java.util.stream.Collector,java.util.function.Function)>
STATIC edge: $r6 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$unmodifiableList__57: java.util.function.Function bootstrap$()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.Collection getPlugins(java.util.function.Predicate)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$unmodifiableList__57: java.util.function.Function bootstrap$()>
STATIC edge: $r6 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$getModule__58: java.util.function.Function bootstrap$(com.atlassian.plugin.manager.SafeModuleExtractor)>($r4) in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.Collection getModules(java.util.function.Predicate)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$getModule__58: java.util.function.Function bootstrap$(com.atlassian.plugin.manager.SafeModuleExtractor)>
STATIC edge: $r12 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector collectingAndThen(java.util.stream.Collector,java.util.function.Function)>($r10, $r11) in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.Collection getModules(java.util.function.Predicate)> ==> <java.util.stream.Collectors: java.util.stream.Collector collectingAndThen(java.util.stream.Collector,java.util.function.Function)>
STATIC edge: $r11 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$unmodifiableList__64: java.util.function.Function bootstrap$()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.Collection getModules(java.util.function.Predicate)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$unmodifiableList__64: java.util.function.Function bootstrap$()>
STATIC edge: $r10 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.Collection getModules(java.util.function.Predicate)> ==> <java.util.stream.Collectors: java.util.stream.Collector toList()>
STATIC edge: $r8 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$nonNull__61: java.util.function.Predicate bootstrap$()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.Collection getModules(java.util.function.Predicate)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$nonNull__61: java.util.function.Predicate bootstrap$()>
STATIC edge: $r4 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.Collection getModuleDescriptors(java.util.function.Predicate)> ==> <java.util.stream.Collectors: java.util.stream.Collector toList()>
STATIC edge: $r6 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector collectingAndThen(java.util.stream.Collector,java.util.function.Function)>($r4, $r5) in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.Collection getModuleDescriptors(java.util.function.Predicate)> ==> <java.util.stream.Collectors: java.util.stream.Collector collectingAndThen(java.util.stream.Collector,java.util.function.Function)>
STATIC edge: $r5 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$unmodifiableList__59: java.util.function.Function bootstrap$()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.Collection getModuleDescriptors(java.util.function.Predicate)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$unmodifiableList__59: java.util.function.Function bootstrap$()>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.util.Assertions: java.lang.Object notNull(java.lang.String,java.lang.Object)>("The plugin key must be specified", r1) in <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.Plugin getPlugin(java.lang.String)> ==> <com.atlassian.plugin.util.Assertions: java.lang.Object notNull(java.lang.String,java.lang.Object)>
STATIC edge: $r5 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$getModule__63: java.util.function.Function bootstrap$(com.atlassian.plugin.manager.SafeModuleExtractor)>($r3) in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.List getEnabledModulesByClass(java.lang.Class)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$getModule__63: java.util.function.Function bootstrap$(com.atlassian.plugin.manager.SafeModuleExtractor)>
STATIC edge: $r11 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector collectingAndThen(java.util.stream.Collector,java.util.function.Function)>($r9, $r10) in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.List getEnabledModulesByClass(java.lang.Class)> ==> <java.util.stream.Collectors: java.util.stream.Collector collectingAndThen(java.util.stream.Collector,java.util.function.Function)>
STATIC edge: $r10 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$unmodifiableList__67: java.util.function.Function bootstrap$()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.List getEnabledModulesByClass(java.lang.Class)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$unmodifiableList__67: java.util.function.Function bootstrap$()>
STATIC edge: $r9 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.List getEnabledModulesByClass(java.lang.Class)> ==> <java.util.stream.Collectors: java.util.stream.Collector toList()>
STATIC edge: $r7 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$nonNull__65: java.util.function.Predicate bootstrap$()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.List getEnabledModulesByClass(java.lang.Class)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$nonNull__65: java.util.function.Predicate bootstrap$()>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$lambda_getEnabledModuleDescriptorsByClass_29__66: java.util.function.Function bootstrap$()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.List getEnabledModuleDescriptorsByClass(java.lang.Class)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_getEnabledModuleDescriptorsByClass_29__66: java.util.function.Function bootstrap$()>
STATIC edge: $r16 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector collectingAndThen(java.util.stream.Collector,java.util.function.Function)>($r14, $r15) in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.List getEnabledModuleDescriptorsByClass(java.lang.Class)> ==> <java.util.stream.Collectors: java.util.stream.Collector collectingAndThen(java.util.stream.Collector,java.util.function.Function)>
STATIC edge: $r15 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$unmodifiableList__88: java.util.function.Function bootstrap$()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.List getEnabledModuleDescriptorsByClass(java.lang.Class)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$unmodifiableList__88: java.util.function.Function bootstrap$()>
STATIC edge: $r14 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.List getEnabledModuleDescriptorsByClass(java.lang.Class)> ==> <java.util.stream.Collectors: java.util.stream.Collector toList()>
STATIC edge: $r12 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$cast__85: java.util.function.Function bootstrap$(java.lang.Class)>(r5) in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.List getEnabledModuleDescriptorsByClass(java.lang.Class)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$cast__85: java.util.function.Function bootstrap$(java.lang.Class)>
STATIC edge: $r7 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$isInstance__77: java.util.function.Predicate bootstrap$(java.lang.Class)>(r5) in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.List getEnabledModuleDescriptorsByClass(java.lang.Class)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$isInstance__77: java.util.function.Predicate bootstrap$(java.lang.Class)>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$lambda_enablePlugins_30__68: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,java.lang.String[])>(r0, r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void enablePlugins(java.lang.String[])> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_enablePlugins_30__68: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,java.lang.String[])>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$lambda_disablePlugin_33__71: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,java.lang.String)>(r0, r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void disablePlugin(java.lang.String)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_disablePlugin_33__71: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,java.lang.String)>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$lambda_disablePluginWithoutPersisting_34__72: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,java.lang.String)>(r0, r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void disablePluginWithoutPersisting(java.lang.String)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_disablePluginWithoutPersisting_34__72: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,java.lang.String)>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$lambda_disablePluginModule_43__81: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,java.lang.String)>(r0, r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void disablePluginModule(java.lang.String)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_disablePluginModule_43__81: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,java.lang.String)>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$lambda_enablePluginModule_45__83: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,java.lang.String)>(r0, r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void enablePluginModule(java.lang.String)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_enablePluginModule_45__83: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,java.lang.String)>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.util.Assertions: java.lang.Object notNull(java.lang.String,java.lang.Object)>("The plugin key must be specified", r1) in <com.atlassian.plugin.manager.DefaultPluginManager: boolean isPluginEnabled(java.lang.String)> ==> <com.atlassian.plugin.util.Assertions: java.lang.Object notNull(java.lang.String,java.lang.Object)>
STATIC edge: $r6 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$lambda_addDynamicModule_47__86: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.Plugin,org.dom4j.Element,java.util.concurrent.atomic.AtomicReference)>(r2, r3, r4, $r0) in <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.ModuleDescriptor addDynamicModule(com.atlassian.plugin.Plugin,org.dom4j.Element)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_addDynamicModule_47__86: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.Plugin,org.dom4j.Element,java.util.concurrent.atomic.AtomicReference)>
STATIC edge: $r4 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$lambda_removeDynamicModule_48__87: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor)>(r0, r1, r2) in <com.atlassian.plugin.manager.DefaultPluginManager: void removeDynamicModule(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_removeDynamicModule_48__87: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor)>
CLINIT edge: $r1 = <com.atlassian.plugin.manager.DefaultPluginManager: org.slf4j.Logger log> in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$notifyModuleEnabled$46(com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void <clinit>()>
CLINIT edge: $r6 = <com.atlassian.plugin.manager.DefaultPluginManager: org.slf4j.Logger log> in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enablePluginModule$45(java.lang.String)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void <clinit>()>
CLINIT edge: $r4 = <com.atlassian.plugin.manager.DefaultPluginManager: org.slf4j.Logger log> in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enablePluginModule$45(java.lang.String)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void <clinit>()>
CLINIT edge: $r1 = <com.atlassian.plugin.manager.DefaultPluginManager: org.slf4j.Logger log> in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$publishModuleDisabledEvents$44(com.atlassian.plugin.ModuleDescriptor,boolean)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void <clinit>()>
CLINIT edge: $r8 = <com.atlassian.plugin.manager.DefaultPluginManager: org.slf4j.Logger log> in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$disablePluginModule$43(java.lang.String)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void <clinit>()>
CLINIT edge: $r6 = <com.atlassian.plugin.manager.DefaultPluginManager: org.slf4j.Logger log> in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$disablePluginModule$43(java.lang.String)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void <clinit>()>
CLINIT edge: staticinvoke <java.util.Collections: void reverse(java.util.List)>($r0) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$disablePluginModules$42(com.atlassian.plugin.Plugin)> ==> <java.util.Collections: void <clinit>()>
STATIC edge: staticinvoke <java.util.Collections: void reverse(java.util.List)>($r0) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$disablePluginModules$42(com.atlassian.plugin.Plugin)> ==> <java.util.Collections: void reverse(java.util.List)>
CLINIT edge: $r1 = <com.atlassian.plugin.manager.DefaultPluginManager: org.slf4j.Logger log> in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$broadcastPluginDisabling$39(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void <clinit>()>
CLINIT edge: $r14 = <com.atlassian.plugin.manager.DefaultPluginManager: org.slf4j.Logger log> in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$reenableDependent$37(com.atlassian.plugin.PluginState,com.atlassian.plugin.manager.DependentPlugins,java.util.Collection)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void <clinit>()>
STATIC edge: $r12 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$lambda_null_36__89: java.util.function.Consumer bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.PluginState,java.util.List,java.util.List)>(r11, r2, r9, r6) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$reenableDependent$37(com.atlassian.plugin.PluginState,com.atlassian.plugin.manager.DependentPlugins,java.util.Collection)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_null_36__89: java.util.function.Consumer bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.PluginState,java.util.List,java.util.List)>
STATIC edge: $r8 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>($r7) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$reenableDependent$37(com.atlassian.plugin.PluginState,com.atlassian.plugin.manager.DependentPlugins,java.util.Collection)> ==> <java.util.Collections: java.util.Set singleton(java.lang.Object)>
STATIC edge: r1 = staticinvoke <java.util.EnumSet: java.util.EnumSet of(java.lang.Enum)>($r19) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$reenableDependent$37(com.atlassian.plugin.PluginState,com.atlassian.plugin.manager.DependentPlugins,java.util.Collection)> ==> <java.util.EnumSet: java.util.EnumSet of(java.lang.Enum)>
CLINIT edge: $r8 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>($r7) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$reenableDependent$37(com.atlassian.plugin.PluginState,com.atlassian.plugin.manager.DependentPlugins,java.util.Collection)> ==> <java.util.Collections: void <clinit>()>
CLINIT edge: $r23 = <com.atlassian.plugin.manager.DefaultPluginManager: org.slf4j.Logger log> in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$disablePluginInternal$35(java.lang.String,boolean)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void <clinit>()>
STATIC edge: $r14 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(r3) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$disablePluginInternal$35(java.lang.String,boolean)> ==> <java.util.Collections: java.util.List singletonList(java.lang.Object)>
STATIC edge: $r21 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$disable__90: java.util.function.Consumer bootstrap$(com.atlassian.plugin.manager.PluginPersistentStateModifier)>($r19) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$disablePluginInternal$35(java.lang.String,boolean)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$disable__90: java.util.function.Consumer bootstrap$(com.atlassian.plugin.manager.PluginPersistentStateModifier)>
STATIC edge: $r17 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>($r16) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$disablePluginInternal$35(java.lang.String,boolean)> ==> <java.util.Collections: java.util.Set singleton(java.lang.Object)>
STATIC edge: $r13 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r8) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$disablePluginInternal$35(java.lang.String,boolean)> ==> <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>
STATIC edge: $r12 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r9) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$disablePluginInternal$35(java.lang.String,boolean)> ==> <java.util.Arrays: java.util.List asList(java.lang.Object[])>
STATIC edge: $r7 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r6) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$disablePluginInternal$35(java.lang.String,boolean)> ==> <java.util.Collections: java.util.List singletonList(java.lang.Object)>
CLINIT edge: $r7 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r6) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$disablePluginInternal$35(java.lang.String,boolean)> ==> <java.util.Collections: void <clinit>()>
CLINIT edge: $r2 = <com.atlassian.plugin.manager.DefaultPluginManager: org.slf4j.Logger log> in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$disablePlugin$33(java.lang.String)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void <clinit>()>
CLINIT edge: $r11 = <com.atlassian.plugin.manager.DefaultPluginManager: org.slf4j.Logger log> in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Boolean lambda$enableConfiguredPluginModule$32(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor,java.util.Set)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void <clinit>()>
STATIC edge: $r23 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0) in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Boolean lambda$enableConfiguredPluginModule$32(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor,java.util.Set)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
STATIC edge: $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1) in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Boolean lambda$enableConfiguredPluginModule$32(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor,java.util.Set)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
STATIC edge: $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1) in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Boolean lambda$enableConfiguredPluginModule$32(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor,java.util.Set)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
STATIC edge: $r13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1) in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Boolean lambda$enableConfiguredPluginModule$32(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor,java.util.Set)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
CLINIT edge: $r23 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0) in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Boolean lambda$enableConfiguredPluginModule$32(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor,java.util.Set)> ==> <java.lang.Boolean: void <clinit>()>
CLINIT edge: $r18 = <com.atlassian.plugin.manager.DefaultPluginManager: org.slf4j.Logger log> in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Boolean lambda$enableConfiguredPluginModule$32(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor,java.util.Set)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void <clinit>()>
CLINIT edge: $r27 = <com.atlassian.plugin.manager.DefaultPluginManager: org.slf4j.Logger log> in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Boolean lambda$enableConfiguredPluginModule$32(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor,java.util.Set)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void <clinit>()>
CLINIT edge: $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1) in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Boolean lambda$enableConfiguredPluginModule$32(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor,java.util.Set)> ==> <java.lang.Boolean: void <clinit>()>
CLINIT edge: $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1) in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Boolean lambda$enableConfiguredPluginModule$32(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor,java.util.Set)> ==> <java.lang.Boolean: void <clinit>()>
CLINIT edge: $r5 = <com.atlassian.plugin.manager.DefaultPluginManager: org.slf4j.Logger log> in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Boolean lambda$enableConfiguredPluginModule$32(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor,java.util.Set)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void <clinit>()>
CLINIT edge: $r13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1) in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Boolean lambda$enableConfiguredPluginModule$32(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor,java.util.Set)> ==> <java.lang.Boolean: void <clinit>()>
CLINIT edge: $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0) in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Boolean lambda$enableConfiguredPluginModules$31(com.atlassian.plugin.Plugin)> ==> <java.lang.Boolean: void <clinit>()>
STATIC edge: $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1) in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Boolean lambda$enableConfiguredPluginModules$31(com.atlassian.plugin.Plugin)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
STATIC edge: $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0) in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Boolean lambda$enableConfiguredPluginModules$31(com.atlassian.plugin.Plugin)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
CLINIT edge: $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1) in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Boolean lambda$enableConfiguredPluginModules$31(com.atlassian.plugin.Plugin)> ==> <java.lang.Boolean: void <clinit>()>
CLINIT edge: $r21 = <com.atlassian.plugin.manager.DefaultPluginManager: org.slf4j.Logger log> in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enablePlugins$30(java.lang.String[])> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void <clinit>()>
CLINIT edge: $r16 = <com.atlassian.plugin.manager.DefaultPluginManager: org.slf4j.Logger log> in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enablePlugins$30(java.lang.String[])> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void <clinit>()>
CLINIT edge: $r4 = <com.atlassian.plugin.manager.DefaultPluginManager: org.slf4j.Logger log> in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$updatePlugin$26(com.atlassian.plugin.Plugin,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void <clinit>()>
STATIC edge: r39 = staticinvoke <com.google.common.collect.Maps: java.util.Map filterKeys(java.util.Map,com.google.common.base.Predicate)>($r27, $r7) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$updatePlugin$26(com.atlassian.plugin.Plugin,com.atlassian.plugin.Plugin)> ==> <com.google.common.collect.Maps: java.util.Map filterKeys(java.util.Map,com.google.common.base.Predicate)>
STATIC edge: $r7 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$contains__91: com.google.common.base.Predicate bootstrap$(java.util.Set)>($r33) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$updatePlugin$26(com.atlassian.plugin.Plugin,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$contains__91: com.google.common.base.Predicate bootstrap$(java.util.Set)>
CLINIT edge: $r3 = <com.atlassian.plugin.manager.DefaultPluginManager: org.slf4j.Logger log> in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$disablePlugins$25(boolean,com.atlassian.plugin.manager.DependentPlugins,java.util.Collection)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void <clinit>()>
CLINIT edge: $r22 = <com.atlassian.plugin.manager.DefaultPluginManager: org.slf4j.Logger log> in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enableDependentPlugins$24(java.util.Collection)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void <clinit>()>
STATIC edge: $r21 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Iterable toPluginKeys(java.lang.Iterable)>(r4) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enableDependentPlugins$24(java.util.Collection)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Iterable toPluginKeys(java.lang.Iterable)>
STATIC edge: $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enableDependentPlugins$24(java.util.Collection)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
CLINIT edge: $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enableDependentPlugins$24(java.util.Collection)> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: $r5 = <com.atlassian.plugin.manager.DefaultPluginManager: org.slf4j.Logger log> in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enableDependentPlugins$24(java.util.Collection)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void <clinit>()>
CLINIT edge: $r5 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.String getMinimumPluginVersionsFileProperty()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void <clinit>()>
STATIC edge: $r47 = staticinvoke <java.util.Collections: java.util.List emptyList()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <java.util.Collections: java.util.List emptyList()>
STATIC edge: $r49 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Iterable toPluginKeys(java.lang.Iterable)>(r26) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Iterable toPluginKeys(java.lang.Iterable)>
STATIC edge: $r25 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r70) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>
STATIC edge: $r24 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r20) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <java.util.Arrays: java.util.List asList(java.lang.Object[])>
STATIC edge: $r18 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r17) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <java.util.Collections: java.util.List singletonList(java.lang.Object)>
STATIC edge: $r5 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.String getMinimumPluginVersionsFileProperty()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.String getMinimumPluginVersionsFileProperty()>
CLINIT edge: $r30 = <com.atlassian.plugin.manager.StateTracker$State: com.atlassian.plugin.manager.StateTracker$State STARTED> in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <com.atlassian.plugin.manager.StateTracker$State: void <clinit>()>
CLINIT edge: $r18 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r17) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <java.util.Collections: void <clinit>()>
STATIC edge: staticinvoke <com.atlassian.plugin.util.Assertions: java.lang.Object notNull(java.lang.String,java.lang.Object)>("pluginKey", r0) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$revertRestartRequiredChange$20(java.lang.String)> ==> <com.atlassian.plugin.util.Assertions: java.lang.Object notNull(java.lang.String,java.lang.Object)>
CLINIT edge: $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$uninstallPlugins$19(java.util.Collection)> ==> <java.lang.Boolean: void <clinit>()>
STATIC edge: $r37 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$lambda_null_18__109: java.util.function.Consumer bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager)>(r9) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$uninstallPlugins$19(java.util.Collection)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_null_18__109: java.util.function.Consumer bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager)>
STATIC edge: $r36 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$uninstallNoEvent__101: java.util.function.Consumer bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager)>(r9) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$uninstallPlugins$19(java.util.Collection)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$uninstallNoEvent__101: java.util.function.Consumer bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager)>
STATIC edge: $r35 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$lambda_null_17__99: java.util.function.Consumer bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager)>(r9) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$uninstallPlugins$19(java.util.Collection)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_null_17__99: java.util.function.Consumer bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager)>
STATIC edge: $r34 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$disable__98: java.util.function.Consumer bootstrap$(com.atlassian.plugin.manager.PluginPersistentStateModifier)>($r32) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$uninstallPlugins$19(java.util.Collection)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$disable__98: java.util.function.Consumer bootstrap$(com.atlassian.plugin.manager.PluginPersistentStateModifier)>
STATIC edge: $r30 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>($r29) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$uninstallPlugins$19(java.util.Collection)> ==> <java.util.Collections: java.util.Set singleton(java.lang.Object)>
STATIC edge: $r27 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r20) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$uninstallPlugins$19(java.util.Collection)> ==> <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>
STATIC edge: $r26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r21) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$uninstallPlugins$19(java.util.Collection)> ==> <java.util.Arrays: java.util.List asList(java.lang.Object[])>
STATIC edge: $r18 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$uninstallPlugins$19(java.util.Collection)> ==> <java.util.stream.Collectors: java.util.stream.Collector toList()>
STATIC edge: $r16 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$getKey__95: java.util.function.Function bootstrap$()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$uninstallPlugins$19(java.util.Collection)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$getKey__95: java.util.function.Function bootstrap$()>
STATIC edge: $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$uninstallPlugins$19(java.util.Collection)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
STATIC edge: $r11 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$lambda_null_16__93: java.util.function.Consumer bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager)>(r9) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$uninstallPlugins$19(java.util.Collection)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_null_16__93: java.util.function.Consumer bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager)>
STATIC edge: $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$uninstallPlugins$19(java.util.Collection)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
STATIC edge: $r4 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector partitioningBy(java.util.function.Predicate,java.util.stream.Collector)>($r2, $r3) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$uninstallPlugins$19(java.util.Collection)> ==> <java.util.stream.Collectors: java.util.stream.Collector partitioningBy(java.util.function.Predicate,java.util.stream.Collector)>
STATIC edge: $r3 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toSet()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$uninstallPlugins$19(java.util.Collection)> ==> <java.util.stream.Collectors: java.util.stream.Collector toSet()>
STATIC edge: $r2 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$doesPluginRequireRestart__92: java.util.function.Predicate bootstrap$()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$uninstallPlugins$19(java.util.Collection)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$doesPluginRequireRestart__92: java.util.function.Predicate bootstrap$()>
CLINIT edge: $r27 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r20) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$uninstallPlugins$19(java.util.Collection)> ==> <java.util.Collections: void <clinit>()>
CLINIT edge: $r2 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$uninstall$15(com.atlassian.plugin.Plugin)> ==> <java.util.Collections: void <clinit>()>
STATIC edge: $r2 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$uninstall$15(com.atlassian.plugin.Plugin)> ==> <java.util.Collections: java.util.List singletonList(java.lang.Object)>
CLINIT edge: $z3 = staticinvoke <com.atlassian.plugin.util.PluginUtils: boolean doesPluginRequireRestart(com.atlassian.plugin.Plugin)>($r32) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$scanForNewPlugins$14(java.util.concurrent.atomic.AtomicInteger)> ==> <com.atlassian.plugin.util.PluginUtils: void <clinit>()>
STATIC edge: $z5 = staticinvoke <com.atlassian.plugin.util.PluginUtils: boolean doesPluginRequireRestart(com.atlassian.plugin.Plugin)>(r14) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$scanForNewPlugins$14(java.util.concurrent.atomic.AtomicInteger)> ==> <com.atlassian.plugin.util.PluginUtils: boolean doesPluginRequireRestart(com.atlassian.plugin.Plugin)>
STATIC edge: $r25 = staticinvoke <com.atlassian.plugin.util.PluginUtils: java.util.Set getPluginModulesThatRequireRestart(com.atlassian.plugin.Plugin)>($r35) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$scanForNewPlugins$14(java.util.concurrent.atomic.AtomicInteger)> ==> <com.atlassian.plugin.util.PluginUtils: java.util.Set getPluginModulesThatRequireRestart(com.atlassian.plugin.Plugin)>
STATIC edge: r22 = staticinvoke <com.atlassian.plugin.impl.UnloadablePluginFactory: com.atlassian.plugin.impl.UnloadablePlugin createUnloadablePlugin(com.atlassian.plugin.Plugin)>($r34) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$scanForNewPlugins$14(java.util.concurrent.atomic.AtomicInteger)> ==> <com.atlassian.plugin.impl.UnloadablePluginFactory: com.atlassian.plugin.impl.UnloadablePlugin createUnloadablePlugin(com.atlassian.plugin.Plugin)>
STATIC edge: $z3 = staticinvoke <com.atlassian.plugin.util.PluginUtils: boolean doesPluginRequireRestart(com.atlassian.plugin.Plugin)>($r32) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$scanForNewPlugins$14(java.util.concurrent.atomic.AtomicInteger)> ==> <com.atlassian.plugin.util.PluginUtils: boolean doesPluginRequireRestart(com.atlassian.plugin.Plugin)>
CLINIT edge: $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0) in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Boolean lambda$onPluginModuleAvailable$9(com.atlassian.plugin.event.events.PluginModuleAvailableEvent)> ==> <java.lang.Boolean: void <clinit>()>
STATIC edge: $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0) in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Boolean lambda$onPluginModuleAvailable$9(com.atlassian.plugin.event.events.PluginModuleAvailableEvent)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
CLINIT edge: $r1 = <com.atlassian.plugin.manager.StateTracker$State: com.atlassian.plugin.manager.StateTracker$State WARM_RESTARTING> in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$warmRestart$8()> ==> <com.atlassian.plugin.manager.StateTracker$State: void <clinit>()>
STATIC edge: staticinvoke <java.util.Collections: void reverse(java.util.List)>($r6) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$warmRestart$8()> ==> <java.util.Collections: void reverse(java.util.List)>
STATIC edge: staticinvoke <java.util.Collections: void reverse(java.util.List)>($r8) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$warmRestart$8()> ==> <java.util.Collections: void reverse(java.util.List)>
CLINIT edge: staticinvoke <java.util.Collections: void reverse(java.util.List)>($r8) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$warmRestart$8()> ==> <java.util.Collections: void <clinit>()>
CLINIT edge: $r4 = <com.atlassian.plugin.manager.DefaultPluginManager: org.slf4j.Logger log> in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$warmRestart$8()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void <clinit>()>
CLINIT edge: $r0 = staticinvoke <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: com.atlassian.plugin.instrumentation.PluginSystemInstrumentation instance()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$shutdown$7()> ==> <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: void <clinit>()>
STATIC edge: $r0 = staticinvoke <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: com.atlassian.plugin.instrumentation.PluginSystemInstrumentation instance()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$shutdown$7()> ==> <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: com.atlassian.plugin.instrumentation.PluginSystemInstrumentation instance()>
CLINIT edge: $r5 = <com.atlassian.plugin.manager.DefaultPluginManager: org.slf4j.Logger log> in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$shutdown$7()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void <clinit>()>
CLINIT edge: $r3 = <com.atlassian.plugin.manager.StateTracker$State: com.atlassian.plugin.manager.StateTracker$State SHUTTING_DOWN> in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$shutdown$7()> ==> <com.atlassian.plugin.manager.StateTracker$State: void <clinit>()>
CLINIT edge: $r0 = staticinvoke <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: com.atlassian.plugin.instrumentation.PluginSystemInstrumentation instance()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$lateStartup$6()> ==> <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: void <clinit>()>
STATIC edge: $r0 = staticinvoke <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: com.atlassian.plugin.instrumentation.PluginSystemInstrumentation instance()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$lateStartup$6()> ==> <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: com.atlassian.plugin.instrumentation.PluginSystemInstrumentation instance()>
CLINIT edge: $r4 = <com.atlassian.plugin.manager.StateTracker$State: com.atlassian.plugin.manager.StateTracker$State RESUMING> in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$lateStartup$6()> ==> <com.atlassian.plugin.manager.StateTracker$State: void <clinit>()>
CLINIT edge: $r2 = <com.atlassian.plugin.manager.DefaultPluginManager: org.slf4j.Logger log> in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$lateStartup$6()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void <clinit>()>
CLINIT edge: $r0 = staticinvoke <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: com.atlassian.plugin.instrumentation.PluginSystemInstrumentation instance()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: void <clinit>()>
STATIC edge: $r33 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $z3 = staticinvoke <java.lang.Boolean: boolean getBoolean(java.lang.String)>($r15) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.lang.Boolean: boolean getBoolean(java.lang.String)>
STATIC edge: $r15 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.String getLateStartupEnableRetryProperty()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.String getLateStartupEnableRetryProperty()>
STATIC edge: $r46 = staticinvoke <java.util.Collections: java.lang.Object max(java.util.Collection,java.util.Comparator)>(r84, $r45) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.Collections: java.lang.Object max(java.util.Collection,java.util.Comparator)>
STATIC edge: $r45 = staticinvoke <java.util.Comparator: java.util.Comparator naturalOrder()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.Comparator: java.util.Comparator naturalOrder()>
STATIC edge: $r60 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$lambda_null_4__94: java.util.function.Function bootstrap$()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_null_4__94: java.util.function.Function bootstrap$()>
STATIC edge: $r68 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Iterable toPluginKeys(java.lang.Iterable)>(r78) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Iterable toPluginKeys(java.lang.Iterable)>
STATIC edge: $r67 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.lang.Long: java.lang.Long valueOf(long)>
STATIC edge: $r66 = staticinvoke <java.util.stream.StreamSupport: java.util.stream.Stream stream(java.util.Spliterator,boolean)>($r65, 0) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.stream.StreamSupport: java.util.stream.Stream stream(java.util.Spliterator,boolean)>
STATIC edge: $r0 = staticinvoke <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: com.atlassian.plugin.instrumentation.PluginSystemInstrumentation instance()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: com.atlassian.plugin.instrumentation.PluginSystemInstrumentation instance()>
CLINIT edge: $r33 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: $z3 = staticinvoke <java.lang.Boolean: boolean getBoolean(java.lang.String)>($r15) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.lang.Boolean: void <clinit>()>
CLINIT edge: $r46 = staticinvoke <java.util.Collections: java.lang.Object max(java.util.Collection,java.util.Comparator)>(r84, $r45) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.Collections: void <clinit>()>
CLINIT edge: $r67 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.lang.Long: void <clinit>()>
CLINIT edge: $r4 = <com.atlassian.plugin.manager.StateTracker$State: com.atlassian.plugin.manager.StateTracker$State STARTING> in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.manager.StateTracker$State: void <clinit>()>
CLINIT edge: $r2 = <com.atlassian.plugin.manager.DefaultPluginManager: org.slf4j.Logger log> in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void <clinit>()>
CLINIT edge: $r0 = new com.atlassian.plugin.classloader.PluginsClassLoader in <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.classloader.PluginsClassLoader lambda$new$1()> ==> <com.atlassian.plugin.classloader.PluginsClassLoader: void <clinit>()>
STATIC edge: $r7 = staticinvoke <com.atlassian.plugin.util.Assertions: java.lang.Object notNull(java.lang.String,java.lang.Object)>("pluginAccessor", r6) in <com.atlassian.plugin.classloader.PluginsClassLoader: void <init>(java.lang.ClassLoader,com.atlassian.plugin.PluginAccessor,com.atlassian.plugin.event.PluginEventManager)> ==> <com.atlassian.plugin.util.Assertions: java.lang.Object notNull(java.lang.String,java.lang.Object)>
STATIC edge: $r4 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge$lambda_getPlugins_0__24: java.util.function.Function bootstrap$(com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge)>(r0) in <com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge: com.atlassian.plugin.jmx.PluginManagerMXBean$PluginData[] getPlugins()> ==> <com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge$lambda_getPlugins_0__24: java.util.function.Function bootstrap$(com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge)>
STATIC edge: $r6 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge$lambda_getPlugins_1__26: java.util.function.IntFunction bootstrap$()>() in <com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge: com.atlassian.plugin.jmx.PluginManagerMXBean$PluginData[] getPlugins()> ==> <com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge$lambda_getPlugins_1__26: java.util.function.IntFunction bootstrap$()>
STATIC edge: $r2 = staticinvoke <java.util.stream.StreamSupport: java.util.stream.Stream stream(java.util.Spliterator,boolean)>($r1, 0) in <com.atlassian.plugin.manager.SafeModuleExtractor: java.util.List getModules(java.lang.Iterable)> ==> <java.util.stream.StreamSupport: java.util.stream.Stream stream(java.util.Spliterator,boolean)>
STATIC edge: $r8 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>() in <com.atlassian.plugin.manager.SafeModuleExtractor: java.util.List getModules(java.lang.Iterable)> ==> <java.util.stream.Collectors: java.util.stream.Collector toList()>
STATIC edge: $r6 = staticinvoke <com.atlassian.plugin.manager.SafeModuleExtractor$nonNull__182: java.util.function.Predicate bootstrap$()>() in <com.atlassian.plugin.manager.SafeModuleExtractor: java.util.List getModules(java.lang.Iterable)> ==> <com.atlassian.plugin.manager.SafeModuleExtractor$nonNull__182: java.util.function.Predicate bootstrap$()>
STATIC edge: $r4 = staticinvoke <com.atlassian.plugin.manager.SafeModuleExtractor$getModule__179: java.util.function.Function bootstrap$(com.atlassian.plugin.manager.SafeModuleExtractor)>(r3) in <com.atlassian.plugin.manager.SafeModuleExtractor: java.util.List getModules(java.lang.Iterable)> ==> <com.atlassian.plugin.manager.SafeModuleExtractor$getModule__179: java.util.function.Function bootstrap$(com.atlassian.plugin.manager.SafeModuleExtractor)>
CLINIT edge: $r0 = <com.atlassian.plugin.manager.PluginTransactionContext: java.lang.ThreadLocal level> in <com.atlassian.plugin.manager.PluginTransactionContext: void addEvent(java.lang.Object)> ==> <com.atlassian.plugin.manager.PluginTransactionContext: void <clinit>()>
CLINIT edge: $r2 = <com.atlassian.plugin.exception.NoOpPluginExceptionInterception: com.atlassian.plugin.exception.PluginExceptionInterception NOOP_INTERCEPTION> in <com.atlassian.plugin.manager.DefaultPluginManager$Builder: void <init>()> ==> <com.atlassian.plugin.exception.NoOpPluginExceptionInterception: void <clinit>()>
STATIC edge: $r5 = staticinvoke <java.util.Optional: java.util.Optional empty()>() in <com.atlassian.plugin.manager.DefaultPluginManager$Builder: void <init>()> ==> <java.util.Optional: java.util.Optional empty()>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$Builder$lambda_new_0__183: java.util.function.Predicate bootstrap$()>() in <com.atlassian.plugin.manager.DefaultPluginManager$Builder: void <init>()> ==> <com.atlassian.plugin.manager.DefaultPluginManager$Builder$lambda_new_0__183: java.util.function.Predicate bootstrap$()>
CLINIT edge: $r6 = <com.atlassian.plugin.manager.SafeModeManager: com.atlassian.plugin.manager.SafeModeManager START_ALL_PLUGINS> in <com.atlassian.plugin.manager.DefaultPluginManager$Builder: void <init>()> ==> <com.atlassian.plugin.manager.SafeModeManager: void <clinit>()>
STATIC edge: $r2 = staticinvoke <java.util.Optional: java.util.Optional of(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withPluginAccessor(com.atlassian.plugin.PluginAccessor)> ==> <java.util.Optional: java.util.Optional of(java.lang.Object)>
CLINIT edge: $r0 = new com.atlassian.plugin.manager.DefaultPluginManager in <com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager build()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void <clinit>()>
CLINIT edge: $r0 = staticinvoke <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$LazyHolder: com.atlassian.plugin.instrumentation.PluginSystemInstrumentation access$000()>() in <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: com.atlassian.plugin.instrumentation.PluginSystemInstrumentation instance()> ==> <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$LazyHolder: void <clinit>()>
STATIC edge: $r0 = staticinvoke <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$LazyHolder: com.atlassian.plugin.instrumentation.PluginSystemInstrumentation access$000()>() in <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: com.atlassian.plugin.instrumentation.PluginSystemInstrumentation instance()> ==> <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$LazyHolder: com.atlassian.plugin.instrumentation.PluginSystemInstrumentation access$000()>
STATIC edge: $r2 = staticinvoke <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$lambda_getInstrumentRegistry_0__28: java.util.function.Function bootstrap$()>() in <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: java.util.Optional getInstrumentRegistry()> ==> <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$lambda_getInstrumentRegistry_0__28: java.util.function.Function bootstrap$()>
STATIC edge: $r4 = staticinvoke <java.util.Optional: java.util.Optional empty()>() in <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: java.util.Optional getInstrumentRegistry()> ==> <java.util.Optional: java.util.Optional empty()>
STATIC edge: $r4 = staticinvoke <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$lambda_pullTimer_1__29: java.util.function.Function bootstrap$(java.lang.String)>(r2) in <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: com.atlassian.plugin.instrumentation.Timer pullTimer(java.lang.String)> ==> <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$lambda_pullTimer_1__29: java.util.function.Function bootstrap$(java.lang.String)>
STATIC edge: $r6 = staticinvoke <java.util.Optional: java.util.Optional empty()>() in <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: com.atlassian.plugin.instrumentation.Timer pullTimer(java.lang.String)> ==> <java.util.Optional: java.util.Optional empty()>
CLINIT edge: $r0 = new com.atlassian.plugin.instrumentation.SingleTimer in <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: com.atlassian.plugin.instrumentation.SingleTimer pullSingleTimer(java.lang.String)> ==> <com.atlassian.plugin.instrumentation.SingleTimer: void <clinit>()>
STATIC edge: $r6 = staticinvoke <java.util.Optional: java.util.Optional empty()>() in <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: com.atlassian.plugin.instrumentation.SingleTimer pullSingleTimer(java.lang.String)> ==> <java.util.Optional: java.util.Optional empty()>
STATIC edge: $r4 = staticinvoke <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$lambda_pullSingleTimer_2__30: java.util.function.Function bootstrap$(com.atlassian.plugin.instrumentation.PluginSystemInstrumentation,java.lang.String)>(r1, r2) in <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: com.atlassian.plugin.instrumentation.SingleTimer pullSingleTimer(java.lang.String)> ==> <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$lambda_pullSingleTimer_2__30: java.util.function.Function bootstrap$(com.atlassian.plugin.instrumentation.PluginSystemInstrumentation,java.lang.String)>
STATIC edge: $r3 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2) in <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: java.util.Optional lambda$pullSingleTimer$2(java.lang.String,com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$InstrumentRegistryProxy)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
STATIC edge: $r7 = staticinvoke <java.util.Optional: java.util.Optional of(java.lang.Object)>($r6) in <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: java.util.Optional lambda$pullSingleTimer$2(java.lang.String,com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$InstrumentRegistryProxy)> ==> <java.util.Optional: java.util.Optional of(java.lang.Object)>
STATIC edge: $r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1) in <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: java.util.Optional lambda$pullTimer$1(java.lang.String,com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$InstrumentRegistryProxy)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
STATIC edge: $r5 = staticinvoke <java.util.Optional: java.util.Optional of(java.lang.Object)>($r4) in <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: java.util.Optional lambda$pullTimer$1(java.lang.String,com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$InstrumentRegistryProxy)> ==> <java.util.Optional: java.util.Optional of(java.lang.Object)>
STATIC edge: $r2 = staticinvoke <java.util.Optional: java.util.Optional of(java.lang.Object)>($r1) in <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: java.util.Optional lambda$getInstrumentRegistry$0(com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$InstrumentRegistryProxy)> ==> <java.util.Optional: java.util.Optional of(java.lang.Object)>
CLINIT edge: $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1) in <com.atlassian.plugin.manager.PluginsInEnableOrder: java.util.List get()> ==> <java.util.Collections: void <clinit>()>
STATIC edge: $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1) in <com.atlassian.plugin.manager.PluginsInEnableOrder: java.util.List get()> ==> <java.util.Collections: java.util.List unmodifiableList(java.util.List)>
CLINIT edge: $r12 = <com.atlassian.plugin.metadata.DefaultRequiredPluginValidator: org.slf4j.Logger log> in <com.atlassian.plugin.metadata.DefaultRequiredPluginValidator: java.util.Collection validate()> ==> <com.atlassian.plugin.metadata.DefaultRequiredPluginValidator: void <clinit>()>
CLINIT edge: $r8 = <com.atlassian.plugin.metadata.DefaultRequiredPluginValidator: org.slf4j.Logger log> in <com.atlassian.plugin.metadata.DefaultRequiredPluginValidator: java.util.Collection validate()> ==> <com.atlassian.plugin.metadata.DefaultRequiredPluginValidator: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.atlassian.plugin.util.Assertions: java.lang.Object notNull(java.lang.String,java.lang.Object)>("moduleClass", r1) in <com.atlassian.plugin.predicate.ModuleOfClassPredicate: void <init>(java.lang.Class)> ==> <com.atlassian.plugin.util.Assertions: java.lang.Object notNull(java.lang.String,java.lang.Object)>
CLINIT edge: $r5 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS> in <com.atlassian.plugin.instrumentation.SingleTimer: void close()> ==> <java.util.concurrent.TimeUnit: void <clinit>()>
STATIC edge: $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0) in <com.atlassian.plugin.instrumentation.SingleTimer: void close()> ==> <java.lang.Long: java.lang.Long valueOf(long)>
STATIC edge: $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1) in <com.atlassian.plugin.instrumentation.SingleTimer: void close()> ==> <java.lang.Long: java.lang.Long valueOf(long)>
CLINIT edge: $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1) in <com.atlassian.plugin.instrumentation.SingleTimer: void close()> ==> <java.lang.Long: void <clinit>()>
CLINIT edge: $r8 = <com.atlassian.plugin.instrumentation.SingleTimer: org.slf4j.Logger log> in <com.atlassian.plugin.instrumentation.SingleTimer: void close()> ==> <com.atlassian.plugin.instrumentation.SingleTimer: void <clinit>()>
CLINIT edge: $r0 = <com.atlassian.plugin.manager.StateTracker$State: com.atlassian.plugin.manager.StateTracker$State[] $VALUES> in <com.atlassian.plugin.manager.StateTracker$State: com.atlassian.plugin.manager.StateTracker$State[] values()> ==> <com.atlassian.plugin.manager.StateTracker$State: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lcom/atlassian/plugin/manager/StateTracker$State;", r0) in <com.atlassian.plugin.manager.StateTracker$State: com.atlassian.plugin.manager.StateTracker$State valueOf(java.lang.String)> ==> <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
CLINIT edge: $i0 = <com.atlassian.plugin.util.WaitUntil: int STARTUP_WAIT> in <com.atlassian.plugin.util.WaitUntil: boolean invoke(com.atlassian.plugin.util.WaitUntil$WaitCondition)> ==> <com.atlassian.plugin.util.WaitUntil: void <clinit>()>
STATIC edge: $z0 = staticinvoke <com.atlassian.plugin.util.WaitUntil: boolean invoke(com.atlassian.plugin.util.WaitUntil$WaitCondition,int)>(r0, $i0) in <com.atlassian.plugin.util.WaitUntil: boolean invoke(com.atlassian.plugin.util.WaitUntil$WaitCondition)> ==> <com.atlassian.plugin.util.WaitUntil: boolean invoke(com.atlassian.plugin.util.WaitUntil$WaitCondition,int)>
CLINIT edge: $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS> in <com.atlassian.plugin.util.WaitUntil: boolean invoke(com.atlassian.plugin.util.WaitUntil$WaitCondition,int)> ==> <java.util.concurrent.TimeUnit: void <clinit>()>
STATIC edge: $z0 = staticinvoke <com.atlassian.plugin.util.WaitUntil: boolean invoke(com.atlassian.plugin.util.WaitUntil$WaitCondition,int,java.util.concurrent.TimeUnit,int)>(r0, $i2, $r1, 1000) in <com.atlassian.plugin.util.WaitUntil: boolean invoke(com.atlassian.plugin.util.WaitUntil$WaitCondition,int)> ==> <com.atlassian.plugin.util.WaitUntil: boolean invoke(com.atlassian.plugin.util.WaitUntil$WaitCondition,int,java.util.concurrent.TimeUnit,int)>
CLINIT edge: $z0 = staticinvoke <com.atlassian.plugin.util.WaitUntil: boolean invoke(com.atlassian.plugin.util.WaitUntil$WaitCondition,int,java.util.concurrent.TimeUnit,int)>(r0, $i2, $r1, 1000) in <com.atlassian.plugin.util.WaitUntil: boolean invoke(com.atlassian.plugin.util.WaitUntil$WaitCondition,int)> ==> <com.atlassian.plugin.util.WaitUntil: void <clinit>()>
CLINIT edge: $r3 = <com.atlassian.plugin.util.WaitUntil: org.slf4j.Logger log> in <com.atlassian.plugin.util.WaitUntil: boolean invoke(com.atlassian.plugin.util.WaitUntil$WaitCondition,int,java.util.concurrent.TimeUnit,int)> ==> <com.atlassian.plugin.util.WaitUntil: void <clinit>()>
STATIC edge: staticinvoke <java.lang.Thread: void sleep(long)>($l4) in <com.atlassian.plugin.util.WaitUntil: boolean invoke(com.atlassian.plugin.util.WaitUntil$WaitCondition,int,java.util.concurrent.TimeUnit,int)> ==> <java.lang.Thread: void sleep(long)>
STATIC edge: $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l6) in <com.atlassian.plugin.util.WaitUntil: boolean invoke(com.atlassian.plugin.util.WaitUntil$WaitCondition,int,java.util.concurrent.TimeUnit,int)> ==> <java.lang.Long: java.lang.Long valueOf(long)>
STATIC edge: r1 = staticinvoke <io.atlassian.util.concurrent.Timeout: io.atlassian.util.concurrent.Timeout getMillisTimeout(long,java.util.concurrent.TimeUnit)>($l1, r0) in <com.atlassian.plugin.util.WaitUntil: boolean invoke(com.atlassian.plugin.util.WaitUntil$WaitCondition,int,java.util.concurrent.TimeUnit,int)> ==> <io.atlassian.util.concurrent.Timeout: io.atlassian.util.concurrent.Timeout getMillisTimeout(long,java.util.concurrent.TimeUnit)>
CLINIT edge: $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l6) in <com.atlassian.plugin.util.WaitUntil: boolean invoke(com.atlassian.plugin.util.WaitUntil$WaitCondition,int,java.util.concurrent.TimeUnit,int)> ==> <java.lang.Long: void <clinit>()>
CLINIT edge: $r6 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS> in <com.atlassian.plugin.util.WaitUntil: boolean invoke(com.atlassian.plugin.util.WaitUntil$WaitCondition,int,java.util.concurrent.TimeUnit,int)> ==> <java.util.concurrent.TimeUnit: void <clinit>()>
CLINIT edge: $l14 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <com.atlassian.plugin.manager.PluginEnabler$1: boolean isFinished()> ==> <java.lang.System: void <clinit>()>
STATIC edge: $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l10) in <com.atlassian.plugin.manager.PluginEnabler$1: boolean isFinished()> ==> <java.lang.Long: java.lang.Long valueOf(long)>
STATIC edge: $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(5L) in <com.atlassian.plugin.manager.PluginEnabler$1: boolean isFinished()> ==> <java.lang.Long: java.lang.Long valueOf(long)>
STATIC edge: $r6 = staticinvoke <com.atlassian.plugin.manager.PluginEnabler: org.slf4j.Logger access$000()>() in <com.atlassian.plugin.manager.PluginEnabler$1: boolean isFinished()> ==> <com.atlassian.plugin.manager.PluginEnabler: org.slf4j.Logger access$000()>
STATIC edge: l10 = staticinvoke <java.lang.Math: long max(long,long)>(0L, $l9) in <com.atlassian.plugin.manager.PluginEnabler$1: boolean isFinished()> ==> <java.lang.Math: long max(long,long)>
STATIC edge: $l9 = staticinvoke <java.lang.Math: long round(double)>($d1) in <com.atlassian.plugin.manager.PluginEnabler$1: boolean isFinished()> ==> <java.lang.Math: long round(double)>
STATIC edge: $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(30L) in <com.atlassian.plugin.manager.PluginEnabler$1: boolean isFinished()> ==> <java.lang.Long: java.lang.Long valueOf(long)>
STATIC edge: $r10 = staticinvoke <com.atlassian.plugin.manager.PluginEnabler: org.slf4j.Logger access$000()>() in <com.atlassian.plugin.manager.PluginEnabler$1: boolean isFinished()> ==> <com.atlassian.plugin.manager.PluginEnabler: org.slf4j.Logger access$000()>
STATIC edge: l16 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <com.atlassian.plugin.manager.PluginEnabler$1: boolean isFinished()> ==> <java.lang.System: long currentTimeMillis()>
STATIC edge: $z0 = staticinvoke <com.atlassian.plugin.util.PluginUtils: boolean isAtlassianDevMode()>() in <com.atlassian.plugin.manager.PluginEnabler$1: boolean isFinished()> ==> <com.atlassian.plugin.util.PluginUtils: boolean isAtlassianDevMode()>
STATIC edge: $r15 = staticinvoke <com.atlassian.plugin.manager.PluginEnabler: org.slf4j.Logger access$000()>() in <com.atlassian.plugin.manager.PluginEnabler$1: boolean isFinished()> ==> <com.atlassian.plugin.manager.PluginEnabler: org.slf4j.Logger access$000()>
STATIC edge: $l14 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <com.atlassian.plugin.manager.PluginEnabler$1: boolean isFinished()> ==> <java.lang.System: long currentTimeMillis()>
CLINIT edge: $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(5L) in <com.atlassian.plugin.manager.PluginEnabler$1: boolean isFinished()> ==> <java.lang.Long: void <clinit>()>
CLINIT edge: $r6 = staticinvoke <com.atlassian.plugin.manager.PluginEnabler: org.slf4j.Logger access$000()>() in <com.atlassian.plugin.manager.PluginEnabler$1: boolean isFinished()> ==> <com.atlassian.plugin.manager.PluginEnabler: void <clinit>()>
CLINIT edge: $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(30L) in <com.atlassian.plugin.manager.PluginEnabler$1: boolean isFinished()> ==> <java.lang.Long: void <clinit>()>
CLINIT edge: $r10 = staticinvoke <com.atlassian.plugin.manager.PluginEnabler: org.slf4j.Logger access$000()>() in <com.atlassian.plugin.manager.PluginEnabler$1: boolean isFinished()> ==> <com.atlassian.plugin.manager.PluginEnabler: void <clinit>()>
CLINIT edge: l16 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <com.atlassian.plugin.manager.PluginEnabler$1: boolean isFinished()> ==> <java.lang.System: void <clinit>()>
CLINIT edge: $z0 = staticinvoke <com.atlassian.plugin.util.PluginUtils: boolean isAtlassianDevMode()>() in <com.atlassian.plugin.manager.PluginEnabler$1: boolean isFinished()> ==> <com.atlassian.plugin.util.PluginUtils: void <clinit>()>
CLINIT edge: $r15 = staticinvoke <com.atlassian.plugin.manager.PluginEnabler: org.slf4j.Logger access$000()>() in <com.atlassian.plugin.manager.PluginEnabler$1: boolean isFinished()> ==> <com.atlassian.plugin.manager.PluginEnabler: void <clinit>()>
CLINIT edge: staticinvoke <com.atlassian.plugin.jmx.JmxUtil: boolean unregister(javax.management.ObjectName)>($r1) in <com.atlassian.plugin.jmx.AbstractJmxBridge: void unregister()> ==> <com.atlassian.plugin.jmx.JmxUtil: void <clinit>()>
STATIC edge: staticinvoke <com.atlassian.plugin.jmx.JmxUtil: boolean unregister(javax.management.ObjectName)>($r1) in <com.atlassian.plugin.jmx.AbstractJmxBridge: void unregister()> ==> <com.atlassian.plugin.jmx.JmxUtil: boolean unregister(javax.management.ObjectName)>
CLINIT edge: $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0) in <com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge$1: java.lang.Long getDateLoaded()> ==> <java.lang.Long: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0) in <com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge$1: java.lang.Long getDateLoaded()> ==> <java.lang.Long: java.lang.Long valueOf(long)>
CLINIT edge: $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0) in <com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge$1: java.lang.Long getDateInstalled()> ==> <java.lang.Long: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0) in <com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge$1: java.lang.Long getDateInstalled()> ==> <java.lang.Long: java.lang.Long valueOf(long)>
CLINIT edge: $r2 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge: com.atlassian.plugin.manager.DefaultPluginManager access$000(com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge)>($r1) in <com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge$1: boolean isEnabled()> ==> <com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge: com.atlassian.plugin.manager.DefaultPluginManager access$000(com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge)>($r1) in <com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge$1: boolean isEnabled()> ==> <com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge: com.atlassian.plugin.manager.DefaultPluginManager access$000(com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge)>
CLINIT edge: r8 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0) in <com.atlassian.plugin.jmx.JmxUtil: javax.management.ObjectName objectName(java.util.concurrent.atomic.AtomicInteger,java.lang.String)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $r4 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>("instance", r8, "type", r3) in <com.atlassian.plugin.jmx.JmxUtil: javax.management.ObjectName objectName(java.util.concurrent.atomic.AtomicInteger,java.lang.String)> ==> <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
STATIC edge: r8 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0) in <com.atlassian.plugin.jmx.JmxUtil: javax.management.ObjectName objectName(java.util.concurrent.atomic.AtomicInteger,java.lang.String)> ==> <java.lang.Integer: java.lang.String toString(int)>
CLINIT edge: $r6 = <com.atlassian.plugin.jmx.JmxUtil: org.slf4j.Logger log> in <com.atlassian.plugin.jmx.JmxUtil: javax.management.ObjectName objectName(java.util.concurrent.atomic.AtomicInteger,java.lang.String)> ==> <com.atlassian.plugin.jmx.JmxUtil: void <clinit>()>
CLINIT edge: $r1 = <com.atlassian.plugin.jmx.JmxUtil: org.slf4j.Logger log> in <com.atlassian.plugin.jmx.JmxUtil: javax.management.ObjectInstance register(java.lang.Object,javax.management.ObjectName)> ==> <com.atlassian.plugin.jmx.JmxUtil: void <clinit>()>
STATIC edge: $r2 = staticinvoke <java.lang.management.ManagementFactory: javax.management.MBeanServer getPlatformMBeanServer()>() in <com.atlassian.plugin.jmx.JmxUtil: javax.management.ObjectInstance register(java.lang.Object,javax.management.ObjectName)> ==> <java.lang.management.ManagementFactory: javax.management.MBeanServer getPlatformMBeanServer()>
CLINIT edge: $r6 = <com.atlassian.plugin.jmx.JmxUtil: org.slf4j.Logger log> in <com.atlassian.plugin.jmx.JmxUtil: javax.management.ObjectInstance register(java.lang.Object,javax.management.ObjectName)> ==> <com.atlassian.plugin.jmx.JmxUtil: void <clinit>()>
CLINIT edge: $r9 = <com.atlassian.plugin.jmx.JmxUtil: org.slf4j.Logger log> in <com.atlassian.plugin.jmx.JmxUtil: javax.management.ObjectInstance register(java.lang.Object,javax.management.ObjectName)> ==> <com.atlassian.plugin.jmx.JmxUtil: void <clinit>()>
CLINIT edge: $r12 = <com.atlassian.plugin.jmx.JmxUtil: org.slf4j.Logger log> in <com.atlassian.plugin.jmx.JmxUtil: javax.management.ObjectInstance register(java.lang.Object,javax.management.ObjectName)> ==> <com.atlassian.plugin.jmx.JmxUtil: void <clinit>()>
CLINIT edge: $r6 = <com.atlassian.plugin.jmx.JmxUtil: org.slf4j.Logger log> in <com.atlassian.plugin.jmx.JmxUtil: boolean unregister(javax.management.ObjectName)> ==> <com.atlassian.plugin.jmx.JmxUtil: void <clinit>()>
STATIC edge: $r0 = staticinvoke <java.lang.management.ManagementFactory: javax.management.MBeanServer getPlatformMBeanServer()>() in <com.atlassian.plugin.jmx.JmxUtil: boolean unregister(javax.management.ObjectName)> ==> <java.lang.management.ManagementFactory: javax.management.MBeanServer getPlatformMBeanServer()>
CLINIT edge: $r3 = <com.atlassian.plugin.jmx.JmxUtil: org.slf4j.Logger log> in <com.atlassian.plugin.jmx.JmxUtil: boolean unregister(javax.management.ObjectName)> ==> <com.atlassian.plugin.jmx.JmxUtil: void <clinit>()>
STATIC edge: $r1 = staticinvoke <com.atlassian.plugin.event.impl.DefaultPluginEventManager: com.atlassian.plugin.event.impl.ListenerMethodSelector[] defaultMethodSelectors()>() in <com.atlassian.plugin.event.impl.DefaultPluginEventManager: void <init>()> ==> <com.atlassian.plugin.event.impl.DefaultPluginEventManager: com.atlassian.plugin.event.impl.ListenerMethodSelector[] defaultMethodSelectors()>
STATIC edge: r2 = staticinvoke <com.atlassian.plugin.event.impl.DefaultPluginEventManager$lambda_new_0__180: com.atlassian.event.config.ListenerHandlersConfiguration bootstrap$(com.atlassian.plugin.event.impl.ListenerMethodSelector[])>(r1) in <com.atlassian.plugin.event.impl.DefaultPluginEventManager: void <init>(com.atlassian.plugin.event.impl.ListenerMethodSelector[])> ==> <com.atlassian.plugin.event.impl.DefaultPluginEventManager$lambda_new_0__180: com.atlassian.event.config.ListenerHandlersConfiguration bootstrap$(com.atlassian.plugin.event.impl.ListenerMethodSelector[])>
STATIC edge: $r1 = staticinvoke <com.atlassian.plugin.event.impl.DefaultPluginEventManager: com.atlassian.plugin.event.impl.ListenerMethodSelector[] defaultMethodSelectors()>() in <com.atlassian.plugin.event.impl.DefaultPluginEventManager: void <init>(com.atlassian.plugin.scope.ScopeManager)> ==> <com.atlassian.plugin.event.impl.DefaultPluginEventManager: com.atlassian.plugin.event.impl.ListenerMethodSelector[] defaultMethodSelectors()>
STATIC edge: $r2 = staticinvoke <com.atlassian.plugin.util.Assertions: java.lang.Object notNull(java.lang.String,java.lang.Object)>("eventPublisher", r1) in <com.atlassian.plugin.event.impl.DefaultPluginEventManager: void <init>(com.atlassian.event.api.EventPublisher)> ==> <com.atlassian.plugin.util.Assertions: java.lang.Object notNull(java.lang.String,java.lang.Object)>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.util.Assertions: java.lang.Object notNull(java.lang.String,java.lang.Object)>("listener", r1) in <com.atlassian.plugin.event.impl.DefaultPluginEventManager: void register(java.lang.Object)> ==> <com.atlassian.plugin.util.Assertions: java.lang.Object notNull(java.lang.String,java.lang.Object)>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.util.Assertions: java.lang.Object notNull(java.lang.String,java.lang.Object)>("listener", r1) in <com.atlassian.plugin.event.impl.DefaultPluginEventManager: void unregister(java.lang.Object)> ==> <com.atlassian.plugin.util.Assertions: java.lang.Object notNull(java.lang.String,java.lang.Object)>
STATIC edge: staticinvoke <com.atlassian.plugin.util.Assertions: java.lang.Object notNull(java.lang.String,java.lang.Object)>("event", r0) in <com.atlassian.plugin.event.impl.DefaultPluginEventManager: void broadcast(java.lang.Object)> ==> <com.atlassian.plugin.util.Assertions: java.lang.Object notNull(java.lang.String,java.lang.Object)>
CLINIT edge: $r0 = <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: java.io.File REGISTRY_HOME_DIRECTORY> in <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$InstrumentRegistryProxy$1: java.io.File getRegistryHomeDirectory()> ==> <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: void <clinit>()>
CLINIT edge: staticinvoke <com.atlassian.plugin.jmx.JmxUtil: boolean unregister(javax.management.ObjectName)>($r6) in <com.atlassian.plugin.jmx.AbstractJmxBridge$WeakMXBeanInvocationHandler: java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])> ==> <com.atlassian.plugin.jmx.JmxUtil: void <clinit>()>
STATIC edge: staticinvoke <com.atlassian.plugin.jmx.JmxUtil: boolean unregister(javax.management.ObjectName)>($r6) in <com.atlassian.plugin.jmx.AbstractJmxBridge$WeakMXBeanInvocationHandler: java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])> ==> <com.atlassian.plugin.jmx.JmxUtil: boolean unregister(javax.management.ObjectName)>
STATIC edge: $r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1) in <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler: java.util.List getInvokers(java.lang.Object)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
STATIC edge: $r6 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList(java.lang.Iterable)>($r5) in <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler: java.util.List getInvokers(java.lang.Object)> ==> <com.google.common.collect.Lists: java.util.ArrayList newArrayList(java.lang.Iterable)>
STATIC edge: $r5 = staticinvoke <com.google.common.collect.Iterables: java.lang.Iterable transform(java.lang.Iterable,com.google.common.base.Function)>(r3, $r4) in <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler: java.util.List getInvokers(java.lang.Object)> ==> <com.google.common.collect.Iterables: java.lang.Iterable transform(java.lang.Iterable,com.google.common.base.Function)>
STATIC edge: $r4 = staticinvoke <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler$lambda_getInvokers_0__150: com.google.common.base.Function bootstrap$(com.atlassian.plugin.event.impl.MethodSelectorListenerHandler,java.lang.Object)>(r0, r1) in <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler: java.util.List getInvokers(java.lang.Object)> ==> <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler$lambda_getInvokers_0__150: com.google.common.base.Function bootstrap$(com.atlassian.plugin.event.impl.MethodSelectorListenerHandler,java.lang.Object)>
STATIC edge: $z0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(r1) in <com.atlassian.plugin.event.impl.MethodNameListenerMethodSelector: void <init>(java.lang.String)> ==> <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>
STATIC edge: $r3 = staticinvoke <com.google.common.collect.Sets: java.util.HashSet newHashSet(java.lang.Object[])>($r2) in <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler$1: java.util.Set getSupportedEventTypes()> ==> <com.google.common.collect.Sets: java.util.HashSet newHashSet(java.lang.Object[])>
STATIC edge: $r4 = staticinvoke <java.util.Optional: java.util.Optional ofNullable(java.lang.Object)>(r3) in <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler$1: java.util.Optional getScope()> ==> <java.util.Optional: java.util.Optional ofNullable(java.lang.Object)>
STATIC edge: $r7 = staticinvoke <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler$1$lambda_getScope_0__161: java.util.function.Predicate bootstrap$()>() in <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler$1: java.util.Optional getScope()> ==> <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler$1$lambda_getScope_0__161: java.util.function.Predicate bootstrap$()>
STATIC edge: $r5 = staticinvoke <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler$1$scope__149: java.util.function.Function bootstrap$()>() in <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler$1: java.util.Optional getScope()> ==> <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler$1$scope__149: java.util.function.Function bootstrap$()>
CLINIT edge: $r0 = <com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$MatchType: com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$MatchType[] $VALUES> in <com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$MatchType: com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$MatchType[] values()> ==> <com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$MatchType: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lcom/atlassian/plugin/predicate/PluginKeyPatternsPredicate$MatchType;", r0) in <com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$MatchType: com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$MatchType valueOf(java.lang.String)> ==> <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
STATIC edge: $r4 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>($r3) in <com.atlassian.plugin.predicate.PluginKeyPatternsPredicate: void <init>(com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$MatchType,java.util.Collection)> ==> <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
STATIC edge: $r1 = staticinvoke <com.atlassian.plugin.util.RegularExpressions: java.lang.String anyOf(java.util.Collection)>(r0) in <com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$MatchType$2: java.lang.String buildRegularExpression(java.util.Collection)> ==> <com.atlassian.plugin.util.RegularExpressions: java.lang.String anyOf(java.util.Collection)>
STATIC edge: $r1 = staticinvoke <com.atlassian.plugin.util.RegularExpressions: java.lang.String anyOf(java.util.Collection)>(r0) in <com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$MatchType$1: java.lang.String buildRegularExpression(java.util.Collection)> ==> <com.atlassian.plugin.util.RegularExpressions: java.lang.String anyOf(java.util.Collection)>
CLINIT edge: $z0 = staticinvoke <com.atlassian.plugin.loaders.RosterFileScanner: boolean isKnownRosterFileFormat(java.io.File)>(r1) in <com.atlassian.plugin.loaders.RosterFileScanner: void <init>(java.io.File)> ==> <com.atlassian.plugin.loaders.RosterFileScanner: void <clinit>()>
STATIC edge: $r4 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>() in <com.atlassian.plugin.loaders.RosterFileScanner: void <init>(java.io.File)> ==> <java.util.Collections: java.util.Map emptyMap()>
STATIC edge: staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object,java.lang.Object)>($z0, "Roster file \'%s\' does not end with \'%s\'", r1, $r3) in <com.atlassian.plugin.loaders.RosterFileScanner: void <init>(java.io.File)> ==> <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object,java.lang.Object)>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.loaders.RosterFileScanner: java.lang.String getListSuffix()>() in <com.atlassian.plugin.loaders.RosterFileScanner: void <init>(java.io.File)> ==> <com.atlassian.plugin.loaders.RosterFileScanner: java.lang.String getListSuffix()>
STATIC edge: $z0 = staticinvoke <com.atlassian.plugin.loaders.RosterFileScanner: boolean isKnownRosterFileFormat(java.io.File)>(r1) in <com.atlassian.plugin.loaders.RosterFileScanner: void <init>(java.io.File)> ==> <com.atlassian.plugin.loaders.RosterFileScanner: boolean isKnownRosterFileFormat(java.io.File)>
STATIC edge: staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1) in <com.atlassian.plugin.loaders.RosterFileScanner: void <init>(java.io.File)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
CLINIT edge: $r4 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>() in <com.atlassian.plugin.loaders.RosterFileScanner: void <init>(java.io.File)> ==> <java.util.Collections: void <clinit>()>
CLINIT edge: $r33 = new java.io.File in <com.atlassian.plugin.loaders.RosterFileScanner: java.util.Collection scan()> ==> <java.io.File: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.util.Collections: java.util.List emptyList()>() in <com.atlassian.plugin.loaders.RosterFileScanner: java.util.Collection scan()> ==> <java.util.Collections: java.util.List emptyList()>
STATIC edge: r5 = staticinvoke <org.apache.commons.io.FileUtils: java.util.List readLines(java.io.File)>($r4) in <com.atlassian.plugin.loaders.RosterFileScanner: java.util.Collection scan()> ==> <org.apache.commons.io.FileUtils: java.util.List readLines(java.io.File)>
CLINIT edge: $r3 = staticinvoke <java.util.Collections: java.util.List emptyList()>() in <com.atlassian.plugin.loaders.RosterFileScanner: java.util.Collection scan()> ==> <java.util.Collections: void <clinit>()>
CLINIT edge: $r25 = <com.atlassian.plugin.loaders.RosterFileScanner: org.slf4j.Logger log> in <com.atlassian.plugin.loaders.RosterFileScanner: java.util.Collection scan()> ==> <com.atlassian.plugin.loaders.RosterFileScanner: void <clinit>()>
CLINIT edge: $r3 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>($r2) in <com.atlassian.plugin.loaders.RosterFileScanner: java.util.Collection getDeploymentUnits()> ==> <java.util.Collections: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>($r2) in <com.atlassian.plugin.loaders.RosterFileScanner: java.util.Collection getDeploymentUnits()> ==> <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>
CLINIT edge: $r1 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>() in <com.atlassian.plugin.loaders.RosterFileScanner: void reset()> ==> <java.util.Collections: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>() in <com.atlassian.plugin.loaders.RosterFileScanner: void reset()> ==> <java.util.Collections: java.util.Map emptyMap()>
CLINIT edge: $r2 = staticinvoke <com.atlassian.plugin.loaders.RosterFileScanner: java.lang.String getListSuffix()>() in <com.atlassian.plugin.loaders.RosterFileScanner: boolean isKnownRosterFileFormat(java.io.File)> ==> <com.atlassian.plugin.loaders.RosterFileScanner: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.atlassian.plugin.loaders.RosterFileScanner: java.lang.String getListSuffix()>() in <com.atlassian.plugin.loaders.RosterFileScanner: boolean isKnownRosterFileFormat(java.io.File)> ==> <com.atlassian.plugin.loaders.RosterFileScanner: java.lang.String getListSuffix()>
STATIC edge: $r2 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.store.DefaultStoredPluginStateAccessor: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore)> ==> <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
CLINIT edge: $r2 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(r1) in <com.atlassian.plugin.predicate.ModuleDescriptorOfClassPredicate: void <init>(java.lang.Class)> ==> <java.util.Collections: void <clinit>()>
STATIC edge: $r2 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(r1) in <com.atlassian.plugin.predicate.ModuleDescriptorOfClassPredicate: void <init>(java.lang.Class)> ==> <java.util.Collections: java.util.Set singleton(java.lang.Object)>
STATIC edge: staticinvoke <com.atlassian.plugin.util.Assertions: java.lang.Object notNull(java.lang.String,java.lang.Object)>("moduleDescriptorClasses", r1) in <com.atlassian.plugin.predicate.ModuleDescriptorOfClassPredicate: void <init>(java.lang.Class[])> ==> <com.atlassian.plugin.util.Assertions: java.lang.Object notNull(java.lang.String,java.lang.Object)>
STATIC edge: $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1) in <com.atlassian.plugin.predicate.ModuleDescriptorOfClassPredicate: void <init>(java.lang.Class[])> ==> <java.util.Arrays: java.util.List asList(java.lang.Object[])>
STATIC edge: $r5 = staticinvoke <com.atlassian.plugin.predicate.ModuleDescriptorOfClassPredicate$lambda_test_0__20: java.util.function.Predicate bootstrap$(com.atlassian.plugin.ModuleDescriptor)>(r0) in <com.atlassian.plugin.predicate.ModuleDescriptorOfClassPredicate: boolean test(com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.predicate.ModuleDescriptorOfClassPredicate$lambda_test_0__20: java.util.function.Predicate bootstrap$(com.atlassian.plugin.ModuleDescriptor)>
STATIC edge: $r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1) in <com.atlassian.plugin.loaders.ForwardingPluginLoader: void <init>(com.atlassian.plugin.loaders.PluginLoader)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
CLINIT edge: $r3 = <com.atlassian.plugin.loaders.ForwardingPluginLoader: org.slf4j.Logger log> in <com.atlassian.plugin.loaders.ForwardingPluginLoader: void discardPlugin(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.loaders.ForwardingPluginLoader: void <clinit>()>
CLINIT edge: $r0 = <com.atlassian.plugin.util.PluginFrameworkUtils: io.atlassian.util.concurrent.LazyReference pluginFrameworkVersionRef> in <com.atlassian.plugin.util.PluginFrameworkUtils: java.lang.String getPluginFrameworkVersion()> ==> <com.atlassian.plugin.util.PluginFrameworkUtils: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1) in <com.atlassian.plugin.parsers.ModuleReader: void <init>(org.dom4j.Element)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
STATIC edge: staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z1, "Module elements cannot be text nodes!") in <com.atlassian.plugin.parsers.ModuleReader: void <init>(org.dom4j.Element)> ==> <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>
CLINIT edge: $r0 = staticinvoke <java.util.Collections: java.util.Set emptySet()>() in <com.atlassian.plugin.manager.ApplicationDefinedPluginsProvider: java.util.Set lambda$static$0(java.lang.Iterable)> ==> <java.util.Collections: void <clinit>()>
STATIC edge: $r0 = staticinvoke <java.util.Collections: java.util.Set emptySet()>() in <com.atlassian.plugin.manager.ApplicationDefinedPluginsProvider: java.util.Set lambda$static$0(java.lang.Iterable)> ==> <java.util.Collections: java.util.Set emptySet()>
STATIC edge: staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "plugin") in <com.atlassian.plugin.metadata.DefaultPluginMetadataManager: boolean isUserInstalled(com.atlassian.plugin.Plugin)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>
STATIC edge: staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "plugin") in <com.atlassian.plugin.metadata.DefaultPluginMetadataManager: boolean isOptional(com.atlassian.plugin.Plugin)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>
STATIC edge: staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "moduleDescriptor") in <com.atlassian.plugin.metadata.DefaultPluginMetadataManager: boolean isOptional(com.atlassian.plugin.ModuleDescriptor)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>
CLINIT edge: $r2 = new java.io.File in <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: void <init>(java.lang.String)> ==> <java.io.File: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.io.tmpdir") in <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: void <init>(java.lang.String)> ==> <java.lang.System: java.lang.String getProperty(java.lang.String)>
CLINIT edge: $r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.io.tmpdir") in <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: void <init>(java.lang.String)> ==> <java.lang.System: void <clinit>()>
CLINIT edge: $r2 = staticinvoke <java.util.Collections: java.util.Set emptySet()>() in <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: void <init>(java.lang.String,java.io.File,com.atlassian.plugin.parsers.XmlDescriptorParserFactory)> ==> <java.util.Collections: void <clinit>()>
STATIC edge: staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "Plugin descriptor name cannot be null or blank") in <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: void <init>(java.lang.String,java.io.File,com.atlassian.plugin.parsers.XmlDescriptorParserFactory)> ==> <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>
STATIC edge: $z0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isNotBlank(java.lang.CharSequence)>(r6) in <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: void <init>(java.lang.String,java.io.File,com.atlassian.plugin.parsers.XmlDescriptorParserFactory)> ==> <org.apache.commons.lang3.StringUtils: boolean isNotBlank(java.lang.CharSequence)>
STATIC edge: $r7 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r6) in <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: void <init>(java.lang.String,java.io.File,com.atlassian.plugin.parsers.XmlDescriptorParserFactory)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
STATIC edge: $r4 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r3) in <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: void <init>(java.lang.String,java.io.File,com.atlassian.plugin.parsers.XmlDescriptorParserFactory)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
STATIC edge: $r2 = staticinvoke <java.util.Collections: java.util.Set emptySet()>() in <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: void <init>(java.lang.String,java.io.File,com.atlassian.plugin.parsers.XmlDescriptorParserFactory)> ==> <java.util.Collections: java.util.Set emptySet()>
CLINIT edge: $r6 = staticinvoke <java.util.Collections: java.util.Set emptySet()>() in <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: com.atlassian.plugin.Plugin create(com.atlassian.plugin.PluginArtifact,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.Collections: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r23) in <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: com.atlassian.plugin.Plugin create(com.atlassian.plugin.PluginArtifact,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r23) in <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: com.atlassian.plugin.Plugin create(com.atlassian.plugin.PluginArtifact,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>
STATIC edge: $r8 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() in <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: com.atlassian.plugin.Plugin create(com.atlassian.plugin.PluginArtifact,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.lang.Thread: java.lang.Thread currentThread()>
STATIC edge: $r6 = staticinvoke <java.util.Collections: java.util.Set emptySet()>() in <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: com.atlassian.plugin.Plugin create(com.atlassian.plugin.PluginArtifact,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.Collections: java.util.Set emptySet()>
STATIC edge: staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "The module descriptor factory must not be null") in <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: com.atlassian.plugin.Plugin create(com.atlassian.plugin.PluginArtifact,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>
STATIC edge: staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "The deployment unit must not be null") in <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: com.atlassian.plugin.Plugin create(com.atlassian.plugin.PluginArtifact,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>
CLINIT edge: $r5 = staticinvoke <java.util.Collections: java.util.Set emptySet()>() in <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: com.atlassian.plugin.ModuleDescriptor createModule(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.Collections: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r12) in <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: com.atlassian.plugin.ModuleDescriptor createModule(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r12) in <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: com.atlassian.plugin.ModuleDescriptor createModule(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>
STATIC edge: $r5 = staticinvoke <java.util.Collections: java.util.Set emptySet()>() in <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: com.atlassian.plugin.ModuleDescriptor createModule(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.Collections: java.util.Set emptySet()>
CLINIT edge: $r3 = new java.io.File in <com.atlassian.plugin.classloader.PluginClassLoader: void <init>(java.io.File,java.lang.ClassLoader)> ==> <java.io.File: void <clinit>()>
STATIC edge: $r4 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.io.tmpdir") in <com.atlassian.plugin.classloader.PluginClassLoader: void <init>(java.io.File,java.lang.ClassLoader)> ==> <java.lang.System: java.lang.String getProperty(java.lang.String)>
CLINIT edge: $r4 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.io.tmpdir") in <com.atlassian.plugin.classloader.PluginClassLoader: void <init>(java.io.File,java.lang.ClassLoader)> ==> <java.lang.System: void <clinit>()>
CLINIT edge: $r11 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Temp directory should exist, %s", $r10) in <com.atlassian.plugin.classloader.PluginClassLoader: void <init>(java.io.File,java.lang.ClassLoader,java.io.File)> ==> <java.lang.String: void <clinit>()>
STATIC edge: $r11 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Temp directory should exist, %s", $r10) in <com.atlassian.plugin.classloader.PluginClassLoader: void <init>(java.io.File,java.lang.ClassLoader,java.io.File)> ==> <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
STATIC edge: $r4 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r3) in <com.atlassian.plugin.classloader.PluginClassLoader: void <init>(java.io.File,java.lang.ClassLoader,java.io.File)> ==> <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
STATIC edge: staticinvoke <org.apache.commons.io.FileUtils: boolean deleteQuietly(java.io.File)>(r4) in <com.atlassian.plugin.classloader.PluginClassLoader: void close()> ==> <org.apache.commons.io.FileUtils: boolean deleteQuietly(java.io.File)>
CLINIT edge: $r1 = new com.atlassian.plugin.JarPluginArtifact in <com.atlassian.plugin.impl.DefaultDynamicPlugin: void <init>(com.atlassian.plugin.loaders.classloading.DeploymentUnit,com.atlassian.plugin.classloader.PluginClassLoader)> ==> <com.atlassian.plugin.JarPluginArtifact: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1) in <com.atlassian.plugin.impl.DefaultDynamicPlugin: void <init>(com.atlassian.plugin.PluginArtifact,com.atlassian.plugin.classloader.PluginClassLoader)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
STATIC edge: $r5 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r4) in <com.atlassian.plugin.impl.DefaultDynamicPlugin: void <init>(com.atlassian.plugin.PluginArtifact,com.atlassian.plugin.classloader.PluginClassLoader)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
STATIC edge: $r1 = staticinvoke <com.atlassian.plugin.manager.PluginPersistentState: com.atlassian.plugin.manager.PluginPersistentState$Builder builder()>() in <com.atlassian.plugin.manager.store.MemoryPluginPersistentStateStore: void <init>()> ==> <com.atlassian.plugin.manager.PluginPersistentState: com.atlassian.plugin.manager.PluginPersistentState$Builder builder()>
STATIC edge: $r1 = staticinvoke <io.atlassian.util.concurrent.CopyOnWriteMap: io.atlassian.util.concurrent.CopyOnWriteMap$Builder builder()>() in <com.atlassian.plugin.DefaultModuleDescriptorFactory: void <init>(com.atlassian.plugin.hostcontainer.HostContainer)> ==> <io.atlassian.util.concurrent.CopyOnWriteMap: io.atlassian.util.concurrent.CopyOnWriteMap$Builder builder()>
CLINIT edge: r7 = staticinvoke <java.util.Collections: java.util.List emptyList()>() in <com.atlassian.plugin.DefaultModuleDescriptorFactory: void setPermittedModuleKeys(java.util.List)> ==> <java.util.Collections: void <clinit>()>
STATIC edge: r7 = staticinvoke <java.util.Collections: java.util.List emptyList()>() in <com.atlassian.plugin.DefaultModuleDescriptorFactory: void setPermittedModuleKeys(java.util.List)> ==> <java.util.Collections: java.util.List emptyList()>
STATIC edge: $r2 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.Callable callable(java.lang.Runnable)>(r1) in <com.atlassian.plugin.util.ContextClassLoaderSwitchingUtil: void runInContext(java.lang.ClassLoader,java.lang.Runnable)> ==> <java.util.concurrent.Executors: java.util.concurrent.Callable callable(java.lang.Runnable)>
STATIC edge: staticinvoke <com.atlassian.plugin.util.ContextClassLoaderSwitchingUtil: java.lang.Object runInContext(java.lang.ClassLoader,java.util.concurrent.Callable)>(r0, $r2) in <com.atlassian.plugin.util.ContextClassLoaderSwitchingUtil: void runInContext(java.lang.ClassLoader,java.lang.Runnable)> ==> <com.atlassian.plugin.util.ContextClassLoaderSwitchingUtil: java.lang.Object runInContext(java.lang.ClassLoader,java.util.concurrent.Callable)>
CLINIT edge: staticinvoke <com.atlassian.plugin.util.ClassLoaderStack: void push(java.lang.ClassLoader)>(r0) in <com.atlassian.plugin.util.ContextClassLoaderSwitchingUtil: java.lang.Object runInContext(java.lang.ClassLoader,java.util.concurrent.Callable)> ==> <com.atlassian.plugin.util.ClassLoaderStack: void <clinit>()>
STATIC edge: staticinvoke <com.atlassian.plugin.util.ClassLoaderStack: java.lang.ClassLoader pop()>() in <com.atlassian.plugin.util.ContextClassLoaderSwitchingUtil: java.lang.Object runInContext(java.lang.ClassLoader,java.util.concurrent.Callable)> ==> <com.atlassian.plugin.util.ClassLoaderStack: java.lang.ClassLoader pop()>
STATIC edge: staticinvoke <com.atlassian.plugin.util.ClassLoaderStack: java.lang.ClassLoader pop()>() in <com.atlassian.plugin.util.ContextClassLoaderSwitchingUtil: java.lang.Object runInContext(java.lang.ClassLoader,java.util.concurrent.Callable)> ==> <com.atlassian.plugin.util.ClassLoaderStack: java.lang.ClassLoader pop()>
STATIC edge: staticinvoke <com.atlassian.plugin.util.ClassLoaderStack: void push(java.lang.ClassLoader)>(r0) in <com.atlassian.plugin.util.ContextClassLoaderSwitchingUtil: java.lang.Object runInContext(java.lang.ClassLoader,java.util.concurrent.Callable)> ==> <com.atlassian.plugin.util.ClassLoaderStack: void push(java.lang.ClassLoader)>
CLINIT edge: staticinvoke <com.atlassian.plugin.util.ClassLoaderStack: java.lang.ClassLoader pop()>() in <com.atlassian.plugin.util.ContextClassLoaderSwitchingUtil: java.lang.Object runInContext(java.lang.ClassLoader,java.util.concurrent.Callable)> ==> <com.atlassian.plugin.util.ClassLoaderStack: void <clinit>()>
STATIC edge: $r1 = staticinvoke <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder create()>() in <com.atlassian.plugin.manager.store.LoadOnlyPluginPersistentStateStore: void <init>()> ==> <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder create()>
CLINIT edge: $r4 = <com.atlassian.plugin.classloader.DelegationClassLoader: org.slf4j.Logger log> in <com.atlassian.plugin.classloader.DelegationClassLoader: void setDelegateClassLoader(java.lang.ClassLoader)> ==> <com.atlassian.plugin.classloader.DelegationClassLoader: void <clinit>()>
STATIC edge: $r2 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "Can\'t set the delegation target to null") in <com.atlassian.plugin.classloader.DelegationClassLoader: void setDelegateClassLoader(java.lang.ClassLoader)> ==> <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>
CLINIT edge: $l0 = <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: long DESCRIPTOR_TIMEOUT_SEC> in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: void <init>(com.atlassian.plugin.PluginAccessor,com.atlassian.plugin.event.PluginEventManager,com.atlassian.plugin.PluginController)> ==> <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: void <clinit>()>
STATIC edge: staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r12) in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: void <init>(com.atlassian.plugin.PluginAccessor,com.atlassian.plugin.event.PluginEventManager,com.atlassian.plugin.PluginController)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
STATIC edge: $r7 = staticinvoke <com.google.common.cache.CacheBuilder: com.google.common.cache.CacheBuilder newBuilder()>() in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: void <init>(com.atlassian.plugin.PluginAccessor,com.atlassian.plugin.event.PluginEventManager,com.atlassian.plugin.PluginController)> ==> <com.google.common.cache.CacheBuilder: com.google.common.cache.CacheBuilder newBuilder()>
STATIC edge: $r2 = staticinvoke <com.google.common.cache.CacheBuilder: com.google.common.cache.CacheBuilder newBuilder()>() in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: void <init>(com.atlassian.plugin.PluginAccessor,com.atlassian.plugin.event.PluginEventManager,com.atlassian.plugin.PluginController)> ==> <com.google.common.cache.CacheBuilder: com.google.common.cache.CacheBuilder newBuilder()>
CLINIT edge: $r14 = new com.atlassian.plugin.manager.SafeModuleExtractor in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: void <init>(com.atlassian.plugin.PluginAccessor,com.atlassian.plugin.event.PluginEventManager,com.atlassian.plugin.PluginController)> ==> <com.atlassian.plugin.manager.SafeModuleExtractor: void <clinit>()>
CLINIT edge: $r3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS> in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: void <init>(com.atlassian.plugin.PluginAccessor,com.atlassian.plugin.event.PluginEventManager,com.atlassian.plugin.PluginController)> ==> <java.util.concurrent.TimeUnit: void <clinit>()>
CLINIT edge: $r0 = staticinvoke <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: com.atlassian.plugin.instrumentation.PluginSystemInstrumentation instance()>() in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: java.util.List getEnabledModuleDescriptorsByClass(java.lang.Class)> ==> <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: void <clinit>()>
STATIC edge: $r0 = staticinvoke <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: com.atlassian.plugin.instrumentation.PluginSystemInstrumentation instance()>() in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: java.util.List getEnabledModuleDescriptorsByClass(java.lang.Class)> ==> <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: com.atlassian.plugin.instrumentation.PluginSystemInstrumentation instance()>
CLINIT edge: $r0 = staticinvoke <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: com.atlassian.plugin.instrumentation.PluginSystemInstrumentation instance()>() in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: java.util.List getEnabledModulesByClass(java.lang.Class)> ==> <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: void <clinit>()>
STATIC edge: $r0 = staticinvoke <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: com.atlassian.plugin.instrumentation.PluginSystemInstrumentation instance()>() in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: java.util.List getEnabledModulesByClass(java.lang.Class)> ==> <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: com.atlassian.plugin.instrumentation.PluginSystemInstrumentation instance()>
CLINIT edge: $r3 = staticinvoke <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: java.util.List access$200(com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor,java.lang.Class)>($r2, r1) in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor$ByModuleClassCacheLoader: java.util.List load(java.lang.Class)> ==> <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: void <clinit>()>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: java.util.List access$200(com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor,java.lang.Class)>($r2, r1) in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor$ByModuleClassCacheLoader: java.util.List load(java.lang.Class)> ==> <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: java.util.List access$200(com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor,java.lang.Class)>
STATIC edge: $r3 = staticinvoke <com.google.common.collect.Sets: java.util.HashSet newHashSet(java.lang.Object[])>($r1) in <com.atlassian.plugin.factories.XmlDynamicPluginFactory: void <init>(com.atlassian.plugin.Application)> ==> <com.google.common.collect.Sets: java.util.HashSet newHashSet(java.lang.Object[])>
CLINIT edge: $r6 = <com.atlassian.plugin.factories.XmlDynamicPluginFactory: org.slf4j.Logger log> in <com.atlassian.plugin.factories.XmlDynamicPluginFactory: java.lang.String canCreate(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.factories.XmlDynamicPluginFactory: void <clinit>()>
STATIC edge: staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "The plugin artifact must not be null") in <com.atlassian.plugin.factories.XmlDynamicPluginFactory: com.atlassian.plugin.Plugin create(com.atlassian.plugin.PluginArtifact,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>
STATIC edge: staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "The module descriptor factory must not be null") in <com.atlassian.plugin.factories.XmlDynamicPluginFactory: com.atlassian.plugin.Plugin create(com.atlassian.plugin.PluginArtifact,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>
STATIC edge: $r2 = staticinvoke <com.atlassian.plugin.util.ClassLoaderUtils: java.lang.Class loadClass(java.lang.String,java.lang.Class)>(r0, r1) in <com.atlassian.plugin.impl.XmlDynamicPlugin: java.lang.Class loadClass(java.lang.String,java.lang.Class)> ==> <com.atlassian.plugin.util.ClassLoaderUtils: java.lang.Class loadClass(java.lang.String,java.lang.Class)>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.util.ClassLoaderUtils: java.net.URL getResource(java.lang.String,java.lang.Class)>(r0, $r2) in <com.atlassian.plugin.impl.XmlDynamicPlugin: java.net.URL getResource(java.lang.String)> ==> <com.atlassian.plugin.util.ClassLoaderUtils: java.net.URL getResource(java.lang.String,java.lang.Class)>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.util.ClassLoaderUtils: java.io.InputStream getResourceAsStream(java.lang.String,java.lang.Class)>(r0, $r2) in <com.atlassian.plugin.impl.XmlDynamicPlugin: java.io.InputStream getResourceAsStream(java.lang.String)> ==> <com.atlassian.plugin.util.ClassLoaderUtils: java.io.InputStream getResourceAsStream(java.lang.String,java.lang.Class)>
CLINIT edge: $z0 = staticinvoke <java.lang.Boolean: boolean getBoolean(java.lang.String)>("EventListenerModuleDescriptor.Fallback.Mode") in <com.atlassian.plugin.eventlistener.descriptors.EventListenerModuleDescriptor: void enabled()> ==> <java.lang.Boolean: void <clinit>()>
STATIC edge: $z0 = staticinvoke <java.lang.Boolean: boolean getBoolean(java.lang.String)>("EventListenerModuleDescriptor.Fallback.Mode") in <com.atlassian.plugin.eventlistener.descriptors.EventListenerModuleDescriptor: void enabled()> ==> <java.lang.Boolean: boolean getBoolean(java.lang.String)>
CLINIT edge: $z0 = staticinvoke <java.lang.Boolean: boolean getBoolean(java.lang.String)>("EventListenerModuleDescriptor.Fallback.Mode") in <com.atlassian.plugin.eventlistener.descriptors.EventListenerModuleDescriptor: void disabled()> ==> <java.lang.Boolean: void <clinit>()>
STATIC edge: $z0 = staticinvoke <java.lang.Boolean: boolean getBoolean(java.lang.String)>("EventListenerModuleDescriptor.Fallback.Mode") in <com.atlassian.plugin.eventlistener.descriptors.EventListenerModuleDescriptor: void disabled()> ==> <java.lang.Boolean: boolean getBoolean(java.lang.String)>
CLINIT edge: $r7 = <com.atlassian.plugin.util.zip.FileUnzipper: org.slf4j.Logger log> in <com.atlassian.plugin.util.zip.FileUnzipper: java.io.File unzipFileInArchive(java.lang.String)> ==> <com.atlassian.plugin.util.zip.FileUnzipper: void <clinit>()>
STATIC edge: $z1 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(r3) in <com.atlassian.plugin.util.zip.FileUnzipper: java.io.File unzipFileInArchive(java.lang.String)> ==> <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>
CLINIT edge: $r7 = <com.atlassian.plugin.util.zip.FileUnzipper: org.slf4j.Logger log> in <com.atlassian.plugin.util.zip.FileUnzipper: java.io.File unzipFileInArchive(java.lang.String)> ==> <com.atlassian.plugin.util.zip.AbstractUnzipper: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>($r2) in <com.atlassian.plugin.util.zip.StreamUnzipper: void unzip()> ==> <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>($r9) in <com.atlassian.plugin.util.zip.StreamUnzipper: void unzip()> ==> <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>
STATIC edge: $z0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isNotEmpty(java.lang.CharSequence)>(r12) in <com.atlassian.plugin.util.zip.StreamUnzipper: java.io.File unzipFileInArchive(java.lang.String)> ==> <org.apache.commons.lang3.StringUtils: boolean isNotEmpty(java.lang.CharSequence)>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>($r9) in <com.atlassian.plugin.util.zip.StreamUnzipper: java.io.File unzipFileInArchive(java.lang.String)> ==> <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>($r2) in <com.atlassian.plugin.util.zip.StreamUnzipper: java.io.File unzipFileInArchive(java.lang.String)> ==> <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>
STATIC edge: staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "The list of plugin factories must be specified") in <com.atlassian.plugin.loaders.ScanningPluginLoader: void <init>(com.atlassian.plugin.loaders.classloading.Scanner,java.util.List,com.atlassian.plugin.PluginArtifactFactory,com.atlassian.plugin.event.PluginEventManager)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>
STATIC edge: staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r5, "The scanner must be specified") in <com.atlassian.plugin.loaders.ScanningPluginLoader: void <init>(com.atlassian.plugin.loaders.classloading.Scanner,java.util.List,com.atlassian.plugin.PluginArtifactFactory,com.atlassian.plugin.event.PluginEventManager)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>
STATIC edge: staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r3, "The event manager must be specified") in <com.atlassian.plugin.loaders.ScanningPluginLoader: void <init>(com.atlassian.plugin.loaders.classloading.Scanner,java.util.List,com.atlassian.plugin.PluginArtifactFactory,com.atlassian.plugin.event.PluginEventManager)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>
CLINIT edge: $r11 = <com.atlassian.plugin.loaders.ScanningPluginLoader: org.slf4j.Logger log> in <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.ScanningPluginLoader: void <clinit>()>
STATIC edge: $r10 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.util.Collection)>($r9) in <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.util.Collection)>
CLINIT edge: $r7 = <com.atlassian.plugin.loaders.ScanningPluginLoader: org.slf4j.Logger log> in <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.ScanningPluginLoader: void <clinit>()>
STATIC edge: $r6 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.util.Collection)>($r16) in <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.util.Collection)>
CLINIT edge: $r7 = <com.atlassian.plugin.loaders.ScanningPluginLoader: org.slf4j.Logger log> in <com.atlassian.plugin.loaders.ScanningPluginLoader: void removePlugin(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.loaders.ScanningPluginLoader: void <clinit>()>
CLINIT edge: $r5 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r1) in <com.atlassian.plugin.hostcontainer.SimpleConstructorHostContainer: void <init>(java.util.Map)> ==> <java.util.Collections: void <clinit>()>
STATIC edge: $r5 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r1) in <com.atlassian.plugin.hostcontainer.SimpleConstructorHostContainer: void <init>(java.util.Map)> ==> <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>
CLINIT edge: $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <com.atlassian.plugin.hostcontainer.SimpleConstructorHostContainer: int lambda$findConstructorsLargestFirst$0(java.lang.reflect.Constructor,java.lang.reflect.Constructor)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1) in <com.atlassian.plugin.hostcontainer.SimpleConstructorHostContainer: int lambda$findConstructorsLargestFirst$0(java.lang.reflect.Constructor,java.lang.reflect.Constructor)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <com.atlassian.plugin.hostcontainer.SimpleConstructorHostContainer: int lambda$findConstructorsLargestFirst$0(java.lang.reflect.Constructor,java.lang.reflect.Constructor)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
CLINIT edge: $r1 = new com.atlassian.plugin.loaders.DirectoryScanner in <com.atlassian.plugin.loaders.DirectoryPluginLoader: void <init>(java.io.File,java.util.List,com.atlassian.plugin.event.PluginEventManager)> ==> <com.atlassian.plugin.loaders.DirectoryScanner: void <clinit>()>
CLINIT edge: $r1 = new com.atlassian.plugin.loaders.DirectoryScanner in <com.atlassian.plugin.loaders.DirectoryPluginLoader: void <init>(java.io.File,java.util.List,com.atlassian.plugin.PluginArtifactFactory,com.atlassian.plugin.event.PluginEventManager)> ==> <com.atlassian.plugin.loaders.DirectoryScanner: void <clinit>()>
STATIC edge: $r3 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2) in <com.atlassian.plugin.loaders.DirectoryScanner: void <init>(java.io.File)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
CLINIT edge: $r11 = <com.atlassian.plugin.loaders.DirectoryScanner: org.slf4j.Logger log> in <com.atlassian.plugin.loaders.DirectoryScanner: java.util.Collection scan()> ==> <com.atlassian.plugin.loaders.DirectoryScanner: void <clinit>()>
STATIC edge: staticinvoke <java.util.Arrays: void sort(java.lang.Object[])>(r20) in <com.atlassian.plugin.loaders.DirectoryScanner: java.util.Collection scan()> ==> <java.util.Arrays: void sort(java.lang.Object[])>
STATIC edge: $r7 = staticinvoke <com.atlassian.plugin.loaders.DirectoryScanner$lambda_scan_0__134: java.io.FilenameFilter bootstrap$()>() in <com.atlassian.plugin.loaders.DirectoryScanner: java.util.Collection scan()> ==> <com.atlassian.plugin.loaders.DirectoryScanner$lambda_scan_0__134: java.io.FilenameFilter bootstrap$()>
CLINIT edge: $r3 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>($r2) in <com.atlassian.plugin.loaders.DirectoryScanner: java.util.Collection getDeploymentUnits()> ==> <java.util.Collections: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>($r2) in <com.atlassian.plugin.loaders.DirectoryScanner: java.util.Collection getDeploymentUnits()> ==> <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>
CLINIT edge: $r15 = <com.atlassian.plugin.loaders.DirectoryScanner: org.slf4j.Logger log> in <com.atlassian.plugin.loaders.DirectoryScanner: void remove(com.atlassian.plugin.loaders.classloading.DeploymentUnit)> ==> <com.atlassian.plugin.loaders.DirectoryScanner: void <clinit>()>
STATIC edge: staticinvoke <java.nio.file.Files: void delete(java.nio.file.Path)>($r2) in <com.atlassian.plugin.loaders.DirectoryScanner: void remove(com.atlassian.plugin.loaders.classloading.DeploymentUnit)> ==> <java.nio.file.Files: void delete(java.nio.file.Path)>
CLINIT edge: $r12 = <com.atlassian.plugin.loaders.DirectoryScanner: org.slf4j.Logger log> in <com.atlassian.plugin.loaders.DirectoryScanner: void remove(com.atlassian.plugin.loaders.classloading.DeploymentUnit)> ==> <com.atlassian.plugin.loaders.DirectoryScanner: void <clinit>()>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.loaders.RosterFilePluginLoader: com.atlassian.plugin.ReferenceMode referenceModeFromProperty()>() in <com.atlassian.plugin.loaders.RosterFilePluginLoader: void <init>(java.io.File,java.util.List,com.atlassian.plugin.event.PluginEventManager)> ==> <com.atlassian.plugin.loaders.RosterFilePluginLoader: com.atlassian.plugin.ReferenceMode referenceModeFromProperty()>
CLINIT edge: $r1 = new com.atlassian.plugin.loaders.RosterFileScanner in <com.atlassian.plugin.loaders.RosterFilePluginLoader: void <init>(java.io.File,java.util.List,com.atlassian.plugin.PluginArtifactFactory,com.atlassian.plugin.event.PluginEventManager)> ==> <com.atlassian.plugin.loaders.RosterFileScanner: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.google.common.collect.Iterables: java.lang.Iterable unmodifiableIterable(java.lang.Iterable)>($r1) in <com.atlassian.plugin.tracker.DefaultPluginModuleTracker: java.lang.Iterable getModuleDescriptors()> ==> <com.google.common.collect.Iterables: java.lang.Iterable unmodifiableIterable(java.lang.Iterable)>
STATIC edge: $r3 = staticinvoke <com.google.common.collect.Iterables: java.lang.Iterable transform(java.lang.Iterable,com.google.common.base.Function)>($r1, $r2) in <com.atlassian.plugin.tracker.DefaultPluginModuleTracker: java.lang.Iterable getModules()> ==> <com.google.common.collect.Iterables: java.lang.Iterable transform(java.lang.Iterable,com.google.common.base.Function)>
CLINIT edge: $r3 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>($r2) in <com.atlassian.plugin.tracker.DefaultPluginModuleTracker: void onPluginModuleEnabled(com.atlassian.plugin.event.events.PluginModuleEnabledEvent)> ==> <java.util.Collections: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>($r2) in <com.atlassian.plugin.tracker.DefaultPluginModuleTracker: void onPluginModuleEnabled(com.atlassian.plugin.event.events.PluginModuleEnabledEvent)> ==> <java.util.Collections: java.util.Set singleton(java.lang.Object)>
CLINIT edge: $r3 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>($r2) in <com.atlassian.plugin.tracker.DefaultPluginModuleTracker: void onPluginModuleDisabled(com.atlassian.plugin.event.events.PluginModuleDisabledEvent)> ==> <java.util.Collections: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>($r2) in <com.atlassian.plugin.tracker.DefaultPluginModuleTracker: void onPluginModuleDisabled(com.atlassian.plugin.event.events.PluginModuleDisabledEvent)> ==> <java.util.Collections: java.util.Set singleton(java.lang.Object)>
CLINIT edge: $r5 = <com.atlassian.plugin.manager.ApplicationDefinedPluginsProvider: com.atlassian.plugin.manager.ApplicationDefinedPluginsProvider NO_APPLICATION_PLUGINS> in <com.atlassian.plugin.manager.DefaultSafeModeManager: void <init>(com.atlassian.plugin.metadata.PluginMetadataManager,com.atlassian.plugin.manager.ClusterEnvironmentProvider,com.atlassian.plugin.parsers.SafeModeCommandLineArgumentsFactory,com.atlassian.plugin.manager.PluginPersistentStateStore)> ==> <com.atlassian.plugin.manager.ApplicationDefinedPluginsProvider: void <clinit>()>
CLINIT edge: $r2 = staticinvoke <com.atlassian.plugin.manager.DefaultSafeModeManager: com.atlassian.plugin.manager.PluginPersistentStateStore access$000(com.atlassian.plugin.manager.DefaultSafeModeManager)>($r1) in <com.atlassian.plugin.manager.DefaultSafeModeManager$1: java.util.Optional get()> ==> <com.atlassian.plugin.manager.DefaultSafeModeManager: void <clinit>()>
STATIC edge: $r11 = staticinvoke <com.atlassian.plugin.manager.DefaultSafeModeManager$1$getKey__155: java.util.function.Function bootstrap$()>() in <com.atlassian.plugin.manager.DefaultSafeModeManager$1: java.util.Optional get()> ==> <com.atlassian.plugin.manager.DefaultSafeModeManager$1$getKey__155: java.util.function.Function bootstrap$()>
STATIC edge: $r17 = staticinvoke <java.util.Optional: java.util.Optional empty()>() in <com.atlassian.plugin.manager.DefaultSafeModeManager$1: java.util.Optional get()> ==> <java.util.Optional: java.util.Optional empty()>
STATIC edge: $r9 = staticinvoke <java.util.Comparator: java.util.Comparator comparingLong(java.util.function.ToLongFunction)>($r8) in <com.atlassian.plugin.manager.DefaultSafeModeManager$1: java.util.Optional get()> ==> <java.util.Comparator: java.util.Comparator comparingLong(java.util.function.ToLongFunction)>
STATIC edge: $r8 = staticinvoke <com.atlassian.plugin.manager.DefaultSafeModeManager$1$lambda_get_0__151: java.util.function.ToLongFunction bootstrap$()>() in <com.atlassian.plugin.manager.DefaultSafeModeManager$1: java.util.Optional get()> ==> <com.atlassian.plugin.manager.DefaultSafeModeManager$1$lambda_get_0__151: java.util.function.ToLongFunction bootstrap$()>
STATIC edge: $r18 = staticinvoke <java.util.Optional: java.util.Optional empty()>() in <com.atlassian.plugin.manager.DefaultSafeModeManager$1: java.util.Optional get()> ==> <java.util.Optional: java.util.Optional empty()>
STATIC edge: $r2 = staticinvoke <com.atlassian.plugin.manager.DefaultSafeModeManager: com.atlassian.plugin.manager.PluginPersistentStateStore access$000(com.atlassian.plugin.manager.DefaultSafeModeManager)>($r1) in <com.atlassian.plugin.manager.DefaultSafeModeManager$1: java.util.Optional get()> ==> <com.atlassian.plugin.manager.DefaultSafeModeManager: com.atlassian.plugin.manager.PluginPersistentStateStore access$000(com.atlassian.plugin.manager.DefaultSafeModeManager)>
CLINIT edge: $r2 = staticinvoke <com.atlassian.plugin.loaders.BundledPluginLoader: com.atlassian.plugin.loaders.classloading.Scanner buildSourceScanner(java.io.File)>(r1) in <com.atlassian.plugin.loaders.BundledPluginLoader: void <init>(java.io.File,java.util.List,com.atlassian.plugin.event.PluginEventManager)> ==> <com.atlassian.plugin.loaders.BundledPluginLoader: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.atlassian.plugin.loaders.BundledPluginLoader: com.atlassian.plugin.loaders.classloading.Scanner buildSourceScanner(java.io.File)>(r1) in <com.atlassian.plugin.loaders.BundledPluginLoader: void <init>(java.io.File,java.util.List,com.atlassian.plugin.event.PluginEventManager)> ==> <com.atlassian.plugin.loaders.BundledPluginLoader: com.atlassian.plugin.loaders.classloading.Scanner buildSourceScanner(java.io.File)>
CLINIT edge: $r2 = staticinvoke <com.atlassian.plugin.loaders.BundledPluginLoader: com.atlassian.plugin.loaders.classloading.Scanner buildSourceScanner(java.io.File)>(r1) in <com.atlassian.plugin.loaders.BundledPluginLoader: void <init>(java.io.File,java.util.List,com.atlassian.plugin.event.PluginEventManager)> ==> <com.atlassian.plugin.loaders.ScanningPluginLoader: void <clinit>()>
CLINIT edge: $r3 = staticinvoke <com.atlassian.plugin.loaders.BundledPluginLoader: com.atlassian.plugin.loaders.classloading.Scanner buildZipScanner(java.net.URL,java.io.File)>(r1, r2) in <com.atlassian.plugin.loaders.BundledPluginLoader: void <init>(java.net.URL,java.io.File,java.util.List,com.atlassian.plugin.event.PluginEventManager)> ==> <com.atlassian.plugin.loaders.BundledPluginLoader: void <clinit>()>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.loaders.BundledPluginLoader: com.atlassian.plugin.loaders.classloading.Scanner buildZipScanner(java.net.URL,java.io.File)>(r1, r2) in <com.atlassian.plugin.loaders.BundledPluginLoader: void <init>(java.net.URL,java.io.File,java.util.List,com.atlassian.plugin.event.PluginEventManager)> ==> <com.atlassian.plugin.loaders.BundledPluginLoader: com.atlassian.plugin.loaders.classloading.Scanner buildZipScanner(java.net.URL,java.io.File)>
CLINIT edge: $r3 = staticinvoke <com.atlassian.plugin.loaders.BundledPluginLoader: com.atlassian.plugin.loaders.classloading.Scanner buildZipScanner(java.net.URL,java.io.File)>(r1, r2) in <com.atlassian.plugin.loaders.BundledPluginLoader: void <init>(java.net.URL,java.io.File,java.util.List,com.atlassian.plugin.event.PluginEventManager)> ==> <com.atlassian.plugin.loaders.ScanningPluginLoader: void <clinit>()>
CLINIT edge: $r0 = staticinvoke <java.util.Collections: java.util.List emptyList()>() in <com.atlassian.plugin.loaders.classloading.EmptyScanner: java.util.Collection scan()> ==> <java.util.Collections: void <clinit>()>
STATIC edge: $r0 = staticinvoke <java.util.Collections: java.util.List emptyList()>() in <com.atlassian.plugin.loaders.classloading.EmptyScanner: java.util.Collection scan()> ==> <java.util.Collections: java.util.List emptyList()>
CLINIT edge: $r0 = staticinvoke <java.util.Collections: java.util.List emptyList()>() in <com.atlassian.plugin.loaders.classloading.EmptyScanner: java.util.Collection getDeploymentUnits()> ==> <java.util.Collections: void <clinit>()>
STATIC edge: $r0 = staticinvoke <java.util.Collections: java.util.List emptyList()>() in <com.atlassian.plugin.loaders.classloading.EmptyScanner: java.util.Collection getDeploymentUnits()> ==> <java.util.Collections: java.util.List emptyList()>
CLINIT edge: $r1 = <com.atlassian.plugin.loaders.classloading.EmptyScanner: org.slf4j.Logger log> in <com.atlassian.plugin.loaders.classloading.EmptyScanner: void remove(com.atlassian.plugin.loaders.classloading.DeploymentUnit)> ==> <com.atlassian.plugin.loaders.classloading.EmptyScanner: void <clinit>()>
STATIC edge: $r5 = staticinvoke <com.google.common.collect.Iterables: java.lang.Iterable transform(java.lang.Iterable,com.google.common.base.Function)>($r3, $r7) in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.google.common.collect.Iterables: java.lang.Iterable transform(java.lang.Iterable,com.google.common.base.Function)>
STATIC edge: $r6 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.lang.Iterable)>($r5) in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.lang.Iterable)>
STATIC edge: $r5 = staticinvoke <com.google.common.collect.Iterables: java.lang.Iterable transform(java.lang.Iterable,com.google.common.base.Function)>($r3, $r7) in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.google.common.collect.Iterables: java.lang.Iterable transform(java.lang.Iterable,com.google.common.base.Function)>
STATIC edge: $r6 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.lang.Iterable)>($r5) in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.lang.Iterable)>
CLINIT edge: $r1 = <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: org.slf4j.Logger logger> in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: void removePlugin(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: void <clinit>()>
CLINIT edge: $r1 = <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: org.slf4j.Logger logger> in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: void removePlugin(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.loaders.ForwardingPluginLoader: void <clinit>()>
CLINIT edge: $r1 = <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: org.slf4j.Logger logger> in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: void discardPlugin(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: void <clinit>()>
CLINIT edge: $r1 = <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: org.slf4j.Logger logger> in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: void discardPlugin(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.loaders.ForwardingPluginLoader: void <clinit>()>
CLINIT edge: $r5 = new com.atlassian.plugin.classloader.PluginsClassLoader in <com.atlassian.plugin.manager.ProductPluginAccessorBase: void <init>(com.atlassian.plugin.PluginRegistry$ReadOnly,com.atlassian.plugin.manager.PluginPersistentStateStore,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager)> ==> <com.atlassian.plugin.classloader.PluginsClassLoader: void <clinit>()>
STATIC edge: $r8 = staticinvoke <com.atlassian.plugin.util.Assertions: java.lang.Object notNull(java.lang.String,java.lang.Object)>("PluginPersistentStateStore", r7) in <com.atlassian.plugin.manager.ProductPluginAccessorBase: void <init>(com.atlassian.plugin.PluginRegistry$ReadOnly,com.atlassian.plugin.manager.PluginPersistentStateStore,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager)> ==> <com.atlassian.plugin.util.Assertions: java.lang.Object notNull(java.lang.String,java.lang.Object)>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.util.Assertions: java.lang.Object notNull(java.lang.String,java.lang.Object)>("ModuleDescriptorFactory", r2) in <com.atlassian.plugin.manager.ProductPluginAccessorBase: void <init>(com.atlassian.plugin.PluginRegistry$ReadOnly,com.atlassian.plugin.manager.PluginPersistentStateStore,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager)> ==> <com.atlassian.plugin.util.Assertions: java.lang.Object notNull(java.lang.String,java.lang.Object)>
STATIC edge: staticinvoke <com.atlassian.plugin.util.Assertions: java.lang.Object notNull(java.lang.String,java.lang.Object)>("pluginPredicate", r0) in <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.Collection getPlugins(java.util.function.Predicate)> ==> <com.atlassian.plugin.util.Assertions: java.lang.Object notNull(java.lang.String,java.lang.Object)>
STATIC edge: $r6 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>() in <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.Collection getPlugins(java.util.function.Predicate)> ==> <java.util.stream.Collectors: java.util.stream.Collector toList()>
STATIC edge: $r1 = staticinvoke <com.atlassian.plugin.manager.ProductPluginAccessorBase$lambda_getEnabledPlugins_0__141: java.util.function.Predicate bootstrap$()>() in <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.Collection getEnabledPlugins()> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase$lambda_getEnabledPlugins_0__141: java.util.function.Predicate bootstrap$()>
STATIC edge: staticinvoke <com.atlassian.plugin.util.Assertions: java.lang.Object notNull(java.lang.String,java.lang.Object)>("moduleDescriptorPredicate", r0) in <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.Collection getModules(java.util.function.Predicate)> ==> <com.atlassian.plugin.util.Assertions: java.lang.Object notNull(java.lang.String,java.lang.Object)>
STATIC edge: $r6 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>() in <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.Collection getModules(java.util.function.Predicate)> ==> <java.util.stream.Collectors: java.util.stream.Collector toList()>
STATIC edge: staticinvoke <com.atlassian.plugin.util.Assertions: java.lang.Object notNull(java.lang.String,java.lang.Object)>("moduleDescriptorPredicate", r0) in <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.Collection getModuleDescriptors(java.util.function.Predicate)> ==> <com.atlassian.plugin.util.Assertions: java.lang.Object notNull(java.lang.String,java.lang.Object)>
STATIC edge: $r5 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>() in <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.Collection getModuleDescriptors(java.util.function.Predicate)> ==> <java.util.stream.Collectors: java.util.stream.Collector toList()>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.util.Assertions: java.lang.Object notNull(java.lang.String,java.lang.Object)>("Plugin key ", r1) in <com.atlassian.plugin.manager.ProductPluginAccessorBase: com.atlassian.plugin.Plugin getPlugin(java.lang.String)> ==> <com.atlassian.plugin.util.Assertions: java.lang.Object notNull(java.lang.String,java.lang.Object)>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.util.Assertions: java.lang.Object notNull(java.lang.String,java.lang.Object)>("Plugin key", r1) in <com.atlassian.plugin.manager.ProductPluginAccessorBase: boolean isPluginEnabled(java.lang.String)> ==> <com.atlassian.plugin.util.Assertions: java.lang.Object notNull(java.lang.String,java.lang.Object)>
STATIC edge: $r4 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>() in <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.List getEnabledModulesByClass(java.lang.Class)> ==> <java.util.stream.Collectors: java.util.stream.Collector toList()>
STATIC edge: staticinvoke <com.atlassian.plugin.util.Assertions: java.lang.Object notNull(java.lang.String,java.lang.Object)>("Descriptor class", r0) in <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.List getEnabledModuleDescriptorsByClass(java.lang.Class)> ==> <com.atlassian.plugin.util.Assertions: java.lang.Object notNull(java.lang.String,java.lang.Object)>
STATIC edge: $r15 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>() in <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.List getEnabledModuleDescriptorsByClass(java.lang.Class)> ==> <java.util.stream.Collectors: java.util.stream.Collector toList()>
STATIC edge: $r13 = staticinvoke <com.atlassian.plugin.manager.ProductPluginAccessorBase$cast__148: java.util.function.Function bootstrap$(java.lang.Class)>(r0) in <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.List getEnabledModuleDescriptorsByClass(java.lang.Class)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase$cast__148: java.util.function.Function bootstrap$(java.lang.Class)>
STATIC edge: $r8 = staticinvoke <com.atlassian.plugin.manager.ProductPluginAccessorBase$isInstance__147: java.util.function.Predicate bootstrap$(java.lang.Class)>(r0) in <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.List getEnabledModuleDescriptorsByClass(java.lang.Class)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase$isInstance__147: java.util.function.Predicate bootstrap$(java.lang.Class)>
STATIC edge: $r5 = staticinvoke <com.atlassian.plugin.manager.ProductPluginAccessorBase$lambda_getEnabledModuleDescriptorsByClass_4__146: java.util.function.Function bootstrap$()>() in <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.List getEnabledModuleDescriptorsByClass(java.lang.Class)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase$lambda_getEnabledModuleDescriptorsByClass_4__146: java.util.function.Function bootstrap$()>
CLINIT edge: $r4 = <com.atlassian.plugin.manager.ProductPluginAccessorBase: org.slf4j.Logger log> in <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.lang.Object lambda$getModules$1(com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase: void <clinit>()>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.util.Assertions: java.lang.Object notNull(java.lang.String,java.lang.Object)>("resource", r2) in <com.atlassian.plugin.loaders.SinglePluginLoader: void <init>(java.lang.String)> ==> <com.atlassian.plugin.util.Assertions: java.lang.Object notNull(java.lang.String,java.lang.Object)>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.util.Assertions: java.lang.Object notNull(java.lang.String,java.lang.Object)>("url", r2) in <com.atlassian.plugin.loaders.SinglePluginLoader: void <init>(java.net.URL)> ==> <com.atlassian.plugin.util.Assertions: java.lang.Object notNull(java.lang.String,java.lang.Object)>
CLINIT edge: $r8 = <com.atlassian.plugin.loaders.SinglePluginLoader: org.slf4j.Logger log> in <com.atlassian.plugin.loaders.SinglePluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.SinglePluginLoader: void <clinit>()>
STATIC edge: $r20 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.util.Collection)>($r19) in <com.atlassian.plugin.loaders.SinglePluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.util.Collection)>
STATIC edge: $r3 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(r18) in <com.atlassian.plugin.loaders.SinglePluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.Collections: java.util.Set singleton(java.lang.Object)>
CLINIT edge: $r3 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(r18) in <com.atlassian.plugin.loaders.SinglePluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.Collections: void <clinit>()>
CLINIT edge: $r5 = staticinvoke <com.atlassian.plugin.parsers.XmlDescriptorParserUtils: com.atlassian.plugin.ModuleDescriptor addModule(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin,org.dom4j.Element)>(r3, r1, r4) in <com.atlassian.plugin.loaders.SinglePluginLoader: com.atlassian.plugin.ModuleDescriptor createModule(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.parsers.XmlDescriptorParserUtils: void <clinit>()>
STATIC edge: $r5 = staticinvoke <com.atlassian.plugin.parsers.XmlDescriptorParserUtils: com.atlassian.plugin.ModuleDescriptor addModule(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin,org.dom4j.Element)>(r3, r1, r4) in <com.atlassian.plugin.loaders.SinglePluginLoader: com.atlassian.plugin.ModuleDescriptor createModule(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.parsers.XmlDescriptorParserUtils: com.atlassian.plugin.ModuleDescriptor addModule(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin,org.dom4j.Element)>
STATIC edge: $r4 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.util.Collection)>($r3) in <com.atlassian.plugin.loaders.ClassPathPluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.util.Collection)>
CLINIT edge: $r1 = new com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor in <com.atlassian.plugin.manager.ProductPluginAccessor: void <init>(com.atlassian.plugin.PluginRegistry$ReadOnly,com.atlassian.plugin.manager.PluginPersistentStateStore,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager)> ==> <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: void <clinit>()>
CLINIT edge: $r7 = <com.atlassian.plugin.manager.ProductPluginAccessor: com.atlassian.plugin.PluginController noopDisablePluginPluginController> in <com.atlassian.plugin.manager.ProductPluginAccessor: void <init>(com.atlassian.plugin.PluginRegistry$ReadOnly,com.atlassian.plugin.manager.PluginPersistentStateStore,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager)> ==> <com.atlassian.plugin.manager.ProductPluginAccessor: void <clinit>()>
CLINIT edge: $r2 = new com.atlassian.plugin.manager.ProductPluginAccessorBase in <com.atlassian.plugin.manager.ProductPluginAccessor: void <init>(com.atlassian.plugin.PluginRegistry$ReadOnly,com.atlassian.plugin.manager.PluginPersistentStateStore,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase: void <clinit>()>
CLINIT edge: $r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>() in <com.atlassian.plugin.util.resource.AlternativeDirectoryResourceLoader: void <init>()> ==> <java.util.Collections: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>() in <com.atlassian.plugin.util.resource.AlternativeDirectoryResourceLoader: void <init>()> ==> <java.util.Collections: java.util.List emptyList()>
CLINIT edge: $r5 = new java.io.File in <com.atlassian.plugin.util.resource.AlternativeDirectoryResourceLoader: java.net.URL getResource(java.lang.String)> ==> <java.io.File: void <clinit>()>
CLINIT edge: $r8 = <com.atlassian.plugin.util.resource.AlternativeDirectoryResourceLoader: org.slf4j.Logger log> in <com.atlassian.plugin.util.resource.AlternativeDirectoryResourceLoader: java.net.URL getResource(java.lang.String)> ==> <com.atlassian.plugin.util.resource.AlternativeDirectoryResourceLoader: void <clinit>()>
CLINIT edge: $r14 = <com.atlassian.plugin.util.resource.AlternativeDirectoryResourceLoader: org.slf4j.Logger log> in <com.atlassian.plugin.util.resource.AlternativeDirectoryResourceLoader: java.net.URL getResource(java.lang.String)> ==> <com.atlassian.plugin.util.resource.AlternativeDirectoryResourceLoader: void <clinit>()>
CLINIT edge: $r7 = <com.atlassian.plugin.util.resource.AlternativeDirectoryResourceLoader: org.slf4j.Logger log> in <com.atlassian.plugin.util.resource.AlternativeDirectoryResourceLoader: java.io.InputStream getResourceAsStream(java.lang.String)> ==> <com.atlassian.plugin.util.resource.AlternativeDirectoryResourceLoader: void <clinit>()>
CLINIT edge: staticinvoke <com.atlassian.plugin.manager.store.PluginPersistentStateStoreMigrator: void lambda$removeDirectives$0(com.atlassian.plugin.manager.PluginPersistentStateStore,com.atlassian.plugin.manager.PluginPersistentState$Builder)>($r3, $r2) in <com.atlassian.plugin.manager.store.PluginPersistentStateStoreMigrator$lambda_removeDirectives_0__1: void apply(java.lang.Object)> ==> <com.atlassian.plugin.manager.store.PluginPersistentStateStoreMigrator: void <clinit>()>
STATIC edge: staticinvoke <com.atlassian.plugin.manager.store.PluginPersistentStateStoreMigrator: void lambda$removeDirectives$0(com.atlassian.plugin.manager.PluginPersistentStateStore,com.atlassian.plugin.manager.PluginPersistentState$Builder)>($r3, $r2) in <com.atlassian.plugin.manager.store.PluginPersistentStateStoreMigrator$lambda_removeDirectives_0__1: void apply(java.lang.Object)> ==> <com.atlassian.plugin.manager.store.PluginPersistentStateStoreMigrator: void lambda$removeDirectives$0(com.atlassian.plugin.manager.PluginPersistentStateStore,com.atlassian.plugin.manager.PluginPersistentState$Builder)>
CLINIT edge: $z0 = staticinvoke <com.atlassian.plugin.JarPluginArtifact: boolean lambda$extraModuleDescriptorFiles$1(java.util.regex.Matcher,java.util.jar.JarEntry)>($r3, $r2) in <com.atlassian.plugin.JarPluginArtifact$lambda_extraModuleDescriptorFiles_1__4: boolean test(java.lang.Object)> ==> <com.atlassian.plugin.JarPluginArtifact: void <clinit>()>
STATIC edge: $z0 = staticinvoke <com.atlassian.plugin.JarPluginArtifact: boolean lambda$extraModuleDescriptorFiles$1(java.util.regex.Matcher,java.util.jar.JarEntry)>($r3, $r2) in <com.atlassian.plugin.JarPluginArtifact$lambda_extraModuleDescriptorFiles_1__4: boolean test(java.lang.Object)> ==> <com.atlassian.plugin.JarPluginArtifact: boolean lambda$extraModuleDescriptorFiles$1(java.util.regex.Matcher,java.util.jar.JarEntry)>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$1: java.lang.Boolean lambda$test$0(java.util.function.Predicate,com.atlassian.plugin.Plugin)>($r1, $r2) in <com.atlassian.plugin.manager.DefaultPluginManager$1$lambda_test_0__6: java.lang.Object get()> ==> <com.atlassian.plugin.manager.DefaultPluginManager$1: java.lang.Boolean lambda$test$0(java.util.function.Predicate,com.atlassian.plugin.Plugin)>
CLINIT edge: $r3 = staticinvoke <com.atlassian.plugin.parsers.XmlDescriptorParser: org.dom4j.Document createDocument(java.io.InputStream)>($r2) in <com.atlassian.plugin.parsers.XmlDescriptorParser$createDocument__7: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.parsers.XmlDescriptorParser: void <clinit>()>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.parsers.XmlDescriptorParser: org.dom4j.Document createDocument(java.io.InputStream)>($r2) in <com.atlassian.plugin.parsers.XmlDescriptorParser$createDocument__7: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.parsers.XmlDescriptorParser: org.dom4j.Document createDocument(java.io.InputStream)>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.util.ModuleRestricts: com.atlassian.plugin.util.ModuleRestricts$ModuleRestrict lambda$parseApplicationsFromRestrictElements$0(org.dom4j.Element)>($r2) in <com.atlassian.plugin.util.ModuleRestricts$lambda_parseApplicationsFromRestrictElements_0__13: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.util.ModuleRestricts: com.atlassian.plugin.util.ModuleRestricts$ModuleRestrict lambda$parseApplicationsFromRestrictElements$0(org.dom4j.Element)>
CLINIT edge: $r2 = staticinvoke <com.atlassian.plugin.manager.ApplicationDefinedPluginsProvider: java.util.Set lambda$static$0(java.lang.Iterable)>($r1) in <com.atlassian.plugin.manager.ApplicationDefinedPluginsProvider$lambda_static_0__16: java.util.Set getPluginKeys(java.lang.Iterable)> ==> <com.atlassian.plugin.manager.ApplicationDefinedPluginsProvider: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.atlassian.plugin.manager.ApplicationDefinedPluginsProvider: java.util.Set lambda$static$0(java.lang.Iterable)>($r1) in <com.atlassian.plugin.manager.ApplicationDefinedPluginsProvider$lambda_static_0__16: java.util.Set getPluginKeys(java.lang.Iterable)> ==> <com.atlassian.plugin.manager.ApplicationDefinedPluginsProvider: java.util.Set lambda$static$0(java.lang.Iterable)>
STATIC edge: $z0 = staticinvoke <com.atlassian.plugin.predicate.ModuleDescriptorOfClassPredicate: boolean lambda$test$0(com.atlassian.plugin.ModuleDescriptor,java.lang.Class)>($r3, $r2) in <com.atlassian.plugin.predicate.ModuleDescriptorOfClassPredicate$lambda_test_0__20: boolean test(java.lang.Object)> ==> <com.atlassian.plugin.predicate.ModuleDescriptorOfClassPredicate: boolean lambda$test$0(com.atlassian.plugin.ModuleDescriptor,java.lang.Class)>
CLINIT edge: $z0 = staticinvoke <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: boolean lambda$static$0(java.lang.Integer)>($r2) in <com.atlassian.plugin.factories.LegacyDynamicPluginFactory$lambda_static_0__21: boolean test(java.lang.Object)> ==> <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: void <clinit>()>
STATIC edge: $z0 = staticinvoke <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: boolean lambda$static$0(java.lang.Integer)>($r2) in <com.atlassian.plugin.factories.LegacyDynamicPluginFactory$lambda_static_0__21: boolean test(java.lang.Object)> ==> <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: boolean lambda$static$0(java.lang.Integer)>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.InstallationMode: java.util.Optional of(java.lang.String)>($r2) in <com.atlassian.plugin.parsers.XmlDescriptorParser$of__23: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.InstallationMode: java.util.Optional of(java.lang.String)>
CLINIT edge: $r1 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge: com.atlassian.plugin.jmx.PluginManagerMXBean$PluginData[] lambda$getPlugins$1(int)>($i0) in <com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge$lambda_getPlugins_1__26: java.lang.Object apply(int)> ==> <com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge: void <clinit>()>
STATIC edge: $r1 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge: com.atlassian.plugin.jmx.PluginManagerMXBean$PluginData[] lambda$getPlugins$1(int)>($i0) in <com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge$lambda_getPlugins_1__26: java.lang.Object apply(int)> ==> <com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge: com.atlassian.plugin.jmx.PluginManagerMXBean$PluginData[] lambda$getPlugins$1(int)>
CLINIT edge: $z0 = staticinvoke <com.atlassian.plugin.manager.ClusterEnvironmentProvider: boolean lambda$static$0()>() in <com.atlassian.plugin.manager.ClusterEnvironmentProvider$lambda_static_0__27: boolean isInCluster()> ==> <com.atlassian.plugin.manager.ClusterEnvironmentProvider: void <clinit>()>
STATIC edge: $z0 = staticinvoke <com.atlassian.plugin.manager.ClusterEnvironmentProvider: boolean lambda$static$0()>() in <com.atlassian.plugin.manager.ClusterEnvironmentProvider$lambda_static_0__27: boolean isInCluster()> ==> <com.atlassian.plugin.manager.ClusterEnvironmentProvider: boolean lambda$static$0()>
CLINIT edge: $r3 = staticinvoke <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: java.util.Optional lambda$getInstrumentRegistry$0(com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$InstrumentRegistryProxy)>($r2) in <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$lambda_getInstrumentRegistry_0__28: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: void <clinit>()>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: java.util.Optional lambda$getInstrumentRegistry$0(com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$InstrumentRegistryProxy)>($r2) in <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$lambda_getInstrumentRegistry_0__28: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: java.util.Optional lambda$getInstrumentRegistry$0(com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$InstrumentRegistryProxy)>
CLINIT edge: $r4 = staticinvoke <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: java.util.Optional lambda$pullTimer$1(java.lang.String,com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$InstrumentRegistryProxy)>($r3, $r2) in <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$lambda_pullTimer_1__29: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: void <clinit>()>
STATIC edge: $r4 = staticinvoke <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: java.util.Optional lambda$pullTimer$1(java.lang.String,com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$InstrumentRegistryProxy)>($r3, $r2) in <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$lambda_pullTimer_1__29: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: java.util.Optional lambda$pullTimer$1(java.lang.String,com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$InstrumentRegistryProxy)>
STATIC edge: $z0 = staticinvoke <com.atlassian.plugin.parsers.PluginInformationReader$ElementWithForApplicationsPredicate: boolean lambda$test$0(java.lang.String,com.atlassian.plugin.Application)>($r3, $r2) in <com.atlassian.plugin.parsers.PluginInformationReader$ElementWithForApplicationsPredicate$lambda_test_0__31: boolean test(java.lang.Object)> ==> <com.atlassian.plugin.parsers.PluginInformationReader$ElementWithForApplicationsPredicate: boolean lambda$test$0(java.lang.String,com.atlassian.plugin.Application)>
CLINIT edge: $r3 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.classloader.PluginsClassLoader lambda$new$0(com.atlassian.plugin.PluginAccessor)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_new_0__32: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void <clinit>()>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.classloader.PluginsClassLoader lambda$new$0(com.atlassian.plugin.PluginAccessor)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_new_0__32: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.classloader.PluginsClassLoader lambda$new$0(com.atlassian.plugin.PluginAccessor)>
CLINIT edge: $r3 = new com.atlassian.plugin.loaders.PermissionCheckingPluginLoader in <com.atlassian.plugin.manager.DefaultPluginManager$init__34: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: void <clinit>()>
CLINIT edge: $r3 = new com.atlassian.plugin.loaders.PermissionCheckingPluginLoader in <com.atlassian.plugin.manager.DefaultPluginManager$init__34: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.loaders.ForwardingPluginLoader: void <clinit>()>
CLINIT edge: staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$propertiesToMap$2(java.util.Map,java.lang.Object,java.lang.Object)>($r3, $r1, $r2) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_propertiesToMap_2__36: void accept(java.lang.Object,java.lang.Object)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void <clinit>()>
STATIC edge: staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$propertiesToMap$2(java.util.Map,java.lang.Object,java.lang.Object)>($r3, $r1, $r2) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_propertiesToMap_2__36: void accept(java.lang.Object,java.lang.Object)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$propertiesToMap$2(java.util.Map,java.lang.Object,java.lang.Object)>
CLINIT edge: $z0 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager: boolean lambda$isPluginEnabledInSafeMode$23(com.atlassian.plugin.ModuleDescriptor)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_isPluginEnabledInSafeMode_23__53: boolean test(java.lang.Object)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void <clinit>()>
STATIC edge: $z0 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager: boolean lambda$isPluginEnabledInSafeMode$23(com.atlassian.plugin.ModuleDescriptor)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_isPluginEnabledInSafeMode_23__53: boolean test(java.lang.Object)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: boolean lambda$isPluginEnabledInSafeMode$23(com.atlassian.plugin.ModuleDescriptor)>
CLINIT edge: $r3 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager$unmodifiableList__57: java.lang.Object apply(java.lang.Object)> ==> <java.util.Collections: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager$unmodifiableList__57: java.lang.Object apply(java.lang.Object)> ==> <java.util.Collections: java.util.List unmodifiableList(java.util.List)>
CLINIT edge: $r3 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager$unmodifiableList__59: java.lang.Object apply(java.lang.Object)> ==> <java.util.Collections: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager$unmodifiableList__59: java.lang.Object apply(java.lang.Object)> ==> <java.util.Collections: java.util.List unmodifiableList(java.util.List)>
CLINIT edge: $r3 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager: java.util.stream.Stream lambda$getModuleDescriptors$27(com.atlassian.plugin.Plugin)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_getModuleDescriptors_27__60: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void <clinit>()>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager: java.util.stream.Stream lambda$getModuleDescriptors$27(com.atlassian.plugin.Plugin)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_getModuleDescriptors_27__60: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: java.util.stream.Stream lambda$getModuleDescriptors$27(com.atlassian.plugin.Plugin)>
STATIC edge: $z0 = staticinvoke <java.util.Objects: boolean nonNull(java.lang.Object)>($r1) in <com.atlassian.plugin.manager.DefaultPluginManager$nonNull__61: boolean test(java.lang.Object)> ==> <java.util.Objects: boolean nonNull(java.lang.Object)>
CLINIT edge: $r3 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.ModuleDescriptor lambda$getModuleDescriptors$28(com.atlassian.plugin.ModuleDescriptor)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_getModuleDescriptors_28__62: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void <clinit>()>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.ModuleDescriptor lambda$getModuleDescriptors$28(com.atlassian.plugin.ModuleDescriptor)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_getModuleDescriptors_28__62: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.ModuleDescriptor lambda$getModuleDescriptors$28(com.atlassian.plugin.ModuleDescriptor)>
CLINIT edge: $r3 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager$unmodifiableList__64: java.lang.Object apply(java.lang.Object)> ==> <java.util.Collections: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager$unmodifiableList__64: java.lang.Object apply(java.lang.Object)> ==> <java.util.Collections: java.util.List unmodifiableList(java.util.List)>
STATIC edge: $z0 = staticinvoke <java.util.Objects: boolean nonNull(java.lang.Object)>($r1) in <com.atlassian.plugin.manager.DefaultPluginManager$nonNull__65: boolean test(java.lang.Object)> ==> <java.util.Objects: boolean nonNull(java.lang.Object)>
CLINIT edge: $r3 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager: java.util.stream.Stream lambda$getEnabledModuleDescriptorsByClass$29(com.atlassian.plugin.Plugin)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_getEnabledModuleDescriptorsByClass_29__66: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void <clinit>()>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager: java.util.stream.Stream lambda$getEnabledModuleDescriptorsByClass$29(com.atlassian.plugin.Plugin)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_getEnabledModuleDescriptorsByClass_29__66: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: java.util.stream.Stream lambda$getEnabledModuleDescriptorsByClass$29(com.atlassian.plugin.Plugin)>
CLINIT edge: $r3 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager$unmodifiableList__67: java.lang.Object apply(java.lang.Object)> ==> <java.util.Collections: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager$unmodifiableList__67: java.lang.Object apply(java.lang.Object)> ==> <java.util.Collections: java.util.List unmodifiableList(java.util.List)>
CLINIT edge: $z0 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager: boolean lambda$findDelayedPlugin$38(java.lang.String,com.atlassian.plugin.Plugin)>($r3, $r2) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_findDelayedPlugin_38__75: boolean test(java.lang.Object)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void <clinit>()>
STATIC edge: $z0 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager: boolean lambda$findDelayedPlugin$38(java.lang.String,com.atlassian.plugin.Plugin)>($r3, $r2) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_findDelayedPlugin_38__75: boolean test(java.lang.Object)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: boolean lambda$findDelayedPlugin$38(java.lang.String,com.atlassian.plugin.Plugin)>
CLINIT edge: $r3 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager$unmodifiableList__88: java.lang.Object apply(java.lang.Object)> ==> <java.util.Collections: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager$unmodifiableList__88: java.lang.Object apply(java.lang.Object)> ==> <java.util.Collections: java.util.List unmodifiableList(java.util.List)>
CLINIT edge: $z0 = staticinvoke <com.atlassian.plugin.util.PluginUtils: boolean doesPluginRequireRestart(com.atlassian.plugin.Plugin)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager$doesPluginRequireRestart__92: boolean test(java.lang.Object)> ==> <com.atlassian.plugin.util.PluginUtils: void <clinit>()>
STATIC edge: $z0 = staticinvoke <com.atlassian.plugin.util.PluginUtils: boolean doesPluginRequireRestart(com.atlassian.plugin.Plugin)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager$doesPluginRequireRestart__92: boolean test(java.lang.Object)> ==> <com.atlassian.plugin.util.PluginUtils: boolean doesPluginRequireRestart(com.atlassian.plugin.Plugin)>
CLINIT edge: $r3 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager: java.util.List lambda$null$4(java.lang.String)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_null_4__94: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void <clinit>()>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager: java.util.List lambda$null$4(java.lang.String)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_null_4__94: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: java.util.List lambda$null$4(java.lang.String)>
CLINIT edge: $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0) in <com.atlassian.plugin.util.zip.AbstractUnzipper$getTime__97: java.lang.Object apply(java.lang.Object)> ==> <java.lang.Long: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0) in <com.atlassian.plugin.util.zip.AbstractUnzipper$getTime__97: java.lang.Object apply(java.lang.Object)> ==> <java.lang.Long: java.lang.Long valueOf(long)>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginEnabledState lambda$addState$0(java.util.Map$Entry)>($r2) in <com.atlassian.plugin.manager.PluginPersistentState$Builder$lambda_addState_0__102: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginEnabledState lambda$addState$0(java.util.Map$Entry)>
STATIC edge: staticinvoke <com.atlassian.plugin.manager.PluginPersistentStateModifier: void lambda$setEnabled$0(com.atlassian.plugin.Plugin,boolean,com.atlassian.plugin.manager.PluginPersistentState$Builder)>($r3, $z0, $r2) in <com.atlassian.plugin.manager.PluginPersistentStateModifier$lambda_setEnabled_0__103: void apply(java.lang.Object)> ==> <com.atlassian.plugin.manager.PluginPersistentStateModifier: void lambda$setEnabled$0(com.atlassian.plugin.Plugin,boolean,com.atlassian.plugin.manager.PluginPersistentState$Builder)>
STATIC edge: staticinvoke <com.atlassian.plugin.manager.PluginPersistentStateModifier: void lambda$setEnabled$1(com.atlassian.plugin.ModuleDescriptor,boolean,com.atlassian.plugin.manager.PluginPersistentState$Builder)>($r3, $z0, $r2) in <com.atlassian.plugin.manager.PluginPersistentStateModifier$lambda_setEnabled_1__104: void apply(java.lang.Object)> ==> <com.atlassian.plugin.manager.PluginPersistentStateModifier: void lambda$setEnabled$1(com.atlassian.plugin.ModuleDescriptor,boolean,com.atlassian.plugin.manager.PluginPersistentState$Builder)>
STATIC edge: staticinvoke <com.atlassian.plugin.manager.PluginPersistentStateModifier: void lambda$setPluginRestartState$2(java.lang.String,com.atlassian.plugin.PluginRestartState,com.atlassian.plugin.manager.PluginPersistentState$Builder)>($r3, $r4, $r2) in <com.atlassian.plugin.manager.PluginPersistentStateModifier$lambda_setPluginRestartState_2__106: void apply(java.lang.Object)> ==> <com.atlassian.plugin.manager.PluginPersistentStateModifier: void lambda$setPluginRestartState$2(java.lang.String,com.atlassian.plugin.PluginRestartState,com.atlassian.plugin.manager.PluginPersistentState$Builder)>
STATIC edge: staticinvoke <com.atlassian.plugin.manager.PluginPersistentStateModifier: void lambda$addState$3(java.util.Map,com.atlassian.plugin.manager.PluginPersistentState$Builder)>($r3, $r2) in <com.atlassian.plugin.manager.PluginPersistentStateModifier$lambda_addState_3__107: void apply(java.lang.Object)> ==> <com.atlassian.plugin.manager.PluginPersistentStateModifier: void lambda$addState$3(java.util.Map,com.atlassian.plugin.manager.PluginPersistentState$Builder)>
STATIC edge: staticinvoke <com.atlassian.plugin.manager.PluginPersistentStateModifier: void lambda$addPluginEnabledState$4(java.util.Map,com.atlassian.plugin.manager.PluginPersistentState$Builder)>($r3, $r2) in <com.atlassian.plugin.manager.PluginPersistentStateModifier$lambda_addPluginEnabledState_4__108: void apply(java.lang.Object)> ==> <com.atlassian.plugin.manager.PluginPersistentStateModifier: void lambda$addPluginEnabledState$4(java.util.Map,com.atlassian.plugin.manager.PluginPersistentState$Builder)>
STATIC edge: staticinvoke <com.atlassian.plugin.manager.PluginPersistentStateModifier: void lambda$removeState$5(com.atlassian.plugin.Plugin,com.atlassian.plugin.manager.PluginPersistentState$Builder)>($r3, $r2) in <com.atlassian.plugin.manager.PluginPersistentStateModifier$lambda_removeState_5__110: void apply(java.lang.Object)> ==> <com.atlassian.plugin.manager.PluginPersistentStateModifier: void lambda$removeState$5(com.atlassian.plugin.Plugin,com.atlassian.plugin.manager.PluginPersistentState$Builder)>
CLINIT edge: $z0 = staticinvoke <com.atlassian.plugin.factories.XmlDynamicPluginFactory: boolean lambda$static$0(java.lang.Integer)>($r2) in <com.atlassian.plugin.factories.XmlDynamicPluginFactory$lambda_static_0__111: boolean test(java.lang.Object)> ==> <com.atlassian.plugin.factories.XmlDynamicPluginFactory: void <clinit>()>
STATIC edge: $z0 = staticinvoke <com.atlassian.plugin.factories.XmlDynamicPluginFactory: boolean lambda$static$0(java.lang.Integer)>($r2) in <com.atlassian.plugin.factories.XmlDynamicPluginFactory$lambda_static_0__111: boolean test(java.lang.Object)> ==> <com.atlassian.plugin.factories.XmlDynamicPluginFactory: boolean lambda$static$0(java.lang.Integer)>
CLINIT edge: $z0 = staticinvoke <com.atlassian.plugin.manager.DependentPlugins: boolean lambda$getInDependencyOrder$0(java.util.Map,java.lang.String)>($r3, $r2) in <com.atlassian.plugin.manager.DependentPlugins$lambda_getInDependencyOrder_0__113: boolean test(java.lang.Object)> ==> <com.atlassian.plugin.manager.DependentPlugins: void <clinit>()>
STATIC edge: $z0 = staticinvoke <com.atlassian.plugin.manager.DependentPlugins: boolean lambda$getInDependencyOrder$0(java.util.Map,java.lang.String)>($r3, $r2) in <com.atlassian.plugin.manager.DependentPlugins$lambda_getInDependencyOrder_0__113: boolean test(java.lang.Object)> ==> <com.atlassian.plugin.manager.DependentPlugins: boolean lambda$getInDependencyOrder$0(java.util.Map,java.lang.String)>
CLINIT edge: $r2 = staticinvoke <com.atlassian.plugin.manager.DependentPlugins: java.lang.IllegalStateException lambda$findPluginToCutTheCycle$1(java.util.Map)>($r1) in <com.atlassian.plugin.manager.DependentPlugins$lambda_findPluginToCutTheCycle_1__114: java.lang.Object get()> ==> <com.atlassian.plugin.manager.DependentPlugins: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.atlassian.plugin.manager.DependentPlugins: java.lang.IllegalStateException lambda$findPluginToCutTheCycle$1(java.util.Map)>($r1) in <com.atlassian.plugin.manager.DependentPlugins$lambda_findPluginToCutTheCycle_1__114: java.lang.Object get()> ==> <com.atlassian.plugin.manager.DependentPlugins: java.lang.IllegalStateException lambda$findPluginToCutTheCycle$1(java.util.Map)>
CLINIT edge: $z0 = staticinvoke <com.atlassian.plugin.manager.DependentPlugins: boolean lambda$toStringList$2(com.atlassian.plugin.manager.DependentPlugins$DependentPlugin)>($r2) in <com.atlassian.plugin.manager.DependentPlugins$lambda_toStringList_2__116: boolean test(java.lang.Object)> ==> <com.atlassian.plugin.manager.DependentPlugins: void <clinit>()>
STATIC edge: $z0 = staticinvoke <com.atlassian.plugin.manager.DependentPlugins: boolean lambda$toStringList$2(com.atlassian.plugin.manager.DependentPlugins$DependentPlugin)>($r2) in <com.atlassian.plugin.manager.DependentPlugins$lambda_toStringList_2__116: boolean test(java.lang.Object)> ==> <com.atlassian.plugin.manager.DependentPlugins: boolean lambda$toStringList$2(com.atlassian.plugin.manager.DependentPlugins$DependentPlugin)>
CLINIT edge: $z0 = staticinvoke <com.atlassian.plugin.manager.DependentPlugins: boolean lambda$toStringList$3(java.util.Set,com.atlassian.plugin.manager.DependentPlugins$DependentPlugin)>($r3, $r2) in <com.atlassian.plugin.manager.DependentPlugins$lambda_toStringList_3__117: boolean test(java.lang.Object)> ==> <com.atlassian.plugin.manager.DependentPlugins: void <clinit>()>
STATIC edge: $z0 = staticinvoke <com.atlassian.plugin.manager.DependentPlugins: boolean lambda$toStringList$3(java.util.Set,com.atlassian.plugin.manager.DependentPlugins$DependentPlugin)>($r3, $r2) in <com.atlassian.plugin.manager.DependentPlugins$lambda_toStringList_3__117: boolean test(java.lang.Object)> ==> <com.atlassian.plugin.manager.DependentPlugins: boolean lambda$toStringList$3(java.util.Set,com.atlassian.plugin.manager.DependentPlugins$DependentPlugin)>
CLINIT edge: $z1 = staticinvoke <com.atlassian.plugin.manager.DependentPlugins: boolean lambda$getPluginsByTypes$5(boolean,com.atlassian.plugin.manager.DependentPlugins$DependentPlugin)>($z0, $r2) in <com.atlassian.plugin.manager.DependentPlugins$lambda_getPluginsByTypes_5__118: boolean test(java.lang.Object)> ==> <com.atlassian.plugin.manager.DependentPlugins: void <clinit>()>
STATIC edge: $z1 = staticinvoke <com.atlassian.plugin.manager.DependentPlugins: boolean lambda$getPluginsByTypes$5(boolean,com.atlassian.plugin.manager.DependentPlugins$DependentPlugin)>($z0, $r2) in <com.atlassian.plugin.manager.DependentPlugins$lambda_getPluginsByTypes_5__118: boolean test(java.lang.Object)> ==> <com.atlassian.plugin.manager.DependentPlugins: boolean lambda$getPluginsByTypes$5(boolean,com.atlassian.plugin.manager.DependentPlugins$DependentPlugin)>
CLINIT edge: $r3 = staticinvoke <com.atlassian.plugin.manager.DependentPlugins: java.lang.String lambda$toStringList$4(com.atlassian.plugin.manager.DependentPlugins$DependentPlugin)>($r2) in <com.atlassian.plugin.manager.DependentPlugins$lambda_toStringList_4__119: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.manager.DependentPlugins: void <clinit>()>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.manager.DependentPlugins: java.lang.String lambda$toStringList$4(com.atlassian.plugin.manager.DependentPlugins$DependentPlugin)>($r2) in <com.atlassian.plugin.manager.DependentPlugins$lambda_toStringList_4__119: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.manager.DependentPlugins: java.lang.String lambda$toStringList$4(com.atlassian.plugin.manager.DependentPlugins$DependentPlugin)>
CLINIT edge: $z0 = staticinvoke <com.atlassian.plugin.manager.DependentPlugins: boolean lambda$getPluginsByTypes$6(java.util.Set,com.atlassian.plugin.manager.DependentPlugins$DependentPlugin)>($r3, $r2) in <com.atlassian.plugin.manager.DependentPlugins$lambda_getPluginsByTypes_6__120: boolean test(java.lang.Object)> ==> <com.atlassian.plugin.manager.DependentPlugins: void <clinit>()>
STATIC edge: $z0 = staticinvoke <com.atlassian.plugin.manager.DependentPlugins: boolean lambda$getPluginsByTypes$6(java.util.Set,com.atlassian.plugin.manager.DependentPlugins$DependentPlugin)>($r3, $r2) in <com.atlassian.plugin.manager.DependentPlugins$lambda_getPluginsByTypes_6__120: boolean test(java.lang.Object)> ==> <com.atlassian.plugin.manager.DependentPlugins: boolean lambda$getPluginsByTypes$6(java.util.Set,com.atlassian.plugin.manager.DependentPlugins$DependentPlugin)>
STATIC edge: $z0 = staticinvoke <java.util.Objects: boolean nonNull(java.lang.Object)>($r2) in <com.atlassian.plugin.parsers.PluginDescriptorReader$nonNull__122: boolean test(java.lang.Object)> ==> <java.util.Objects: boolean nonNull(java.lang.Object)>
CLINIT edge: $z0 = staticinvoke <com.atlassian.plugin.parsers.PluginDescriptorReader: boolean lambda$getModules$1(org.dom4j.Element)>($r2) in <com.atlassian.plugin.parsers.PluginDescriptorReader$lambda_getModules_1__123: boolean test(java.lang.Object)> ==> <com.atlassian.plugin.parsers.PluginDescriptorReader: void <clinit>()>
STATIC edge: $z0 = staticinvoke <com.atlassian.plugin.parsers.PluginDescriptorReader: boolean lambda$getModules$1(org.dom4j.Element)>($r2) in <com.atlassian.plugin.parsers.PluginDescriptorReader$lambda_getModules_1__123: boolean test(java.lang.Object)> ==> <com.atlassian.plugin.parsers.PluginDescriptorReader: boolean lambda$getModules$1(org.dom4j.Element)>
CLINIT edge: $z0 = staticinvoke <com.atlassian.plugin.parsers.PluginDescriptorReader: boolean lambda$getPluginInformation$0(org.dom4j.Element)>($r2) in <com.atlassian.plugin.parsers.PluginDescriptorReader$lambda_getPluginInformation_0__126: boolean test(java.lang.Object)> ==> <com.atlassian.plugin.parsers.PluginDescriptorReader: void <clinit>()>
STATIC edge: $z0 = staticinvoke <com.atlassian.plugin.parsers.PluginDescriptorReader: boolean lambda$getPluginInformation$0(org.dom4j.Element)>($r2) in <com.atlassian.plugin.parsers.PluginDescriptorReader$lambda_getPluginInformation_0__126: boolean test(java.lang.Object)> ==> <com.atlassian.plugin.parsers.PluginDescriptorReader: boolean lambda$getPluginInformation$0(org.dom4j.Element)>
STATIC edge: $z0 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginPersistentState: boolean lambda$getPluginEnabledStateMap$0(com.atlassian.plugin.Plugin,java.util.Map$Entry)>($r3, $r2) in <com.atlassian.plugin.manager.DefaultPluginPersistentState$lambda_getPluginEnabledStateMap_0__128: boolean test(java.lang.Object)> ==> <com.atlassian.plugin.manager.DefaultPluginPersistentState: boolean lambda$getPluginEnabledStateMap$0(com.atlassian.plugin.Plugin,java.util.Map$Entry)>
STATIC edge: $i0 = staticinvoke <com.atlassian.plugin.hostcontainer.SimpleConstructorHostContainer: int lambda$findConstructorsLargestFirst$0(java.lang.reflect.Constructor,java.lang.reflect.Constructor)>($r3, $r4) in <com.atlassian.plugin.hostcontainer.SimpleConstructorHostContainer$lambda_findConstructorsLargestFirst_0__131: int compare(java.lang.Object,java.lang.Object)> ==> <com.atlassian.plugin.hostcontainer.SimpleConstructorHostContainer: int lambda$findConstructorsLargestFirst$0(java.lang.reflect.Constructor,java.lang.reflect.Constructor)>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginPersistentState: com.atlassian.plugin.manager.PluginEnabledState lambda$getPluginEnabledStateMap$1(java.util.Map$Entry)>($r2) in <com.atlassian.plugin.manager.DefaultPluginPersistentState$lambda_getPluginEnabledStateMap_1__133: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.manager.DefaultPluginPersistentState: com.atlassian.plugin.manager.PluginEnabledState lambda$getPluginEnabledStateMap$1(java.util.Map$Entry)>
CLINIT edge: $z0 = staticinvoke <com.atlassian.plugin.loaders.DirectoryScanner: boolean lambda$scan$0(java.io.File,java.lang.String)>($r1, $r2) in <com.atlassian.plugin.loaders.DirectoryScanner$lambda_scan_0__134: boolean accept(java.io.File,java.lang.String)> ==> <com.atlassian.plugin.loaders.DirectoryScanner: void <clinit>()>
STATIC edge: $z0 = staticinvoke <com.atlassian.plugin.loaders.DirectoryScanner: boolean lambda$scan$0(java.io.File,java.lang.String)>($r1, $r2) in <com.atlassian.plugin.loaders.DirectoryScanner$lambda_scan_0__134: boolean accept(java.io.File,java.lang.String)> ==> <com.atlassian.plugin.loaders.DirectoryScanner: boolean lambda$scan$0(java.io.File,java.lang.String)>
CLINIT edge: $z0 = staticinvoke <com.atlassian.plugin.impl.AbstractPlugin: boolean lambda$getPermissionsForCurrentInstallationMode$0(com.atlassian.plugin.InstallationMode,com.atlassian.plugin.PluginPermission)>($r3, $r2) in <com.atlassian.plugin.impl.AbstractPlugin$lambda_getPermissionsForCurrentInstallationMode_0__136: boolean test(java.lang.Object)> ==> <com.atlassian.plugin.impl.AbstractPlugin: void <clinit>()>
STATIC edge: $z0 = staticinvoke <com.atlassian.plugin.impl.AbstractPlugin: boolean lambda$getPermissionsForCurrentInstallationMode$0(com.atlassian.plugin.InstallationMode,com.atlassian.plugin.PluginPermission)>($r3, $r2) in <com.atlassian.plugin.impl.AbstractPlugin$lambda_getPermissionsForCurrentInstallationMode_0__136: boolean test(java.lang.Object)> ==> <com.atlassian.plugin.impl.AbstractPlugin: boolean lambda$getPermissionsForCurrentInstallationMode$0(com.atlassian.plugin.InstallationMode,com.atlassian.plugin.PluginPermission)>
CLINIT edge: $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0) in <com.atlassian.plugin.impl.AbstractPlugin$equals__138: java.lang.Object apply(java.lang.Object)> ==> <java.lang.Boolean: void <clinit>()>
STATIC edge: $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0) in <com.atlassian.plugin.impl.AbstractPlugin$equals__138: java.lang.Object apply(java.lang.Object)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
CLINIT edge: $r3 = staticinvoke <com.atlassian.plugin.util.PluginUtils: java.lang.String lambda$asString$0(com.atlassian.plugin.Application)>($r2) in <com.atlassian.plugin.util.PluginUtils$lambda_asString_0__139: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.util.PluginUtils: void <clinit>()>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.util.PluginUtils: java.lang.String lambda$asString$0(com.atlassian.plugin.Application)>($r2) in <com.atlassian.plugin.util.PluginUtils$lambda_asString_0__139: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.util.PluginUtils: java.lang.String lambda$asString$0(com.atlassian.plugin.Application)>
STATIC edge: $z0 = staticinvoke <java.util.Objects: boolean nonNull(java.lang.Object)>($r2) in <com.atlassian.plugin.manager.ProductPluginAccessorBase$nonNull__140: boolean test(java.lang.Object)> ==> <java.util.Objects: boolean nonNull(java.lang.Object)>
CLINIT edge: $z0 = staticinvoke <com.atlassian.plugin.manager.ProductPluginAccessorBase: boolean lambda$getEnabledPlugins$0(com.atlassian.plugin.Plugin)>($r2) in <com.atlassian.plugin.manager.ProductPluginAccessorBase$lambda_getEnabledPlugins_0__141: boolean test(java.lang.Object)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase: void <clinit>()>
STATIC edge: $z0 = staticinvoke <com.atlassian.plugin.manager.ProductPluginAccessorBase: boolean lambda$getEnabledPlugins$0(com.atlassian.plugin.Plugin)>($r2) in <com.atlassian.plugin.manager.ProductPluginAccessorBase$lambda_getEnabledPlugins_0__141: boolean test(java.lang.Object)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase: boolean lambda$getEnabledPlugins$0(com.atlassian.plugin.Plugin)>
CLINIT edge: $r3 = staticinvoke <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.stream.Stream lambda$getModuleDescriptors$2(com.atlassian.plugin.Plugin)>($r2) in <com.atlassian.plugin.manager.ProductPluginAccessorBase$lambda_getModuleDescriptors_2__142: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase: void <clinit>()>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.stream.Stream lambda$getModuleDescriptors$2(com.atlassian.plugin.Plugin)>($r2) in <com.atlassian.plugin.manager.ProductPluginAccessorBase$lambda_getModuleDescriptors_2__142: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.stream.Stream lambda$getModuleDescriptors$2(com.atlassian.plugin.Plugin)>
CLINIT edge: $r3 = staticinvoke <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.lang.Object lambda$getModules$1(com.atlassian.plugin.ModuleDescriptor)>($r2) in <com.atlassian.plugin.manager.ProductPluginAccessorBase$lambda_getModules_1__143: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase: void <clinit>()>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.lang.Object lambda$getModules$1(com.atlassian.plugin.ModuleDescriptor)>($r2) in <com.atlassian.plugin.manager.ProductPluginAccessorBase$lambda_getModules_1__143: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.lang.Object lambda$getModules$1(com.atlassian.plugin.ModuleDescriptor)>
CLINIT edge: $r3 = staticinvoke <com.atlassian.plugin.manager.ProductPluginAccessorBase: com.atlassian.plugin.ModuleDescriptor lambda$getModuleDescriptors$3(com.atlassian.plugin.ModuleDescriptor)>($r2) in <com.atlassian.plugin.manager.ProductPluginAccessorBase$lambda_getModuleDescriptors_3__144: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase: void <clinit>()>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.manager.ProductPluginAccessorBase: com.atlassian.plugin.ModuleDescriptor lambda$getModuleDescriptors$3(com.atlassian.plugin.ModuleDescriptor)>($r2) in <com.atlassian.plugin.manager.ProductPluginAccessorBase$lambda_getModuleDescriptors_3__144: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase: com.atlassian.plugin.ModuleDescriptor lambda$getModuleDescriptors$3(com.atlassian.plugin.ModuleDescriptor)>
STATIC edge: $z0 = staticinvoke <java.util.Objects: boolean nonNull(java.lang.Object)>($r1) in <com.atlassian.plugin.manager.ProductPluginAccessorBase$nonNull__145: boolean test(java.lang.Object)> ==> <java.util.Objects: boolean nonNull(java.lang.Object)>
CLINIT edge: $r3 = staticinvoke <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.stream.Stream lambda$getEnabledModuleDescriptorsByClass$4(com.atlassian.plugin.Plugin)>($r2) in <com.atlassian.plugin.manager.ProductPluginAccessorBase$lambda_getEnabledModuleDescriptorsByClass_4__146: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase: void <clinit>()>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.stream.Stream lambda$getEnabledModuleDescriptorsByClass$4(com.atlassian.plugin.Plugin)>($r2) in <com.atlassian.plugin.manager.ProductPluginAccessorBase$lambda_getEnabledModuleDescriptorsByClass_4__146: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.stream.Stream lambda$getEnabledModuleDescriptorsByClass$4(com.atlassian.plugin.Plugin)>
STATIC edge: $l0 = staticinvoke <com.atlassian.plugin.manager.DefaultSafeModeManager$1: long lambda$get$0(java.util.Map$Entry)>($r2) in <com.atlassian.plugin.manager.DefaultSafeModeManager$1$lambda_get_0__151: long applyAsLong(java.lang.Object)> ==> <com.atlassian.plugin.manager.DefaultSafeModeManager$1: long lambda$get$0(java.util.Map$Entry)>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getDescriptionKey$0(org.dom4j.Element)>($r2) in <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getDescriptionKey_0__153: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getDescriptionKey$0(org.dom4j.Element)>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getVendorName$1(org.dom4j.Element)>($r2) in <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getVendorName_1__156: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getVendorName$1(org.dom4j.Element)>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getVendorUrl$2(org.dom4j.Element)>($r2) in <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getVendorUrl_2__157: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getVendorUrl$2(org.dom4j.Element)>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getScopeKey$3(org.dom4j.Element)>($r2) in <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getScopeKey_3__158: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getScopeKey$3(org.dom4j.Element)>
CLINIT edge: $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0) in <com.atlassian.plugin.parsers.PluginInformationReader$isEmpty__159: java.lang.Object apply(java.lang.Object)> ==> <java.lang.Boolean: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0) in <com.atlassian.plugin.parsers.PluginInformationReader$isEmpty__159: java.lang.Object apply(java.lang.Object)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getParameters$4(org.dom4j.Element)>($r2) in <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getParameters_4__160: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getParameters$4(org.dom4j.Element)>
STATIC edge: $z0 = staticinvoke <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler$1: boolean lambda$getScope$0(java.lang.String)>($r2) in <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler$1$lambda_getScope_0__161: boolean test(java.lang.Object)> ==> <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler$1: boolean lambda$getScope$0(java.lang.String)>
STATIC edge: $z0 = staticinvoke <com.atlassian.plugin.parsers.PluginInformationReader: boolean lambda$getPermissions$7(com.atlassian.plugin.InstallationMode,java.util.Optional)>($r3, $r2) in <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getPermissions_7__163: boolean apply(java.lang.Object)> ==> <com.atlassian.plugin.parsers.PluginInformationReader: boolean lambda$getPermissions$7(com.atlassian.plugin.InstallationMode,java.util.Optional)>
STATIC edge: $r4 = staticinvoke <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.Iterable lambda$getModuleScanFolders$8(java.util.Set,org.dom4j.Element)>($r3, $r2) in <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getModuleScanFolders_8__165: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.Iterable lambda$getModuleScanFolders$8(java.util.Set,org.dom4j.Element)>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.parsers.PluginInformationReader: java.util.stream.Stream lambda$getPermissionElements$10(org.dom4j.Element)>($r2) in <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getPermissionElements_10__166: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.parsers.PluginInformationReader: java.util.stream.Stream lambda$getPermissionElements$10(org.dom4j.Element)>
STATIC edge: $r4 = staticinvoke <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.Iterable lambda$getModuleScanFolders$9(java.util.Set,java.lang.Iterable)>($r3, $r2) in <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getModuleScanFolders_9__167: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.Iterable lambda$getModuleScanFolders$9(java.util.Set,java.lang.Iterable)>
STATIC edge: $z0 = staticinvoke <com.atlassian.plugin.parsers.PluginInformationReader: boolean lambda$getParamElements$12(org.dom4j.Element)>($r2) in <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getParamElements_12__168: boolean test(java.lang.Object)> ==> <com.atlassian.plugin.parsers.PluginInformationReader: boolean lambda$getParamElements$12(org.dom4j.Element)>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional lambda$getPermissions$5(org.dom4j.Element)>($r2) in <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getPermissions_5__170: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional lambda$getPermissions$5(org.dom4j.Element)>
CLINIT edge: $r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>() in <com.atlassian.plugin.parsers.PluginInformationReader$emptyList__171: java.lang.Object get()> ==> <java.util.Collections: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>() in <com.atlassian.plugin.parsers.PluginInformationReader$emptyList__171: java.lang.Object get()> ==> <java.util.Collections: java.util.List emptyList()>
STATIC edge: $z0 = staticinvoke <com.atlassian.plugin.parsers.PluginInformationReader: boolean lambda$getPermissionElements$11(org.dom4j.Element)>($r2) in <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getPermissionElements_11__172: boolean test(java.lang.Object)> ==> <com.atlassian.plugin.parsers.PluginInformationReader: boolean lambda$getPermissionElements$11(org.dom4j.Element)>
STATIC edge: $r2 = staticinvoke <java.util.stream.Stream: java.util.stream.Stream of(java.lang.Object)>($r1) in <com.atlassian.plugin.parsers.PluginInformationReader$of__173: java.lang.Object apply(java.lang.Object)> ==> <java.util.stream.Stream: java.util.stream.Stream of(java.lang.Object)>
STATIC edge: $r1 = staticinvoke <java.util.stream.Stream: java.util.stream.Stream empty()>() in <com.atlassian.plugin.parsers.PluginInformationReader$empty__174: java.lang.Object get()> ==> <java.util.stream.Stream: java.util.stream.Stream empty()>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.InstallationMode: java.util.Optional of(java.lang.String)>($r2) in <com.atlassian.plugin.parsers.PluginInformationReader$of__175: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.InstallationMode: java.util.Optional of(java.lang.String)>
STATIC edge: $z0 = staticinvoke <java.util.Objects: boolean nonNull(java.lang.Object)>($r2) in <com.atlassian.plugin.util.ChainingClassLoader$nonNull__176: boolean test(java.lang.Object)> ==> <java.util.Objects: boolean nonNull(java.lang.Object)>
STATIC edge: $r4 = staticinvoke <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.Boolean lambda$null$6(com.atlassian.plugin.InstallationMode,com.atlassian.plugin.InstallationMode)>($r3, $r2) in <com.atlassian.plugin.parsers.PluginInformationReader$lambda_null_6__177: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.Boolean lambda$null$6(com.atlassian.plugin.InstallationMode,com.atlassian.plugin.InstallationMode)>
CLINIT edge: $r1 = staticinvoke <com.atlassian.plugin.manager.PluginTransactionContext: java.util.concurrent.atomic.AtomicInteger lambda$static$0()>() in <com.atlassian.plugin.manager.PluginTransactionContext$lambda_static_0__178: java.lang.Object get()> ==> <com.atlassian.plugin.manager.PluginTransactionContext: void <clinit>()>
STATIC edge: $r1 = staticinvoke <com.atlassian.plugin.manager.PluginTransactionContext: java.util.concurrent.atomic.AtomicInteger lambda$static$0()>() in <com.atlassian.plugin.manager.PluginTransactionContext$lambda_static_0__178: java.lang.Object get()> ==> <com.atlassian.plugin.manager.PluginTransactionContext: java.util.concurrent.atomic.AtomicInteger lambda$static$0()>
STATIC edge: $r2 = staticinvoke <com.atlassian.plugin.event.impl.DefaultPluginEventManager: java.util.List lambda$new$0(com.atlassian.plugin.event.impl.ListenerMethodSelector[])>($r1) in <com.atlassian.plugin.event.impl.DefaultPluginEventManager$lambda_new_0__180: java.util.List getListenerHandlers()> ==> <com.atlassian.plugin.event.impl.DefaultPluginEventManager: java.util.List lambda$new$0(com.atlassian.plugin.event.impl.ListenerMethodSelector[])>
STATIC edge: $z0 = staticinvoke <java.util.Objects: boolean nonNull(java.lang.Object)>($r1) in <com.atlassian.plugin.manager.SafeModuleExtractor$nonNull__182: boolean test(java.lang.Object)> ==> <java.util.Objects: boolean nonNull(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$Builder: boolean lambda$new$0(com.atlassian.plugin.Plugin)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager$Builder$lambda_new_0__183: boolean test(java.lang.Object)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$Builder: boolean lambda$new$0(com.atlassian.plugin.Plugin)>
CLINIT edge: $r3 = staticinvoke <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: java.util.stream.Stream lambda$getModuleDescriptors$0(com.atlassian.plugin.Plugin)>($r2) in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor$lambda_getModuleDescriptors_0__184: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: void <clinit>()>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: java.util.stream.Stream lambda$getModuleDescriptors$0(com.atlassian.plugin.Plugin)>($r2) in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor$lambda_getModuleDescriptors_0__184: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: java.util.stream.Stream lambda$getModuleDescriptors$0(com.atlassian.plugin.Plugin)>
CLINIT edge: $r3 = staticinvoke <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: com.atlassian.plugin.ModuleDescriptor lambda$getModuleDescriptors$1(com.atlassian.plugin.ModuleDescriptor)>($r2) in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor$lambda_getModuleDescriptors_1__185: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: void <clinit>()>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: com.atlassian.plugin.ModuleDescriptor lambda$getModuleDescriptors$1(com.atlassian.plugin.ModuleDescriptor)>($r2) in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor$lambda_getModuleDescriptors_1__185: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: com.atlassian.plugin.ModuleDescriptor lambda$getModuleDescriptors$1(com.atlassian.plugin.ModuleDescriptor)>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.manager.PluginPersistentState: java.lang.Boolean lambda$getPluginStateMap$1(java.util.Map$Entry)>($r2) in <com.atlassian.plugin.manager.PluginPersistentState$lambda_getPluginStateMap_1__188: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.manager.PluginPersistentState: java.lang.Boolean lambda$getPluginStateMap$1(java.util.Map$Entry)>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.manager.PluginPersistentState: java.lang.Boolean lambda$getMap$0(java.util.Map$Entry)>($r2) in <com.atlassian.plugin.manager.PluginPersistentState$lambda_getMap_0__189: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.manager.PluginPersistentState: java.lang.Boolean lambda$getMap$0(java.util.Map$Entry)>
CLINIT edge: $r4 = staticinvoke <com.atlassian.plugin.parsers.SafeModeCommandLineArguments: java.lang.Boolean lambda$isDisabledByParam$0(java.lang.String,java.util.List)>($r3, $r2) in <com.atlassian.plugin.parsers.SafeModeCommandLineArguments$lambda_isDisabledByParam_0__190: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.parsers.SafeModeCommandLineArguments: void <clinit>()>
STATIC edge: $r4 = staticinvoke <com.atlassian.plugin.parsers.SafeModeCommandLineArguments: java.lang.Boolean lambda$isDisabledByParam$0(java.lang.String,java.util.List)>($r3, $r2) in <com.atlassian.plugin.parsers.SafeModeCommandLineArguments$lambda_isDisabledByParam_0__190: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.parsers.SafeModeCommandLineArguments: java.lang.Boolean lambda$isDisabledByParam$0(java.lang.String,java.util.List)>
CLINIT edge: $r0 = new org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarHandler in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarHandler: void <clinit>()> ==> <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarHandler: void <clinit>()>
CLINIT edge: <com.atlassian.plugin.repositories.FilePluginInstaller: org.slf4j.Logger log> = $r0 in <com.atlassian.plugin.repositories.FilePluginInstaller: void <clinit>()> ==> <com.atlassian.plugin.repositories.FilePluginInstaller: void <clinit>()>
STATIC edge: $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/atlassian/plugin/repositories/FilePluginInstaller;") in <com.atlassian.plugin.repositories.FilePluginInstaller: void <clinit>()> ==> <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
CLINIT edge: <com.atlassian.plugin.util.VersionStringComparator: java.util.regex.Pattern START_WITH_INT_PATTERN> = $r0 in <com.atlassian.plugin.util.VersionStringComparator: void <clinit>()> ==> <com.atlassian.plugin.util.VersionStringComparator: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(".*-SNAPSHOT$") in <com.atlassian.plugin.util.VersionStringComparator: void <clinit>()> ==> <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
STATIC edge: $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("(^\\d+)") in <com.atlassian.plugin.util.VersionStringComparator: void <clinit>()> ==> <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
CLINIT edge: <com.atlassian.plugin.util.ClassLoaderStack: java.lang.ThreadLocal CLASS_LOADER_STACK> = $r0 in <com.atlassian.plugin.util.ClassLoaderStack: void <clinit>()> ==> <com.atlassian.plugin.util.ClassLoaderStack: void <clinit>()>
CLINIT edge: <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode: com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode UNLOCKED> = $r0 in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode: void <clinit>()> ==> <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode: void <clinit>()>
CLINIT edge: $r0 = <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode: java.lang.String PROPERTY_NAME> in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode: java.lang.String access$100()> ==> <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode: void <clinit>()>
CLINIT edge: $r0 = <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode: java.lang.String PROPERTY_NAME> in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode: com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode current()> ==> <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode: void <clinit>()>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.util.EnumUtils: java.lang.Enum enumValueFromProperty(java.lang.String,java.lang.Enum[],java.lang.Enum)>($r0, $r1, $r2) in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode: com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode current()> ==> <com.atlassian.plugin.util.EnumUtils: java.lang.Enum enumValueFromProperty(java.lang.String,java.lang.Enum[],java.lang.Enum)>
STATIC edge: $r1 = staticinvoke <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode: com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode[] values()>() in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode: com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode current()> ==> <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode: com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode[] values()>
CLINIT edge: <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore: org.slf4j.Logger log> = $r0 in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore: void <clinit>()> ==> <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore: void <clinit>()>
STATIC edge: $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/atlassian/plugin/manager/store/SynchronizedPluginPersistentStateStore;") in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore: void <clinit>()> ==> <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
CLINIT edge: <java.lang.Integer: java.lang.Class TYPE> = null in <java.lang.Integer: void <clinit>()> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: <com.atlassian.plugin.parsers.XmlDescriptorParserUtils: org.slf4j.Logger log> = $r0 in <com.atlassian.plugin.parsers.XmlDescriptorParserUtils: void <clinit>()> ==> <com.atlassian.plugin.parsers.XmlDescriptorParserUtils: void <clinit>()>
STATIC edge: $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/atlassian/plugin/parsers/XmlDescriptorParserUtils;") in <com.atlassian.plugin.parsers.XmlDescriptorParserUtils: void <clinit>()> ==> <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
CLINIT edge: $r8 = <com.atlassian.plugin.parsers.XmlDescriptorParserUtils: org.slf4j.Logger log> in <com.atlassian.plugin.parsers.XmlDescriptorParserUtils: com.atlassian.plugin.ModuleDescriptor newModuleDescriptor(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.parsers.XmlDescriptorParserUtils: void <clinit>()>
STATIC edge: r7 = staticinvoke <com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptorFactory: com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptor createUnrecognisedModuleDescriptor(com.atlassian.plugin.Plugin,org.dom4j.Element,java.lang.Throwable,com.atlassian.plugin.ModuleDescriptorFactory)>(r6, r0, $r4, r2) in <com.atlassian.plugin.parsers.XmlDescriptorParserUtils: com.atlassian.plugin.ModuleDescriptor newModuleDescriptor(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptorFactory: com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptor createUnrecognisedModuleDescriptor(com.atlassian.plugin.Plugin,org.dom4j.Element,java.lang.Throwable,com.atlassian.plugin.ModuleDescriptorFactory)>
CLINIT edge: <java.lang.Boolean: java.lang.Class TYPE> = null in <java.lang.Boolean: void <clinit>()> ==> <java.lang.Boolean: void <clinit>()>
CLINIT edge: <java.lang.Float: java.lang.Class TYPE> = null in <java.lang.Float: void <clinit>()> ==> <java.lang.Float: void <clinit>()>
STATIC edge: $r8 = staticinvoke <com.atlassian.plugin.util.ClassUtils: java.lang.Class getClass(java.lang.reflect.Type)>($r7) in <com.atlassian.plugin.util.ClassUtils: java.lang.Class getClass(java.lang.reflect.Type)> ==> <com.atlassian.plugin.util.ClassUtils: java.lang.Class getClass(java.lang.reflect.Type)>
STATIC edge: $r4 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(r3, 0) in <com.atlassian.plugin.util.ClassUtils: java.lang.Class getClass(java.lang.reflect.Type)> ==> <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>
STATIC edge: r3 = staticinvoke <com.atlassian.plugin.util.ClassUtils: java.lang.Class getClass(java.lang.reflect.Type)>(r2) in <com.atlassian.plugin.util.ClassUtils: java.lang.Class getClass(java.lang.reflect.Type)> ==> <com.atlassian.plugin.util.ClassUtils: java.lang.Class getClass(java.lang.reflect.Type)>
CLINIT edge: <com.atlassian.plugin.util.VersionRange: java.util.regex.Pattern RANGE_PATTERN> = $r0 in <com.atlassian.plugin.util.VersionRange: void <clinit>()> ==> <com.atlassian.plugin.util.VersionRange: void <clinit>()>
STATIC edge: $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("(\\(|\\[)?([\\d\\w]+(?:[\\.-][\\d\\w]+)*)?(?:,([\\d\\w]+(?:[\\.-][\\d\\w]+)*)?)?(\\)|\\])?") in <com.atlassian.plugin.util.VersionRange: void <clinit>()> ==> <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
CLINIT edge: <com.atlassian.plugin.manager.store.PluginPersistentStateStoreMigrator: org.slf4j.Logger log> = $r0 in <com.atlassian.plugin.manager.store.PluginPersistentStateStoreMigrator: void <clinit>()> ==> <com.atlassian.plugin.manager.store.PluginPersistentStateStoreMigrator: void <clinit>()>
STATIC edge: $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/atlassian/plugin/manager/store/PluginPersistentStateStoreMigrator;") in <com.atlassian.plugin.manager.store.PluginPersistentStateStoreMigrator: void <clinit>()> ==> <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
CLINIT edge: <com.atlassian.plugin.JarPluginArtifact: org.slf4j.Logger log> = $r0 in <com.atlassian.plugin.JarPluginArtifact: void <clinit>()> ==> <com.atlassian.plugin.JarPluginArtifact: void <clinit>()>
STATIC edge: $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/atlassian/plugin/JarPluginArtifact;") in <com.atlassian.plugin.JarPluginArtifact: void <clinit>()> ==> <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
CLINIT edge: <com.atlassian.plugin.parsers.XmlDescriptorParser: org.slf4j.Logger log> = $r0 in <com.atlassian.plugin.parsers.XmlDescriptorParser: void <clinit>()> ==> <com.atlassian.plugin.parsers.XmlDescriptorParser: void <clinit>()>
STATIC edge: $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/atlassian/plugin/parsers/XmlDescriptorParser;") in <com.atlassian.plugin.parsers.XmlDescriptorParser: void <clinit>()> ==> <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
CLINIT edge: <com.atlassian.plugin.parsers.PluginDescriptorReader: org.slf4j.Logger log> = $r0 in <com.atlassian.plugin.parsers.PluginDescriptorReader: void <clinit>()> ==> <com.atlassian.plugin.parsers.PluginDescriptorReader: void <clinit>()>
STATIC edge: $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/atlassian/plugin/parsers/PluginDescriptorReader;") in <com.atlassian.plugin.parsers.PluginDescriptorReader: void <clinit>()> ==> <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
CLINIT edge: $r0 = new com.atlassian.plugin.parsers.XmlDescriptorParser$NoopErrorHandler in <com.atlassian.plugin.parsers.XmlDescriptorParser$NoopErrorHandler: void <clinit>()> ==> <com.atlassian.plugin.parsers.XmlDescriptorParser$NoopErrorHandler: void <clinit>()>
CLINIT edge: <com.atlassian.plugin.util.PluginUtils: org.slf4j.Logger logger> = $r0 in <com.atlassian.plugin.util.PluginUtils: void <clinit>()> ==> <com.atlassian.plugin.util.PluginUtils: void <clinit>()>
STATIC edge: $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/atlassian/plugin/util/PluginUtils;") in <com.atlassian.plugin.util.PluginUtils: void <clinit>()> ==> <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
CLINIT edge: $r1 = new java.lang.String in <com.atlassian.plugin.util.PluginUtils: void <clinit>()> ==> <java.lang.String: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of()>() in <com.atlassian.plugin.parsers.PluginDescriptorReader: java.util.List elements(org.dom4j.Element,java.lang.String)> ==> <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of()>
STATIC edge: $r2 = staticinvoke <com.google.common.base.Joiner: com.google.common.base.Joiner on(java.lang.String)>(",") in <com.atlassian.plugin.util.PluginUtils: java.lang.String asString(java.util.Set)> ==> <com.google.common.base.Joiner: com.google.common.base.Joiner on(java.lang.String)>
STATIC edge: $r7 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>() in <com.atlassian.plugin.util.PluginUtils: java.lang.String asString(java.util.Set)> ==> <java.util.stream.Collectors: java.util.stream.Collector toList()>
STATIC edge: $r5 = staticinvoke <com.atlassian.plugin.util.PluginUtils$lambda_asString_0__139: java.util.function.Function bootstrap$()>() in <com.atlassian.plugin.util.PluginUtils: java.lang.String asString(java.util.Set)> ==> <com.atlassian.plugin.util.PluginUtils$lambda_asString_0__139: java.util.function.Function bootstrap$()>
STATIC edge: $r6 = staticinvoke <com.atlassian.plugin.util.ModuleRestricts: com.atlassian.plugin.util.ModuleRestricts parseApplicationsFromAttribute(java.lang.String)>(r1) in <com.atlassian.plugin.util.ModuleRestricts: com.atlassian.plugin.util.ModuleRestricts parse(org.dom4j.Element)> ==> <com.atlassian.plugin.util.ModuleRestricts: com.atlassian.plugin.util.ModuleRestricts parseApplicationsFromAttribute(java.lang.String)>
STATIC edge: $r5 = staticinvoke <com.atlassian.plugin.util.ModuleRestricts: com.atlassian.plugin.util.ModuleRestricts parseApplicationsFromRestrictElements(java.util.List)>(r4) in <com.atlassian.plugin.util.ModuleRestricts: com.atlassian.plugin.util.ModuleRestricts parse(org.dom4j.Element)> ==> <com.atlassian.plugin.util.ModuleRestricts: com.atlassian.plugin.util.ModuleRestricts parseApplicationsFromRestrictElements(java.util.List)>
CLINIT edge: <com.atlassian.plugin.impl.AbstractPlugin: org.slf4j.Logger log> = $r0 in <com.atlassian.plugin.impl.AbstractPlugin: void <clinit>()> ==> <com.atlassian.plugin.impl.AbstractPlugin: void <clinit>()>
STATIC edge: $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/atlassian/plugin/impl/AbstractPlugin;") in <com.atlassian.plugin.impl.AbstractPlugin: void <clinit>()> ==> <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
CLINIT edge: $r9 = staticinvoke <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange parse(java.lang.String)>(r1) in <com.atlassian.plugin.util.ModuleRestricts: com.atlassian.plugin.util.VersionRange parseVersionRange(org.dom4j.Element)> ==> <com.atlassian.plugin.util.VersionRange: void <clinit>()>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange all()>() in <com.atlassian.plugin.util.ModuleRestricts: com.atlassian.plugin.util.VersionRange parseVersionRange(org.dom4j.Element)> ==> <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange all()>
STATIC edge: $r8 = staticinvoke <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange parse(java.lang.String)>($r7) in <com.atlassian.plugin.util.ModuleRestricts: com.atlassian.plugin.util.VersionRange parseVersionRange(org.dom4j.Element)> ==> <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange parse(java.lang.String)>
STATIC edge: r10 = staticinvoke <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange empty()>() in <com.atlassian.plugin.util.ModuleRestricts: com.atlassian.plugin.util.VersionRange parseVersionRange(org.dom4j.Element)> ==> <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange empty()>
STATIC edge: $r9 = staticinvoke <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange parse(java.lang.String)>(r1) in <com.atlassian.plugin.util.ModuleRestricts: com.atlassian.plugin.util.VersionRange parseVersionRange(org.dom4j.Element)> ==> <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange parse(java.lang.String)>
CLINIT edge: $r3 = staticinvoke <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange all()>() in <com.atlassian.plugin.util.ModuleRestricts: com.atlassian.plugin.util.VersionRange parseVersionRange(org.dom4j.Element)> ==> <com.atlassian.plugin.util.VersionRange: void <clinit>()>
CLINIT edge: r10 = staticinvoke <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange empty()>() in <com.atlassian.plugin.util.ModuleRestricts: com.atlassian.plugin.util.VersionRange parseVersionRange(org.dom4j.Element)> ==> <com.atlassian.plugin.util.VersionRange: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.atlassian.plugin.InstallationMode: java.util.Optional of(java.lang.String)>($r1) in <com.atlassian.plugin.util.ModuleRestricts: java.util.Optional parseInstallationMode(org.dom4j.Element)> ==> <com.atlassian.plugin.InstallationMode: java.util.Optional of(java.lang.String)>
CLINIT edge: <java.lang.String: java.util.Comparator CASE_INSENSITIVE_ORDER> = null in <java.lang.String: void <clinit>()> ==> <java.lang.String: void <clinit>()>
STATIC edge: r9 = staticinvoke <com.atlassian.plugin.url.InnerJarURLConnection: java.lang.String normalizeUrlPath(java.lang.String)>($r1) in <com.atlassian.plugin.url.InnerJarURLConnection: java.net.URL normaliseURL(java.net.URL)> ==> <com.atlassian.plugin.url.InnerJarURLConnection: java.lang.String normalizeUrlPath(java.lang.String)>
CLINIT edge: <com.atlassian.plugin.util.FileUtils: org.slf4j.Logger log> = $r0 in <com.atlassian.plugin.util.FileUtils: void <clinit>()> ==> <com.atlassian.plugin.util.FileUtils: void <clinit>()>
STATIC edge: $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/atlassian/plugin/util/FileUtils;") in <com.atlassian.plugin.util.FileUtils: void <clinit>()> ==> <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
CLINIT edge: <com.atlassian.plugin.util.zip.AbstractUnzipper: org.slf4j.Logger log> = $r0 in <com.atlassian.plugin.util.zip.AbstractUnzipper: void <clinit>()> ==> <com.atlassian.plugin.util.zip.AbstractUnzipper: void <clinit>()>
STATIC edge: $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/atlassian/plugin/util/zip/FileUnzipper;") in <com.atlassian.plugin.util.zip.AbstractUnzipper: void <clinit>()> ==> <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
CLINIT edge: <com.atlassian.plugin.manager.DependentPlugins: java.util.Set ALL_TYPES> = $r4 in <com.atlassian.plugin.manager.DependentPlugins: void <clinit>()> ==> <com.atlassian.plugin.manager.DependentPlugins: void <clinit>()>
STATIC edge: $r3 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet of(java.lang.Object,java.lang.Object,java.lang.Object)>($r2, $r1, $r0) in <com.atlassian.plugin.manager.DependentPlugins: void <clinit>()> ==> <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet of(java.lang.Object,java.lang.Object,java.lang.Object)>
CLINIT edge: <com.atlassian.plugin.util.ChainingClassLoader: org.slf4j.Logger log> = $r0 in <com.atlassian.plugin.util.ChainingClassLoader: void <clinit>()> ==> <com.atlassian.plugin.util.ChainingClassLoader: void <clinit>()>
STATIC edge: $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/atlassian/plugin/util/ChainingClassLoader;") in <com.atlassian.plugin.util.ChainingClassLoader: void <clinit>()> ==> <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
CLINIT edge: <com.atlassian.plugin.manager.DefaultPluginManager: org.slf4j.Logger log> = $r0 in <com.atlassian.plugin.manager.DefaultPluginManager: void <clinit>()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void <clinit>()>
STATIC edge: $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/atlassian/plugin/manager/DefaultPluginManager;") in <com.atlassian.plugin.manager.DefaultPluginManager: void <clinit>()> ==> <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
CLINIT edge: <com.atlassian.plugin.manager.StateTracker$State: com.atlassian.plugin.manager.StateTracker$State NOT_STARTED> = $r0 in <com.atlassian.plugin.manager.StateTracker$State: void <clinit>()> ==> <com.atlassian.plugin.manager.StateTracker$State: void <clinit>()>
STATIC edge: $r2 = staticinvoke <java.util.stream.StreamSupport: java.util.stream.Stream stream(java.util.Spliterator,boolean)>($r1, 0) in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Iterable toPluginKeys(java.lang.Iterable)> ==> <java.util.stream.StreamSupport: java.util.stream.Stream stream(java.util.Spliterator,boolean)>
STATIC edge: $r5 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Iterable toPluginKeys(java.lang.Iterable)> ==> <java.util.stream.Collectors: java.util.stream.Collector toList()>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$getKey__33: java.util.function.Function bootstrap$()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Iterable toPluginKeys(java.lang.Iterable)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$getKey__33: java.util.function.Function bootstrap$()>
CLINIT edge: <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: org.slf4j.Logger log> = $r0 in <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: void <clinit>()> ==> <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: void <clinit>()>
STATIC edge: $r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.io.tmpdir") in <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: void <clinit>()> ==> <java.lang.System: java.lang.String getProperty(java.lang.String)>
STATIC edge: $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/atlassian/plugin/instrumentation/PluginSystemInstrumentation;") in <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: void <clinit>()> ==> <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
CLINIT edge: $r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.io.tmpdir") in <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: void <clinit>()> ==> <java.lang.System: void <clinit>()>
CLINIT edge: $r1 = new java.io.File in <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: void <clinit>()> ==> <java.io.File: void <clinit>()>
CLINIT edge: <java.lang.Long: java.lang.Class TYPE> = null in <java.lang.Long: void <clinit>()> ==> <java.lang.Long: void <clinit>()>
CLINIT edge: <com.atlassian.plugin.classloader.PluginsClassLoader: org.slf4j.Logger log> = $r0 in <com.atlassian.plugin.classloader.PluginsClassLoader: void <clinit>()> ==> <com.atlassian.plugin.classloader.PluginsClassLoader: void <clinit>()>
STATIC edge: $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/atlassian/plugin/classloader/PluginsClassLoader;") in <com.atlassian.plugin.classloader.PluginsClassLoader: void <clinit>()> ==> <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
CLINIT edge: <com.atlassian.plugin.manager.PluginTransactionContext: org.slf4j.Logger log> = $r0 in <com.atlassian.plugin.manager.PluginTransactionContext: void <clinit>()> ==> <com.atlassian.plugin.manager.PluginTransactionContext: void <clinit>()>
STATIC edge: $r4 = staticinvoke <java.lang.ThreadLocal: java.lang.ThreadLocal withInitial(java.util.function.Supplier)>($r3) in <com.atlassian.plugin.manager.PluginTransactionContext: void <clinit>()> ==> <java.lang.ThreadLocal: java.lang.ThreadLocal withInitial(java.util.function.Supplier)>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.manager.PluginTransactionContext$init__181: java.util.function.Supplier bootstrap$()>() in <com.atlassian.plugin.manager.PluginTransactionContext: void <clinit>()> ==> <com.atlassian.plugin.manager.PluginTransactionContext$init__181: java.util.function.Supplier bootstrap$()>
STATIC edge: $r2 = staticinvoke <java.lang.ThreadLocal: java.lang.ThreadLocal withInitial(java.util.function.Supplier)>($r1) in <com.atlassian.plugin.manager.PluginTransactionContext: void <clinit>()> ==> <java.lang.ThreadLocal: java.lang.ThreadLocal withInitial(java.util.function.Supplier)>
STATIC edge: $r1 = staticinvoke <com.atlassian.plugin.manager.PluginTransactionContext$lambda_static_0__178: java.util.function.Supplier bootstrap$()>() in <com.atlassian.plugin.manager.PluginTransactionContext: void <clinit>()> ==> <com.atlassian.plugin.manager.PluginTransactionContext$lambda_static_0__178: java.util.function.Supplier bootstrap$()>
STATIC edge: $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/atlassian/plugin/manager/PluginTransactionContext;") in <com.atlassian.plugin.manager.PluginTransactionContext: void <clinit>()> ==> <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
CLINIT edge: $r0 = new com.atlassian.plugin.exception.NoOpPluginExceptionInterception in <com.atlassian.plugin.exception.NoOpPluginExceptionInterception: void <clinit>()> ==> <com.atlassian.plugin.exception.NoOpPluginExceptionInterception: void <clinit>()>
CLINIT edge: <com.atlassian.plugin.manager.SafeModeManager: com.atlassian.plugin.manager.SafeModeManager START_ALL_PLUGINS> = $r0 in <com.atlassian.plugin.manager.SafeModeManager: void <clinit>()> ==> <com.atlassian.plugin.manager.SafeModeManager: void <clinit>()>
CLINIT edge: $r0 = new com.atlassian.plugin.instrumentation.PluginSystemInstrumentation in <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$LazyHolder: void <clinit>()> ==> <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: void <clinit>()>
CLINIT edge: <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$LazyHolder: com.atlassian.plugin.instrumentation.PluginSystemInstrumentation INSTANCE> = $r0 in <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$LazyHolder: void <clinit>()> ==> <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$LazyHolder: void <clinit>()>
CLINIT edge: $r0 = <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$LazyHolder: com.atlassian.plugin.instrumentation.PluginSystemInstrumentation INSTANCE> in <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$LazyHolder: com.atlassian.plugin.instrumentation.PluginSystemInstrumentation access$000()> ==> <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$LazyHolder: void <clinit>()>
CLINIT edge: <com.atlassian.plugin.instrumentation.SingleTimer: org.slf4j.Logger log> = $r0 in <com.atlassian.plugin.instrumentation.SingleTimer: void <clinit>()> ==> <com.atlassian.plugin.instrumentation.SingleTimer: void <clinit>()>
STATIC edge: $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/atlassian/plugin/instrumentation/SingleTimer;") in <com.atlassian.plugin.instrumentation.SingleTimer: void <clinit>()> ==> <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
CLINIT edge: <com.atlassian.plugin.metadata.DefaultRequiredPluginValidator: org.slf4j.Logger log> = $r0 in <com.atlassian.plugin.metadata.DefaultRequiredPluginValidator: void <clinit>()> ==> <com.atlassian.plugin.metadata.DefaultRequiredPluginValidator: void <clinit>()>
STATIC edge: $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/atlassian/plugin/metadata/DefaultRequiredPluginValidator;") in <com.atlassian.plugin.metadata.DefaultRequiredPluginValidator: void <clinit>()> ==> <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
CLINIT edge: <com.atlassian.plugin.util.WaitUntil: org.slf4j.Logger log> = $r0 in <com.atlassian.plugin.util.WaitUntil: void <clinit>()> ==> <com.atlassian.plugin.util.WaitUntil: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Integer: java.lang.Integer getInteger(java.lang.String,int)>("com.atlassian.plugin.startup.wait", 60) in <com.atlassian.plugin.util.WaitUntil: void <clinit>()> ==> <java.lang.Integer: java.lang.Integer getInteger(java.lang.String,int)>
STATIC edge: $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/atlassian/plugin/util/WaitUntil;") in <com.atlassian.plugin.util.WaitUntil: void <clinit>()> ==> <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
CLINIT edge: $r1 = staticinvoke <java.lang.Integer: java.lang.Integer getInteger(java.lang.String,int)>("com.atlassian.plugin.startup.wait", 60) in <com.atlassian.plugin.util.WaitUntil: void <clinit>()> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: $r0 = <com.atlassian.plugin.manager.PluginEnabler: org.slf4j.Logger log> in <com.atlassian.plugin.manager.PluginEnabler: org.slf4j.Logger access$000()> ==> <com.atlassian.plugin.manager.PluginEnabler: void <clinit>()>
CLINIT edge: <com.atlassian.plugin.manager.PluginEnabler: org.slf4j.Logger log> = $r0 in <com.atlassian.plugin.manager.PluginEnabler: void <clinit>()> ==> <com.atlassian.plugin.manager.PluginEnabler: void <clinit>()>
STATIC edge: $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/atlassian/plugin/manager/PluginEnabler;") in <com.atlassian.plugin.manager.PluginEnabler: void <clinit>()> ==> <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
CLINIT edge: <com.atlassian.plugin.jmx.JmxUtil: org.slf4j.Logger log> = $r0 in <com.atlassian.plugin.jmx.JmxUtil: void <clinit>()> ==> <com.atlassian.plugin.jmx.JmxUtil: void <clinit>()>
STATIC edge: $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/atlassian/plugin/jmx/JmxUtil;") in <com.atlassian.plugin.jmx.JmxUtil: void <clinit>()> ==> <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
CLINIT edge: <com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge: java.util.concurrent.atomic.AtomicInteger nextJmxInstance> = $r0 in <com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge: void <clinit>()> ==> <com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge: void <clinit>()>
CLINIT edge: <com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$MatchType: com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$MatchType MATCHES_ANY> = $r0 in <com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$MatchType: void <clinit>()> ==> <com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$MatchType: void <clinit>()>
CLINIT edge: <com.atlassian.plugin.loaders.RosterFileScanner: org.slf4j.Logger log> = $r0 in <com.atlassian.plugin.loaders.RosterFileScanner: void <clinit>()> ==> <com.atlassian.plugin.loaders.RosterFileScanner: void <clinit>()>
STATIC edge: $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/atlassian/plugin/loaders/RosterFileScanner;") in <com.atlassian.plugin.loaders.RosterFileScanner: void <clinit>()> ==> <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
CLINIT edge: <com.atlassian.plugin.loaders.ForwardingPluginLoader: org.slf4j.Logger log> = $r0 in <com.atlassian.plugin.loaders.ForwardingPluginLoader: void <clinit>()> ==> <com.atlassian.plugin.loaders.ForwardingPluginLoader: void <clinit>()>
STATIC edge: $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/atlassian/plugin/loaders/ForwardingPluginLoader;") in <com.atlassian.plugin.loaders.ForwardingPluginLoader: void <clinit>()> ==> <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
CLINIT edge: <com.atlassian.plugin.util.PluginFrameworkUtils: org.slf4j.Logger LOG> = $r0 in <com.atlassian.plugin.util.PluginFrameworkUtils: void <clinit>()> ==> <com.atlassian.plugin.util.PluginFrameworkUtils: void <clinit>()>
STATIC edge: $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/atlassian/plugin/util/PluginFrameworkUtils;") in <com.atlassian.plugin.util.PluginFrameworkUtils: void <clinit>()> ==> <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
CLINIT edge: <com.atlassian.plugin.classloader.DelegationClassLoader: org.slf4j.Logger log> = $r0 in <com.atlassian.plugin.classloader.DelegationClassLoader: void <clinit>()> ==> <com.atlassian.plugin.classloader.DelegationClassLoader: void <clinit>()>
STATIC edge: $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/atlassian/plugin/classloader/DelegationClassLoader;") in <com.atlassian.plugin.classloader.DelegationClassLoader: void <clinit>()> ==> <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
CLINIT edge: $r0 = staticinvoke <java.lang.Long: java.lang.Long getLong(java.lang.String,long)>("com.atlassian.plugin.descriptor.class.cache.timeout.sec", 1800L) in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: void <clinit>()> ==> <java.lang.Long: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Long: java.lang.Long getLong(java.lang.String,long)>("com.atlassian.plugin.module.class.cache.timeout.sec", 1800L) in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: void <clinit>()> ==> <java.lang.Long: java.lang.Long getLong(java.lang.String,long)>
STATIC edge: $r0 = staticinvoke <java.lang.Long: java.lang.Long getLong(java.lang.String,long)>("com.atlassian.plugin.descriptor.class.cache.timeout.sec", 1800L) in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: void <clinit>()> ==> <java.lang.Long: java.lang.Long getLong(java.lang.String,long)>
CLINIT edge: <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: long DESCRIPTOR_TIMEOUT_SEC> = $l0 in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: void <clinit>()> ==> <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: void <clinit>()>
CLINIT edge: <com.atlassian.plugin.manager.SafeModuleExtractor: org.slf4j.Logger log> = $r0 in <com.atlassian.plugin.manager.SafeModuleExtractor: void <clinit>()> ==> <com.atlassian.plugin.manager.SafeModuleExtractor: void <clinit>()>
STATIC edge: $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/atlassian/plugin/manager/SafeModuleExtractor;") in <com.atlassian.plugin.manager.SafeModuleExtractor: void <clinit>()> ==> <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
CLINIT edge: <com.atlassian.plugin.factories.XmlDynamicPluginFactory: org.slf4j.Logger log> = $r0 in <com.atlassian.plugin.factories.XmlDynamicPluginFactory: void <clinit>()> ==> <com.atlassian.plugin.factories.XmlDynamicPluginFactory: void <clinit>()>
STATIC edge: $r1 = staticinvoke <com.atlassian.plugin.factories.XmlDynamicPluginFactory$lambda_static_0__111: java.util.function.Predicate bootstrap$()>() in <com.atlassian.plugin.factories.XmlDynamicPluginFactory: void <clinit>()> ==> <com.atlassian.plugin.factories.XmlDynamicPluginFactory$lambda_static_0__111: java.util.function.Predicate bootstrap$()>
STATIC edge: $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/atlassian/plugin/factories/XmlDynamicPluginFactory;") in <com.atlassian.plugin.factories.XmlDynamicPluginFactory: void <clinit>()> ==> <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
CLINIT edge: <com.atlassian.plugin.util.zip.FileUnzipper: org.slf4j.Logger log> = $r0 in <com.atlassian.plugin.util.zip.FileUnzipper: void <clinit>()> ==> <com.atlassian.plugin.util.zip.FileUnzipper: void <clinit>()>
STATIC edge: $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/atlassian/plugin/util/zip/FileUnzipper;") in <com.atlassian.plugin.util.zip.FileUnzipper: void <clinit>()> ==> <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
CLINIT edge: <com.atlassian.plugin.util.zip.FileUnzipper: org.slf4j.Logger log> = $r0 in <com.atlassian.plugin.util.zip.FileUnzipper: void <clinit>()> ==> <com.atlassian.plugin.util.zip.AbstractUnzipper: void <clinit>()>
CLINIT edge: <com.atlassian.plugin.loaders.ScanningPluginLoader: org.slf4j.Logger log> = $r0 in <com.atlassian.plugin.loaders.ScanningPluginLoader: void <clinit>()> ==> <com.atlassian.plugin.loaders.ScanningPluginLoader: void <clinit>()>
STATIC edge: $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/atlassian/plugin/loaders/ScanningPluginLoader;") in <com.atlassian.plugin.loaders.ScanningPluginLoader: void <clinit>()> ==> <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
CLINIT edge: <com.atlassian.plugin.loaders.DirectoryScanner: org.slf4j.Logger log> = $r0 in <com.atlassian.plugin.loaders.DirectoryScanner: void <clinit>()> ==> <com.atlassian.plugin.loaders.DirectoryScanner: void <clinit>()>
STATIC edge: $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/atlassian/plugin/loaders/DirectoryScanner;") in <com.atlassian.plugin.loaders.DirectoryScanner: void <clinit>()> ==> <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
STATIC edge: r0 = staticinvoke <com.atlassian.plugin.loaders.RosterFilePluginLoader: java.lang.String getReferenceModePropertyName()>() in <com.atlassian.plugin.loaders.RosterFilePluginLoader: com.atlassian.plugin.ReferenceMode referenceModeFromProperty()> ==> <com.atlassian.plugin.loaders.RosterFilePluginLoader: java.lang.String getReferenceModePropertyName()>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.util.EnumUtils: java.lang.Enum enumValueFromProperty(java.lang.String,java.lang.Enum[],java.lang.Enum)>(r0, $r5, $r6) in <com.atlassian.plugin.loaders.RosterFilePluginLoader: com.atlassian.plugin.ReferenceMode referenceModeFromProperty()> ==> <com.atlassian.plugin.util.EnumUtils: java.lang.Enum enumValueFromProperty(java.lang.String,java.lang.Enum[],java.lang.Enum)>
STATIC edge: $r1 = staticinvoke <com.atlassian.plugin.ReferenceMode: com.atlassian.plugin.ReferenceMode[] values()>() in <com.atlassian.plugin.loaders.RosterFilePluginLoader: com.atlassian.plugin.ReferenceMode referenceModeFromProperty()> ==> <com.atlassian.plugin.ReferenceMode: com.atlassian.plugin.ReferenceMode[] values()>
CLINIT edge: <com.atlassian.plugin.manager.ApplicationDefinedPluginsProvider: com.atlassian.plugin.manager.ApplicationDefinedPluginsProvider NO_APPLICATION_PLUGINS> = $r0 in <com.atlassian.plugin.manager.ApplicationDefinedPluginsProvider: void <clinit>()> ==> <com.atlassian.plugin.manager.ApplicationDefinedPluginsProvider: void <clinit>()>
STATIC edge: $r0 = staticinvoke <com.atlassian.plugin.manager.ApplicationDefinedPluginsProvider$lambda_static_0__16: com.atlassian.plugin.manager.ApplicationDefinedPluginsProvider bootstrap$()>() in <com.atlassian.plugin.manager.ApplicationDefinedPluginsProvider: void <clinit>()> ==> <com.atlassian.plugin.manager.ApplicationDefinedPluginsProvider$lambda_static_0__16: com.atlassian.plugin.manager.ApplicationDefinedPluginsProvider bootstrap$()>
CLINIT edge: <com.atlassian.plugin.manager.DefaultSafeModeManager: org.slf4j.Logger LOGGER> = $r0 in <com.atlassian.plugin.manager.DefaultSafeModeManager: void <clinit>()> ==> <com.atlassian.plugin.manager.DefaultSafeModeManager: void <clinit>()>
STATIC edge: $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/atlassian/plugin/manager/DefaultSafeModeManager;") in <com.atlassian.plugin.manager.DefaultSafeModeManager: void <clinit>()> ==> <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
CLINIT edge: <com.atlassian.plugin.loaders.BundledPluginLoader: org.slf4j.Logger log> = $r0 in <com.atlassian.plugin.loaders.BundledPluginLoader: void <clinit>()> ==> <com.atlassian.plugin.loaders.BundledPluginLoader: void <clinit>()>
STATIC edge: $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/atlassian/plugin/loaders/BundledPluginLoader;") in <com.atlassian.plugin.loaders.BundledPluginLoader: void <clinit>()> ==> <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
CLINIT edge: <com.atlassian.plugin.loaders.BundledPluginLoader: org.slf4j.Logger log> = $r0 in <com.atlassian.plugin.loaders.BundledPluginLoader: void <clinit>()> ==> <com.atlassian.plugin.loaders.ScanningPluginLoader: void <clinit>()>
CLINIT edge: r2 = staticinvoke <com.atlassian.plugin.loaders.BundledPluginLoader: com.atlassian.plugin.loaders.classloading.Scanner buildScannerCommon(java.io.File)>(r0) in <com.atlassian.plugin.loaders.BundledPluginLoader: com.atlassian.plugin.loaders.classloading.Scanner buildSourceScanner(java.io.File)> ==> <com.atlassian.plugin.loaders.BundledPluginLoader: void <clinit>()>
STATIC edge: r2 = staticinvoke <com.atlassian.plugin.loaders.BundledPluginLoader: com.atlassian.plugin.loaders.classloading.Scanner buildScannerCommon(java.io.File)>(r0) in <com.atlassian.plugin.loaders.BundledPluginLoader: com.atlassian.plugin.loaders.classloading.Scanner buildSourceScanner(java.io.File)> ==> <com.atlassian.plugin.loaders.BundledPluginLoader: com.atlassian.plugin.loaders.classloading.Scanner buildScannerCommon(java.io.File)>
STATIC edge: staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "Source must not be null") in <com.atlassian.plugin.loaders.BundledPluginLoader: com.atlassian.plugin.loaders.classloading.Scanner buildSourceScanner(java.io.File)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>
CLINIT edge: $r4 = new com.atlassian.plugin.loaders.classloading.EmptyScanner in <com.atlassian.plugin.loaders.BundledPluginLoader: com.atlassian.plugin.loaders.classloading.Scanner buildSourceScanner(java.io.File)> ==> <com.atlassian.plugin.loaders.classloading.EmptyScanner: void <clinit>()>
CLINIT edge: r2 = staticinvoke <com.atlassian.plugin.loaders.BundledPluginLoader: com.atlassian.plugin.loaders.classloading.Scanner buildScannerCommon(java.io.File)>(r0) in <com.atlassian.plugin.loaders.BundledPluginLoader: com.atlassian.plugin.loaders.classloading.Scanner buildSourceScanner(java.io.File)> ==> <com.atlassian.plugin.loaders.ScanningPluginLoader: void <clinit>()>
CLINIT edge: r4 = staticinvoke <com.atlassian.plugin.loaders.BundledPluginLoader: com.atlassian.plugin.loaders.classloading.Scanner buildScannerCommon(java.io.File)>(r1) in <com.atlassian.plugin.loaders.BundledPluginLoader: com.atlassian.plugin.loaders.classloading.Scanner buildZipScanner(java.net.URL,java.io.File)> ==> <com.atlassian.plugin.loaders.BundledPluginLoader: void <clinit>()>
STATIC edge: staticinvoke <com.atlassian.plugin.util.FileUtils: void conditionallyExtractZipFile(java.net.URL,java.io.File)>(r0, r2) in <com.atlassian.plugin.loaders.BundledPluginLoader: com.atlassian.plugin.loaders.classloading.Scanner buildZipScanner(java.net.URL,java.io.File)> ==> <com.atlassian.plugin.util.FileUtils: void conditionallyExtractZipFile(java.net.URL,java.io.File)>
STATIC edge: r4 = staticinvoke <com.atlassian.plugin.loaders.BundledPluginLoader: com.atlassian.plugin.loaders.classloading.Scanner buildScannerCommon(java.io.File)>(r1) in <com.atlassian.plugin.loaders.BundledPluginLoader: com.atlassian.plugin.loaders.classloading.Scanner buildZipScanner(java.net.URL,java.io.File)> ==> <com.atlassian.plugin.loaders.BundledPluginLoader: com.atlassian.plugin.loaders.classloading.Scanner buildScannerCommon(java.io.File)>
STATIC edge: r1 = staticinvoke <org.apache.commons.io.FileUtils: java.io.File toFile(java.net.URL)>(r0) in <com.atlassian.plugin.loaders.BundledPluginLoader: com.atlassian.plugin.loaders.classloading.Scanner buildZipScanner(java.net.URL,java.io.File)> ==> <org.apache.commons.io.FileUtils: java.io.File toFile(java.net.URL)>
STATIC edge: staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "Bundled plugins url cannot be null") in <com.atlassian.plugin.loaders.BundledPluginLoader: com.atlassian.plugin.loaders.classloading.Scanner buildZipScanner(java.net.URL,java.io.File)> ==> <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>
CLINIT edge: $r3 = new com.atlassian.plugin.loaders.DirectoryScanner in <com.atlassian.plugin.loaders.BundledPluginLoader: com.atlassian.plugin.loaders.classloading.Scanner buildZipScanner(java.net.URL,java.io.File)> ==> <com.atlassian.plugin.loaders.DirectoryScanner: void <clinit>()>
CLINIT edge: staticinvoke <com.atlassian.plugin.util.FileUtils: void conditionallyExtractZipFile(java.net.URL,java.io.File)>(r0, r2) in <com.atlassian.plugin.loaders.BundledPluginLoader: com.atlassian.plugin.loaders.classloading.Scanner buildZipScanner(java.net.URL,java.io.File)> ==> <com.atlassian.plugin.util.FileUtils: void <clinit>()>
CLINIT edge: r4 = staticinvoke <com.atlassian.plugin.loaders.BundledPluginLoader: com.atlassian.plugin.loaders.classloading.Scanner buildScannerCommon(java.io.File)>(r1) in <com.atlassian.plugin.loaders.BundledPluginLoader: com.atlassian.plugin.loaders.classloading.Scanner buildZipScanner(java.net.URL,java.io.File)> ==> <com.atlassian.plugin.loaders.ScanningPluginLoader: void <clinit>()>
CLINIT edge: <com.atlassian.plugin.loaders.classloading.EmptyScanner: org.slf4j.Logger log> = $r0 in <com.atlassian.plugin.loaders.classloading.EmptyScanner: void <clinit>()> ==> <com.atlassian.plugin.loaders.classloading.EmptyScanner: void <clinit>()>
STATIC edge: $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/atlassian/plugin/loaders/classloading/EmptyScanner;") in <com.atlassian.plugin.loaders.classloading.EmptyScanner: void <clinit>()> ==> <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
CLINIT edge: <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: org.slf4j.Logger logger> = $r0 in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: void <clinit>()> ==> <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: void <clinit>()>
STATIC edge: $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/atlassian/plugin/loaders/PermissionCheckingPluginLoader;") in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: void <clinit>()> ==> <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
CLINIT edge: <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: org.slf4j.Logger logger> = $r0 in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: void <clinit>()> ==> <com.atlassian.plugin.loaders.ForwardingPluginLoader: void <clinit>()>
CLINIT edge: <com.atlassian.plugin.manager.ProductPluginAccessorBase: org.slf4j.Logger log> = $r0 in <com.atlassian.plugin.manager.ProductPluginAccessorBase: void <clinit>()> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase: void <clinit>()>
STATIC edge: $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/atlassian/plugin/manager/ProductPluginAccessorBase;") in <com.atlassian.plugin.manager.ProductPluginAccessorBase: void <clinit>()> ==> <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
CLINIT edge: <com.atlassian.plugin.loaders.SinglePluginLoader: org.slf4j.Logger log> = $r0 in <com.atlassian.plugin.loaders.SinglePluginLoader: void <clinit>()> ==> <com.atlassian.plugin.loaders.SinglePluginLoader: void <clinit>()>
STATIC edge: $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/atlassian/plugin/loaders/SinglePluginLoader;") in <com.atlassian.plugin.loaders.SinglePluginLoader: void <clinit>()> ==> <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
CLINIT edge: <com.atlassian.plugin.manager.ProductPluginAccessor: com.atlassian.plugin.PluginController noopDisablePluginPluginController> = $r0 in <com.atlassian.plugin.manager.ProductPluginAccessor: void <clinit>()> ==> <com.atlassian.plugin.manager.ProductPluginAccessor: void <clinit>()>
CLINIT edge: <com.atlassian.plugin.util.resource.AlternativeDirectoryResourceLoader: org.slf4j.Logger log> = $r0 in <com.atlassian.plugin.util.resource.AlternativeDirectoryResourceLoader: void <clinit>()> ==> <com.atlassian.plugin.util.resource.AlternativeDirectoryResourceLoader: void <clinit>()>
STATIC edge: $r1 = staticinvoke <com.google.common.base.Splitter: com.google.common.base.Splitter on(char)>(44) in <com.atlassian.plugin.util.resource.AlternativeDirectoryResourceLoader: void <clinit>()> ==> <com.google.common.base.Splitter: com.google.common.base.Splitter on(char)>
STATIC edge: $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/atlassian/plugin/util/resource/AlternativeDirectoryResourceLoader;") in <com.atlassian.plugin.util.resource.AlternativeDirectoryResourceLoader: void <clinit>()> ==> <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
CLINIT edge: <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: java.util.function.Predicate IS_PLUGIN_1> = $r0 in <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: void <clinit>()> ==> <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: void <clinit>()>
STATIC edge: $r0 = staticinvoke <com.atlassian.plugin.factories.LegacyDynamicPluginFactory$lambda_static_0__21: java.util.function.Predicate bootstrap$()>() in <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: void <clinit>()> ==> <com.atlassian.plugin.factories.LegacyDynamicPluginFactory$lambda_static_0__21: java.util.function.Predicate bootstrap$()>
CLINIT edge: <com.atlassian.plugin.manager.ClusterEnvironmentProvider: com.atlassian.plugin.manager.ClusterEnvironmentProvider SINGLE_NODE> = $r0 in <com.atlassian.plugin.manager.ClusterEnvironmentProvider: void <clinit>()> ==> <com.atlassian.plugin.manager.ClusterEnvironmentProvider: void <clinit>()>
STATIC edge: $r0 = staticinvoke <com.atlassian.plugin.manager.ClusterEnvironmentProvider$lambda_static_0__27: com.atlassian.plugin.manager.ClusterEnvironmentProvider bootstrap$()>() in <com.atlassian.plugin.manager.ClusterEnvironmentProvider: void <clinit>()> ==> <com.atlassian.plugin.manager.ClusterEnvironmentProvider$lambda_static_0__27: com.atlassian.plugin.manager.ClusterEnvironmentProvider bootstrap$()>
CLINIT edge: <com.atlassian.plugin.parsers.SafeModeCommandLineArguments: java.util.regex.Pattern DISABLE_ADDONS_ARGUMENT_PATTERN> = $r0 in <com.atlassian.plugin.parsers.SafeModeCommandLineArguments: void <clinit>()> ==> <com.atlassian.plugin.parsers.SafeModeCommandLineArguments: void <clinit>()>
STATIC edge: $r2 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(".*disable-?addons.*") in <com.atlassian.plugin.parsers.SafeModeCommandLineArguments: void <clinit>()> ==> <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
STATIC edge: $r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(".*disable-?addons=\"([^\"].+)\".*$") in <com.atlassian.plugin.parsers.SafeModeCommandLineArguments: void <clinit>()> ==> <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
STATIC edge: $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(".*disable-?addons=([^\\s]+).*") in <com.atlassian.plugin.parsers.SafeModeCommandLineArguments: void <clinit>()> ==> <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
STATIC edge: $r2 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList(java.lang.Object[])>(r1) in <com.atlassian.plugin.util.ModuleRestricts: com.atlassian.plugin.util.ModuleRestricts parseApplicationsFromAttribute(java.lang.String)> ==> <com.google.common.collect.Lists: java.util.ArrayList newArrayList(java.lang.Object[])>
STATIC edge: r6 = staticinvoke <com.google.common.collect.Iterables: java.lang.Iterable transform(java.lang.Iterable,com.google.common.base.Function)>($r4, $r5) in <com.atlassian.plugin.util.ModuleRestricts: com.atlassian.plugin.util.ModuleRestricts parseApplicationsFromAttribute(java.lang.String)> ==> <com.google.common.collect.Iterables: java.lang.Iterable transform(java.lang.Iterable,com.google.common.base.Function)>
STATIC edge: $r5 = staticinvoke <com.atlassian.plugin.util.ModuleRestricts$init__14: com.google.common.base.Function bootstrap$()>() in <com.atlassian.plugin.util.ModuleRestricts: com.atlassian.plugin.util.ModuleRestricts parseApplicationsFromAttribute(java.lang.String)> ==> <com.atlassian.plugin.util.ModuleRestricts$init__14: com.google.common.base.Function bootstrap$()>
STATIC edge: $r4 = staticinvoke <com.google.common.collect.Iterables: java.lang.Iterable filter(java.lang.Iterable,com.google.common.base.Predicate)>($r2, $r3) in <com.atlassian.plugin.util.ModuleRestricts: com.atlassian.plugin.util.ModuleRestricts parseApplicationsFromAttribute(java.lang.String)> ==> <com.google.common.collect.Iterables: java.lang.Iterable filter(java.lang.Iterable,com.google.common.base.Predicate)>
STATIC edge: $r2 = staticinvoke <com.atlassian.plugin.util.ModuleRestricts$lambda_parseApplicationsFromRestrictElements_0__13: com.google.common.base.Function bootstrap$()>() in <com.atlassian.plugin.util.ModuleRestricts: com.atlassian.plugin.util.ModuleRestricts parseApplicationsFromRestrictElements(java.util.List)> ==> <com.atlassian.plugin.util.ModuleRestricts$lambda_parseApplicationsFromRestrictElements_0__13: com.google.common.base.Function bootstrap$()>
STATIC edge: $r3 = staticinvoke <com.google.common.collect.Iterables: java.lang.Iterable transform(java.lang.Iterable,com.google.common.base.Function)>(r1, $r2) in <com.atlassian.plugin.util.ModuleRestricts: com.atlassian.plugin.util.ModuleRestricts parseApplicationsFromRestrictElements(java.util.List)> ==> <com.google.common.collect.Iterables: java.lang.Iterable transform(java.lang.Iterable,com.google.common.base.Function)>
CLINIT edge: $r5 = new com.atlassian.plugin.loaders.DirectoryScanner in <com.atlassian.plugin.loaders.BundledPluginLoader: com.atlassian.plugin.loaders.classloading.Scanner buildScannerCommon(java.io.File)> ==> <com.atlassian.plugin.loaders.DirectoryScanner: void <clinit>()>
STATIC edge: r3 = staticinvoke <com.atlassian.plugin.loaders.BundledPluginLoader: java.util.List readListFile(java.io.File)>(r0) in <com.atlassian.plugin.loaders.BundledPluginLoader: com.atlassian.plugin.loaders.classloading.Scanner buildScannerCommon(java.io.File)> ==> <com.atlassian.plugin.loaders.BundledPluginLoader: java.util.List readListFile(java.io.File)>
STATIC edge: $r2 = staticinvoke <com.atlassian.plugin.loaders.BundledPluginLoader: java.lang.String getListSuffix()>() in <com.atlassian.plugin.loaders.BundledPluginLoader: com.atlassian.plugin.loaders.classloading.Scanner buildScannerCommon(java.io.File)> ==> <com.atlassian.plugin.loaders.BundledPluginLoader: java.lang.String getListSuffix()>
CLINIT edge: $r2 = staticinvoke <com.atlassian.plugin.loaders.BundledPluginLoader: java.lang.String getListSuffix()>() in <com.atlassian.plugin.loaders.BundledPluginLoader: com.atlassian.plugin.loaders.classloading.Scanner buildScannerCommon(java.io.File)> ==> <com.atlassian.plugin.loaders.ScanningPluginLoader: void <clinit>()>
CLINIT edge: $r2 = staticinvoke <com.atlassian.plugin.loaders.BundledPluginLoader: java.lang.String getListSuffix()>() in <com.atlassian.plugin.loaders.BundledPluginLoader: com.atlassian.plugin.loaders.classloading.Scanner buildScannerCommon(java.io.File)> ==> <com.atlassian.plugin.loaders.BundledPluginLoader: void <clinit>()>
CLINIT edge: $r7 = new java.io.File in <com.atlassian.plugin.loaders.BundledPluginLoader: java.util.List readListFile(java.io.File)> ==> <java.io.File: void <clinit>()>
STATIC edge: r14 = staticinvoke <java.nio.file.Files: java.util.List readAllLines(java.nio.file.Path)>($r1) in <com.atlassian.plugin.loaders.BundledPluginLoader: java.util.List readListFile(java.io.File)> ==> <java.nio.file.Files: java.util.List readAllLines(java.nio.file.Path)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Throwable: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Throwable: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Throwable: void <init>(java.lang.Throwable)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.Throwable fillInStackTrace()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.String getMessage()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.String getLocalizedMessage()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void printStackTrace()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void printStackTrace(java.io.PrintStream)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void printStackTrace(java.io.PrintWriter)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.Throwable getCause()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: void wait()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: void wait(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[])> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],int,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],int,int,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],int,int,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],int,int,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],int,int,java.nio.charset.Charset)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],int,int,java.nio.charset.Charset)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],java.nio.charset.Charset)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],java.nio.charset.Charset)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(char[])> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(char[],int,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(java.lang.StringBuffer)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(java.lang.StringBuffer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(int[],int,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(int[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(java.lang.StringBuilder)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(java.lang.StringBuilder)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int compareToIgnoreCase(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String concat(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String copyValueOf(char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String copyValueOf(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean endsWith(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean equalsIgnoreCase(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void getBytes(int,int,byte[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: byte[] getBytes()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: byte[] getBytes(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: byte[] getBytes(java.nio.charset.Charset)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void getChars(int,int,char[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int indexOf(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int indexOf(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int indexOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int indexOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int lastIndexOf(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int lastIndexOf(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int lastIndexOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int lastIndexOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean regionMatches(int,java.lang.String,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String replace(char,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean startsWith(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean startsWith(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String substring(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String substring(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: char[] toCharArray()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toLowerCase()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toLowerCase(java.util.Locale)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toUpperCase()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toUpperCase(java.util.Locale)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String trim()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean contentEquals(java.lang.StringBuffer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean contentEquals(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean matches(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String[] split(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String[] split(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.CharSequence subSequence(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int codePointAt(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int codePointBefore(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int codePointCount(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean contains(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int offsetByCodePoints(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.String: int compareTo(java.lang.String)>($r2) in <java.lang.String: int compareTo(java.lang.Object)> ==> <java.lang.String: int compareTo(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>()> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>(java.lang.String)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>(java.lang.Throwable)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class forName(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class[] getClasses()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.'annotation'.Annotation[] getAnnotations()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.String getCanonicalName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.ClassLoader getClassLoader()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Constructor[] getConstructors()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class[] getDeclaredClasses()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Object[] getEnumConstants()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Field getField(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Field[] getFields()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Type[] getGenericInterfaces()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Type getGenericSuperclass()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Method[] getMethods()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: int getModifiers()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.String getName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.String getSimpleName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.security.ProtectionDomain getProtectionDomain()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.net.URL getResource(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Object[] getSigners()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isAnnotation()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isAnnotationPresent(java.lang.Class)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isArray()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isEnum()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isLocalClass()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isMemberClass()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isSynthetic()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Object newInstance()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Package getPackage()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class asSubclass(java.lang.Class)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Object cast(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Exception: void <init>()> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Exception: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Exception: void <init>(java.lang.String)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Exception: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Exception: void <init>(java.lang.Throwable)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Exception: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.AbstractStringBuilder: void <init>()>() in <java.lang.StringBuffer: void <init>()> ==> <java.lang.AbstractStringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.AbstractStringBuilder: void <init>()>() in <java.lang.StringBuffer: void <init>(int)> ==> <java.lang.AbstractStringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.AbstractStringBuilder: void <init>()>() in <java.lang.StringBuffer: void <init>(java.lang.String)> ==> <java.lang.AbstractStringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.AbstractStringBuilder: void <init>()>() in <java.lang.StringBuffer: void <init>(java.lang.CharSequence)> ==> <java.lang.AbstractStringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void <init>(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.StringBuffer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer appendCodePoint(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: char charAt(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int codePointAt(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int codePointBefore(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int codePointCount(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer delete(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer deleteCharAt(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void ensureCapacity(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void getChars(int,int,char[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int indexOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.CharSequence,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int lastIndexOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int offsetByCodePoints(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer replace(int,int,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer reverse()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void setCharAt(int,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void setLength(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.CharSequence subSequence(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.String substring(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.String substring(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void trimToSize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: $i0 = specialinvoke r0.<java.lang.AbstractStringBuilder: int lastIndexOf(java.lang.String)>(r1) in <java.lang.StringBuffer: int lastIndexOf(java.lang.String)> ==> <java.lang.AbstractStringBuilder: int lastIndexOf(java.lang.String)>
SPECIAL edge: $i0 = specialinvoke r0.<java.lang.AbstractStringBuilder: int indexOf(java.lang.String)>(r1) in <java.lang.StringBuffer: int indexOf(java.lang.String)> ==> <java.lang.AbstractStringBuilder: int indexOf(java.lang.String)>
SPECIAL edge: $i0 = specialinvoke r0.<java.lang.AbstractStringBuilder: int length()>() in <java.lang.StringBuffer: int length()> ==> <java.lang.AbstractStringBuilder: int length()>
SPECIAL edge: $i0 = specialinvoke r0.<java.lang.AbstractStringBuilder: int capacity()>() in <java.lang.StringBuffer: int capacity()> ==> <java.lang.AbstractStringBuilder: int capacity()>
VIRTUAL edge: $r2 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence,int,int)>(r1, i0, i1) in <java.lang.StringBuffer: java.lang.Appendable append(java.lang.CharSequence,int,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence,int,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>(r1) in <java.lang.StringBuffer: java.lang.Appendable append(java.lang.CharSequence)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c0) in <java.lang.StringBuffer: java.lang.Appendable append(char)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(char)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.ClassNotFoundException: void <init>()> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassNotFoundException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.ClassNotFoundException: void <init>(java.lang.String)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassNotFoundException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.ClassNotFoundException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassNotFoundException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassNotFoundException: java.lang.Throwable getException()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassNotFoundException: java.lang.Throwable getCause()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ClassFormatError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassFormatError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ClassFormatError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassFormatError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.LinkageError: void <init>()> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.LinkageError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.LinkageError: void <init>(java.lang.String)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.LinkageError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: java.lang.String name()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: int ordinal()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: int compareTo(java.lang.Enum)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: java.lang.Class getDeclaringClass()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Enum: int compareTo(java.lang.Enum)>($r2) in <java.lang.Enum: int compareTo(java.lang.Object)> ==> <java.lang.Enum: int compareTo(java.lang.Enum)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Error: void <init>()> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Error: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Error: void <init>(java.lang.String)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Error: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Error: void <init>(java.lang.Throwable)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Error: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Float: void <init>(float)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: void <init>(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Float: void <init>(double)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: void <init>(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Float: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: int compareTo(java.lang.Float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: boolean isInfinite()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: boolean isInfinite(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: boolean isNaN()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: boolean isNaN(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: float parseFloat(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: java.lang.String toString(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: java.lang.Float valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: int compare(float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: java.lang.Float valueOf(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: java.lang.String toHexString(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Float: int compareTo(java.lang.Float)>($r2) in <java.lang.Float: int compareTo(java.lang.Object)> ==> <java.lang.Float: int compareTo(java.lang.Float)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Double: void <init>(double)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: void <init>(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Double: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: int compareTo(java.lang.Double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: boolean isInfinite()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: boolean isInfinite(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: boolean isNaN()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: boolean isNaN(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: double parseDouble(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: java.lang.String toString(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: java.lang.Double valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: int compare(double,double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: java.lang.Double valueOf(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: java.lang.String toHexString(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Double: int compareTo(java.lang.Double)>($r2) in <java.lang.Double: int compareTo(java.lang.Object)> ==> <java.lang.Double: int compareTo(java.lang.Double)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>()> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(java.lang.Object)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(boolean)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(char)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(int)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(long)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(float)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(double)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Integer: void <init>(int)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Integer: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int compareTo(java.lang.Integer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer decode(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer getInteger(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer getInteger(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer getInteger(java.lang.String,java.lang.Integer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int parseInt(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int parseInt(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toBinaryString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toHexString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toOctalString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toString(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int highestOneBit(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int lowestOneBit(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int numberOfLeadingZeros(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int numberOfTrailingZeros(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int bitCount(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int rotateLeft(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int rotateRight(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int reverseBytes(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int reverse(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int signum(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer valueOf(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Integer: int compareTo(java.lang.Integer)>($r2) in <java.lang.Integer: int compareTo(java.lang.Object)> ==> <java.lang.Integer: int compareTo(java.lang.Integer)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.NullPointerException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NullPointerException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.NullPointerException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NullPointerException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Character: void <init>(char)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: void <init>(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char charValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int compareTo(java.lang.Character)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: java.lang.Character valueOf(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isValidCodePoint(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isSupplementaryCodePoint(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isHighSurrogate(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLowSurrogate(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isSurrogatePair(char,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int charCount(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int toCodePoint(char,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointAt(java.lang.CharSequence,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointAt(char[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointAt(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointBefore(java.lang.CharSequence,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointBefore(char[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointBefore(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int toChars(int,char[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char[] toChars(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointCount(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int offsetByCodePoints(java.lang.CharSequence,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int offsetByCodePoints(char[],int,int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int digit(char,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int digit(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char forDigit(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int getNumericValue(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int getNumericValue(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int getType(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int getType(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: byte getDirectionality(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: byte getDirectionality(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isMirrored(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isMirrored(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isDefined(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isDefined(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isDigit(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isDigit(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isIdentifierIgnorable(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isIdentifierIgnorable(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isISOControl(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isISOControl(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaIdentifierPart(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaIdentifierPart(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaIdentifierStart(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaIdentifierStart(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaLetter(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaLetterOrDigit(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLetter(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLetter(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLetterOrDigit(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLetterOrDigit(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLowerCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLowerCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isSpace(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isSpaceChar(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isSpaceChar(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isTitleCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isTitleCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUnicodeIdentifierPart(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUnicodeIdentifierPart(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUnicodeIdentifierStart(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUnicodeIdentifierStart(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUpperCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUpperCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isWhitespace(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isWhitespace(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char reverseBytes(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char toLowerCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int toLowerCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: java.lang.String toString(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char toTitleCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int toTitleCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char toUpperCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int toUpperCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Character: int compareTo(java.lang.Character)>($r2) in <java.lang.Character: int compareTo(java.lang.Object)> ==> <java.lang.Character: int compareTo(java.lang.Character)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Long: void <init>(long)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: void <init>(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Long: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int compareTo(java.lang.Long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long decode(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long getLong(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long getLong(java.lang.String,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long getLong(java.lang.String,java.lang.Long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long parseLong(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long parseLong(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toBinaryString(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toHexString(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toOctalString(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toString(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toString(long,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long valueOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long highestOneBit(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long lowestOneBit(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int numberOfLeadingZeros(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int numberOfTrailingZeros(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int bitCount(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long rotateLeft(long,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long rotateRight(long,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long reverseBytes(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long reverse(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int signum(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long valueOf(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Long: int compareTo(java.lang.Long)>($r2) in <java.lang.Long: int compareTo(java.lang.Object)> ==> <java.lang.Long: int compareTo(java.lang.Long)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Short: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Short: void <init>(short)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: void <init>(short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: int compareTo(java.lang.Short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.Short decode(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: short parseShort(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: short parseShort(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.String toString(short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.Short valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.Short valueOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: short reverseBytes(short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.Short valueOf(short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Short: int compareTo(java.lang.Short)>($r2) in <java.lang.Short: int compareTo(java.lang.Object)> ==> <java.lang.Short: int compareTo(java.lang.Short)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Boolean: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Boolean: void <init>(boolean)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: void <init>(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: boolean booleanValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: int compareTo(java.lang.Boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: boolean getBoolean(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: boolean parseBoolean(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: java.lang.String toString(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: java.lang.Boolean valueOf(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Boolean: int compareTo(java.lang.Boolean)>($r2) in <java.lang.Boolean: int compareTo(java.lang.Object)> ==> <java.lang.Boolean: int compareTo(java.lang.Boolean)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Byte: void <init>(byte)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: void <init>(byte)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Byte: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: int compareTo(java.lang.Byte)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.Byte decode(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: byte parseByte(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: byte parseByte(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.String toString(byte)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.Byte valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.Byte valueOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.Byte valueOf(byte)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Byte: int compareTo(java.lang.Byte)>($r2) in <java.lang.Byte: int compareTo(java.lang.Object)> ==> <java.lang.Byte: int compareTo(java.lang.Byte)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.NoClassDefFoundError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoClassDefFoundError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.NoClassDefFoundError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoClassDefFoundError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.IndexOutOfBoundsException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IndexOutOfBoundsException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.StackOverflowError: void <init>()> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StackOverflowError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.StackOverflowError: void <init>(java.lang.String)> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StackOverflowError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.AbstractMethodError: void <init>()> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AbstractMethodError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.AbstractMethodError: void <init>(java.lang.String)> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AbstractMethodError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.IncompatibleClassChangeError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IncompatibleClassChangeError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.IncompatibleClassChangeError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IncompatibleClassChangeError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ClassCastException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassCastException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ClassCastException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassCastException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.VerifyError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.VerifyError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.VerifyError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.VerifyError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.NoSuchFieldError: void <init>()> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoSuchFieldError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.NoSuchFieldError: void <init>(java.lang.String)> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoSuchFieldError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.IllegalMonitorStateException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IllegalMonitorStateException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.IllegalMonitorStateException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IllegalMonitorStateException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.Runnable)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.Runnable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: int activeCount()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void checkAccess()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: int countStackFrames()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.Thread currentThread()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void destroy()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void dumpStack()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: int enumerate(java.lang.Thread[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.util.Map getAllStackTraces()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.ClassLoader getContextClassLoader()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getDefaultUncaughtExceptionHandler()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: long getId()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.String getName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: int getPriority()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.StackTraceElement[] getStackTrace()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.Thread$State getState()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.ThreadGroup getThreadGroup()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getUncaughtExceptionHandler()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void interrupt()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: boolean interrupted()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: boolean isAlive()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: boolean isDaemon()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: boolean isInterrupted()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void join()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void join(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void join(long,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void resume()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void run()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setDaemon(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setDefaultUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setName(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setPriority(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void sleep(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void sleep(long,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void start()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void stop()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void stop(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void suspend()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void yield()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: boolean holdsLock(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.UnknownError: void <init>()> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.UnknownError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.UnknownError: void <init>(java.lang.String)> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.UnknownError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.InternalError: void <init>()> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.InternalError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.InternalError: void <init>(java.lang.String)> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.InternalError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ArithmeticException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArithmeticException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ArithmeticException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArithmeticException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.NegativeArraySizeException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NegativeArraySizeException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.NegativeArraySizeException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NegativeArraySizeException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ClassCircularityError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassCircularityError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ClassCircularityError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassCircularityError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.NoSuchMethodError: void <init>()> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoSuchMethodError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.NoSuchMethodError: void <init>(java.lang.String)> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoSuchMethodError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IndexOutOfBoundsException: void <init>()>() in <java.lang.ArrayIndexOutOfBoundsException: void <init>()> ==> <java.lang.IndexOutOfBoundsException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArrayIndexOutOfBoundsException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IndexOutOfBoundsException: void <init>()>() in <java.lang.ArrayIndexOutOfBoundsException: void <init>(int)> ==> <java.lang.IndexOutOfBoundsException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArrayIndexOutOfBoundsException: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IndexOutOfBoundsException: void <init>()>() in <java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)> ==> <java.lang.IndexOutOfBoundsException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.ThreadDeath: void <init>()> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ThreadDeath: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.InstantiationError: void <init>()> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.InstantiationError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.InstantiationError: void <init>(java.lang.String)> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.InstantiationError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.IllegalAccessError: void <init>()> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IllegalAccessError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.IllegalAccessError: void <init>(java.lang.String)> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IllegalAccessError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.UnsatisfiedLinkError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.UnsatisfiedLinkError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.UnsatisfiedLinkError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.UnsatisfiedLinkError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ArrayStoreException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArrayStoreException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ArrayStoreException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArrayStoreException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ExceptionInInitializerError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ExceptionInInitializerError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ExceptionInInitializerError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ExceptionInInitializerError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ExceptionInInitializerError: void <init>(java.lang.Throwable)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ExceptionInInitializerError: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ExceptionInInitializerError: java.lang.Throwable getException()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ExceptionInInitializerError: java.lang.Throwable getCause()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.OutOfMemoryError: void <init>()> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.OutOfMemoryError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.OutOfMemoryError: void <init>(java.lang.String)> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.OutOfMemoryError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.net.URLStreamHandler: void <init>()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarHandler: void <init>()> ==> <java.net.URLStreamHandler: void <init>()>
SPECIAL edge: specialinvoke $r0.<org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: void <init>(java.net.URL)>(r1) in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarHandler: java.net.URLConnection openConnection(java.net.URL)> ==> <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: void <init>(java.net.URL)>
CLINIT edge: $r14 = newarray (java.lang.String)[$i8] in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: void <init>(java.net.URL)> ==> <java.lang.String: void <clinit>()>
STATIC edge: $r1 = staticinvoke <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: java.net.URL normaliseURL(java.net.URL)>(r20) in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: void <init>(java.net.URL)> ==> <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: java.net.URL normaliseURL(java.net.URL)>
STATIC edge: r9 = staticinvoke <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: java.lang.String normalizeUrlPath(java.lang.String)>($r1) in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: java.net.URL normaliseURL(java.net.URL)> ==> <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: java.lang.String normalizeUrlPath(java.lang.String)>
VIRTUAL edge: r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i0, i1) in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarHandler: void parseURL(java.net.URL,java.lang.String,int,int)> ==> <java.lang.String: java.lang.String substring(int,int)>
VIRTUAL edge: $c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(0) in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarHandler: void parseURL(java.net.URL,java.lang.String,int,int)> ==> <java.lang.String: char charAt(int)>
VIRTUAL edge: $c3 = virtualinvoke r1.<java.lang.String: char charAt(int)>(0) in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarHandler: void parseURL(java.net.URL,java.lang.String,int,int)> ==> <java.lang.String: char charAt(int)>
VIRTUAL edge: r19 = virtualinvoke r2.<java.net.URL: java.lang.String getFile()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarHandler: void parseURL(java.net.URL,java.lang.String,int,int)> ==> <java.net.URL: java.lang.String getFile()>
VIRTUAL edge: r20 = virtualinvoke r2.<java.net.URL: java.lang.String getFile()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarHandler: void parseURL(java.net.URL,java.lang.String,int,int)> ==> <java.net.URL: java.lang.String getFile()>
VIRTUAL edge: i5 = virtualinvoke r19.<java.lang.String: int lastIndexOf(int)>(33) in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarHandler: void parseURL(java.net.URL,java.lang.String,int,int)> ==> <java.lang.String: int lastIndexOf(int)>
VIRTUAL edge: $r12 = virtualinvoke r19.<java.lang.String: java.lang.String substring(int,int)>(0, i5) in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarHandler: void parseURL(java.net.URL,java.lang.String,int,int)> ==> <java.lang.String: java.lang.String substring(int,int)>
SPECIAL edge: specialinvoke $r15.<java.lang.StringBuilder: void <init>()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarHandler: void parseURL(java.net.URL,java.lang.String,int,int)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19) in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarHandler: void parseURL(java.net.URL,java.lang.String,int,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarHandler: void parseURL(java.net.URL,java.lang.String,int,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarHandler: void parseURL(java.net.URL,java.lang.String,int,int)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r11.<java.lang.StringBuilder: void <init>()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarHandler: void parseURL(java.net.URL,java.lang.String,int,int)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12) in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarHandler: void parseURL(java.net.URL,java.lang.String,int,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarHandler: void parseURL(java.net.URL,java.lang.String,int,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarHandler: void parseURL(java.net.URL,java.lang.String,int,int)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: i6 = virtualinvoke r20.<java.lang.String: int lastIndexOf(int)>(47) in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarHandler: void parseURL(java.net.URL,java.lang.String,int,int)> ==> <java.lang.String: int lastIndexOf(int)>
VIRTUAL edge: $r5 = virtualinvoke r20.<java.lang.String: java.lang.String substring(int,int)>(0, $i4) in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarHandler: void parseURL(java.net.URL,java.lang.String,int,int)> ==> <java.lang.String: java.lang.String substring(int,int)>
SPECIAL edge: specialinvoke $r8.<java.lang.StringBuilder: void <init>()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarHandler: void parseURL(java.net.URL,java.lang.String,int,int)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/") in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarHandler: void parseURL(java.net.URL,java.lang.String,int,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarHandler: void parseURL(java.net.URL,java.lang.String,int,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r18 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarHandler: void parseURL(java.net.URL,java.lang.String,int,int)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r4.<java.lang.StringBuilder: void <init>()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarHandler: void parseURL(java.net.URL,java.lang.String,int,int)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5) in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarHandler: void parseURL(java.net.URL,java.lang.String,int,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarHandler: void parseURL(java.net.URL,java.lang.String,int,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r18 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarHandler: void parseURL(java.net.URL,java.lang.String,int,int)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke r3.<org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarHandler: void setURL(java.net.URL,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r2, "jar", "", 0, null, null, r18, null, null) in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarHandler: void parseURL(java.net.URL,java.lang.String,int,int)> ==> <java.net.URLStreamHandler: void setURL(java.net.URL,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: void setupBaseResourceInputStream()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: void connect()> ==> <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: void setupBaseResourceInputStream()>
VIRTUAL edge: virtualinvoke r0.<org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: void setupPathedInputStream()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: void connect()> ==> <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: void setupPathedInputStream()>
VIRTUAL edge: virtualinvoke r0.<org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: void connect()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: java.io.InputStream getInputStream()> ==> <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: void connect()>
VIRTUAL edge: r4 = virtualinvoke $r1.<java.net.URL: java.lang.String toExternalForm()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: java.util.jar.JarFile getJarFile()> ==> <java.net.URL: java.lang.String toExternalForm()>
VIRTUAL edge: $z0 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>("file:") in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: java.util.jar.JarFile getJarFile()> ==> <java.lang.String: boolean startsWith(java.lang.String)>
VIRTUAL edge: r4 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int)>(5) in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: java.util.jar.JarFile getJarFile()> ==> <java.lang.String: java.lang.String substring(int)>
SPECIAL edge: specialinvoke $r2.<java.util.jar.JarFile: void <init>(java.lang.String)>($r3) in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: java.util.jar.JarFile getJarFile()> ==> <java.util.jar.JarFile: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.io.InputStream: int read()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: int read()> ==> <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: int read()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.io.InputStream: int read()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: int read()> ==> <java.io.FileInputStream: int read()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.io.InputStream: int read()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: int read()> ==> <java.io.ByteArrayInputStream: int read()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.io.InputStream: int read()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: int read()> ==> <java.io.FilterInputStream: int read()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.io.InputStream: int read()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: int read()> ==> <java.util.zip.InflaterInputStream: int read()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.io.InputStream: int read()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: int read()> ==> <java.io.BufferedInputStream: int read()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.io.InputStream: int read(byte[])>(r1) in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: int read(byte[])> ==> <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: int read(byte[])>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.io.InputStream: int read(byte[])>(r1) in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: int read(byte[])> ==> <java.io.InputStream: int read(byte[])>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.io.InputStream: int read(byte[],int,int)>(r1, i0, i1) in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: int read(byte[],int,int)> ==> <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: int read(byte[],int,int)>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.io.InputStream: int read(byte[],int,int)>(r1, i0, i1) in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: int read(byte[],int,int)> ==> <java.io.FilterInputStream: int read(byte[],int,int)>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.io.InputStream: int read(byte[],int,int)>(r1, i0, i1) in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: int read(byte[],int,int)> ==> <java.io.BufferedInputStream: int read(byte[],int,int)>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.io.InputStream: int read(byte[],int,int)>(r1, i0, i1) in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: int read(byte[],int,int)> ==> <java.util.zip.ZipInputStream: int read(byte[],int,int)>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.io.InputStream: int read(byte[],int,int)>(r1, i0, i1) in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: int read(byte[],int,int)> ==> <java.io.ByteArrayInputStream: int read(byte[],int,int)>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.io.InputStream: int read(byte[],int,int)>(r1, i0, i1) in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: int read(byte[],int,int)> ==> <java.util.zip.InflaterInputStream: int read(byte[],int,int)>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.io.InputStream: int read(byte[],int,int)>(r1, i0, i1) in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: int read(byte[],int,int)> ==> <java.util.jar.JarInputStream: int read(byte[],int,int)>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.io.InputStream: int read(byte[],int,int)>(r1, i0, i1) in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: int read(byte[],int,int)> ==> <java.io.FileInputStream: int read(byte[],int,int)>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.io.InputStream: int read(byte[],int,int)>(r1, i0, i1) in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: int read(byte[],int,int)> ==> <java.io.InputStream: int read(byte[],int,int)>
VIRTUAL edge: $l1 = virtualinvoke $r1.<java.io.InputStream: long skip(long)>(l0) in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: long skip(long)> ==> <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: long skip(long)>
VIRTUAL edge: $l1 = virtualinvoke $r1.<java.io.InputStream: long skip(long)>(l0) in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: long skip(long)> ==> <java.io.FilterInputStream: long skip(long)>
VIRTUAL edge: $l1 = virtualinvoke $r1.<java.io.InputStream: long skip(long)>(l0) in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: long skip(long)> ==> <java.io.BufferedInputStream: long skip(long)>
VIRTUAL edge: $l1 = virtualinvoke $r1.<java.io.InputStream: long skip(long)>(l0) in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: long skip(long)> ==> <java.util.zip.InflaterInputStream: long skip(long)>
VIRTUAL edge: $l1 = virtualinvoke $r1.<java.io.InputStream: long skip(long)>(l0) in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: long skip(long)> ==> <java.io.ByteArrayInputStream: long skip(long)>
VIRTUAL edge: $l1 = virtualinvoke $r1.<java.io.InputStream: long skip(long)>(l0) in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: long skip(long)> ==> <java.io.FileInputStream: long skip(long)>
VIRTUAL edge: $l1 = virtualinvoke $r1.<java.io.InputStream: long skip(long)>(l0) in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: long skip(long)> ==> <java.io.InputStream: long skip(long)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.io.InputStream: int available()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: int available()> ==> <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: int available()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.io.InputStream: int available()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: int available()> ==> <java.io.FilterInputStream: int available()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.io.InputStream: int available()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: int available()> ==> <java.io.BufferedInputStream: int available()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.io.InputStream: int available()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: int available()> ==> <java.util.zip.ZipInputStream: int available()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.io.InputStream: int available()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: int available()> ==> <java.io.ByteArrayInputStream: int available()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.io.InputStream: int available()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: int available()> ==> <java.util.zip.InflaterInputStream: int available()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.io.InputStream: int available()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: int available()> ==> <java.io.FileInputStream: int available()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.io.InputStream: int available()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: int available()> ==> <java.io.InputStream: int available()>
VIRTUAL edge: virtualinvoke $r1.<java.io.InputStream: void close()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: void close()> ==> <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.InputStream: void close()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: void close()> ==> <java.io.FilterInputStream: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.InputStream: void close()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: void close()> ==> <java.io.BufferedInputStream: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.InputStream: void close()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: void close()> ==> <java.util.zip.ZipInputStream: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.InputStream: void close()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: void close()> ==> <java.io.ByteArrayInputStream: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.InputStream: void close()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: void close()> ==> <java.util.zip.InflaterInputStream: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.InputStream: void close()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: void close()> ==> <com.atlassian.plugin.JarPluginArtifact$1: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.InputStream: void close()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: void close()> ==> <java.io.FileInputStream: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.InputStream: void close()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: void close()> ==> <java.io.InputStream: void close()>
VIRTUAL edge: virtualinvoke $r2.<java.util.jar.JarFile: void close()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: void close()> ==> <java.util.jar.JarFile: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.InputStream: void mark(int)>(i0) in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: void mark(int)> ==> <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: void mark(int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.InputStream: void mark(int)>(i0) in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: void mark(int)> ==> <java.io.FilterInputStream: void mark(int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.InputStream: void mark(int)>(i0) in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: void mark(int)> ==> <java.io.BufferedInputStream: void mark(int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.InputStream: void mark(int)>(i0) in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: void mark(int)> ==> <java.util.zip.InflaterInputStream: void mark(int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.InputStream: void mark(int)>(i0) in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: void mark(int)> ==> <java.io.ByteArrayInputStream: void mark(int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.InputStream: void mark(int)>(i0) in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: void mark(int)> ==> <java.io.InputStream: void mark(int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.InputStream: void reset()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: void reset()> ==> <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: void reset()>
VIRTUAL edge: virtualinvoke $r1.<java.io.InputStream: void reset()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: void reset()> ==> <java.io.FilterInputStream: void reset()>
VIRTUAL edge: virtualinvoke $r1.<java.io.InputStream: void reset()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: void reset()> ==> <java.io.BufferedInputStream: void reset()>
VIRTUAL edge: virtualinvoke $r1.<java.io.InputStream: void reset()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: void reset()> ==> <java.util.zip.InflaterInputStream: void reset()>
VIRTUAL edge: virtualinvoke $r1.<java.io.InputStream: void reset()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: void reset()> ==> <java.io.ByteArrayInputStream: void reset()>
VIRTUAL edge: virtualinvoke $r1.<java.io.InputStream: void reset()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: void reset()> ==> <java.io.InputStream: void reset()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.io.InputStream: boolean markSupported()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: boolean markSupported()> ==> <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: boolean markSupported()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.io.InputStream: boolean markSupported()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: boolean markSupported()> ==> <java.io.FilterInputStream: boolean markSupported()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.io.InputStream: boolean markSupported()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: boolean markSupported()> ==> <java.io.BufferedInputStream: boolean markSupported()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.io.InputStream: boolean markSupported()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: boolean markSupported()> ==> <java.util.zip.InflaterInputStream: boolean markSupported()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.io.InputStream: boolean markSupported()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: boolean markSupported()> ==> <java.io.ByteArrayInputStream: boolean markSupported()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.io.InputStream: boolean markSupported()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: boolean markSupported()> ==> <java.io.InputStream: boolean markSupported()>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>(".original-") in <com.atlassian.plugin.repositories.FilePluginInstaller$BackupNameFilter: boolean accept(java.io.File,java.lang.String)> ==> <java.lang.String: boolean startsWith(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: void <init>(java.io.File)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke r4.<java.io.File: boolean exists()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: void <init>(java.io.File)> ==> <java.io.File: boolean exists()>
VIRTUAL edge: $r7 = virtualinvoke r4.<java.io.File: java.lang.String getAbsolutePath()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: void <init>(java.io.File)> ==> <java.io.File: java.lang.String getAbsolutePath()>
INTERFACE edge: $r5 = interfaceinvoke r1.<com.atlassian.plugin.PluginArtifact: java.lang.String getName()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: void installPlugin(java.lang.String,com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.JarPluginArtifact: java.lang.String getName()>
INTERFACE edge: $r5 = interfaceinvoke r1.<com.atlassian.plugin.PluginArtifact: java.lang.String getName()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: void installPlugin(java.lang.String,com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.XmlPluginArtifact: java.lang.String getName()>
INTERFACE edge: r30 = interfaceinvoke r1.<com.atlassian.plugin.PluginArtifact: java.io.InputStream getInputStream()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: void installPlugin(java.lang.String,com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.PluginArtifact: java.io.InputStream getInputStream()>
INTERFACE edge: r30 = interfaceinvoke r1.<com.atlassian.plugin.PluginArtifact: java.io.InputStream getInputStream()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: void installPlugin(java.lang.String,com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.JarPluginArtifact: java.io.InputStream getInputStream()>
INTERFACE edge: r30 = interfaceinvoke r1.<com.atlassian.plugin.PluginArtifact: java.io.InputStream getInputStream()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: void installPlugin(java.lang.String,com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.XmlPluginArtifact: java.io.InputStream getInputStream()>
SPECIAL edge: specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, $r5) in <com.atlassian.plugin.repositories.FilePluginInstaller: void installPlugin(java.lang.String,com.atlassian.plugin.PluginArtifact)> ==> <java.io.File: void <init>(java.io.File,java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.io.File: boolean exists()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: void installPlugin(java.lang.String,com.atlassian.plugin.PluginArtifact)> ==> <java.io.File: boolean exists()>
VIRTUAL edge: virtualinvoke $r2.<java.io.File: boolean delete()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: void installPlugin(java.lang.String,com.atlassian.plugin.PluginArtifact)> ==> <java.io.File: boolean delete()>
SPECIAL edge: specialinvoke r3.<com.atlassian.plugin.repositories.FilePluginInstaller: void backup(java.lang.String,java.io.File)>(r0, $r2) in <com.atlassian.plugin.repositories.FilePluginInstaller: void installPlugin(java.lang.String,com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.repositories.FilePluginInstaller: void backup(java.lang.String,java.io.File)>
SPECIAL edge: specialinvoke $r7.<java.io.FileOutputStream: void <init>(java.io.File)>($r2) in <com.atlassian.plugin.repositories.FilePluginInstaller: void installPlugin(java.lang.String,com.atlassian.plugin.PluginArtifact)> ==> <java.io.FileOutputStream: void <init>(java.io.File)>
VIRTUAL edge: virtualinvoke $r7.<java.io.OutputStream: void close()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: void installPlugin(java.lang.String,com.atlassian.plugin.PluginArtifact)> ==> <java.io.FileOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r7.<java.io.OutputStream: void close()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: void installPlugin(java.lang.String,com.atlassian.plugin.PluginArtifact)> ==> <java.io.FileOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r7.<java.io.OutputStream: void close()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: void installPlugin(java.lang.String,com.atlassian.plugin.PluginArtifact)> ==> <java.io.FileOutputStream: void close()>
VIRTUAL edge: virtualinvoke r30.<java.io.InputStream: void close()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: void installPlugin(java.lang.String,com.atlassian.plugin.PluginArtifact)> ==> <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: void close()>
VIRTUAL edge: virtualinvoke r30.<java.io.InputStream: void close()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: void installPlugin(java.lang.String,com.atlassian.plugin.PluginArtifact)> ==> <java.io.FilterInputStream: void close()>
VIRTUAL edge: virtualinvoke r30.<java.io.InputStream: void close()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: void installPlugin(java.lang.String,com.atlassian.plugin.PluginArtifact)> ==> <java.io.BufferedInputStream: void close()>
VIRTUAL edge: virtualinvoke r30.<java.io.InputStream: void close()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: void installPlugin(java.lang.String,com.atlassian.plugin.PluginArtifact)> ==> <java.util.zip.ZipInputStream: void close()>
VIRTUAL edge: virtualinvoke r30.<java.io.InputStream: void close()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: void installPlugin(java.lang.String,com.atlassian.plugin.PluginArtifact)> ==> <java.io.ByteArrayInputStream: void close()>
VIRTUAL edge: virtualinvoke r30.<java.io.InputStream: void close()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: void installPlugin(java.lang.String,com.atlassian.plugin.PluginArtifact)> ==> <java.util.zip.InflaterInputStream: void close()>
VIRTUAL edge: virtualinvoke r30.<java.io.InputStream: void close()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: void installPlugin(java.lang.String,com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.JarPluginArtifact$1: void close()>
VIRTUAL edge: virtualinvoke r30.<java.io.InputStream: void close()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: void installPlugin(java.lang.String,com.atlassian.plugin.PluginArtifact)> ==> <java.io.FileInputStream: void close()>
VIRTUAL edge: virtualinvoke r30.<java.io.InputStream: void close()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: void installPlugin(java.lang.String,com.atlassian.plugin.PluginArtifact)> ==> <java.io.InputStream: void close()>
VIRTUAL edge: virtualinvoke r30.<java.io.InputStream: void close()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: void installPlugin(java.lang.String,com.atlassian.plugin.PluginArtifact)> ==> <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: void close()>
VIRTUAL edge: virtualinvoke r30.<java.io.InputStream: void close()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: void installPlugin(java.lang.String,com.atlassian.plugin.PluginArtifact)> ==> <java.io.FilterInputStream: void close()>
VIRTUAL edge: virtualinvoke r30.<java.io.InputStream: void close()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: void installPlugin(java.lang.String,com.atlassian.plugin.PluginArtifact)> ==> <java.io.BufferedInputStream: void close()>
VIRTUAL edge: virtualinvoke r30.<java.io.InputStream: void close()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: void installPlugin(java.lang.String,com.atlassian.plugin.PluginArtifact)> ==> <java.util.zip.ZipInputStream: void close()>
VIRTUAL edge: virtualinvoke r30.<java.io.InputStream: void close()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: void installPlugin(java.lang.String,com.atlassian.plugin.PluginArtifact)> ==> <java.io.ByteArrayInputStream: void close()>
VIRTUAL edge: virtualinvoke r30.<java.io.InputStream: void close()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: void installPlugin(java.lang.String,com.atlassian.plugin.PluginArtifact)> ==> <java.util.zip.InflaterInputStream: void close()>
VIRTUAL edge: virtualinvoke r30.<java.io.InputStream: void close()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: void installPlugin(java.lang.String,com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.JarPluginArtifact$1: void close()>
VIRTUAL edge: virtualinvoke r30.<java.io.InputStream: void close()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: void installPlugin(java.lang.String,com.atlassian.plugin.PluginArtifact)> ==> <java.io.FileInputStream: void close()>
VIRTUAL edge: virtualinvoke r30.<java.io.InputStream: void close()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: void installPlugin(java.lang.String,com.atlassian.plugin.PluginArtifact)> ==> <java.io.InputStream: void close()>
VIRTUAL edge: virtualinvoke r30.<java.io.InputStream: void close()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: void installPlugin(java.lang.String,com.atlassian.plugin.PluginArtifact)> ==> <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: void close()>
VIRTUAL edge: virtualinvoke r30.<java.io.InputStream: void close()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: void installPlugin(java.lang.String,com.atlassian.plugin.PluginArtifact)> ==> <java.io.FilterInputStream: void close()>
VIRTUAL edge: virtualinvoke r30.<java.io.InputStream: void close()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: void installPlugin(java.lang.String,com.atlassian.plugin.PluginArtifact)> ==> <java.io.BufferedInputStream: void close()>
VIRTUAL edge: virtualinvoke r30.<java.io.InputStream: void close()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: void installPlugin(java.lang.String,com.atlassian.plugin.PluginArtifact)> ==> <java.util.zip.ZipInputStream: void close()>
VIRTUAL edge: virtualinvoke r30.<java.io.InputStream: void close()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: void installPlugin(java.lang.String,com.atlassian.plugin.PluginArtifact)> ==> <java.io.ByteArrayInputStream: void close()>
VIRTUAL edge: virtualinvoke r30.<java.io.InputStream: void close()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: void installPlugin(java.lang.String,com.atlassian.plugin.PluginArtifact)> ==> <java.util.zip.InflaterInputStream: void close()>
VIRTUAL edge: virtualinvoke r30.<java.io.InputStream: void close()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: void installPlugin(java.lang.String,com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.JarPluginArtifact$1: void close()>
VIRTUAL edge: virtualinvoke r30.<java.io.InputStream: void close()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: void installPlugin(java.lang.String,com.atlassian.plugin.PluginArtifact)> ==> <java.io.FileInputStream: void close()>
VIRTUAL edge: virtualinvoke r30.<java.io.InputStream: void close()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: void installPlugin(java.lang.String,com.atlassian.plugin.PluginArtifact)> ==> <java.io.InputStream: void close()>
VIRTUAL edge: virtualinvoke $r24.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r20) in <com.atlassian.plugin.repositories.FilePluginInstaller: void installPlugin(java.lang.String,com.atlassian.plugin.PluginArtifact)> ==> <java.lang.Throwable: void addSuppressed(java.lang.Throwable)>
VIRTUAL edge: virtualinvoke $r18.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r14) in <com.atlassian.plugin.repositories.FilePluginInstaller: void installPlugin(java.lang.String,com.atlassian.plugin.PluginArtifact)> ==> <java.lang.Throwable: void addSuppressed(java.lang.Throwable)>
SPECIAL edge: specialinvoke $r10.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: void installPlugin(java.lang.String,com.atlassian.plugin.PluginArtifact)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not install plugin: ") in <com.atlassian.plugin.repositories.FilePluginInstaller: void installPlugin(java.lang.String,com.atlassian.plugin.PluginArtifact)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1) in <com.atlassian.plugin.repositories.FilePluginInstaller: void installPlugin(java.lang.String,com.atlassian.plugin.PluginArtifact)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: void installPlugin(java.lang.String,com.atlassian.plugin.PluginArtifact)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r13, $r8) in <com.atlassian.plugin.repositories.FilePluginInstaller: void installPlugin(java.lang.String,com.atlassian.plugin.PluginArtifact)> ==> <java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>
CLINIT edge: $r9 = new java.io.File in <com.atlassian.plugin.repositories.FilePluginInstaller: void backup(java.lang.String,java.io.File)> ==> <java.io.File: void <clinit>()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.atlassian.plugin.repositories.FilePluginInstaller: void revertInstalledPlugin(java.lang.String)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.atlassian.plugin.repositories.FilePluginInstaller: void revertInstalledPlugin(java.lang.String)> ==> <java.util.TreeMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.atlassian.plugin.repositories.FilePluginInstaller: void revertInstalledPlugin(java.lang.String)> ==> <java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.atlassian.plugin.repositories.FilePluginInstaller: void revertInstalledPlugin(java.lang.String)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.atlassian.plugin.repositories.FilePluginInstaller: void revertInstalledPlugin(java.lang.String)> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $r6 = virtualinvoke r4.<com.atlassian.plugin.repositories.FilePluginInstaller$BackupRepresentation: java.io.File getBackupFile()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: void revertInstalledPlugin(java.lang.String)> ==> <com.atlassian.plugin.repositories.FilePluginInstaller$BackupRepresentation: java.io.File getBackupFile()>
VIRTUAL edge: $r8 = virtualinvoke r4.<com.atlassian.plugin.repositories.FilePluginInstaller$BackupRepresentation: java.lang.String getCurrentPluginFilename()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: void revertInstalledPlugin(java.lang.String)> ==> <com.atlassian.plugin.repositories.FilePluginInstaller$BackupRepresentation: java.lang.String getCurrentPluginFilename()>
VIRTUAL edge: $z1 = virtualinvoke r4.<com.atlassian.plugin.repositories.FilePluginInstaller$BackupRepresentation: boolean isUpgrade()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: void revertInstalledPlugin(java.lang.String)> ==> <com.atlassian.plugin.repositories.FilePluginInstaller$BackupRepresentation: boolean isUpgrade()>
VIRTUAL edge: $r10 = virtualinvoke r4.<com.atlassian.plugin.repositories.FilePluginInstaller$BackupRepresentation: java.io.File getBackupFile()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: void revertInstalledPlugin(java.lang.String)> ==> <com.atlassian.plugin.repositories.FilePluginInstaller$BackupRepresentation: java.io.File getBackupFile()>
VIRTUAL edge: $r12 = virtualinvoke r4.<com.atlassian.plugin.repositories.FilePluginInstaller$BackupRepresentation: java.io.File getBackupFile()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: void revertInstalledPlugin(java.lang.String)> ==> <com.atlassian.plugin.repositories.FilePluginInstaller$BackupRepresentation: java.io.File getBackupFile()>
VIRTUAL edge: $r14 = virtualinvoke r4.<com.atlassian.plugin.repositories.FilePluginInstaller$BackupRepresentation: java.lang.String getOriginalPluginArtifactFilename()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: void revertInstalledPlugin(java.lang.String)> ==> <com.atlassian.plugin.repositories.FilePluginInstaller$BackupRepresentation: java.lang.String getOriginalPluginArtifactFilename()>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.io.File: java.lang.String getParent()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: void revertInstalledPlugin(java.lang.String)> ==> <java.io.File: java.lang.String getParent()>
SPECIAL edge: specialinvoke $r5.<java.io.File: void <init>(java.lang.String,java.lang.String)>($r7, $r8) in <com.atlassian.plugin.repositories.FilePluginInstaller: void revertInstalledPlugin(java.lang.String)> ==> <java.io.File: void <init>(java.lang.String,java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r5.<java.io.File: boolean exists()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: void revertInstalledPlugin(java.lang.String)> ==> <java.io.File: boolean exists()>
VIRTUAL edge: virtualinvoke $r5.<java.io.File: boolean delete()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: void revertInstalledPlugin(java.lang.String)> ==> <java.io.File: boolean delete()>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.io.File: java.lang.String getParent()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: void revertInstalledPlugin(java.lang.String)> ==> <java.io.File: java.lang.String getParent()>
SPECIAL edge: specialinvoke $r11.<java.io.File: void <init>(java.lang.String,java.lang.String)>($r13, $r14) in <com.atlassian.plugin.repositories.FilePluginInstaller: void revertInstalledPlugin(java.lang.String)> ==> <java.io.File: void <init>(java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.repositories.FilePluginInstaller$BackupNameFilter: void <init>(com.atlassian.plugin.repositories.FilePluginInstaller$1)>(null) in <com.atlassian.plugin.repositories.FilePluginInstaller: void clearBackups()> ==> <com.atlassian.plugin.repositories.FilePluginInstaller$BackupNameFilter: void <init>(com.atlassian.plugin.repositories.FilePluginInstaller$1)>
VIRTUAL edge: r3 = virtualinvoke $r2.<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>($r1) in <com.atlassian.plugin.repositories.FilePluginInstaller: void clearBackups()> ==> <java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>
VIRTUAL edge: virtualinvoke r6.<java.io.File: boolean delete()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: void clearBackups()> ==> <java.io.File: boolean delete()>
INTERFACE edge: interfaceinvoke $r4.<java.util.Map: void clear()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: void clearBackups()> ==> <java.util.LinkedHashMap: void clear()>
INTERFACE edge: interfaceinvoke $r4.<java.util.Map: void clear()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: void clearBackups()> ==> <java.util.Hashtable: void clear()>
INTERFACE edge: interfaceinvoke $r4.<java.util.Map: void clear()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: void clearBackups()> ==> <java.util.TreeMap: void clear()>
INTERFACE edge: interfaceinvoke $r4.<java.util.Map: void clear()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: void clearBackups()> ==> <java.util.HashMap: void clear()>
INTERFACE edge: interfaceinvoke $r4.<java.util.Map: void clear()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: void clearBackups()> ==> <java.util.jar.Attributes: void clear()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.repositories.FilePluginInstaller$BackupRepresentation: void <init>(java.io.File,java.lang.String)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke r1.<java.io.File: java.lang.String getName()>() in <com.atlassian.plugin.repositories.FilePluginInstaller$BackupRepresentation: void <init>(java.io.File,java.lang.String)> ==> <java.io.File: java.lang.String getName()>
VIRTUAL edge: $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r4) in <com.atlassian.plugin.repositories.FilePluginInstaller$BackupRepresentation: void <init>(java.io.File,java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.repositories.FilePluginInstaller$BackupRepresentation: void <init>(com.atlassian.plugin.repositories.FilePluginInstaller$BackupRepresentation,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.loaders.classloading.ForwardingScanner: void <init>(com.atlassian.plugin.loaders.classloading.Scanner)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.atlassian.plugin.loaders.classloading.Scanner: java.util.Collection scan()>() in <com.atlassian.plugin.loaders.classloading.ForwardingScanner: java.util.Collection scan()> ==> <com.atlassian.plugin.loaders.FileListScanner: java.util.Collection scan()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.atlassian.plugin.loaders.classloading.Scanner: java.util.Collection scan()>() in <com.atlassian.plugin.loaders.classloading.ForwardingScanner: java.util.Collection scan()> ==> <com.atlassian.plugin.loaders.classloading.EmptyScanner: java.util.Collection scan()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.atlassian.plugin.loaders.classloading.Scanner: java.util.Collection scan()>() in <com.atlassian.plugin.loaders.classloading.ForwardingScanner: java.util.Collection scan()> ==> <com.atlassian.plugin.loaders.RosterFileScanner: java.util.Collection scan()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.atlassian.plugin.loaders.classloading.Scanner: java.util.Collection scan()>() in <com.atlassian.plugin.loaders.classloading.ForwardingScanner: java.util.Collection scan()> ==> <com.atlassian.plugin.loaders.classloading.ForwardingScanner: java.util.Collection scan()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.atlassian.plugin.loaders.classloading.Scanner: java.util.Collection scan()>() in <com.atlassian.plugin.loaders.classloading.ForwardingScanner: java.util.Collection scan()> ==> <com.atlassian.plugin.loaders.DirectoryScanner: java.util.Collection scan()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.atlassian.plugin.loaders.classloading.Scanner: java.util.Collection getDeploymentUnits()>() in <com.atlassian.plugin.loaders.classloading.ForwardingScanner: java.util.Collection getDeploymentUnits()> ==> <com.atlassian.plugin.loaders.DirectoryScanner: java.util.Collection getDeploymentUnits()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.atlassian.plugin.loaders.classloading.Scanner: java.util.Collection getDeploymentUnits()>() in <com.atlassian.plugin.loaders.classloading.ForwardingScanner: java.util.Collection getDeploymentUnits()> ==> <com.atlassian.plugin.loaders.classloading.EmptyScanner: java.util.Collection getDeploymentUnits()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.atlassian.plugin.loaders.classloading.Scanner: java.util.Collection getDeploymentUnits()>() in <com.atlassian.plugin.loaders.classloading.ForwardingScanner: java.util.Collection getDeploymentUnits()> ==> <com.atlassian.plugin.loaders.RosterFileScanner: java.util.Collection getDeploymentUnits()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.atlassian.plugin.loaders.classloading.Scanner: java.util.Collection getDeploymentUnits()>() in <com.atlassian.plugin.loaders.classloading.ForwardingScanner: java.util.Collection getDeploymentUnits()> ==> <com.atlassian.plugin.loaders.classloading.ForwardingScanner: java.util.Collection getDeploymentUnits()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.atlassian.plugin.loaders.classloading.Scanner: java.util.Collection getDeploymentUnits()>() in <com.atlassian.plugin.loaders.classloading.ForwardingScanner: java.util.Collection getDeploymentUnits()> ==> <com.atlassian.plugin.loaders.FileListScanner: java.util.Collection getDeploymentUnits()>
INTERFACE edge: interfaceinvoke $r1.<com.atlassian.plugin.loaders.classloading.Scanner: void reset()>() in <com.atlassian.plugin.loaders.classloading.ForwardingScanner: void reset()> ==> <com.atlassian.plugin.loaders.DirectoryScanner: void reset()>
INTERFACE edge: interfaceinvoke $r1.<com.atlassian.plugin.loaders.classloading.Scanner: void reset()>() in <com.atlassian.plugin.loaders.classloading.ForwardingScanner: void reset()> ==> <com.atlassian.plugin.loaders.classloading.EmptyScanner: void reset()>
INTERFACE edge: interfaceinvoke $r1.<com.atlassian.plugin.loaders.classloading.Scanner: void reset()>() in <com.atlassian.plugin.loaders.classloading.ForwardingScanner: void reset()> ==> <com.atlassian.plugin.loaders.RosterFileScanner: void reset()>
INTERFACE edge: interfaceinvoke $r1.<com.atlassian.plugin.loaders.classloading.Scanner: void reset()>() in <com.atlassian.plugin.loaders.classloading.ForwardingScanner: void reset()> ==> <com.atlassian.plugin.loaders.classloading.ForwardingScanner: void reset()>
INTERFACE edge: interfaceinvoke $r1.<com.atlassian.plugin.loaders.classloading.Scanner: void reset()>() in <com.atlassian.plugin.loaders.classloading.ForwardingScanner: void reset()> ==> <com.atlassian.plugin.loaders.FileListScanner: void reset()>
INTERFACE edge: interfaceinvoke $r2.<com.atlassian.plugin.loaders.classloading.Scanner: void remove(com.atlassian.plugin.loaders.classloading.DeploymentUnit)>(r1) in <com.atlassian.plugin.loaders.classloading.ForwardingScanner: void remove(com.atlassian.plugin.loaders.classloading.DeploymentUnit)> ==> <com.atlassian.plugin.loaders.DirectoryScanner: void remove(com.atlassian.plugin.loaders.classloading.DeploymentUnit)>
INTERFACE edge: interfaceinvoke $r2.<com.atlassian.plugin.loaders.classloading.Scanner: void remove(com.atlassian.plugin.loaders.classloading.DeploymentUnit)>(r1) in <com.atlassian.plugin.loaders.classloading.ForwardingScanner: void remove(com.atlassian.plugin.loaders.classloading.DeploymentUnit)> ==> <com.atlassian.plugin.loaders.classloading.EmptyScanner: void remove(com.atlassian.plugin.loaders.classloading.DeploymentUnit)>
INTERFACE edge: interfaceinvoke $r2.<com.atlassian.plugin.loaders.classloading.Scanner: void remove(com.atlassian.plugin.loaders.classloading.DeploymentUnit)>(r1) in <com.atlassian.plugin.loaders.classloading.ForwardingScanner: void remove(com.atlassian.plugin.loaders.classloading.DeploymentUnit)> ==> <com.atlassian.plugin.loaders.RosterFileScanner: void remove(com.atlassian.plugin.loaders.classloading.DeploymentUnit)>
INTERFACE edge: interfaceinvoke $r2.<com.atlassian.plugin.loaders.classloading.Scanner: void remove(com.atlassian.plugin.loaders.classloading.DeploymentUnit)>(r1) in <com.atlassian.plugin.loaders.classloading.ForwardingScanner: void remove(com.atlassian.plugin.loaders.classloading.DeploymentUnit)> ==> <com.atlassian.plugin.loaders.classloading.ForwardingScanner: void remove(com.atlassian.plugin.loaders.classloading.DeploymentUnit)>
INTERFACE edge: interfaceinvoke $r2.<com.atlassian.plugin.loaders.classloading.Scanner: void remove(com.atlassian.plugin.loaders.classloading.DeploymentUnit)>(r1) in <com.atlassian.plugin.loaders.classloading.ForwardingScanner: void remove(com.atlassian.plugin.loaders.classloading.DeploymentUnit)> ==> <com.atlassian.plugin.loaders.FileListScanner: void remove(com.atlassian.plugin.loaders.classloading.DeploymentUnit)>
INTERFACE edge: interfaceinvoke $r2.<com.atlassian.plugin.loaders.classloading.Scanner: void remove(com.atlassian.plugin.loaders.classloading.DeploymentUnit)>(r1) in <com.atlassian.plugin.loaders.classloading.ForwardingScanner: void remove(com.atlassian.plugin.loaders.classloading.DeploymentUnit)> ==> <com.atlassian.plugin.loaders.BundledPluginLoader$NonRemovingScanner: void remove(com.atlassian.plugin.loaders.classloading.DeploymentUnit)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.scope.TenantBasedScopeManager: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Not implemented") in <com.atlassian.plugin.scope.TenantBasedScopeManager: boolean isScopeActive(java.lang.String)> ==> <java.lang.UnsupportedOperationException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.util.resource.AlternativePluginResourceLoader: void <init>(com.atlassian.plugin.Plugin)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.atlassian.plugin.Plugin: java.net.URL getResource(java.lang.String)>(r1) in <com.atlassian.plugin.util.resource.AlternativePluginResourceLoader: java.net.URL getResource(java.lang.String)> ==> <com.atlassian.plugin.impl.DefaultDynamicPlugin: java.net.URL getResource(java.lang.String)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.atlassian.plugin.Plugin: java.net.URL getResource(java.lang.String)>(r1) in <com.atlassian.plugin.util.resource.AlternativePluginResourceLoader: java.net.URL getResource(java.lang.String)> ==> <com.atlassian.plugin.impl.StaticPlugin: java.net.URL getResource(java.lang.String)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.atlassian.plugin.Plugin: java.net.URL getResource(java.lang.String)>(r1) in <com.atlassian.plugin.util.resource.AlternativePluginResourceLoader: java.net.URL getResource(java.lang.String)> ==> <com.atlassian.plugin.impl.XmlDynamicPlugin: java.net.URL getResource(java.lang.String)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.atlassian.plugin.Plugin: java.io.InputStream getResourceAsStream(java.lang.String)>(r1) in <com.atlassian.plugin.util.resource.AlternativePluginResourceLoader: java.io.InputStream getResourceAsStream(java.lang.String)> ==> <com.atlassian.plugin.impl.DefaultDynamicPlugin: java.io.InputStream getResourceAsStream(java.lang.String)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.atlassian.plugin.Plugin: java.io.InputStream getResourceAsStream(java.lang.String)>(r1) in <com.atlassian.plugin.util.resource.AlternativePluginResourceLoader: java.io.InputStream getResourceAsStream(java.lang.String)> ==> <com.atlassian.plugin.impl.XmlDynamicPlugin: java.io.InputStream getResourceAsStream(java.lang.String)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.atlassian.plugin.Plugin: java.io.InputStream getResourceAsStream(java.lang.String)>(r1) in <com.atlassian.plugin.util.resource.AlternativePluginResourceLoader: java.io.InputStream getResourceAsStream(java.lang.String)> ==> <com.atlassian.plugin.impl.StaticPlugin: java.io.InputStream getResourceAsStream(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1) in <com.atlassian.plugin.util.VersionStringComparator$VersionStringComponentComparator: int compare(java.lang.String,java.lang.String)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.String: int compareToIgnoreCase(java.lang.String)>(r1) in <com.atlassian.plugin.util.VersionStringComparator$VersionStringComponentComparator: int compare(java.lang.String,java.lang.String)> ==> <java.lang.String: int compareToIgnoreCase(java.lang.String)>
SPECIAL edge: $z1 = specialinvoke r2.<com.atlassian.plugin.util.VersionStringComparator$VersionStringComponentComparator: boolean isInteger(java.lang.String)>(r0) in <com.atlassian.plugin.util.VersionStringComparator$VersionStringComponentComparator: int compare(java.lang.String,java.lang.String)> ==> <com.atlassian.plugin.util.VersionStringComparator$VersionStringComponentComparator: boolean isInteger(java.lang.String)>
SPECIAL edge: $z3 = specialinvoke r2.<com.atlassian.plugin.util.VersionStringComparator$VersionStringComponentComparator: boolean isInteger(java.lang.String)>(r1) in <com.atlassian.plugin.util.VersionStringComparator$VersionStringComponentComparator: int compare(java.lang.String,java.lang.String)> ==> <com.atlassian.plugin.util.VersionStringComparator$VersionStringComponentComparator: boolean isInteger(java.lang.String)>
SPECIAL edge: r3 = specialinvoke r2.<com.atlassian.plugin.util.VersionStringComparator$VersionStringComponentComparator: java.math.BigInteger getStartingInteger(java.lang.String)>(r0) in <com.atlassian.plugin.util.VersionStringComparator$VersionStringComponentComparator: int compare(java.lang.String,java.lang.String)> ==> <com.atlassian.plugin.util.VersionStringComparator$VersionStringComponentComparator: java.math.BigInteger getStartingInteger(java.lang.String)>
SPECIAL edge: r4 = specialinvoke r2.<com.atlassian.plugin.util.VersionStringComparator$VersionStringComponentComparator: java.math.BigInteger getStartingInteger(java.lang.String)>(r1) in <com.atlassian.plugin.util.VersionStringComparator$VersionStringComponentComparator: int compare(java.lang.String,java.lang.String)> ==> <com.atlassian.plugin.util.VersionStringComparator$VersionStringComponentComparator: java.math.BigInteger getStartingInteger(java.lang.String)>
SPECIAL edge: $z4 = specialinvoke r2.<com.atlassian.plugin.util.VersionStringComparator$VersionStringComponentComparator: boolean isInteger(java.lang.String)>(r0) in <com.atlassian.plugin.util.VersionStringComparator$VersionStringComponentComparator: int compare(java.lang.String,java.lang.String)> ==> <com.atlassian.plugin.util.VersionStringComparator$VersionStringComponentComparator: boolean isInteger(java.lang.String)>
SPECIAL edge: $z2 = specialinvoke r2.<com.atlassian.plugin.util.VersionStringComparator$VersionStringComponentComparator: boolean isInteger(java.lang.String)>(r1) in <com.atlassian.plugin.util.VersionStringComparator$VersionStringComponentComparator: int compare(java.lang.String,java.lang.String)> ==> <com.atlassian.plugin.util.VersionStringComparator$VersionStringComponentComparator: boolean isInteger(java.lang.String)>
SPECIAL edge: specialinvoke $r5.<java.math.BigInteger: void <init>(java.lang.String)>(r0) in <com.atlassian.plugin.util.VersionStringComparator$VersionStringComponentComparator: int compare(java.lang.String,java.lang.String)> ==> <java.math.BigInteger: void <init>(java.lang.String)>
VIRTUAL edge: $i3 = virtualinvoke $r5.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r6) in <com.atlassian.plugin.util.VersionStringComparator$VersionStringComponentComparator: int compare(java.lang.String,java.lang.String)> ==> <java.math.BigInteger: int compareTo(java.math.BigInteger)>
SPECIAL edge: specialinvoke $r6.<java.math.BigInteger: void <init>(java.lang.String)>(r1) in <com.atlassian.plugin.util.VersionStringComparator$VersionStringComponentComparator: int compare(java.lang.String,java.lang.String)> ==> <java.math.BigInteger: void <init>(java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke r3.<java.math.BigInteger: int compareTo(java.math.BigInteger)>(r4) in <com.atlassian.plugin.util.VersionStringComparator$VersionStringComponentComparator: int compare(java.lang.String,java.lang.String)> ==> <java.math.BigInteger: int compareTo(java.math.BigInteger)>
VIRTUAL edge: $i2 = virtualinvoke r4.<java.math.BigInteger: int compareTo(java.math.BigInteger)>(r3) in <com.atlassian.plugin.util.VersionStringComparator$VersionStringComponentComparator: int compare(java.lang.String,java.lang.String)> ==> <java.math.BigInteger: int compareTo(java.math.BigInteger)>
CLINIT edge: $r0 = staticinvoke <com.atlassian.plugin.util.VersionStringComparator: java.util.regex.Pattern access$100()>() in <com.atlassian.plugin.util.VersionStringComparator$VersionStringComponentComparator: java.math.BigInteger getStartingInteger(java.lang.String)> ==> <com.atlassian.plugin.util.VersionStringComparator: void <clinit>()>
STATIC edge: $r0 = staticinvoke <com.atlassian.plugin.util.VersionStringComparator: java.util.regex.Pattern access$100()>() in <com.atlassian.plugin.util.VersionStringComparator$VersionStringComponentComparator: java.math.BigInteger getStartingInteger(java.lang.String)> ==> <com.atlassian.plugin.util.VersionStringComparator: java.util.regex.Pattern access$100()>
CLINIT edge: $r3 = new java.math.BigInteger in <com.atlassian.plugin.util.VersionStringComparator$VersionStringComponentComparator: java.math.BigInteger getStartingInteger(java.lang.String)> ==> <java.math.BigInteger: void <clinit>()>
CLINIT edge: $r0 = <com.atlassian.plugin.util.VersionStringComparator: java.util.regex.Pattern START_WITH_INT_PATTERN> in <com.atlassian.plugin.util.VersionStringComparator: java.util.regex.Pattern access$100()> ==> <com.atlassian.plugin.util.VersionStringComparator: void <clinit>()>
VIRTUAL edge: $i0 = virtualinvoke r0.<com.atlassian.plugin.util.VersionStringComparator$VersionStringComponentComparator: int compare(java.lang.String,java.lang.String)>($r4, $r3) in <com.atlassian.plugin.util.VersionStringComparator$VersionStringComponentComparator: int compare(java.lang.Object,java.lang.Object)> ==> <com.atlassian.plugin.util.VersionStringComparator$VersionStringComponentComparator: int compare(java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.util.VersionStringComparator: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.String: boolean matches(java.lang.String)>("[\\d\\w]+(?:[\\.-][\\d\\w]+)*") in <com.atlassian.plugin.util.VersionStringComparator: boolean isValidVersionString(java.lang.String)> ==> <java.lang.String: boolean matches(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0) in <com.atlassian.plugin.util.VersionStringComparator: boolean isSnapshotVersion(java.lang.String)> ==> <java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.util.regex.Matcher: boolean matches()>() in <com.atlassian.plugin.util.VersionStringComparator: boolean isSnapshotVersion(java.lang.String)> ==> <java.util.regex.Matcher: boolean matches()>
VIRTUAL edge: r17 = virtualinvoke r0.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(" ", "") in <com.atlassian.plugin.util.VersionStringComparator: int compare(java.lang.String,java.lang.String)> ==> <java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>
VIRTUAL edge: r18 = virtualinvoke r1.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(" ", "") in <com.atlassian.plugin.util.VersionStringComparator: int compare(java.lang.String,java.lang.String)> ==> <java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>
VIRTUAL edge: $z2 = virtualinvoke r17.<java.lang.String: boolean matches(java.lang.String)>("[\\d\\w]+(?:[\\.-][\\d\\w]+)*") in <com.atlassian.plugin.util.VersionStringComparator: int compare(java.lang.String,java.lang.String)> ==> <java.lang.String: boolean matches(java.lang.String)>
VIRTUAL edge: r10 = virtualinvoke r17.<java.lang.String: java.lang.String[] split(java.lang.String)>("[\\.-]") in <com.atlassian.plugin.util.VersionStringComparator: int compare(java.lang.String,java.lang.String)> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
VIRTUAL edge: $z3 = virtualinvoke r18.<java.lang.String: boolean matches(java.lang.String)>("[\\d\\w]+(?:[\\.-][\\d\\w]+)*") in <com.atlassian.plugin.util.VersionStringComparator: int compare(java.lang.String,java.lang.String)> ==> <java.lang.String: boolean matches(java.lang.String)>
VIRTUAL edge: r11 = virtualinvoke r18.<java.lang.String: java.lang.String[] split(java.lang.String)>("[\\.-]") in <com.atlassian.plugin.util.VersionStringComparator: int compare(java.lang.String,java.lang.String)> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.util.VersionStringComparator: int compare(java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Version number \'") in <com.atlassian.plugin.util.VersionStringComparator: int compare(java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r17) in <com.atlassian.plugin.util.VersionStringComparator: int compare(java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' cannot be compared to \'") in <com.atlassian.plugin.util.VersionStringComparator: int compare(java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r18) in <com.atlassian.plugin.util.VersionStringComparator: int compare(java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'") in <com.atlassian.plugin.util.VersionStringComparator: int compare(java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.util.VersionStringComparator: int compare(java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9) in <com.atlassian.plugin.util.VersionStringComparator: int compare(java.lang.String,java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r12.<com.atlassian.plugin.util.VersionStringComparator$VersionStringComponentComparator: void <init>(com.atlassian.plugin.util.VersionStringComparator,com.atlassian.plugin.util.VersionStringComparator$1)>(r13, null) in <com.atlassian.plugin.util.VersionStringComparator: int compare(java.lang.String,java.lang.String)> ==> <com.atlassian.plugin.util.VersionStringComparator$VersionStringComponentComparator: void <init>(com.atlassian.plugin.util.VersionStringComparator,com.atlassian.plugin.util.VersionStringComparator$1)>
INTERFACE edge: $i4 = interfaceinvoke $r12.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r15, $r20) in <com.atlassian.plugin.util.VersionStringComparator: int compare(java.lang.String,java.lang.String)> ==> <com.atlassian.plugin.util.VersionStringComparator$VersionStringComponentComparator: int compare(java.lang.Object,java.lang.Object)>
INTERFACE edge: $i5 = interfaceinvoke $r12.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r15, $r20) in <com.atlassian.plugin.util.VersionStringComparator: int compare(java.lang.String,java.lang.String)> ==> <com.atlassian.plugin.util.VersionStringComparator$VersionStringComponentComparator: int compare(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke r0.<com.atlassian.plugin.util.VersionStringComparator: int compare(java.lang.String,java.lang.String)>($r4, $r3) in <com.atlassian.plugin.util.VersionStringComparator: int compare(java.lang.Object,java.lang.Object)> ==> <com.atlassian.plugin.util.VersionStringComparator: int compare(java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.util.ContextClassLoaderSettingInvocationHandler: void <init>(java.lang.Object)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() in <com.atlassian.plugin.util.ContextClassLoaderSettingInvocationHandler: void <init>(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.ClassLoader getClassLoader()>() in <com.atlassian.plugin.util.ContextClassLoaderSettingInvocationHandler: void <init>(java.lang.Object)> ==> <java.lang.Class: java.lang.ClassLoader getClassLoader()>
VIRTUAL edge: r12 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r4, r3) in <com.atlassian.plugin.util.ContextClassLoaderSettingInvocationHandler: java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])> ==> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>
VIRTUAL edge: $r10 = virtualinvoke $r14.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>() in <com.atlassian.plugin.util.ContextClassLoaderSettingInvocationHandler: java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])> ==> <java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.util.ClassLoaderStack: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.ThreadLocal: java.lang.Object get()>() in <com.atlassian.plugin.util.ClassLoaderStack: void push(java.lang.ClassLoader)> ==> <java.lang.ThreadLocal: java.lang.Object get()>
SPECIAL edge: specialinvoke $r9.<java.util.LinkedList: void <init>()>() in <com.atlassian.plugin.util.ClassLoaderStack: void push(java.lang.ClassLoader)> ==> <java.util.LinkedList: void <init>()>
VIRTUAL edge: virtualinvoke $r7.<java.lang.ThreadLocal: void set(java.lang.Object)>($r9) in <com.atlassian.plugin.util.ClassLoaderStack: void push(java.lang.ClassLoader)> ==> <java.lang.ThreadLocal: void set(java.lang.Object)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>() in <com.atlassian.plugin.util.ClassLoaderStack: void push(java.lang.ClassLoader)> ==> <java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>
INTERFACE edge: interfaceinvoke $r10.<java.util.Deque: void push(java.lang.Object)>($r4) in <com.atlassian.plugin.util.ClassLoaderStack: void push(java.lang.ClassLoader)> ==> <java.util.LinkedList: void push(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<java.util.Deque: void push(java.lang.Object)>($r4) in <com.atlassian.plugin.util.ClassLoaderStack: void push(java.lang.ClassLoader)> ==> <java.util.ArrayDeque: void push(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>(r0) in <com.atlassian.plugin.util.ClassLoaderStack: void push(java.lang.ClassLoader)> ==> <java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.ThreadLocal: java.lang.Object get()>() in <com.atlassian.plugin.util.ClassLoaderStack: java.lang.ClassLoader pop()> ==> <java.lang.ThreadLocal: java.lang.Object get()>
INTERFACE edge: $z0 = interfaceinvoke r2.<java.util.Deque: boolean isEmpty()>() in <com.atlassian.plugin.util.ClassLoaderStack: java.lang.ClassLoader pop()> ==> <java.util.AbstractCollection: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke r2.<java.util.Deque: boolean isEmpty()>() in <com.atlassian.plugin.util.ClassLoaderStack: java.lang.ClassLoader pop()> ==> <java.util.ArrayDeque: boolean isEmpty()>
INTERFACE edge: $r6 = interfaceinvoke r2.<java.util.Deque: java.lang.Object pop()>() in <com.atlassian.plugin.util.ClassLoaderStack: java.lang.ClassLoader pop()> ==> <java.util.LinkedList: java.lang.Object pop()>
INTERFACE edge: $r6 = interfaceinvoke r2.<java.util.Deque: java.lang.Object pop()>() in <com.atlassian.plugin.util.ClassLoaderStack: java.lang.ClassLoader pop()> ==> <java.util.ArrayDeque: java.lang.Object pop()>
INTERFACE edge: $z1 = interfaceinvoke r2.<java.util.Deque: boolean isEmpty()>() in <com.atlassian.plugin.util.ClassLoaderStack: java.lang.ClassLoader pop()> ==> <java.util.AbstractCollection: boolean isEmpty()>
INTERFACE edge: $z1 = interfaceinvoke r2.<java.util.Deque: boolean isEmpty()>() in <com.atlassian.plugin.util.ClassLoaderStack: java.lang.ClassLoader pop()> ==> <java.util.ArrayDeque: boolean isEmpty()>
VIRTUAL edge: r4 = virtualinvoke $r3.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>() in <com.atlassian.plugin.util.ClassLoaderStack: java.lang.ClassLoader pop()> ==> <java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>($r7) in <com.atlassian.plugin.util.ClassLoaderStack: java.lang.ClassLoader pop()> ==> <java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>
VIRTUAL edge: virtualinvoke $r8.<java.lang.ThreadLocal: void remove()>() in <com.atlassian.plugin.util.ClassLoaderStack: java.lang.ClassLoader pop()> ==> <java.lang.ThreadLocal: void remove()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.loaders.FileListScanner: void <init>(java.util.Collection)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>(r2) in <com.atlassian.plugin.loaders.FileListScanner: void <init>(java.util.Collection)> ==> <java.util.ArrayList: void <init>(java.util.Collection)>
SPECIAL edge: specialinvoke $r2.<java.util.ArrayList: void <init>()>() in <com.atlassian.plugin.loaders.FileListScanner: java.util.Collection scan()> ==> <java.util.ArrayList: void <init>()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.loaders.FileListScanner: java.util.Collection scan()> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.loaders.FileListScanner: java.util.Collection scan()> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.loaders.FileListScanner: java.util.Collection scan()> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.loaders.FileListScanner: java.util.Collection scan()> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.loaders.FileListScanner: java.util.Collection scan()> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.loaders.FileListScanner: java.util.Collection scan()> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke $r8.<com.atlassian.plugin.loaders.classloading.DeploymentUnit: void <init>(java.io.File)>(r7) in <com.atlassian.plugin.loaders.FileListScanner: java.util.Collection scan()> ==> <com.atlassian.plugin.loaders.classloading.DeploymentUnit: void <init>(java.io.File)>
INTERFACE edge: interfaceinvoke $r9.<java.util.Collection: boolean add(java.lang.Object)>($r8) in <com.atlassian.plugin.loaders.FileListScanner: java.util.Collection scan()> ==> <java.util.HashSet: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r9.<java.util.Collection: boolean add(java.lang.Object)>($r8) in <com.atlassian.plugin.loaders.FileListScanner: java.util.Collection scan()> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r9.<java.util.Collection: boolean add(java.lang.Object)>($r8) in <com.atlassian.plugin.loaders.FileListScanner: java.util.Collection scan()> ==> <java.util.ArrayDeque: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r9.<java.util.Collection: boolean add(java.lang.Object)>($r8) in <com.atlassian.plugin.loaders.FileListScanner: java.util.Collection scan()> ==> <java.util.concurrent.CopyOnWriteArraySet: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r9.<java.util.Collection: boolean add(java.lang.Object)>($r8) in <com.atlassian.plugin.loaders.FileListScanner: java.util.Collection scan()> ==> <java.util.TreeSet: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r9.<java.util.Collection: boolean add(java.lang.Object)>($r8) in <com.atlassian.plugin.loaders.FileListScanner: java.util.Collection scan()> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke $r8.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.loaders.FileListScanner: void remove(com.atlassian.plugin.loaders.classloading.DeploymentUnit)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot remove files in a file-list scanner: ") in <com.atlassian.plugin.loaders.FileListScanner: void remove(com.atlassian.plugin.loaders.classloading.DeploymentUnit)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke r3.<com.atlassian.plugin.loaders.classloading.DeploymentUnit: java.io.File getPath()>() in <com.atlassian.plugin.loaders.FileListScanner: void remove(com.atlassian.plugin.loaders.classloading.DeploymentUnit)> ==> <com.atlassian.plugin.loaders.classloading.DeploymentUnit: java.io.File getPath()>
VIRTUAL edge: $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4) in <com.atlassian.plugin.loaders.FileListScanner: void remove(com.atlassian.plugin.loaders.classloading.DeploymentUnit)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.loaders.FileListScanner: void remove(com.atlassian.plugin.loaders.classloading.DeploymentUnit)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r9.<com.atlassian.plugin.PluginException: void <init>(java.lang.String)>($r6) in <com.atlassian.plugin.loaders.FileListScanner: void remove(com.atlassian.plugin.loaders.classloading.DeploymentUnit)> ==> <com.atlassian.plugin.PluginException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode: com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode[] values()> ==> <java.lang.Object: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode: com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode[] values()> ==> <java.util.HashMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode: com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode[] values()> ==> <java.util.TreeMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode: com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode[] values()> ==> <java.lang.Enum: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode: com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode[] values()> ==> <java.util.jar.Attributes: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode: com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode[] values()> ==> <java.util.TreeSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode: com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode[] values()> ==> <java.util.ArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode: com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode[] values()> ==> <java.util.HashSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode: com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode[] values()> ==> <java.util.Hashtable: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode: com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode[] values()> ==> <java.util.ArrayDeque: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode: com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode[] values()> ==> <java.util.jar.Manifest: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode: com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode[] values()> ==> <java.util.Date: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode: com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode[] values()> ==> <java.util.Locale: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode: com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode[] values()> ==> <java.util.zip.ZipEntry: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode: com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode[] values()> ==> <java.util.LinkedList: java.lang.Object clone()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode: java.util.concurrent.locks.ReadWriteLock getReadWriteLock()>() in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore)> ==> <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode$1: java.util.concurrent.locks.ReadWriteLock getReadWriteLock()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode: java.util.concurrent.locks.ReadWriteLock getReadWriteLock()>() in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore)> ==> <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode$4: java.util.concurrent.locks.ReadWriteLock getReadWriteLock()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode: java.util.concurrent.locks.ReadWriteLock getReadWriteLock()>() in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore)> ==> <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode$3: java.util.concurrent.locks.ReadWriteLock getReadWriteLock()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode: java.util.concurrent.locks.ReadWriteLock getReadWriteLock()>() in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore)> ==> <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode$5: java.util.concurrent.locks.ReadWriteLock getReadWriteLock()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode: java.util.concurrent.locks.ReadWriteLock getReadWriteLock()>() in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore)> ==> <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode$2: java.util.concurrent.locks.ReadWriteLock getReadWriteLock()>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore,java.util.concurrent.locks.ReadWriteLock)>(r1, $r3) in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore)> ==> <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore,java.util.concurrent.locks.ReadWriteLock)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore,java.util.concurrent.locks.ReadWriteLock)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0) in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore,java.util.concurrent.locks.ReadWriteLock)> ==> <java.util.concurrent.atomic.AtomicInteger: void <init>(int)>
SPECIAL edge: specialinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0) in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore,java.util.concurrent.locks.ReadWriteLock)> ==> <java.util.concurrent.atomic.AtomicInteger: void <init>(int)>
VIRTUAL edge: i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>() in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore: void save(com.atlassian.plugin.manager.PluginPersistentState)> ==> <java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>
INTERFACE edge: interfaceinvoke $r2.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("save concurrency {}", $r3) in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore: void save(com.atlassian.plugin.manager.PluginPersistentState)> ==> <org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r8.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>() in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore: void save(com.atlassian.plugin.manager.PluginPersistentState)> ==> <java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>
VIRTUAL edge: i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>() in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore: com.atlassian.plugin.manager.PluginPersistentState load()> ==> <java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>
INTERFACE edge: interfaceinvoke $r2.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("load concurrency {}", $r3) in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore: com.atlassian.plugin.manager.PluginPersistentState load()> ==> <org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r6.<java.lang.Object: java.lang.Class getClass()>() in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore: com.atlassian.plugin.manager.PluginPersistentState load()> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: virtualinvoke $r11.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>() in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore: com.atlassian.plugin.manager.PluginPersistentState load()> ==> <java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>
INTERFACE edge: interfaceinvoke $r2.<com.atlassian.plugin.manager.PluginPersistentStateStore: void save(com.atlassian.plugin.manager.PluginPersistentState)>(r1) in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore: void lambda$save$0(com.atlassian.plugin.manager.PluginPersistentState)> ==> <com.atlassian.plugin.manager.store.MemoryPluginPersistentStateStore: void save(com.atlassian.plugin.manager.PluginPersistentState)>
INTERFACE edge: interfaceinvoke $r2.<com.atlassian.plugin.manager.PluginPersistentStateStore: void save(com.atlassian.plugin.manager.PluginPersistentState)>(r1) in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore: void lambda$save$0(com.atlassian.plugin.manager.PluginPersistentState)> ==> <com.atlassian.plugin.manager.store.LoadOnlyPluginPersistentStateStore: void save(com.atlassian.plugin.manager.PluginPersistentState)>
INTERFACE edge: interfaceinvoke $r2.<com.atlassian.plugin.manager.PluginPersistentStateStore: void save(com.atlassian.plugin.manager.PluginPersistentState)>(r1) in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore: void lambda$save$0(com.atlassian.plugin.manager.PluginPersistentState)> ==> <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore: void save(com.atlassian.plugin.manager.PluginPersistentState)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.util.EnumUtils: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke r5.<java.lang.Enum: java.lang.String name()>() in <com.atlassian.plugin.util.EnumUtils: java.lang.Enum enumValueFromProperty(java.lang.String,java.lang.Enum[],java.lang.Enum)> ==> <java.lang.Enum: java.lang.String name()>
VIRTUAL edge: $z0 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1) in <com.atlassian.plugin.util.EnumUtils: java.lang.Enum enumValueFromProperty(java.lang.String,java.lang.Enum[],java.lang.Enum)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.manager.PluginPersistentState$Builder: void <init>()>() in <com.atlassian.plugin.manager.PluginPersistentState: com.atlassian.plugin.manager.PluginPersistentState$Builder builder()> ==> <com.atlassian.plugin.manager.PluginPersistentState$Builder: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.manager.PluginPersistentState$Builder: void <init>(com.atlassian.plugin.manager.PluginPersistentState)>(r1) in <com.atlassian.plugin.manager.PluginPersistentState: com.atlassian.plugin.manager.PluginPersistentState$Builder builder(com.atlassian.plugin.manager.PluginPersistentState)> ==> <com.atlassian.plugin.manager.PluginPersistentState$Builder: void <init>(com.atlassian.plugin.manager.PluginPersistentState)>
INTERFACE edge: $r1 = interfaceinvoke r0.<com.atlassian.plugin.manager.PluginPersistentState: java.util.Map getStatesMap()>() in <com.atlassian.plugin.manager.PluginPersistentState: java.util.Map getMap()> ==> <com.atlassian.plugin.manager.DefaultPluginPersistentState: java.util.Map getStatesMap()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>() in <com.atlassian.plugin.manager.PluginPersistentState: java.util.Map getMap()> ==> <java.util.HashMap: java.util.Set entrySet()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>() in <com.atlassian.plugin.manager.PluginPersistentState: java.util.Map getMap()> ==> <java.util.Hashtable: java.util.Set entrySet()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>() in <com.atlassian.plugin.manager.PluginPersistentState: java.util.Map getMap()> ==> <java.util.TreeMap: java.util.Set entrySet()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>() in <com.atlassian.plugin.manager.PluginPersistentState: java.util.Map getMap()> ==> <java.util.jar.Attributes: java.util.Set entrySet()>
INTERFACE edge: $r7 = interfaceinvoke $r3.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r6) in <com.atlassian.plugin.manager.PluginPersistentState: java.util.Map getMap()> ==> <java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>
INTERFACE edge: $r2 = interfaceinvoke r0.<com.atlassian.plugin.manager.PluginPersistentState: java.util.Map getPluginEnabledStateMap(com.atlassian.plugin.Plugin)>(r1) in <com.atlassian.plugin.manager.PluginPersistentState: java.util.Map getPluginStateMap(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DefaultPluginPersistentState: java.util.Map getPluginEnabledStateMap(com.atlassian.plugin.Plugin)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>() in <com.atlassian.plugin.manager.PluginPersistentState: java.util.Map getPluginStateMap(com.atlassian.plugin.Plugin)> ==> <java.util.HashMap: java.util.Set entrySet()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>() in <com.atlassian.plugin.manager.PluginPersistentState: java.util.Map getPluginStateMap(com.atlassian.plugin.Plugin)> ==> <java.util.Hashtable: java.util.Set entrySet()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>() in <com.atlassian.plugin.manager.PluginPersistentState: java.util.Map getPluginStateMap(com.atlassian.plugin.Plugin)> ==> <java.util.TreeMap: java.util.Set entrySet()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>() in <com.atlassian.plugin.manager.PluginPersistentState: java.util.Map getPluginStateMap(com.atlassian.plugin.Plugin)> ==> <java.util.jar.Attributes: java.util.Set entrySet()>
INTERFACE edge: $r8 = interfaceinvoke $r4.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r7) in <com.atlassian.plugin.manager.PluginPersistentState: java.util.Map getPluginStateMap(com.atlassian.plugin.Plugin)> ==> <java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>
SPECIAL edge: specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Not implemented") in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$NoOpLock: java.util.concurrent.locks.Condition newCondition()> ==> <java.lang.UnsupportedOperationException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$CommonReadWriteLock: void <init>(java.util.concurrent.locks.Lock)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.manager.PluginPersistentState$Builder: void <init>()>() in <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder create()> ==> <com.atlassian.plugin.manager.PluginPersistentState$Builder: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.manager.PluginPersistentState$Builder: void <init>(com.atlassian.plugin.manager.PluginPersistentState)>(r1) in <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder create(com.atlassian.plugin.manager.PluginPersistentState)> ==> <com.atlassian.plugin.manager.PluginPersistentState$Builder: void <init>(com.atlassian.plugin.manager.PluginPersistentState)>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.manager.DefaultPluginPersistentState: void <init>(java.util.Map,boolean)>($r2, 1) in <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState toState()> ==> <com.atlassian.plugin.manager.DefaultPluginPersistentState: void <init>(java.util.Map,boolean)>
CLINIT edge: $r3 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r1) in <com.atlassian.plugin.manager.DefaultPluginPersistentState: void <init>(java.util.Map,boolean)> ==> <java.util.Collections: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r1) in <com.atlassian.plugin.manager.DefaultPluginPersistentState: void <init>(java.util.Map,boolean)> ==> <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>
INTERFACE edge: $r2 = interfaceinvoke r1.<com.atlassian.plugin.ModuleDescriptor: java.lang.String getCompleteKey()>() in <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder setEnabled(com.atlassian.plugin.ModuleDescriptor,boolean)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.String getCompleteKey()>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder setEnabled(java.lang.String,boolean)>($r2, z0) in <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder setEnabled(com.atlassian.plugin.ModuleDescriptor,boolean)> ==> <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder setEnabled(java.lang.String,boolean)>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.manager.PluginEnabledState: com.atlassian.plugin.manager.PluginEnabledState getPluginEnabledStateWithCurrentTime(boolean)>(z0) in <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder setEnabled(java.lang.String,boolean)> ==> <com.atlassian.plugin.manager.PluginEnabledState: com.atlassian.plugin.manager.PluginEnabledState getPluginEnabledStateWithCurrentTime(boolean)>
INTERFACE edge: $r2 = interfaceinvoke r1.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder setEnabled(com.atlassian.plugin.Plugin,boolean)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r2 = interfaceinvoke r1.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder setEnabled(com.atlassian.plugin.Plugin,boolean)> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder setEnabled(java.lang.String,boolean)>($r2, z0) in <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder setEnabled(com.atlassian.plugin.Plugin,boolean)> ==> <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder setEnabled(java.lang.String,boolean)>
INTERFACE edge: interfaceinvoke $r1.<java.util.Map: void clear()>() in <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder setState(com.atlassian.plugin.manager.PluginPersistentState)> ==> <java.util.LinkedHashMap: void clear()>
INTERFACE edge: interfaceinvoke $r1.<java.util.Map: void clear()>() in <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder setState(com.atlassian.plugin.manager.PluginPersistentState)> ==> <java.util.Hashtable: void clear()>
INTERFACE edge: interfaceinvoke $r1.<java.util.Map: void clear()>() in <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder setState(com.atlassian.plugin.manager.PluginPersistentState)> ==> <java.util.TreeMap: void clear()>
INTERFACE edge: interfaceinvoke $r1.<java.util.Map: void clear()>() in <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder setState(com.atlassian.plugin.manager.PluginPersistentState)> ==> <java.util.HashMap: void clear()>
INTERFACE edge: interfaceinvoke $r1.<java.util.Map: void clear()>() in <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder setState(com.atlassian.plugin.manager.PluginPersistentState)> ==> <java.util.jar.Attributes: void clear()>
INTERFACE edge: $r4 = interfaceinvoke r2.<com.atlassian.plugin.manager.PluginPersistentState: java.util.Map getStatesMap()>() in <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder setState(com.atlassian.plugin.manager.PluginPersistentState)> ==> <com.atlassian.plugin.manager.DefaultPluginPersistentState: java.util.Map getStatesMap()>
INTERFACE edge: interfaceinvoke $r3.<java.util.Map: void putAll(java.util.Map)>($r4) in <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder setState(com.atlassian.plugin.manager.PluginPersistentState)> ==> <java.util.HashMap: void putAll(java.util.Map)>
INTERFACE edge: interfaceinvoke $r3.<java.util.Map: void putAll(java.util.Map)>($r4) in <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder setState(com.atlassian.plugin.manager.PluginPersistentState)> ==> <java.util.Hashtable: void putAll(java.util.Map)>
INTERFACE edge: interfaceinvoke $r3.<java.util.Map: void putAll(java.util.Map)>($r4) in <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder setState(com.atlassian.plugin.manager.PluginPersistentState)> ==> <java.util.AbstractMap: void putAll(java.util.Map)>
INTERFACE edge: interfaceinvoke $r3.<java.util.Map: void putAll(java.util.Map)>($r4) in <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder setState(com.atlassian.plugin.manager.PluginPersistentState)> ==> <java.util.jar.Attributes: void putAll(java.util.Map)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: void putAll(java.util.Map)>(r1) in <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder addPluginEnabledState(java.util.Map)> ==> <java.util.HashMap: void putAll(java.util.Map)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: void putAll(java.util.Map)>(r1) in <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder addPluginEnabledState(java.util.Map)> ==> <java.util.Hashtable: void putAll(java.util.Map)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: void putAll(java.util.Map)>(r1) in <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder addPluginEnabledState(java.util.Map)> ==> <java.util.AbstractMap: void putAll(java.util.Map)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: void putAll(java.util.Map)>(r1) in <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder addPluginEnabledState(java.util.Map)> ==> <java.util.jar.Attributes: void putAll(java.util.Map)>
INTERFACE edge: $r3 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>() in <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder addState(java.util.Map)> ==> <java.util.HashMap: java.util.Set entrySet()>
INTERFACE edge: $r3 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>() in <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder addState(java.util.Map)> ==> <java.util.Hashtable: java.util.Set entrySet()>
INTERFACE edge: $r3 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>() in <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder addState(java.util.Map)> ==> <java.util.TreeMap: java.util.Set entrySet()>
INTERFACE edge: $r3 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>() in <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder addState(java.util.Map)> ==> <java.util.jar.Attributes: java.util.Set entrySet()>
INTERFACE edge: $r8 = interfaceinvoke $r4.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r7) in <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder addState(java.util.Map)> ==> <java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: void putAll(java.util.Map)>($r9) in <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder addState(java.util.Map)> ==> <java.util.HashMap: void putAll(java.util.Map)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: void putAll(java.util.Map)>($r9) in <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder addState(java.util.Map)> ==> <java.util.Hashtable: void putAll(java.util.Map)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: void putAll(java.util.Map)>($r9) in <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder addState(java.util.Map)> ==> <java.util.AbstractMap: void putAll(java.util.Map)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: void putAll(java.util.Map)>($r9) in <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder addState(java.util.Map)> ==> <java.util.jar.Attributes: void putAll(java.util.Map)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder removeState(java.lang.String)> ==> <java.util.HashMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder removeState(java.lang.String)> ==> <java.util.Hashtable: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder removeState(java.lang.String)> ==> <java.util.TreeMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder removeState(java.lang.String)> ==> <java.util.jar.Attributes: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r11) in <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder setPluginRestartState(java.lang.String,com.atlassian.plugin.PluginRestartState)> ==> <java.util.HashMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r11) in <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder setPluginRestartState(java.lang.String,com.atlassian.plugin.PluginRestartState)> ==> <java.util.Hashtable: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r11) in <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder setPluginRestartState(java.lang.String,com.atlassian.plugin.PluginRestartState)> ==> <java.util.TreeMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r11) in <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder setPluginRestartState(java.lang.String,com.atlassian.plugin.PluginRestartState)> ==> <java.util.jar.Attributes: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r7) in <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder setPluginRestartState(java.lang.String,com.atlassian.plugin.PluginRestartState)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r7) in <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder setPluginRestartState(java.lang.String,com.atlassian.plugin.PluginRestartState)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r7) in <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder setPluginRestartState(java.lang.String,com.atlassian.plugin.PluginRestartState)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r7) in <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder setPluginRestartState(java.lang.String,com.atlassian.plugin.PluginRestartState)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>() in <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder clearPluginRestartState()> ==> <java.util.HashMap: java.util.Set keySet()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>() in <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder clearPluginRestartState()> ==> <java.util.Hashtable: java.util.Set keySet()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>() in <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder clearPluginRestartState()> ==> <java.util.TreeMap: java.util.Set keySet()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>() in <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder clearPluginRestartState()> ==> <java.util.jar.Attributes: java.util.Set keySet()>
SPECIAL edge: specialinvoke $r0.<java.util.HashSet: void <init>(java.util.Collection)>($r3) in <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder clearPluginRestartState()> ==> <java.util.HashSet: void <init>(java.util.Collection)>
INTERFACE edge: r5 = interfaceinvoke $r0.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder clearPluginRestartState()> ==> <java.util.HashSet: java.util.Iterator iterator()>
VIRTUAL edge: $z1 = virtualinvoke r7.<java.lang.String: boolean contains(java.lang.CharSequence)>("--") in <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder clearPluginRestartState()> ==> <java.lang.String: boolean contains(java.lang.CharSequence)>
INTERFACE edge: interfaceinvoke $r8.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r7) in <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder clearPluginRestartState()> ==> <java.util.HashMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r7) in <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder clearPluginRestartState()> ==> <java.util.Hashtable: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r7) in <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder clearPluginRestartState()> ==> <java.util.TreeMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r7) in <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder clearPluginRestartState()> ==> <java.util.jar.Attributes: java.lang.Object remove(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.Boolean: boolean booleanValue()>() in <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginEnabledState lambda$addState$0(java.util.Map$Entry)> ==> <java.lang.Boolean: boolean booleanValue()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.manager.PluginEnabledState: void <init>(boolean,long)>($z0, 0L) in <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginEnabledState lambda$addState$0(java.util.Map$Entry)> ==> <com.atlassian.plugin.manager.PluginEnabledState: void <init>(boolean,long)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.PluginPersistentState$Util: void <init>()> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $r3 = interfaceinvoke r1.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultPluginPersistentState: boolean isEnabled(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r3 = interfaceinvoke r1.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultPluginPersistentState: boolean isEnabled(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
INTERFACE edge: $z0 = interfaceinvoke r1.<com.atlassian.plugin.Plugin: boolean isEnabledByDefault()>() in <com.atlassian.plugin.manager.DefaultPluginPersistentState: boolean isEnabled(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: boolean isEnabledByDefault()>
INTERFACE edge: $z0 = interfaceinvoke r1.<com.atlassian.plugin.Plugin: boolean isEnabledByDefault()>() in <com.atlassian.plugin.manager.DefaultPluginPersistentState: boolean isEnabled(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.UnloadablePlugin: boolean isEnabledByDefault()>
INTERFACE edge: $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3) in <com.atlassian.plugin.manager.DefaultPluginPersistentState: boolean isEnabled(com.atlassian.plugin.Plugin)> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3) in <com.atlassian.plugin.manager.DefaultPluginPersistentState: boolean isEnabled(com.atlassian.plugin.Plugin)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3) in <com.atlassian.plugin.manager.DefaultPluginPersistentState: boolean isEnabled(com.atlassian.plugin.Plugin)> ==> <java.util.TreeMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3) in <com.atlassian.plugin.manager.DefaultPluginPersistentState: boolean isEnabled(com.atlassian.plugin.Plugin)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3) in <com.atlassian.plugin.manager.DefaultPluginPersistentState: boolean isEnabled(com.atlassian.plugin.Plugin)> ==> <java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r6.<java.lang.Boolean: boolean booleanValue()>() in <com.atlassian.plugin.manager.DefaultPluginPersistentState: boolean isEnabled(com.atlassian.plugin.Plugin)> ==> <java.lang.Boolean: boolean booleanValue()>
INTERFACE edge: $r3 = interfaceinvoke r0.<com.atlassian.plugin.ModuleDescriptor: java.lang.String getCompleteKey()>() in <com.atlassian.plugin.manager.DefaultPluginPersistentState: boolean isEnabled(com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.String getCompleteKey()>
INTERFACE edge: $z0 = interfaceinvoke r0.<com.atlassian.plugin.ModuleDescriptor: boolean isEnabledByDefault()>() in <com.atlassian.plugin.manager.DefaultPluginPersistentState: boolean isEnabled(com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.descriptors.AbstractNoOpModuleDescriptor: boolean isEnabledByDefault()>
INTERFACE edge: $z0 = interfaceinvoke r0.<com.atlassian.plugin.ModuleDescriptor: boolean isEnabledByDefault()>() in <com.atlassian.plugin.manager.DefaultPluginPersistentState: boolean isEnabled(com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: boolean isEnabledByDefault()>
INTERFACE edge: $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3) in <com.atlassian.plugin.manager.DefaultPluginPersistentState: boolean isEnabled(com.atlassian.plugin.ModuleDescriptor)> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3) in <com.atlassian.plugin.manager.DefaultPluginPersistentState: boolean isEnabled(com.atlassian.plugin.ModuleDescriptor)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3) in <com.atlassian.plugin.manager.DefaultPluginPersistentState: boolean isEnabled(com.atlassian.plugin.ModuleDescriptor)> ==> <java.util.TreeMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3) in <com.atlassian.plugin.manager.DefaultPluginPersistentState: boolean isEnabled(com.atlassian.plugin.ModuleDescriptor)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3) in <com.atlassian.plugin.manager.DefaultPluginPersistentState: boolean isEnabled(com.atlassian.plugin.ModuleDescriptor)> ==> <java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r6.<java.lang.Boolean: boolean booleanValue()>() in <com.atlassian.plugin.manager.DefaultPluginPersistentState: boolean isEnabled(com.atlassian.plugin.ModuleDescriptor)> ==> <java.lang.Boolean: boolean booleanValue()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.atlassian.plugin.manager.DefaultPluginPersistentState: java.util.Map getStatesMap()>() in <com.atlassian.plugin.manager.DefaultPluginPersistentState: java.util.Map getPluginEnabledStateMap(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DefaultPluginPersistentState: java.util.Map getStatesMap()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>() in <com.atlassian.plugin.manager.DefaultPluginPersistentState: java.util.Map getPluginEnabledStateMap(com.atlassian.plugin.Plugin)> ==> <java.util.HashMap: java.util.Set entrySet()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>() in <com.atlassian.plugin.manager.DefaultPluginPersistentState: java.util.Map getPluginEnabledStateMap(com.atlassian.plugin.Plugin)> ==> <java.util.Hashtable: java.util.Set entrySet()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>() in <com.atlassian.plugin.manager.DefaultPluginPersistentState: java.util.Map getPluginEnabledStateMap(com.atlassian.plugin.Plugin)> ==> <java.util.TreeMap: java.util.Set entrySet()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>() in <com.atlassian.plugin.manager.DefaultPluginPersistentState: java.util.Map getPluginEnabledStateMap(com.atlassian.plugin.Plugin)> ==> <java.util.jar.Attributes: java.util.Set entrySet()>
INTERFACE edge: $r6 = interfaceinvoke $r3.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($r5) in <com.atlassian.plugin.manager.DefaultPluginPersistentState: java.util.Map getPluginEnabledStateMap(com.atlassian.plugin.Plugin)> ==> <java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>
INTERFACE edge: $r10 = interfaceinvoke $r6.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r9) in <com.atlassian.plugin.manager.DefaultPluginPersistentState: java.util.Map getPluginEnabledStateMap(com.atlassian.plugin.Plugin)> ==> <java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>
INTERFACE edge: $z0 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>($r6) in <com.atlassian.plugin.manager.DefaultPluginPersistentState: com.atlassian.plugin.PluginRestartState getPluginRestartState(java.lang.String)> ==> <java.util.HashMap: boolean containsKey(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>($r6) in <com.atlassian.plugin.manager.DefaultPluginPersistentState: com.atlassian.plugin.PluginRestartState getPluginRestartState(java.lang.String)> ==> <java.util.Hashtable: boolean containsKey(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>($r6) in <com.atlassian.plugin.manager.DefaultPluginPersistentState: com.atlassian.plugin.PluginRestartState getPluginRestartState(java.lang.String)> ==> <java.util.TreeMap: boolean containsKey(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>($r6) in <com.atlassian.plugin.manager.DefaultPluginPersistentState: com.atlassian.plugin.PluginRestartState getPluginRestartState(java.lang.String)> ==> <java.util.jar.Attributes: boolean containsKey(java.lang.Object)>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>() in <com.atlassian.plugin.manager.DefaultPluginPersistentState: java.util.Map getPluginEnabledStateMap(java.util.Map)> ==> <java.util.HashMap: java.util.Set entrySet()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>() in <com.atlassian.plugin.manager.DefaultPluginPersistentState: java.util.Map getPluginEnabledStateMap(java.util.Map)> ==> <java.util.Hashtable: java.util.Set entrySet()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>() in <com.atlassian.plugin.manager.DefaultPluginPersistentState: java.util.Map getPluginEnabledStateMap(java.util.Map)> ==> <java.util.TreeMap: java.util.Set entrySet()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>() in <com.atlassian.plugin.manager.DefaultPluginPersistentState: java.util.Map getPluginEnabledStateMap(java.util.Map)> ==> <java.util.jar.Attributes: java.util.Set entrySet()>
INTERFACE edge: $r7 = interfaceinvoke $r3.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r6) in <com.atlassian.plugin.manager.DefaultPluginPersistentState: java.util.Map getPluginEnabledStateMap(java.util.Map)> ==> <java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>
SPECIAL edge: specialinvoke $r0.<java.util.HashMap: void <init>(java.util.Map)>($r8) in <com.atlassian.plugin.manager.DefaultPluginPersistentState: java.util.Map getPluginEnabledStateMap(java.util.Map)> ==> <java.util.HashMap: void <init>(java.util.Map)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.Boolean: boolean booleanValue()>() in <com.atlassian.plugin.manager.DefaultPluginPersistentState: com.atlassian.plugin.manager.PluginEnabledState lambda$getPluginEnabledStateMap$1(java.util.Map$Entry)> ==> <java.lang.Boolean: boolean booleanValue()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.manager.PluginEnabledState: void <init>(boolean,long)>($z0, 0L) in <com.atlassian.plugin.manager.DefaultPluginPersistentState: com.atlassian.plugin.manager.PluginEnabledState lambda$getPluginEnabledStateMap$1(java.util.Map$Entry)> ==> <com.atlassian.plugin.manager.PluginEnabledState: void <init>(boolean,long)>
INTERFACE edge: $r4 = interfaceinvoke r2.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultPluginPersistentState: boolean lambda$getPluginEnabledStateMap$0(com.atlassian.plugin.Plugin,java.util.Map$Entry)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r4 = interfaceinvoke r2.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultPluginPersistentState: boolean lambda$getPluginEnabledStateMap$0(com.atlassian.plugin.Plugin,java.util.Map$Entry)> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>($r4) in <com.atlassian.plugin.manager.DefaultPluginPersistentState: boolean lambda$getPluginEnabledStateMap$0(com.atlassian.plugin.Plugin,java.util.Map$Entry)> ==> <java.lang.String: boolean startsWith(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.parsers.XmlDescriptorParserUtils: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<com.atlassian.plugin.parsers.XmlDescriptorParserUtils$NamespaceCleaner: void <init>(com.atlassian.plugin.parsers.XmlDescriptorParserUtils$1)>(null) in <com.atlassian.plugin.parsers.XmlDescriptorParserUtils: org.dom4j.Document removeAllNamespaces(org.dom4j.Document)> ==> <com.atlassian.plugin.parsers.XmlDescriptorParserUtils$NamespaceCleaner: void <init>(com.atlassian.plugin.parsers.XmlDescriptorParserUtils$1)>
INTERFACE edge: interfaceinvoke r3.<com.atlassian.plugin.ModuleDescriptor: void init(com.atlassian.plugin.Plugin,org.dom4j.Element)>(r0, r1) in <com.atlassian.plugin.parsers.XmlDescriptorParserUtils: com.atlassian.plugin.ModuleDescriptor addModule(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin,org.dom4j.Element)> ==> <com.atlassian.plugin.ModuleDescriptor: void init(com.atlassian.plugin.Plugin,org.dom4j.Element)>
INTERFACE edge: interfaceinvoke r3.<com.atlassian.plugin.ModuleDescriptor: void init(com.atlassian.plugin.Plugin,org.dom4j.Element)>(r0, r1) in <com.atlassian.plugin.parsers.XmlDescriptorParserUtils: com.atlassian.plugin.ModuleDescriptor addModule(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin,org.dom4j.Element)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void init(com.atlassian.plugin.Plugin,org.dom4j.Element)>
INTERFACE edge: interfaceinvoke r3.<com.atlassian.plugin.ModuleDescriptor: void init(com.atlassian.plugin.Plugin,org.dom4j.Element)>(r0, r1) in <com.atlassian.plugin.parsers.XmlDescriptorParserUtils: com.atlassian.plugin.ModuleDescriptor addModule(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin,org.dom4j.Element)> ==> <com.atlassian.plugin.eventlistener.descriptors.EventListenerModuleDescriptor: void init(com.atlassian.plugin.Plugin,org.dom4j.Element)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptorFactory: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptor: void <init>()>() in <com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptorFactory: com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptor createUnrecognisedModuleDescriptor(com.atlassian.plugin.Plugin,org.dom4j.Element,java.lang.Throwable,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptor: void <init>()>
VIRTUAL edge: virtualinvoke $r0.<com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptor: void init(com.atlassian.plugin.Plugin,org.dom4j.Element)>(r2, r3) in <com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptorFactory: com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptor createUnrecognisedModuleDescriptor(com.atlassian.plugin.Plugin,org.dom4j.Element,java.lang.Throwable,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void init(com.atlassian.plugin.Plugin,org.dom4j.Element)>
VIRTUAL edge: r9 = virtualinvoke $r0.<com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptor: java.lang.String getKey()>() in <com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptorFactory: com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptor createUnrecognisedModuleDescriptor(com.atlassian.plugin.Plugin,org.dom4j.Element,java.lang.Throwable,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.String getKey()>
VIRTUAL edge: virtualinvoke $r0.<com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptor: void setErrorText(java.lang.String)>(r8) in <com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptorFactory: com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptor createUnrecognisedModuleDescriptor(com.atlassian.plugin.Plugin,org.dom4j.Element,java.lang.Throwable,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.descriptors.AbstractNoOpModuleDescriptor: void setErrorText(java.lang.String)>
INTERFACE edge: r6 = interfaceinvoke r5.<com.atlassian.plugin.ModuleDescriptorFactory: java.lang.Class getModuleDescriptorClass(java.lang.String)>(r4) in <com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptorFactory: com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptor createUnrecognisedModuleDescriptor(com.atlassian.plugin.Plugin,org.dom4j.Element,java.lang.Throwable,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.DefaultModuleDescriptorFactory: java.lang.Class getModuleDescriptorClass(java.lang.String)>
INTERFACE edge: r6 = interfaceinvoke r5.<com.atlassian.plugin.ModuleDescriptorFactory: java.lang.Class getModuleDescriptorClass(java.lang.String)>(r4) in <com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptorFactory: com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptor createUnrecognisedModuleDescriptor(com.atlassian.plugin.Plugin,org.dom4j.Element,java.lang.Throwable,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.descriptors.ChainModuleDescriptorFactory: java.lang.Class getModuleDescriptorClass(java.lang.String)>
VIRTUAL edge: r9 = virtualinvoke r6.<java.lang.Class: java.lang.String getName()>() in <com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptorFactory: com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptor createUnrecognisedModuleDescriptor(com.atlassian.plugin.Plugin,org.dom4j.Element,java.lang.Throwable,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.lang.Class: java.lang.String getName()>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.descriptors.AbstractNoOpModuleDescriptor: void <init>()>() in <com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptor: void <init>()> ==> <com.atlassian.plugin.descriptors.AbstractNoOpModuleDescriptor: void <init>()>
INTERFACE edge: interfaceinvoke $r5.<java.util.List: void clear()>() in <com.atlassian.plugin.parsers.XmlDescriptorParserUtils$NamespaceCleaner: void visit(org.dom4j.Document)> ==> <java.util.LinkedList: void clear()>
INTERFACE edge: interfaceinvoke $r5.<java.util.List: void clear()>() in <com.atlassian.plugin.parsers.XmlDescriptorParserUtils$NamespaceCleaner: void visit(org.dom4j.Document)> ==> <java.util.ArrayList: void clear()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("xmlns") in <com.atlassian.plugin.parsers.XmlDescriptorParserUtils$NamespaceCleaner: void visit(org.dom4j.Attribute)> ==> <java.lang.String: boolean contains(java.lang.CharSequence)>
VIRTUAL edge: $z1 = virtualinvoke $r3.<java.lang.String: boolean contains(java.lang.CharSequence)>("xsi:") in <com.atlassian.plugin.parsers.XmlDescriptorParserUtils$NamespaceCleaner: void visit(org.dom4j.Attribute)> ==> <java.lang.String: boolean contains(java.lang.CharSequence)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void <init>(com.atlassian.plugin.module.ModuleFactory)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void validate(org.dom4j.Element)>(r1) in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void init(com.atlassian.plugin.Plugin,org.dom4j.Element)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void validate(org.dom4j.Element)>
SPECIAL edge: $r9 = specialinvoke r0.<com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.String buildCompleteKey(com.atlassian.plugin.Plugin,java.lang.String)>(r2, $r8) in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void init(com.atlassian.plugin.Plugin,org.dom4j.Element)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.String buildCompleteKey(com.atlassian.plugin.Plugin,java.lang.String)>
VIRTUAL edge: $r26 = virtualinvoke $r25.<java.lang.Boolean: java.lang.String toString()>() in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void init(com.atlassian.plugin.Plugin,org.dom4j.Element)> ==> <java.lang.Boolean: java.lang.String toString()>
VIRTUAL edge: $z2 = virtualinvoke $r26.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r13) in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void init(com.atlassian.plugin.Plugin,org.dom4j.Element)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
INTERFACE edge: $r30 = interfaceinvoke $r14.<com.atlassian.plugin.Plugin: java.util.Optional getScopeKey()>() in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void init(com.atlassian.plugin.Plugin,org.dom4j.Element)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.util.Optional getScopeKey()>
VIRTUAL edge: $z0 = virtualinvoke $r16.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r17) in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void init(com.atlassian.plugin.Plugin,org.dom4j.Element)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $z1 = virtualinvoke $r18.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r19) in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void init(com.atlassian.plugin.Plugin,org.dom4j.Element)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
STATIC edge: staticinvoke <com.atlassian.plugin.util.Assertions: java.lang.Object notNull(java.lang.String,java.lang.Object)>("element", r0) in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void validate(org.dom4j.Element)> ==> <com.atlassian.plugin.util.Assertions: java.lang.Object notNull(java.lang.String,java.lang.Object)>
STATIC edge: r2 = staticinvoke <com.atlassian.plugin.util.validation.ValidationPattern: com.atlassian.plugin.util.validation.ValidationPattern createPattern()>() in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void validate(org.dom4j.Element)> ==> <com.atlassian.plugin.util.validation.ValidationPattern: com.atlassian.plugin.util.validation.ValidationPattern createPattern()>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void disabled()>() in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void destroy()> ==> <com.atlassian.plugin.eventlistener.descriptors.EventListenerModuleDescriptor: void disabled()>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void disabled()>() in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void destroy()> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void disabled()>
VIRTUAL edge: $z1 = virtualinvoke r0.<com.atlassian.plugin.descriptors.AbstractModuleDescriptor: boolean satisfiesMinJavaVersion()>() in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: boolean isEnabledByDefault()> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: boolean satisfiesMinJavaVersion()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.atlassian.plugin.descriptors.AbstractModuleDescriptor: com.atlassian.plugin.Plugin getPlugin()>() in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.String getPluginKey()> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: com.atlassian.plugin.Plugin getPlugin()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.String getPluginKey()> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.String getPluginKey()> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
VIRTUAL edge: $f0 = virtualinvoke $r2.<java.lang.Float: float floatValue()>() in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: boolean satisfiesMinJavaVersion()> ==> <java.lang.Float: float floatValue()>
SPECIAL edge: $r3 = specialinvoke r0.<com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.String buildCompleteKey(com.atlassian.plugin.Plugin,java.lang.String)>(r1, $r2) in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void setPlugin(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.String buildCompleteKey(com.atlassian.plugin.Plugin,java.lang.String)>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.descriptors.ModuleDescriptors$EqualsBuilder: void <init>()>() in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: boolean equals(java.lang.Object)> ==> <com.atlassian.plugin.descriptors.ModuleDescriptors$EqualsBuilder: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r0.<com.atlassian.plugin.descriptors.ModuleDescriptors$EqualsBuilder: com.atlassian.plugin.descriptors.ModuleDescriptors$EqualsBuilder descriptor(com.atlassian.plugin.ModuleDescriptor)>(r1) in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: boolean equals(java.lang.Object)> ==> <com.atlassian.plugin.descriptors.ModuleDescriptors$EqualsBuilder: com.atlassian.plugin.descriptors.ModuleDescriptors$EqualsBuilder descriptor(com.atlassian.plugin.ModuleDescriptor)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<com.atlassian.plugin.descriptors.ModuleDescriptors$EqualsBuilder: boolean isEqualTo(java.lang.Object)>(r3) in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: boolean equals(java.lang.Object)> ==> <com.atlassian.plugin.descriptors.ModuleDescriptors$EqualsBuilder: boolean isEqualTo(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.descriptors.ModuleDescriptors$HashCodeBuilder: void <init>()>() in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: int hashCode()> ==> <com.atlassian.plugin.descriptors.ModuleDescriptors$HashCodeBuilder: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r0.<com.atlassian.plugin.descriptors.ModuleDescriptors$HashCodeBuilder: com.atlassian.plugin.descriptors.ModuleDescriptors$HashCodeBuilder descriptor(com.atlassian.plugin.ModuleDescriptor)>(r1) in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: int hashCode()> ==> <com.atlassian.plugin.descriptors.ModuleDescriptors$HashCodeBuilder: com.atlassian.plugin.descriptors.ModuleDescriptors$HashCodeBuilder descriptor(com.atlassian.plugin.ModuleDescriptor)>
VIRTUAL edge: $i0 = virtualinvoke $r2.<com.atlassian.plugin.descriptors.ModuleDescriptors$HashCodeBuilder: int toHashCode()>() in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: int hashCode()> ==> <com.atlassian.plugin.descriptors.ModuleDescriptors$HashCodeBuilder: int toHashCode()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.String toString()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r1.<com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.String getCompleteKey()>() in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.String toString()> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.String getCompleteKey()>
VIRTUAL edge: $r5 = virtualinvoke r1.<com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.String getDescription()>() in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.String toString()> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.String getDescription()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (") in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5) in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")") in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void loadClass(com.atlassian.plugin.Plugin,java.lang.String)>($r2, $r1) in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void enabled()> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void loadClass(com.atlassian.plugin.Plugin,java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void loadClass(com.atlassian.plugin.Plugin,java.lang.String)>($r2, $r1) in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void enabled()> ==> <com.atlassian.plugin.descriptors.UnloadableModuleDescriptor: void loadClass(com.atlassian.plugin.Plugin,java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>("The module is either unloadable or unrecognised, in any case this shouldn\'t be called!") in <com.atlassian.plugin.descriptors.AbstractNoOpModuleDescriptor$1: java.lang.Object createModule(java.lang.String,com.atlassian.plugin.ModuleDescriptor)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.util.validation.ValidationPattern: void <init>()>() in <com.atlassian.plugin.util.validation.ValidationPattern: com.atlassian.plugin.util.validation.ValidationPattern createPattern()> ==> <com.atlassian.plugin.util.validation.ValidationPattern: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.util.validation.ValidationPattern$Rule: void <init>(java.lang.String,com.atlassian.plugin.util.validation.ValidationPattern$RuleTest[],com.atlassian.plugin.util.validation.ValidationPattern$1)>(r2, r3, null) in <com.atlassian.plugin.util.validation.ValidationPattern: com.atlassian.plugin.util.validation.ValidationPattern rule(java.lang.String,com.atlassian.plugin.util.validation.ValidationPattern$RuleTest[])> ==> <com.atlassian.plugin.util.validation.ValidationPattern$Rule: void <init>(java.lang.String,com.atlassian.plugin.util.validation.ValidationPattern$RuleTest[],com.atlassian.plugin.util.validation.ValidationPattern$1)>
INTERFACE edge: interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r1) in <com.atlassian.plugin.util.validation.ValidationPattern: com.atlassian.plugin.util.validation.ValidationPattern rule(java.lang.String,com.atlassian.plugin.util.validation.ValidationPattern$RuleTest[])> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r1) in <com.atlassian.plugin.util.validation.ValidationPattern: com.atlassian.plugin.util.validation.ValidationPattern rule(java.lang.String,com.atlassian.plugin.util.validation.ValidationPattern$RuleTest[])> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.util.validation.ValidationPattern$Rule: void <init>(java.lang.String,com.atlassian.plugin.util.validation.ValidationPattern$RuleTest[],com.atlassian.plugin.util.validation.ValidationPattern$1)>(".", r2, null) in <com.atlassian.plugin.util.validation.ValidationPattern: com.atlassian.plugin.util.validation.ValidationPattern rule(com.atlassian.plugin.util.validation.ValidationPattern$RuleTest[])> ==> <com.atlassian.plugin.util.validation.ValidationPattern$Rule: void <init>(java.lang.String,com.atlassian.plugin.util.validation.ValidationPattern$RuleTest[],com.atlassian.plugin.util.validation.ValidationPattern$1)>
INTERFACE edge: interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r1) in <com.atlassian.plugin.util.validation.ValidationPattern: com.atlassian.plugin.util.validation.ValidationPattern rule(com.atlassian.plugin.util.validation.ValidationPattern$RuleTest[])> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r1) in <com.atlassian.plugin.util.validation.ValidationPattern: com.atlassian.plugin.util.validation.ValidationPattern rule(com.atlassian.plugin.util.validation.ValidationPattern$RuleTest[])> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke $r22.<java.util.ArrayList: void <init>()>() in <com.atlassian.plugin.util.validation.ValidationPattern: void evaluate(org.dom4j.Node)> ==> <java.util.ArrayList: void <init>()>
INTERFACE edge: $z1 = interfaceinvoke $r22.<java.util.List: boolean isEmpty()>() in <com.atlassian.plugin.util.validation.ValidationPattern: void evaluate(org.dom4j.Node)> ==> <java.util.ArrayList: boolean isEmpty()>
INTERFACE edge: $i0 = interfaceinvoke $r22.<java.util.List: int size()>() in <com.atlassian.plugin.util.validation.ValidationPattern: void evaluate(org.dom4j.Node)> ==> <java.util.ArrayList: int size()>
INTERFACE edge: $r14 = interfaceinvoke $r22.<java.util.List: java.lang.Object get(int)>(0) in <com.atlassian.plugin.util.validation.ValidationPattern: void evaluate(org.dom4j.Node)> ==> <java.util.ArrayList: java.lang.Object get(int)>
INTERFACE edge: r21 = interfaceinvoke $r22.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.util.validation.ValidationPattern: void evaluate(org.dom4j.Node)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: r18 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.util.validation.ValidationPattern: void evaluate(org.dom4j.Node)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r18 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.util.validation.ValidationPattern: void evaluate(org.dom4j.Node)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke $r23.<com.atlassian.plugin.util.validation.ValidationException: void <init>(java.lang.String,java.util.List)>($r15, $r22) in <com.atlassian.plugin.util.validation.ValidationPattern: void evaluate(org.dom4j.Node)> ==> <com.atlassian.plugin.util.validation.ValidationException: void <init>(java.lang.String,java.util.List)>
SPECIAL edge: specialinvoke $r24.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.util.validation.ValidationPattern: void evaluate(org.dom4j.Node)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("There were validation errors:\n") in <com.atlassian.plugin.util.validation.ValidationPattern: void evaluate(org.dom4j.Node)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t- ") in <com.atlassian.plugin.util.validation.ValidationPattern: void evaluate(org.dom4j.Node)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.util.validation.ValidationPattern: void evaluate(org.dom4j.Node)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9) in <com.atlassian.plugin.util.validation.ValidationPattern: void evaluate(org.dom4j.Node)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n") in <com.atlassian.plugin.util.validation.ValidationPattern: void evaluate(org.dom4j.Node)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r25.<com.atlassian.plugin.util.validation.ValidationException: void <init>(java.lang.String,java.util.List)>($r7, $r22) in <com.atlassian.plugin.util.validation.ValidationPattern: void evaluate(org.dom4j.Node)> ==> <com.atlassian.plugin.util.validation.ValidationException: void <init>(java.lang.String,java.util.List)>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.util.validation.ValidationPattern$RuleTest: void <init>(java.lang.String,com.atlassian.plugin.util.validation.ValidationPattern$1)>(r1, null) in <com.atlassian.plugin.util.validation.ValidationPattern: com.atlassian.plugin.util.validation.ValidationPattern$RuleTest test(java.lang.String)> ==> <com.atlassian.plugin.util.validation.ValidationPattern$RuleTest: void <init>(java.lang.String,com.atlassian.plugin.util.validation.ValidationPattern$1)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.descriptors.ModuleDescriptors$HashCodeBuilder: void <init>()> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<com.atlassian.plugin.ModuleDescriptor: java.lang.String getCompleteKey()>() in <com.atlassian.plugin.descriptors.ModuleDescriptors$HashCodeBuilder: int toHashCode()> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.String getCompleteKey()>
INTERFACE edge: $r6 = interfaceinvoke $r5.<com.atlassian.plugin.ModuleDescriptor: java.lang.String getCompleteKey()>() in <com.atlassian.plugin.descriptors.ModuleDescriptors$HashCodeBuilder: int toHashCode()> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.String getCompleteKey()>
VIRTUAL edge: $i0 = virtualinvoke $r6.<java.lang.String: int hashCode()>() in <com.atlassian.plugin.descriptors.ModuleDescriptors$HashCodeBuilder: int toHashCode()> ==> <java.lang.String: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r0.<com.atlassian.plugin.descriptors.ModuleDescriptors$HashCodeBuilder: int toHashCode()>() in <com.atlassian.plugin.descriptors.ModuleDescriptors$HashCodeBuilder: int hashCode()> ==> <com.atlassian.plugin.descriptors.ModuleDescriptors$HashCodeBuilder: int toHashCode()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: void <init>(java.util.Set)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.util.HashMap: void <init>()>() in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: void <init>(java.util.Set)> ==> <java.util.HashMap: void <init>()>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, r7) in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: void <init>(java.util.Set)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: r5 = interfaceinvoke r4.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: void <init>(java.util.Set)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r5 = interfaceinvoke r4.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: void <init>(java.util.Set)> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r5 = interfaceinvoke r4.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: void <init>(java.util.Set)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: $r8 = interfaceinvoke r7.<com.atlassian.plugin.module.PrefixModuleFactory: java.lang.String getPrefix()>() in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: void <init>(java.util.Set)> ==> <com.atlassian.plugin.module.ClassPrefixModuleFactory: java.lang.String getPrefix()>
INTERFACE edge: $r3 = interfaceinvoke r1.<com.atlassian.plugin.module.PrefixModuleFactory: java.lang.String getPrefix()>() in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: void addPrefixModuleFactory(com.atlassian.plugin.module.PrefixModuleFactory)> ==> <com.atlassian.plugin.module.ClassPrefixModuleFactory: java.lang.String getPrefix()>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r1) in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: void addPrefixModuleFactory(com.atlassian.plugin.module.PrefixModuleFactory)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r1) in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: void addPrefixModuleFactory(com.atlassian.plugin.module.PrefixModuleFactory)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r1) in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: void addPrefixModuleFactory(com.atlassian.plugin.module.PrefixModuleFactory)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r1) in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: void addPrefixModuleFactory(com.atlassian.plugin.module.PrefixModuleFactory)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: r5 = specialinvoke r4.<com.atlassian.plugin.module.PrefixDelegatingModuleFactory: com.atlassian.plugin.module.PrefixDelegatingModuleFactory$ModuleReference getBeanReference(java.lang.String)>(r0) in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: java.lang.Object createModule(java.lang.String,com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: com.atlassian.plugin.module.PrefixDelegatingModuleFactory$ModuleReference getBeanReference(java.lang.String)>
VIRTUAL edge: r6 = virtualinvoke r4.<com.atlassian.plugin.module.PrefixDelegatingModuleFactory: com.atlassian.plugin.module.ModuleFactory getModuleFactoryForPrefix(com.atlassian.plugin.module.PrefixDelegatingModuleFactory$ModuleReference,com.atlassian.plugin.ModuleDescriptor)>(r5, r2) in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: java.lang.Object createModule(java.lang.String,com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: com.atlassian.plugin.module.ModuleFactory getModuleFactoryForPrefix(com.atlassian.plugin.module.PrefixDelegatingModuleFactory$ModuleReference,com.atlassian.plugin.ModuleDescriptor)>
SPECIAL edge: specialinvoke $r43.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: java.lang.Object createModule(java.lang.String,com.atlassian.plugin.ModuleDescriptor)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r17 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to create a module. Prefix \'") in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: java.lang.Object createModule(java.lang.String,com.atlassian.plugin.ModuleDescriptor)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: java.lang.Object createModule(java.lang.String,com.atlassian.plugin.ModuleDescriptor)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' not supported") in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: java.lang.Object createModule(java.lang.String,com.atlassian.plugin.ModuleDescriptor)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: java.lang.Object createModule(java.lang.String,com.atlassian.plugin.ModuleDescriptor)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r44.<com.atlassian.plugin.PluginParseException: void <init>(java.lang.String)>($r21) in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: java.lang.Object createModule(java.lang.String,com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.PluginParseException: void <init>(java.lang.String)>
INTERFACE edge: r8 = interfaceinvoke r6.<com.atlassian.plugin.module.ModuleFactory: java.lang.Object createModule(java.lang.String,com.atlassian.plugin.ModuleDescriptor)>($r7, r2) in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: java.lang.Object createModule(java.lang.String,com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: java.lang.Object createModule(java.lang.String,com.atlassian.plugin.ModuleDescriptor)>
INTERFACE edge: r8 = interfaceinvoke r6.<com.atlassian.plugin.module.ModuleFactory: java.lang.Object createModule(java.lang.String,com.atlassian.plugin.ModuleDescriptor)>($r7, r2) in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: java.lang.Object createModule(java.lang.String,com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.descriptors.AbstractNoOpModuleDescriptor$1: java.lang.Object createModule(java.lang.String,com.atlassian.plugin.ModuleDescriptor)>
INTERFACE edge: r8 = interfaceinvoke r6.<com.atlassian.plugin.module.ModuleFactory: java.lang.Object createModule(java.lang.String,com.atlassian.plugin.ModuleDescriptor)>($r7, r2) in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: java.lang.Object createModule(java.lang.String,com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.module.ClassPrefixModuleFactory: java.lang.Object createModule(java.lang.String,com.atlassian.plugin.ModuleDescriptor)>
INTERFACE edge: $r36 = interfaceinvoke r2.<com.atlassian.plugin.ModuleDescriptor: com.atlassian.plugin.Plugin getPlugin()>() in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: java.lang.Object createModule(java.lang.String,com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.ModuleDescriptor: com.atlassian.plugin.Plugin getPlugin()>
INTERFACE edge: $r36 = interfaceinvoke r2.<com.atlassian.plugin.ModuleDescriptor: com.atlassian.plugin.Plugin getPlugin()>() in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: java.lang.Object createModule(java.lang.String,com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: com.atlassian.plugin.Plugin getPlugin()>
INTERFACE edge: $r38 = interfaceinvoke r2.<com.atlassian.plugin.ModuleDescriptor: java.lang.String getKey()>() in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: java.lang.Object createModule(java.lang.String,com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.ModuleDescriptor: java.lang.String getKey()>
INTERFACE edge: $r38 = interfaceinvoke r2.<com.atlassian.plugin.ModuleDescriptor: java.lang.String getKey()>() in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: java.lang.Object createModule(java.lang.String,com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.String getKey()>
INTERFACE edge: $r29 = interfaceinvoke r2.<com.atlassian.plugin.ModuleDescriptor: com.atlassian.plugin.Plugin getPlugin()>() in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: java.lang.Object createModule(java.lang.String,com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.ModuleDescriptor: com.atlassian.plugin.Plugin getPlugin()>
INTERFACE edge: $r29 = interfaceinvoke r2.<com.atlassian.plugin.ModuleDescriptor: com.atlassian.plugin.Plugin getPlugin()>() in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: java.lang.Object createModule(java.lang.String,com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: com.atlassian.plugin.Plugin getPlugin()>
INTERFACE edge: $r31 = interfaceinvoke r2.<com.atlassian.plugin.ModuleDescriptor: java.lang.String getKey()>() in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: java.lang.Object createModule(java.lang.String,com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.ModuleDescriptor: java.lang.String getKey()>
INTERFACE edge: $r31 = interfaceinvoke r2.<com.atlassian.plugin.ModuleDescriptor: java.lang.String getKey()>() in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: java.lang.Object createModule(java.lang.String,com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.String getKey()>
INTERFACE edge: $r37 = interfaceinvoke $r36.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: java.lang.Object createModule(java.lang.String,com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r37 = interfaceinvoke $r36.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: java.lang.Object createModule(java.lang.String,com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
VIRTUAL edge: $r39 = virtualinvoke $r33.<java.lang.NoClassDefFoundError: java.lang.String getMessage()>() in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: java.lang.Object createModule(java.lang.String,com.atlassian.plugin.ModuleDescriptor)> ==> <java.lang.Throwable: java.lang.String getMessage()>
INTERFACE edge: $r30 = interfaceinvoke $r29.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: java.lang.Object createModule(java.lang.String,com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r30 = interfaceinvoke $r29.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: java.lang.Object createModule(java.lang.String,com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
VIRTUAL edge: $r32 = virtualinvoke $r26.<java.lang.LinkageError: java.lang.String getMessage()>() in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: java.lang.Object createModule(java.lang.String,com.atlassian.plugin.ModuleDescriptor)> ==> <java.lang.Throwable: java.lang.String getMessage()>
VIRTUAL edge: $r23 = virtualinvoke $r22.<java.lang.Object: java.lang.Class getClass()>() in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: java.lang.Object createModule(java.lang.String,com.atlassian.plugin.ModuleDescriptor)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r24 = virtualinvoke $r23.<java.lang.Class: java.lang.String getSimpleName()>() in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: java.lang.Object createModule(java.lang.String,com.atlassian.plugin.ModuleDescriptor)> ==> <java.lang.Class: java.lang.String getSimpleName()>
VIRTUAL edge: $z0 = virtualinvoke $r24.<java.lang.String: boolean equals(java.lang.Object)>("UnsatisfiedDependencyException") in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: java.lang.Object createModule(java.lang.String,com.atlassian.plugin.ModuleDescriptor)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r45.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: java.lang.Object createModule(java.lang.String,com.atlassian.plugin.ModuleDescriptor)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r11 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to create module instance from \'") in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: java.lang.Object createModule(java.lang.String,com.atlassian.plugin.ModuleDescriptor)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0) in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: java.lang.Object createModule(java.lang.String,com.atlassian.plugin.ModuleDescriptor)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'") in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: java.lang.Object createModule(java.lang.String,com.atlassian.plugin.ModuleDescriptor)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: java.lang.Object createModule(java.lang.String,com.atlassian.plugin.ModuleDescriptor)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r46.<com.atlassian.plugin.PluginParseException: void <init>(java.lang.String)>($r14) in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: java.lang.Object createModule(java.lang.String,com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.PluginParseException: void <init>(java.lang.String)>
SPECIAL edge: r5 = specialinvoke r4.<com.atlassian.plugin.module.PrefixDelegatingModuleFactory: com.atlassian.plugin.module.PrefixDelegatingModuleFactory$ModuleReference getBeanReference(java.lang.String)>(r0) in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: java.lang.Class guessModuleClass(java.lang.String,com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: com.atlassian.plugin.module.PrefixDelegatingModuleFactory$ModuleReference getBeanReference(java.lang.String)>
VIRTUAL edge: r6 = virtualinvoke r4.<com.atlassian.plugin.module.PrefixDelegatingModuleFactory: com.atlassian.plugin.module.ModuleFactory getModuleFactoryForPrefix(com.atlassian.plugin.module.PrefixDelegatingModuleFactory$ModuleReference,com.atlassian.plugin.ModuleDescriptor)>(r5, r2) in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: java.lang.Class guessModuleClass(java.lang.String,com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: com.atlassian.plugin.module.ModuleFactory getModuleFactoryForPrefix(com.atlassian.plugin.module.PrefixDelegatingModuleFactory$ModuleReference,com.atlassian.plugin.ModuleDescriptor)>
VIRTUAL edge: r9 = virtualinvoke $r8.<com.atlassian.plugin.module.ClassPrefixModuleFactory: java.lang.Class getModuleClass(java.lang.String,com.atlassian.plugin.ModuleDescriptor)>($r7, r2) in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: java.lang.Class guessModuleClass(java.lang.String,com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.module.ClassPrefixModuleFactory: java.lang.Class getModuleClass(java.lang.String,com.atlassian.plugin.ModuleDescriptor)>
SPECIAL edge: specialinvoke $r0.<java.util.HashSet: void <init>()>() in <com.atlassian.plugin.util.ClassUtils: java.util.Set findAllTypes(java.lang.Class)> ==> <java.util.HashSet: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>(r0) in <com.atlassian.plugin.util.ClassUtils: void findAllTypes(java.lang.Class,java.util.Set)> ==> <java.util.HashSet: boolean contains(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>(r0) in <com.atlassian.plugin.util.ClassUtils: void findAllTypes(java.lang.Class,java.util.Set)> ==> <java.util.concurrent.CopyOnWriteArraySet: boolean contains(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>(r0) in <com.atlassian.plugin.util.ClassUtils: void findAllTypes(java.lang.Class,java.util.Set)> ==> <java.util.TreeSet: boolean contains(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>(r0) in <com.atlassian.plugin.util.ClassUtils: void findAllTypes(java.lang.Class,java.util.Set)> ==> <java.util.HashSet: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>(r0) in <com.atlassian.plugin.util.ClassUtils: void findAllTypes(java.lang.Class,java.util.Set)> ==> <java.util.concurrent.CopyOnWriteArraySet: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>(r0) in <com.atlassian.plugin.util.ClassUtils: void findAllTypes(java.lang.Class,java.util.Set)> ==> <java.util.TreeSet: boolean add(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>() in <com.atlassian.plugin.util.ClassUtils: void findAllTypes(java.lang.Class,java.util.Set)> ==> <java.lang.Class: java.lang.Class getSuperclass()>
VIRTUAL edge: $r3 = virtualinvoke r0.<java.lang.Class: java.lang.Class[] getInterfaces()>() in <com.atlassian.plugin.util.ClassUtils: void findAllTypes(java.lang.Class,java.util.Set)> ==> <java.lang.Class: java.lang.Class[] getInterfaces()>
VIRTUAL edge: $r4 = virtualinvoke r0.<java.lang.Class: java.lang.Class[] getInterfaces()>() in <com.atlassian.plugin.util.ClassUtils: void findAllTypes(java.lang.Class,java.util.Set)> ==> <java.lang.Class: java.lang.Class[] getInterfaces()>
SPECIAL edge: specialinvoke $r29.<java.util.HashMap: void <init>()>() in <com.atlassian.plugin.util.ClassUtils: java.util.List getTypeArguments(java.lang.Class,java.lang.Class)> ==> <java.util.HashMap: void <init>()>
INTERFACE edge: interfaceinvoke $r29.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, $r15) in <com.atlassian.plugin.util.ClassUtils: java.util.List getTypeArguments(java.lang.Class,java.lang.Class)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: $z2 = interfaceinvoke $r29.<java.util.Map: boolean containsKey(java.lang.Object)>(r28) in <com.atlassian.plugin.util.ClassUtils: java.util.List getTypeArguments(java.lang.Class,java.lang.Class)> ==> <java.util.HashMap: boolean containsKey(java.lang.Object)>
INTERFACE edge: $r7 = interfaceinvoke $r29.<java.util.Map: java.lang.Object get(java.lang.Object)>(r28) in <com.atlassian.plugin.util.ClassUtils: java.util.List getTypeArguments(java.lang.Class,java.lang.Class)> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r7 = interfaceinvoke $r29.<java.util.Map: java.lang.Object get(java.lang.Object)>(r28) in <com.atlassian.plugin.util.ClassUtils: java.util.List getTypeArguments(java.lang.Class,java.lang.Class)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r20.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.atlassian.plugin.util.ClassUtils: java.util.List getTypeArguments(java.lang.Class,java.lang.Class)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: r19 = virtualinvoke $r18.<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>() in <com.atlassian.plugin.util.ClassUtils: java.util.List getTypeArguments(java.lang.Class,java.lang.Class)> ==> <java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>
VIRTUAL edge: r24 = virtualinvoke r22.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>() in <com.atlassian.plugin.util.ClassUtils: java.util.List getTypeArguments(java.lang.Class,java.lang.Class)> ==> <java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>
VIRTUAL edge: $z5 = virtualinvoke r22.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.atlassian.plugin.util.ClassUtils: java.util.List getTypeArguments(java.lang.Class,java.lang.Class)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: r19 = virtualinvoke r22.<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>() in <com.atlassian.plugin.util.ClassUtils: java.util.List getTypeArguments(java.lang.Class,java.lang.Class)> ==> <java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>
SPECIAL edge: specialinvoke $r30.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.util.ClassUtils: java.util.List getTypeArguments(java.lang.Class,java.lang.Class)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r12 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to find the class for the type ") in <com.atlassian.plugin.util.ClassUtils: java.util.List getTypeArguments(java.lang.Class,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r19) in <com.atlassian.plugin.util.ClassUtils: java.util.List getTypeArguments(java.lang.Class,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.util.ClassUtils: java.util.List getTypeArguments(java.lang.Class,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r31.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14) in <com.atlassian.plugin.util.ClassUtils: java.util.List getTypeArguments(java.lang.Class,java.lang.Class)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: r25 = virtualinvoke $r8.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>() in <com.atlassian.plugin.util.ClassUtils: java.util.List getTypeArguments(java.lang.Class,java.lang.Class)> ==> <java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>
SPECIAL edge: specialinvoke $r32.<java.util.ArrayList: void <init>()>() in <com.atlassian.plugin.util.ClassUtils: java.util.List getTypeArguments(java.lang.Class,java.lang.Class)> ==> <java.util.ArrayList: void <init>()>
INTERFACE edge: interfaceinvoke $r32.<java.util.List: boolean add(java.lang.Object)>($r6) in <com.atlassian.plugin.util.ClassUtils: java.util.List getTypeArguments(java.lang.Class,java.lang.Class)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.descriptors.ModuleDescriptors$EqualsBuilder: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r6.<org.apache.commons.lang3.builder.EqualsBuilder: void <init>()>() in <com.atlassian.plugin.descriptors.ModuleDescriptors$EqualsBuilder: boolean isEqualTo(java.lang.Object)> ==> <org.apache.commons.lang3.builder.EqualsBuilder: void <init>()>
INTERFACE edge: $r8 = interfaceinvoke $r7.<com.atlassian.plugin.ModuleDescriptor: java.lang.String getCompleteKey()>() in <com.atlassian.plugin.descriptors.ModuleDescriptors$EqualsBuilder: boolean isEqualTo(java.lang.Object)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.String getCompleteKey()>
INTERFACE edge: $r9 = interfaceinvoke r5.<com.atlassian.plugin.ModuleDescriptor: java.lang.String getCompleteKey()>() in <com.atlassian.plugin.descriptors.ModuleDescriptors$EqualsBuilder: boolean isEqualTo(java.lang.Object)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.String getCompleteKey()>
SPECIAL edge: specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.ModulePermissionException: void <init>(java.lang.String,java.util.Set)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not load module ") in <com.atlassian.plugin.ModulePermissionException: void <init>(java.lang.String,java.util.Set)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) in <com.atlassian.plugin.ModulePermissionException: void <init>(java.lang.String,java.util.Set)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". The plugin is missing the following permissions: ") in <com.atlassian.plugin.ModulePermissionException: void <init>(java.lang.String,java.util.Set)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6) in <com.atlassian.plugin.ModulePermissionException: void <init>(java.lang.String,java.util.Set)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.ModulePermissionException: void <init>(java.lang.String,java.util.Set)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.PluginException: void <init>(java.lang.String)>($r8) in <com.atlassian.plugin.ModulePermissionException: void <init>(java.lang.String,java.util.Set)> ==> <com.atlassian.plugin.PluginException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r11.<java.util.HashSet: void <init>(java.util.Collection)>($r13) in <com.atlassian.plugin.ModulePermissionException: void <init>(java.lang.String,java.util.Set)> ==> <java.util.HashSet: void <init>(java.util.Collection)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.descriptors.ModuleDescriptors: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.module.ClassPrefixModuleFactory: void <init>(com.atlassian.plugin.hostcontainer.HostContainer)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: r3 = virtualinvoke r0.<com.atlassian.plugin.module.ClassPrefixModuleFactory: java.lang.Class getModuleClass(java.lang.String,com.atlassian.plugin.ModuleDescriptor)>(r1, r2) in <com.atlassian.plugin.module.ClassPrefixModuleFactory: java.lang.Object createModule(java.lang.String,com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.module.ClassPrefixModuleFactory: java.lang.Class getModuleClass(java.lang.String,com.atlassian.plugin.ModuleDescriptor)>
INTERFACE edge: r4 = interfaceinvoke r2.<com.atlassian.plugin.ModuleDescriptor: com.atlassian.plugin.Plugin getPlugin()>() in <com.atlassian.plugin.module.ClassPrefixModuleFactory: java.lang.Object createModule(java.lang.String,com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.ModuleDescriptor: com.atlassian.plugin.Plugin getPlugin()>
INTERFACE edge: r4 = interfaceinvoke r2.<com.atlassian.plugin.ModuleDescriptor: com.atlassian.plugin.Plugin getPlugin()>() in <com.atlassian.plugin.module.ClassPrefixModuleFactory: java.lang.Object createModule(java.lang.String,com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: com.atlassian.plugin.Plugin getPlugin()>
INTERFACE edge: $r6 = interfaceinvoke $r5.<com.atlassian.plugin.hostcontainer.HostContainer: java.lang.Object create(java.lang.Class)>(r3) in <com.atlassian.plugin.module.ClassPrefixModuleFactory: java.lang.Object createModule(java.lang.String,com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.hostcontainer.DefaultHostContainer: java.lang.Object create(java.lang.Class)>
INTERFACE edge: $r6 = interfaceinvoke $r5.<com.atlassian.plugin.hostcontainer.HostContainer: java.lang.Object create(java.lang.Class)>(r3) in <com.atlassian.plugin.module.ClassPrefixModuleFactory: java.lang.Object createModule(java.lang.String,com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.hostcontainer.SimpleConstructorHostContainer: java.lang.Object create(java.lang.Class)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.PluginParseException: void <init>(java.lang.String)>(r1) in <com.atlassian.plugin.util.validation.ValidationException: void <init>(java.lang.String,java.util.List)> ==> <com.atlassian.plugin.PluginParseException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.util.resource.AlternativeClassLoaderResourceLoader: void <init>(java.lang.Class)>(class "Lcom/atlassian/plugin/util/resource/AlternativeClassLoaderResourceLoader;") in <com.atlassian.plugin.util.resource.AlternativeClassLoaderResourceLoader: void <init>()> ==> <com.atlassian.plugin.util.resource.AlternativeClassLoaderResourceLoader: void <init>(java.lang.Class)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.util.resource.AlternativeClassLoaderResourceLoader: void <init>(java.lang.Class)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Class: java.net.URL getResource(java.lang.String)>(r1) in <com.atlassian.plugin.util.resource.AlternativeClassLoaderResourceLoader: java.net.URL getResource(java.lang.String)> ==> <java.lang.Class: java.net.URL getResource(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>(r1) in <com.atlassian.plugin.util.resource.AlternativeClassLoaderResourceLoader: java.io.InputStream getResourceAsStream(java.lang.String)> ==> <java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.util.VersionRange$OrVersionRange: void <init>(com.atlassian.plugin.util.VersionRange,com.atlassian.plugin.util.VersionRange,com.atlassian.plugin.util.VersionRange$1)>(r1, r2, null) in <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange or(com.atlassian.plugin.util.VersionRange)> ==> <com.atlassian.plugin.util.VersionRange$OrVersionRange: void <init>(com.atlassian.plugin.util.VersionRange,com.atlassian.plugin.util.VersionRange,com.atlassian.plugin.util.VersionRange$1)>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.util.VersionRange$EmptyVersionRange: void <init>(com.atlassian.plugin.util.VersionRange$1)>(null) in <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange empty()> ==> <com.atlassian.plugin.util.VersionRange$EmptyVersionRange: void <init>(com.atlassian.plugin.util.VersionRange$1)>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.util.VersionRange$AllVersionRange: void <init>(com.atlassian.plugin.util.VersionRange$1)>(null) in <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange all()> ==> <com.atlassian.plugin.util.VersionRange$AllVersionRange: void <init>(com.atlassian.plugin.util.VersionRange$1)>
VIRTUAL edge: r2 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0) in <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange parse(java.lang.String)> ==> <java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>
VIRTUAL edge: $z0 = virtualinvoke r2.<java.util.regex.Matcher: boolean matches()>() in <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange parse(java.lang.String)> ==> <java.util.regex.Matcher: boolean matches()>
VIRTUAL edge: r11 = virtualinvoke r2.<java.util.regex.Matcher: java.lang.String group(int)>(1) in <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange parse(java.lang.String)> ==> <java.util.regex.Matcher: java.lang.String group(int)>
VIRTUAL edge: r12 = virtualinvoke r2.<java.util.regex.Matcher: java.lang.String group(int)>(2) in <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange parse(java.lang.String)> ==> <java.util.regex.Matcher: java.lang.String group(int)>
VIRTUAL edge: r13 = virtualinvoke r2.<java.util.regex.Matcher: java.lang.String group(int)>(3) in <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange parse(java.lang.String)> ==> <java.util.regex.Matcher: java.lang.String group(int)>
VIRTUAL edge: r14 = virtualinvoke r2.<java.util.regex.Matcher: java.lang.String group(int)>(4) in <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange parse(java.lang.String)> ==> <java.util.regex.Matcher: java.lang.String group(int)>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange parse(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Range \'") in <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange parse(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0) in <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange parse(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' doesn\'t match pattern ") in <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange parse(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.util.regex.Pattern: java.lang.String pattern()>() in <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange parse(java.lang.String)> ==> <java.util.regex.Pattern: java.lang.String pattern()>
VIRTUAL edge: $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8) in <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange parse(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange parse(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r30 = virtualinvoke $r29.<com.atlassian.plugin.util.VersionRange$ActualVersionRangeBuilder: com.atlassian.plugin.util.VersionRange unbounded()>() in <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange parse(java.lang.String)> ==> <com.atlassian.plugin.util.VersionRange$ActualVersionRangeBuilder: com.atlassian.plugin.util.VersionRange unbounded()>
VIRTUAL edge: $z1 = virtualinvoke r11.<java.lang.String: boolean equals(java.lang.Object)>("[") in <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange parse(java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z9 = virtualinvoke r11.<java.lang.String: boolean equals(java.lang.Object)>("[") in <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange parse(java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke r11.<java.lang.String: boolean equals(java.lang.Object)>("(") in <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange parse(java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z4 = virtualinvoke r14.<java.lang.String: boolean equals(java.lang.Object)>("]") in <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange parse(java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z11 = virtualinvoke r14.<java.lang.String: boolean equals(java.lang.Object)>("]") in <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange parse(java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z3 = virtualinvoke r14.<java.lang.String: boolean equals(java.lang.Object)>(")") in <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange parse(java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r16.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange parse(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Incorrect start of range! ") in <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange parse(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11) in <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange parse(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange parse(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r15.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r19) in <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange parse(java.lang.String)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
VIRTUAL edge: $r27 = virtualinvoke r31.<com.atlassian.plugin.util.VersionRange$ActualVersionRangeBuilder: com.atlassian.plugin.util.VersionRange include(java.lang.String)>(r13) in <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange parse(java.lang.String)> ==> <com.atlassian.plugin.util.VersionRange$ActualVersionRangeBuilder: com.atlassian.plugin.util.VersionRange include(java.lang.String)>
VIRTUAL edge: $r26 = virtualinvoke r31.<com.atlassian.plugin.util.VersionRange$ActualVersionRangeBuilder: com.atlassian.plugin.util.VersionRange exclude(java.lang.String)>(r13) in <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange parse(java.lang.String)> ==> <com.atlassian.plugin.util.VersionRange$ActualVersionRangeBuilder: com.atlassian.plugin.util.VersionRange exclude(java.lang.String)>
VIRTUAL edge: $r25 = virtualinvoke r31.<com.atlassian.plugin.util.VersionRange$ActualVersionRangeBuilder: com.atlassian.plugin.util.VersionRange unbounded()>() in <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange parse(java.lang.String)> ==> <com.atlassian.plugin.util.VersionRange$ActualVersionRangeBuilder: com.atlassian.plugin.util.VersionRange unbounded()>
SPECIAL edge: specialinvoke $r21.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange parse(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Incorrect ent of range! ") in <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange parse(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14) in <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange parse(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange parse(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r20.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r24) in <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange parse(java.lang.String)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.util.VersionRange$SingleVersionRange: void <init>(java.lang.String,com.atlassian.plugin.util.VersionRange$1)>(r1, null) in <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange single(java.lang.String)> ==> <com.atlassian.plugin.util.VersionRange$SingleVersionRange: void <init>(java.lang.String,com.atlassian.plugin.util.VersionRange$1)>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.util.VersionRange$ActualVersionRangeBuilder: void <init>(boolean,java.lang.String)>(1, r1) in <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange$ActualVersionRangeBuilder include(java.lang.String)> ==> <com.atlassian.plugin.util.VersionRange$ActualVersionRangeBuilder: void <init>(boolean,java.lang.String)>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.util.VersionRange$ActualVersionRangeBuilder: void <init>(boolean,java.lang.String)>(0, r1) in <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange$ActualVersionRangeBuilder exclude(java.lang.String)> ==> <com.atlassian.plugin.util.VersionRange$ActualVersionRangeBuilder: void <init>(boolean,java.lang.String)>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.util.VersionRange$ActualVersionRangeBuilder: void <init>(boolean,java.lang.String)>(1, null) in <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange$ActualVersionRangeBuilder unbounded()> ==> <com.atlassian.plugin.util.VersionRange$ActualVersionRangeBuilder: void <init>(boolean,java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.util.VersionRange$ActualVersionRangeBuilder: void <init>(boolean,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: $r2 = specialinvoke r0.<com.atlassian.plugin.util.VersionRange$ActualVersionRangeBuilder: com.atlassian.plugin.util.VersionRange newRange(java.lang.String,boolean)>(r1, 1) in <com.atlassian.plugin.util.VersionRange$ActualVersionRangeBuilder: com.atlassian.plugin.util.VersionRange include(java.lang.String)> ==> <com.atlassian.plugin.util.VersionRange$ActualVersionRangeBuilder: com.atlassian.plugin.util.VersionRange newRange(java.lang.String,boolean)>
SPECIAL edge: $r2 = specialinvoke r0.<com.atlassian.plugin.util.VersionRange$ActualVersionRangeBuilder: com.atlassian.plugin.util.VersionRange newRange(java.lang.String,boolean)>(r1, 0) in <com.atlassian.plugin.util.VersionRange$ActualVersionRangeBuilder: com.atlassian.plugin.util.VersionRange exclude(java.lang.String)> ==> <com.atlassian.plugin.util.VersionRange$ActualVersionRangeBuilder: com.atlassian.plugin.util.VersionRange newRange(java.lang.String,boolean)>
SPECIAL edge: specialinvoke $r4.<java.lang.IllegalStateException: void <init>()>() in <com.atlassian.plugin.util.VersionRange$ActualVersionRangeBuilder: com.atlassian.plugin.util.VersionRange unbounded()> ==> <java.lang.IllegalStateException: void <init>()>
SPECIAL edge: specialinvoke $r2.<com.atlassian.plugin.util.VersionRange$RightUnboundedVersionRange: void <init>(boolean,java.lang.String,com.atlassian.plugin.util.VersionRange$1)>($z0, $r3, null) in <com.atlassian.plugin.util.VersionRange$ActualVersionRangeBuilder: com.atlassian.plugin.util.VersionRange unbounded()> ==> <com.atlassian.plugin.util.VersionRange$RightUnboundedVersionRange: void <init>(boolean,java.lang.String,com.atlassian.plugin.util.VersionRange$1)>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() in <com.atlassian.plugin.util.VersionRange$AllVersionRange: boolean equals(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() in <com.atlassian.plugin.util.VersionRange$AllVersionRange: boolean equals(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() in <com.atlassian.plugin.util.VersionRange$OrVersionRange: boolean equals(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() in <com.atlassian.plugin.util.VersionRange$OrVersionRange: boolean equals(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.util.VersionRange$OrVersionRange: java.lang.String toString()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2) in <com.atlassian.plugin.util.VersionRange$OrVersionRange: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",") in <com.atlassian.plugin.util.VersionRange$OrVersionRange: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5) in <com.atlassian.plugin.util.VersionRange$OrVersionRange: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.util.VersionRange$OrVersionRange: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() in <com.atlassian.plugin.util.VersionRange$LeftUnboundedVersionRange: boolean equals(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() in <com.atlassian.plugin.util.VersionRange$LeftUnboundedVersionRange: boolean equals(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.util.VersionRange$LeftUnboundedVersionRange: java.lang.String toString()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(,") in <com.atlassian.plugin.util.VersionRange$LeftUnboundedVersionRange: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3) in <com.atlassian.plugin.util.VersionRange$LeftUnboundedVersionRange: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) in <com.atlassian.plugin.util.VersionRange$LeftUnboundedVersionRange: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.util.VersionRange$LeftUnboundedVersionRange: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() in <com.atlassian.plugin.util.VersionRange$ActualVersionRange: boolean equals(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() in <com.atlassian.plugin.util.VersionRange$ActualVersionRange: boolean equals(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.util.VersionRange$ActualVersionRange: java.lang.String toString()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10) in <com.atlassian.plugin.util.VersionRange$ActualVersionRange: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3) in <com.atlassian.plugin.util.VersionRange$ActualVersionRange: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",") in <com.atlassian.plugin.util.VersionRange$ActualVersionRange: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) in <com.atlassian.plugin.util.VersionRange$ActualVersionRange: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11) in <com.atlassian.plugin.util.VersionRange$ActualVersionRange: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.util.VersionRange$ActualVersionRange: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() in <com.atlassian.plugin.util.VersionRange$SingleVersionRange: boolean equals(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() in <com.atlassian.plugin.util.VersionRange$SingleVersionRange: boolean equals(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.util.VersionRange$SingleVersionRange: java.lang.String toString()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[") in <com.atlassian.plugin.util.VersionRange$SingleVersionRange: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3) in <com.atlassian.plugin.util.VersionRange$SingleVersionRange: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]") in <com.atlassian.plugin.util.VersionRange$SingleVersionRange: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.util.VersionRange$SingleVersionRange: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() in <com.atlassian.plugin.util.VersionRange$EmptyVersionRange: boolean equals(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() in <com.atlassian.plugin.util.VersionRange$EmptyVersionRange: boolean equals(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() in <com.atlassian.plugin.util.VersionRange$RightUnboundedVersionRange: boolean equals(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() in <com.atlassian.plugin.util.VersionRange$RightUnboundedVersionRange: boolean equals(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.util.VersionRange$RightUnboundedVersionRange: java.lang.String toString()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) in <com.atlassian.plugin.util.VersionRange$RightUnboundedVersionRange: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3) in <com.atlassian.plugin.util.VersionRange$RightUnboundedVersionRange: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",)") in <com.atlassian.plugin.util.VersionRange$RightUnboundedVersionRange: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.util.VersionRange$RightUnboundedVersionRange: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.PluginRegistryImpl: void <init>()> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>() in <com.atlassian.plugin.manager.PluginRegistryImpl: java.util.Collection getAll()> ==> <java.util.HashMap: java.util.Collection values()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>() in <com.atlassian.plugin.manager.PluginRegistryImpl: java.util.Collection getAll()> ==> <java.util.Hashtable: java.util.Collection values()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>() in <com.atlassian.plugin.manager.PluginRegistryImpl: java.util.Collection getAll()> ==> <java.util.AbstractMap: java.util.Collection values()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>() in <com.atlassian.plugin.manager.PluginRegistryImpl: java.util.Collection getAll()> ==> <java.util.jar.Attributes: java.util.Collection values()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.PluginRegistryImpl: com.atlassian.plugin.Plugin get(java.lang.String)> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.PluginRegistryImpl: com.atlassian.plugin.Plugin get(java.lang.String)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.PluginRegistryImpl: com.atlassian.plugin.Plugin get(java.lang.String)> ==> <java.util.TreeMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.PluginRegistryImpl: com.atlassian.plugin.Plugin get(java.lang.String)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.PluginRegistryImpl: com.atlassian.plugin.Plugin get(java.lang.String)> ==> <java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r1.<java.util.Map: void clear()>() in <com.atlassian.plugin.manager.PluginRegistryImpl: void clear()> ==> <java.util.LinkedHashMap: void clear()>
INTERFACE edge: interfaceinvoke $r1.<java.util.Map: void clear()>() in <com.atlassian.plugin.manager.PluginRegistryImpl: void clear()> ==> <java.util.Hashtable: void clear()>
INTERFACE edge: interfaceinvoke $r1.<java.util.Map: void clear()>() in <com.atlassian.plugin.manager.PluginRegistryImpl: void clear()> ==> <java.util.TreeMap: void clear()>
INTERFACE edge: interfaceinvoke $r1.<java.util.Map: void clear()>() in <com.atlassian.plugin.manager.PluginRegistryImpl: void clear()> ==> <java.util.HashMap: void clear()>
INTERFACE edge: interfaceinvoke $r1.<java.util.Map: void clear()>() in <com.atlassian.plugin.manager.PluginRegistryImpl: void clear()> ==> <java.util.jar.Attributes: void clear()>
INTERFACE edge: $r3 = interfaceinvoke r1.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.PluginRegistryImpl: void put(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r3 = interfaceinvoke r1.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.PluginRegistryImpl: void put(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r1) in <com.atlassian.plugin.manager.PluginRegistryImpl: void put(com.atlassian.plugin.Plugin)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r1) in <com.atlassian.plugin.manager.PluginRegistryImpl: void put(com.atlassian.plugin.Plugin)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r1) in <com.atlassian.plugin.manager.PluginRegistryImpl: void put(com.atlassian.plugin.Plugin)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r1) in <com.atlassian.plugin.manager.PluginRegistryImpl: void put(com.atlassian.plugin.Plugin)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.PluginRegistryImpl: com.atlassian.plugin.Plugin remove(java.lang.String)> ==> <java.util.HashMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.PluginRegistryImpl: com.atlassian.plugin.Plugin remove(java.lang.String)> ==> <java.util.Hashtable: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.PluginRegistryImpl: com.atlassian.plugin.Plugin remove(java.lang.String)> ==> <java.util.TreeMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.PluginRegistryImpl: com.atlassian.plugin.Plugin remove(java.lang.String)> ==> <java.util.jar.Attributes: java.lang.Object remove(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.manager.PluginPersistentStateModifier: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore)>(r1) in <com.atlassian.plugin.manager.store.PluginPersistentStateStoreMigrator: void removeDirectives(com.atlassian.plugin.manager.PluginPersistentStateStore)> ==> <com.atlassian.plugin.manager.PluginPersistentStateModifier: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore)>
VIRTUAL edge: virtualinvoke $r0.<com.atlassian.plugin.manager.PluginPersistentStateModifier: void apply(io.atlassian.fugue.Effect)>($r2) in <com.atlassian.plugin.manager.store.PluginPersistentStateStoreMigrator: void removeDirectives(com.atlassian.plugin.manager.PluginPersistentStateStore)> ==> <com.atlassian.plugin.manager.PluginPersistentStateModifier: void apply(io.atlassian.fugue.Effect)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>("--") in <com.atlassian.plugin.manager.store.PluginPersistentStateStoreMigrator: java.lang.String removeDirectivesFromKey(java.lang.String)> ==> <java.lang.String: boolean contains(java.lang.CharSequence)>
VIRTUAL edge: i1 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(45) in <com.atlassian.plugin.manager.store.PluginPersistentStateStoreMigrator: java.lang.String removeDirectivesFromKey(java.lang.String)> ==> <java.lang.String: int indexOf(int)>
VIRTUAL edge: i1 = virtualinvoke r0.<java.lang.String: int length()>() in <com.atlassian.plugin.manager.store.PluginPersistentStateStoreMigrator: java.lang.String removeDirectivesFromKey(java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(59) in <com.atlassian.plugin.manager.store.PluginPersistentStateStoreMigrator: java.lang.String removeDirectivesFromKey(java.lang.String)> ==> <java.lang.String: int indexOf(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i0) in <com.atlassian.plugin.manager.store.PluginPersistentStateStoreMigrator: java.lang.String removeDirectivesFromKey(java.lang.String)> ==> <java.lang.String: java.lang.String substring(int,int)>
VIRTUAL edge: $r4 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(i1) in <com.atlassian.plugin.manager.store.PluginPersistentStateStoreMigrator: java.lang.String removeDirectivesFromKey(java.lang.String)> ==> <java.lang.String: java.lang.String substring(int)>
SPECIAL edge: specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.manager.store.PluginPersistentStateStoreMigrator: java.lang.String removeDirectivesFromKey(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <com.atlassian.plugin.manager.store.PluginPersistentStateStoreMigrator: java.lang.String removeDirectivesFromKey(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) in <com.atlassian.plugin.manager.store.PluginPersistentStateStoreMigrator: java.lang.String removeDirectivesFromKey(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.manager.store.PluginPersistentStateStoreMigrator: java.lang.String removeDirectivesFromKey(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState toState()>() in <com.atlassian.plugin.manager.store.PluginPersistentStateStoreMigrator: void lambda$removeDirectives$0(com.atlassian.plugin.manager.PluginPersistentStateStore,com.atlassian.plugin.manager.PluginPersistentState$Builder)> ==> <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState toState()>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder removeState(java.lang.String)>(r11) in <com.atlassian.plugin.manager.store.PluginPersistentStateStoreMigrator: void lambda$removeDirectives$0(com.atlassian.plugin.manager.PluginPersistentStateStore,com.atlassian.plugin.manager.PluginPersistentState$Builder)> ==> <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder removeState(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder addPluginEnabledState(java.util.Map)>($r3) in <com.atlassian.plugin.manager.store.PluginPersistentStateStoreMigrator: void lambda$removeDirectives$0(com.atlassian.plugin.manager.PluginPersistentStateStore,com.atlassian.plugin.manager.PluginPersistentState$Builder)> ==> <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder addPluginEnabledState(java.util.Map)>
INTERFACE edge: r2 = interfaceinvoke $r1.<com.atlassian.plugin.manager.PluginPersistentState: java.util.Map getStatesMap()>() in <com.atlassian.plugin.manager.store.PluginPersistentStateStoreMigrator: void lambda$removeDirectives$0(com.atlassian.plugin.manager.PluginPersistentStateStore,com.atlassian.plugin.manager.PluginPersistentState$Builder)> ==> <com.atlassian.plugin.manager.DefaultPluginPersistentState: java.util.Map getStatesMap()>
INTERFACE edge: $i0 = interfaceinvoke r2.<java.util.Map: int size()>() in <com.atlassian.plugin.manager.store.PluginPersistentStateStoreMigrator: void lambda$removeDirectives$0(com.atlassian.plugin.manager.PluginPersistentStateStore,com.atlassian.plugin.manager.PluginPersistentState$Builder)> ==> <java.util.HashMap: int size()>
INTERFACE edge: $i0 = interfaceinvoke r2.<java.util.Map: int size()>() in <com.atlassian.plugin.manager.store.PluginPersistentStateStoreMigrator: void lambda$removeDirectives$0(com.atlassian.plugin.manager.PluginPersistentStateStore,com.atlassian.plugin.manager.PluginPersistentState$Builder)> ==> <java.util.Hashtable: int size()>
INTERFACE edge: $i0 = interfaceinvoke r2.<java.util.Map: int size()>() in <com.atlassian.plugin.manager.store.PluginPersistentStateStoreMigrator: void lambda$removeDirectives$0(com.atlassian.plugin.manager.PluginPersistentStateStore,com.atlassian.plugin.manager.PluginPersistentState$Builder)> ==> <java.util.TreeMap: int size()>
INTERFACE edge: $i0 = interfaceinvoke r2.<java.util.Map: int size()>() in <com.atlassian.plugin.manager.store.PluginPersistentStateStoreMigrator: void lambda$removeDirectives$0(com.atlassian.plugin.manager.PluginPersistentStateStore,com.atlassian.plugin.manager.PluginPersistentState$Builder)> ==> <java.util.jar.Attributes: int size()>
INTERFACE edge: $r5 = interfaceinvoke r2.<java.util.Map: java.util.Set entrySet()>() in <com.atlassian.plugin.manager.store.PluginPersistentStateStoreMigrator: void lambda$removeDirectives$0(com.atlassian.plugin.manager.PluginPersistentStateStore,com.atlassian.plugin.manager.PluginPersistentState$Builder)> ==> <java.util.HashMap: java.util.Set entrySet()>
INTERFACE edge: $r5 = interfaceinvoke r2.<java.util.Map: java.util.Set entrySet()>() in <com.atlassian.plugin.manager.store.PluginPersistentStateStoreMigrator: void lambda$removeDirectives$0(com.atlassian.plugin.manager.PluginPersistentStateStore,com.atlassian.plugin.manager.PluginPersistentState$Builder)> ==> <java.util.Hashtable: java.util.Set entrySet()>
INTERFACE edge: $r5 = interfaceinvoke r2.<java.util.Map: java.util.Set entrySet()>() in <com.atlassian.plugin.manager.store.PluginPersistentStateStoreMigrator: void lambda$removeDirectives$0(com.atlassian.plugin.manager.PluginPersistentStateStore,com.atlassian.plugin.manager.PluginPersistentState$Builder)> ==> <java.util.TreeMap: java.util.Set entrySet()>
INTERFACE edge: $r5 = interfaceinvoke r2.<java.util.Map: java.util.Set entrySet()>() in <com.atlassian.plugin.manager.store.PluginPersistentStateStoreMigrator: void lambda$removeDirectives$0(com.atlassian.plugin.manager.PluginPersistentStateStore,com.atlassian.plugin.manager.PluginPersistentState$Builder)> ==> <java.util.jar.Attributes: java.util.Set entrySet()>
INTERFACE edge: $z0 = interfaceinvoke r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r12) in <com.atlassian.plugin.manager.store.PluginPersistentStateStoreMigrator: void lambda$removeDirectives$0(com.atlassian.plugin.manager.PluginPersistentStateStore,com.atlassian.plugin.manager.PluginPersistentState$Builder)> ==> <java.util.HashMap: boolean containsKey(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r12) in <com.atlassian.plugin.manager.store.PluginPersistentStateStoreMigrator: void lambda$removeDirectives$0(com.atlassian.plugin.manager.PluginPersistentStateStore,com.atlassian.plugin.manager.PluginPersistentState$Builder)> ==> <java.util.Hashtable: boolean containsKey(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r12) in <com.atlassian.plugin.manager.store.PluginPersistentStateStoreMigrator: void lambda$removeDirectives$0(com.atlassian.plugin.manager.PluginPersistentStateStore,com.atlassian.plugin.manager.PluginPersistentState$Builder)> ==> <java.util.TreeMap: boolean containsKey(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r12) in <com.atlassian.plugin.manager.store.PluginPersistentStateStoreMigrator: void lambda$removeDirectives$0(com.atlassian.plugin.manager.PluginPersistentStateStore,com.atlassian.plugin.manager.PluginPersistentState$Builder)> ==> <java.util.jar.Attributes: boolean containsKey(java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<java.util.HashMap: void <init>(int)>($i0) in <com.atlassian.plugin.manager.store.PluginPersistentStateStoreMigrator: void lambda$removeDirectives$0(com.atlassian.plugin.manager.PluginPersistentStateStore,com.atlassian.plugin.manager.PluginPersistentState$Builder)> ==> <java.util.HashMap: void <init>(int)>
INTERFACE edge: interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r12, $r14) in <com.atlassian.plugin.manager.store.PluginPersistentStateStoreMigrator: void lambda$removeDirectives$0(com.atlassian.plugin.manager.PluginPersistentStateStore,com.atlassian.plugin.manager.PluginPersistentState$Builder)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.store.PluginPersistentStateStoreMigrator: void lambda$removeDirectives$0(com.atlassian.plugin.manager.PluginPersistentStateStore,com.atlassian.plugin.manager.PluginPersistentState$Builder)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.store.PluginPersistentStateStoreMigrator: void lambda$removeDirectives$0(com.atlassian.plugin.manager.PluginPersistentStateStore,com.atlassian.plugin.manager.PluginPersistentState$Builder)> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.store.PluginPersistentStateStoreMigrator: void lambda$removeDirectives$0(com.atlassian.plugin.manager.PluginPersistentStateStore,com.atlassian.plugin.manager.PluginPersistentState$Builder)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.PluginPersistentStateModifier: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.atlassian.plugin.manager.PluginPersistentStateStore: com.atlassian.plugin.manager.PluginPersistentState load()>() in <com.atlassian.plugin.manager.PluginPersistentStateModifier: com.atlassian.plugin.manager.PluginPersistentState getState()> ==> <com.atlassian.plugin.manager.store.MemoryPluginPersistentStateStore: com.atlassian.plugin.manager.PluginPersistentState load()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.atlassian.plugin.manager.PluginPersistentStateStore: com.atlassian.plugin.manager.PluginPersistentState load()>() in <com.atlassian.plugin.manager.PluginPersistentStateModifier: com.atlassian.plugin.manager.PluginPersistentState getState()> ==> <com.atlassian.plugin.manager.store.LoadOnlyPluginPersistentStateStore: com.atlassian.plugin.manager.PluginPersistentState load()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.atlassian.plugin.manager.PluginPersistentStateStore: com.atlassian.plugin.manager.PluginPersistentState load()>() in <com.atlassian.plugin.manager.PluginPersistentStateModifier: com.atlassian.plugin.manager.PluginPersistentState getState()> ==> <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore: com.atlassian.plugin.manager.PluginPersistentState load()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.atlassian.plugin.manager.PluginPersistentStateStore: com.atlassian.plugin.manager.PluginPersistentState load()>() in <com.atlassian.plugin.manager.PluginPersistentStateModifier: void apply(io.atlassian.fugue.Effect)> ==> <com.atlassian.plugin.manager.store.MemoryPluginPersistentStateStore: com.atlassian.plugin.manager.PluginPersistentState load()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.atlassian.plugin.manager.PluginPersistentStateStore: com.atlassian.plugin.manager.PluginPersistentState load()>() in <com.atlassian.plugin.manager.PluginPersistentStateModifier: void apply(io.atlassian.fugue.Effect)> ==> <com.atlassian.plugin.manager.store.LoadOnlyPluginPersistentStateStore: com.atlassian.plugin.manager.PluginPersistentState load()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.atlassian.plugin.manager.PluginPersistentStateStore: com.atlassian.plugin.manager.PluginPersistentState load()>() in <com.atlassian.plugin.manager.PluginPersistentStateModifier: void apply(io.atlassian.fugue.Effect)> ==> <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore: com.atlassian.plugin.manager.PluginPersistentState load()>
VIRTUAL edge: $r6 = virtualinvoke r3.<com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState toState()>() in <com.atlassian.plugin.manager.PluginPersistentStateModifier: void apply(io.atlassian.fugue.Effect)> ==> <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState toState()>
INTERFACE edge: interfaceinvoke $r5.<com.atlassian.plugin.manager.PluginPersistentStateStore: void save(com.atlassian.plugin.manager.PluginPersistentState)>($r6) in <com.atlassian.plugin.manager.PluginPersistentStateModifier: void apply(io.atlassian.fugue.Effect)> ==> <com.atlassian.plugin.manager.store.MemoryPluginPersistentStateStore: void save(com.atlassian.plugin.manager.PluginPersistentState)>
INTERFACE edge: interfaceinvoke $r5.<com.atlassian.plugin.manager.PluginPersistentStateStore: void save(com.atlassian.plugin.manager.PluginPersistentState)>($r6) in <com.atlassian.plugin.manager.PluginPersistentStateModifier: void apply(io.atlassian.fugue.Effect)> ==> <com.atlassian.plugin.manager.store.LoadOnlyPluginPersistentStateStore: void save(com.atlassian.plugin.manager.PluginPersistentState)>
INTERFACE edge: interfaceinvoke $r5.<com.atlassian.plugin.manager.PluginPersistentStateStore: void save(com.atlassian.plugin.manager.PluginPersistentState)>($r6) in <com.atlassian.plugin.manager.PluginPersistentStateModifier: void apply(io.atlassian.fugue.Effect)> ==> <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore: void save(com.atlassian.plugin.manager.PluginPersistentState)>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.manager.PluginPersistentStateModifier: void apply(io.atlassian.fugue.Effect)>($r2) in <com.atlassian.plugin.manager.PluginPersistentStateModifier: void setEnabled(com.atlassian.plugin.Plugin,boolean)> ==> <com.atlassian.plugin.manager.PluginPersistentStateModifier: void apply(io.atlassian.fugue.Effect)>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.manager.PluginPersistentStateModifier: void setEnabled(com.atlassian.plugin.Plugin,boolean)>(r1, 0) in <com.atlassian.plugin.manager.PluginPersistentStateModifier: void disable(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.PluginPersistentStateModifier: void setEnabled(com.atlassian.plugin.Plugin,boolean)>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.manager.PluginPersistentStateModifier: void setEnabled(com.atlassian.plugin.Plugin,boolean)>(r1, 1) in <com.atlassian.plugin.manager.PluginPersistentStateModifier: void enable(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.PluginPersistentStateModifier: void setEnabled(com.atlassian.plugin.Plugin,boolean)>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.manager.PluginPersistentStateModifier: void apply(io.atlassian.fugue.Effect)>($r2) in <com.atlassian.plugin.manager.PluginPersistentStateModifier: void setEnabled(com.atlassian.plugin.ModuleDescriptor,boolean)> ==> <com.atlassian.plugin.manager.PluginPersistentStateModifier: void apply(io.atlassian.fugue.Effect)>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.manager.PluginPersistentStateModifier: void setEnabled(com.atlassian.plugin.ModuleDescriptor,boolean)>(r1, 0) in <com.atlassian.plugin.manager.PluginPersistentStateModifier: void disable(com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.manager.PluginPersistentStateModifier: void setEnabled(com.atlassian.plugin.ModuleDescriptor,boolean)>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.manager.PluginPersistentStateModifier: void setEnabled(com.atlassian.plugin.ModuleDescriptor,boolean)>(r1, 1) in <com.atlassian.plugin.manager.PluginPersistentStateModifier: void enable(com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.manager.PluginPersistentStateModifier: void setEnabled(com.atlassian.plugin.ModuleDescriptor,boolean)>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.manager.PluginPersistentStateModifier: void apply(io.atlassian.fugue.Effect)>($r1) in <com.atlassian.plugin.manager.PluginPersistentStateModifier: void clearPluginRestartState()> ==> <com.atlassian.plugin.manager.PluginPersistentStateModifier: void apply(io.atlassian.fugue.Effect)>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.manager.PluginPersistentStateModifier: void apply(io.atlassian.fugue.Effect)>($r3) in <com.atlassian.plugin.manager.PluginPersistentStateModifier: void setPluginRestartState(java.lang.String,com.atlassian.plugin.PluginRestartState)> ==> <com.atlassian.plugin.manager.PluginPersistentStateModifier: void apply(io.atlassian.fugue.Effect)>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.manager.PluginPersistentStateModifier: void apply(io.atlassian.fugue.Effect)>($r2) in <com.atlassian.plugin.manager.PluginPersistentStateModifier: void addState(java.util.Map)> ==> <com.atlassian.plugin.manager.PluginPersistentStateModifier: void apply(io.atlassian.fugue.Effect)>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.manager.PluginPersistentStateModifier: void apply(io.atlassian.fugue.Effect)>($r2) in <com.atlassian.plugin.manager.PluginPersistentStateModifier: void addPluginEnabledState(java.util.Map)> ==> <com.atlassian.plugin.manager.PluginPersistentStateModifier: void apply(io.atlassian.fugue.Effect)>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.manager.PluginPersistentStateModifier: void apply(io.atlassian.fugue.Effect)>($r2) in <com.atlassian.plugin.manager.PluginPersistentStateModifier: void removeState(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.PluginPersistentStateModifier: void apply(io.atlassian.fugue.Effect)>
INTERFACE edge: $r2 = interfaceinvoke r1.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.PluginPersistentStateModifier: void lambda$removeState$5(com.atlassian.plugin.Plugin,com.atlassian.plugin.manager.PluginPersistentState$Builder)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r2 = interfaceinvoke r1.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.PluginPersistentStateModifier: void lambda$removeState$5(com.atlassian.plugin.Plugin,com.atlassian.plugin.manager.PluginPersistentState$Builder)> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
INTERFACE edge: $r4 = interfaceinvoke r1.<com.atlassian.plugin.Plugin: java.util.Collection getModuleDescriptors()>() in <com.atlassian.plugin.manager.PluginPersistentStateModifier: void lambda$removeState$5(com.atlassian.plugin.Plugin,com.atlassian.plugin.manager.PluginPersistentState$Builder)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.util.Collection getModuleDescriptors()>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder removeState(java.lang.String)>($r2) in <com.atlassian.plugin.manager.PluginPersistentStateModifier: void lambda$removeState$5(com.atlassian.plugin.Plugin,com.atlassian.plugin.manager.PluginPersistentState$Builder)> ==> <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder removeState(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder removeState(java.lang.String)>($r8) in <com.atlassian.plugin.manager.PluginPersistentStateModifier: void lambda$removeState$5(com.atlassian.plugin.Plugin,com.atlassian.plugin.manager.PluginPersistentState$Builder)> ==> <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder removeState(java.lang.String)>
INTERFACE edge: r5 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.PluginPersistentStateModifier: void lambda$removeState$5(com.atlassian.plugin.Plugin,com.atlassian.plugin.manager.PluginPersistentState$Builder)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r5 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.PluginPersistentStateModifier: void lambda$removeState$5(com.atlassian.plugin.Plugin,com.atlassian.plugin.manager.PluginPersistentState$Builder)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r5 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.PluginPersistentStateModifier: void lambda$removeState$5(com.atlassian.plugin.Plugin,com.atlassian.plugin.manager.PluginPersistentState$Builder)> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r5 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.PluginPersistentStateModifier: void lambda$removeState$5(com.atlassian.plugin.Plugin,com.atlassian.plugin.manager.PluginPersistentState$Builder)> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r5 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.PluginPersistentStateModifier: void lambda$removeState$5(com.atlassian.plugin.Plugin,com.atlassian.plugin.manager.PluginPersistentState$Builder)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: r5 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.PluginPersistentStateModifier: void lambda$removeState$5(com.atlassian.plugin.Plugin,com.atlassian.plugin.manager.PluginPersistentState$Builder)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $r8 = interfaceinvoke r7.<com.atlassian.plugin.ModuleDescriptor: java.lang.String getCompleteKey()>() in <com.atlassian.plugin.manager.PluginPersistentStateModifier: void lambda$removeState$5(com.atlassian.plugin.Plugin,com.atlassian.plugin.manager.PluginPersistentState$Builder)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.String getCompleteKey()>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder addPluginEnabledState(java.util.Map)>(r1) in <com.atlassian.plugin.manager.PluginPersistentStateModifier: void lambda$addPluginEnabledState$4(java.util.Map,com.atlassian.plugin.manager.PluginPersistentState$Builder)> ==> <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder addPluginEnabledState(java.util.Map)>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder addPluginEnabledState(java.util.Map)>($r2) in <com.atlassian.plugin.manager.PluginPersistentStateModifier: void lambda$addState$3(java.util.Map,com.atlassian.plugin.manager.PluginPersistentState$Builder)> ==> <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder addPluginEnabledState(java.util.Map)>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder setPluginRestartState(java.lang.String,com.atlassian.plugin.PluginRestartState)>(r1, r2) in <com.atlassian.plugin.manager.PluginPersistentStateModifier: void lambda$setPluginRestartState$2(java.lang.String,com.atlassian.plugin.PluginRestartState,com.atlassian.plugin.manager.PluginPersistentState$Builder)> ==> <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder setPluginRestartState(java.lang.String,com.atlassian.plugin.PluginRestartState)>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder setEnabled(com.atlassian.plugin.ModuleDescriptor,boolean)>(r1, z0) in <com.atlassian.plugin.manager.PluginPersistentStateModifier: void lambda$setEnabled$1(com.atlassian.plugin.ModuleDescriptor,boolean,com.atlassian.plugin.manager.PluginPersistentState$Builder)> ==> <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder setEnabled(com.atlassian.plugin.ModuleDescriptor,boolean)>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder setEnabled(com.atlassian.plugin.Plugin,boolean)>(r1, z0) in <com.atlassian.plugin.manager.PluginPersistentStateModifier: void lambda$setEnabled$0(com.atlassian.plugin.Plugin,boolean,com.atlassian.plugin.manager.PluginPersistentState$Builder)> ==> <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder setEnabled(com.atlassian.plugin.Plugin,boolean)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.store.DelegatingPluginPersistentStateStore: void <init>()> ==> <java.lang.Object: void <init>()>
INTERFACE edge: interfaceinvoke $r1.<com.atlassian.plugin.manager.PluginPersistentStateStore: void save(com.atlassian.plugin.manager.PluginPersistentState)>(r2) in <com.atlassian.plugin.manager.store.DelegatingPluginPersistentStateStore: void save(com.atlassian.plugin.manager.PluginPersistentState)> ==> <com.atlassian.plugin.manager.store.MemoryPluginPersistentStateStore: void save(com.atlassian.plugin.manager.PluginPersistentState)>
INTERFACE edge: interfaceinvoke $r1.<com.atlassian.plugin.manager.PluginPersistentStateStore: void save(com.atlassian.plugin.manager.PluginPersistentState)>(r2) in <com.atlassian.plugin.manager.store.DelegatingPluginPersistentStateStore: void save(com.atlassian.plugin.manager.PluginPersistentState)> ==> <com.atlassian.plugin.manager.store.LoadOnlyPluginPersistentStateStore: void save(com.atlassian.plugin.manager.PluginPersistentState)>
INTERFACE edge: interfaceinvoke $r1.<com.atlassian.plugin.manager.PluginPersistentStateStore: void save(com.atlassian.plugin.manager.PluginPersistentState)>(r2) in <com.atlassian.plugin.manager.store.DelegatingPluginPersistentStateStore: void save(com.atlassian.plugin.manager.PluginPersistentState)> ==> <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore: void save(com.atlassian.plugin.manager.PluginPersistentState)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.atlassian.plugin.manager.PluginPersistentStateStore: com.atlassian.plugin.manager.PluginPersistentState load()>() in <com.atlassian.plugin.manager.store.DelegatingPluginPersistentStateStore: com.atlassian.plugin.manager.PluginPersistentState load()> ==> <com.atlassian.plugin.manager.store.MemoryPluginPersistentStateStore: com.atlassian.plugin.manager.PluginPersistentState load()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.atlassian.plugin.manager.PluginPersistentStateStore: com.atlassian.plugin.manager.PluginPersistentState load()>() in <com.atlassian.plugin.manager.store.DelegatingPluginPersistentStateStore: com.atlassian.plugin.manager.PluginPersistentState load()> ==> <com.atlassian.plugin.manager.store.LoadOnlyPluginPersistentStateStore: com.atlassian.plugin.manager.PluginPersistentState load()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.atlassian.plugin.manager.PluginPersistentStateStore: com.atlassian.plugin.manager.PluginPersistentState load()>() in <com.atlassian.plugin.manager.store.DelegatingPluginPersistentStateStore: com.atlassian.plugin.manager.PluginPersistentState load()> ==> <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore: com.atlassian.plugin.manager.PluginPersistentState load()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.parsers.SafeModeCommandLineArguments: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.parsers.SafeModeCommandLineArguments$1: void <init>(com.atlassian.plugin.parsers.SafeModeCommandLineArguments)>(r0) in <com.atlassian.plugin.parsers.SafeModeCommandLineArguments: void <init>(java.lang.String)> ==> <com.atlassian.plugin.parsers.SafeModeCommandLineArguments$1: void <init>(com.atlassian.plugin.parsers.SafeModeCommandLineArguments)>
SPECIAL edge: specialinvoke $r2.<com.atlassian.plugin.parsers.SafeModeCommandLineArguments$2: void <init>(com.atlassian.plugin.parsers.SafeModeCommandLineArguments)>(r0) in <com.atlassian.plugin.parsers.SafeModeCommandLineArguments: void <init>(java.lang.String)> ==> <com.atlassian.plugin.parsers.SafeModeCommandLineArguments$2: void <init>(com.atlassian.plugin.parsers.SafeModeCommandLineArguments)>
SPECIAL edge: specialinvoke $r3.<com.atlassian.plugin.parsers.SafeModeCommandLineArguments$3: void <init>(com.atlassian.plugin.parsers.SafeModeCommandLineArguments)>(r0) in <com.atlassian.plugin.parsers.SafeModeCommandLineArguments: void <init>(java.lang.String)> ==> <com.atlassian.plugin.parsers.SafeModeCommandLineArguments$3: void <init>(com.atlassian.plugin.parsers.SafeModeCommandLineArguments)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.Boolean: boolean booleanValue()>() in <com.atlassian.plugin.parsers.SafeModeCommandLineArguments: boolean isSafeMode()> ==> <java.lang.Boolean: boolean booleanValue()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.Boolean: boolean booleanValue()>() in <com.atlassian.plugin.parsers.SafeModeCommandLineArguments: boolean shouldLastEnabledBeDisabled()> ==> <java.lang.Boolean: boolean booleanValue()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.atlassian.plugin.parsers.SafeModeCommandLineArguments: java.util.Optional getDisabledPlugins()>() in <com.atlassian.plugin.parsers.SafeModeCommandLineArguments: boolean isDisabledByParam(java.lang.String)> ==> <com.atlassian.plugin.parsers.SafeModeCommandLineArguments: java.util.Optional getDisabledPlugins()>
VIRTUAL edge: $z0 = virtualinvoke $r7.<java.lang.Boolean: boolean booleanValue()>() in <com.atlassian.plugin.parsers.SafeModeCommandLineArguments: boolean isDisabledByParam(java.lang.String)> ==> <java.lang.Boolean: boolean booleanValue()>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.List: boolean contains(java.lang.Object)>(r1) in <com.atlassian.plugin.parsers.SafeModeCommandLineArguments: java.lang.Boolean lambda$isDisabledByParam$0(java.lang.String,java.util.List)> ==> <java.util.LinkedList: boolean contains(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.List: boolean contains(java.lang.Object)>(r1) in <com.atlassian.plugin.parsers.SafeModeCommandLineArguments: java.lang.Boolean lambda$isDisabledByParam$0(java.lang.String,java.util.List)> ==> <java.util.ArrayList: boolean contains(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.DefaultPluginArtifactFactory: void <init>(com.atlassian.plugin.ReferenceMode)>($r1) in <com.atlassian.plugin.DefaultPluginArtifactFactory: void <init>()> ==> <com.atlassian.plugin.DefaultPluginArtifactFactory: void <init>(com.atlassian.plugin.ReferenceMode)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.DefaultPluginArtifactFactory: void <init>(com.atlassian.plugin.ReferenceMode)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: r1 = virtualinvoke r0.<java.net.URI: java.lang.String getScheme()>() in <com.atlassian.plugin.DefaultPluginArtifactFactory: com.atlassian.plugin.PluginArtifact create(java.net.URI)> ==> <java.net.URI: java.lang.String getScheme()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1) in <com.atlassian.plugin.DefaultPluginArtifactFactory: com.atlassian.plugin.PluginArtifact create(java.net.URI)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
SPECIAL edge: specialinvoke $r17.<java.io.File: void <init>(java.net.URI)>(r0) in <com.atlassian.plugin.DefaultPluginArtifactFactory: com.atlassian.plugin.PluginArtifact create(java.net.URI)> ==> <java.io.File: void <init>(java.net.URI)>
VIRTUAL edge: r11 = virtualinvoke $r17.<java.io.File: java.lang.String getName()>() in <com.atlassian.plugin.DefaultPluginArtifactFactory: com.atlassian.plugin.PluginArtifact create(java.net.URI)> ==> <java.io.File: java.lang.String getName()>
VIRTUAL edge: $z1 = virtualinvoke r11.<java.lang.String: boolean endsWith(java.lang.String)>(".jar") in <com.atlassian.plugin.DefaultPluginArtifactFactory: com.atlassian.plugin.PluginArtifact create(java.net.URI)> ==> <java.lang.String: boolean endsWith(java.lang.String)>
VIRTUAL edge: $z2 = virtualinvoke r11.<java.lang.String: boolean endsWith(java.lang.String)>(".xml") in <com.atlassian.plugin.DefaultPluginArtifactFactory: com.atlassian.plugin.PluginArtifact create(java.net.URI)> ==> <java.lang.String: boolean endsWith(java.lang.String)>
SPECIAL edge: specialinvoke $r18.<com.atlassian.plugin.JarPluginArtifact: void <init>(java.io.File,com.atlassian.plugin.ReferenceMode)>($r17, $r15) in <com.atlassian.plugin.DefaultPluginArtifactFactory: com.atlassian.plugin.PluginArtifact create(java.net.URI)> ==> <com.atlassian.plugin.JarPluginArtifact: void <init>(java.io.File,com.atlassian.plugin.ReferenceMode)>
SPECIAL edge: specialinvoke $r19.<com.atlassian.plugin.XmlPluginArtifact: void <init>(java.io.File)>($r17) in <com.atlassian.plugin.DefaultPluginArtifactFactory: com.atlassian.plugin.PluginArtifact create(java.net.URI)> ==> <com.atlassian.plugin.XmlPluginArtifact: void <init>(java.io.File)>
SPECIAL edge: specialinvoke $r20.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.DefaultPluginArtifactFactory: com.atlassian.plugin.PluginArtifact create(java.net.URI)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r5 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The artifact URI ") in <com.atlassian.plugin.DefaultPluginArtifactFactory: com.atlassian.plugin.PluginArtifact create(java.net.URI)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0) in <com.atlassian.plugin.DefaultPluginArtifactFactory: com.atlassian.plugin.PluginArtifact create(java.net.URI)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a valid plugin artifact") in <com.atlassian.plugin.DefaultPluginArtifactFactory: com.atlassian.plugin.PluginArtifact create(java.net.URI)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.DefaultPluginArtifactFactory: com.atlassian.plugin.PluginArtifact create(java.net.URI)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r21.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8) in <com.atlassian.plugin.DefaultPluginArtifactFactory: com.atlassian.plugin.PluginArtifact create(java.net.URI)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.JarPluginArtifact: void <init>(java.io.File,com.atlassian.plugin.ReferenceMode)>(r1, $r2) in <com.atlassian.plugin.JarPluginArtifact: void <init>(java.io.File)> ==> <com.atlassian.plugin.JarPluginArtifact: void <init>(java.io.File,com.atlassian.plugin.ReferenceMode)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.JarPluginArtifact: void <init>(java.io.File,com.atlassian.plugin.ReferenceMode)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: r4 = virtualinvoke r0.<com.atlassian.plugin.JarPluginArtifact: java.io.InputStream getResourceAsStream(java.lang.String)>(r1) in <com.atlassian.plugin.JarPluginArtifact: boolean doesResourceExist(java.lang.String)> ==> <com.atlassian.plugin.JarPluginArtifact: java.io.InputStream getResourceAsStream(java.lang.String)>
SPECIAL edge: r3 = specialinvoke r2.<com.atlassian.plugin.JarPluginArtifact: java.util.jar.JarFile open()>() in <com.atlassian.plugin.JarPluginArtifact: java.io.InputStream getResourceAsStream(java.lang.String)> ==> <com.atlassian.plugin.JarPluginArtifact: java.util.jar.JarFile open()>
SPECIAL edge: specialinvoke r2.<com.atlassian.plugin.JarPluginArtifact: void closeJarQuietly(java.util.jar.JarFile)>(r3) in <com.atlassian.plugin.JarPluginArtifact: java.io.InputStream getResourceAsStream(java.lang.String)> ==> <com.atlassian.plugin.JarPluginArtifact: void closeJarQuietly(java.util.jar.JarFile)>
VIRTUAL edge: r4 = virtualinvoke r3.<java.util.jar.JarFile: java.util.zip.ZipEntry getEntry(java.lang.String)>(r0) in <com.atlassian.plugin.JarPluginArtifact: java.io.InputStream getResourceAsStream(java.lang.String)> ==> <java.util.jar.JarFile: java.util.zip.ZipEntry getEntry(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke r3.<java.util.jar.JarFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)>(r4) in <com.atlassian.plugin.JarPluginArtifact: java.io.InputStream getResourceAsStream(java.lang.String)> ==> <java.util.jar.JarFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)>
SPECIAL edge: specialinvoke $r18.<com.atlassian.plugin.JarPluginArtifact$1: void <init>(com.atlassian.plugin.JarPluginArtifact,java.io.InputStream,java.util.jar.JarFile)>(r2, $r6, r3) in <com.atlassian.plugin.JarPluginArtifact: java.io.InputStream getResourceAsStream(java.lang.String)> ==> <com.atlassian.plugin.JarPluginArtifact$1: void <init>(com.atlassian.plugin.JarPluginArtifact,java.io.InputStream,java.util.jar.JarFile)>
SPECIAL edge: specialinvoke $r19.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.JarPluginArtifact: java.io.InputStream getResourceAsStream(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r11 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot retrieve ") in <com.atlassian.plugin.JarPluginArtifact: java.io.InputStream getResourceAsStream(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0) in <com.atlassian.plugin.JarPluginArtifact: java.io.InputStream getResourceAsStream(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from plugin JAR [") in <com.atlassian.plugin.JarPluginArtifact: java.io.InputStream getResourceAsStream(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14) in <com.atlassian.plugin.JarPluginArtifact: java.io.InputStream getResourceAsStream(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]") in <com.atlassian.plugin.JarPluginArtifact: java.io.InputStream getResourceAsStream(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.JarPluginArtifact: java.io.InputStream getResourceAsStream(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r20.<com.atlassian.plugin.PluginParseException: void <init>(java.lang.String,java.lang.Throwable)>($r17, $r7) in <com.atlassian.plugin.JarPluginArtifact: java.io.InputStream getResourceAsStream(java.lang.String)> ==> <com.atlassian.plugin.PluginParseException: void <init>(java.lang.String,java.lang.Throwable)>
CLINIT edge: $r5 = <com.atlassian.plugin.JarPluginArtifact: org.slf4j.Logger log> in <com.atlassian.plugin.JarPluginArtifact: void closeJarQuietly(java.util.jar.JarFile)> ==> <com.atlassian.plugin.JarPluginArtifact: void <clinit>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.io.File: java.lang.String getName()>() in <com.atlassian.plugin.JarPluginArtifact: java.lang.String getName()> ==> <java.io.File: java.lang.String getName()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.atlassian.plugin.JarPluginArtifact: java.lang.String getName()>() in <com.atlassian.plugin.JarPluginArtifact: java.lang.String toString()> ==> <com.atlassian.plugin.JarPluginArtifact: java.lang.String getName()>
SPECIAL edge: specialinvoke $r12.<java.io.FileInputStream: void <init>(java.io.File)>($r3) in <com.atlassian.plugin.JarPluginArtifact: java.io.InputStream getInputStream()> ==> <java.io.FileInputStream: void <init>(java.io.File)>
SPECIAL edge: specialinvoke $r13.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r12) in <com.atlassian.plugin.JarPluginArtifact: java.io.InputStream getInputStream()> ==> <java.io.BufferedInputStream: void <init>(java.io.InputStream)>
SPECIAL edge: specialinvoke $r14.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.JarPluginArtifact: java.io.InputStream getInputStream()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r8 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not open JAR file: ") in <com.atlassian.plugin.JarPluginArtifact: java.io.InputStream getInputStream()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9) in <com.atlassian.plugin.JarPluginArtifact: java.io.InputStream getInputStream()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.JarPluginArtifact: java.io.InputStream getInputStream()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r15.<com.atlassian.plugin.PluginParseException: void <init>(java.lang.String,java.lang.Throwable)>($r11, $r4) in <com.atlassian.plugin.JarPluginArtifact: java.io.InputStream getInputStream()> ==> <com.atlassian.plugin.PluginParseException: void <init>(java.lang.String,java.lang.Throwable)>
SPECIAL edge: r1 = specialinvoke r0.<com.atlassian.plugin.JarPluginArtifact: java.util.jar.JarFile open()>() in <com.atlassian.plugin.JarPluginArtifact: boolean containsJavaExecutableCode()> ==> <com.atlassian.plugin.JarPluginArtifact: java.util.jar.JarFile open()>
SPECIAL edge: r2 = specialinvoke r0.<com.atlassian.plugin.JarPluginArtifact: java.util.jar.Manifest getManifest(java.util.jar.JarFile)>(r1) in <com.atlassian.plugin.JarPluginArtifact: boolean containsJavaExecutableCode()> ==> <com.atlassian.plugin.JarPluginArtifact: java.util.jar.Manifest getManifest(java.util.jar.JarFile)>
SPECIAL edge: $z0 = specialinvoke r0.<com.atlassian.plugin.JarPluginArtifact: boolean hasBundleActivator(java.util.jar.Manifest)>(r2) in <com.atlassian.plugin.JarPluginArtifact: boolean containsJavaExecutableCode()> ==> <com.atlassian.plugin.JarPluginArtifact: boolean hasBundleActivator(java.util.jar.Manifest)>
SPECIAL edge: $z2 = specialinvoke r0.<com.atlassian.plugin.JarPluginArtifact: boolean hasSpringContext(java.util.jar.Manifest)>(r2) in <com.atlassian.plugin.JarPluginArtifact: boolean containsJavaExecutableCode()> ==> <com.atlassian.plugin.JarPluginArtifact: boolean hasSpringContext(java.util.jar.Manifest)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.JarPluginArtifact: void closeJarQuietly(java.util.jar.JarFile)>(r1) in <com.atlassian.plugin.JarPluginArtifact: boolean containsJavaExecutableCode()> ==> <com.atlassian.plugin.JarPluginArtifact: void closeJarQuietly(java.util.jar.JarFile)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.JarPluginArtifact: void closeJarQuietly(java.util.jar.JarFile)>(r1) in <com.atlassian.plugin.JarPluginArtifact: boolean containsJavaExecutableCode()> ==> <com.atlassian.plugin.JarPluginArtifact: void closeJarQuietly(java.util.jar.JarFile)>
VIRTUAL edge: $r3 = virtualinvoke r1.<java.util.jar.JarFile: java.util.stream.Stream stream()>() in <com.atlassian.plugin.JarPluginArtifact: boolean containsJavaExecutableCode()> ==> <java.util.jar.JarFile: java.util.stream.Stream stream()>
INTERFACE edge: $z3 = interfaceinvoke $r3.<java.util.stream.Stream: boolean anyMatch(java.util.function.Predicate)>($r4) in <com.atlassian.plugin.JarPluginArtifact: boolean containsJavaExecutableCode()> ==> <java.util.stream.Stream: boolean anyMatch(java.util.function.Predicate)>
SPECIAL edge: r1 = specialinvoke r0.<com.atlassian.plugin.JarPluginArtifact: java.util.jar.JarFile open()>() in <com.atlassian.plugin.JarPluginArtifact: boolean containsSpringContext()> ==> <com.atlassian.plugin.JarPluginArtifact: java.util.jar.JarFile open()>
SPECIAL edge: r2 = specialinvoke r0.<com.atlassian.plugin.JarPluginArtifact: java.util.jar.Manifest getManifest(java.util.jar.JarFile)>(r1) in <com.atlassian.plugin.JarPluginArtifact: boolean containsSpringContext()> ==> <com.atlassian.plugin.JarPluginArtifact: java.util.jar.Manifest getManifest(java.util.jar.JarFile)>
SPECIAL edge: $z0 = specialinvoke r0.<com.atlassian.plugin.JarPluginArtifact: boolean hasSpringContext(java.util.jar.Manifest)>(r2) in <com.atlassian.plugin.JarPluginArtifact: boolean containsSpringContext()> ==> <com.atlassian.plugin.JarPluginArtifact: boolean hasSpringContext(java.util.jar.Manifest)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.JarPluginArtifact: void closeJarQuietly(java.util.jar.JarFile)>(r1) in <com.atlassian.plugin.JarPluginArtifact: boolean containsSpringContext()> ==> <com.atlassian.plugin.JarPluginArtifact: void closeJarQuietly(java.util.jar.JarFile)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.JarPluginArtifact: void closeJarQuietly(java.util.jar.JarFile)>(r1) in <com.atlassian.plugin.JarPluginArtifact: boolean containsSpringContext()> ==> <com.atlassian.plugin.JarPluginArtifact: void closeJarQuietly(java.util.jar.JarFile)>
VIRTUAL edge: $r3 = virtualinvoke r1.<java.util.jar.JarFile: java.util.stream.Stream stream()>() in <com.atlassian.plugin.JarPluginArtifact: boolean containsSpringContext()> ==> <java.util.jar.JarFile: java.util.stream.Stream stream()>
INTERFACE edge: $z2 = interfaceinvoke $r3.<java.util.stream.Stream: boolean anyMatch(java.util.function.Predicate)>($r4) in <com.atlassian.plugin.JarPluginArtifact: boolean containsSpringContext()> ==> <java.util.stream.Stream: boolean anyMatch(java.util.function.Predicate)>
SPECIAL edge: r1 = specialinvoke r0.<com.atlassian.plugin.JarPluginArtifact: java.util.jar.JarFile open()>() in <com.atlassian.plugin.JarPluginArtifact: java.util.Set extraModuleDescriptorFiles(java.lang.String)> ==> <com.atlassian.plugin.JarPluginArtifact: java.util.jar.JarFile open()>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.JarPluginArtifact: void closeJarQuietly(java.util.jar.JarFile)>(r1) in <com.atlassian.plugin.JarPluginArtifact: java.util.Set extraModuleDescriptorFiles(java.lang.String)> ==> <com.atlassian.plugin.JarPluginArtifact: void closeJarQuietly(java.util.jar.JarFile)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.JarPluginArtifact: void closeJarQuietly(java.util.jar.JarFile)>(r1) in <com.atlassian.plugin.JarPluginArtifact: java.util.Set extraModuleDescriptorFiles(java.lang.String)> ==> <com.atlassian.plugin.JarPluginArtifact: void closeJarQuietly(java.util.jar.JarFile)>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.JarPluginArtifact: java.util.Set extraModuleDescriptorFiles(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) in <com.atlassian.plugin.JarPluginArtifact: java.util.Set extraModuleDescriptorFiles(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/[^/.]*\\.(?i)xml$") in <com.atlassian.plugin.JarPluginArtifact: java.util.Set extraModuleDescriptorFiles(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.JarPluginArtifact: java.util.Set extraModuleDescriptorFiles(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r9 = virtualinvoke $r8.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>("") in <com.atlassian.plugin.JarPluginArtifact: java.util.Set extraModuleDescriptorFiles(java.lang.String)> ==> <java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>
VIRTUAL edge: $r10 = virtualinvoke r1.<java.util.jar.JarFile: java.util.stream.Stream stream()>() in <com.atlassian.plugin.JarPluginArtifact: java.util.Set extraModuleDescriptorFiles(java.lang.String)> ==> <java.util.jar.JarFile: java.util.stream.Stream stream()>
INTERFACE edge: $r12 = interfaceinvoke $r10.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($r11) in <com.atlassian.plugin.JarPluginArtifact: java.util.Set extraModuleDescriptorFiles(java.lang.String)> ==> <java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>
INTERFACE edge: $r14 = interfaceinvoke $r12.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r13) in <com.atlassian.plugin.JarPluginArtifact: java.util.Set extraModuleDescriptorFiles(java.lang.String)> ==> <java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>
INTERFACE edge: $r16 = interfaceinvoke $r14.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r15) in <com.atlassian.plugin.JarPluginArtifact: java.util.Set extraModuleDescriptorFiles(java.lang.String)> ==> <java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>
VIRTUAL edge: r1 = virtualinvoke r0.<java.util.zip.ZipEntry: java.lang.String getName()>() in <com.atlassian.plugin.JarPluginArtifact: boolean isSpringContext(java.util.zip.ZipEntry)> ==> <java.util.zip.ZipEntry: java.lang.String getName()>
VIRTUAL edge: r1 = virtualinvoke r0.<java.util.zip.ZipEntry: java.lang.String getName()>() in <com.atlassian.plugin.JarPluginArtifact: boolean isSpringContext(java.util.zip.ZipEntry)> ==> <java.util.jar.JarEntry: java.lang.String getName()>
VIRTUAL edge: $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("META-INF/spring/") in <com.atlassian.plugin.JarPluginArtifact: boolean isSpringContext(java.util.zip.ZipEntry)> ==> <java.lang.String: boolean startsWith(java.lang.String)>
VIRTUAL edge: $z1 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>(".xml") in <com.atlassian.plugin.JarPluginArtifact: boolean isSpringContext(java.util.zip.ZipEntry)> ==> <java.lang.String: boolean endsWith(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.util.jar.JarEntry: java.lang.String getName()>() in <com.atlassian.plugin.JarPluginArtifact: boolean lambda$extraModuleDescriptorFiles$1(java.util.regex.Matcher,java.util.jar.JarEntry)> ==> <java.util.jar.JarEntry: java.lang.String getName()>
VIRTUAL edge: virtualinvoke r0.<java.util.regex.Matcher: java.util.regex.Matcher reset(java.lang.CharSequence)>($r2) in <com.atlassian.plugin.JarPluginArtifact: boolean lambda$extraModuleDescriptorFiles$1(java.util.regex.Matcher,java.util.jar.JarEntry)> ==> <java.util.regex.Matcher: java.util.regex.Matcher reset(java.lang.CharSequence)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.util.regex.Matcher: boolean find()>() in <com.atlassian.plugin.JarPluginArtifact: boolean lambda$extraModuleDescriptorFiles$1(java.util.regex.Matcher,java.util.jar.JarEntry)> ==> <java.util.regex.Matcher: boolean find()>
SPECIAL edge: $z0 = specialinvoke r0.<com.atlassian.plugin.JarPluginArtifact: boolean isJavaClass(java.util.zip.ZipEntry)>(r1) in <com.atlassian.plugin.JarPluginArtifact: boolean lambda$containsJavaExecutableCode$0(java.util.jar.JarEntry)> ==> <com.atlassian.plugin.JarPluginArtifact: boolean isJavaClass(java.util.zip.ZipEntry)>
SPECIAL edge: $z1 = specialinvoke r0.<com.atlassian.plugin.JarPluginArtifact: boolean isJavaLibrary(java.util.zip.ZipEntry)>(r1) in <com.atlassian.plugin.JarPluginArtifact: boolean lambda$containsJavaExecutableCode$0(java.util.jar.JarEntry)> ==> <com.atlassian.plugin.JarPluginArtifact: boolean isJavaLibrary(java.util.zip.ZipEntry)>
SPECIAL edge: $z2 = specialinvoke r0.<com.atlassian.plugin.JarPluginArtifact: boolean isSpringContext(java.util.zip.ZipEntry)>(r1) in <com.atlassian.plugin.JarPluginArtifact: boolean lambda$containsJavaExecutableCode$0(java.util.jar.JarEntry)> ==> <com.atlassian.plugin.JarPluginArtifact: boolean isSpringContext(java.util.zip.ZipEntry)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.XmlPluginArtifact: void <init>(java.io.File)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.io.File: java.lang.String getName()>() in <com.atlassian.plugin.XmlPluginArtifact: java.lang.String getName()> ==> <java.io.File: java.lang.String getName()>
SPECIAL edge: specialinvoke $r1.<java.io.FileInputStream: void <init>(java.io.File)>($r3) in <com.atlassian.plugin.XmlPluginArtifact: java.io.InputStream getInputStream()> ==> <java.io.FileInputStream: void <init>(java.io.File)>
SPECIAL edge: specialinvoke $r0.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r1) in <com.atlassian.plugin.XmlPluginArtifact: java.io.InputStream getInputStream()> ==> <java.io.BufferedInputStream: void <init>(java.io.InputStream)>
SPECIAL edge: specialinvoke $r7.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.XmlPluginArtifact: java.io.InputStream getInputStream()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not find XML file for eading: ") in <com.atlassian.plugin.XmlPluginArtifact: java.io.InputStream getInputStream()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9) in <com.atlassian.plugin.XmlPluginArtifact: java.io.InputStream getInputStream()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.XmlPluginArtifact: java.io.InputStream getInputStream()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r11, $r4) in <com.atlassian.plugin.XmlPluginArtifact: java.io.InputStream getInputStream()> ==> <java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke r0.<java.io.BufferedInputStream: void close()>() in <com.atlassian.plugin.JarPluginArtifact$1: void close()> ==> <java.io.BufferedInputStream: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.util.jar.JarFile: void close()>() in <com.atlassian.plugin.JarPluginArtifact$1: void close()> ==> <java.util.jar.JarFile: void close()>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.PluginException: void <init>()>() in <com.atlassian.plugin.IllegalPluginStateException: void <init>()> ==> <com.atlassian.plugin.PluginException: void <init>()>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.PluginException: void <init>(java.lang.String)>(r1) in <com.atlassian.plugin.IllegalPluginStateException: void <init>(java.lang.String)> ==> <com.atlassian.plugin.PluginException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.PluginException: void <init>(java.lang.Throwable)>(r1) in <com.atlassian.plugin.IllegalPluginStateException: void <init>(java.lang.Throwable)> ==> <com.atlassian.plugin.PluginException: void <init>(java.lang.Throwable)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.PluginException: void <init>(java.lang.String,java.lang.Throwable)>(r1, r2) in <com.atlassian.plugin.IllegalPluginStateException: void <init>(java.lang.String,java.lang.Throwable)> ==> <com.atlassian.plugin.PluginException: void <init>(java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.parsers.XmlDescriptorParserFactory: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.parsers.XmlDescriptorParser: void <init>(java.io.InputStream,java.util.Set)>(r1, r2) in <com.atlassian.plugin.parsers.XmlDescriptorParserFactory: com.atlassian.plugin.parsers.DescriptorParser getInstance(java.io.InputStream,java.util.Set)> ==> <com.atlassian.plugin.parsers.XmlDescriptorParser: void <init>(java.io.InputStream,java.util.Set)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: void <init>(org.dom4j.Document,java.util.Set)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.parsers.PluginDescriptorReader: void <init>(org.dom4j.Document,java.util.Set)>($r5, $r7) in <com.atlassian.plugin.parsers.XmlDescriptorParser: void <init>(org.dom4j.Document,java.util.Set)> ==> <com.atlassian.plugin.parsers.PluginDescriptorReader: void <init>(org.dom4j.Document,java.util.Set)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.parsers.XmlDescriptorParser: void <init>(org.dom4j.Document,java.util.Set)>($r4, r5) in <com.atlassian.plugin.parsers.XmlDescriptorParser: void <init>(java.io.InputStream,java.util.Set)> ==> <com.atlassian.plugin.parsers.XmlDescriptorParser: void <init>(org.dom4j.Document,java.util.Set)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: void <init>(java.io.InputStream,java.lang.Iterable,java.util.Set)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r7.<com.atlassian.plugin.parsers.PluginDescriptorReader: void <init>(org.dom4j.Document,java.util.Set)>(r12, $r10) in <com.atlassian.plugin.parsers.XmlDescriptorParser: void <init>(java.io.InputStream,java.lang.Iterable,java.util.Set)> ==> <com.atlassian.plugin.parsers.PluginDescriptorReader: void <init>(org.dom4j.Document,java.util.Set)>
SPECIAL edge: specialinvoke $r10.<org.xml.sax.InputSource: void <init>(java.io.InputStream)>(r3) in <com.atlassian.plugin.parsers.XmlDescriptorParser: org.dom4j.Document createDocument(java.io.InputStream)> ==> <org.xml.sax.InputSource: void <init>(java.io.InputStream)>
SPECIAL edge: specialinvoke $r11.<org.dom4j.io.DOMReader: void <init>()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: org.dom4j.Document createDocument(java.io.InputStream)> ==> <org.dom4j.io.DOMReader: void <init>()>
VIRTUAL edge: $r5 = virtualinvoke $r11.<org.dom4j.io.DOMReader: org.dom4j.Document read(org.w3c.dom.Document)>(r8) in <com.atlassian.plugin.parsers.XmlDescriptorParser: org.dom4j.Document createDocument(java.io.InputStream)> ==> <org.dom4j.io.DOMReader: org.dom4j.Document read(org.w3c.dom.Document)>
SPECIAL edge: specialinvoke $r12.<com.atlassian.plugin.PluginParseException: void <init>(java.lang.String,java.lang.Throwable)>("Cannot parse XML plugin descriptor", $r6) in <com.atlassian.plugin.parsers.XmlDescriptorParser: org.dom4j.Document createDocument(java.io.InputStream)> ==> <com.atlassian.plugin.PluginParseException: void <init>(java.lang.String,java.lang.Throwable)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<com.atlassian.plugin.parsers.PluginDescriptorReader: java.lang.String getPluginName()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.Plugin configurePlugin(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.parsers.PluginDescriptorReader: java.lang.String getPluginName()>
INTERFACE edge: interfaceinvoke r0.<com.atlassian.plugin.Plugin: void setName(java.lang.String)>($r3) in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.Plugin configurePlugin(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: void setName(java.lang.String)>
INTERFACE edge: interfaceinvoke r0.<com.atlassian.plugin.Plugin: void setKey(java.lang.String)>($r4) in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.Plugin configurePlugin(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: void setKey(java.lang.String)>
INTERFACE edge: interfaceinvoke r0.<com.atlassian.plugin.Plugin: void setPluginsVersion(int)>($i0) in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.Plugin configurePlugin(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: void setPluginsVersion(int)>
INTERFACE edge: interfaceinvoke r0.<com.atlassian.plugin.Plugin: void setSystemPlugin(boolean)>($z0) in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.Plugin configurePlugin(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: void setSystemPlugin(boolean)>
VIRTUAL edge: virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.Plugin configurePlugin(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin)> ==> <java.lang.Object: java.lang.Class getClass()>
INTERFACE edge: interfaceinvoke r0.<com.atlassian.plugin.Plugin: void setI18nNameKey(java.lang.String)>($r10) in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.Plugin configurePlugin(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: void setI18nNameKey(java.lang.String)>
INTERFACE edge: $r11 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.Plugin configurePlugin(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r11 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.Plugin configurePlugin(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
INTERFACE edge: $r42 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.Plugin configurePlugin(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r42 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.Plugin configurePlugin(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
INTERFACE edge: interfaceinvoke r0.<com.atlassian.plugin.Plugin: void setEnabledByDefault(boolean)>($z1) in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.Plugin configurePlugin(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: void setEnabledByDefault(boolean)>
INTERFACE edge: interfaceinvoke r0.<com.atlassian.plugin.Plugin: void setResources(com.atlassian.plugin.Resourced)>($r51) in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.Plugin configurePlugin(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: void setResources(com.atlassian.plugin.Resourced)>
INTERFACE edge: interfaceinvoke r0.<com.atlassian.plugin.Plugin: void setPluginInformation(com.atlassian.plugin.PluginInformation)>($r15) in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.Plugin configurePlugin(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: void setPluginInformation(com.atlassian.plugin.PluginInformation)>
INTERFACE edge: $r17 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: com.atlassian.plugin.InstallationMode getInstallationMode()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.Plugin configurePlugin(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: com.atlassian.plugin.InstallationMode getInstallationMode()>
INTERFACE edge: $r25 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: com.atlassian.plugin.ModuleDescriptor getModuleDescriptor(java.lang.String)>($r24) in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.Plugin configurePlugin(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: com.atlassian.plugin.ModuleDescriptor getModuleDescriptor(java.lang.String)>
INTERFACE edge: $r35 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.Plugin configurePlugin(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r35 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.Plugin configurePlugin(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
INTERFACE edge: interfaceinvoke r0.<com.atlassian.plugin.Plugin: void addModuleDescriptor(com.atlassian.plugin.ModuleDescriptor)>(r23) in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.Plugin configurePlugin(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: void addModuleDescriptor(com.atlassian.plugin.ModuleDescriptor)>
INTERFACE edge: $r27 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: java.lang.String getName()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.Plugin configurePlugin(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getName()>
VIRTUAL edge: $r4 = virtualinvoke r1.<com.atlassian.plugin.parsers.XmlDescriptorParser: java.lang.String getKey()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.Plugin configurePlugin(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.parsers.XmlDescriptorParser: java.lang.String getKey()>
VIRTUAL edge: $i0 = virtualinvoke r1.<com.atlassian.plugin.parsers.XmlDescriptorParser: int getPluginsVersion()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.Plugin configurePlugin(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.parsers.XmlDescriptorParser: int getPluginsVersion()>
VIRTUAL edge: $z0 = virtualinvoke r1.<com.atlassian.plugin.parsers.XmlDescriptorParser: boolean isSystemPlugin()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.Plugin configurePlugin(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.parsers.XmlDescriptorParser: boolean isSystemPlugin()>
VIRTUAL edge: $r15 = virtualinvoke r1.<com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.PluginInformation createPluginInformation()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.Plugin configurePlugin(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.PluginInformation createPluginInformation()>
VIRTUAL edge: r23 = virtualinvoke r1.<com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.ModuleDescriptor createModuleDescriptor(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)>(r0, r21, r22) in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.Plugin configurePlugin(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.ModuleDescriptor createModuleDescriptor(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<com.atlassian.plugin.parsers.PluginDescriptorReader: java.util.Optional getI18nPluginNameKey()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.Plugin configurePlugin(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.parsers.PluginDescriptorReader: java.util.Optional getI18nPluginNameKey()>
VIRTUAL edge: $i1 = virtualinvoke $r11.<java.lang.String: int indexOf(int)>(58) in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.Plugin configurePlugin(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin)> ==> <java.lang.String: int indexOf(int)>
SPECIAL edge: specialinvoke $r46.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.Plugin configurePlugin(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r41 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Plugin keys cannot contain \':\'. Key is \'") in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.Plugin configurePlugin(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r43 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r42) in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.Plugin configurePlugin(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'") in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.Plugin configurePlugin(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.Plugin configurePlugin(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r47.<com.atlassian.plugin.PluginParseException: void <init>(java.lang.String)>($r45) in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.Plugin configurePlugin(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.PluginParseException: void <init>(java.lang.String)>
VIRTUAL edge: $z1 = virtualinvoke $r12.<com.atlassian.plugin.parsers.PluginDescriptorReader: boolean isEnabledByDefault()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.Plugin configurePlugin(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.parsers.PluginDescriptorReader: boolean isEnabledByDefault()>
VIRTUAL edge: $r14 = virtualinvoke $r13.<com.atlassian.plugin.parsers.PluginDescriptorReader: com.atlassian.plugin.Resources getResources()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.Plugin configurePlugin(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.parsers.PluginDescriptorReader: com.atlassian.plugin.Resources getResources()>
VIRTUAL edge: $r18 = virtualinvoke $r16.<com.atlassian.plugin.parsers.PluginDescriptorReader: java.lang.Iterable getModules(com.atlassian.plugin.InstallationMode)>($r17) in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.Plugin configurePlugin(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.parsers.PluginDescriptorReader: java.lang.Iterable getModules(com.atlassian.plugin.InstallationMode)>
INTERFACE edge: r19 = interfaceinvoke $r18.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.Plugin configurePlugin(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r19 = interfaceinvoke $r18.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.Plugin configurePlugin(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: r19 = interfaceinvoke $r18.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.Plugin configurePlugin(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r19 = interfaceinvoke $r18.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.Plugin configurePlugin(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin)> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r19 = interfaceinvoke $r18.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.Plugin configurePlugin(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: r19 = interfaceinvoke $r18.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.Plugin configurePlugin(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin)> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: $r24 = interfaceinvoke r23.<com.atlassian.plugin.ModuleDescriptor: java.lang.String getKey()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.Plugin configurePlugin(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.ModuleDescriptor: java.lang.String getKey()>
INTERFACE edge: $r24 = interfaceinvoke r23.<com.atlassian.plugin.ModuleDescriptor: java.lang.String getKey()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.Plugin configurePlugin(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.String getKey()>
INTERFACE edge: $r32 = interfaceinvoke r23.<com.atlassian.plugin.ModuleDescriptor: java.lang.String getKey()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.Plugin configurePlugin(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.ModuleDescriptor: java.lang.String getKey()>
INTERFACE edge: $r32 = interfaceinvoke r23.<com.atlassian.plugin.ModuleDescriptor: java.lang.String getKey()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.Plugin configurePlugin(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.String getKey()>
SPECIAL edge: specialinvoke $r48.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.Plugin configurePlugin(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r31 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Found duplicate key \'") in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.Plugin configurePlugin(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32) in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.Plugin configurePlugin(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' within plugin \'") in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.Plugin configurePlugin(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35) in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.Plugin configurePlugin(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'") in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.Plugin configurePlugin(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.Plugin configurePlugin(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r49.<com.atlassian.plugin.PluginParseException: void <init>(java.lang.String)>($r38) in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.Plugin configurePlugin(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.PluginParseException: void <init>(java.lang.String)>
INTERFACE edge: interfaceinvoke $r26.<org.slf4j.Logger: void error(java.lang.String,java.lang.Object)>("There were errors loading the plugin \'{}\'. The plugin has been disabled.", $r27) in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.Plugin configurePlugin(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin)> ==> <org.slf4j.Logger: void error(java.lang.String,java.lang.Object)>
CLINIT edge: $r59 = <com.atlassian.plugin.parsers.XmlDescriptorParser: org.slf4j.Logger log> in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.PluginInformation createPluginInformation()> ==> <com.atlassian.plugin.parsers.XmlDescriptorParser: void <clinit>()>
STATIC edge: $r64 = staticinvoke <com.google.common.collect.Iterables: java.lang.Iterable transform(java.lang.Iterable,com.google.common.base.Function)>($r82, $r63) in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.PluginInformation createPluginInformation()> ==> <com.google.common.collect.Iterables: java.lang.Iterable transform(java.lang.Iterable,com.google.common.base.Function)>
STATIC edge: $r63 = staticinvoke <com.atlassian.plugin.parsers.XmlDescriptorParser$getKey__25: com.google.common.base.Function bootstrap$()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.PluginInformation createPluginInformation()> ==> <com.atlassian.plugin.parsers.XmlDescriptorParser$getKey__25: com.google.common.base.Function bootstrap$()>
STATIC edge: $r62 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.lang.Object[])>($r61) in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.PluginInformation createPluginInformation()> ==> <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.lang.Object[])>
STATIC edge: $r61 = staticinvoke <com.atlassian.plugin.InstallationMode: com.atlassian.plugin.InstallationMode[] values()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.PluginInformation createPluginInformation()> ==> <com.atlassian.plugin.InstallationMode: com.atlassian.plugin.InstallationMode[] values()>
STATIC edge: $z3 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isNotBlank(java.lang.CharSequence)>($r56) in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.PluginInformation createPluginInformation()> ==> <org.apache.commons.lang3.StringUtils: boolean isNotBlank(java.lang.CharSequence)>
STATIC edge: $r53 = staticinvoke <com.atlassian.plugin.parsers.XmlDescriptorParser$of__23: java.util.function.Function bootstrap$()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.PluginInformation createPluginInformation()> ==> <com.atlassian.plugin.parsers.XmlDescriptorParser$of__23: java.util.function.Function bootstrap$()>
STATIC edge: r75 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet$Builder builder()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.PluginInformation createPluginInformation()> ==> <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet$Builder builder()>
STATIC edge: $r66 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet of(java.lang.Object)>($r65) in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.PluginInformation createPluginInformation()> ==> <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet of(java.lang.Object)>
STATIC edge: $r40 = staticinvoke <com.atlassian.plugin.parsers.XmlDescriptorParser$getStartup__22: java.util.function.Supplier bootstrap$(com.atlassian.plugin.PluginInformation)>($r79) in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.PluginInformation createPluginInformation()> ==> <com.atlassian.plugin.parsers.XmlDescriptorParser$getStartup__22: java.util.function.Supplier bootstrap$(com.atlassian.plugin.PluginInformation)>
STATIC edge: $r35 = staticinvoke <com.atlassian.plugin.parsers.XmlDescriptorParser$getMinJavaVersion__19: java.util.function.Supplier bootstrap$(com.atlassian.plugin.PluginInformation)>($r79) in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.PluginInformation createPluginInformation()> ==> <com.atlassian.plugin.parsers.XmlDescriptorParser$getMinJavaVersion__19: java.util.function.Supplier bootstrap$(com.atlassian.plugin.PluginInformation)>
STATIC edge: $r27 = staticinvoke <com.atlassian.plugin.parsers.XmlDescriptorParser$getVendorUrl__15: java.util.function.Supplier bootstrap$(com.atlassian.plugin.PluginInformation)>($r79) in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.PluginInformation createPluginInformation()> ==> <com.atlassian.plugin.parsers.XmlDescriptorParser$getVendorUrl__15: java.util.function.Supplier bootstrap$(com.atlassian.plugin.PluginInformation)>
STATIC edge: $r22 = staticinvoke <com.atlassian.plugin.parsers.XmlDescriptorParser$getVendorName__12: java.util.function.Supplier bootstrap$(com.atlassian.plugin.PluginInformation)>($r79) in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.PluginInformation createPluginInformation()> ==> <com.atlassian.plugin.parsers.XmlDescriptorParser$getVendorName__12: java.util.function.Supplier bootstrap$(com.atlassian.plugin.PluginInformation)>
STATIC edge: $r17 = staticinvoke <com.atlassian.plugin.parsers.XmlDescriptorParser$getVersion__11: java.util.function.Supplier bootstrap$(com.atlassian.plugin.PluginInformation)>($r79) in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.PluginInformation createPluginInformation()> ==> <com.atlassian.plugin.parsers.XmlDescriptorParser$getVersion__11: java.util.function.Supplier bootstrap$(com.atlassian.plugin.PluginInformation)>
STATIC edge: $r12 = staticinvoke <com.atlassian.plugin.parsers.XmlDescriptorParser$getDescriptionKey__10: java.util.function.Supplier bootstrap$(com.atlassian.plugin.PluginInformation)>($r79) in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.PluginInformation createPluginInformation()> ==> <com.atlassian.plugin.parsers.XmlDescriptorParser$getDescriptionKey__10: java.util.function.Supplier bootstrap$(com.atlassian.plugin.PluginInformation)>
STATIC edge: $r7 = staticinvoke <com.atlassian.plugin.parsers.XmlDescriptorParser$getDescription__9: java.util.function.Supplier bootstrap$(com.atlassian.plugin.PluginInformation)>($r79) in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.PluginInformation createPluginInformation()> ==> <com.atlassian.plugin.parsers.XmlDescriptorParser$getDescription__9: java.util.function.Supplier bootstrap$(com.atlassian.plugin.PluginInformation)>
CLINIT edge: r4 = staticinvoke <com.atlassian.plugin.parsers.XmlDescriptorParserUtils: com.atlassian.plugin.ModuleDescriptor newModuleDescriptor(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)>(r2, r0, r3) in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.ModuleDescriptor createModuleDescriptor(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.parsers.XmlDescriptorParserUtils: void <clinit>()>
STATIC edge: r9 = staticinvoke <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: com.atlassian.plugin.descriptors.UnloadableModuleDescriptor createUnloadableModuleDescriptor(com.atlassian.plugin.Plugin,org.dom4j.Element,java.lang.Throwable,com.atlassian.plugin.ModuleDescriptorFactory)>(r2, r0, $r7, r3) in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.ModuleDescriptor createModuleDescriptor(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: com.atlassian.plugin.descriptors.UnloadableModuleDescriptor createUnloadableModuleDescriptor(com.atlassian.plugin.Plugin,org.dom4j.Element,java.lang.Throwable,com.atlassian.plugin.ModuleDescriptorFactory)>
STATIC edge: r4 = staticinvoke <com.atlassian.plugin.parsers.XmlDescriptorParserUtils: com.atlassian.plugin.ModuleDescriptor newModuleDescriptor(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)>(r2, r0, r3) in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.ModuleDescriptor createModuleDescriptor(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.parsers.XmlDescriptorParserUtils: com.atlassian.plugin.ModuleDescriptor newModuleDescriptor(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)>
CLINIT edge: $r10 = <com.atlassian.plugin.parsers.XmlDescriptorParser: org.slf4j.Logger log> in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.ModuleDescriptor createModuleDescriptor(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.parsers.XmlDescriptorParser: void <clinit>()>
CLINIT edge: $r5 = <com.atlassian.plugin.parsers.XmlDescriptorParser: org.slf4j.Logger log> in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.ModuleDescriptor createModuleDescriptor(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.parsers.XmlDescriptorParser: void <clinit>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.atlassian.plugin.parsers.PluginDescriptorReader: java.lang.String getPluginKey()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: java.lang.String getKey()> ==> <com.atlassian.plugin.parsers.PluginDescriptorReader: java.lang.String getPluginKey()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<com.atlassian.plugin.parsers.PluginDescriptorReader: int getPluginsVersion()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: int getPluginsVersion()> ==> <com.atlassian.plugin.parsers.PluginDescriptorReader: int getPluginsVersion()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.PluginInformation createPluginInformation()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.PluginInformation getPluginInformation()> ==> <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.PluginInformation createPluginInformation()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<com.atlassian.plugin.parsers.PluginDescriptorReader: boolean isSystemPlugin()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: boolean isSystemPlugin()> ==> <com.atlassian.plugin.parsers.PluginDescriptorReader: boolean isSystemPlugin()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.parsers.PluginDescriptorReader: void <init>(org.dom4j.Document,java.util.Set)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: $r1 = specialinvoke r0.<com.atlassian.plugin.parsers.PluginDescriptorReader: org.dom4j.Element getPluginElement()>() in <com.atlassian.plugin.parsers.PluginDescriptorReader: java.lang.String getPluginKey()> ==> <com.atlassian.plugin.parsers.PluginDescriptorReader: org.dom4j.Element getPluginElement()>
SPECIAL edge: $r1 = specialinvoke r0.<com.atlassian.plugin.parsers.PluginDescriptorReader: org.dom4j.Element getPluginElement()>() in <com.atlassian.plugin.parsers.PluginDescriptorReader: java.lang.String getPluginName()> ==> <com.atlassian.plugin.parsers.PluginDescriptorReader: org.dom4j.Element getPluginElement()>
SPECIAL edge: $r1 = specialinvoke r0.<com.atlassian.plugin.parsers.PluginDescriptorReader: org.dom4j.Element getPluginElement()>() in <com.atlassian.plugin.parsers.PluginDescriptorReader: boolean isSystemPlugin()> ==> <com.atlassian.plugin.parsers.PluginDescriptorReader: org.dom4j.Element getPluginElement()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.Boolean: boolean booleanValue()>() in <com.atlassian.plugin.parsers.PluginDescriptorReader: boolean isSystemPlugin()> ==> <java.lang.Boolean: boolean booleanValue()>
SPECIAL edge: $r1 = specialinvoke r0.<com.atlassian.plugin.parsers.PluginDescriptorReader: org.dom4j.Element getPluginElement()>() in <com.atlassian.plugin.parsers.PluginDescriptorReader: java.util.Optional getI18nPluginNameKey()> ==> <com.atlassian.plugin.parsers.PluginDescriptorReader: org.dom4j.Element getPluginElement()>
SPECIAL edge: $r2 = specialinvoke r0.<com.atlassian.plugin.parsers.PluginDescriptorReader: org.dom4j.Element getPluginElement()>() in <com.atlassian.plugin.parsers.PluginDescriptorReader: boolean isEnabledByDefault()> ==> <com.atlassian.plugin.parsers.PluginDescriptorReader: org.dom4j.Element getPluginElement()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r3) in <com.atlassian.plugin.parsers.PluginDescriptorReader: boolean isEnabledByDefault()> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
SPECIAL edge: $r1 = specialinvoke r0.<com.atlassian.plugin.parsers.PluginDescriptorReader: org.dom4j.Element getPluginElement()>() in <com.atlassian.plugin.parsers.PluginDescriptorReader: java.util.Optional getPluginInformation()> ==> <com.atlassian.plugin.parsers.PluginDescriptorReader: org.dom4j.Element getPluginElement()>
INTERFACE edge: $r5 = interfaceinvoke $r3.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($r4) in <com.atlassian.plugin.parsers.PluginDescriptorReader: java.util.Optional getPluginInformation()> ==> <java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>
INTERFACE edge: $r7 = interfaceinvoke $r5.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($r6) in <com.atlassian.plugin.parsers.PluginDescriptorReader: java.util.Optional getPluginInformation()> ==> <java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>
VIRTUAL edge: $r2 = virtualinvoke r1.<com.atlassian.plugin.parsers.PluginDescriptorReader: java.util.Optional getPluginInformation()>() in <com.atlassian.plugin.parsers.PluginDescriptorReader: com.atlassian.plugin.parsers.PluginInformationReader getPluginInformationReader()> ==> <com.atlassian.plugin.parsers.PluginDescriptorReader: java.util.Optional getPluginInformation()>
VIRTUAL edge: $i0 = virtualinvoke r1.<com.atlassian.plugin.parsers.PluginDescriptorReader: int getPluginsVersion()>() in <com.atlassian.plugin.parsers.PluginDescriptorReader: com.atlassian.plugin.parsers.PluginInformationReader getPluginInformationReader()> ==> <com.atlassian.plugin.parsers.PluginDescriptorReader: int getPluginsVersion()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.parsers.PluginInformationReader: void <init>(org.dom4j.Element,java.util.Set,int)>($r4, $r5, $i0) in <com.atlassian.plugin.parsers.PluginDescriptorReader: com.atlassian.plugin.parsers.PluginInformationReader getPluginInformationReader()> ==> <com.atlassian.plugin.parsers.PluginInformationReader: void <init>(org.dom4j.Element,java.util.Set,int)>
STATIC edge: $r3 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2) in <com.atlassian.plugin.parsers.PluginInformationReader: void <init>(org.dom4j.Element,java.util.Set,int)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
STATIC edge: $r5 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet copyOf(java.util.Collection)>($r4) in <com.atlassian.plugin.parsers.PluginInformationReader: void <init>(org.dom4j.Element,java.util.Set,int)> ==> <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet copyOf(java.util.Collection)>
SPECIAL edge: $r1 = specialinvoke r0.<com.atlassian.plugin.parsers.PluginDescriptorReader: org.dom4j.Element getPluginElement()>() in <com.atlassian.plugin.parsers.PluginDescriptorReader: java.lang.Iterable getModules(com.atlassian.plugin.InstallationMode)> ==> <com.atlassian.plugin.parsers.PluginDescriptorReader: org.dom4j.Element getPluginElement()>
INTERFACE edge: $r5 = interfaceinvoke $r3.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($r4) in <com.atlassian.plugin.parsers.PluginDescriptorReader: java.lang.Iterable getModules(com.atlassian.plugin.InstallationMode)> ==> <java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>
INTERFACE edge: $r8 = interfaceinvoke $r5.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($r7) in <com.atlassian.plugin.parsers.PluginDescriptorReader: java.lang.Iterable getModules(com.atlassian.plugin.InstallationMode)> ==> <java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>
INTERFACE edge: $r10 = interfaceinvoke $r8.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r9) in <com.atlassian.plugin.parsers.PluginDescriptorReader: java.lang.Iterable getModules(com.atlassian.plugin.InstallationMode)> ==> <java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.atlassian.plugin.parsers.PluginDescriptorReader: java.lang.Iterable getModules(com.atlassian.plugin.InstallationMode)>(r1) in <com.atlassian.plugin.parsers.PluginDescriptorReader: java.lang.Iterable getModuleReaders(com.atlassian.plugin.InstallationMode)> ==> <com.atlassian.plugin.parsers.PluginDescriptorReader: java.lang.Iterable getModules(com.atlassian.plugin.InstallationMode)>
SPECIAL edge: $r1 = specialinvoke r0.<com.atlassian.plugin.parsers.PluginDescriptorReader: org.dom4j.Element getPluginElement()>() in <com.atlassian.plugin.parsers.PluginDescriptorReader: com.atlassian.plugin.Resources getResources()> ==> <com.atlassian.plugin.parsers.PluginDescriptorReader: org.dom4j.Element getPluginElement()>
SPECIAL edge: $r1 = specialinvoke r0.<com.atlassian.plugin.parsers.PluginDescriptorReader: org.dom4j.Element getPluginElement()>() in <com.atlassian.plugin.parsers.PluginDescriptorReader: int getPluginsVersion()> ==> <com.atlassian.plugin.parsers.PluginDescriptorReader: org.dom4j.Element getPluginElement()>
SPECIAL edge: $r2 = specialinvoke r0.<com.atlassian.plugin.parsers.PluginDescriptorReader: org.dom4j.Element getPluginElement()>() in <com.atlassian.plugin.parsers.PluginDescriptorReader: int getPluginsVersion()> ==> <com.atlassian.plugin.parsers.PluginDescriptorReader: org.dom4j.Element getPluginElement()>
SPECIAL edge: specialinvoke $r12.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.parsers.PluginDescriptorReader: int getPluginsVersion()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not parse pluginsVersion: ") in <com.atlassian.plugin.parsers.PluginDescriptorReader: int getPluginsVersion()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r14.<java.lang.NumberFormatException: java.lang.String getMessage()>() in <com.atlassian.plugin.parsers.PluginDescriptorReader: int getPluginsVersion()> ==> <java.lang.Throwable: java.lang.String getMessage()>
VIRTUAL edge: $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8) in <com.atlassian.plugin.parsers.PluginDescriptorReader: int getPluginsVersion()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.parsers.PluginDescriptorReader: int getPluginsVersion()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r10, $r3) in <com.atlassian.plugin.parsers.PluginDescriptorReader: int getPluginsVersion()> ==> <java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>
INTERFACE edge: interfaceinvoke $r4.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Ignoring module descriptor for this application: {}", $r5) in <com.atlassian.plugin.parsers.PluginDescriptorReader: boolean lambda$getModules$2(com.atlassian.plugin.InstallationMode,org.dom4j.Element)> ==> <org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1) in <com.atlassian.plugin.parsers.PluginDescriptorReader: boolean lambda$getModules$1(org.dom4j.Element)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $z1 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1) in <com.atlassian.plugin.parsers.PluginDescriptorReader: boolean lambda$getModules$1(org.dom4j.Element)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r2) in <com.atlassian.plugin.parsers.PluginDescriptorReader: boolean lambda$getPluginInformation$0(org.dom4j.Element)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
SPECIAL edge: $r1 = specialinvoke r0.<com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional getDescriptionElement()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional getDescription()> ==> <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional getDescriptionElement()>
SPECIAL edge: $r1 = specialinvoke r0.<com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional getDescriptionElement()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional getDescriptionKey()> ==> <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional getDescriptionElement()>
SPECIAL edge: $r1 = specialinvoke r0.<com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional childElement(java.lang.String)>("version") in <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional getVersion()> ==> <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional childElement(java.lang.String)>
STATIC edge: $r5 = staticinvoke <java.util.Optional: java.util.Optional empty()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional childElement(java.lang.String)> ==> <java.util.Optional: java.util.Optional empty()>
STATIC edge: $r5 = staticinvoke <java.util.Optional: java.util.Optional ofNullable(java.lang.Object)>($r4) in <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional childElement(java.lang.String)> ==> <java.util.Optional: java.util.Optional ofNullable(java.lang.Object)>
SPECIAL edge: $r1 = specialinvoke r0.<com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional getVendorElement()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional getVendorName()> ==> <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional getVendorElement()>
SPECIAL edge: $r1 = specialinvoke r0.<com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional getVendorElement()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional getVendorUrl()> ==> <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional getVendorElement()>
SPECIAL edge: $r1 = specialinvoke r0.<com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional getScopeElement()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional getScopeKey()> ==> <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional getScopeElement()>
VIRTUAL edge: $z0 = virtualinvoke $r8.<java.lang.Boolean: boolean booleanValue()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional getScopeKey()> ==> <java.lang.Boolean: boolean booleanValue()>
SPECIAL edge: $r1 = specialinvoke r0.<com.atlassian.plugin.parsers.PluginInformationReader: java.util.stream.Stream getParamElements()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Map getParameters()> ==> <com.atlassian.plugin.parsers.PluginInformationReader: java.util.stream.Stream getParamElements()>
INTERFACE edge: $r5 = interfaceinvoke $r1.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r4) in <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Map getParameters()> ==> <java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>
STATIC edge: $r2 = staticinvoke <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getParamElements_12__168: java.util.function.Predicate bootstrap$()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.util.stream.Stream getParamElements()> ==> <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getParamElements_12__168: java.util.function.Predicate bootstrap$()>
SPECIAL edge: $r1 = specialinvoke r0.<com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional getApplicationVersionElement()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional getMinVersion()> ==> <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional getApplicationVersionElement()>
SPECIAL edge: specialinvoke $r2.<com.atlassian.plugin.parsers.PluginInformationReader$GetAttributeFunction: void <init>(java.lang.String,com.atlassian.plugin.parsers.PluginInformationReader$1)>("min", null) in <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional getMinVersion()> ==> <com.atlassian.plugin.parsers.PluginInformationReader$GetAttributeFunction: void <init>(java.lang.String,com.atlassian.plugin.parsers.PluginInformationReader$1)>
SPECIAL edge: specialinvoke $r4.<com.atlassian.plugin.parsers.PluginInformationReader$ParseAttributeValueAsFloatFunction: void <init>(com.atlassian.plugin.parsers.PluginInformationReader$1)>(null) in <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional getMinVersion()> ==> <com.atlassian.plugin.parsers.PluginInformationReader$ParseAttributeValueAsFloatFunction: void <init>(com.atlassian.plugin.parsers.PluginInformationReader$1)>
SPECIAL edge: $r1 = specialinvoke r0.<com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional getApplicationVersionElement()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional getMaxVersion()> ==> <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional getApplicationVersionElement()>
SPECIAL edge: specialinvoke $r2.<com.atlassian.plugin.parsers.PluginInformationReader$GetAttributeFunction: void <init>(java.lang.String,com.atlassian.plugin.parsers.PluginInformationReader$1)>("max", null) in <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional getMaxVersion()> ==> <com.atlassian.plugin.parsers.PluginInformationReader$GetAttributeFunction: void <init>(java.lang.String,com.atlassian.plugin.parsers.PluginInformationReader$1)>
SPECIAL edge: specialinvoke $r4.<com.atlassian.plugin.parsers.PluginInformationReader$ParseAttributeValueAsFloatFunction: void <init>(com.atlassian.plugin.parsers.PluginInformationReader$1)>(null) in <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional getMaxVersion()> ==> <com.atlassian.plugin.parsers.PluginInformationReader$ParseAttributeValueAsFloatFunction: void <init>(com.atlassian.plugin.parsers.PluginInformationReader$1)>
SPECIAL edge: $r1 = specialinvoke r0.<com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional childElement(java.lang.String)>("java-version") in <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional getMinJavaVersion()> ==> <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional childElement(java.lang.String)>
SPECIAL edge: specialinvoke $r2.<com.atlassian.plugin.parsers.PluginInformationReader$GetAttributeFunction: void <init>(java.lang.String,com.atlassian.plugin.parsers.PluginInformationReader$1)>("min", null) in <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional getMinJavaVersion()> ==> <com.atlassian.plugin.parsers.PluginInformationReader$GetAttributeFunction: void <init>(java.lang.String,com.atlassian.plugin.parsers.PluginInformationReader$1)>
SPECIAL edge: specialinvoke $r4.<com.atlassian.plugin.parsers.PluginInformationReader$ParseAttributeValueAsFloatFunction: void <init>(com.atlassian.plugin.parsers.PluginInformationReader$1)>(null) in <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional getMinJavaVersion()> ==> <com.atlassian.plugin.parsers.PluginInformationReader$ParseAttributeValueAsFloatFunction: void <init>(com.atlassian.plugin.parsers.PluginInformationReader$1)>
SPECIAL edge: $r1 = specialinvoke r0.<com.atlassian.plugin.parsers.PluginInformationReader: java.util.stream.Stream getPermissionElements()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Map getPermissions()> ==> <com.atlassian.plugin.parsers.PluginInformationReader: java.util.stream.Stream getPermissionElements()>
INTERFACE edge: $r5 = interfaceinvoke $r1.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r4) in <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Map getPermissions()> ==> <java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>
STATIC edge: $r2 = staticinvoke <com.atlassian.plugin.parsers.PluginInformationReader: java.util.stream.Stream streamOptional(java.util.Optional)>($r1) in <com.atlassian.plugin.parsers.PluginInformationReader: java.util.stream.Stream getPermissionElements()> ==> <com.atlassian.plugin.parsers.PluginInformationReader: java.util.stream.Stream streamOptional(java.util.Optional)>
STATIC edge: $r8 = staticinvoke <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getPermissionElements_11__172: java.util.function.Predicate bootstrap$()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.util.stream.Stream getPermissionElements()> ==> <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getPermissionElements_11__172: java.util.function.Predicate bootstrap$()>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getPermissionElements_10__166: java.util.function.Function bootstrap$()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.util.stream.Stream getPermissionElements()> ==> <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getPermissionElements_10__166: java.util.function.Function bootstrap$()>
STATIC edge: $r1 = staticinvoke <com.atlassian.plugin.parsers.PluginInformationReader$of__173: java.util.function.Function bootstrap$()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.util.stream.Stream streamOptional(java.util.Optional)> ==> <com.atlassian.plugin.parsers.PluginInformationReader$of__173: java.util.function.Function bootstrap$()>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.parsers.PluginInformationReader$empty__174: java.util.function.Supplier bootstrap$()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.util.stream.Stream streamOptional(java.util.Optional)> ==> <com.atlassian.plugin.parsers.PluginInformationReader$empty__174: java.util.function.Supplier bootstrap$()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.atlassian.plugin.parsers.PluginInformationReader: java.util.Map getPermissions()>() in <com.atlassian.plugin.parsers.PluginInformationReader: boolean hasAllPermissions()> ==> <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Map getPermissions()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>() in <com.atlassian.plugin.parsers.PluginInformationReader: boolean hasAllPermissions()> ==> <java.util.HashMap: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>() in <com.atlassian.plugin.parsers.PluginInformationReader: boolean hasAllPermissions()> ==> <java.util.Hashtable: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>() in <com.atlassian.plugin.parsers.PluginInformationReader: boolean hasAllPermissions()> ==> <java.util.TreeMap: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>() in <com.atlassian.plugin.parsers.PluginInformationReader: boolean hasAllPermissions()> ==> <java.util.jar.Attributes: boolean isEmpty()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.atlassian.plugin.parsers.PluginInformationReader: java.util.Map getPermissions()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Set getPermissions(com.atlassian.plugin.InstallationMode)> ==> <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Map getPermissions()>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Set keySet()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Set getPermissions(com.atlassian.plugin.InstallationMode)> ==> <java.util.HashMap: java.util.Set keySet()>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Set keySet()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Set getPermissions(com.atlassian.plugin.InstallationMode)> ==> <java.util.Hashtable: java.util.Set keySet()>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Set keySet()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Set getPermissions(com.atlassian.plugin.InstallationMode)> ==> <java.util.TreeMap: java.util.Set keySet()>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Set keySet()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Set getPermissions(com.atlassian.plugin.InstallationMode)> ==> <java.util.jar.Attributes: java.util.Set keySet()>
SPECIAL edge: $r1 = specialinvoke r0.<com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional childElement(java.lang.String)>("startup") in <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional getStartup()> ==> <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional childElement(java.lang.String)>
SPECIAL edge: $r2 = specialinvoke r1.<com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional childElement(java.lang.String)>("scan-modules") in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.Iterable getModuleScanFolders()> ==> <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional childElement(java.lang.String)>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.Iterable lambda$getModuleScanFolders$9(java.util.Set,java.lang.Iterable)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.Iterable lambda$getModuleScanFolders$9(java.util.Set,java.lang.Iterable)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.Iterable lambda$getModuleScanFolders$9(java.util.Set,java.lang.Iterable)> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.Iterable lambda$getModuleScanFolders$9(java.util.Set,java.lang.Iterable)> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.Iterable lambda$getModuleScanFolders$9(java.util.Set,java.lang.Iterable)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.Iterable lambda$getModuleScanFolders$9(java.util.Set,java.lang.Iterable)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>($r5) in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.Iterable lambda$getModuleScanFolders$9(java.util.Set,java.lang.Iterable)> ==> <java.util.HashSet: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>($r5) in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.Iterable lambda$getModuleScanFolders$9(java.util.Set,java.lang.Iterable)> ==> <java.util.concurrent.CopyOnWriteArraySet: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>($r5) in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.Iterable lambda$getModuleScanFolders$9(java.util.Set,java.lang.Iterable)> ==> <java.util.TreeSet: boolean add(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.Iterable lambda$getModuleScanFolders$8(java.util.Set,org.dom4j.Element)> ==> <java.util.AbstractCollection: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.Iterable lambda$getModuleScanFolders$8(java.util.Set,org.dom4j.Element)> ==> <java.util.ArrayList: boolean isEmpty()>
INTERFACE edge: interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>("META-INF/atlassian") in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.Iterable lambda$getModuleScanFolders$8(java.util.Set,org.dom4j.Element)> ==> <java.util.HashSet: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>("META-INF/atlassian") in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.Iterable lambda$getModuleScanFolders$8(java.util.Set,org.dom4j.Element)> ==> <java.util.concurrent.CopyOnWriteArraySet: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>("META-INF/atlassian") in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.Iterable lambda$getModuleScanFolders$8(java.util.Set,org.dom4j.Element)> ==> <java.util.TreeSet: boolean add(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r8.<java.lang.Boolean: boolean booleanValue()>() in <com.atlassian.plugin.parsers.PluginInformationReader: boolean lambda$getPermissions$7(com.atlassian.plugin.InstallationMode,java.util.Optional)> ==> <java.lang.Boolean: boolean booleanValue()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getParameters$4(org.dom4j.Element)> ==> <java.lang.Object: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getParameters$4(org.dom4j.Element)> ==> <java.lang.Throwable: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getParameters$4(org.dom4j.Element)> ==> <java.lang.Integer: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getParameters$4(org.dom4j.Element)> ==> <java.net.Proxy: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getParameters$4(org.dom4j.Element)> ==> <java.lang.Thread: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getParameters$4(org.dom4j.Element)> ==> <java.util.AbstractCollection: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getParameters$4(org.dom4j.Element)> ==> <java.nio.ByteOrder: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getParameters$4(org.dom4j.Element)> ==> <java.lang.reflect.Constructor: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getParameters$4(org.dom4j.Element)> ==> <java.util.AbstractMap: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getParameters$4(org.dom4j.Element)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getParameters$4(org.dom4j.Element)> ==> <com.atlassian.plugin.util.VersionRange$OrVersionRange: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getParameters$4(org.dom4j.Element)> ==> <com.atlassian.plugin.JarPluginArtifact: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getParameters$4(org.dom4j.Element)> ==> <com.atlassian.plugin.manager.StateTracker: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getParameters$4(org.dom4j.Element)> ==> <java.lang.Enum: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getParameters$4(org.dom4j.Element)> ==> <com.atlassian.plugin.util.ModuleRestricts: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getParameters$4(org.dom4j.Element)> ==> <java.util.concurrent.atomic.AtomicInteger: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getParameters$4(org.dom4j.Element)> ==> <com.atlassian.plugin.util.VersionRange$RightUnboundedVersionRange: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getParameters$4(org.dom4j.Element)> ==> <java.lang.reflect.Method: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getParameters$4(org.dom4j.Element)> ==> <org.xml.sax.SAXException: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getParameters$4(org.dom4j.Element)> ==> <java.nio.charset.CodingErrorAction: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getParameters$4(org.dom4j.Element)> ==> <com.atlassian.plugin.manager.DependentPlugins$DependentPlugin: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getParameters$4(org.dom4j.Element)> ==> <java.lang.Boolean: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getParameters$4(org.dom4j.Element)> ==> <java.lang.Package: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getParameters$4(org.dom4j.Element)> ==> <com.atlassian.plugin.util.VersionRange$LeftUnboundedVersionRange: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getParameters$4(org.dom4j.Element)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getParameters$4(org.dom4j.Element)> ==> <java.lang.Class: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getParameters$4(org.dom4j.Element)> ==> <java.lang.Float: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getParameters$4(org.dom4j.Element)> ==> <java.nio.channels.FileChannel$MapMode: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getParameters$4(org.dom4j.Element)> ==> <java.lang.Character: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getParameters$4(org.dom4j.Element)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getParameters$4(org.dom4j.Element)> ==> <com.atlassian.plugin.impl.UnloadablePlugin: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getParameters$4(org.dom4j.Element)> ==> <com.atlassian.plugin.util.VersionRange$SingleVersionRange: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getParameters$4(org.dom4j.Element)> ==> <java.util.jar.Attributes$Name: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getParameters$4(org.dom4j.Element)> ==> <java.lang.String: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getParameters$4(org.dom4j.Element)> ==> <java.util.Hashtable: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getParameters$4(org.dom4j.Element)> ==> <java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getParameters$4(org.dom4j.Element)> ==> <com.atlassian.plugin.util.VersionRange$EmptyVersionRange: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getParameters$4(org.dom4j.Element)> ==> <java.net.URLConnection: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getParameters$4(org.dom4j.Element)> ==> <java.util.regex.Pattern: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getParameters$4(org.dom4j.Element)> ==> <java.lang.Character$Subset: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getParameters$4(org.dom4j.Element)> ==> <java.util.concurrent.atomic.AtomicReference: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getParameters$4(org.dom4j.Element)> ==> <java.security.CodeSigner: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getParameters$4(org.dom4j.Element)> ==> <java.security.Timestamp: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getParameters$4(org.dom4j.Element)> ==> <java.lang.ThreadGroup: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getParameters$4(org.dom4j.Element)> ==> <java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getParameters$4(org.dom4j.Element)> ==> <java.lang.Long: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getParameters$4(org.dom4j.Element)> ==> <java.math.BigInteger: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getParameters$4(org.dom4j.Element)> ==> <java.net.NetworkInterface: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getParameters$4(org.dom4j.Element)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getParameters$4(org.dom4j.Element)> ==> <java.lang.StackTraceElement: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getParameters$4(org.dom4j.Element)> ==> <java.lang.reflect.Field: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getParameters$4(org.dom4j.Element)> ==> <java.util.Date: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getParameters$4(org.dom4j.Element)> ==> <java.util.Locale: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getParameters$4(org.dom4j.Element)> ==> <java.lang.Short: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getParameters$4(org.dom4j.Element)> ==> <java.util.zip.ZipEntry: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getParameters$4(org.dom4j.Element)> ==> <com.atlassian.plugin.util.VersionRange$ActualVersionRange: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getParameters$4(org.dom4j.Element)> ==> <com.atlassian.plugin.util.ModuleRestricts$ModuleRestrict: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getParameters$4(org.dom4j.Element)> ==> <java.net.InetAddress: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getParameters$4(org.dom4j.Element)> ==> <java.lang.Double: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getParameters$4(org.dom4j.Element)> ==> <java.util.concurrent.locks.ReentrantReadWriteLock: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getParameters$4(org.dom4j.Element)> ==> <java.io.File: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getParameters$4(org.dom4j.Element)> ==> <java.net.URL: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getParameters$4(org.dom4j.Element)> ==> <java.net.URI: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getParameters$4(org.dom4j.Element)> ==> <java.lang.Byte: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getParameters$4(org.dom4j.Element)> ==> <java.nio.charset.CoderResult: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getParameters$4(org.dom4j.Element)> ==> <java.util.concurrent.locks.ReentrantLock: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getParameters$4(org.dom4j.Element)> ==> <com.atlassian.plugin.util.VersionRange$AllVersionRange: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.String lambda$getParameters$4(org.dom4j.Element)> ==> <java.io.FileDescriptor: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.descriptors.UnloadableModuleDescriptor: void <init>()>() in <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: com.atlassian.plugin.descriptors.UnloadableModuleDescriptor createUnloadableModuleDescriptor(com.atlassian.plugin.Plugin,org.dom4j.Element,java.lang.Throwable,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.descriptors.UnloadableModuleDescriptor: void <init>()>
VIRTUAL edge: virtualinvoke $r0.<com.atlassian.plugin.descriptors.UnloadableModuleDescriptor: void init(com.atlassian.plugin.Plugin,org.dom4j.Element)>(r2, r3) in <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: com.atlassian.plugin.descriptors.UnloadableModuleDescriptor createUnloadableModuleDescriptor(com.atlassian.plugin.Plugin,org.dom4j.Element,java.lang.Throwable,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void init(com.atlassian.plugin.Plugin,org.dom4j.Element)>
VIRTUAL edge: r9 = virtualinvoke $r0.<com.atlassian.plugin.descriptors.UnloadableModuleDescriptor: java.lang.String getKey()>() in <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: com.atlassian.plugin.descriptors.UnloadableModuleDescriptor createUnloadableModuleDescriptor(com.atlassian.plugin.Plugin,org.dom4j.Element,java.lang.Throwable,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.String getKey()>
VIRTUAL edge: virtualinvoke $r0.<com.atlassian.plugin.descriptors.UnloadableModuleDescriptor: void setErrorText(java.lang.String)>(r8) in <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: com.atlassian.plugin.descriptors.UnloadableModuleDescriptor createUnloadableModuleDescriptor(com.atlassian.plugin.Plugin,org.dom4j.Element,java.lang.Throwable,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.descriptors.AbstractNoOpModuleDescriptor: void setErrorText(java.lang.String)>
INTERFACE edge: r6 = interfaceinvoke r5.<com.atlassian.plugin.ModuleDescriptorFactory: java.lang.Class getModuleDescriptorClass(java.lang.String)>(r4) in <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: com.atlassian.plugin.descriptors.UnloadableModuleDescriptor createUnloadableModuleDescriptor(com.atlassian.plugin.Plugin,org.dom4j.Element,java.lang.Throwable,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.DefaultModuleDescriptorFactory: java.lang.Class getModuleDescriptorClass(java.lang.String)>
INTERFACE edge: r6 = interfaceinvoke r5.<com.atlassian.plugin.ModuleDescriptorFactory: java.lang.Class getModuleDescriptorClass(java.lang.String)>(r4) in <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: com.atlassian.plugin.descriptors.UnloadableModuleDescriptor createUnloadableModuleDescriptor(com.atlassian.plugin.Plugin,org.dom4j.Element,java.lang.Throwable,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.descriptors.ChainModuleDescriptorFactory: java.lang.Class getModuleDescriptorClass(java.lang.String)>
VIRTUAL edge: r9 = virtualinvoke r6.<java.lang.Class: java.lang.String getName()>() in <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: com.atlassian.plugin.descriptors.UnloadableModuleDescriptor createUnloadableModuleDescriptor(com.atlassian.plugin.Plugin,org.dom4j.Element,java.lang.Throwable,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.lang.Class: java.lang.String getName()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.descriptors.UnloadableModuleDescriptor: void <init>()>() in <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: com.atlassian.plugin.descriptors.UnloadableModuleDescriptor createUnloadableModuleDescriptor(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor,java.lang.Throwable)> ==> <com.atlassian.plugin.descriptors.UnloadableModuleDescriptor: void <init>()>
VIRTUAL edge: virtualinvoke $r0.<com.atlassian.plugin.descriptors.UnloadableModuleDescriptor: void setName(java.lang.String)>($r3) in <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: com.atlassian.plugin.descriptors.UnloadableModuleDescriptor createUnloadableModuleDescriptor(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor,java.lang.Throwable)> ==> <com.atlassian.plugin.descriptors.AbstractNoOpModuleDescriptor: void setName(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<com.atlassian.plugin.descriptors.UnloadableModuleDescriptor: void setKey(java.lang.String)>($r4) in <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: com.atlassian.plugin.descriptors.UnloadableModuleDescriptor createUnloadableModuleDescriptor(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor,java.lang.Throwable)> ==> <com.atlassian.plugin.descriptors.AbstractNoOpModuleDescriptor: void setKey(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<com.atlassian.plugin.descriptors.UnloadableModuleDescriptor: void setPlugin(com.atlassian.plugin.Plugin)>(r5) in <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: com.atlassian.plugin.descriptors.UnloadableModuleDescriptor createUnloadableModuleDescriptor(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor,java.lang.Throwable)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void setPlugin(com.atlassian.plugin.Plugin)>
VIRTUAL edge: virtualinvoke $r0.<com.atlassian.plugin.descriptors.UnloadableModuleDescriptor: void setErrorText(java.lang.String)>(r10) in <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: com.atlassian.plugin.descriptors.UnloadableModuleDescriptor createUnloadableModuleDescriptor(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor,java.lang.Throwable)> ==> <com.atlassian.plugin.descriptors.AbstractNoOpModuleDescriptor: void setErrorText(java.lang.String)>
INTERFACE edge: $r3 = interfaceinvoke r2.<com.atlassian.plugin.ModuleDescriptor: java.lang.String getName()>() in <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: com.atlassian.plugin.descriptors.UnloadableModuleDescriptor createUnloadableModuleDescriptor(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor,java.lang.Throwable)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.String getName()>
INTERFACE edge: $r4 = interfaceinvoke r2.<com.atlassian.plugin.ModuleDescriptor: java.lang.String getKey()>() in <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: com.atlassian.plugin.descriptors.UnloadableModuleDescriptor createUnloadableModuleDescriptor(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor,java.lang.Throwable)> ==> <com.atlassian.plugin.ModuleDescriptor: java.lang.String getKey()>
INTERFACE edge: $r4 = interfaceinvoke r2.<com.atlassian.plugin.ModuleDescriptor: java.lang.String getKey()>() in <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: com.atlassian.plugin.descriptors.UnloadableModuleDescriptor createUnloadableModuleDescriptor(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor,java.lang.Throwable)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.String getKey()>
INTERFACE edge: $r6 = interfaceinvoke r2.<com.atlassian.plugin.ModuleDescriptor: java.lang.String getDisplayName()>() in <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: com.atlassian.plugin.descriptors.UnloadableModuleDescriptor createUnloadableModuleDescriptor(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor,java.lang.Throwable)> ==> <com.atlassian.plugin.ModuleDescriptor: java.lang.String getDisplayName()>
INTERFACE edge: $r7 = interfaceinvoke r2.<com.atlassian.plugin.ModuleDescriptor: java.lang.Class getModuleClass()>() in <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: com.atlassian.plugin.descriptors.UnloadableModuleDescriptor createUnloadableModuleDescriptor(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor,java.lang.Throwable)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.Class getModuleClass()>
INTERFACE edge: $r12 = interfaceinvoke r2.<com.atlassian.plugin.ModuleDescriptor: java.lang.String getName()>() in <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: com.atlassian.plugin.descriptors.UnloadableModuleDescriptor createUnloadableModuleDescriptor(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor,java.lang.Throwable)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.String getName()>
INTERFACE edge: $r8 = interfaceinvoke r2.<com.atlassian.plugin.ModuleDescriptor: java.lang.Class getModuleClass()>() in <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: com.atlassian.plugin.descriptors.UnloadableModuleDescriptor createUnloadableModuleDescriptor(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor,java.lang.Throwable)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.Class getModuleClass()>
VIRTUAL edge: $r12 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>() in <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: com.atlassian.plugin.descriptors.UnloadableModuleDescriptor createUnloadableModuleDescriptor(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor,java.lang.Throwable)> ==> <java.lang.Class: java.lang.String getName()>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.impl.UnloadablePlugin: void <init>(java.lang.String)>(null) in <com.atlassian.plugin.impl.UnloadablePlugin: void <init>()> ==> <com.atlassian.plugin.impl.UnloadablePlugin: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.impl.StaticPlugin: void <init>()>() in <com.atlassian.plugin.impl.UnloadablePlugin: void <init>(java.lang.String)> ==> <com.atlassian.plugin.impl.StaticPlugin: void <init>()>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.impl.UnloadablePlugin: void setKey(java.lang.String)>($r5) in <com.atlassian.plugin.impl.UnloadablePlugin: void <init>(java.lang.String)> ==> <com.atlassian.plugin.impl.AbstractPlugin: void setKey(java.lang.String)>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.impl.UnloadablePlugin: void <init>(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown-") in <com.atlassian.plugin.impl.UnloadablePlugin: void <init>(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <com.atlassian.plugin.impl.UnloadablePlugin: void <init>(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.impl.UnloadablePlugin: void <init>(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.impl.UnloadablePlugin: java.lang.String toString()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <com.atlassian.plugin.impl.UnloadablePlugin: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r2 = specialinvoke r1.<com.atlassian.plugin.impl.StaticPlugin: java.lang.String toString()>() in <com.atlassian.plugin.impl.UnloadablePlugin: java.lang.String toString()> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String toString()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ") in <com.atlassian.plugin.impl.UnloadablePlugin: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5) in <com.atlassian.plugin.impl.UnloadablePlugin: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.impl.UnloadablePlugin: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.impl.UnloadablePluginFactory: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.impl.UnloadablePlugin: void <init>()>() in <com.atlassian.plugin.impl.UnloadablePluginFactory: com.atlassian.plugin.impl.UnloadablePlugin createUnloadablePlugin(com.atlassian.plugin.Plugin,com.atlassian.plugin.descriptors.UnloadableModuleDescriptor)> ==> <com.atlassian.plugin.impl.UnloadablePlugin: void <init>()>
VIRTUAL edge: virtualinvoke $r0.<com.atlassian.plugin.impl.UnloadablePlugin: void setName(java.lang.String)>($r3) in <com.atlassian.plugin.impl.UnloadablePluginFactory: com.atlassian.plugin.impl.UnloadablePlugin createUnloadablePlugin(com.atlassian.plugin.Plugin,com.atlassian.plugin.descriptors.UnloadableModuleDescriptor)> ==> <com.atlassian.plugin.impl.AbstractPlugin: void setName(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<com.atlassian.plugin.impl.UnloadablePlugin: void setKey(java.lang.String)>($r4) in <com.atlassian.plugin.impl.UnloadablePluginFactory: com.atlassian.plugin.impl.UnloadablePlugin createUnloadablePlugin(com.atlassian.plugin.Plugin,com.atlassian.plugin.descriptors.UnloadableModuleDescriptor)> ==> <com.atlassian.plugin.impl.AbstractPlugin: void setKey(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<com.atlassian.plugin.impl.UnloadablePlugin: void setI18nNameKey(java.lang.String)>($r5) in <com.atlassian.plugin.impl.UnloadablePluginFactory: com.atlassian.plugin.impl.UnloadablePlugin createUnloadablePlugin(com.atlassian.plugin.Plugin,com.atlassian.plugin.descriptors.UnloadableModuleDescriptor)> ==> <com.atlassian.plugin.impl.AbstractPlugin: void setI18nNameKey(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<com.atlassian.plugin.impl.UnloadablePlugin: void setUninstallable(boolean)>($z0) in <com.atlassian.plugin.impl.UnloadablePluginFactory: com.atlassian.plugin.impl.UnloadablePlugin createUnloadablePlugin(com.atlassian.plugin.Plugin,com.atlassian.plugin.descriptors.UnloadableModuleDescriptor)> ==> <com.atlassian.plugin.impl.UnloadablePlugin: void setUninstallable(boolean)>
VIRTUAL edge: virtualinvoke $r0.<com.atlassian.plugin.impl.UnloadablePlugin: void setDeletable(boolean)>($z1) in <com.atlassian.plugin.impl.UnloadablePluginFactory: com.atlassian.plugin.impl.UnloadablePlugin createUnloadablePlugin(com.atlassian.plugin.Plugin,com.atlassian.plugin.descriptors.UnloadableModuleDescriptor)> ==> <com.atlassian.plugin.impl.UnloadablePlugin: void setDeletable(boolean)>
VIRTUAL edge: virtualinvoke $r0.<com.atlassian.plugin.impl.UnloadablePlugin: void setPluginsVersion(int)>($i0) in <com.atlassian.plugin.impl.UnloadablePluginFactory: com.atlassian.plugin.impl.UnloadablePlugin createUnloadablePlugin(com.atlassian.plugin.Plugin,com.atlassian.plugin.descriptors.UnloadableModuleDescriptor)> ==> <com.atlassian.plugin.impl.AbstractPlugin: void setPluginsVersion(int)>
VIRTUAL edge: virtualinvoke $r0.<com.atlassian.plugin.impl.UnloadablePlugin: void setDynamicallyLoaded(boolean)>($z2) in <com.atlassian.plugin.impl.UnloadablePluginFactory: com.atlassian.plugin.impl.UnloadablePlugin createUnloadablePlugin(com.atlassian.plugin.Plugin,com.atlassian.plugin.descriptors.UnloadableModuleDescriptor)> ==> <com.atlassian.plugin.impl.UnloadablePlugin: void setDynamicallyLoaded(boolean)>
VIRTUAL edge: virtualinvoke $r0.<com.atlassian.plugin.impl.UnloadablePlugin: void setSystemPlugin(boolean)>(0) in <com.atlassian.plugin.impl.UnloadablePluginFactory: com.atlassian.plugin.impl.UnloadablePlugin createUnloadablePlugin(com.atlassian.plugin.Plugin,com.atlassian.plugin.descriptors.UnloadableModuleDescriptor)> ==> <com.atlassian.plugin.impl.AbstractPlugin: void setSystemPlugin(boolean)>
VIRTUAL edge: virtualinvoke $r0.<com.atlassian.plugin.impl.UnloadablePlugin: void setPluginInformation(com.atlassian.plugin.PluginInformation)>($r6) in <com.atlassian.plugin.impl.UnloadablePluginFactory: com.atlassian.plugin.impl.UnloadablePlugin createUnloadablePlugin(com.atlassian.plugin.Plugin,com.atlassian.plugin.descriptors.UnloadableModuleDescriptor)> ==> <com.atlassian.plugin.impl.AbstractPlugin: void setPluginInformation(com.atlassian.plugin.PluginInformation)>
VIRTUAL edge: virtualinvoke $r0.<com.atlassian.plugin.impl.UnloadablePlugin: void addModuleDescriptor(com.atlassian.plugin.ModuleDescriptor)>(r13) in <com.atlassian.plugin.impl.UnloadablePluginFactory: com.atlassian.plugin.impl.UnloadablePlugin createUnloadablePlugin(com.atlassian.plugin.Plugin,com.atlassian.plugin.descriptors.UnloadableModuleDescriptor)> ==> <com.atlassian.plugin.impl.AbstractPlugin: void addModuleDescriptor(com.atlassian.plugin.ModuleDescriptor)>
VIRTUAL edge: virtualinvoke $r0.<com.atlassian.plugin.impl.UnloadablePlugin: void addModuleDescriptor(com.atlassian.plugin.ModuleDescriptor)>(r11) in <com.atlassian.plugin.impl.UnloadablePluginFactory: com.atlassian.plugin.impl.UnloadablePlugin createUnloadablePlugin(com.atlassian.plugin.Plugin,com.atlassian.plugin.descriptors.UnloadableModuleDescriptor)> ==> <com.atlassian.plugin.impl.AbstractPlugin: void addModuleDescriptor(com.atlassian.plugin.ModuleDescriptor)>
INTERFACE edge: $r3 = interfaceinvoke r2.<com.atlassian.plugin.Plugin: java.lang.String getName()>() in <com.atlassian.plugin.impl.UnloadablePluginFactory: com.atlassian.plugin.impl.UnloadablePlugin createUnloadablePlugin(com.atlassian.plugin.Plugin,com.atlassian.plugin.descriptors.UnloadableModuleDescriptor)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getName()>
INTERFACE edge: $r4 = interfaceinvoke r2.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.impl.UnloadablePluginFactory: com.atlassian.plugin.impl.UnloadablePlugin createUnloadablePlugin(com.atlassian.plugin.Plugin,com.atlassian.plugin.descriptors.UnloadableModuleDescriptor)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r4 = interfaceinvoke r2.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.impl.UnloadablePluginFactory: com.atlassian.plugin.impl.UnloadablePlugin createUnloadablePlugin(com.atlassian.plugin.Plugin,com.atlassian.plugin.descriptors.UnloadableModuleDescriptor)> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
INTERFACE edge: $r5 = interfaceinvoke r2.<com.atlassian.plugin.Plugin: java.lang.String getI18nNameKey()>() in <com.atlassian.plugin.impl.UnloadablePluginFactory: com.atlassian.plugin.impl.UnloadablePlugin createUnloadablePlugin(com.atlassian.plugin.Plugin,com.atlassian.plugin.descriptors.UnloadableModuleDescriptor)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getI18nNameKey()>
INTERFACE edge: $z0 = interfaceinvoke r2.<com.atlassian.plugin.Plugin: boolean isUninstallable()>() in <com.atlassian.plugin.impl.UnloadablePluginFactory: com.atlassian.plugin.impl.UnloadablePlugin createUnloadablePlugin(com.atlassian.plugin.Plugin,com.atlassian.plugin.descriptors.UnloadableModuleDescriptor)> ==> <com.atlassian.plugin.impl.DefaultDynamicPlugin: boolean isUninstallable()>
INTERFACE edge: $z0 = interfaceinvoke r2.<com.atlassian.plugin.Plugin: boolean isUninstallable()>() in <com.atlassian.plugin.impl.UnloadablePluginFactory: com.atlassian.plugin.impl.UnloadablePlugin createUnloadablePlugin(com.atlassian.plugin.Plugin,com.atlassian.plugin.descriptors.UnloadableModuleDescriptor)> ==> <com.atlassian.plugin.impl.XmlDynamicPlugin: boolean isUninstallable()>
INTERFACE edge: $z0 = interfaceinvoke r2.<com.atlassian.plugin.Plugin: boolean isUninstallable()>() in <com.atlassian.plugin.impl.UnloadablePluginFactory: com.atlassian.plugin.impl.UnloadablePlugin createUnloadablePlugin(com.atlassian.plugin.Plugin,com.atlassian.plugin.descriptors.UnloadableModuleDescriptor)> ==> <com.atlassian.plugin.impl.StaticPlugin: boolean isUninstallable()>
INTERFACE edge: $z0 = interfaceinvoke r2.<com.atlassian.plugin.Plugin: boolean isUninstallable()>() in <com.atlassian.plugin.impl.UnloadablePluginFactory: com.atlassian.plugin.impl.UnloadablePlugin createUnloadablePlugin(com.atlassian.plugin.Plugin,com.atlassian.plugin.descriptors.UnloadableModuleDescriptor)> ==> <com.atlassian.plugin.impl.UnloadablePlugin: boolean isUninstallable()>
INTERFACE edge: $z1 = interfaceinvoke r2.<com.atlassian.plugin.Plugin: boolean isDeleteable()>() in <com.atlassian.plugin.impl.UnloadablePluginFactory: com.atlassian.plugin.impl.UnloadablePlugin createUnloadablePlugin(com.atlassian.plugin.Plugin,com.atlassian.plugin.descriptors.UnloadableModuleDescriptor)> ==> <com.atlassian.plugin.impl.DefaultDynamicPlugin: boolean isDeleteable()>
INTERFACE edge: $z1 = interfaceinvoke r2.<com.atlassian.plugin.Plugin: boolean isDeleteable()>() in <com.atlassian.plugin.impl.UnloadablePluginFactory: com.atlassian.plugin.impl.UnloadablePlugin createUnloadablePlugin(com.atlassian.plugin.Plugin,com.atlassian.plugin.descriptors.UnloadableModuleDescriptor)> ==> <com.atlassian.plugin.impl.XmlDynamicPlugin: boolean isDeleteable()>
INTERFACE edge: $z1 = interfaceinvoke r2.<com.atlassian.plugin.Plugin: boolean isDeleteable()>() in <com.atlassian.plugin.impl.UnloadablePluginFactory: com.atlassian.plugin.impl.UnloadablePlugin createUnloadablePlugin(com.atlassian.plugin.Plugin,com.atlassian.plugin.descriptors.UnloadableModuleDescriptor)> ==> <com.atlassian.plugin.impl.StaticPlugin: boolean isDeleteable()>
INTERFACE edge: $z1 = interfaceinvoke r2.<com.atlassian.plugin.Plugin: boolean isDeleteable()>() in <com.atlassian.plugin.impl.UnloadablePluginFactory: com.atlassian.plugin.impl.UnloadablePlugin createUnloadablePlugin(com.atlassian.plugin.Plugin,com.atlassian.plugin.descriptors.UnloadableModuleDescriptor)> ==> <com.atlassian.plugin.impl.UnloadablePlugin: boolean isDeleteable()>
INTERFACE edge: $i0 = interfaceinvoke r2.<com.atlassian.plugin.Plugin: int getPluginsVersion()>() in <com.atlassian.plugin.impl.UnloadablePluginFactory: com.atlassian.plugin.impl.UnloadablePlugin createUnloadablePlugin(com.atlassian.plugin.Plugin,com.atlassian.plugin.descriptors.UnloadableModuleDescriptor)> ==> <com.atlassian.plugin.impl.AbstractPlugin: int getPluginsVersion()>
INTERFACE edge: $i0 = interfaceinvoke r2.<com.atlassian.plugin.Plugin: int getPluginsVersion()>() in <com.atlassian.plugin.impl.UnloadablePluginFactory: com.atlassian.plugin.impl.UnloadablePlugin createUnloadablePlugin(com.atlassian.plugin.Plugin,com.atlassian.plugin.descriptors.UnloadableModuleDescriptor)> ==> <com.atlassian.plugin.Plugin: int getPluginsVersion()>
INTERFACE edge: $z2 = interfaceinvoke r2.<com.atlassian.plugin.Plugin: boolean isDynamicallyLoaded()>() in <com.atlassian.plugin.impl.UnloadablePluginFactory: com.atlassian.plugin.impl.UnloadablePlugin createUnloadablePlugin(com.atlassian.plugin.Plugin,com.atlassian.plugin.descriptors.UnloadableModuleDescriptor)> ==> <com.atlassian.plugin.impl.DefaultDynamicPlugin: boolean isDynamicallyLoaded()>
INTERFACE edge: $z2 = interfaceinvoke r2.<com.atlassian.plugin.Plugin: boolean isDynamicallyLoaded()>() in <com.atlassian.plugin.impl.UnloadablePluginFactory: com.atlassian.plugin.impl.UnloadablePlugin createUnloadablePlugin(com.atlassian.plugin.Plugin,com.atlassian.plugin.descriptors.UnloadableModuleDescriptor)> ==> <com.atlassian.plugin.impl.XmlDynamicPlugin: boolean isDynamicallyLoaded()>
INTERFACE edge: $z2 = interfaceinvoke r2.<com.atlassian.plugin.Plugin: boolean isDynamicallyLoaded()>() in <com.atlassian.plugin.impl.UnloadablePluginFactory: com.atlassian.plugin.impl.UnloadablePlugin createUnloadablePlugin(com.atlassian.plugin.Plugin,com.atlassian.plugin.descriptors.UnloadableModuleDescriptor)> ==> <com.atlassian.plugin.impl.StaticPlugin: boolean isDynamicallyLoaded()>
INTERFACE edge: $z2 = interfaceinvoke r2.<com.atlassian.plugin.Plugin: boolean isDynamicallyLoaded()>() in <com.atlassian.plugin.impl.UnloadablePluginFactory: com.atlassian.plugin.impl.UnloadablePlugin createUnloadablePlugin(com.atlassian.plugin.Plugin,com.atlassian.plugin.descriptors.UnloadableModuleDescriptor)> ==> <com.atlassian.plugin.impl.UnloadablePlugin: boolean isDynamicallyLoaded()>
INTERFACE edge: $r6 = interfaceinvoke r2.<com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginInformation getPluginInformation()>() in <com.atlassian.plugin.impl.UnloadablePluginFactory: com.atlassian.plugin.impl.UnloadablePlugin createUnloadablePlugin(com.atlassian.plugin.Plugin,com.atlassian.plugin.descriptors.UnloadableModuleDescriptor)> ==> <com.atlassian.plugin.impl.AbstractPlugin: com.atlassian.plugin.PluginInformation getPluginInformation()>
INTERFACE edge: $r6 = interfaceinvoke r2.<com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginInformation getPluginInformation()>() in <com.atlassian.plugin.impl.UnloadablePluginFactory: com.atlassian.plugin.impl.UnloadablePlugin createUnloadablePlugin(com.atlassian.plugin.Plugin,com.atlassian.plugin.descriptors.UnloadableModuleDescriptor)> ==> <com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginInformation getPluginInformation()>
INTERFACE edge: $r8 = interfaceinvoke r2.<com.atlassian.plugin.Plugin: java.util.Collection getModuleDescriptors()>() in <com.atlassian.plugin.impl.UnloadablePluginFactory: com.atlassian.plugin.impl.UnloadablePlugin createUnloadablePlugin(com.atlassian.plugin.Plugin,com.atlassian.plugin.descriptors.UnloadableModuleDescriptor)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.util.Collection getModuleDescriptors()>
SPECIAL edge: specialinvoke $r7.<java.util.ArrayList: void <init>(java.util.Collection)>($r8) in <com.atlassian.plugin.impl.UnloadablePluginFactory: com.atlassian.plugin.impl.UnloadablePlugin createUnloadablePlugin(com.atlassian.plugin.Plugin,com.atlassian.plugin.descriptors.UnloadableModuleDescriptor)> ==> <java.util.ArrayList: void <init>(java.util.Collection)>
INTERFACE edge: r10 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.impl.UnloadablePluginFactory: com.atlassian.plugin.impl.UnloadablePlugin createUnloadablePlugin(com.atlassian.plugin.Plugin,com.atlassian.plugin.descriptors.UnloadableModuleDescriptor)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $r14 = interfaceinvoke r13.<com.atlassian.plugin.ModuleDescriptor: java.lang.String getKey()>() in <com.atlassian.plugin.impl.UnloadablePluginFactory: com.atlassian.plugin.impl.UnloadablePlugin createUnloadablePlugin(com.atlassian.plugin.Plugin,com.atlassian.plugin.descriptors.UnloadableModuleDescriptor)> ==> <com.atlassian.plugin.ModuleDescriptor: java.lang.String getKey()>
INTERFACE edge: $r14 = interfaceinvoke r13.<com.atlassian.plugin.ModuleDescriptor: java.lang.String getKey()>() in <com.atlassian.plugin.impl.UnloadablePluginFactory: com.atlassian.plugin.impl.UnloadablePlugin createUnloadablePlugin(com.atlassian.plugin.Plugin,com.atlassian.plugin.descriptors.UnloadableModuleDescriptor)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.String getKey()>
VIRTUAL edge: $r15 = virtualinvoke r11.<com.atlassian.plugin.descriptors.UnloadableModuleDescriptor: java.lang.String getKey()>() in <com.atlassian.plugin.impl.UnloadablePluginFactory: com.atlassian.plugin.impl.UnloadablePlugin createUnloadablePlugin(com.atlassian.plugin.Plugin,com.atlassian.plugin.descriptors.UnloadableModuleDescriptor)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.String getKey()>
VIRTUAL edge: $z3 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r15) in <com.atlassian.plugin.impl.UnloadablePluginFactory: com.atlassian.plugin.impl.UnloadablePlugin createUnloadablePlugin(com.atlassian.plugin.Plugin,com.atlassian.plugin.descriptors.UnloadableModuleDescriptor)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.descriptors.AbstractNoOpModuleDescriptor: void <init>()>() in <com.atlassian.plugin.descriptors.UnloadableModuleDescriptor: void <init>()> ==> <com.atlassian.plugin.descriptors.AbstractNoOpModuleDescriptor: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke $r4.<java.util.stream.Stream: boolean anyMatch(java.util.function.Predicate)>($r5) in <com.atlassian.plugin.parsers.PluginInformationReader$ElementWithForApplicationsPredicate: boolean test(org.dom4j.Element)> ==> <java.util.stream.Stream: boolean anyMatch(java.util.function.Predicate)>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.atlassian.plugin.parsers.PluginInformationReader$ElementWithForApplicationsPredicate: boolean test(org.dom4j.Element)>($r2) in <com.atlassian.plugin.parsers.PluginInformationReader$ElementWithForApplicationsPredicate: boolean test(java.lang.Object)> ==> <com.atlassian.plugin.parsers.PluginInformationReader$ElementWithForApplicationsPredicate: boolean test(org.dom4j.Element)>
VIRTUAL edge: $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r2) in <com.atlassian.plugin.parsers.PluginInformationReader$ElementWithForApplicationsPredicate: boolean lambda$test$0(java.lang.String,com.atlassian.plugin.Application)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.atlassian.plugin.parsers.PluginInformationReader$GetAttributeFunction: java.util.Optional apply(org.dom4j.Element)>($r2) in <com.atlassian.plugin.parsers.PluginInformationReader$GetAttributeFunction: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.parsers.PluginInformationReader$GetAttributeFunction: java.util.Optional apply(org.dom4j.Element)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.atlassian.plugin.parsers.PluginInformationReader$ParseAttributeValueAsFloatFunction: java.lang.Float apply(org.dom4j.Attribute)>($r2) in <com.atlassian.plugin.parsers.PluginInformationReader$ParseAttributeValueAsFloatFunction: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.parsers.PluginInformationReader$ParseAttributeValueAsFloatFunction: java.lang.Float apply(org.dom4j.Attribute)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.impl.AbstractPlugin: void <init>(com.atlassian.plugin.PluginArtifact)>(null) in <com.atlassian.plugin.impl.StaticPlugin: void <init>()> ==> <com.atlassian.plugin.impl.AbstractPlugin: void <init>(com.atlassian.plugin.PluginArtifact)>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() in <com.atlassian.plugin.impl.StaticPlugin: java.lang.ClassLoader getClassLoader()> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>() in <com.atlassian.plugin.impl.StaticPlugin: java.lang.ClassLoader getClassLoader()> ==> <java.lang.Class: java.lang.ClassLoader getClassLoader()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() in <com.atlassian.plugin.impl.StaticPlugin: java.net.URL getResource(java.lang.String)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() in <com.atlassian.plugin.impl.StaticPlugin: java.io.InputStream getResourceAsStream(java.lang.String)> ==> <java.lang.Object: java.lang.Class getClass()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.util.PluginUtils: void <init>()> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $r1 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: java.util.Collection getModuleDescriptors()>() in <com.atlassian.plugin.util.PluginUtils: boolean doesPluginRequireRestart(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.util.Collection getModuleDescriptors()>
INTERFACE edge: r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.util.PluginUtils: boolean doesPluginRequireRestart(com.atlassian.plugin.Plugin)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.util.PluginUtils: boolean doesPluginRequireRestart(com.atlassian.plugin.Plugin)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.util.PluginUtils: boolean doesPluginRequireRestart(com.atlassian.plugin.Plugin)> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.util.PluginUtils: boolean doesPluginRequireRestart(com.atlassian.plugin.Plugin)> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.util.PluginUtils: boolean doesPluginRequireRestart(com.atlassian.plugin.Plugin)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.util.PluginUtils: boolean doesPluginRequireRestart(com.atlassian.plugin.Plugin)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.Class getClass()>() in <com.atlassian.plugin.util.PluginUtils: boolean doesPluginRequireRestart(com.atlassian.plugin.Plugin)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lcom/atlassian/plugin/descriptors/RequiresRestart;") in <com.atlassian.plugin.util.PluginUtils: boolean doesPluginRequireRestart(com.atlassian.plugin.Plugin)> ==> <java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>
SPECIAL edge: specialinvoke $r0.<java.util.HashSet: void <init>()>() in <com.atlassian.plugin.util.PluginUtils: java.util.Set getPluginModulesThatRequireRestart(com.atlassian.plugin.Plugin)> ==> <java.util.HashSet: void <init>()>
INTERFACE edge: interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r9) in <com.atlassian.plugin.util.PluginUtils: java.util.Set getPluginModulesThatRequireRestart(com.atlassian.plugin.Plugin)> ==> <java.util.HashSet: boolean add(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke r2.<com.atlassian.plugin.Plugin: java.util.Collection getModuleDescriptors()>() in <com.atlassian.plugin.util.PluginUtils: java.util.Set getPluginModulesThatRequireRestart(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.util.Collection getModuleDescriptors()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.util.PluginUtils: java.util.Set getPluginModulesThatRequireRestart(com.atlassian.plugin.Plugin)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.util.PluginUtils: java.util.Set getPluginModulesThatRequireRestart(com.atlassian.plugin.Plugin)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.util.PluginUtils: java.util.Set getPluginModulesThatRequireRestart(com.atlassian.plugin.Plugin)> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.util.PluginUtils: java.util.Set getPluginModulesThatRequireRestart(com.atlassian.plugin.Plugin)> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.util.PluginUtils: java.util.Set getPluginModulesThatRequireRestart(com.atlassian.plugin.Plugin)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.util.PluginUtils: java.util.Set getPluginModulesThatRequireRestart(com.atlassian.plugin.Plugin)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
VIRTUAL edge: $r7 = virtualinvoke r6.<java.lang.Object: java.lang.Class getClass()>() in <com.atlassian.plugin.util.PluginUtils: java.util.Set getPluginModulesThatRequireRestart(com.atlassian.plugin.Plugin)> ==> <java.lang.Object: java.lang.Class getClass()>
INTERFACE edge: $r9 = interfaceinvoke r6.<com.atlassian.plugin.ModuleDescriptor: java.lang.String getKey()>() in <com.atlassian.plugin.util.PluginUtils: java.util.Set getPluginModulesThatRequireRestart(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.ModuleDescriptor: java.lang.String getKey()>
INTERFACE edge: $r9 = interfaceinvoke r6.<com.atlassian.plugin.ModuleDescriptor: java.lang.String getKey()>() in <com.atlassian.plugin.util.PluginUtils: java.util.Set getPluginModulesThatRequireRestart(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.String getKey()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lcom/atlassian/plugin/descriptors/RequiresRestart;") in <com.atlassian.plugin.util.PluginUtils: java.util.Set getPluginModulesThatRequireRestart(com.atlassian.plugin.Plugin)> ==> <java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>
VIRTUAL edge: z0 = virtualinvoke r4.<com.atlassian.plugin.util.ModuleRestricts: boolean isValidFor(java.util.Set,com.atlassian.plugin.InstallationMode)>(r2, r5) in <com.atlassian.plugin.util.PluginUtils: boolean doesModuleElementApplyToApplication(org.dom4j.Element,java.util.Set,com.atlassian.plugin.InstallationMode)> ==> <com.atlassian.plugin.util.ModuleRestricts: boolean isValidFor(java.util.Set,com.atlassian.plugin.InstallationMode)>
INTERFACE edge: $z1 = interfaceinvoke $r6.<org.slf4j.Logger: boolean isDebugEnabled()>() in <com.atlassian.plugin.util.PluginUtils: boolean doesModuleElementApplyToApplication(org.dom4j.Element,java.util.Set,com.atlassian.plugin.InstallationMode)> ==> <org.slf4j.Logger: boolean isDebugEnabled()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.impl.AbstractPlugin: void <init>(com.atlassian.plugin.PluginArtifact)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r13.<java.util.concurrent.CopyOnWriteArraySet: void <init>()>() in <com.atlassian.plugin.impl.AbstractPlugin: void <init>(com.atlassian.plugin.PluginArtifact)> ==> <java.util.concurrent.CopyOnWriteArraySet: void <init>()>
SPECIAL edge: specialinvoke $r14.<com.atlassian.plugin.PluginInformation: void <init>()>() in <com.atlassian.plugin.impl.AbstractPlugin: void <init>(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.PluginInformation: void <init>()>
SPECIAL edge: specialinvoke $r15.<java.util.Date: void <init>()>() in <com.atlassian.plugin.impl.AbstractPlugin: void <init>(com.atlassian.plugin.PluginArtifact)> ==> <java.util.Date: void <init>()>
SPECIAL edge: specialinvoke $r16.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>($r9) in <com.atlassian.plugin.impl.AbstractPlugin: void <init>(com.atlassian.plugin.PluginArtifact)> ==> <java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>() in <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getName()> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r3 = interfaceinvoke r1.<com.atlassian.plugin.ModuleDescriptor: java.lang.String getKey()>() in <com.atlassian.plugin.impl.AbstractPlugin: void addModuleDescriptor(com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.ModuleDescriptor: java.lang.String getKey()>
INTERFACE edge: $r3 = interfaceinvoke r1.<com.atlassian.plugin.ModuleDescriptor: java.lang.String getKey()>() in <com.atlassian.plugin.impl.AbstractPlugin: void addModuleDescriptor(com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.String getKey()>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r1) in <com.atlassian.plugin.impl.AbstractPlugin: void addModuleDescriptor(com.atlassian.plugin.ModuleDescriptor)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r1) in <com.atlassian.plugin.impl.AbstractPlugin: void addModuleDescriptor(com.atlassian.plugin.ModuleDescriptor)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r1) in <com.atlassian.plugin.impl.AbstractPlugin: void addModuleDescriptor(com.atlassian.plugin.ModuleDescriptor)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r1) in <com.atlassian.plugin.impl.AbstractPlugin: void addModuleDescriptor(com.atlassian.plugin.ModuleDescriptor)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>() in <com.atlassian.plugin.impl.AbstractPlugin: java.util.Collection getModuleDescriptors()> ==> <java.util.HashMap: java.util.Collection values()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>() in <com.atlassian.plugin.impl.AbstractPlugin: java.util.Collection getModuleDescriptors()> ==> <java.util.Hashtable: java.util.Collection values()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>() in <com.atlassian.plugin.impl.AbstractPlugin: java.util.Collection getModuleDescriptors()> ==> <java.util.AbstractMap: java.util.Collection values()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>() in <com.atlassian.plugin.impl.AbstractPlugin: java.util.Collection getModuleDescriptors()> ==> <java.util.jar.Attributes: java.util.Collection values()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.atlassian.plugin.impl.AbstractPlugin: com.atlassian.plugin.ModuleDescriptor getModuleDescriptor(java.lang.String)> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.atlassian.plugin.impl.AbstractPlugin: com.atlassian.plugin.ModuleDescriptor getModuleDescriptor(java.lang.String)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.atlassian.plugin.impl.AbstractPlugin: com.atlassian.plugin.ModuleDescriptor getModuleDescriptor(java.lang.String)> ==> <java.util.TreeMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.atlassian.plugin.impl.AbstractPlugin: com.atlassian.plugin.ModuleDescriptor getModuleDescriptor(java.lang.String)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.atlassian.plugin.impl.AbstractPlugin: com.atlassian.plugin.ModuleDescriptor getModuleDescriptor(java.lang.String)> ==> <java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.util.ArrayList: void <init>()>() in <com.atlassian.plugin.impl.AbstractPlugin: java.util.List getModuleDescriptorsByModuleClass(java.lang.Class)> ==> <java.util.ArrayList: void <init>()>
INTERFACE edge: interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r7) in <com.atlassian.plugin.impl.AbstractPlugin: java.util.List getModuleDescriptorsByModuleClass(java.lang.Class)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Collection values()>() in <com.atlassian.plugin.impl.AbstractPlugin: java.util.List getModuleDescriptorsByModuleClass(java.lang.Class)> ==> <java.util.HashMap: java.util.Collection values()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Collection values()>() in <com.atlassian.plugin.impl.AbstractPlugin: java.util.List getModuleDescriptorsByModuleClass(java.lang.Class)> ==> <java.util.Hashtable: java.util.Collection values()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Collection values()>() in <com.atlassian.plugin.impl.AbstractPlugin: java.util.List getModuleDescriptorsByModuleClass(java.lang.Class)> ==> <java.util.AbstractMap: java.util.Collection values()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Collection values()>() in <com.atlassian.plugin.impl.AbstractPlugin: java.util.List getModuleDescriptorsByModuleClass(java.lang.Class)> ==> <java.util.jar.Attributes: java.util.Collection values()>
INTERFACE edge: r5 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.impl.AbstractPlugin: java.util.List getModuleDescriptorsByModuleClass(java.lang.Class)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r5 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.impl.AbstractPlugin: java.util.List getModuleDescriptorsByModuleClass(java.lang.Class)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r5 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.impl.AbstractPlugin: java.util.List getModuleDescriptorsByModuleClass(java.lang.Class)> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r5 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.impl.AbstractPlugin: java.util.List getModuleDescriptorsByModuleClass(java.lang.Class)> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r5 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.impl.AbstractPlugin: java.util.List getModuleDescriptorsByModuleClass(java.lang.Class)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: r5 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.impl.AbstractPlugin: java.util.List getModuleDescriptorsByModuleClass(java.lang.Class)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: r8 = interfaceinvoke r7.<com.atlassian.plugin.ModuleDescriptor: java.lang.Class getModuleClass()>() in <com.atlassian.plugin.impl.AbstractPlugin: java.util.List getModuleDescriptorsByModuleClass(java.lang.Class)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.Class getModuleClass()>
VIRTUAL edge: $z1 = virtualinvoke r9.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r8) in <com.atlassian.plugin.impl.AbstractPlugin: java.util.List getModuleDescriptorsByModuleClass(java.lang.Class)> ==> <java.lang.Class: boolean isAssignableFrom(java.lang.Class)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>() in <com.atlassian.plugin.impl.AbstractPlugin: com.atlassian.plugin.PluginState getPluginState()> ==> <java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>() in <com.atlassian.plugin.impl.AbstractPlugin: void enable()> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
VIRTUAL edge: $r8 = virtualinvoke r0.<com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>() in <com.atlassian.plugin.impl.AbstractPlugin: void enable()> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
VIRTUAL edge: $r11 = virtualinvoke r0.<com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>() in <com.atlassian.plugin.impl.AbstractPlugin: void enable()> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
VIRTUAL edge: r23 = virtualinvoke r0.<com.atlassian.plugin.impl.AbstractPlugin: com.atlassian.plugin.PluginState enableInternal()>() in <com.atlassian.plugin.impl.AbstractPlugin: void enable()> ==> <com.atlassian.plugin.impl.AbstractPlugin: com.atlassian.plugin.PluginState enableInternal()>
VIRTUAL edge: $r18 = virtualinvoke r0.<com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>() in <com.atlassian.plugin.impl.AbstractPlugin: void enable()> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.impl.AbstractPlugin: void setPluginState(com.atlassian.plugin.PluginState)>(r23) in <com.atlassian.plugin.impl.AbstractPlugin: void enable()> ==> <com.atlassian.plugin.impl.AbstractPlugin: void setPluginState(com.atlassian.plugin.PluginState)>
VIRTUAL edge: $r21 = virtualinvoke r0.<com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>() in <com.atlassian.plugin.impl.AbstractPlugin: void enable()> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
VIRTUAL edge: $r14 = virtualinvoke r0.<com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>() in <com.atlassian.plugin.impl.AbstractPlugin: void enable()> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: interfaceinvoke $r1.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Enabling plugin \'{}\'", $r2) in <com.atlassian.plugin.impl.AbstractPlugin: void enable()> ==> <org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>() in <com.atlassian.plugin.impl.AbstractPlugin: void enable()> ==> <java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>
INTERFACE edge: interfaceinvoke $r7.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Plugin \'{}\' is already enabled, not doing anything.", $r8) in <com.atlassian.plugin.impl.AbstractPlugin: void enable()> ==> <org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Plugin \'{}\' is NOT already enabled, actually enabling.", $r11) in <com.atlassian.plugin.impl.AbstractPlugin: void enable()> ==> <org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r17.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>("Illegal state transition to {} for plugin \'{}\' on enable()", r23, $r18) in <com.atlassian.plugin.impl.AbstractPlugin: void enable()> ==> <org.slf4j.Logger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r13.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Enabled plugin \'{}\'", $r14) in <com.atlassian.plugin.impl.AbstractPlugin: void enable()> ==> <org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>
CLINIT edge: $r0 = <com.atlassian.plugin.impl.AbstractPlugin: org.slf4j.Logger log> in <com.atlassian.plugin.impl.AbstractPlugin: void setPluginState(com.atlassian.plugin.PluginState)> ==> <com.atlassian.plugin.impl.AbstractPlugin: void <clinit>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>() in <com.atlassian.plugin.impl.AbstractPlugin: void disable()> ==> <java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>
VIRTUAL edge: $r5 = virtualinvoke r0.<com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>() in <com.atlassian.plugin.impl.AbstractPlugin: void disable()> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.impl.AbstractPlugin: void setPluginState(com.atlassian.plugin.PluginState)>($r6) in <com.atlassian.plugin.impl.AbstractPlugin: void disable()> ==> <com.atlassian.plugin.impl.AbstractPlugin: void setPluginState(com.atlassian.plugin.PluginState)>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.impl.AbstractPlugin: void disableInternal()>() in <com.atlassian.plugin.impl.AbstractPlugin: void disable()> ==> <com.atlassian.plugin.impl.AbstractPlugin: void disableInternal()>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.impl.AbstractPlugin: void setPluginState(com.atlassian.plugin.PluginState)>($r7) in <com.atlassian.plugin.impl.AbstractPlugin: void disable()> ==> <com.atlassian.plugin.impl.AbstractPlugin: void setPluginState(com.atlassian.plugin.PluginState)>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.impl.AbstractPlugin: void setPluginState(com.atlassian.plugin.PluginState)>($r12) in <com.atlassian.plugin.impl.AbstractPlugin: void disable()> ==> <com.atlassian.plugin.impl.AbstractPlugin: void setPluginState(com.atlassian.plugin.PluginState)>
VIRTUAL edge: $r16 = virtualinvoke r0.<com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>() in <com.atlassian.plugin.impl.AbstractPlugin: void disable()> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
VIRTUAL edge: $r9 = virtualinvoke r0.<com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>() in <com.atlassian.plugin.impl.AbstractPlugin: void disable()> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: interfaceinvoke $r4.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Disabling plugin \'{}\'", $r5) in <com.atlassian.plugin.impl.AbstractPlugin: void disable()> ==> <org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>
SPECIAL edge: specialinvoke $r13.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.impl.AbstractPlugin: void disable()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to disable plugin \'") in <com.atlassian.plugin.impl.AbstractPlugin: void disable()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16) in <com.atlassian.plugin.impl.AbstractPlugin: void disable()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'") in <com.atlassian.plugin.impl.AbstractPlugin: void disable()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.impl.AbstractPlugin: void disable()> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r8.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Disabled plugin \'{}\'", $r9) in <com.atlassian.plugin.impl.AbstractPlugin: void disable()> ==> <org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.atlassian.plugin.impl.AbstractPlugin: com.atlassian.plugin.PluginDependencies getDependencies()>() in <com.atlassian.plugin.impl.AbstractPlugin: java.util.Set getRequiredPlugins()> ==> <com.atlassian.plugin.impl.AbstractPlugin: com.atlassian.plugin.PluginDependencies getDependencies()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.PluginDependencies: void <init>()>() in <com.atlassian.plugin.impl.AbstractPlugin: com.atlassian.plugin.PluginDependencies getDependencies()> ==> <com.atlassian.plugin.PluginDependencies: void <init>()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.function.Supplier: java.lang.Object get()>() in <com.atlassian.plugin.impl.AbstractPlugin: java.util.Set getActivePermissions()> ==> <java.util.function.Supplier: java.lang.Object get()>
SPECIAL edge: $r1 = specialinvoke r0.<com.atlassian.plugin.impl.AbstractPlugin: java.lang.Iterable getPermissionsForCurrentInstallationMode()>() in <com.atlassian.plugin.impl.AbstractPlugin: java.util.Set getPermissionsInternal()> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.Iterable getPermissionsForCurrentInstallationMode()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Spliterator spliterator()>() in <com.atlassian.plugin.impl.AbstractPlugin: java.util.Set getPermissionsInternal()> ==> <java.lang.Iterable: java.util.Spliterator spliterator()>
INTERFACE edge: $r5 = interfaceinvoke $r3.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r4) in <com.atlassian.plugin.impl.AbstractPlugin: java.util.Set getPermissionsInternal()> ==> <java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>
INTERFACE edge: $r7 = interfaceinvoke $r5.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r6) in <com.atlassian.plugin.impl.AbstractPlugin: java.util.Set getPermissionsInternal()> ==> <java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>
STATIC edge: $r5 = staticinvoke <com.atlassian.plugin.impl.AbstractPlugin$lambda_getPermissionsForCurrentInstallationMode_0__136: java.util.function.Predicate bootstrap$(com.atlassian.plugin.InstallationMode)>(r1) in <com.atlassian.plugin.impl.AbstractPlugin: java.lang.Iterable getPermissionsForCurrentInstallationMode()> ==> <com.atlassian.plugin.impl.AbstractPlugin$lambda_getPermissionsForCurrentInstallationMode_0__136: java.util.function.Predicate bootstrap$(com.atlassian.plugin.InstallationMode)>
STATIC edge: $r7 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>() in <com.atlassian.plugin.impl.AbstractPlugin: java.lang.Iterable getPermissionsForCurrentInstallationMode()> ==> <java.util.stream.Collectors: java.util.stream.Collector toList()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.atlassian.plugin.impl.AbstractPlugin: java.util.Set getActivePermissions()>() in <com.atlassian.plugin.impl.AbstractPlugin: boolean hasAllPermissions()> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.util.Set getActivePermissions()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Set: boolean contains(java.lang.Object)>("all_permissions") in <com.atlassian.plugin.impl.AbstractPlugin: boolean hasAllPermissions()> ==> <java.util.HashSet: boolean contains(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Set: boolean contains(java.lang.Object)>("all_permissions") in <com.atlassian.plugin.impl.AbstractPlugin: boolean hasAllPermissions()> ==> <java.util.concurrent.CopyOnWriteArraySet: boolean contains(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Set: boolean contains(java.lang.Object)>("all_permissions") in <com.atlassian.plugin.impl.AbstractPlugin: boolean hasAllPermissions()> ==> <java.util.TreeSet: boolean contains(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.impl.AbstractPlugin: void uninstall()>() in <com.atlassian.plugin.impl.AbstractPlugin: void close()> ==> <com.atlassian.plugin.impl.AbstractPlugin: void uninstall()>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>() in <com.atlassian.plugin.impl.AbstractPlugin: void install()> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
VIRTUAL edge: $r10 = virtualinvoke r0.<com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>() in <com.atlassian.plugin.impl.AbstractPlugin: void install()> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.impl.AbstractPlugin: void installInternal()>() in <com.atlassian.plugin.impl.AbstractPlugin: void install()> ==> <com.atlassian.plugin.impl.AbstractPlugin: void installInternal()>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.impl.AbstractPlugin: void setPluginState(com.atlassian.plugin.PluginState)>($r6) in <com.atlassian.plugin.impl.AbstractPlugin: void install()> ==> <com.atlassian.plugin.impl.AbstractPlugin: void setPluginState(com.atlassian.plugin.PluginState)>
VIRTUAL edge: $r16 = virtualinvoke r0.<com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>() in <com.atlassian.plugin.impl.AbstractPlugin: void install()> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
VIRTUAL edge: $r8 = virtualinvoke r0.<com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>() in <com.atlassian.plugin.impl.AbstractPlugin: void install()> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: interfaceinvoke $r1.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Installing plugin \'{}\'.", $r2) in <com.atlassian.plugin.impl.AbstractPlugin: void install()> ==> <org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>() in <com.atlassian.plugin.impl.AbstractPlugin: void install()> ==> <java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>
INTERFACE edge: interfaceinvoke $r9.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Plugin \'{}\' is already installed, not doing anything.", $r10) in <com.atlassian.plugin.impl.AbstractPlugin: void install()> ==> <org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>
SPECIAL edge: specialinvoke $r13.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.impl.AbstractPlugin: void install()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to install plugin \'") in <com.atlassian.plugin.impl.AbstractPlugin: void install()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16) in <com.atlassian.plugin.impl.AbstractPlugin: void install()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'.") in <com.atlassian.plugin.impl.AbstractPlugin: void install()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.impl.AbstractPlugin: void install()> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r7.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Installed plugin \'{}\'.", $r8) in <com.atlassian.plugin.impl.AbstractPlugin: void install()> ==> <org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>
CLINIT edge: $r1 = <com.atlassian.plugin.impl.AbstractPlugin: org.slf4j.Logger log> in <com.atlassian.plugin.impl.AbstractPlugin: void installInternal()> ==> <com.atlassian.plugin.impl.AbstractPlugin: void <clinit>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>() in <com.atlassian.plugin.impl.AbstractPlugin: void uninstall()> ==> <java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>
VIRTUAL edge: $r5 = virtualinvoke r0.<com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>() in <com.atlassian.plugin.impl.AbstractPlugin: void uninstall()> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.impl.AbstractPlugin: void uninstallInternal()>() in <com.atlassian.plugin.impl.AbstractPlugin: void uninstall()> ==> <com.atlassian.plugin.impl.DefaultDynamicPlugin: void uninstallInternal()>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.impl.AbstractPlugin: void uninstallInternal()>() in <com.atlassian.plugin.impl.AbstractPlugin: void uninstall()> ==> <com.atlassian.plugin.impl.AbstractPlugin: void uninstallInternal()>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.impl.AbstractPlugin: void uninstallInternal()>() in <com.atlassian.plugin.impl.AbstractPlugin: void uninstall()> ==> <com.atlassian.plugin.impl.StaticPlugin: void uninstallInternal()>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.impl.AbstractPlugin: void uninstallInternal()>() in <com.atlassian.plugin.impl.AbstractPlugin: void uninstall()> ==> <com.atlassian.plugin.impl.UnloadablePlugin: void uninstallInternal()>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.impl.AbstractPlugin: void setPluginState(com.atlassian.plugin.PluginState)>($r6) in <com.atlassian.plugin.impl.AbstractPlugin: void uninstall()> ==> <com.atlassian.plugin.impl.AbstractPlugin: void setPluginState(com.atlassian.plugin.PluginState)>
VIRTUAL edge: $r14 = virtualinvoke r0.<com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>() in <com.atlassian.plugin.impl.AbstractPlugin: void uninstall()> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
VIRTUAL edge: $r8 = virtualinvoke r0.<com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>() in <com.atlassian.plugin.impl.AbstractPlugin: void uninstall()> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: interfaceinvoke $r4.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Uninstalling plugin \'{}\'", $r5) in <com.atlassian.plugin.impl.AbstractPlugin: void uninstall()> ==> <org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>
SPECIAL edge: specialinvoke $r11.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.impl.AbstractPlugin: void uninstall()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to uninstall plugin \'") in <com.atlassian.plugin.impl.AbstractPlugin: void uninstall()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14) in <com.atlassian.plugin.impl.AbstractPlugin: void uninstall()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'") in <com.atlassian.plugin.impl.AbstractPlugin: void uninstall()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.impl.AbstractPlugin: void uninstall()> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r7.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Uninstalled plugin \'{}\'", $r8) in <com.atlassian.plugin.impl.AbstractPlugin: void uninstall()> ==> <org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>() in <com.atlassian.plugin.impl.AbstractPlugin: boolean containsSystemModule()> ==> <java.util.HashMap: java.util.Collection values()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>() in <com.atlassian.plugin.impl.AbstractPlugin: boolean containsSystemModule()> ==> <java.util.Hashtable: java.util.Collection values()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>() in <com.atlassian.plugin.impl.AbstractPlugin: boolean containsSystemModule()> ==> <java.util.AbstractMap: java.util.Collection values()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>() in <com.atlassian.plugin.impl.AbstractPlugin: boolean containsSystemModule()> ==> <java.util.jar.Attributes: java.util.Collection values()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.impl.AbstractPlugin: boolean containsSystemModule()> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.impl.AbstractPlugin: boolean containsSystemModule()> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.impl.AbstractPlugin: boolean containsSystemModule()> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.impl.AbstractPlugin: boolean containsSystemModule()> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.impl.AbstractPlugin: boolean containsSystemModule()> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.impl.AbstractPlugin: boolean containsSystemModule()> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z1 = interfaceinvoke r5.<com.atlassian.plugin.ModuleDescriptor: boolean isSystemModule()>() in <com.atlassian.plugin.impl.AbstractPlugin: boolean containsSystemModule()> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: boolean isSystemModule()>
VIRTUAL edge: $l0 = virtualinvoke $r2.<java.util.Date: long getTime()>() in <com.atlassian.plugin.impl.AbstractPlugin: java.util.Date getDateInstalled()> ==> <java.util.Date: long getTime()>
SPECIAL edge: specialinvoke $r0.<java.util.Date: void <init>(long)>($l0) in <com.atlassian.plugin.impl.AbstractPlugin: java.util.Date getDateInstalled()> ==> <java.util.Date: void <init>(long)>
SPECIAL edge: specialinvoke $r0.<java.util.HashSet: void <init>(java.util.Collection)>($r2) in <com.atlassian.plugin.impl.AbstractPlugin: java.lang.Iterable getDynamicModuleDescriptors()> ==> <java.util.HashSet: void <init>(java.util.Collection)>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.impl.AbstractPlugin: void addModuleDescriptor(com.atlassian.plugin.ModuleDescriptor)>(r1) in <com.atlassian.plugin.impl.AbstractPlugin: boolean addDynamicModuleDescriptor(com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.impl.AbstractPlugin: void addModuleDescriptor(com.atlassian.plugin.ModuleDescriptor)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1) in <com.atlassian.plugin.impl.AbstractPlugin: boolean addDynamicModuleDescriptor(com.atlassian.plugin.ModuleDescriptor)> ==> <java.util.HashSet: boolean add(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1) in <com.atlassian.plugin.impl.AbstractPlugin: boolean addDynamicModuleDescriptor(com.atlassian.plugin.ModuleDescriptor)> ==> <java.util.concurrent.CopyOnWriteArraySet: boolean add(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1) in <com.atlassian.plugin.impl.AbstractPlugin: boolean addDynamicModuleDescriptor(com.atlassian.plugin.ModuleDescriptor)> ==> <java.util.TreeSet: boolean add(java.lang.Object)>
INTERFACE edge: $r2 = interfaceinvoke r1.<com.atlassian.plugin.ModuleDescriptor: java.lang.String getKey()>() in <com.atlassian.plugin.impl.AbstractPlugin: boolean removeDynamicModuleDescriptor(com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.ModuleDescriptor: java.lang.String getKey()>
INTERFACE edge: $r2 = interfaceinvoke r1.<com.atlassian.plugin.ModuleDescriptor: java.lang.String getKey()>() in <com.atlassian.plugin.impl.AbstractPlugin: boolean removeDynamicModuleDescriptor(com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.String getKey()>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.impl.AbstractPlugin: void removeModuleDescriptor(java.lang.String)>($r2) in <com.atlassian.plugin.impl.AbstractPlugin: boolean removeDynamicModuleDescriptor(com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.impl.AbstractPlugin: void removeModuleDescriptor(java.lang.String)>
INTERFACE edge: $z0 = interfaceinvoke $r3.<java.util.Set: boolean remove(java.lang.Object)>(r1) in <com.atlassian.plugin.impl.AbstractPlugin: boolean removeDynamicModuleDescriptor(com.atlassian.plugin.ModuleDescriptor)> ==> <java.util.HashSet: boolean remove(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r3.<java.util.Set: boolean remove(java.lang.Object)>(r1) in <com.atlassian.plugin.impl.AbstractPlugin: boolean removeDynamicModuleDescriptor(com.atlassian.plugin.ModuleDescriptor)> ==> <java.util.concurrent.CopyOnWriteArraySet: boolean remove(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r3.<java.util.Set: boolean remove(java.lang.Object)>(r1) in <com.atlassian.plugin.impl.AbstractPlugin: boolean removeDynamicModuleDescriptor(com.atlassian.plugin.ModuleDescriptor)> ==> <java.util.TreeSet: boolean remove(java.lang.Object)>
INTERFACE edge: $r1 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.impl.AbstractPlugin: int compareTo(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r1 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.impl.AbstractPlugin: int compareTo(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
INTERFACE edge: $r4 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.impl.AbstractPlugin: int compareTo(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r4 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.impl.AbstractPlugin: int compareTo(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
INTERFACE edge: $r17 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.impl.AbstractPlugin: int compareTo(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r17 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.impl.AbstractPlugin: int compareTo(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
INTERFACE edge: $r8 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginInformation getPluginInformation()>() in <com.atlassian.plugin.impl.AbstractPlugin: int compareTo(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: com.atlassian.plugin.PluginInformation getPluginInformation()>
INTERFACE edge: $r8 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginInformation getPluginInformation()>() in <com.atlassian.plugin.impl.AbstractPlugin: int compareTo(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginInformation getPluginInformation()>
INTERFACE edge: $r14 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginInformation getPluginInformation()>() in <com.atlassian.plugin.impl.AbstractPlugin: int compareTo(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: com.atlassian.plugin.PluginInformation getPluginInformation()>
INTERFACE edge: $r14 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginInformation getPluginInformation()>() in <com.atlassian.plugin.impl.AbstractPlugin: int compareTo(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginInformation getPluginInformation()>
INTERFACE edge: $r13 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: java.util.Date getDateInstalled()>() in <com.atlassian.plugin.impl.AbstractPlugin: int compareTo(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.util.Date getDateInstalled()>
VIRTUAL edge: $r18 = virtualinvoke r2.<com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>() in <com.atlassian.plugin.impl.AbstractPlugin: int compareTo(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
VIRTUAL edge: $r3 = virtualinvoke r2.<com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>() in <com.atlassian.plugin.impl.AbstractPlugin: int compareTo(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
VIRTUAL edge: $r5 = virtualinvoke r2.<com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>() in <com.atlassian.plugin.impl.AbstractPlugin: int compareTo(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
VIRTUAL edge: $r16 = virtualinvoke r2.<com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>() in <com.atlassian.plugin.impl.AbstractPlugin: int compareTo(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
VIRTUAL edge: $r6 = virtualinvoke r2.<com.atlassian.plugin.impl.AbstractPlugin: com.atlassian.plugin.PluginInformation getPluginInformation()>() in <com.atlassian.plugin.impl.AbstractPlugin: int compareTo(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: com.atlassian.plugin.PluginInformation getPluginInformation()>
VIRTUAL edge: $r15 = virtualinvoke r2.<com.atlassian.plugin.impl.AbstractPlugin: com.atlassian.plugin.PluginInformation getPluginInformation()>() in <com.atlassian.plugin.impl.AbstractPlugin: int compareTo(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: com.atlassian.plugin.PluginInformation getPluginInformation()>
VIRTUAL edge: $r12 = virtualinvoke r2.<com.atlassian.plugin.impl.AbstractPlugin: java.util.Date getDateInstalled()>() in <com.atlassian.plugin.impl.AbstractPlugin: int compareTo(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.util.Date getDateInstalled()>
VIRTUAL edge: $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r5) in <com.atlassian.plugin.impl.AbstractPlugin: int compareTo(com.atlassian.plugin.Plugin)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $i3 = virtualinvoke $r16.<java.lang.String: int compareTo(java.lang.String)>($r17) in <com.atlassian.plugin.impl.AbstractPlugin: int compareTo(com.atlassian.plugin.Plugin)> ==> <java.lang.String: int compareTo(java.lang.String)>
VIRTUAL edge: $r19 = virtualinvoke $r15.<com.atlassian.plugin.PluginInformation: java.lang.String getVersion()>() in <com.atlassian.plugin.impl.AbstractPlugin: int compareTo(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.PluginInformation: java.lang.String getVersion()>
VIRTUAL edge: $r20 = virtualinvoke $r14.<com.atlassian.plugin.PluginInformation: java.lang.String getVersion()>() in <com.atlassian.plugin.impl.AbstractPlugin: int compareTo(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.PluginInformation: java.lang.String getVersion()>
SPECIAL edge: specialinvoke $r11.<com.atlassian.plugin.util.VersionStringComparator: void <init>()>() in <com.atlassian.plugin.impl.AbstractPlugin: int compareTo(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.util.VersionStringComparator: void <init>()>
VIRTUAL edge: i1 = virtualinvoke $r11.<com.atlassian.plugin.util.VersionStringComparator: int compare(java.lang.String,java.lang.String)>(r7, r9) in <com.atlassian.plugin.impl.AbstractPlugin: int compareTo(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.util.VersionStringComparator: int compare(java.lang.String,java.lang.String)>
VIRTUAL edge: $i2 = virtualinvoke $r12.<java.util.Date: int compareTo(java.util.Date)>($r13) in <com.atlassian.plugin.impl.AbstractPlugin: int compareTo(com.atlassian.plugin.Plugin)> ==> <java.util.Date: int compareTo(java.util.Date)>
SPECIAL edge: specialinvoke $r10.<com.atlassian.plugin.util.VersionStringComparator: void <init>()>() in <com.atlassian.plugin.impl.AbstractPlugin: int compareTo(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.util.VersionStringComparator: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r10.<com.atlassian.plugin.util.VersionStringComparator: int compare(java.lang.String,java.lang.String)>(r7, r9) in <com.atlassian.plugin.impl.AbstractPlugin: int compareTo(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.util.VersionStringComparator: int compare(java.lang.String,java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>() in <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String cleanVersionString(java.lang.String)> ==> <java.lang.String: java.lang.String trim()>
VIRTUAL edge: $r2 = virtualinvoke r0.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(" ", "") in <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String cleanVersionString(java.lang.String)> ==> <java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("") in <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String cleanVersionString(java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: r1 = virtualinvoke r0.<com.atlassian.plugin.impl.AbstractPlugin: com.atlassian.plugin.PluginInformation getPluginInformation()>() in <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String toString()> ==> <com.atlassian.plugin.impl.AbstractPlugin: com.atlassian.plugin.PluginInformation getPluginInformation()>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>() in <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String toString()> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String toString()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3) in <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":") in <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke r1.<com.atlassian.plugin.PluginInformation: java.lang.String getVersion()>() in <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String toString()> ==> <com.atlassian.plugin.PluginInformation: java.lang.String getVersion()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8) in <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $i0 = virtualinvoke r0.<com.atlassian.plugin.impl.AbstractPlugin: int compareTo(com.atlassian.plugin.Plugin)>($r2) in <com.atlassian.plugin.impl.AbstractPlugin: int compareTo(java.lang.Object)> ==> <com.atlassian.plugin.impl.AbstractPlugin: int compareTo(com.atlassian.plugin.Plugin)>
VIRTUAL edge: $z0 = virtualinvoke $r8.<java.lang.Boolean: boolean booleanValue()>() in <com.atlassian.plugin.impl.AbstractPlugin: boolean lambda$getPermissionsForCurrentInstallationMode$0(com.atlassian.plugin.InstallationMode,com.atlassian.plugin.PluginPermission)> ==> <java.lang.Boolean: boolean booleanValue()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.util.ClassLoaderUtils: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: r1 = virtualinvoke $r0.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>() in <com.atlassian.plugin.util.ClassLoaderUtils: java.lang.Class loadClass(java.lang.String,java.lang.Class)> ==> <java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>
VIRTUAL edge: $r5 = virtualinvoke r1.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r2) in <com.atlassian.plugin.util.ClassLoaderUtils: java.lang.Class loadClass(java.lang.String,java.lang.Class)> ==> <com.atlassian.plugin.util.ChainingClassLoader: java.lang.Class loadClass(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke r1.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r2) in <com.atlassian.plugin.util.ClassLoaderUtils: java.lang.Class loadClass(java.lang.String,java.lang.Class)> ==> <java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke r1.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r2) in <com.atlassian.plugin.util.ClassLoaderUtils: java.lang.Class loadClass(java.lang.String,java.lang.Class)> ==> <com.atlassian.plugin.classloader.DelegationClassLoader: java.lang.Class loadClass(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.Class: java.lang.ClassLoader getClassLoader()>() in <com.atlassian.plugin.util.ClassLoaderUtils: java.lang.Class loadClass(java.lang.String,java.lang.Class)> ==> <java.lang.Class: java.lang.ClassLoader getClassLoader()>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r2) in <com.atlassian.plugin.util.ClassLoaderUtils: java.lang.Class loadClass(java.lang.String,java.lang.Class)> ==> <java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r2) in <com.atlassian.plugin.util.ClassLoaderUtils: java.lang.Class loadClass(java.lang.String,java.lang.Class)> ==> <com.atlassian.plugin.util.ChainingClassLoader: java.lang.Class loadClass(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r2) in <com.atlassian.plugin.util.ClassLoaderUtils: java.lang.Class loadClass(java.lang.String,java.lang.Class)> ==> <com.atlassian.plugin.classloader.DelegationClassLoader: java.lang.Class loadClass(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke r9.<java.lang.Class: java.lang.ClassLoader getClassLoader()>() in <com.atlassian.plugin.util.ClassLoaderUtils: java.lang.Class loadClass(java.lang.String,java.lang.Class)> ==> <java.lang.Class: java.lang.ClassLoader getClassLoader()>
VIRTUAL edge: $r11 = virtualinvoke r9.<java.lang.Class: java.lang.ClassLoader getClassLoader()>() in <com.atlassian.plugin.util.ClassLoaderUtils: java.lang.Class loadClass(java.lang.String,java.lang.Class)> ==> <java.lang.Class: java.lang.ClassLoader getClassLoader()>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r2) in <com.atlassian.plugin.util.ClassLoaderUtils: java.lang.Class loadClass(java.lang.String,java.lang.Class)> ==> <java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r2) in <com.atlassian.plugin.util.ClassLoaderUtils: java.lang.Class loadClass(java.lang.String,java.lang.Class)> ==> <com.atlassian.plugin.util.ChainingClassLoader: java.lang.Class loadClass(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r2) in <com.atlassian.plugin.util.ClassLoaderUtils: java.lang.Class loadClass(java.lang.String,java.lang.Class)> ==> <com.atlassian.plugin.classloader.DelegationClassLoader: java.lang.Class loadClass(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>() in <com.atlassian.plugin.util.ClassLoaderUtils: java.net.URL getResource(java.lang.String,java.lang.Class)> ==> <java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>() in <com.atlassian.plugin.util.ClassLoaderUtils: java.net.URL getResource(java.lang.String,java.lang.Class)> ==> <java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>
VIRTUAL edge: r9 = virtualinvoke $r8.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>(r4) in <com.atlassian.plugin.util.ClassLoaderUtils: java.net.URL getResource(java.lang.String,java.lang.Class)> ==> <com.atlassian.plugin.classloader.PluginClassLoader: java.net.URL getResource(java.lang.String)>
VIRTUAL edge: r9 = virtualinvoke $r8.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>(r4) in <com.atlassian.plugin.util.ClassLoaderUtils: java.net.URL getResource(java.lang.String,java.lang.Class)> ==> <java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>
VIRTUAL edge: r9 = virtualinvoke $r8.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>(r4) in <com.atlassian.plugin.util.ClassLoaderUtils: java.net.URL getResource(java.lang.String,java.lang.Class)> ==> <com.atlassian.plugin.util.ChainingClassLoader: java.net.URL getResource(java.lang.String)>
VIRTUAL edge: r9 = virtualinvoke $r8.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>(r4) in <com.atlassian.plugin.util.ClassLoaderUtils: java.net.URL getResource(java.lang.String,java.lang.Class)> ==> <com.atlassian.plugin.classloader.DelegationClassLoader: java.net.URL getResource(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.ClassLoader getClassLoader()>() in <com.atlassian.plugin.util.ClassLoaderUtils: java.net.URL getResource(java.lang.String,java.lang.Class)> ==> <java.lang.Class: java.lang.ClassLoader getClassLoader()>
VIRTUAL edge: r9 = virtualinvoke $r6.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>(r4) in <com.atlassian.plugin.util.ClassLoaderUtils: java.net.URL getResource(java.lang.String,java.lang.Class)> ==> <com.atlassian.plugin.classloader.PluginClassLoader: java.net.URL getResource(java.lang.String)>
VIRTUAL edge: r9 = virtualinvoke $r6.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>(r4) in <com.atlassian.plugin.util.ClassLoaderUtils: java.net.URL getResource(java.lang.String,java.lang.Class)> ==> <java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>
VIRTUAL edge: r9 = virtualinvoke $r6.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>(r4) in <com.atlassian.plugin.util.ClassLoaderUtils: java.net.URL getResource(java.lang.String,java.lang.Class)> ==> <com.atlassian.plugin.util.ChainingClassLoader: java.net.URL getResource(java.lang.String)>
VIRTUAL edge: r9 = virtualinvoke $r6.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>(r4) in <com.atlassian.plugin.util.ClassLoaderUtils: java.net.URL getResource(java.lang.String,java.lang.Class)> ==> <com.atlassian.plugin.classloader.DelegationClassLoader: java.net.URL getResource(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r2.<java.lang.Class: java.lang.ClassLoader getClassLoader()>() in <com.atlassian.plugin.util.ClassLoaderUtils: java.net.URL getResource(java.lang.String,java.lang.Class)> ==> <java.lang.Class: java.lang.ClassLoader getClassLoader()>
VIRTUAL edge: r9 = virtualinvoke $r3.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>(r4) in <com.atlassian.plugin.util.ClassLoaderUtils: java.net.URL getResource(java.lang.String,java.lang.Class)> ==> <com.atlassian.plugin.classloader.PluginClassLoader: java.net.URL getResource(java.lang.String)>
VIRTUAL edge: r9 = virtualinvoke $r3.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>(r4) in <com.atlassian.plugin.util.ClassLoaderUtils: java.net.URL getResource(java.lang.String,java.lang.Class)> ==> <java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>
VIRTUAL edge: r9 = virtualinvoke $r3.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>(r4) in <com.atlassian.plugin.util.ClassLoaderUtils: java.net.URL getResource(java.lang.String,java.lang.Class)> ==> <com.atlassian.plugin.util.ChainingClassLoader: java.net.URL getResource(java.lang.String)>
VIRTUAL edge: r9 = virtualinvoke $r3.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>(r4) in <com.atlassian.plugin.util.ClassLoaderUtils: java.net.URL getResource(java.lang.String,java.lang.Class)> ==> <com.atlassian.plugin.classloader.DelegationClassLoader: java.net.URL getResource(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>() in <com.atlassian.plugin.util.ClassLoaderUtils: java.util.Enumeration getResources(java.lang.String,java.lang.Class)> ==> <java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>() in <com.atlassian.plugin.util.ClassLoaderUtils: java.util.Enumeration getResources(java.lang.String,java.lang.Class)> ==> <java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>
VIRTUAL edge: r9 = virtualinvoke $r8.<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>(r4) in <com.atlassian.plugin.util.ClassLoaderUtils: java.util.Enumeration getResources(java.lang.String,java.lang.Class)> ==> <java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>
VIRTUAL edge: r9 = virtualinvoke $r8.<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>(r4) in <com.atlassian.plugin.util.ClassLoaderUtils: java.util.Enumeration getResources(java.lang.String,java.lang.Class)> ==> <com.atlassian.plugin.util.ChainingClassLoader: java.util.Enumeration getResources(java.lang.String)>
VIRTUAL edge: r9 = virtualinvoke $r8.<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>(r4) in <com.atlassian.plugin.util.ClassLoaderUtils: java.util.Enumeration getResources(java.lang.String,java.lang.Class)> ==> <com.atlassian.plugin.classloader.DelegationClassLoader: java.util.Enumeration getResources(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.ClassLoader getClassLoader()>() in <com.atlassian.plugin.util.ClassLoaderUtils: java.util.Enumeration getResources(java.lang.String,java.lang.Class)> ==> <java.lang.Class: java.lang.ClassLoader getClassLoader()>
VIRTUAL edge: r9 = virtualinvoke $r6.<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>(r4) in <com.atlassian.plugin.util.ClassLoaderUtils: java.util.Enumeration getResources(java.lang.String,java.lang.Class)> ==> <java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>
VIRTUAL edge: r9 = virtualinvoke $r6.<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>(r4) in <com.atlassian.plugin.util.ClassLoaderUtils: java.util.Enumeration getResources(java.lang.String,java.lang.Class)> ==> <com.atlassian.plugin.util.ChainingClassLoader: java.util.Enumeration getResources(java.lang.String)>
VIRTUAL edge: r9 = virtualinvoke $r6.<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>(r4) in <com.atlassian.plugin.util.ClassLoaderUtils: java.util.Enumeration getResources(java.lang.String,java.lang.Class)> ==> <com.atlassian.plugin.classloader.DelegationClassLoader: java.util.Enumeration getResources(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r2.<java.lang.Class: java.lang.ClassLoader getClassLoader()>() in <com.atlassian.plugin.util.ClassLoaderUtils: java.util.Enumeration getResources(java.lang.String,java.lang.Class)> ==> <java.lang.Class: java.lang.ClassLoader getClassLoader()>
VIRTUAL edge: r9 = virtualinvoke $r3.<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>(r4) in <com.atlassian.plugin.util.ClassLoaderUtils: java.util.Enumeration getResources(java.lang.String,java.lang.Class)> ==> <java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>
VIRTUAL edge: r9 = virtualinvoke $r3.<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>(r4) in <com.atlassian.plugin.util.ClassLoaderUtils: java.util.Enumeration getResources(java.lang.String,java.lang.Class)> ==> <com.atlassian.plugin.util.ChainingClassLoader: java.util.Enumeration getResources(java.lang.String)>
VIRTUAL edge: r9 = virtualinvoke $r3.<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>(r4) in <com.atlassian.plugin.util.ClassLoaderUtils: java.util.Enumeration getResources(java.lang.String,java.lang.Class)> ==> <com.atlassian.plugin.classloader.DelegationClassLoader: java.util.Enumeration getResources(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.net.URL: java.io.InputStream openStream()>() in <com.atlassian.plugin.util.ClassLoaderUtils: java.io.InputStream getResourceAsStream(java.lang.String,java.lang.Class)> ==> <java.net.URL: java.io.InputStream openStream()>
VIRTUAL edge: virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("ClassLoaderUtils.printClassLoader") in <com.atlassian.plugin.util.ClassLoaderUtils: void printClassLoader()> ==> <java.io.PrintStream: void println(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>() in <com.atlassian.plugin.util.ClassLoaderUtils: void printClassLoader()> ==> <java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.util.ClassLoaderUtils: void printClassLoader(java.lang.ClassLoader)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ClassLoaderUtils.printClassLoader(cl = ") in <com.atlassian.plugin.util.ClassLoaderUtils: void printClassLoader(java.lang.ClassLoader)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3) in <com.atlassian.plugin.util.ClassLoaderUtils: void printClassLoader(java.lang.ClassLoader)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")") in <com.atlassian.plugin.util.ClassLoaderUtils: void printClassLoader(java.lang.ClassLoader)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.util.ClassLoaderUtils: void printClassLoader(java.lang.ClassLoader)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r6) in <com.atlassian.plugin.util.ClassLoaderUtils: void printClassLoader(java.lang.ClassLoader)> ==> <java.io.PrintStream: void println(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke r3.<java.lang.ClassLoader: java.lang.ClassLoader getParent()>() in <com.atlassian.plugin.util.ClassLoaderUtils: void printClassLoader(java.lang.ClassLoader)> ==> <java.lang.ClassLoader: java.lang.ClassLoader getParent()>
INTERFACE edge: r3 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.util.ModuleRestricts: boolean isValidFor(java.util.Set,com.atlassian.plugin.InstallationMode)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.util.ModuleRestricts: boolean isValidFor(java.util.Set,com.atlassian.plugin.InstallationMode)> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.util.ModuleRestricts: boolean isValidFor(java.util.Set,com.atlassian.plugin.InstallationMode)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke $r6.<com.atlassian.plugin.util.ModuleRestricts$RestrictMatchesApplication: void <init>(com.atlassian.plugin.Application,com.atlassian.plugin.InstallationMode)>(r5, r7) in <com.atlassian.plugin.util.ModuleRestricts: boolean isValidFor(java.util.Set,com.atlassian.plugin.InstallationMode)> ==> <com.atlassian.plugin.util.ModuleRestricts$RestrictMatchesApplication: void <init>(com.atlassian.plugin.Application,com.atlassian.plugin.InstallationMode)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>() in <com.atlassian.plugin.util.ModuleRestricts: java.lang.String toString()> ==> <java.util.AbstractCollection: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>() in <com.atlassian.plugin.util.ModuleRestricts: java.lang.String toString()> ==> <java.lang.Object: java.lang.String toString()>
SPECIAL edge: specialinvoke $r2.<com.atlassian.plugin.util.ModuleRestricts$ModuleRestrict: void <init>(java.lang.String,com.atlassian.plugin.InstallationMode,com.atlassian.plugin.util.VersionRange)>(r1, $r5, $r6) in <com.atlassian.plugin.util.ModuleRestricts: com.atlassian.plugin.util.ModuleRestricts$ModuleRestrict lambda$parseApplicationsFromRestrictElements$0(org.dom4j.Element)> ==> <com.atlassian.plugin.util.ModuleRestricts$ModuleRestrict: void <init>(java.lang.String,com.atlassian.plugin.InstallationMode,com.atlassian.plugin.util.VersionRange)>
STATIC edge: $r2 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "application") in <com.atlassian.plugin.util.ModuleRestricts$ModuleRestrict: void <init>(java.lang.String,com.atlassian.plugin.InstallationMode,com.atlassian.plugin.util.VersionRange)> ==> <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>
STATIC edge: $r6 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r5) in <com.atlassian.plugin.util.ModuleRestricts$ModuleRestrict: void <init>(java.lang.String,com.atlassian.plugin.InstallationMode,com.atlassian.plugin.util.VersionRange)> ==> <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.util.ModuleRestricts$RestrictMatchesApplication: void <init>(com.atlassian.plugin.Application,com.atlassian.plugin.InstallationMode)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4) in <com.atlassian.plugin.util.ModuleRestricts$RestrictMatchesApplication: boolean apply(com.atlassian.plugin.util.ModuleRestricts$ModuleRestrict)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: $z1 = specialinvoke r1.<com.atlassian.plugin.util.ModuleRestricts$RestrictMatchesApplication: boolean isInstallModeValid(com.atlassian.plugin.InstallationMode)>($r5) in <com.atlassian.plugin.util.ModuleRestricts$RestrictMatchesApplication: boolean apply(com.atlassian.plugin.util.ModuleRestricts$ModuleRestrict)> ==> <com.atlassian.plugin.util.ModuleRestricts$RestrictMatchesApplication: boolean isInstallModeValid(com.atlassian.plugin.InstallationMode)>
VIRTUAL edge: $z2 = virtualinvoke $r7.<com.atlassian.plugin.util.VersionRange: boolean isInRange(java.lang.String)>($r8) in <com.atlassian.plugin.util.ModuleRestricts$RestrictMatchesApplication: boolean apply(com.atlassian.plugin.util.ModuleRestricts$ModuleRestrict)> ==> <com.atlassian.plugin.util.VersionRange$EmptyVersionRange: boolean isInRange(java.lang.String)>
VIRTUAL edge: $z2 = virtualinvoke $r7.<com.atlassian.plugin.util.VersionRange: boolean isInRange(java.lang.String)>($r8) in <com.atlassian.plugin.util.ModuleRestricts$RestrictMatchesApplication: boolean apply(com.atlassian.plugin.util.ModuleRestricts$ModuleRestrict)> ==> <com.atlassian.plugin.util.VersionRange$AllVersionRange: boolean isInRange(java.lang.String)>
VIRTUAL edge: $z2 = virtualinvoke $r7.<com.atlassian.plugin.util.VersionRange: boolean isInRange(java.lang.String)>($r8) in <com.atlassian.plugin.util.ModuleRestricts$RestrictMatchesApplication: boolean apply(com.atlassian.plugin.util.ModuleRestricts$ModuleRestrict)> ==> <com.atlassian.plugin.util.VersionRange$ActualVersionRange: boolean isInRange(java.lang.String)>
VIRTUAL edge: $z2 = virtualinvoke $r7.<com.atlassian.plugin.util.VersionRange: boolean isInRange(java.lang.String)>($r8) in <com.atlassian.plugin.util.ModuleRestricts$RestrictMatchesApplication: boolean apply(com.atlassian.plugin.util.ModuleRestricts$ModuleRestrict)> ==> <com.atlassian.plugin.util.VersionRange$SingleVersionRange: boolean isInRange(java.lang.String)>
VIRTUAL edge: $z2 = virtualinvoke $r7.<com.atlassian.plugin.util.VersionRange: boolean isInRange(java.lang.String)>($r8) in <com.atlassian.plugin.util.ModuleRestricts$RestrictMatchesApplication: boolean apply(com.atlassian.plugin.util.ModuleRestricts$ModuleRestrict)> ==> <com.atlassian.plugin.util.VersionRange$RightUnboundedVersionRange: boolean isInRange(java.lang.String)>
VIRTUAL edge: $z2 = virtualinvoke $r7.<com.atlassian.plugin.util.VersionRange: boolean isInRange(java.lang.String)>($r8) in <com.atlassian.plugin.util.ModuleRestricts$RestrictMatchesApplication: boolean apply(com.atlassian.plugin.util.ModuleRestricts$ModuleRestrict)> ==> <com.atlassian.plugin.util.VersionRange$OrVersionRange: boolean isInRange(java.lang.String)>
VIRTUAL edge: $z2 = virtualinvoke $r7.<com.atlassian.plugin.util.VersionRange: boolean isInRange(java.lang.String)>($r8) in <com.atlassian.plugin.util.ModuleRestricts$RestrictMatchesApplication: boolean apply(com.atlassian.plugin.util.ModuleRestricts$ModuleRestrict)> ==> <com.atlassian.plugin.util.VersionRange$LeftUnboundedVersionRange: boolean isInRange(java.lang.String)>
CLINIT edge: $z1 = staticinvoke <com.atlassian.plugin.util.VersionRange: boolean access$900(boolean,java.lang.String,java.lang.String)>($z0, $r2, r1) in <com.atlassian.plugin.util.VersionRange$ActualVersionRange: boolean isInRange(java.lang.String)> ==> <com.atlassian.plugin.util.VersionRange: void <clinit>()>
STATIC edge: $z3 = staticinvoke <com.atlassian.plugin.util.VersionRange: boolean access$1000(java.lang.String,java.lang.String,boolean)>(r1, $r3, $z2) in <com.atlassian.plugin.util.VersionRange$ActualVersionRange: boolean isInRange(java.lang.String)> ==> <com.atlassian.plugin.util.VersionRange: boolean access$1000(java.lang.String,java.lang.String,boolean)>
STATIC edge: $z1 = staticinvoke <com.atlassian.plugin.util.VersionRange: boolean access$900(boolean,java.lang.String,java.lang.String)>($z0, $r2, r1) in <com.atlassian.plugin.util.VersionRange$ActualVersionRange: boolean isInRange(java.lang.String)> ==> <com.atlassian.plugin.util.VersionRange: boolean access$900(boolean,java.lang.String,java.lang.String)>
CLINIT edge: $r0 = staticinvoke <com.atlassian.plugin.util.VersionRange: java.util.Comparator access$500()>() in <com.atlassian.plugin.util.VersionRange$SingleVersionRange: boolean isInRange(java.lang.String)> ==> <com.atlassian.plugin.util.VersionRange: void <clinit>()>
STATIC edge: $r0 = staticinvoke <com.atlassian.plugin.util.VersionRange: java.util.Comparator access$500()>() in <com.atlassian.plugin.util.VersionRange$SingleVersionRange: boolean isInRange(java.lang.String)> ==> <com.atlassian.plugin.util.VersionRange: java.util.Comparator access$500()>
CLINIT edge: $z1 = staticinvoke <com.atlassian.plugin.util.VersionRange: boolean access$900(boolean,java.lang.String,java.lang.String)>($z0, $r2, r1) in <com.atlassian.plugin.util.VersionRange$RightUnboundedVersionRange: boolean isInRange(java.lang.String)> ==> <com.atlassian.plugin.util.VersionRange: void <clinit>()>
STATIC edge: $z1 = staticinvoke <com.atlassian.plugin.util.VersionRange: boolean access$900(boolean,java.lang.String,java.lang.String)>($z0, $r2, r1) in <com.atlassian.plugin.util.VersionRange$RightUnboundedVersionRange: boolean isInRange(java.lang.String)> ==> <com.atlassian.plugin.util.VersionRange: boolean access$900(boolean,java.lang.String,java.lang.String)>
CLINIT edge: $z1 = staticinvoke <com.atlassian.plugin.util.VersionRange: boolean access$1000(java.lang.String,java.lang.String,boolean)>(r0, $r2, $z0) in <com.atlassian.plugin.util.VersionRange$LeftUnboundedVersionRange: boolean isInRange(java.lang.String)> ==> <com.atlassian.plugin.util.VersionRange: void <clinit>()>
STATIC edge: $z1 = staticinvoke <com.atlassian.plugin.util.VersionRange: boolean access$1000(java.lang.String,java.lang.String,boolean)>(r0, $r2, $z0) in <com.atlassian.plugin.util.VersionRange$LeftUnboundedVersionRange: boolean isInRange(java.lang.String)> ==> <com.atlassian.plugin.util.VersionRange: boolean access$1000(java.lang.String,java.lang.String,boolean)>
CLINIT edge: $z1 = staticinvoke <com.atlassian.plugin.util.VersionRange: boolean isLowerThan(java.lang.String,java.lang.String,boolean)>(r0, r1, z0) in <com.atlassian.plugin.util.VersionRange: boolean access$1000(java.lang.String,java.lang.String,boolean)> ==> <com.atlassian.plugin.util.VersionRange: void <clinit>()>
STATIC edge: $z1 = staticinvoke <com.atlassian.plugin.util.VersionRange: boolean isLowerThan(java.lang.String,java.lang.String,boolean)>(r0, r1, z0) in <com.atlassian.plugin.util.VersionRange: boolean access$1000(java.lang.String,java.lang.String,boolean)> ==> <com.atlassian.plugin.util.VersionRange: boolean isLowerThan(java.lang.String,java.lang.String,boolean)>
CLINIT edge: $z1 = staticinvoke <com.atlassian.plugin.util.VersionRange: boolean isGreaterThan(boolean,java.lang.String,java.lang.String)>(z0, r0, r1) in <com.atlassian.plugin.util.VersionRange: boolean access$900(boolean,java.lang.String,java.lang.String)> ==> <com.atlassian.plugin.util.VersionRange: void <clinit>()>
STATIC edge: $z1 = staticinvoke <com.atlassian.plugin.util.VersionRange: boolean isGreaterThan(boolean,java.lang.String,java.lang.String)>(z0, r0, r1) in <com.atlassian.plugin.util.VersionRange: boolean access$900(boolean,java.lang.String,java.lang.String)> ==> <com.atlassian.plugin.util.VersionRange: boolean isGreaterThan(boolean,java.lang.String,java.lang.String)>
CLINIT edge: $r0 = staticinvoke <com.atlassian.plugin.util.VersionRange: java.util.Comparator newVersionComparator()>() in <com.atlassian.plugin.util.VersionRange: java.util.Comparator access$500()> ==> <com.atlassian.plugin.util.VersionRange: void <clinit>()>
STATIC edge: $r0 = staticinvoke <com.atlassian.plugin.util.VersionRange: java.util.Comparator newVersionComparator()>() in <com.atlassian.plugin.util.VersionRange: java.util.Comparator access$500()> ==> <com.atlassian.plugin.util.VersionRange: java.util.Comparator newVersionComparator()>
CLINIT edge: $r0 = staticinvoke <com.atlassian.plugin.util.VersionRange: java.util.Comparator newVersionComparator()>() in <com.atlassian.plugin.util.VersionRange: boolean isLowerThan(java.lang.String,java.lang.String,boolean)> ==> <com.atlassian.plugin.util.VersionRange: void <clinit>()>
STATIC edge: $r0 = staticinvoke <com.atlassian.plugin.util.VersionRange: java.util.Comparator newVersionComparator()>() in <com.atlassian.plugin.util.VersionRange: boolean isLowerThan(java.lang.String,java.lang.String,boolean)> ==> <com.atlassian.plugin.util.VersionRange: java.util.Comparator newVersionComparator()>
CLINIT edge: $r0 = staticinvoke <com.atlassian.plugin.util.VersionRange: java.util.Comparator newVersionComparator()>() in <com.atlassian.plugin.util.VersionRange: boolean isGreaterThan(boolean,java.lang.String,java.lang.String)> ==> <com.atlassian.plugin.util.VersionRange: void <clinit>()>
STATIC edge: $r0 = staticinvoke <com.atlassian.plugin.util.VersionRange: java.util.Comparator newVersionComparator()>() in <com.atlassian.plugin.util.VersionRange: boolean isGreaterThan(boolean,java.lang.String,java.lang.String)> ==> <com.atlassian.plugin.util.VersionRange: java.util.Comparator newVersionComparator()>
CLINIT edge: $r0 = new com.atlassian.plugin.util.VersionStringComparator in <com.atlassian.plugin.util.VersionRange: java.util.Comparator newVersionComparator()> ==> <com.atlassian.plugin.util.VersionStringComparator: void <clinit>()>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.atlassian.plugin.util.ModuleRestricts$RestrictMatchesApplication: boolean apply(com.atlassian.plugin.util.ModuleRestricts$ModuleRestrict)>($r2) in <com.atlassian.plugin.util.ModuleRestricts$RestrictMatchesApplication: boolean apply(java.lang.Object)> ==> <com.atlassian.plugin.util.ModuleRestricts$RestrictMatchesApplication: boolean apply(com.atlassian.plugin.util.ModuleRestricts$ModuleRestrict)>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.atlassian.plugin.util.ModuleRestricts$IsNotBlankPredicate: boolean apply(java.lang.String)>($r2) in <com.atlassian.plugin.util.ModuleRestricts$IsNotBlankPredicate: boolean apply(java.lang.Object)> ==> <com.atlassian.plugin.util.ModuleRestricts$IsNotBlankPredicate: boolean apply(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.net.URLStreamHandler: void <init>()>() in <com.atlassian.plugin.url.InnerJarURLStreamHandler: void <init>()> ==> <java.net.URLStreamHandler: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.url.InnerJarURLConnection: void <init>(java.net.URL)>(r1) in <com.atlassian.plugin.url.InnerJarURLStreamHandler: java.net.URLConnection openConnection(java.net.URL)> ==> <com.atlassian.plugin.url.InnerJarURLConnection: void <init>(java.net.URL)>
VIRTUAL edge: r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i0, i1) in <com.atlassian.plugin.url.InnerJarURLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)> ==> <java.lang.String: java.lang.String substring(int,int)>
VIRTUAL edge: $c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(0) in <com.atlassian.plugin.url.InnerJarURLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)> ==> <java.lang.String: char charAt(int)>
VIRTUAL edge: $c3 = virtualinvoke r1.<java.lang.String: char charAt(int)>(0) in <com.atlassian.plugin.url.InnerJarURLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)> ==> <java.lang.String: char charAt(int)>
VIRTUAL edge: r19 = virtualinvoke r2.<java.net.URL: java.lang.String getFile()>() in <com.atlassian.plugin.url.InnerJarURLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)> ==> <java.net.URL: java.lang.String getFile()>
VIRTUAL edge: r20 = virtualinvoke r2.<java.net.URL: java.lang.String getFile()>() in <com.atlassian.plugin.url.InnerJarURLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)> ==> <java.net.URL: java.lang.String getFile()>
VIRTUAL edge: i5 = virtualinvoke r19.<java.lang.String: int lastIndexOf(int)>(33) in <com.atlassian.plugin.url.InnerJarURLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)> ==> <java.lang.String: int lastIndexOf(int)>
VIRTUAL edge: $r12 = virtualinvoke r19.<java.lang.String: java.lang.String substring(int,int)>(0, i5) in <com.atlassian.plugin.url.InnerJarURLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)> ==> <java.lang.String: java.lang.String substring(int,int)>
SPECIAL edge: specialinvoke $r15.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.url.InnerJarURLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19) in <com.atlassian.plugin.url.InnerJarURLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <com.atlassian.plugin.url.InnerJarURLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.url.InnerJarURLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r11.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.url.InnerJarURLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12) in <com.atlassian.plugin.url.InnerJarURLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <com.atlassian.plugin.url.InnerJarURLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r18 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.url.InnerJarURLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: i6 = virtualinvoke r20.<java.lang.String: int lastIndexOf(int)>(47) in <com.atlassian.plugin.url.InnerJarURLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)> ==> <java.lang.String: int lastIndexOf(int)>
VIRTUAL edge: $r5 = virtualinvoke r20.<java.lang.String: java.lang.String substring(int,int)>(0, $i4) in <com.atlassian.plugin.url.InnerJarURLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)> ==> <java.lang.String: java.lang.String substring(int,int)>
SPECIAL edge: specialinvoke $r8.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.url.InnerJarURLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/") in <com.atlassian.plugin.url.InnerJarURLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <com.atlassian.plugin.url.InnerJarURLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r18 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.url.InnerJarURLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r4.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.url.InnerJarURLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5) in <com.atlassian.plugin.url.InnerJarURLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <com.atlassian.plugin.url.InnerJarURLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r18 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.url.InnerJarURLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke r3.<com.atlassian.plugin.url.InnerJarURLStreamHandler: void setURL(java.net.URL,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r2, "jar", "", 0, null, null, r18, null, null) in <com.atlassian.plugin.url.InnerJarURLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)> ==> <java.net.URLStreamHandler: void setURL(java.net.URL,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.net.JarURLConnection: void <init>(java.net.URL)>($r1) in <com.atlassian.plugin.url.InnerJarURLConnection: void <init>(java.net.URL)> ==> <java.net.JarURLConnection: void <init>(java.net.URL)>
VIRTUAL edge: r2 = virtualinvoke $r1.<java.net.URL: java.lang.String getPath()>() in <com.atlassian.plugin.url.InnerJarURLConnection: void <init>(java.net.URL)> ==> <java.net.URL: java.lang.String getPath()>
VIRTUAL edge: $r7 = virtualinvoke $r1.<java.net.URL: java.lang.String toExternalForm()>() in <com.atlassian.plugin.url.InnerJarURLConnection: void <init>(java.net.URL)> ==> <java.net.URL: java.lang.String toExternalForm()>
VIRTUAL edge: i0 = virtualinvoke r2.<java.lang.String: int indexOf(int)>(33) in <com.atlassian.plugin.url.InnerJarURLConnection: void <init>(java.net.URL)> ==> <java.lang.String: int indexOf(int)>
VIRTUAL edge: r3 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, i0) in <com.atlassian.plugin.url.InnerJarURLConnection: void <init>(java.net.URL)> ==> <java.lang.String: java.lang.String substring(int,int)>
VIRTUAL edge: $i1 = virtualinvoke r2.<java.lang.String: int length()>() in <com.atlassian.plugin.url.InnerJarURLConnection: void <init>(java.net.URL)> ==> <java.lang.String: int length()>
VIRTUAL edge: $c4 = virtualinvoke r2.<java.lang.String: char charAt(int)>($i3) in <com.atlassian.plugin.url.InnerJarURLConnection: void <init>(java.net.URL)> ==> <java.lang.String: char charAt(int)>
VIRTUAL edge: $i6 = virtualinvoke r2.<java.lang.String: int length()>() in <com.atlassian.plugin.url.InnerJarURLConnection: void <init>(java.net.URL)> ==> <java.lang.String: int length()>
VIRTUAL edge: r21 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>($i7) in <com.atlassian.plugin.url.InnerJarURLConnection: void <init>(java.net.URL)> ==> <java.lang.String: java.lang.String substring(int)>
SPECIAL edge: specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.url.InnerJarURLConnection: void <init>(java.net.URL)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No !/ in url: ") in <com.atlassian.plugin.url.InnerJarURLConnection: void <init>(java.net.URL)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) in <com.atlassian.plugin.url.InnerJarURLConnection: void <init>(java.net.URL)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.url.InnerJarURLConnection: void <init>(java.net.URL)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r4.<java.net.MalformedURLException: void <init>(java.lang.String)>($r9) in <com.atlassian.plugin.url.InnerJarURLConnection: void <init>(java.net.URL)> ==> <java.net.MalformedURLException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r10.<java.util.ArrayList: void <init>()>() in <com.atlassian.plugin.url.InnerJarURLConnection: void <init>(java.net.URL)> ==> <java.util.ArrayList: void <init>()>
INTERFACE edge: interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r18) in <com.atlassian.plugin.url.InnerJarURLConnection: void <init>(java.net.URL)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: $r15 = interfaceinvoke $r10.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r14) in <com.atlassian.plugin.url.InnerJarURLConnection: void <init>(java.net.URL)> ==> <java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>
SPECIAL edge: specialinvoke $r12.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r21, "!") in <com.atlassian.plugin.url.InnerJarURLConnection: void <init>(java.net.URL)> ==> <java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>
VIRTUAL edge: $z1 = virtualinvoke $r12.<java.util.StringTokenizer: boolean hasMoreTokens()>() in <com.atlassian.plugin.url.InnerJarURLConnection: void <init>(java.net.URL)> ==> <java.util.StringTokenizer: boolean hasMoreTokens()>
VIRTUAL edge: $r18 = virtualinvoke $r12.<java.util.StringTokenizer: java.lang.String nextToken()>() in <com.atlassian.plugin.url.InnerJarURLConnection: void <init>(java.net.URL)> ==> <java.util.StringTokenizer: java.lang.String nextToken()>
SPECIAL edge: specialinvoke $r17.<java.net.URL: void <init>(java.lang.String)>(r3) in <com.atlassian.plugin.url.InnerJarURLConnection: void <init>(java.net.URL)> ==> <java.net.URL: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.url.InnerJarURLConnection: void setupBaseResourceInputStream()>() in <com.atlassian.plugin.url.InnerJarURLConnection: void connect()> ==> <com.atlassian.plugin.url.InnerJarURLConnection: void setupBaseResourceInputStream()>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.url.InnerJarURLConnection: void setupPathedInputStream()>() in <com.atlassian.plugin.url.InnerJarURLConnection: void connect()> ==> <com.atlassian.plugin.url.InnerJarURLConnection: void setupPathedInputStream()>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.url.InnerJarURLConnection: void connect()>() in <com.atlassian.plugin.url.InnerJarURLConnection: java.io.InputStream getInputStream()> ==> <com.atlassian.plugin.url.InnerJarURLConnection: void connect()>
VIRTUAL edge: r4 = virtualinvoke $r1.<java.net.URL: java.lang.String toExternalForm()>() in <com.atlassian.plugin.url.InnerJarURLConnection: java.util.jar.JarFile getJarFile()> ==> <java.net.URL: java.lang.String toExternalForm()>
VIRTUAL edge: $z0 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>("file:/") in <com.atlassian.plugin.url.InnerJarURLConnection: java.util.jar.JarFile getJarFile()> ==> <java.lang.String: boolean startsWith(java.lang.String)>
VIRTUAL edge: r4 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int)>(6) in <com.atlassian.plugin.url.InnerJarURLConnection: java.util.jar.JarFile getJarFile()> ==> <java.lang.String: java.lang.String substring(int)>
SPECIAL edge: specialinvoke $r2.<java.util.jar.JarFile: void <init>(java.lang.String)>($r3) in <com.atlassian.plugin.url.InnerJarURLConnection: java.util.jar.JarFile getJarFile()> ==> <java.util.jar.JarFile: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.util.FileUtils: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.util.zip.UrlUnzipper: void <init>(java.net.URL,java.io.File)>(r1, r2) in <com.atlassian.plugin.util.FileUtils: void conditionallyExtractZipFile(java.net.URL,java.io.File)> ==> <com.atlassian.plugin.util.zip.UrlUnzipper: void <init>(java.net.URL,java.io.File)>
VIRTUAL edge: virtualinvoke $r0.<com.atlassian.plugin.util.zip.UrlUnzipper: void conditionalUnzip()>() in <com.atlassian.plugin.util.FileUtils: void conditionallyExtractZipFile(java.net.URL,java.io.File)> ==> <com.atlassian.plugin.util.zip.AbstractUnzipper: void conditionalUnzip()>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.util.zip.AbstractUnzipper: void <init>()>() in <com.atlassian.plugin.util.zip.UrlUnzipper: void <init>(java.net.URL,java.io.File)> ==> <com.atlassian.plugin.util.zip.AbstractUnzipper: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.net.URL: java.io.InputStream openStream()>() in <com.atlassian.plugin.util.zip.UrlUnzipper: void unzip()> ==> <java.net.URL: java.io.InputStream openStream()>
SPECIAL edge: specialinvoke $r0.<java.util.zip.ZipInputStream: void <init>(java.io.InputStream)>($r3) in <com.atlassian.plugin.util.zip.UrlUnzipper: void unzip()> ==> <java.util.zip.ZipInputStream: void <init>(java.io.InputStream)>
VIRTUAL edge: $r5 = virtualinvoke $r0.<java.util.zip.ZipInputStream: java.util.zip.ZipEntry getNextEntry()>() in <com.atlassian.plugin.util.zip.UrlUnzipper: void unzip()> ==> <java.util.zip.ZipInputStream: java.util.zip.ZipEntry getNextEntry()>
VIRTUAL edge: $r5 = virtualinvoke $r0.<java.util.zip.ZipInputStream: java.util.zip.ZipEntry getNextEntry()>() in <com.atlassian.plugin.util.zip.UrlUnzipper: void unzip()> ==> <java.util.jar.JarInputStream: java.util.zip.ZipEntry getNextEntry()>
VIRTUAL edge: virtualinvoke $r0.<java.util.zip.ZipInputStream: void close()>() in <com.atlassian.plugin.util.zip.UrlUnzipper: void unzip()> ==> <java.util.zip.ZipInputStream: void close()>
VIRTUAL edge: virtualinvoke $r0.<java.util.zip.ZipInputStream: void close()>() in <com.atlassian.plugin.util.zip.UrlUnzipper: void unzip()> ==> <java.util.zip.ZipInputStream: void close()>
VIRTUAL edge: virtualinvoke $r0.<java.util.zip.ZipInputStream: void close()>() in <com.atlassian.plugin.util.zip.UrlUnzipper: void unzip()> ==> <java.util.zip.ZipInputStream: void close()>
VIRTUAL edge: virtualinvoke r1.<com.atlassian.plugin.util.zip.UrlUnzipper: java.io.File saveEntry(java.io.InputStream,java.util.zip.ZipEntry)>($r0, $r5) in <com.atlassian.plugin.util.zip.UrlUnzipper: void unzip()> ==> <com.atlassian.plugin.util.zip.AbstractUnzipper: java.io.File saveEntry(java.io.InputStream,java.util.zip.ZipEntry)>
VIRTUAL edge: virtualinvoke $r10.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r6) in <com.atlassian.plugin.util.zip.UrlUnzipper: void unzip()> ==> <java.lang.Throwable: void addSuppressed(java.lang.Throwable)>
CLINIT edge: $r0 = new java.io.File in <com.atlassian.plugin.util.zip.AbstractUnzipper: java.io.File saveEntry(java.io.InputStream,java.util.zip.ZipEntry)> ==> <java.io.File: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: int copy(java.io.InputStream,java.io.OutputStream)>(r11, $r10) in <com.atlassian.plugin.util.zip.AbstractUnzipper: java.io.File saveEntry(java.io.InputStream,java.util.zip.ZipEntry)> ==> <org.apache.commons.io.IOUtils: int copy(java.io.InputStream,java.io.OutputStream)>
STATIC edge: $r5 = staticinvoke <com.atlassian.plugin.util.zip.AbstractUnzipper: java.lang.String normaliseAndVerify(java.lang.String)>($r4) in <com.atlassian.plugin.util.zip.AbstractUnzipper: java.io.File saveEntry(java.io.InputStream,java.util.zip.ZipEntry)> ==> <com.atlassian.plugin.util.zip.AbstractUnzipper: java.lang.String normaliseAndVerify(java.lang.String)>
CLINIT edge: $r15 = <java.io.File: java.lang.String separator> in <com.atlassian.plugin.util.zip.AbstractUnzipper: java.io.File saveEntry(java.io.InputStream,java.util.zip.ZipEntry)> ==> <java.io.File: void <clinit>()>
CLINIT edge: $r16 = <com.atlassian.plugin.util.zip.AbstractUnzipper: org.slf4j.Logger log> in <com.atlassian.plugin.util.zip.AbstractUnzipper: java.io.File saveEntry(java.io.InputStream,java.util.zip.ZipEntry)> ==> <com.atlassian.plugin.util.zip.AbstractUnzipper: void <clinit>()>
CLINIT edge: $r5 = staticinvoke <com.atlassian.plugin.util.zip.AbstractUnzipper: java.lang.String normaliseAndVerify(java.lang.String)>($r4) in <com.atlassian.plugin.util.zip.AbstractUnzipper: java.io.File saveEntry(java.io.InputStream,java.util.zip.ZipEntry)> ==> <com.atlassian.plugin.util.zip.AbstractUnzipper: void <clinit>()>
STATIC edge: r1 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String normalizeNoEndSeparator(java.lang.String)>(r0) in <com.atlassian.plugin.util.zip.AbstractUnzipper: java.lang.String normaliseAndVerify(java.lang.String)> ==> <org.apache.commons.io.FilenameUtils: java.lang.String normalizeNoEndSeparator(java.lang.String)>
STATIC edge: $z0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isBlank(java.lang.CharSequence)>(r1) in <com.atlassian.plugin.util.zip.AbstractUnzipper: java.lang.String normaliseAndVerify(java.lang.String)> ==> <org.apache.commons.lang3.StringUtils: boolean isBlank(java.lang.CharSequence)>
SPECIAL edge: specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Feature not implemented.") in <com.atlassian.plugin.util.zip.UrlUnzipper: java.io.File unzipFileInArchive(java.lang.String)> ==> <java.lang.UnsupportedOperationException: void <init>(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.net.URL: java.io.InputStream openStream()>() in <com.atlassian.plugin.util.zip.UrlUnzipper: java.util.zip.ZipEntry[] entries()> ==> <java.net.URL: java.io.InputStream openStream()>
SPECIAL edge: specialinvoke $r1.<java.util.zip.ZipInputStream: void <init>(java.io.InputStream)>($r3) in <com.atlassian.plugin.util.zip.UrlUnzipper: java.util.zip.ZipEntry[] entries()> ==> <java.util.zip.ZipInputStream: void <init>(java.io.InputStream)>
VIRTUAL edge: $r4 = virtualinvoke r0.<com.atlassian.plugin.util.zip.UrlUnzipper: java.util.zip.ZipEntry[] entries(java.util.zip.ZipInputStream)>($r1) in <com.atlassian.plugin.util.zip.UrlUnzipper: java.util.zip.ZipEntry[] entries()> ==> <com.atlassian.plugin.util.zip.AbstractUnzipper: java.util.zip.ZipEntry[] entries(java.util.zip.ZipInputStream)>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r2) in <com.atlassian.plugin.util.zip.AbstractUnzipper: java.util.zip.ZipEntry[] entries(java.util.zip.ZipInputStream)> ==> <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r2) in <com.atlassian.plugin.util.zip.AbstractUnzipper: java.util.zip.ZipEntry[] entries(java.util.zip.ZipInputStream)> ==> <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.util.zip.AbstractUnzipper: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.atlassian.plugin.util.zip.AbstractUnzipper: java.util.zip.ZipEntry[] entries()>() in <com.atlassian.plugin.util.zip.AbstractUnzipper: void conditionalUnzip()> ==> <com.atlassian.plugin.util.zip.StreamUnzipper: java.util.zip.ZipEntry[] entries()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.atlassian.plugin.util.zip.AbstractUnzipper: java.util.zip.ZipEntry[] entries()>() in <com.atlassian.plugin.util.zip.AbstractUnzipper: void conditionalUnzip()> ==> <com.atlassian.plugin.util.zip.UrlUnzipper: java.util.zip.ZipEntry[] entries()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.atlassian.plugin.util.zip.AbstractUnzipper: java.util.zip.ZipEntry[] entries()>() in <com.atlassian.plugin.util.zip.AbstractUnzipper: void conditionalUnzip()> ==> <com.atlassian.plugin.util.zip.FileUnzipper: java.util.zip.ZipEntry[] entries()>
SPECIAL edge: r9 = specialinvoke r0.<com.atlassian.plugin.util.zip.AbstractUnzipper: java.util.Map getContentsOfTargetDir(java.io.File)>($r8) in <com.atlassian.plugin.util.zip.AbstractUnzipper: void conditionalUnzip()> ==> <com.atlassian.plugin.util.zip.AbstractUnzipper: java.util.Map getContentsOfTargetDir(java.io.File)>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.util.zip.AbstractUnzipper: void unzip()>() in <com.atlassian.plugin.util.zip.AbstractUnzipper: void conditionalUnzip()> ==> <com.atlassian.plugin.util.zip.UrlUnzipper: void unzip()>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.util.zip.AbstractUnzipper: void unzip()>() in <com.atlassian.plugin.util.zip.AbstractUnzipper: void conditionalUnzip()> ==> <com.atlassian.plugin.util.zip.StreamUnzipper: void unzip()>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.util.zip.AbstractUnzipper: void unzip()>() in <com.atlassian.plugin.util.zip.AbstractUnzipper: void conditionalUnzip()> ==> <com.atlassian.plugin.util.zip.FileUnzipper: void unzip()>
INTERFACE edge: $r6 = interfaceinvoke $r2.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r5) in <com.atlassian.plugin.util.zip.AbstractUnzipper: void conditionalUnzip()> ==> <java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>
INTERFACE edge: $z0 = interfaceinvoke r9.<java.util.Map: boolean equals(java.lang.Object)>(r7) in <com.atlassian.plugin.util.zip.AbstractUnzipper: void conditionalUnzip()> ==> <java.util.AbstractMap: boolean equals(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r9.<java.util.Map: boolean equals(java.lang.Object)>(r7) in <com.atlassian.plugin.util.zip.AbstractUnzipper: void conditionalUnzip()> ==> <java.util.Hashtable: boolean equals(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r9.<java.util.Map: boolean equals(java.lang.Object)>(r7) in <com.atlassian.plugin.util.zip.AbstractUnzipper: void conditionalUnzip()> ==> <java.util.jar.Attributes: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r11.<java.io.File: boolean exists()>() in <com.atlassian.plugin.util.zip.AbstractUnzipper: void conditionalUnzip()> ==> <java.io.File: boolean exists()>
CLINIT edge: $r12 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>() in <com.atlassian.plugin.util.zip.AbstractUnzipper: java.util.Map getContentsOfTargetDir(java.io.File)> ==> <java.util.Collections: void <clinit>()>
STATIC edge: $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1) in <com.atlassian.plugin.util.zip.AbstractUnzipper: java.util.Map getContentsOfTargetDir(java.io.File)> ==> <java.lang.Long: java.lang.Long valueOf(long)>
STATIC edge: $r11 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>() in <com.atlassian.plugin.util.zip.AbstractUnzipper: java.util.Map getContentsOfTargetDir(java.io.File)> ==> <java.util.Collections: java.util.Map emptyMap()>
STATIC edge: $r12 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>() in <com.atlassian.plugin.util.zip.AbstractUnzipper: java.util.Map getContentsOfTargetDir(java.io.File)> ==> <java.util.Collections: java.util.Map emptyMap()>
CLINIT edge: $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1) in <com.atlassian.plugin.util.zip.AbstractUnzipper: java.util.Map getContentsOfTargetDir(java.io.File)> ==> <java.lang.Long: void <clinit>()>
CLINIT edge: $r6 = <com.atlassian.plugin.util.zip.AbstractUnzipper: org.slf4j.Logger log> in <com.atlassian.plugin.util.zip.AbstractUnzipper: java.util.Map getContentsOfTargetDir(java.io.File)> ==> <com.atlassian.plugin.util.zip.AbstractUnzipper: void <clinit>()>
CLINIT edge: $r11 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>() in <com.atlassian.plugin.util.zip.AbstractUnzipper: java.util.Map getContentsOfTargetDir(java.io.File)> ==> <java.util.Collections: void <clinit>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DependentPlugins: void <init>(java.util.Collection,java.lang.Iterable,java.util.Set)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: r2 = specialinvoke r0.<com.atlassian.plugin.manager.DependentPlugins: com.atlassian.plugin.PluginDependencies$Type getLeastSignificantType(java.util.Set)>(r1) in <com.atlassian.plugin.manager.DependentPlugins: void <init>(java.util.Collection,java.lang.Iterable,java.util.Set)> ==> <com.atlassian.plugin.manager.DependentPlugins: com.atlassian.plugin.PluginDependencies$Type getLeastSignificantType(java.util.Set)>
SPECIAL edge: r4 = specialinvoke r0.<com.atlassian.plugin.manager.DependentPlugins: com.google.common.collect.Multimap buildPluginToItsDependants(java.lang.Iterable,com.atlassian.plugin.PluginDependencies$Type)>(r3, r2) in <com.atlassian.plugin.manager.DependentPlugins: void <init>(java.util.Collection,java.lang.Iterable,java.util.Set)> ==> <com.atlassian.plugin.manager.DependentPlugins: com.google.common.collect.Multimap buildPluginToItsDependants(java.lang.Iterable,com.atlassian.plugin.PluginDependencies$Type)>
SPECIAL edge: r8 = specialinvoke r0.<com.atlassian.plugin.manager.DependentPlugins: java.util.Map calculateTransitivePluginDependencies(java.util.Collection,java.util.Set,com.google.common.collect.Multimap,java.util.Map)>(r7, r1, r4, $r14) in <com.atlassian.plugin.manager.DependentPlugins: void <init>(java.util.Collection,java.lang.Iterable,java.util.Set)> ==> <com.atlassian.plugin.manager.DependentPlugins: java.util.Map calculateTransitivePluginDependencies(java.util.Collection,java.util.Set,com.google.common.collect.Multimap,java.util.Map)>
SPECIAL edge: r10 = specialinvoke r0.<com.atlassian.plugin.manager.DependentPlugins: java.util.Map constructWorkMap(com.google.common.collect.Multimap,java.util.Collection)>(r4, $r9) in <com.atlassian.plugin.manager.DependentPlugins: void <init>(java.util.Collection,java.lang.Iterable,java.util.Set)> ==> <com.atlassian.plugin.manager.DependentPlugins: java.util.Map constructWorkMap(com.google.common.collect.Multimap,java.util.Collection)>
SPECIAL edge: $r11 = specialinvoke r0.<com.atlassian.plugin.manager.DependentPlugins: java.util.List getInDependencyOrder(java.util.Map,java.util.Map)>(r10, r8) in <com.atlassian.plugin.manager.DependentPlugins: void <init>(java.util.Collection,java.lang.Iterable,java.util.Set)> ==> <com.atlassian.plugin.manager.DependentPlugins: java.util.List getInDependencyOrder(java.util.Map,java.util.Map)>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Set: boolean isEmpty()>() in <com.atlassian.plugin.manager.DependentPlugins: void <init>(java.util.Collection,java.lang.Iterable,java.util.Set)> ==> <java.util.HashSet: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Set: boolean isEmpty()>() in <com.atlassian.plugin.manager.DependentPlugins: void <init>(java.util.Collection,java.lang.Iterable,java.util.Set)> ==> <java.util.concurrent.CopyOnWriteArraySet: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Set: boolean isEmpty()>() in <com.atlassian.plugin.manager.DependentPlugins: void <init>(java.util.Collection,java.lang.Iterable,java.util.Set)> ==> <java.util.TreeSet: boolean isEmpty()>
SPECIAL edge: specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Dependency types must be provided") in <com.atlassian.plugin.manager.DependentPlugins: void <init>(java.util.Collection,java.lang.Iterable,java.util.Set)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
INTERFACE edge: $r9 = interfaceinvoke r8.<java.util.Map: java.util.Collection values()>() in <com.atlassian.plugin.manager.DependentPlugins: void <init>(java.util.Collection,java.lang.Iterable,java.util.Set)> ==> <java.util.HashMap: java.util.Collection values()>
INTERFACE edge: $r9 = interfaceinvoke r8.<java.util.Map: java.util.Collection values()>() in <com.atlassian.plugin.manager.DependentPlugins: void <init>(java.util.Collection,java.lang.Iterable,java.util.Set)> ==> <java.util.Hashtable: java.util.Collection values()>
INTERFACE edge: $r9 = interfaceinvoke r8.<java.util.Map: java.util.Collection values()>() in <com.atlassian.plugin.manager.DependentPlugins: void <init>(java.util.Collection,java.lang.Iterable,java.util.Set)> ==> <java.util.AbstractMap: java.util.Collection values()>
INTERFACE edge: $r9 = interfaceinvoke r8.<java.util.Map: java.util.Collection values()>() in <com.atlassian.plugin.manager.DependentPlugins: void <init>(java.util.Collection,java.lang.Iterable,java.util.Set)> ==> <java.util.jar.Attributes: java.util.Collection values()>
STATIC edge: r0 = staticinvoke <com.google.common.collect.ArrayListMultimap: com.google.common.collect.ArrayListMultimap create()>() in <com.atlassian.plugin.manager.DependentPlugins: com.google.common.collect.Multimap buildPluginToItsDependants(java.lang.Iterable,com.atlassian.plugin.PluginDependencies$Type)> ==> <com.google.common.collect.ArrayListMultimap: com.google.common.collect.ArrayListMultimap create()>
STATIC edge: r4 = staticinvoke <com.google.common.collect.Sets: java.util.HashSet newHashSet()>() in <com.atlassian.plugin.manager.DependentPlugins: java.util.Map calculateTransitivePluginDependencies(java.util.Collection,java.util.Set,com.google.common.collect.Multimap,java.util.Map)> ==> <com.google.common.collect.Sets: java.util.HashSet newHashSet()>
STATIC edge: r32 = staticinvoke <com.atlassian.plugin.PluginDependencies$Type: com.atlassian.plugin.PluginDependencies$Type[] values()>() in <com.atlassian.plugin.manager.DependentPlugins: java.util.Map calculateTransitivePluginDependencies(java.util.Collection,java.util.Set,com.google.common.collect.Multimap,java.util.Map)> ==> <com.atlassian.plugin.PluginDependencies$Type: com.atlassian.plugin.PluginDependencies$Type[] values()>
CLINIT edge: $r24 = staticinvoke <java.util.Collections: java.util.Set emptySet()>() in <com.atlassian.plugin.manager.DependentPlugins: java.util.Map constructWorkMap(com.google.common.collect.Multimap,java.util.Collection)> ==> <java.util.Collections: void <clinit>()>
STATIC edge: $r24 = staticinvoke <java.util.Collections: java.util.Set emptySet()>() in <com.atlassian.plugin.manager.DependentPlugins: java.util.Map constructWorkMap(com.google.common.collect.Multimap,java.util.Collection)> ==> <java.util.Collections: java.util.Set emptySet()>
STATIC edge: $r15 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toSet()>() in <com.atlassian.plugin.manager.DependentPlugins: java.util.Map constructWorkMap(com.google.common.collect.Multimap,java.util.Collection)> ==> <java.util.stream.Collectors: java.util.stream.Collector toSet()>
STATIC edge: $r13 = staticinvoke <com.atlassian.plugin.manager.DependentPlugins$getKey__125: java.util.function.Function bootstrap$()>() in <com.atlassian.plugin.manager.DependentPlugins: java.util.Map constructWorkMap(com.google.common.collect.Multimap,java.util.Collection)> ==> <com.atlassian.plugin.manager.DependentPlugins$getKey__125: java.util.function.Function bootstrap$()>
STATIC edge: $r11 = staticinvoke <com.atlassian.plugin.manager.DependentPlugins$getPlugin__115: java.util.function.Function bootstrap$()>() in <com.atlassian.plugin.manager.DependentPlugins: java.util.Map constructWorkMap(com.google.common.collect.Multimap,java.util.Collection)> ==> <com.atlassian.plugin.manager.DependentPlugins$getPlugin__115: java.util.function.Function bootstrap$()>
STATIC edge: $r5 = staticinvoke <com.atlassian.plugin.manager.DependentPlugins$lambda_getInDependencyOrder_0__113: java.util.function.Predicate bootstrap$(java.util.Map)>(r2) in <com.atlassian.plugin.manager.DependentPlugins: java.util.List getInDependencyOrder(java.util.Map,java.util.Map)> ==> <com.atlassian.plugin.manager.DependentPlugins$lambda_getInDependencyOrder_0__113: java.util.function.Predicate bootstrap$(java.util.Map)>
STATIC edge: $r7 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>() in <com.atlassian.plugin.manager.DependentPlugins: java.util.List getInDependencyOrder(java.util.Map,java.util.Map)> ==> <java.util.stream.Collectors: java.util.stream.Collector toList()>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.atlassian.plugin.manager.DependentPlugins: java.util.List toStringList(java.util.Set)>($r1) in <com.atlassian.plugin.manager.DependentPlugins: java.util.List toStringList()> ==> <com.atlassian.plugin.manager.DependentPlugins: java.util.List toStringList(java.util.Set)>
INTERFACE edge: $r4 = interfaceinvoke $r2.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($r3) in <com.atlassian.plugin.manager.DependentPlugins: java.util.List toStringList(java.util.Set)> ==> <java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>
INTERFACE edge: $r7 = interfaceinvoke $r4.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($r6) in <com.atlassian.plugin.manager.DependentPlugins: java.util.List toStringList(java.util.Set)> ==> <java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>
INTERFACE edge: $r9 = interfaceinvoke $r7.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r8) in <com.atlassian.plugin.manager.DependentPlugins: java.util.List toStringList(java.util.Set)> ==> <java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>
INTERFACE edge: $r11 = interfaceinvoke $r9.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r10) in <com.atlassian.plugin.manager.DependentPlugins: java.util.List toStringList(java.util.Set)> ==> <java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.atlassian.plugin.manager.DependentPlugins: java.util.List getPluginsByTypes(java.util.Set,boolean)>($r1, z0) in <com.atlassian.plugin.manager.DependentPlugins: java.util.List getPlugins(boolean)> ==> <com.atlassian.plugin.manager.DependentPlugins: java.util.List getPluginsByTypes(java.util.Set,boolean)>
INTERFACE edge: $z1 = interfaceinvoke r8.<java.util.Set: boolean contains(java.lang.Object)>($r24) in <com.atlassian.plugin.manager.DependentPlugins: java.util.List getPluginsByTypes(java.util.Set,boolean)> ==> <java.util.HashSet: boolean contains(java.lang.Object)>
INTERFACE edge: $z1 = interfaceinvoke r8.<java.util.Set: boolean contains(java.lang.Object)>($r24) in <com.atlassian.plugin.manager.DependentPlugins: java.util.List getPluginsByTypes(java.util.Set,boolean)> ==> <java.util.concurrent.CopyOnWriteArraySet: boolean contains(java.lang.Object)>
INTERFACE edge: $z1 = interfaceinvoke r8.<java.util.Set: boolean contains(java.lang.Object)>($r24) in <com.atlassian.plugin.manager.DependentPlugins: java.util.List getPluginsByTypes(java.util.Set,boolean)> ==> <java.util.TreeSet: boolean contains(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.manager.DependentPlugins: java.util.List getPluginsByTypes(java.util.Set,boolean)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Roots always have dependency type ") in <com.atlassian.plugin.manager.DependentPlugins: java.util.List getPluginsByTypes(java.util.Set,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2) in <com.atlassian.plugin.manager.DependentPlugins: java.util.List getPluginsByTypes(java.util.Set,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Cannot ask for includeRoots=true and not have ") in <com.atlassian.plugin.manager.DependentPlugins: java.util.List getPluginsByTypes(java.util.Set,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5) in <com.atlassian.plugin.manager.DependentPlugins: java.util.List getPluginsByTypes(java.util.Set,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in dependencyTypes (") in <com.atlassian.plugin.manager.DependentPlugins: java.util.List getPluginsByTypes(java.util.Set,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r8) in <com.atlassian.plugin.manager.DependentPlugins: java.util.List getPluginsByTypes(java.util.Set,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(").") in <com.atlassian.plugin.manager.DependentPlugins: java.util.List getPluginsByTypes(java.util.Set,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.manager.DependentPlugins: java.util.List getPluginsByTypes(java.util.Set,boolean)> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: $r16 = interfaceinvoke $r14.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($r15) in <com.atlassian.plugin.manager.DependentPlugins: java.util.List getPluginsByTypes(java.util.Set,boolean)> ==> <java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>
INTERFACE edge: $r18 = interfaceinvoke $r16.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($r17) in <com.atlassian.plugin.manager.DependentPlugins: java.util.List getPluginsByTypes(java.util.Set,boolean)> ==> <java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>
INTERFACE edge: $r20 = interfaceinvoke $r18.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r19) in <com.atlassian.plugin.manager.DependentPlugins: java.util.List getPluginsByTypes(java.util.Set,boolean)> ==> <java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>
INTERFACE edge: $r22 = interfaceinvoke $r20.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r21) in <com.atlassian.plugin.manager.DependentPlugins: java.util.List getPluginsByTypes(java.util.Set,boolean)> ==> <java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>
VIRTUAL edge: $r2 = virtualinvoke r1.<com.atlassian.plugin.manager.DependentPlugins$DependentPlugin: com.atlassian.plugin.PluginDependencies$Type getDependencyType()>() in <com.atlassian.plugin.manager.DependentPlugins: boolean lambda$getPluginsByTypes$6(java.util.Set,com.atlassian.plugin.manager.DependentPlugins$DependentPlugin)> ==> <com.atlassian.plugin.manager.DependentPlugins$DependentPlugin: com.atlassian.plugin.PluginDependencies$Type getDependencyType()>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.Set: boolean contains(java.lang.Object)>($r2) in <com.atlassian.plugin.manager.DependentPlugins: boolean lambda$getPluginsByTypes$6(java.util.Set,com.atlassian.plugin.manager.DependentPlugins$DependentPlugin)> ==> <java.util.HashSet: boolean contains(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.Set: boolean contains(java.lang.Object)>($r2) in <com.atlassian.plugin.manager.DependentPlugins: boolean lambda$getPluginsByTypes$6(java.util.Set,com.atlassian.plugin.manager.DependentPlugins$DependentPlugin)> ==> <java.util.concurrent.CopyOnWriteArraySet: boolean contains(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.Set: boolean contains(java.lang.Object)>($r2) in <com.atlassian.plugin.manager.DependentPlugins: boolean lambda$getPluginsByTypes$6(java.util.Set,com.atlassian.plugin.manager.DependentPlugins$DependentPlugin)> ==> <java.util.TreeSet: boolean contains(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke r0.<com.atlassian.plugin.manager.DependentPlugins$DependentPlugin: boolean isRoot()>() in <com.atlassian.plugin.manager.DependentPlugins: boolean lambda$getPluginsByTypes$5(boolean,com.atlassian.plugin.manager.DependentPlugins$DependentPlugin)> ==> <com.atlassian.plugin.manager.DependentPlugins$DependentPlugin: boolean isRoot()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.manager.DependentPlugins: java.lang.String lambda$toStringList$4(com.atlassian.plugin.manager.DependentPlugins$DependentPlugin)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3) in <com.atlassian.plugin.manager.DependentPlugins: java.lang.String lambda$toStringList$4(com.atlassian.plugin.manager.DependentPlugins$DependentPlugin)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r1.<com.atlassian.plugin.manager.DependentPlugins$DependentPlugin: com.atlassian.plugin.Plugin getPlugin()>() in <com.atlassian.plugin.manager.DependentPlugins: java.lang.String lambda$toStringList$4(com.atlassian.plugin.manager.DependentPlugins$DependentPlugin)> ==> <com.atlassian.plugin.manager.DependentPlugins$DependentPlugin: com.atlassian.plugin.Plugin getPlugin()>
VIRTUAL edge: $r6 = virtualinvoke r1.<com.atlassian.plugin.manager.DependentPlugins$DependentPlugin: com.atlassian.plugin.PluginDependencies$Type getDependencyType()>() in <com.atlassian.plugin.manager.DependentPlugins: java.lang.String lambda$toStringList$4(com.atlassian.plugin.manager.DependentPlugins$DependentPlugin)> ==> <com.atlassian.plugin.manager.DependentPlugins$DependentPlugin: com.atlassian.plugin.PluginDependencies$Type getDependencyType()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DependentPlugins: java.lang.String lambda$toStringList$4(com.atlassian.plugin.manager.DependentPlugins$DependentPlugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DependentPlugins: java.lang.String lambda$toStringList$4(com.atlassian.plugin.manager.DependentPlugins$DependentPlugin)> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(") in <com.atlassian.plugin.manager.DependentPlugins: java.lang.String lambda$toStringList$4(com.atlassian.plugin.manager.DependentPlugins$DependentPlugin)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6) in <com.atlassian.plugin.manager.DependentPlugins: java.lang.String lambda$toStringList$4(com.atlassian.plugin.manager.DependentPlugins$DependentPlugin)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")") in <com.atlassian.plugin.manager.DependentPlugins: java.lang.String lambda$toStringList$4(com.atlassian.plugin.manager.DependentPlugins$DependentPlugin)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.manager.DependentPlugins: java.lang.String lambda$toStringList$4(com.atlassian.plugin.manager.DependentPlugins$DependentPlugin)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<com.atlassian.plugin.manager.DependentPlugins$DependentPlugin: com.atlassian.plugin.PluginDependencies$Type getDependencyType()>() in <com.atlassian.plugin.manager.DependentPlugins: boolean lambda$toStringList$3(java.util.Set,com.atlassian.plugin.manager.DependentPlugins$DependentPlugin)> ==> <com.atlassian.plugin.manager.DependentPlugins$DependentPlugin: com.atlassian.plugin.PluginDependencies$Type getDependencyType()>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.Set: boolean contains(java.lang.Object)>($r2) in <com.atlassian.plugin.manager.DependentPlugins: boolean lambda$toStringList$3(java.util.Set,com.atlassian.plugin.manager.DependentPlugins$DependentPlugin)> ==> <java.util.HashSet: boolean contains(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.Set: boolean contains(java.lang.Object)>($r2) in <com.atlassian.plugin.manager.DependentPlugins: boolean lambda$toStringList$3(java.util.Set,com.atlassian.plugin.manager.DependentPlugins$DependentPlugin)> ==> <java.util.concurrent.CopyOnWriteArraySet: boolean contains(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.Set: boolean contains(java.lang.Object)>($r2) in <com.atlassian.plugin.manager.DependentPlugins: boolean lambda$toStringList$3(java.util.Set,com.atlassian.plugin.manager.DependentPlugins$DependentPlugin)> ==> <java.util.TreeSet: boolean contains(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.atlassian.plugin.manager.DependentPlugins$DependentPlugin: boolean isRoot()>() in <com.atlassian.plugin.manager.DependentPlugins: boolean lambda$toStringList$2(com.atlassian.plugin.manager.DependentPlugins$DependentPlugin)> ==> <com.atlassian.plugin.manager.DependentPlugins$DependentPlugin: boolean isRoot()>
SPECIAL edge: specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.manager.DependentPlugins: java.lang.IllegalStateException lambda$findPluginToCutTheCycle$1(java.util.Map)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Each plugin has a dependency. This suggests there is a cyclic dependency, yet we could not find a cycle. The internal data structure is corrupted: ") in <com.atlassian.plugin.manager.DependentPlugins: java.lang.IllegalStateException lambda$findPluginToCutTheCycle$1(java.util.Map)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3) in <com.atlassian.plugin.manager.DependentPlugins: java.lang.IllegalStateException lambda$findPluginToCutTheCycle$1(java.util.Map)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.manager.DependentPlugins: java.lang.IllegalStateException lambda$findPluginToCutTheCycle$1(java.util.Map)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5) in <com.atlassian.plugin.manager.DependentPlugins: java.lang.IllegalStateException lambda$findPluginToCutTheCycle$1(java.util.Map)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
INTERFACE edge: $r2 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DependentPlugins: boolean lambda$getInDependencyOrder$0(java.util.Map,java.lang.String)> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r2 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DependentPlugins: boolean lambda$getInDependencyOrder$0(java.util.Map,java.lang.String)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r2 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DependentPlugins: boolean lambda$getInDependencyOrder$0(java.util.Map,java.lang.String)> ==> <java.util.TreeMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r2 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DependentPlugins: boolean lambda$getInDependencyOrder$0(java.util.Map,java.lang.String)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r2 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DependentPlugins: boolean lambda$getInDependencyOrder$0(java.util.Map,java.lang.String)> ==> <java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r3.<java.util.Set: boolean isEmpty()>() in <com.atlassian.plugin.manager.DependentPlugins: boolean lambda$getInDependencyOrder$0(java.util.Map,java.lang.String)> ==> <java.util.HashSet: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke $r3.<java.util.Set: boolean isEmpty()>() in <com.atlassian.plugin.manager.DependentPlugins: boolean lambda$getInDependencyOrder$0(java.util.Map,java.lang.String)> ==> <java.util.concurrent.CopyOnWriteArraySet: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke $r3.<java.util.Set: boolean isEmpty()>() in <com.atlassian.plugin.manager.DependentPlugins: boolean lambda$getInDependencyOrder$0(java.util.Map,java.lang.String)> ==> <java.util.TreeSet: boolean isEmpty()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.manager.DependentPlugins$DependentPlugin: java.lang.String toString()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DependentPlugin{plugin=") in <com.atlassian.plugin.manager.DependentPlugins$DependentPlugin: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3) in <com.atlassian.plugin.manager.DependentPlugins$DependentPlugin: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", dependencyType=") in <com.atlassian.plugin.manager.DependentPlugins$DependentPlugin: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6) in <com.atlassian.plugin.manager.DependentPlugins$DependentPlugin: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", isRoot=") in <com.atlassian.plugin.manager.DependentPlugins$DependentPlugin: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0) in <com.atlassian.plugin.manager.DependentPlugins$DependentPlugin: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125) in <com.atlassian.plugin.manager.DependentPlugins$DependentPlugin: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.manager.DependentPlugins$DependentPlugin: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() in <com.atlassian.plugin.manager.DependentPlugins$CappedDep: boolean equals(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() in <com.atlassian.plugin.manager.DependentPlugins$CappedDep: boolean equals(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5) in <com.atlassian.plugin.manager.DependentPlugins$CappedDep: boolean equals(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: i2 = virtualinvoke $r1.<java.lang.String: int hashCode()>() in <com.atlassian.plugin.manager.DependentPlugins$CappedDep: int hashCode()> ==> <java.lang.String: int hashCode()>
INTERFACE edge: r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.util.ChainingClassLoader$ResourcesEnumeration: boolean hasMoreElements()> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.util.ChainingClassLoader$ResourcesEnumeration: boolean hasMoreElements()> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z1 = interfaceinvoke r4.<java.util.Enumeration: boolean hasMoreElements()>() in <com.atlassian.plugin.util.ChainingClassLoader$ResourcesEnumeration: boolean hasMoreElements()> ==> <java.util.StringTokenizer: boolean hasMoreElements()>
INTERFACE edge: $z1 = interfaceinvoke r4.<java.util.Enumeration: boolean hasMoreElements()>() in <com.atlassian.plugin.util.ChainingClassLoader$ResourcesEnumeration: boolean hasMoreElements()> ==> <com.atlassian.plugin.util.ChainingClassLoader$ResourcesEnumeration: boolean hasMoreElements()>
INTERFACE edge: r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.util.ChainingClassLoader$ResourcesEnumeration: java.net.URL nextElement()> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.util.ChainingClassLoader$ResourcesEnumeration: java.net.URL nextElement()> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z1 = interfaceinvoke r6.<java.util.Enumeration: boolean hasMoreElements()>() in <com.atlassian.plugin.util.ChainingClassLoader$ResourcesEnumeration: java.net.URL nextElement()> ==> <java.util.StringTokenizer: boolean hasMoreElements()>
INTERFACE edge: $z1 = interfaceinvoke r6.<java.util.Enumeration: boolean hasMoreElements()>() in <com.atlassian.plugin.util.ChainingClassLoader$ResourcesEnumeration: java.net.URL nextElement()> ==> <com.atlassian.plugin.util.ChainingClassLoader$ResourcesEnumeration: boolean hasMoreElements()>
INTERFACE edge: $r7 = interfaceinvoke r6.<java.util.Enumeration: java.lang.Object nextElement()>() in <com.atlassian.plugin.util.ChainingClassLoader$ResourcesEnumeration: java.net.URL nextElement()> ==> <java.util.StringTokenizer: java.lang.Object nextElement()>
INTERFACE edge: $r7 = interfaceinvoke r6.<java.util.Enumeration: java.lang.Object nextElement()>() in <com.atlassian.plugin.util.ChainingClassLoader$ResourcesEnumeration: java.net.URL nextElement()> ==> <com.atlassian.plugin.util.ChainingClassLoader$ResourcesEnumeration: java.lang.Object nextElement()>
SPECIAL edge: specialinvoke $r3.<java.util.NoSuchElementException: void <init>(java.lang.String)>($r4) in <com.atlassian.plugin.util.ChainingClassLoader$ResourcesEnumeration: java.net.URL nextElement()> ==> <java.util.NoSuchElementException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.atlassian.plugin.util.ChainingClassLoader$ResourcesEnumeration: java.net.URL nextElement()>() in <com.atlassian.plugin.util.ChainingClassLoader$ResourcesEnumeration: java.lang.Object nextElement()> ==> <com.atlassian.plugin.util.ChainingClassLoader$ResourcesEnumeration: java.net.URL nextElement()>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.util.ChainingClassLoader: void <init>(java.util.Map,java.lang.ClassLoader[])>($r1, r2) in <com.atlassian.plugin.util.ChainingClassLoader: void <init>(java.lang.ClassLoader[])> ==> <com.atlassian.plugin.util.ChainingClassLoader: void <init>(java.util.Map,java.lang.ClassLoader[])>
SPECIAL edge: specialinvoke r0.<java.lang.ClassLoader: void <init>(java.lang.ClassLoader)>(null) in <com.atlassian.plugin.util.ChainingClassLoader: void <init>(java.util.Map,java.lang.ClassLoader[])> ==> <java.lang.ClassLoader: void <init>(java.lang.ClassLoader)>
INTERFACE edge: r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.util.ChainingClassLoader: java.lang.Class loadClass(java.lang.String)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.util.ChainingClassLoader: java.lang.Class loadClass(java.lang.String)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
VIRTUAL edge: $r7 = virtualinvoke r6.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r4) in <com.atlassian.plugin.util.ChainingClassLoader: java.lang.Class loadClass(java.lang.String)> ==> <java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke r6.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r4) in <com.atlassian.plugin.util.ChainingClassLoader: java.lang.Class loadClass(java.lang.String)> ==> <com.atlassian.plugin.util.ChainingClassLoader: java.lang.Class loadClass(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke r6.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r4) in <com.atlassian.plugin.util.ChainingClassLoader: java.lang.Class loadClass(java.lang.String)> ==> <com.atlassian.plugin.classloader.DelegationClassLoader: java.lang.Class loadClass(java.lang.String)>
SPECIAL edge: specialinvoke $r3.<java.lang.ClassNotFoundException: void <init>(java.lang.String)>(r4) in <com.atlassian.plugin.util.ChainingClassLoader: java.lang.Class loadClass(java.lang.String)> ==> <java.lang.ClassNotFoundException: void <init>(java.lang.String)>
SPECIAL edge: $r3 = specialinvoke r1.<com.atlassian.plugin.util.ChainingClassLoader: java.lang.String getAlternativeResourceName(java.lang.String)>(r2) in <com.atlassian.plugin.util.ChainingClassLoader: java.util.Enumeration getResources(java.lang.String)> ==> <com.atlassian.plugin.util.ChainingClassLoader: java.lang.String getAlternativeResourceName(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.util.ChainingClassLoader$ResourcesEnumeration: void <init>(java.lang.String,java.util.List)>($r3, $r4) in <com.atlassian.plugin.util.ChainingClassLoader: java.util.Enumeration getResources(java.lang.String)> ==> <com.atlassian.plugin.util.ChainingClassLoader$ResourcesEnumeration: void <init>(java.lang.String,java.util.List)>
CLINIT edge: $r6 = <com.atlassian.plugin.util.ChainingClassLoader: org.slf4j.Logger log> in <com.atlassian.plugin.util.ChainingClassLoader: java.lang.String getAlternativeResourceName(java.lang.String)> ==> <com.atlassian.plugin.util.ChainingClassLoader: void <clinit>()>
SPECIAL edge: r2 = specialinvoke r0.<com.atlassian.plugin.util.ChainingClassLoader: java.lang.String getAlternativeResourceName(java.lang.String)>(r1) in <com.atlassian.plugin.util.ChainingClassLoader: java.net.URL getResource(java.lang.String)> ==> <com.atlassian.plugin.util.ChainingClassLoader: java.lang.String getAlternativeResourceName(java.lang.String)>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.util.ChainingClassLoader: java.net.URL getResource(java.lang.String)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.util.ChainingClassLoader: java.net.URL getResource(java.lang.String)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
VIRTUAL edge: r7 = virtualinvoke r6.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>(r2) in <com.atlassian.plugin.util.ChainingClassLoader: java.net.URL getResource(java.lang.String)> ==> <com.atlassian.plugin.classloader.PluginClassLoader: java.net.URL getResource(java.lang.String)>
VIRTUAL edge: r7 = virtualinvoke r6.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>(r2) in <com.atlassian.plugin.util.ChainingClassLoader: java.net.URL getResource(java.lang.String)> ==> <java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>
VIRTUAL edge: r7 = virtualinvoke r6.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>(r2) in <com.atlassian.plugin.util.ChainingClassLoader: java.net.URL getResource(java.lang.String)> ==> <com.atlassian.plugin.util.ChainingClassLoader: java.net.URL getResource(java.lang.String)>
VIRTUAL edge: r7 = virtualinvoke r6.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>(r2) in <com.atlassian.plugin.util.ChainingClassLoader: java.net.URL getResource(java.lang.String)> ==> <com.atlassian.plugin.classloader.DelegationClassLoader: java.net.URL getResource(java.lang.String)>
SPECIAL edge: r2 = specialinvoke r0.<com.atlassian.plugin.util.ChainingClassLoader: java.lang.String getAlternativeResourceName(java.lang.String)>(r1) in <com.atlassian.plugin.util.ChainingClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)> ==> <com.atlassian.plugin.util.ChainingClassLoader: java.lang.String getAlternativeResourceName(java.lang.String)>
INTERFACE edge: r8 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.util.ChainingClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r8 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.util.ChainingClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
VIRTUAL edge: r10 = virtualinvoke r9.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>(r2) in <com.atlassian.plugin.util.ChainingClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)> ==> <java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>
VIRTUAL edge: r10 = virtualinvoke r9.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>(r2) in <com.atlassian.plugin.util.ChainingClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)> ==> <com.atlassian.plugin.util.ChainingClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>
VIRTUAL edge: r10 = virtualinvoke r9.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>(r2) in <com.atlassian.plugin.util.ChainingClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)> ==> <com.atlassian.plugin.classloader.DelegationClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>
VIRTUAL edge: $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>(r2) in <com.atlassian.plugin.util.ChainingClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("No resource found with alternate resourceName \'{}\'. Falling back to original name \'{}\'.", r2, r1) in <com.atlassian.plugin.util.ChainingClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)> ==> <org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>
INTERFACE edge: r11 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.util.ChainingClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r11 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.util.ChainingClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
VIRTUAL edge: r13 = virtualinvoke r12.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>(r1) in <com.atlassian.plugin.util.ChainingClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)> ==> <java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>
VIRTUAL edge: r13 = virtualinvoke r12.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>(r1) in <com.atlassian.plugin.util.ChainingClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)> ==> <com.atlassian.plugin.util.ChainingClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>
VIRTUAL edge: r13 = virtualinvoke r12.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>(r1) in <com.atlassian.plugin.util.ChainingClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)> ==> <com.atlassian.plugin.classloader.DelegationClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>
INTERFACE edge: r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.util.ChainingClassLoader: void setDefaultAssertionStatus(boolean)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.util.ChainingClassLoader: void setDefaultAssertionStatus(boolean)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
VIRTUAL edge: virtualinvoke r4.<java.lang.ClassLoader: void setDefaultAssertionStatus(boolean)>(z1) in <com.atlassian.plugin.util.ChainingClassLoader: void setDefaultAssertionStatus(boolean)> ==> <java.lang.ClassLoader: void setDefaultAssertionStatus(boolean)>
VIRTUAL edge: virtualinvoke r4.<java.lang.ClassLoader: void setDefaultAssertionStatus(boolean)>(z1) in <com.atlassian.plugin.util.ChainingClassLoader: void setDefaultAssertionStatus(boolean)> ==> <com.atlassian.plugin.util.ChainingClassLoader: void setDefaultAssertionStatus(boolean)>
VIRTUAL edge: virtualinvoke r4.<java.lang.ClassLoader: void setDefaultAssertionStatus(boolean)>(z1) in <com.atlassian.plugin.util.ChainingClassLoader: void setDefaultAssertionStatus(boolean)> ==> <com.atlassian.plugin.classloader.DelegationClassLoader: void setDefaultAssertionStatus(boolean)>
INTERFACE edge: r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.util.ChainingClassLoader: void setPackageAssertionStatus(java.lang.String,boolean)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.util.ChainingClassLoader: void setPackageAssertionStatus(java.lang.String,boolean)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
VIRTUAL edge: virtualinvoke r4.<java.lang.ClassLoader: void setPackageAssertionStatus(java.lang.String,boolean)>(r5, z1) in <com.atlassian.plugin.util.ChainingClassLoader: void setPackageAssertionStatus(java.lang.String,boolean)> ==> <java.lang.ClassLoader: void setPackageAssertionStatus(java.lang.String,boolean)>
VIRTUAL edge: virtualinvoke r4.<java.lang.ClassLoader: void setPackageAssertionStatus(java.lang.String,boolean)>(r5, z1) in <com.atlassian.plugin.util.ChainingClassLoader: void setPackageAssertionStatus(java.lang.String,boolean)> ==> <com.atlassian.plugin.util.ChainingClassLoader: void setPackageAssertionStatus(java.lang.String,boolean)>
VIRTUAL edge: virtualinvoke r4.<java.lang.ClassLoader: void setPackageAssertionStatus(java.lang.String,boolean)>(r5, z1) in <com.atlassian.plugin.util.ChainingClassLoader: void setPackageAssertionStatus(java.lang.String,boolean)> ==> <com.atlassian.plugin.classloader.DelegationClassLoader: void setPackageAssertionStatus(java.lang.String,boolean)>
INTERFACE edge: r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.util.ChainingClassLoader: void setClassAssertionStatus(java.lang.String,boolean)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.util.ChainingClassLoader: void setClassAssertionStatus(java.lang.String,boolean)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
VIRTUAL edge: virtualinvoke r4.<java.lang.ClassLoader: void setClassAssertionStatus(java.lang.String,boolean)>(r5, z1) in <com.atlassian.plugin.util.ChainingClassLoader: void setClassAssertionStatus(java.lang.String,boolean)> ==> <java.lang.ClassLoader: void setClassAssertionStatus(java.lang.String,boolean)>
VIRTUAL edge: virtualinvoke r4.<java.lang.ClassLoader: void setClassAssertionStatus(java.lang.String,boolean)>(r5, z1) in <com.atlassian.plugin.util.ChainingClassLoader: void setClassAssertionStatus(java.lang.String,boolean)> ==> <com.atlassian.plugin.util.ChainingClassLoader: void setClassAssertionStatus(java.lang.String,boolean)>
VIRTUAL edge: virtualinvoke r4.<java.lang.ClassLoader: void setClassAssertionStatus(java.lang.String,boolean)>(r5, z1) in <com.atlassian.plugin.util.ChainingClassLoader: void setClassAssertionStatus(java.lang.String,boolean)> ==> <com.atlassian.plugin.classloader.DelegationClassLoader: void setClassAssertionStatus(java.lang.String,boolean)>
INTERFACE edge: r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.util.ChainingClassLoader: void clearAssertionStatus()> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.util.ChainingClassLoader: void clearAssertionStatus()> ==> <java.util.ArrayList: java.util.Iterator iterator()>
VIRTUAL edge: virtualinvoke r4.<java.lang.ClassLoader: void clearAssertionStatus()>() in <com.atlassian.plugin.util.ChainingClassLoader: void clearAssertionStatus()> ==> <java.lang.ClassLoader: void clearAssertionStatus()>
VIRTUAL edge: virtualinvoke r4.<java.lang.ClassLoader: void clearAssertionStatus()>() in <com.atlassian.plugin.util.ChainingClassLoader: void clearAssertionStatus()> ==> <com.atlassian.plugin.util.ChainingClassLoader: void clearAssertionStatus()>
VIRTUAL edge: virtualinvoke r4.<java.lang.ClassLoader: void clearAssertionStatus()>() in <com.atlassian.plugin.util.ChainingClassLoader: void clearAssertionStatus()> ==> <com.atlassian.plugin.classloader.DelegationClassLoader: void clearAssertionStatus()>
INTERFACE edge: r1 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultPluginManager$1: boolean test(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: r1 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultPluginManager$1: boolean test(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
INTERFACE edge: r7 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginInformation getPluginInformation()>() in <com.atlassian.plugin.manager.DefaultPluginManager$1: boolean test(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: com.atlassian.plugin.PluginInformation getPluginInformation()>
INTERFACE edge: r7 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginInformation getPluginInformation()>() in <com.atlassian.plugin.manager.DefaultPluginManager$1: boolean test(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginInformation getPluginInformation()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager$1: boolean test(com.atlassian.plugin.Plugin)> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager$1: boolean test(com.atlassian.plugin.Plugin)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager$1: boolean test(com.atlassian.plugin.Plugin)> ==> <java.util.TreeMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager$1: boolean test(com.atlassian.plugin.Plugin)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager$1: boolean test(com.atlassian.plugin.Plugin)> ==> <java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>
SPECIAL edge: r6 = specialinvoke r2.<com.atlassian.plugin.manager.DefaultPluginManager$1: java.util.Optional parseStartupToDelay(java.lang.String,java.lang.String,java.lang.String)>(r5, r1, "override file") in <com.atlassian.plugin.manager.DefaultPluginManager$1: boolean test(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$1: java.util.Optional parseStartupToDelay(java.lang.String,java.lang.String,java.lang.String)>
SPECIAL edge: r9 = specialinvoke r2.<com.atlassian.plugin.manager.DefaultPluginManager$1: java.util.Optional parseStartupToDelay(java.lang.String,java.lang.String,java.lang.String)>($r16, r1, "PluginInformation") in <com.atlassian.plugin.manager.DefaultPluginManager$1: boolean test(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$1: java.util.Optional parseStartupToDelay(java.lang.String,java.lang.String,java.lang.String)>
VIRTUAL edge: $z2 = virtualinvoke $r15.<java.lang.Boolean: boolean booleanValue()>() in <com.atlassian.plugin.manager.DefaultPluginManager$1: boolean test(com.atlassian.plugin.Plugin)> ==> <java.lang.Boolean: boolean booleanValue()>
VIRTUAL edge: $z1 = virtualinvoke $r13.<java.lang.Boolean: boolean booleanValue()>() in <com.atlassian.plugin.manager.DefaultPluginManager$1: boolean test(com.atlassian.plugin.Plugin)> ==> <java.lang.Boolean: boolean booleanValue()>
CLINIT edge: $r10 = <java.lang.Boolean: java.lang.Boolean FALSE> in <com.atlassian.plugin.manager.DefaultPluginManager$1: java.util.Optional parseStartupToDelay(java.lang.String,java.lang.String,java.lang.String)> ==> <java.lang.Boolean: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.util.Optional: java.util.Optional empty()>() in <com.atlassian.plugin.manager.DefaultPluginManager$1: java.util.Optional parseStartupToDelay(java.lang.String,java.lang.String,java.lang.String)> ==> <java.util.Optional: java.util.Optional empty()>
STATIC edge: $r4 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager: org.slf4j.Logger access$1000()>() in <com.atlassian.plugin.manager.DefaultPluginManager$1: java.util.Optional parseStartupToDelay(java.lang.String,java.lang.String,java.lang.String)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: org.slf4j.Logger access$1000()>
STATIC edge: $r9 = staticinvoke <java.util.Optional: java.util.Optional of(java.lang.Object)>($r8) in <com.atlassian.plugin.manager.DefaultPluginManager$1: java.util.Optional parseStartupToDelay(java.lang.String,java.lang.String,java.lang.String)> ==> <java.util.Optional: java.util.Optional of(java.lang.Object)>
STATIC edge: $r11 = staticinvoke <java.util.Optional: java.util.Optional of(java.lang.Object)>($r10) in <com.atlassian.plugin.manager.DefaultPluginManager$1: java.util.Optional parseStartupToDelay(java.lang.String,java.lang.String,java.lang.String)> ==> <java.util.Optional: java.util.Optional of(java.lang.Object)>
CLINIT edge: $r4 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager: org.slf4j.Logger access$1000()>() in <com.atlassian.plugin.manager.DefaultPluginManager$1: java.util.Optional parseStartupToDelay(java.lang.String,java.lang.String,java.lang.String)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void <clinit>()>
CLINIT edge: $r8 = <java.lang.Boolean: java.lang.Boolean TRUE> in <com.atlassian.plugin.manager.DefaultPluginManager$1: java.util.Optional parseStartupToDelay(java.lang.String,java.lang.String,java.lang.String)> ==> <java.lang.Boolean: void <clinit>()>
CLINIT edge: $r0 = <com.atlassian.plugin.manager.DefaultPluginManager: org.slf4j.Logger log> in <com.atlassian.plugin.manager.DefaultPluginManager: org.slf4j.Logger access$1000()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void <clinit>()>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager$1: boolean test(com.atlassian.plugin.Plugin)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager$1: boolean test(java.lang.Object)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$1: boolean test(com.atlassian.plugin.Plugin)>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.function.Predicate: boolean test(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager$1: java.lang.Boolean lambda$test$0(java.util.function.Predicate,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.parsers.PluginInformationReader$ElementWithForApplicationsPredicate$lambda_test_0__31: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.function.Predicate: boolean test(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager$1: java.lang.Boolean lambda$test$0(java.util.function.Predicate,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$1: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.function.Predicate: boolean test(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager$1: java.lang.Boolean lambda$test$0(java.util.function.Predicate,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.util.ChainingClassLoader$nonNull__176: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.function.Predicate: boolean test(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager$1: java.lang.Boolean lambda$test$0(java.util.function.Predicate,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.parsers.PluginDescriptorReader$lambda_getPluginInformation_0__126: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.function.Predicate: boolean test(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager$1: java.lang.Boolean lambda$test$0(java.util.function.Predicate,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.JarPluginArtifact$isSpringContext__3: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.function.Predicate: boolean test(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager$1: java.lang.Boolean lambda$test$0(java.util.function.Predicate,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.JarPluginArtifact$lambda_extraModuleDescriptorFiles_1__4: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.function.Predicate: boolean test(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager$1: java.lang.Boolean lambda$test$0(java.util.function.Predicate,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler$1$lambda_getScope_0__161: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.function.Predicate: boolean test(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager$1: java.lang.Boolean lambda$test$0(java.util.function.Predicate,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DefaultPluginPersistentState$lambda_getPluginEnabledStateMap_0__128: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.function.Predicate: boolean test(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager$1: java.lang.Boolean lambda$test$0(java.util.function.Predicate,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_findDelayedPlugin_38__75: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.function.Predicate: boolean test(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager$1: java.lang.Boolean lambda$test$0(java.util.function.Predicate,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$nonNull__61: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.function.Predicate: boolean test(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager$1: java.lang.Boolean lambda$test$0(java.util.function.Predicate,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$Builder$lambda_new_0__183: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.function.Predicate: boolean test(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager$1: java.lang.Boolean lambda$test$0(java.util.function.Predicate,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.parsers.PluginDescriptorReader$lambda_getModules_2__127: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.function.Predicate: boolean test(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager$1: java.lang.Boolean lambda$test$0(java.util.function.Predicate,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase$isInstance__147: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.function.Predicate: boolean test(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager$1: java.lang.Boolean lambda$test$0(java.util.function.Predicate,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.parsers.PluginDescriptorReader$lambda_getModules_1__123: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.function.Predicate: boolean test(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager$1: java.lang.Boolean lambda$test$0(java.util.function.Predicate,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase$nonNull__145: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.function.Predicate: boolean test(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager$1: java.lang.Boolean lambda$test$0(java.util.function.Predicate,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.JarPluginArtifact$lambda_containsJavaExecutableCode_0__2: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.function.Predicate: boolean test(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager$1: java.lang.Boolean lambda$test$0(java.util.function.Predicate,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_isPluginEnabledInSafeMode_23__53: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.function.Predicate: boolean test(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager$1: java.lang.Boolean lambda$test$0(java.util.function.Predicate,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.SafeModuleExtractor$nonNull__182: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.function.Predicate: boolean test(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager$1: java.lang.Boolean lambda$test$0(java.util.function.Predicate,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase$nonNull__140: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.function.Predicate: boolean test(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager$1: java.lang.Boolean lambda$test$0(java.util.function.Predicate,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.predicate.EnabledPluginPredicate: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.function.Predicate: boolean test(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager$1: java.lang.Boolean lambda$test$0(java.util.function.Predicate,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.predicate.EnabledModulePredicate: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.function.Predicate: boolean test(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager$1: java.lang.Boolean lambda$test$0(java.util.function.Predicate,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.factories.XmlDynamicPluginFactory$lambda_static_0__111: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.function.Predicate: boolean test(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager$1: java.lang.Boolean lambda$test$0(java.util.function.Predicate,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.predicate.ModuleDescriptorOfClassPredicate: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.function.Predicate: boolean test(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager$1: java.lang.Boolean lambda$test$0(java.util.function.Predicate,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.predicate.ModuleOfClassPredicate: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.function.Predicate: boolean test(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager$1: java.lang.Boolean lambda$test$0(java.util.function.Predicate,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$isInstance__77: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.function.Predicate: boolean test(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager$1: java.lang.Boolean lambda$test$0(java.util.function.Predicate,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$doesPluginRequireRestart__92: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.function.Predicate: boolean test(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager$1: java.lang.Boolean lambda$test$0(java.util.function.Predicate,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.factories.LegacyDynamicPluginFactory$lambda_static_0__21: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.function.Predicate: boolean test(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager$1: java.lang.Boolean lambda$test$0(java.util.function.Predicate,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DependentPlugins$lambda_getPluginsByTypes_6__120: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.function.Predicate: boolean test(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager$1: java.lang.Boolean lambda$test$0(java.util.function.Predicate,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.parsers.PluginInformationReader$ElementWithForApplicationsPredicate: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.function.Predicate: boolean test(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager$1: java.lang.Boolean lambda$test$0(java.util.function.Predicate,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DependentPlugins$lambda_toStringList_3__117: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.function.Predicate: boolean test(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager$1: java.lang.Boolean lambda$test$0(java.util.function.Predicate,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DependentPlugins$lambda_getInDependencyOrder_0__113: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.function.Predicate: boolean test(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager$1: java.lang.Boolean lambda$test$0(java.util.function.Predicate,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getParamElements_12__168: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.function.Predicate: boolean test(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager$1: java.lang.Boolean lambda$test$0(java.util.function.Predicate,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.predicate.ModuleDescriptorOfClassPredicate$lambda_test_0__20: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.function.Predicate: boolean test(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager$1: java.lang.Boolean lambda$test$0(java.util.function.Predicate,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin$lambda_getPermissionsForCurrentInstallationMode_0__136: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.function.Predicate: boolean test(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager$1: java.lang.Boolean lambda$test$0(java.util.function.Predicate,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.parsers.PluginDescriptorReader$nonNull__122: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.function.Predicate: boolean test(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager$1: java.lang.Boolean lambda$test$0(java.util.function.Predicate,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DependentPlugins$lambda_toStringList_2__116: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.function.Predicate: boolean test(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager$1: java.lang.Boolean lambda$test$0(java.util.function.Predicate,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.predicate.PluginKeyPatternsPredicate: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.function.Predicate: boolean test(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager$1: java.lang.Boolean lambda$test$0(java.util.function.Predicate,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getPermissionElements_11__172: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.function.Predicate: boolean test(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager$1: java.lang.Boolean lambda$test$0(java.util.function.Predicate,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase$lambda_getEnabledPlugins_0__141: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.function.Predicate: boolean test(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager$1: java.lang.Boolean lambda$test$0(java.util.function.Predicate,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DependentPlugins$lambda_getPluginsByTypes_5__118: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.function.Predicate: boolean test(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager$1: java.lang.Boolean lambda$test$0(java.util.function.Predicate,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$nonNull__65: boolean test(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.String getStartupOverrideFileProperty()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.String getStartupOverrideFileProperty()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.String getStartupOverrideFileProperty()> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".startupOverrideFile") in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.String getStartupOverrideFileProperty()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.String getStartupOverrideFileProperty()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.String getLateStartupEnableRetryProperty()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.String getLateStartupEnableRetryProperty()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.String getLateStartupEnableRetryProperty()> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".lateStartupEnableRetry") in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.String getLateStartupEnableRetryProperty()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.String getLateStartupEnableRetryProperty()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.String getMinimumPluginVersionsFileProperty()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.String getMinimumPluginVersionsFileProperty()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.String getMinimumPluginVersionsFileProperty()> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".minimumPluginVersionsFile") in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.String getMinimumPluginVersionsFileProperty()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.String getMinimumPluginVersionsFileProperty()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke $r1.<com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withStore(com.atlassian.plugin.manager.PluginPersistentStateStore)>(r2) in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore,java.util.List,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withStore(com.atlassian.plugin.manager.PluginPersistentStateStore)>
VIRTUAL edge: $r5 = virtualinvoke $r3.<com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withPluginLoaders(java.util.List)>(r4) in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore,java.util.List,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withPluginLoaders(java.util.List)>
VIRTUAL edge: $r7 = virtualinvoke $r5.<com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withModuleDescriptorFactory(com.atlassian.plugin.ModuleDescriptorFactory)>(r6) in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore,java.util.List,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withModuleDescriptorFactory(com.atlassian.plugin.ModuleDescriptorFactory)>
VIRTUAL edge: $r9 = virtualinvoke $r7.<com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withPluginEventManager(com.atlassian.plugin.event.PluginEventManager)>(r8) in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore,java.util.List,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withPluginEventManager(com.atlassian.plugin.event.PluginEventManager)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.DefaultPluginManager$Builder)>($r9) in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore,java.util.List,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.DefaultPluginManager$Builder)>
CLINIT edge: $r17 = new com.atlassian.plugin.manager.PluginEnabler in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.DefaultPluginManager$Builder)> ==> <com.atlassian.plugin.manager.PluginEnabler: void <clinit>()>
STATIC edge: $r27 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$lambda_new_1__35: java.util.function.Supplier bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager)>(r0) in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.DefaultPluginManager$Builder)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_new_1__35: java.util.function.Supplier bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager)>
STATIC edge: $r25 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$lambda_new_0__32: java.util.function.Function bootstrap$()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.DefaultPluginManager$Builder)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_new_0__32: java.util.function.Function bootstrap$()>
STATIC edge: $r24 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$Builder: java.util.Optional access$900(com.atlassian.plugin.manager.DefaultPluginManager$Builder)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.DefaultPluginManager$Builder)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$Builder: java.util.Optional access$900(com.atlassian.plugin.manager.DefaultPluginManager$Builder)>
STATIC edge: $r23 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.PluginRegistry$ReadWrite access$800(com.atlassian.plugin.manager.DefaultPluginManager$Builder)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.DefaultPluginManager$Builder)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.PluginRegistry$ReadWrite access$800(com.atlassian.plugin.manager.DefaultPluginManager$Builder)>
STATIC edge: $r21 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$Builder: java.util.function.Predicate access$700(com.atlassian.plugin.manager.DefaultPluginManager$Builder)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.DefaultPluginManager$Builder)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$Builder: java.util.function.Predicate access$700(com.atlassian.plugin.manager.DefaultPluginManager$Builder)>
STATIC edge: $z0 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$Builder: boolean access$600(com.atlassian.plugin.manager.DefaultPluginManager$Builder)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.DefaultPluginManager$Builder)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$Builder: boolean access$600(com.atlassian.plugin.manager.DefaultPluginManager$Builder)>
STATIC edge: $r19 = staticinvoke <com.atlassian.plugin.util.Assertions: java.lang.Object notNull(java.lang.String,java.lang.Object)>("PluginExceptionInterception", $r18) in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.DefaultPluginManager$Builder)> ==> <com.atlassian.plugin.util.Assertions: java.lang.Object notNull(java.lang.String,java.lang.Object)>
STATIC edge: $r18 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.exception.PluginExceptionInterception access$500(com.atlassian.plugin.manager.DefaultPluginManager$Builder)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.DefaultPluginManager$Builder)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.exception.PluginExceptionInterception access$500(com.atlassian.plugin.manager.DefaultPluginManager$Builder)>
STATIC edge: $r15 = staticinvoke <com.atlassian.plugin.util.Assertions: java.lang.Object notNull(java.lang.String,java.lang.Object)>("PluginEventManager", $r14) in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.DefaultPluginManager$Builder)> ==> <com.atlassian.plugin.util.Assertions: java.lang.Object notNull(java.lang.String,java.lang.Object)>
STATIC edge: $r14 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.event.PluginEventManager access$400(com.atlassian.plugin.manager.DefaultPluginManager$Builder)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.DefaultPluginManager$Builder)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.event.PluginEventManager access$400(com.atlassian.plugin.manager.DefaultPluginManager$Builder)>
STATIC edge: $r12 = staticinvoke <com.atlassian.plugin.util.Assertions: java.lang.Object notNull(java.lang.String,java.lang.Object)>("ModuleDescriptorFactory", $r11) in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.DefaultPluginManager$Builder)> ==> <com.atlassian.plugin.util.Assertions: java.lang.Object notNull(java.lang.String,java.lang.Object)>
STATIC edge: $r11 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.ModuleDescriptorFactory access$300(com.atlassian.plugin.manager.DefaultPluginManager$Builder)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.DefaultPluginManager$Builder)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.ModuleDescriptorFactory access$300(com.atlassian.plugin.manager.DefaultPluginManager$Builder)>
STATIC edge: $r9 = staticinvoke <com.atlassian.plugin.util.Assertions: java.lang.Object notNull(java.lang.String,java.lang.Object)>("PluginPersistentStateStore", $r8) in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.DefaultPluginManager$Builder)> ==> <com.atlassian.plugin.util.Assertions: java.lang.Object notNull(java.lang.String,java.lang.Object)>
STATIC edge: $r8 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.PluginPersistentStateStore access$200(com.atlassian.plugin.manager.DefaultPluginManager$Builder)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.DefaultPluginManager$Builder)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.PluginPersistentStateStore access$200(com.atlassian.plugin.manager.DefaultPluginManager$Builder)>
STATIC edge: $r4 = staticinvoke <com.atlassian.plugin.util.Assertions: java.lang.Object notNull(java.lang.String,java.lang.Object)>("Plugin Loaders list", $r3) in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.DefaultPluginManager$Builder)> ==> <com.atlassian.plugin.util.Assertions: java.lang.Object notNull(java.lang.String,java.lang.Object)>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$Builder: java.util.List access$100(com.atlassian.plugin.manager.DefaultPluginManager$Builder)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.DefaultPluginManager$Builder)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$Builder: java.util.List access$100(com.atlassian.plugin.manager.DefaultPluginManager$Builder)>
STATIC edge: $r2 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.SafeModeManager access$000(com.atlassian.plugin.manager.DefaultPluginManager$Builder)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.DefaultPluginManager$Builder)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.SafeModeManager access$000(com.atlassian.plugin.manager.DefaultPluginManager$Builder)>
CLINIT edge: $r41 = new com.atlassian.plugin.manager.PluginTransactionContext in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.DefaultPluginManager$Builder)> ==> <com.atlassian.plugin.manager.PluginTransactionContext: void <clinit>()>
CLINIT edge: $r40 = new com.atlassian.plugin.manager.SafeModuleExtractor in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.DefaultPluginManager$Builder)> ==> <com.atlassian.plugin.manager.SafeModuleExtractor: void <clinit>()>
CLINIT edge: $r39 = new com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.DefaultPluginManager$Builder)> ==> <com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge: void <clinit>()>
VIRTUAL edge: $r3 = virtualinvoke $r1.<com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withStore(com.atlassian.plugin.manager.PluginPersistentStateStore)>(r2) in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore,java.util.List,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager,com.atlassian.plugin.exception.PluginExceptionInterception)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withStore(com.atlassian.plugin.manager.PluginPersistentStateStore)>
VIRTUAL edge: $r5 = virtualinvoke $r3.<com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withPluginLoaders(java.util.List)>(r4) in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore,java.util.List,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager,com.atlassian.plugin.exception.PluginExceptionInterception)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withPluginLoaders(java.util.List)>
VIRTUAL edge: $r7 = virtualinvoke $r5.<com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withModuleDescriptorFactory(com.atlassian.plugin.ModuleDescriptorFactory)>(r6) in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore,java.util.List,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager,com.atlassian.plugin.exception.PluginExceptionInterception)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withModuleDescriptorFactory(com.atlassian.plugin.ModuleDescriptorFactory)>
VIRTUAL edge: $r9 = virtualinvoke $r7.<com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withPluginEventManager(com.atlassian.plugin.event.PluginEventManager)>(r8) in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore,java.util.List,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager,com.atlassian.plugin.exception.PluginExceptionInterception)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withPluginEventManager(com.atlassian.plugin.event.PluginEventManager)>
VIRTUAL edge: $r11 = virtualinvoke $r9.<com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withPluginExceptionInterception(com.atlassian.plugin.exception.PluginExceptionInterception)>(r10) in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore,java.util.List,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager,com.atlassian.plugin.exception.PluginExceptionInterception)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withPluginExceptionInterception(com.atlassian.plugin.exception.PluginExceptionInterception)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.DefaultPluginManager$Builder)>($r11) in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore,java.util.List,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager,com.atlassian.plugin.exception.PluginExceptionInterception)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.DefaultPluginManager$Builder)>
VIRTUAL edge: $r3 = virtualinvoke $r1.<com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withStore(com.atlassian.plugin.manager.PluginPersistentStateStore)>(r2) in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore,java.util.List,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager,boolean)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withStore(com.atlassian.plugin.manager.PluginPersistentStateStore)>
VIRTUAL edge: $r5 = virtualinvoke $r3.<com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withPluginLoaders(java.util.List)>(r4) in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore,java.util.List,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager,boolean)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withPluginLoaders(java.util.List)>
VIRTUAL edge: $r7 = virtualinvoke $r5.<com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withModuleDescriptorFactory(com.atlassian.plugin.ModuleDescriptorFactory)>(r6) in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore,java.util.List,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager,boolean)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withModuleDescriptorFactory(com.atlassian.plugin.ModuleDescriptorFactory)>
VIRTUAL edge: $r9 = virtualinvoke $r7.<com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withPluginEventManager(com.atlassian.plugin.event.PluginEventManager)>(r8) in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore,java.util.List,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager,boolean)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withPluginEventManager(com.atlassian.plugin.event.PluginEventManager)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withVerifyRequiredPlugins(boolean)>(z0) in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore,java.util.List,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager,boolean)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withVerifyRequiredPlugins(boolean)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.DefaultPluginManager$Builder)>($r10) in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore,java.util.List,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager,boolean)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.DefaultPluginManager$Builder)>
VIRTUAL edge: $r3 = virtualinvoke $r1.<com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withStore(com.atlassian.plugin.manager.PluginPersistentStateStore)>(r2) in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore,java.util.List,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager,java.util.function.Predicate)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withStore(com.atlassian.plugin.manager.PluginPersistentStateStore)>
VIRTUAL edge: $r5 = virtualinvoke $r3.<com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withPluginLoaders(java.util.List)>(r4) in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore,java.util.List,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager,java.util.function.Predicate)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withPluginLoaders(java.util.List)>
VIRTUAL edge: $r7 = virtualinvoke $r5.<com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withModuleDescriptorFactory(com.atlassian.plugin.ModuleDescriptorFactory)>(r6) in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore,java.util.List,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager,java.util.function.Predicate)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withModuleDescriptorFactory(com.atlassian.plugin.ModuleDescriptorFactory)>
VIRTUAL edge: $r9 = virtualinvoke $r7.<com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withPluginEventManager(com.atlassian.plugin.event.PluginEventManager)>(r8) in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore,java.util.List,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager,java.util.function.Predicate)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withPluginEventManager(com.atlassian.plugin.event.PluginEventManager)>
VIRTUAL edge: $r11 = virtualinvoke $r9.<com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withDelayLoadOf(java.util.function.Predicate)>(r10) in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore,java.util.List,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager,java.util.function.Predicate)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withDelayLoadOf(java.util.function.Predicate)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.DefaultPluginManager$Builder)>($r11) in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore,java.util.List,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager,java.util.function.Predicate)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.DefaultPluginManager$Builder)>
VIRTUAL edge: $r3 = virtualinvoke $r1.<com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withStore(com.atlassian.plugin.manager.PluginPersistentStateStore)>(r2) in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore,java.util.List,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager,com.atlassian.plugin.exception.PluginExceptionInterception,java.util.function.Predicate)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withStore(com.atlassian.plugin.manager.PluginPersistentStateStore)>
VIRTUAL edge: $r5 = virtualinvoke $r3.<com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withPluginLoaders(java.util.List)>(r4) in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore,java.util.List,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager,com.atlassian.plugin.exception.PluginExceptionInterception,java.util.function.Predicate)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withPluginLoaders(java.util.List)>
VIRTUAL edge: $r7 = virtualinvoke $r5.<com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withModuleDescriptorFactory(com.atlassian.plugin.ModuleDescriptorFactory)>(r6) in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore,java.util.List,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager,com.atlassian.plugin.exception.PluginExceptionInterception,java.util.function.Predicate)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withModuleDescriptorFactory(com.atlassian.plugin.ModuleDescriptorFactory)>
VIRTUAL edge: $r9 = virtualinvoke $r7.<com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withPluginEventManager(com.atlassian.plugin.event.PluginEventManager)>(r8) in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore,java.util.List,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager,com.atlassian.plugin.exception.PluginExceptionInterception,java.util.function.Predicate)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withPluginEventManager(com.atlassian.plugin.event.PluginEventManager)>
VIRTUAL edge: $r11 = virtualinvoke $r9.<com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withPluginExceptionInterception(com.atlassian.plugin.exception.PluginExceptionInterception)>(r10) in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore,java.util.List,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager,com.atlassian.plugin.exception.PluginExceptionInterception,java.util.function.Predicate)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withPluginExceptionInterception(com.atlassian.plugin.exception.PluginExceptionInterception)>
VIRTUAL edge: $r13 = virtualinvoke $r11.<com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withDelayLoadOf(java.util.function.Predicate)>(r12) in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore,java.util.List,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager,com.atlassian.plugin.exception.PluginExceptionInterception,java.util.function.Predicate)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withDelayLoadOf(java.util.function.Predicate)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.DefaultPluginManager$Builder)>($r13) in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore,java.util.List,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager,com.atlassian.plugin.exception.PluginExceptionInterception,java.util.function.Predicate)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.DefaultPluginManager$Builder)>
VIRTUAL edge: $r3 = virtualinvoke $r1.<com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withStore(com.atlassian.plugin.manager.PluginPersistentStateStore)>(r2) in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore,java.util.List,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager,com.atlassian.plugin.exception.PluginExceptionInterception,boolean)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withStore(com.atlassian.plugin.manager.PluginPersistentStateStore)>
VIRTUAL edge: $r5 = virtualinvoke $r3.<com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withPluginLoaders(java.util.List)>(r4) in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore,java.util.List,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager,com.atlassian.plugin.exception.PluginExceptionInterception,boolean)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withPluginLoaders(java.util.List)>
VIRTUAL edge: $r7 = virtualinvoke $r5.<com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withModuleDescriptorFactory(com.atlassian.plugin.ModuleDescriptorFactory)>(r6) in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore,java.util.List,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager,com.atlassian.plugin.exception.PluginExceptionInterception,boolean)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withModuleDescriptorFactory(com.atlassian.plugin.ModuleDescriptorFactory)>
VIRTUAL edge: $r9 = virtualinvoke $r7.<com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withPluginEventManager(com.atlassian.plugin.event.PluginEventManager)>(r8) in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore,java.util.List,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager,com.atlassian.plugin.exception.PluginExceptionInterception,boolean)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withPluginEventManager(com.atlassian.plugin.event.PluginEventManager)>
VIRTUAL edge: $r11 = virtualinvoke $r9.<com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withPluginExceptionInterception(com.atlassian.plugin.exception.PluginExceptionInterception)>(r10) in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore,java.util.List,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager,com.atlassian.plugin.exception.PluginExceptionInterception,boolean)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withPluginExceptionInterception(com.atlassian.plugin.exception.PluginExceptionInterception)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withVerifyRequiredPlugins(boolean)>(z0) in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore,java.util.List,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager,com.atlassian.plugin.exception.PluginExceptionInterception,boolean)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withVerifyRequiredPlugins(boolean)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.DefaultPluginManager$Builder)>($r12) in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore,java.util.List,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager,com.atlassian.plugin.exception.PluginExceptionInterception,boolean)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.DefaultPluginManager$Builder)>
VIRTUAL edge: $r3 = virtualinvoke $r1.<com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withStore(com.atlassian.plugin.manager.PluginPersistentStateStore)>(r2) in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore,java.util.List,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager,com.atlassian.plugin.exception.PluginExceptionInterception,boolean,java.util.function.Predicate)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withStore(com.atlassian.plugin.manager.PluginPersistentStateStore)>
VIRTUAL edge: $r5 = virtualinvoke $r3.<com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withPluginLoaders(java.util.List)>(r4) in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore,java.util.List,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager,com.atlassian.plugin.exception.PluginExceptionInterception,boolean,java.util.function.Predicate)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withPluginLoaders(java.util.List)>
VIRTUAL edge: $r7 = virtualinvoke $r5.<com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withModuleDescriptorFactory(com.atlassian.plugin.ModuleDescriptorFactory)>(r6) in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore,java.util.List,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager,com.atlassian.plugin.exception.PluginExceptionInterception,boolean,java.util.function.Predicate)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withModuleDescriptorFactory(com.atlassian.plugin.ModuleDescriptorFactory)>
VIRTUAL edge: $r9 = virtualinvoke $r7.<com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withPluginEventManager(com.atlassian.plugin.event.PluginEventManager)>(r8) in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore,java.util.List,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager,com.atlassian.plugin.exception.PluginExceptionInterception,boolean,java.util.function.Predicate)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withPluginEventManager(com.atlassian.plugin.event.PluginEventManager)>
VIRTUAL edge: $r11 = virtualinvoke $r9.<com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withPluginExceptionInterception(com.atlassian.plugin.exception.PluginExceptionInterception)>(r10) in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore,java.util.List,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager,com.atlassian.plugin.exception.PluginExceptionInterception,boolean,java.util.function.Predicate)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withPluginExceptionInterception(com.atlassian.plugin.exception.PluginExceptionInterception)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withVerifyRequiredPlugins(boolean)>(z0) in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore,java.util.List,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager,com.atlassian.plugin.exception.PluginExceptionInterception,boolean,java.util.function.Predicate)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withVerifyRequiredPlugins(boolean)>
VIRTUAL edge: $r14 = virtualinvoke $r12.<com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withDelayLoadOf(java.util.function.Predicate)>(r13) in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore,java.util.List,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager,com.atlassian.plugin.exception.PluginExceptionInterception,boolean,java.util.function.Predicate)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withDelayLoadOf(java.util.function.Predicate)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.DefaultPluginManager$Builder)>($r14) in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore,java.util.List,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager,com.atlassian.plugin.exception.PluginExceptionInterception,boolean,java.util.function.Predicate)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.DefaultPluginManager$Builder)>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.manager.DefaultPluginManager$Builder: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.manager.DefaultPluginManager$Builder newBuilder()> ==> <com.atlassian.plugin.manager.DefaultPluginManager$Builder: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager: void init()> ==> <com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)>
VIRTUAL edge: virtualinvoke $r1.<com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager: void earlyStartup()> ==> <com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)>
VIRTUAL edge: virtualinvoke $r1.<com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager: void lateStartup()> ==> <com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)>
VIRTUAL edge: virtualinvoke $r1.<com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager: void shutdown()> ==> <com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)>
VIRTUAL edge: virtualinvoke $r1.<com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager: void warmRestart()> ==> <com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)>
VIRTUAL edge: virtualinvoke $r2.<com.atlassian.plugin.manager.PluginTransactionContext: java.lang.Object wrap(java.util.function.Supplier)>($r3) in <com.atlassian.plugin.manager.DefaultPluginManager: void onPluginModuleAvailable(com.atlassian.plugin.event.events.PluginModuleAvailableEvent)> ==> <com.atlassian.plugin.manager.PluginTransactionContext: java.lang.Object wrap(java.util.function.Supplier)>
VIRTUAL edge: virtualinvoke $r2.<com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)>($r3) in <com.atlassian.plugin.manager.DefaultPluginManager: void onPluginModuleUnavailable(com.atlassian.plugin.event.events.PluginModuleUnavailableEvent)> ==> <com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)>
VIRTUAL edge: virtualinvoke $r2.<com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)>($r3) in <com.atlassian.plugin.manager.DefaultPluginManager: void onPluginContainerUnavailable(com.atlassian.plugin.event.events.PluginContainerUnavailableEvent)> ==> <com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)>
VIRTUAL edge: virtualinvoke $r2.<com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)>($r3) in <com.atlassian.plugin.manager.DefaultPluginManager: void onPluginRefresh(com.atlassian.plugin.event.events.PluginRefreshedEvent)> ==> <com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)>
SPECIAL edge: specialinvoke $r2.<com.atlassian.plugin.manager.NoOpRevertablePluginInstaller: void <init>(com.atlassian.plugin.PluginInstaller)>(r0) in <com.atlassian.plugin.manager.DefaultPluginManager: void setPluginInstaller(com.atlassian.plugin.PluginInstaller)> ==> <com.atlassian.plugin.manager.NoOpRevertablePluginInstaller: void <init>(com.atlassian.plugin.PluginInstaller)>
SPECIAL edge: specialinvoke $r0.<java.util.LinkedHashMap: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.Set installPlugins(com.atlassian.plugin.PluginArtifact[])> ==> <java.util.LinkedHashMap: void <init>()>
INTERFACE edge: $r6 = interfaceinvoke $r0.<java.util.Map: java.util.Set keySet()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.Set installPlugins(com.atlassian.plugin.PluginArtifact[])> ==> <java.util.HashMap: java.util.Set keySet()>
VIRTUAL edge: virtualinvoke $r4.<com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)>($r5) in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.Set installPlugins(com.atlassian.plugin.PluginArtifact[])> ==> <com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)>
VIRTUAL edge: r2 = virtualinvoke $r1.<com.atlassian.plugin.manager.StateTracker: com.atlassian.plugin.manager.StateTracker$State get()>() in <com.atlassian.plugin.manager.DefaultPluginManager: int scanForNewPlugins()> ==> <com.atlassian.plugin.manager.StateTracker: com.atlassian.plugin.manager.StateTracker$State get()>
SPECIAL edge: specialinvoke $r4.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0) in <com.atlassian.plugin.manager.DefaultPluginManager: int scanForNewPlugins()> ==> <java.util.concurrent.atomic.AtomicInteger: void <init>(int)>
VIRTUAL edge: $i0 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicInteger: int get()>() in <com.atlassian.plugin.manager.DefaultPluginManager: int scanForNewPlugins()> ==> <java.util.concurrent.atomic.AtomicInteger: int get()>
VIRTUAL edge: virtualinvoke $r6.<com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)>($r7) in <com.atlassian.plugin.manager.DefaultPluginManager: int scanForNewPlugins()> ==> <com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)>
VIRTUAL edge: virtualinvoke $r2.<com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)>($r3) in <com.atlassian.plugin.manager.DefaultPluginManager: void uninstall(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)>
VIRTUAL edge: virtualinvoke $r2.<com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)>($r3) in <com.atlassian.plugin.manager.DefaultPluginManager: void uninstallPlugins(java.util.Collection)> ==> <com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)>
VIRTUAL edge: virtualinvoke $r2.<com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)>($r3) in <com.atlassian.plugin.manager.DefaultPluginManager: void revertRestartRequiredChange(java.lang.String)> ==> <com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.atlassian.plugin.PluginRegistry$ReadWrite: java.util.Collection getAll()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.Collection getPlugins()> ==> <com.atlassian.plugin.manager.PluginRegistryImpl: java.util.Collection getAll()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: java.util.Collection getPlugins()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.Collection getPlugins(java.util.function.Predicate)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: java.util.Collection getPlugins()>
INTERFACE edge: $r4 = interfaceinvoke $r2.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>(r3) in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.Collection getPlugins(java.util.function.Predicate)> ==> <java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>
INTERFACE edge: $r8 = interfaceinvoke $r4.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r7) in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.Collection getPlugins(java.util.function.Predicate)> ==> <java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<com.atlassian.plugin.manager.PluginEnabler: java.util.Set getPluginsBeingEnabled()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.Collection getEnabledPlugins()> ==> <com.atlassian.plugin.manager.PluginEnabler: java.util.Set getPluginsBeingEnabled()>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.predicate.EnabledPluginPredicate: void <init>(java.util.Set)>($r3) in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.Collection getEnabledPlugins()> ==> <com.atlassian.plugin.predicate.EnabledPluginPredicate: void <init>(java.util.Set)>
VIRTUAL edge: $r4 = virtualinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: java.util.Collection getPlugins(java.util.function.Predicate)>($r1) in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.Collection getEnabledPlugins()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: java.util.Collection getPlugins(java.util.function.Predicate)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: java.util.Collection getPlugins()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.Collection getModules(java.util.function.Predicate)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: java.util.Collection getPlugins()>
SPECIAL edge: $r3 = specialinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: java.util.stream.Stream getModuleDescriptors(java.util.Collection,java.util.function.Predicate)>($r1, r2) in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.Collection getModules(java.util.function.Predicate)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: java.util.stream.Stream getModuleDescriptors(java.util.Collection,java.util.function.Predicate)>
VIRTUAL edge: virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.Collection getModules(java.util.function.Predicate)> ==> <java.lang.Object: java.lang.Class getClass()>
INTERFACE edge: $r7 = interfaceinvoke $r3.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r6) in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.Collection getModules(java.util.function.Predicate)> ==> <java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>
INTERFACE edge: $r9 = interfaceinvoke $r7.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($r8) in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.Collection getModules(java.util.function.Predicate)> ==> <java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>
INTERFACE edge: $r13 = interfaceinvoke $r9.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r12) in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.Collection getModules(java.util.function.Predicate)> ==> <java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>
STATIC edge: $r2 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$lambda_getModuleDescriptors_27__60: java.util.function.Function bootstrap$()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.stream.Stream getModuleDescriptors(java.util.Collection,java.util.function.Predicate)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_getModuleDescriptors_27__60: java.util.function.Function bootstrap$()>
STATIC edge: $r4 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$lambda_getModuleDescriptors_28__62: java.util.function.Function bootstrap$()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.stream.Stream getModuleDescriptors(java.util.Collection,java.util.function.Predicate)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_getModuleDescriptors_28__62: java.util.function.Function bootstrap$()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: java.util.Collection getPlugins()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.Collection getModuleDescriptors(java.util.function.Predicate)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: java.util.Collection getPlugins()>
SPECIAL edge: $r3 = specialinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: java.util.stream.Stream getModuleDescriptors(java.util.Collection,java.util.function.Predicate)>($r1, r2) in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.Collection getModuleDescriptors(java.util.function.Predicate)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: java.util.stream.Stream getModuleDescriptors(java.util.Collection,java.util.function.Predicate)>
INTERFACE edge: $r7 = interfaceinvoke $r3.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r6) in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.Collection getModuleDescriptors(java.util.function.Predicate)> ==> <java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>
INTERFACE edge: $r5 = interfaceinvoke $r2.<com.atlassian.plugin.PluginRegistry$ReadWrite: com.atlassian.plugin.Plugin get(java.lang.String)>($r4) in <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.Plugin getPlugin(java.lang.String)> ==> <com.atlassian.plugin.manager.PluginRegistryImpl: com.atlassian.plugin.Plugin get(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: boolean isPluginEnabled(java.lang.String)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.Plugin getEnabledPlugin(java.lang.String)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: boolean isPluginEnabled(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.Plugin getPlugin(java.lang.String)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.Plugin getEnabledPlugin(java.lang.String)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.Plugin getPlugin(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.ModuleCompleteKey: void <init>(java.lang.String)>(r2) in <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.ModuleDescriptor getPluginModule(java.lang.String)> ==> <com.atlassian.plugin.ModuleCompleteKey: void <init>(java.lang.String)>
SPECIAL edge: $r3 = specialinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.ModuleDescriptor getPluginModule(com.atlassian.plugin.ModuleCompleteKey)>($r1) in <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.ModuleDescriptor getPluginModule(java.lang.String)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.ModuleDescriptor getPluginModule(com.atlassian.plugin.ModuleCompleteKey)>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.ModuleCompleteKey: void <init>(java.lang.String)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.ModuleDescriptor getEnabledPluginModule(java.lang.String)> ==> <com.atlassian.plugin.ModuleCompleteKey: void <init>(java.lang.String)>
SPECIAL edge: $z0 = specialinvoke r3.<com.atlassian.plugin.manager.DefaultPluginManager: boolean isPluginModuleEnabled(com.atlassian.plugin.ModuleCompleteKey)>($r0) in <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.ModuleDescriptor getEnabledPluginModule(java.lang.String)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: boolean isPluginModuleEnabled(com.atlassian.plugin.ModuleCompleteKey)>
VIRTUAL edge: $r5 = virtualinvoke r3.<com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.Plugin getEnabledPlugin(java.lang.String)>($r4) in <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.ModuleDescriptor getEnabledPluginModule(java.lang.String)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.Plugin getEnabledPlugin(java.lang.String)>
INTERFACE edge: $r7 = interfaceinvoke $r5.<com.atlassian.plugin.Plugin: com.atlassian.plugin.ModuleDescriptor getModuleDescriptor(java.lang.String)>($r6) in <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.ModuleDescriptor getEnabledPluginModule(java.lang.String)> ==> <com.atlassian.plugin.impl.AbstractPlugin: com.atlassian.plugin.ModuleDescriptor getModuleDescriptor(java.lang.String)>
SPECIAL edge: $r2 = specialinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: java.util.stream.Stream getEnabledModuleDescriptorsByModuleClass(java.lang.Class)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.List getEnabledModulesByClass(java.lang.Class)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: java.util.stream.Stream getEnabledModuleDescriptorsByModuleClass(java.lang.Class)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.List getEnabledModulesByClass(java.lang.Class)> ==> <java.lang.Object: java.lang.Class getClass()>
INTERFACE edge: $r6 = interfaceinvoke $r2.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r5) in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.List getEnabledModulesByClass(java.lang.Class)> ==> <java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>
INTERFACE edge: $r8 = interfaceinvoke $r6.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($r7) in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.List getEnabledModulesByClass(java.lang.Class)> ==> <java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>
INTERFACE edge: $r12 = interfaceinvoke $r8.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r11) in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.List getEnabledModulesByClass(java.lang.Class)> ==> <java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: java.util.Collection getEnabledPlugins()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.List getEnabledModuleDescriptorsByClass(java.lang.Class)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: java.util.Collection getEnabledPlugins()>
VIRTUAL edge: virtualinvoke r5.<java.lang.Object: java.lang.Class getClass()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.List getEnabledModuleDescriptorsByClass(java.lang.Class)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: virtualinvoke r5.<java.lang.Object: java.lang.Class getClass()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.List getEnabledModuleDescriptorsByClass(java.lang.Class)> ==> <java.lang.Object: java.lang.Class getClass()>
INTERFACE edge: $r8 = interfaceinvoke $r4.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($r7) in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.List getEnabledModuleDescriptorsByClass(java.lang.Class)> ==> <java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>
SPECIAL edge: specialinvoke $r9.<com.atlassian.plugin.predicate.EnabledModulePredicate: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.List getEnabledModuleDescriptorsByClass(java.lang.Class)> ==> <com.atlassian.plugin.predicate.EnabledModulePredicate: void <init>()>
INTERFACE edge: $r10 = interfaceinvoke $r8.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($r9) in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.List getEnabledModuleDescriptorsByClass(java.lang.Class)> ==> <java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>
INTERFACE edge: $r13 = interfaceinvoke $r10.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r12) in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.List getEnabledModuleDescriptorsByClass(java.lang.Class)> ==> <java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>
INTERFACE edge: $r17 = interfaceinvoke $r13.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r16) in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.List getEnabledModuleDescriptorsByClass(java.lang.Class)> ==> <java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>
VIRTUAL edge: virtualinvoke $r2.<com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)>($r3) in <com.atlassian.plugin.manager.DefaultPluginManager: void enablePlugins(java.lang.String[])> ==> <com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)>
VIRTUAL edge: virtualinvoke $r2.<com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)>($r3) in <com.atlassian.plugin.manager.DefaultPluginManager: void disablePlugin(java.lang.String)> ==> <com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)>
VIRTUAL edge: virtualinvoke $r2.<com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)>($r3) in <com.atlassian.plugin.manager.DefaultPluginManager: void disablePluginWithoutPersisting(java.lang.String)> ==> <com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)>
VIRTUAL edge: virtualinvoke $r2.<com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)>($r3) in <com.atlassian.plugin.manager.DefaultPluginManager: void disablePluginModule(java.lang.String)> ==> <com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)>
VIRTUAL edge: virtualinvoke $r2.<com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)>($r3) in <com.atlassian.plugin.manager.DefaultPluginManager: void enablePluginModule(java.lang.String)> ==> <com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)>
SPECIAL edge: specialinvoke $r2.<com.atlassian.plugin.ModuleCompleteKey: void <init>(java.lang.String)>(r0) in <com.atlassian.plugin.manager.DefaultPluginManager: boolean isPluginModuleEnabled(java.lang.String)> ==> <com.atlassian.plugin.ModuleCompleteKey: void <init>(java.lang.String)>
SPECIAL edge: $z0 = specialinvoke r1.<com.atlassian.plugin.manager.DefaultPluginManager: boolean isPluginModuleEnabled(com.atlassian.plugin.ModuleCompleteKey)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager: boolean isPluginModuleEnabled(java.lang.String)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: boolean isPluginModuleEnabled(com.atlassian.plugin.ModuleCompleteKey)>
INTERFACE edge: r5 = interfaceinvoke $r2.<com.atlassian.plugin.PluginRegistry$ReadWrite: com.atlassian.plugin.Plugin get(java.lang.String)>($r4) in <com.atlassian.plugin.manager.DefaultPluginManager: boolean isPluginEnabled(java.lang.String)> ==> <com.atlassian.plugin.manager.PluginRegistryImpl: com.atlassian.plugin.Plugin get(java.lang.String)>
INTERFACE edge: $r6 = interfaceinvoke r5.<com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginState getPluginState()>() in <com.atlassian.plugin.manager.DefaultPluginManager: boolean isPluginEnabled(java.lang.String)> ==> <com.atlassian.plugin.impl.AbstractPlugin: com.atlassian.plugin.PluginState getPluginState()>
INTERFACE edge: $r6 = interfaceinvoke r5.<com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginState getPluginState()>() in <com.atlassian.plugin.manager.DefaultPluginManager: boolean isPluginEnabled(java.lang.String)> ==> <com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginState getPluginState()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.classloader.PluginsClassLoader getClassLoader()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.io.InputStream getDynamicResourceAsStream(java.lang.String)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.classloader.PluginsClassLoader getClassLoader()>
VIRTUAL edge: $r3 = virtualinvoke $r1.<com.atlassian.plugin.classloader.PluginsClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>(r2) in <com.atlassian.plugin.manager.DefaultPluginManager: java.io.InputStream getDynamicResourceAsStream(java.lang.String)> ==> <java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.classloader.PluginsClassLoader getClassLoader()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Class getDynamicPluginClass(java.lang.String)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.classloader.PluginsClassLoader getClassLoader()>
VIRTUAL edge: $r3 = virtualinvoke $r1.<com.atlassian.plugin.classloader.PluginsClassLoader: java.lang.Class loadClass(java.lang.String)>(r2) in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Class getDynamicPluginClass(java.lang.String)> ==> <java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>
VIRTUAL edge: r2 = virtualinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.Plugin getPlugin(java.lang.String)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager: boolean isSystemPlugin(java.lang.String)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.Plugin getPlugin(java.lang.String)>
INTERFACE edge: $z0 = interfaceinvoke r2.<com.atlassian.plugin.Plugin: boolean isSystemPlugin()>() in <com.atlassian.plugin.manager.DefaultPluginManager: boolean isSystemPlugin(java.lang.String)> ==> <com.atlassian.plugin.impl.AbstractPlugin: boolean isSystemPlugin()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.manager.PluginPersistentState getState()>() in <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.PluginRestartState getPluginRestartState(java.lang.String)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.manager.PluginPersistentState getState()>
INTERFACE edge: $r3 = interfaceinvoke $r1.<com.atlassian.plugin.manager.PluginPersistentState: com.atlassian.plugin.PluginRestartState getPluginRestartState(java.lang.String)>(r2) in <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.PluginRestartState getPluginRestartState(java.lang.String)> ==> <com.atlassian.plugin.manager.PluginPersistentState: com.atlassian.plugin.PluginRestartState getPluginRestartState(java.lang.String)>
INTERFACE edge: $r3 = interfaceinvoke $r1.<com.atlassian.plugin.manager.PluginPersistentState: com.atlassian.plugin.PluginRestartState getPluginRestartState(java.lang.String)>(r2) in <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.PluginRestartState getPluginRestartState(java.lang.String)> ==> <com.atlassian.plugin.manager.DefaultPluginPersistentState: com.atlassian.plugin.PluginRestartState getPluginRestartState(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.util.concurrent.atomic.AtomicReference: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.ModuleDescriptor addDynamicModule(com.atlassian.plugin.Plugin,org.dom4j.Element)> ==> <java.util.concurrent.atomic.AtomicReference: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>() in <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.ModuleDescriptor addDynamicModule(com.atlassian.plugin.Plugin,org.dom4j.Element)> ==> <java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>
VIRTUAL edge: virtualinvoke $r5.<com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)>($r6) in <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.ModuleDescriptor addDynamicModule(com.atlassian.plugin.Plugin,org.dom4j.Element)> ==> <com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)>
VIRTUAL edge: r2 = virtualinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.PluginInternal checkPluginInternal(com.atlassian.plugin.Plugin)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Iterable getDynamicModules(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.PluginInternal checkPluginInternal(com.atlassian.plugin.Plugin)>
INTERFACE edge: $r3 = interfaceinvoke r2.<com.atlassian.plugin.PluginInternal: java.lang.Iterable getDynamicModuleDescriptors()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Iterable getDynamicModules(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.Iterable getDynamicModuleDescriptors()>
VIRTUAL edge: virtualinvoke $r3.<com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)>($r4) in <com.atlassian.plugin.manager.DefaultPluginManager: void removeDynamicModule(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.classloader.PluginsClassLoader getClassLoader()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.ClassLoader getClassLoader()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.classloader.PluginsClassLoader getClassLoader()>
VIRTUAL edge: r2 = virtualinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.PluginInternal checkPluginInternal(com.atlassian.plugin.Plugin)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$removeDynamicModule$48(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.PluginInternal checkPluginInternal(com.atlassian.plugin.Plugin)>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: void notifyModuleDisabled(com.atlassian.plugin.ModuleDescriptor)>(r3) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$removeDynamicModule$48(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void notifyModuleDisabled(com.atlassian.plugin.ModuleDescriptor)>
INTERFACE edge: $z0 = interfaceinvoke r2.<com.atlassian.plugin.PluginInternal: boolean removeDynamicModuleDescriptor(com.atlassian.plugin.ModuleDescriptor)>(r3) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$removeDynamicModule$48(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.impl.AbstractPlugin: boolean removeDynamicModuleDescriptor(com.atlassian.plugin.ModuleDescriptor)>
SPECIAL edge: specialinvoke $r14.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$removeDynamicModule$48(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot remove dynamic module \'") in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$removeDynamicModule$48(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
INTERFACE edge: $r8 = interfaceinvoke r3.<com.atlassian.plugin.ModuleDescriptor: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$removeDynamicModule$48(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.ModuleDescriptor: java.lang.String getKey()>
INTERFACE edge: $r8 = interfaceinvoke r3.<com.atlassian.plugin.ModuleDescriptor: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$removeDynamicModule$48(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.String getKey()>
INTERFACE edge: interfaceinvoke r3.<com.atlassian.plugin.ModuleDescriptor: void destroy()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$removeDynamicModule$48(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void destroy()>
VIRTUAL edge: $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$removeDynamicModule$48(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' from plugin \'") in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$removeDynamicModule$48(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$removeDynamicModule$48(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' as it wasn\'t added by addDynamicModule") in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$removeDynamicModule$48(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$removeDynamicModule$48(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r15.<com.atlassian.plugin.PluginException: void <init>(java.lang.String)>($r13) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$removeDynamicModule$48(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.PluginException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r4.<com.atlassian.plugin.manager.PluginPersistentStateModifier: void disable(com.atlassian.plugin.ModuleDescriptor)>(r3) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$removeDynamicModule$48(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.manager.PluginPersistentStateModifier: void disable(com.atlassian.plugin.ModuleDescriptor)>
VIRTUAL edge: r2 = virtualinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.PluginInternal checkPluginInternal(com.atlassian.plugin.Plugin)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addDynamicModule$47(com.atlassian.plugin.Plugin,org.dom4j.Element,java.util.concurrent.atomic.AtomicReference)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.PluginInternal checkPluginInternal(com.atlassian.plugin.Plugin)>
VIRTUAL edge: $r14 = virtualinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.manager.PluginPersistentState getState()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addDynamicModule$47(com.atlassian.plugin.Plugin,org.dom4j.Element,java.util.concurrent.atomic.AtomicReference)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.manager.PluginPersistentState getState()>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: void notifyModuleEnabled(com.atlassian.plugin.ModuleDescriptor)>(r8) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addDynamicModule$47(com.atlassian.plugin.Plugin,org.dom4j.Element,java.util.concurrent.atomic.AtomicReference)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void notifyModuleEnabled(com.atlassian.plugin.ModuleDescriptor)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addDynamicModule$47(com.atlassian.plugin.Plugin,org.dom4j.Element,java.util.concurrent.atomic.AtomicReference)> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addDynamicModule$47(com.atlassian.plugin.Plugin,org.dom4j.Element,java.util.concurrent.atomic.AtomicReference)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addDynamicModule$47(com.atlassian.plugin.Plugin,org.dom4j.Element,java.util.concurrent.atomic.AtomicReference)> ==> <java.util.TreeMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addDynamicModule$47(com.atlassian.plugin.Plugin,org.dom4j.Element,java.util.concurrent.atomic.AtomicReference)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addDynamicModule$47(com.atlassian.plugin.Plugin,org.dom4j.Element,java.util.concurrent.atomic.AtomicReference)> ==> <java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>
SPECIAL edge: specialinvoke $r48.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addDynamicModule$47(com.atlassian.plugin.Plugin,org.dom4j.Element,java.util.concurrent.atomic.AtomicReference)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r44 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot locate PluginLoader that created plugin \'") in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addDynamicModule$47(com.atlassian.plugin.Plugin,org.dom4j.Element,java.util.concurrent.atomic.AtomicReference)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addDynamicModule$47(com.atlassian.plugin.Plugin,org.dom4j.Element,java.util.concurrent.atomic.AtomicReference)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'") in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addDynamicModule$47(com.atlassian.plugin.Plugin,org.dom4j.Element,java.util.concurrent.atomic.AtomicReference)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addDynamicModule$47(com.atlassian.plugin.Plugin,org.dom4j.Element,java.util.concurrent.atomic.AtomicReference)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r49.<com.atlassian.plugin.PluginException: void <init>(java.lang.String)>($r47) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addDynamicModule$47(com.atlassian.plugin.Plugin,org.dom4j.Element,java.util.concurrent.atomic.AtomicReference)> ==> <com.atlassian.plugin.PluginException: void <init>(java.lang.String)>
INTERFACE edge: r8 = interfaceinvoke r5.<com.atlassian.plugin.loaders.PluginLoader: com.atlassian.plugin.ModuleDescriptor createModule(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)>(r2, r6, $r7) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addDynamicModule$47(com.atlassian.plugin.Plugin,org.dom4j.Element,java.util.concurrent.atomic.AtomicReference)> ==> <com.atlassian.plugin.loaders.ForwardingPluginLoader: com.atlassian.plugin.ModuleDescriptor createModule(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)>
INTERFACE edge: r8 = interfaceinvoke r5.<com.atlassian.plugin.loaders.PluginLoader: com.atlassian.plugin.ModuleDescriptor createModule(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)>(r2, r6, $r7) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addDynamicModule$47(com.atlassian.plugin.Plugin,org.dom4j.Element,java.util.concurrent.atomic.AtomicReference)> ==> <com.atlassian.plugin.loaders.SinglePluginLoader: com.atlassian.plugin.ModuleDescriptor createModule(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)>
INTERFACE edge: r8 = interfaceinvoke r5.<com.atlassian.plugin.loaders.PluginLoader: com.atlassian.plugin.ModuleDescriptor createModule(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)>(r2, r6, $r7) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addDynamicModule$47(com.atlassian.plugin.Plugin,org.dom4j.Element,java.util.concurrent.atomic.AtomicReference)> ==> <com.atlassian.plugin.loaders.ClassPathPluginLoader: com.atlassian.plugin.ModuleDescriptor createModule(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)>
INTERFACE edge: r8 = interfaceinvoke r5.<com.atlassian.plugin.loaders.PluginLoader: com.atlassian.plugin.ModuleDescriptor createModule(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)>(r2, r6, $r7) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addDynamicModule$47(com.atlassian.plugin.Plugin,org.dom4j.Element,java.util.concurrent.atomic.AtomicReference)> ==> <com.atlassian.plugin.loaders.ScanningPluginLoader: com.atlassian.plugin.ModuleDescriptor createModule(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)>
VIRTUAL edge: virtualinvoke r9.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(r8) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addDynamicModule$47(com.atlassian.plugin.Plugin,org.dom4j.Element,java.util.concurrent.atomic.AtomicReference)> ==> <java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>
SPECIAL edge: specialinvoke $r50.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addDynamicModule$47(com.atlassian.plugin.Plugin,org.dom4j.Element,java.util.concurrent.atomic.AtomicReference)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r35 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot add dynamic module of type \'") in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addDynamicModule$47(com.atlassian.plugin.Plugin,org.dom4j.Element,java.util.concurrent.atomic.AtomicReference)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addDynamicModule$47(com.atlassian.plugin.Plugin,org.dom4j.Element,java.util.concurrent.atomic.AtomicReference)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' to plugin \'") in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addDynamicModule$47(com.atlassian.plugin.Plugin,org.dom4j.Element,java.util.concurrent.atomic.AtomicReference)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addDynamicModule$47(com.atlassian.plugin.Plugin,org.dom4j.Element,java.util.concurrent.atomic.AtomicReference)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' as the PluginLoader does not know how to create the module") in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addDynamicModule$47(com.atlassian.plugin.Plugin,org.dom4j.Element,java.util.concurrent.atomic.AtomicReference)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addDynamicModule$47(com.atlassian.plugin.Plugin,org.dom4j.Element,java.util.concurrent.atomic.AtomicReference)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r51.<com.atlassian.plugin.PluginException: void <init>(java.lang.String)>($r41) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addDynamicModule$47(com.atlassian.plugin.Plugin,org.dom4j.Element,java.util.concurrent.atomic.AtomicReference)> ==> <com.atlassian.plugin.PluginException: void <init>(java.lang.String)>
INTERFACE edge: $r10 = interfaceinvoke r8.<com.atlassian.plugin.ModuleDescriptor: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addDynamicModule$47(com.atlassian.plugin.Plugin,org.dom4j.Element,java.util.concurrent.atomic.AtomicReference)> ==> <com.atlassian.plugin.ModuleDescriptor: java.lang.String getKey()>
INTERFACE edge: $r10 = interfaceinvoke r8.<com.atlassian.plugin.ModuleDescriptor: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addDynamicModule$47(com.atlassian.plugin.Plugin,org.dom4j.Element,java.util.concurrent.atomic.AtomicReference)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.String getKey()>
INTERFACE edge: $r27 = interfaceinvoke r8.<com.atlassian.plugin.ModuleDescriptor: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addDynamicModule$47(com.atlassian.plugin.Plugin,org.dom4j.Element,java.util.concurrent.atomic.AtomicReference)> ==> <com.atlassian.plugin.ModuleDescriptor: java.lang.String getKey()>
INTERFACE edge: $r27 = interfaceinvoke r8.<com.atlassian.plugin.ModuleDescriptor: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addDynamicModule$47(com.atlassian.plugin.Plugin,org.dom4j.Element,java.util.concurrent.atomic.AtomicReference)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.String getKey()>
INTERFACE edge: $r18 = interfaceinvoke r8.<com.atlassian.plugin.ModuleDescriptor: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addDynamicModule$47(com.atlassian.plugin.Plugin,org.dom4j.Element,java.util.concurrent.atomic.AtomicReference)> ==> <com.atlassian.plugin.ModuleDescriptor: java.lang.String getKey()>
INTERFACE edge: $r18 = interfaceinvoke r8.<com.atlassian.plugin.ModuleDescriptor: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addDynamicModule$47(com.atlassian.plugin.Plugin,org.dom4j.Element,java.util.concurrent.atomic.AtomicReference)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.String getKey()>
INTERFACE edge: $r11 = interfaceinvoke r2.<com.atlassian.plugin.PluginInternal: com.atlassian.plugin.ModuleDescriptor getModuleDescriptor(java.lang.String)>($r10) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addDynamicModule$47(com.atlassian.plugin.Plugin,org.dom4j.Element,java.util.concurrent.atomic.AtomicReference)> ==> <com.atlassian.plugin.impl.AbstractPlugin: com.atlassian.plugin.ModuleDescriptor getModuleDescriptor(java.lang.String)>
INTERFACE edge: $z0 = interfaceinvoke r2.<com.atlassian.plugin.PluginInternal: boolean addDynamicModuleDescriptor(com.atlassian.plugin.ModuleDescriptor)>(r8) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addDynamicModule$47(com.atlassian.plugin.Plugin,org.dom4j.Element,java.util.concurrent.atomic.AtomicReference)> ==> <com.atlassian.plugin.impl.AbstractPlugin: boolean addDynamicModuleDescriptor(com.atlassian.plugin.ModuleDescriptor)>
INTERFACE edge: $r12 = interfaceinvoke r2.<com.atlassian.plugin.PluginInternal: com.atlassian.plugin.PluginState getPluginState()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addDynamicModule$47(com.atlassian.plugin.Plugin,org.dom4j.Element,java.util.concurrent.atomic.AtomicReference)> ==> <com.atlassian.plugin.impl.AbstractPlugin: com.atlassian.plugin.PluginState getPluginState()>
SPECIAL edge: specialinvoke $r52.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addDynamicModule$47(com.atlassian.plugin.Plugin,org.dom4j.Element,java.util.concurrent.atomic.AtomicReference)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r26 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("duplicate module key \'") in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addDynamicModule$47(com.atlassian.plugin.Plugin,org.dom4j.Element,java.util.concurrent.atomic.AtomicReference)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addDynamicModule$47(com.atlassian.plugin.Plugin,org.dom4j.Element,java.util.concurrent.atomic.AtomicReference)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' for plugin \'") in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addDynamicModule$47(com.atlassian.plugin.Plugin,org.dom4j.Element,java.util.concurrent.atomic.AtomicReference)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addDynamicModule$47(com.atlassian.plugin.Plugin,org.dom4j.Element,java.util.concurrent.atomic.AtomicReference)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'") in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addDynamicModule$47(com.atlassian.plugin.Plugin,org.dom4j.Element,java.util.concurrent.atomic.AtomicReference)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addDynamicModule$47(com.atlassian.plugin.Plugin,org.dom4j.Element,java.util.concurrent.atomic.AtomicReference)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r53.<com.atlassian.plugin.PluginException: void <init>(java.lang.String)>($r32) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addDynamicModule$47(com.atlassian.plugin.Plugin,org.dom4j.Element,java.util.concurrent.atomic.AtomicReference)> ==> <com.atlassian.plugin.PluginException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r54.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addDynamicModule$47(com.atlassian.plugin.Plugin,org.dom4j.Element,java.util.concurrent.atomic.AtomicReference)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r17 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot add dynamic module \'") in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addDynamicModule$47(com.atlassian.plugin.Plugin,org.dom4j.Element,java.util.concurrent.atomic.AtomicReference)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addDynamicModule$47(com.atlassian.plugin.Plugin,org.dom4j.Element,java.util.concurrent.atomic.AtomicReference)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' to plugin \'") in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addDynamicModule$47(com.atlassian.plugin.Plugin,org.dom4j.Element,java.util.concurrent.atomic.AtomicReference)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addDynamicModule$47(com.atlassian.plugin.Plugin,org.dom4j.Element,java.util.concurrent.atomic.AtomicReference)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' as it is already present") in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addDynamicModule$47(com.atlassian.plugin.Plugin,org.dom4j.Element,java.util.concurrent.atomic.AtomicReference)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addDynamicModule$47(com.atlassian.plugin.Plugin,org.dom4j.Element,java.util.concurrent.atomic.AtomicReference)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r55.<com.atlassian.plugin.PluginException: void <init>(java.lang.String)>($r23) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addDynamicModule$47(com.atlassian.plugin.Plugin,org.dom4j.Element,java.util.concurrent.atomic.AtomicReference)> ==> <com.atlassian.plugin.PluginException: void <init>(java.lang.String)>
INTERFACE edge: $z1 = interfaceinvoke $r14.<com.atlassian.plugin.manager.PluginPersistentState: boolean isEnabled(com.atlassian.plugin.ModuleDescriptor)>(r8) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addDynamicModule$47(com.atlassian.plugin.Plugin,org.dom4j.Element,java.util.concurrent.atomic.AtomicReference)> ==> <com.atlassian.plugin.manager.PluginPersistentState: boolean isEnabled(com.atlassian.plugin.ModuleDescriptor)>
INTERFACE edge: $z1 = interfaceinvoke $r14.<com.atlassian.plugin.manager.PluginPersistentState: boolean isEnabled(com.atlassian.plugin.ModuleDescriptor)>(r8) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addDynamicModule$47(com.atlassian.plugin.Plugin,org.dom4j.Element,java.util.concurrent.atomic.AtomicReference)> ==> <com.atlassian.plugin.manager.DefaultPluginPersistentState: boolean isEnabled(com.atlassian.plugin.ModuleDescriptor)>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$lambda_notifyModuleEnabled_46__84: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.ModuleDescriptor)>(r0, r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void notifyModuleEnabled(com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_notifyModuleEnabled_46__84: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.ModuleDescriptor)>
INTERFACE edge: $r2 = interfaceinvoke r0.<com.atlassian.plugin.ModuleDescriptor: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$notifyModuleEnabled$46(com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.ModuleDescriptor: java.lang.String getKey()>
INTERFACE edge: $r2 = interfaceinvoke r0.<com.atlassian.plugin.ModuleDescriptor: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$notifyModuleEnabled$46(com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.String getKey()>
INTERFACE edge: interfaceinvoke $r1.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Enabling {}", $r2) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$notifyModuleEnabled$46(com.atlassian.plugin.ModuleDescriptor)> ==> <org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>
SPECIAL edge: specialinvoke $r4.<com.atlassian.plugin.event.events.PluginModuleEnablingEvent: void <init>(com.atlassian.plugin.ModuleDescriptor)>(r0) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$notifyModuleEnabled$46(com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.event.events.PluginModuleEnablingEvent: void <init>(com.atlassian.plugin.ModuleDescriptor)>
SPECIAL edge: specialinvoke r3.<com.atlassian.plugin.manager.DefaultPluginManager: void broadcastIgnoreError(java.lang.Object)>($r4) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$notifyModuleEnabled$46(com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void broadcastIgnoreError(java.lang.Object)>
SPECIAL edge: specialinvoke r3.<com.atlassian.plugin.manager.DefaultPluginManager: void broadcastIgnoreError(java.lang.Object)>($r5) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$notifyModuleEnabled$46(com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void broadcastIgnoreError(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<com.atlassian.plugin.StateAware: void enabled()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$notifyModuleEnabled$46(com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.eventlistener.descriptors.EventListenerModuleDescriptor: void enabled()>
INTERFACE edge: interfaceinvoke $r6.<com.atlassian.plugin.StateAware: void enabled()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$notifyModuleEnabled$46(com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void enabled()>
SPECIAL edge: specialinvoke $r5.<com.atlassian.plugin.event.events.PluginModuleEnabledEvent: void <init>(com.atlassian.plugin.ModuleDescriptor)>(r0) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$notifyModuleEnabled$46(com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.event.events.PluginModuleEnabledEvent: void <init>(com.atlassian.plugin.ModuleDescriptor)>
CLINIT edge: $r6 = <com.atlassian.plugin.manager.DefaultPluginManager: org.slf4j.Logger log> in <com.atlassian.plugin.manager.DefaultPluginManager: void broadcastIgnoreError(java.lang.Object)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void <clinit>()>
SPECIAL edge: specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("You must specify a plugin module key to disable.") in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enablePluginModule$45(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: r2 = virtualinvoke r1.<com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.ModuleDescriptor getPluginModule(java.lang.String)>(r0) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enablePluginModule$45(java.lang.String)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.ModuleDescriptor getPluginModule(java.lang.String)>
VIRTUAL edge: virtualinvoke r1.<com.atlassian.plugin.manager.DefaultPluginManager: void notifyModuleEnabled(com.atlassian.plugin.ModuleDescriptor)>(r2) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enablePluginModule$45(java.lang.String)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void notifyModuleEnabled(com.atlassian.plugin.ModuleDescriptor)>
INTERFACE edge: interfaceinvoke $r6.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Returned module for key \'{}\' was null. Not enabling.", r0) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enablePluginModule$45(java.lang.String)> ==> <org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r2.<com.atlassian.plugin.ModuleDescriptor: boolean satisfiesMinJavaVersion()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enablePluginModule$45(java.lang.String)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: boolean satisfiesMinJavaVersion()>
INTERFACE edge: $r5 = interfaceinvoke r2.<com.atlassian.plugin.ModuleDescriptor: java.lang.Float getMinJavaVersion()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enablePluginModule$45(java.lang.String)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.Float getMinJavaVersion()>
VIRTUAL edge: virtualinvoke $r3.<com.atlassian.plugin.manager.PluginPersistentStateModifier: void enable(com.atlassian.plugin.ModuleDescriptor)>(r2) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enablePluginModule$45(java.lang.String)> ==> <com.atlassian.plugin.manager.PluginPersistentStateModifier: void enable(com.atlassian.plugin.ModuleDescriptor)>
INTERFACE edge: $r2 = interfaceinvoke r0.<com.atlassian.plugin.ModuleDescriptor: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$publishModuleDisabledEvents$44(com.atlassian.plugin.ModuleDescriptor,boolean)> ==> <com.atlassian.plugin.ModuleDescriptor: java.lang.String getKey()>
INTERFACE edge: $r2 = interfaceinvoke r0.<com.atlassian.plugin.ModuleDescriptor: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$publishModuleDisabledEvents$44(com.atlassian.plugin.ModuleDescriptor,boolean)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.String getKey()>
INTERFACE edge: interfaceinvoke $r1.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Disabling {}", $r2) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$publishModuleDisabledEvents$44(com.atlassian.plugin.ModuleDescriptor,boolean)> ==> <org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>
SPECIAL edge: specialinvoke $r4.<com.atlassian.plugin.event.events.PluginModuleDisablingEvent: void <init>(com.atlassian.plugin.ModuleDescriptor,boolean)>(r0, z0) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$publishModuleDisabledEvents$44(com.atlassian.plugin.ModuleDescriptor,boolean)> ==> <com.atlassian.plugin.event.events.PluginModuleDisablingEvent: void <init>(com.atlassian.plugin.ModuleDescriptor,boolean)>
SPECIAL edge: specialinvoke r3.<com.atlassian.plugin.manager.DefaultPluginManager: void broadcastIgnoreError(java.lang.Object)>($r4) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$publishModuleDisabledEvents$44(com.atlassian.plugin.ModuleDescriptor,boolean)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void broadcastIgnoreError(java.lang.Object)>
SPECIAL edge: specialinvoke r3.<com.atlassian.plugin.manager.DefaultPluginManager: void broadcastIgnoreError(java.lang.Object)>($r5) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$publishModuleDisabledEvents$44(com.atlassian.plugin.ModuleDescriptor,boolean)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void broadcastIgnoreError(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<com.atlassian.plugin.StateAware: void disabled()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$publishModuleDisabledEvents$44(com.atlassian.plugin.ModuleDescriptor,boolean)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void disabled()>
INTERFACE edge: interfaceinvoke $r6.<com.atlassian.plugin.StateAware: void disabled()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$publishModuleDisabledEvents$44(com.atlassian.plugin.ModuleDescriptor,boolean)> ==> <com.atlassian.plugin.eventlistener.descriptors.EventListenerModuleDescriptor: void disabled()>
SPECIAL edge: specialinvoke $r5.<com.atlassian.plugin.event.events.PluginModuleDisabledEvent: void <init>(com.atlassian.plugin.ModuleDescriptor,boolean)>(r0, z0) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$publishModuleDisabledEvents$44(com.atlassian.plugin.ModuleDescriptor,boolean)> ==> <com.atlassian.plugin.event.events.PluginModuleDisabledEvent: void <init>(com.atlassian.plugin.ModuleDescriptor,boolean)>
SPECIAL edge: specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("You must specify a plugin module key to disable.") in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$disablePluginModule$43(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: r2 = virtualinvoke r1.<com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.ModuleDescriptor getPluginModule(java.lang.String)>(r0) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$disablePluginModule$43(java.lang.String)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.ModuleDescriptor getPluginModule(java.lang.String)>
VIRTUAL edge: virtualinvoke r1.<com.atlassian.plugin.manager.DefaultPluginManager: void notifyModuleDisabled(com.atlassian.plugin.ModuleDescriptor)>(r2) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$disablePluginModule$43(java.lang.String)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void notifyModuleDisabled(com.atlassian.plugin.ModuleDescriptor)>
INTERFACE edge: interfaceinvoke $r8.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Returned module for key \'{}\' was null. Not disabling.", r0) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$disablePluginModule$43(java.lang.String)> ==> <org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$disablePluginModule$43(java.lang.String)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.Class: boolean isAnnotationPresent(java.lang.Class)>(class "Lcom/atlassian/plugin/descriptors/CannotDisable;") in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$disablePluginModule$43(java.lang.String)> ==> <java.lang.Class: boolean isAnnotationPresent(java.lang.Class)>
VIRTUAL edge: $r7 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$disablePluginModule$43(java.lang.String)> ==> <java.lang.Class: java.lang.String getName()>
INTERFACE edge: interfaceinvoke $r6.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Plugin module \'{}\' cannot be disabled; it is annotated with {}", r0, $r7) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$disablePluginModule$43(java.lang.String)> ==> <org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r4.<com.atlassian.plugin.manager.PluginPersistentStateModifier: void disable(com.atlassian.plugin.ModuleDescriptor)>(r2) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$disablePluginModule$43(java.lang.String)> ==> <com.atlassian.plugin.manager.PluginPersistentStateModifier: void disable(com.atlassian.plugin.ModuleDescriptor)>
INTERFACE edge: $r2 = interfaceinvoke r1.<com.atlassian.plugin.Plugin: java.util.Collection getModuleDescriptors()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$disablePluginModules$42(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.util.Collection getModuleDescriptors()>
SPECIAL edge: specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$disablePluginModules$42(com.atlassian.plugin.Plugin)> ==> <java.util.ArrayList: void <init>(java.util.Collection)>
INTERFACE edge: r4 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$disablePluginModules$42(com.atlassian.plugin.Plugin)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke r7.<com.atlassian.plugin.manager.DefaultPluginManager: void disablePluginModuleNoPersist(com.atlassian.plugin.ModuleDescriptor)>(r6) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$disablePluginModules$42(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void disablePluginModuleNoPersist(com.atlassian.plugin.ModuleDescriptor)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: void broadcastPluginDisabling(com.atlassian.plugin.Plugin)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$notifyPluginDisabled$41(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void broadcastPluginDisabling(com.atlassian.plugin.Plugin)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: void disablePluginWithModuleEvents(com.atlassian.plugin.Plugin)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$notifyPluginDisabled$41(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void disablePluginWithModuleEvents(com.atlassian.plugin.Plugin)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: void broadcastPluginDisabled(com.atlassian.plugin.Plugin)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$notifyPluginDisabled$41(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void broadcastPluginDisabled(com.atlassian.plugin.Plugin)>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$lambda_broadcastPluginDisabling_39__76: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.Plugin)>(r0, r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void broadcastPluginDisabling(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_broadcastPluginDisabling_39__76: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.Plugin)>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$lambda_broadcastPluginDisabled_40__78: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.Plugin)>(r0, r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void broadcastPluginDisabled(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_broadcastPluginDisabled_40__78: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.Plugin)>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.event.events.PluginDisabledEvent: void <init>(com.atlassian.plugin.Plugin)>(r2) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$broadcastPluginDisabled$40(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.event.events.PluginDisabledEvent: void <init>(com.atlassian.plugin.Plugin)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: void broadcastIgnoreError(java.lang.Object)>($r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$broadcastPluginDisabled$40(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void broadcastIgnoreError(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r1.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Disabling {}", r0) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$broadcastPluginDisabling$39(com.atlassian.plugin.Plugin)> ==> <org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<com.atlassian.plugin.event.events.PluginDisablingEvent: void <init>(com.atlassian.plugin.Plugin)>(r0) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$broadcastPluginDisabling$39(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.event.events.PluginDisablingEvent: void <init>(com.atlassian.plugin.Plugin)>
SPECIAL edge: specialinvoke r2.<com.atlassian.plugin.manager.DefaultPluginManager: void broadcastIgnoreError(java.lang.Object)>($r3) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$broadcastPluginDisabling$39(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void broadcastIgnoreError(java.lang.Object)>
INTERFACE edge: $r1 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultPluginManager: boolean lambda$findDelayedPlugin$38(java.lang.String,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r1 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultPluginManager: boolean lambda$findDelayedPlugin$38(java.lang.String,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r2) in <com.atlassian.plugin.manager.DefaultPluginManager: boolean lambda$findDelayedPlugin$38(java.lang.String,com.atlassian.plugin.Plugin)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("State must be one of (UNINSTALLED,DISABLED)") in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$reenableDependent$37(com.atlassian.plugin.PluginState,com.atlassian.plugin.manager.DependentPlugins,java.util.Collection)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: r6 = virtualinvoke r5.<com.atlassian.plugin.manager.DependentPlugins: java.util.List getPluginsByTypes(java.util.Set,boolean)>(r1, 0) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$reenableDependent$37(com.atlassian.plugin.PluginState,com.atlassian.plugin.manager.DependentPlugins,java.util.Collection)> ==> <com.atlassian.plugin.manager.DependentPlugins: java.util.List getPluginsByTypes(java.util.Set,boolean)>
VIRTUAL edge: $r15 = virtualinvoke r5.<com.atlassian.plugin.manager.DependentPlugins: java.util.List toStringList(java.util.Set)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$reenableDependent$37(com.atlassian.plugin.PluginState,com.atlassian.plugin.manager.DependentPlugins,java.util.Collection)> ==> <com.atlassian.plugin.manager.DependentPlugins: java.util.List toStringList(java.util.Set)>
VIRTUAL edge: r9 = virtualinvoke r5.<com.atlassian.plugin.manager.DependentPlugins: java.util.List getPluginsByTypes(java.util.Set,boolean)>($r8, 0) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$reenableDependent$37(com.atlassian.plugin.PluginState,com.atlassian.plugin.manager.DependentPlugins,java.util.Collection)> ==> <com.atlassian.plugin.manager.DependentPlugins: java.util.List getPluginsByTypes(java.util.Set,boolean)>
INTERFACE edge: $z0 = interfaceinvoke r6.<java.util.List: boolean isEmpty()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$reenableDependent$37(com.atlassian.plugin.PluginState,com.atlassian.plugin.manager.DependentPlugins,java.util.Collection)> ==> <java.util.AbstractCollection: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke r6.<java.util.List: boolean isEmpty()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$reenableDependent$37(com.atlassian.plugin.PluginState,com.atlassian.plugin.manager.DependentPlugins,java.util.Collection)> ==> <java.util.ArrayList: boolean isEmpty()>
INTERFACE edge: $z2 = interfaceinvoke r6.<java.util.List: boolean isEmpty()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$reenableDependent$37(com.atlassian.plugin.PluginState,com.atlassian.plugin.manager.DependentPlugins,java.util.Collection)> ==> <java.util.AbstractCollection: boolean isEmpty()>
INTERFACE edge: $z2 = interfaceinvoke r6.<java.util.List: boolean isEmpty()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$reenableDependent$37(com.atlassian.plugin.PluginState,com.atlassian.plugin.manager.DependentPlugins,java.util.Collection)> ==> <java.util.ArrayList: boolean isEmpty()>
SPECIAL edge: specialinvoke r11.<com.atlassian.plugin.manager.DefaultPluginManager: void enableDependentPlugins(java.util.Collection)>(r6) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$reenableDependent$37(com.atlassian.plugin.PluginState,com.atlassian.plugin.manager.DependentPlugins,java.util.Collection)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void enableDependentPlugins(java.util.Collection)>
INTERFACE edge: $z1 = interfaceinvoke r9.<java.util.List: boolean isEmpty()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$reenableDependent$37(com.atlassian.plugin.PluginState,com.atlassian.plugin.manager.DependentPlugins,java.util.Collection)> ==> <java.util.AbstractCollection: boolean isEmpty()>
INTERFACE edge: $z1 = interfaceinvoke r9.<java.util.List: boolean isEmpty()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$reenableDependent$37(com.atlassian.plugin.PluginState,com.atlassian.plugin.manager.DependentPlugins,java.util.Collection)> ==> <java.util.ArrayList: boolean isEmpty()>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$lambda_enableDependentPlugins_24__54: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,java.util.Collection)>(r0, r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void enableDependentPlugins(java.util.Collection)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_enableDependentPlugins_24__54: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,java.util.Collection)>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.event.events.PluginDependentsChangedEvent: void <init>(com.atlassian.plugin.Plugin,com.atlassian.plugin.PluginState,java.util.List,java.util.List)>(r2, r3, r4, r5) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$null$36(com.atlassian.plugin.PluginState,java.util.List,java.util.List,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.event.events.PluginDependentsChangedEvent: void <init>(com.atlassian.plugin.Plugin,com.atlassian.plugin.PluginState,java.util.List,java.util.List)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: void broadcastIgnoreError(java.lang.Object)>($r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$null$36(com.atlassian.plugin.PluginState,java.util.List,java.util.List,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void broadcastIgnoreError(java.lang.Object)>
INTERFACE edge: r3 = interfaceinvoke $r2.<com.atlassian.plugin.PluginRegistry$ReadWrite: com.atlassian.plugin.Plugin get(java.lang.String)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$disablePluginInternal$35(java.lang.String,boolean)> ==> <com.atlassian.plugin.manager.PluginRegistryImpl: com.atlassian.plugin.Plugin get(java.lang.String)>
SPECIAL edge: r24 = specialinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.Plugin findDelayedPlugin(java.lang.String)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$disablePluginInternal$35(java.lang.String,boolean)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.Plugin findDelayedPlugin(java.lang.String)>
SPECIAL edge: r25 = specialinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.manager.DependentPlugins disablePluginsAndTheirDependencies(java.util.Collection,java.util.Set)>($r7, $r13) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$disablePluginInternal$35(java.lang.String,boolean)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.manager.DependentPlugins disablePluginsAndTheirDependencies(java.util.Collection,java.util.Set)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: void reenableDependent(java.util.Collection,com.atlassian.plugin.manager.DependentPlugins,com.atlassian.plugin.PluginState)>($r14, r25, $r15) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$disablePluginInternal$35(java.lang.String,boolean)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void reenableDependent(java.util.Collection,com.atlassian.plugin.manager.DependentPlugins,com.atlassian.plugin.PluginState)>
INTERFACE edge: interfaceinvoke $r23.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("No plugin was found for key \'{}\'. Not disabling.", r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$disablePluginInternal$35(java.lang.String,boolean)> ==> <org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r22.<com.atlassian.plugin.manager.PluginPersistentStateModifier: void disable(com.atlassian.plugin.Plugin)>(r24) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$disablePluginInternal$35(java.lang.String,boolean)> ==> <com.atlassian.plugin.manager.PluginPersistentStateModifier: void disable(com.atlassian.plugin.Plugin)>
INTERFACE edge: $r4 = interfaceinvoke r3.<com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginState getPluginState()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$disablePluginInternal$35(java.lang.String,boolean)> ==> <com.atlassian.plugin.impl.AbstractPlugin: com.atlassian.plugin.PluginState getPluginState()>
INTERFACE edge: $r4 = interfaceinvoke r3.<com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginState getPluginState()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$disablePluginInternal$35(java.lang.String,boolean)> ==> <com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginState getPluginState()>
INTERFACE edge: $r6 = interfaceinvoke r3.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$disablePluginInternal$35(java.lang.String,boolean)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r6 = interfaceinvoke r3.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$disablePluginInternal$35(java.lang.String,boolean)> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
SPECIAL edge: specialinvoke $r8.<java.util.HashSet: void <init>(java.util.Collection)>($r12) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$disablePluginInternal$35(java.lang.String,boolean)> ==> <java.util.HashSet: void <init>(java.util.Collection)>
VIRTUAL edge: $r18 = virtualinvoke r25.<com.atlassian.plugin.manager.DependentPlugins: java.util.List getPluginsByTypes(java.util.Set,boolean)>($r17, 1) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$disablePluginInternal$35(java.lang.String,boolean)> ==> <com.atlassian.plugin.manager.DependentPlugins: java.util.List getPluginsByTypes(java.util.Set,boolean)>
VIRTUAL edge: virtualinvoke $r19.<java.lang.Object: java.lang.Class getClass()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$disablePluginInternal$35(java.lang.String,boolean)> ==> <java.lang.Object: java.lang.Class getClass()>
STATIC edge: $r4 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$lambda_findDelayedPlugin_38__75: java.util.function.Predicate bootstrap$(java.lang.String)>(r3) in <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.Plugin findDelayedPlugin(java.lang.String)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_findDelayedPlugin_38__75: java.util.function.Predicate bootstrap$(java.lang.String)>
STATIC edge: $r5 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$lambda_reenableDependent_37__74: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.PluginState,com.atlassian.plugin.manager.DependentPlugins,java.util.Collection)>(r0, r1, r2, r3) in <com.atlassian.plugin.manager.DefaultPluginManager: void reenableDependent(java.util.Collection,com.atlassian.plugin.manager.DependentPlugins,com.atlassian.plugin.PluginState)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_reenableDependent_37__74: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.PluginState,com.atlassian.plugin.manager.DependentPlugins,java.util.Collection)>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: void disablePluginInternal(java.lang.String,boolean)>(r1, 0) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$disablePluginWithoutPersisting$34(java.lang.String)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void disablePluginInternal(java.lang.String,boolean)>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$lambda_disablePluginInternal_35__73: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,java.lang.String,boolean)>(r1, r0, z0) in <com.atlassian.plugin.manager.DefaultPluginManager: void disablePluginInternal(java.lang.String,boolean)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_disablePluginInternal_35__73: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,java.lang.String,boolean)>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: boolean isPluginEnabled(java.lang.String)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$disablePlugin$33(java.lang.String)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: boolean isPluginEnabled(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: void disablePluginInternal(java.lang.String,boolean)>(r1, 1) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$disablePlugin$33(java.lang.String)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void disablePluginInternal(java.lang.String,boolean)>
INTERFACE edge: interfaceinvoke $r2.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Plugin {} already disabled", r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$disablePlugin$33(java.lang.String)> ==> <org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<com.atlassian.plugin.manager.PluginEnabler: boolean isPluginBeingEnabled(com.atlassian.plugin.Plugin)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Boolean lambda$enableConfiguredPluginModule$32(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor,java.util.Set)> ==> <com.atlassian.plugin.manager.PluginEnabler: boolean isPluginBeingEnabled(com.atlassian.plugin.Plugin)>
INTERFACE edge: $r12 = interfaceinvoke r3.<com.atlassian.plugin.ModuleDescriptor: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Boolean lambda$enableConfiguredPluginModule$32(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor,java.util.Set)> ==> <com.atlassian.plugin.ModuleDescriptor: java.lang.String getKey()>
INTERFACE edge: $r12 = interfaceinvoke r3.<com.atlassian.plugin.ModuleDescriptor: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Boolean lambda$enableConfiguredPluginModule$32(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor,java.util.Set)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.String getKey()>
INTERFACE edge: $r4 = interfaceinvoke r3.<com.atlassian.plugin.ModuleDescriptor: java.lang.String getPluginKey()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Boolean lambda$enableConfiguredPluginModule$32(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor,java.util.Set)> ==> <com.atlassian.plugin.ModuleDescriptor: java.lang.String getPluginKey()>
INTERFACE edge: $r4 = interfaceinvoke r3.<com.atlassian.plugin.ModuleDescriptor: java.lang.String getPluginKey()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Boolean lambda$enableConfiguredPluginModule$32(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor,java.util.Set)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.String getPluginKey()>
INTERFACE edge: $r6 = interfaceinvoke r3.<com.atlassian.plugin.ModuleDescriptor: java.lang.String getDisplayName()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Boolean lambda$enableConfiguredPluginModule$32(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor,java.util.Set)> ==> <com.atlassian.plugin.ModuleDescriptor: java.lang.String getDisplayName()>
INTERFACE edge: $r28 = interfaceinvoke r3.<com.atlassian.plugin.ModuleDescriptor: java.lang.String getDisplayName()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Boolean lambda$enableConfiguredPluginModule$32(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor,java.util.Set)> ==> <com.atlassian.plugin.ModuleDescriptor: java.lang.String getDisplayName()>
INTERFACE edge: interfaceinvoke $r11.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("The plugin is currently being enabled, so we won\'t bother trying to enable the \'{}\' module", $r12) in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Boolean lambda$enableConfiguredPluginModule$32(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor,java.util.Set)> ==> <org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: boolean isPluginEnabled(java.lang.String)>($r4) in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Boolean lambda$enableConfiguredPluginModule$32(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor,java.util.Set)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: boolean isPluginEnabled(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.manager.PluginPersistentState getState()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Boolean lambda$enableConfiguredPluginModule$32(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor,java.util.Set)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.manager.PluginPersistentState getState()>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: void notifyModuleEnabled(com.atlassian.plugin.ModuleDescriptor)>(r3) in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Boolean lambda$enableConfiguredPluginModule$32(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor,java.util.Set)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void notifyModuleEnabled(com.atlassian.plugin.ModuleDescriptor)>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: void notifyModuleDisabled(com.atlassian.plugin.ModuleDescriptor)>(r17) in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Boolean lambda$enableConfiguredPluginModule$32(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor,java.util.Set)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void notifyModuleDisabled(com.atlassian.plugin.ModuleDescriptor)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.impl.UnloadablePlugin replacePluginWithUnloadablePlugin(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor,java.lang.Throwable)>(r1, r3, $r25) in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Boolean lambda$enableConfiguredPluginModule$32(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor,java.util.Set)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.impl.UnloadablePlugin replacePluginWithUnloadablePlugin(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor,java.lang.Throwable)>
INTERFACE edge: $z2 = interfaceinvoke $r8.<com.atlassian.plugin.manager.PluginPersistentState: boolean isEnabled(com.atlassian.plugin.ModuleDescriptor)>(r3) in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Boolean lambda$enableConfiguredPluginModule$32(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor,java.util.Set)> ==> <com.atlassian.plugin.manager.PluginPersistentState: boolean isEnabled(com.atlassian.plugin.ModuleDescriptor)>
INTERFACE edge: $z2 = interfaceinvoke $r8.<com.atlassian.plugin.manager.PluginPersistentState: boolean isEnabled(com.atlassian.plugin.ModuleDescriptor)>(r3) in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Boolean lambda$enableConfiguredPluginModule$32(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor,java.util.Set)> ==> <com.atlassian.plugin.manager.DefaultPluginPersistentState: boolean isEnabled(com.atlassian.plugin.ModuleDescriptor)>
INTERFACE edge: interfaceinvoke $r5.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Plugin module \'{}\' is explicitly disabled (or so by default), so not re-enabling.", $r6) in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Boolean lambda$enableConfiguredPluginModule$32(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor,java.util.Set)> ==> <org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>
INTERFACE edge: interfaceinvoke r9.<java.util.Set: boolean add(java.lang.Object)>(r3) in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Boolean lambda$enableConfiguredPluginModule$32(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor,java.util.Set)> ==> <java.util.HashSet: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke r9.<java.util.Set: boolean add(java.lang.Object)>(r3) in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Boolean lambda$enableConfiguredPluginModule$32(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor,java.util.Set)> ==> <java.util.concurrent.CopyOnWriteArraySet: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke r9.<java.util.Set: boolean add(java.lang.Object)>(r3) in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Boolean lambda$enableConfiguredPluginModule$32(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor,java.util.Set)> ==> <java.util.TreeSet: boolean add(java.lang.Object)>
INTERFACE edge: r20 = interfaceinvoke r9.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Boolean lambda$enableConfiguredPluginModule$32(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor,java.util.Set)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r20 = interfaceinvoke r9.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Boolean lambda$enableConfiguredPluginModule$32(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor,java.util.Set)> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r20 = interfaceinvoke r9.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Boolean lambda$enableConfiguredPluginModule$32(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor,java.util.Set)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: $r19 = interfaceinvoke r17.<com.atlassian.plugin.ModuleDescriptor: java.lang.String getDisplayName()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Boolean lambda$enableConfiguredPluginModule$32(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor,java.util.Set)> ==> <com.atlassian.plugin.ModuleDescriptor: java.lang.String getDisplayName()>
STATIC edge: r3 = staticinvoke <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: com.atlassian.plugin.descriptors.UnloadableModuleDescriptor createUnloadableModuleDescriptor(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor,java.lang.Throwable)>(r0, r1, r2) in <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.impl.UnloadablePlugin replacePluginWithUnloadablePlugin(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor,java.lang.Throwable)> ==> <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: com.atlassian.plugin.descriptors.UnloadableModuleDescriptor createUnloadableModuleDescriptor(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor,java.lang.Throwable)>
STATIC edge: r4 = staticinvoke <com.atlassian.plugin.impl.UnloadablePluginFactory: com.atlassian.plugin.impl.UnloadablePlugin createUnloadablePlugin(com.atlassian.plugin.Plugin,com.atlassian.plugin.descriptors.UnloadableModuleDescriptor)>(r0, r3) in <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.impl.UnloadablePlugin replacePluginWithUnloadablePlugin(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor,java.lang.Throwable)> ==> <com.atlassian.plugin.impl.UnloadablePluginFactory: com.atlassian.plugin.impl.UnloadablePlugin createUnloadablePlugin(com.atlassian.plugin.Plugin,com.atlassian.plugin.descriptors.UnloadableModuleDescriptor)>
SPECIAL edge: specialinvoke $r0.<java.util.HashSet: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Boolean lambda$enableConfiguredPluginModules$31(com.atlassian.plugin.Plugin)> ==> <java.util.HashSet: void <init>()>
INTERFACE edge: $r3 = interfaceinvoke r2.<com.atlassian.plugin.Plugin: java.util.Collection getModuleDescriptors()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Boolean lambda$enableConfiguredPluginModules$31(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.util.Collection getModuleDescriptors()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Boolean lambda$enableConfiguredPluginModules$31(com.atlassian.plugin.Plugin)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Boolean lambda$enableConfiguredPluginModules$31(com.atlassian.plugin.Plugin)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Boolean lambda$enableConfiguredPluginModules$31(com.atlassian.plugin.Plugin)> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Boolean lambda$enableConfiguredPluginModules$31(com.atlassian.plugin.Plugin)> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Boolean lambda$enableConfiguredPluginModules$31(com.atlassian.plugin.Plugin)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Boolean lambda$enableConfiguredPluginModules$31(com.atlassian.plugin.Plugin)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
SPECIAL edge: $z1 = specialinvoke r8.<com.atlassian.plugin.manager.DefaultPluginManager: boolean enableConfiguredPluginModule(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor,java.util.Set)>(r2, r7, $r0) in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Boolean lambda$enableConfiguredPluginModules$31(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: boolean enableConfiguredPluginModule(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor,java.util.Set)>
STATIC edge: $r5 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$lambda_enableConfiguredPluginModule_32__70: java.util.function.Supplier bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor,java.util.Set)>(r0, r1, r2, r3) in <com.atlassian.plugin.manager.DefaultPluginManager: boolean enableConfiguredPluginModule(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor,java.util.Set)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_enableConfiguredPluginModule_32__70: java.util.function.Supplier bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor,java.util.Set)>
SPECIAL edge: specialinvoke $r0.<java.util.ArrayList: void <init>(int)>($i0) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enablePlugins$30(java.lang.String[])> ==> <java.util.ArrayList: void <init>(int)>
INTERFACE edge: interfaceinvoke $r0.<java.util.Collection: boolean add(java.lang.Object)>(r12) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enablePlugins$30(java.lang.String[])> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: r24 = interfaceinvoke $r0.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enablePlugins$30(java.lang.String[])> ==> <java.util.ArrayList: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Keys passed to enablePlugins must be non-null") in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enablePlugins$30(java.lang.String[])> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
INTERFACE edge: r12 = interfaceinvoke $r11.<com.atlassian.plugin.PluginRegistry$ReadWrite: com.atlassian.plugin.Plugin get(java.lang.String)>(r10) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enablePlugins$30(java.lang.String[])> ==> <com.atlassian.plugin.manager.PluginRegistryImpl: com.atlassian.plugin.Plugin get(java.lang.String)>
SPECIAL edge: r19 = specialinvoke r3.<com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.Plugin findDelayedPlugin(java.lang.String)>(r10) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enablePlugins$30(java.lang.String[])> ==> <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.Plugin findDelayedPlugin(java.lang.String)>
SPECIAL edge: specialinvoke r3.<com.atlassian.plugin.manager.DefaultPluginManager: void broadcastIgnoreError(java.lang.Object)>($r9) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enablePlugins$30(java.lang.String[])> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void broadcastIgnoreError(java.lang.Object)>
SPECIAL edge: $z2 = specialinvoke r3.<com.atlassian.plugin.manager.DefaultPluginManager: boolean enableConfiguredPluginModules(com.atlassian.plugin.Plugin)>(r28) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enablePlugins$30(java.lang.String[])> ==> <com.atlassian.plugin.manager.DefaultPluginManager: boolean enableConfiguredPluginModules(com.atlassian.plugin.Plugin)>
SPECIAL edge: specialinvoke r3.<com.atlassian.plugin.manager.DefaultPluginManager: void broadcastIgnoreError(java.lang.Object)>($r7) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enablePlugins$30(java.lang.String[])> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void broadcastIgnoreError(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r21.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("No plugin was found for key \'{}\'. Not enabling.", r10) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enablePlugins$30(java.lang.String[])> ==> <org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r20.<com.atlassian.plugin.manager.PluginPersistentStateModifier: void enable(com.atlassian.plugin.Plugin)>(r19) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enablePlugins$30(java.lang.String[])> ==> <com.atlassian.plugin.manager.PluginPersistentStateModifier: void enable(com.atlassian.plugin.Plugin)>
INTERFACE edge: $r13 = interfaceinvoke r12.<com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginInformation getPluginInformation()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enablePlugins$30(java.lang.String[])> ==> <com.atlassian.plugin.impl.AbstractPlugin: com.atlassian.plugin.PluginInformation getPluginInformation()>
INTERFACE edge: $r13 = interfaceinvoke r12.<com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginInformation getPluginInformation()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enablePlugins$30(java.lang.String[])> ==> <com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginInformation getPluginInformation()>
INTERFACE edge: $r17 = interfaceinvoke r12.<com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginInformation getPluginInformation()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enablePlugins$30(java.lang.String[])> ==> <com.atlassian.plugin.impl.AbstractPlugin: com.atlassian.plugin.PluginInformation getPluginInformation()>
INTERFACE edge: $r17 = interfaceinvoke r12.<com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginInformation getPluginInformation()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enablePlugins$30(java.lang.String[])> ==> <com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginInformation getPluginInformation()>
INTERFACE edge: $r14 = interfaceinvoke r12.<com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginState getPluginState()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enablePlugins$30(java.lang.String[])> ==> <com.atlassian.plugin.impl.AbstractPlugin: com.atlassian.plugin.PluginState getPluginState()>
INTERFACE edge: $r14 = interfaceinvoke r12.<com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginState getPluginState()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enablePlugins$30(java.lang.String[])> ==> <com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginState getPluginState()>
SPECIAL edge: specialinvoke $r9.<com.atlassian.plugin.event.events.PluginEnablingEvent: void <init>(com.atlassian.plugin.Plugin)>(r25) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enablePlugins$30(java.lang.String[])> ==> <com.atlassian.plugin.event.events.PluginEnablingEvent: void <init>(com.atlassian.plugin.Plugin)>
VIRTUAL edge: r26 = virtualinvoke $r4.<com.atlassian.plugin.manager.PluginEnabler: java.util.Collection enableAllRecursively(java.util.Collection)>($r0) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enablePlugins$30(java.lang.String[])> ==> <com.atlassian.plugin.manager.PluginEnabler: java.util.Collection enableAllRecursively(java.util.Collection)>
INTERFACE edge: r27 = interfaceinvoke r26.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enablePlugins$30(java.lang.String[])> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r27 = interfaceinvoke r26.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enablePlugins$30(java.lang.String[])> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r27 = interfaceinvoke r26.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enablePlugins$30(java.lang.String[])> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r27 = interfaceinvoke r26.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enablePlugins$30(java.lang.String[])> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r27 = interfaceinvoke r26.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enablePlugins$30(java.lang.String[])> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: r27 = interfaceinvoke r26.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enablePlugins$30(java.lang.String[])> ==> <java.util.ArrayList: java.util.Iterator iterator()>
VIRTUAL edge: virtualinvoke $r6.<com.atlassian.plugin.manager.PluginPersistentStateModifier: void enable(com.atlassian.plugin.Plugin)>(r28) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enablePlugins$30(java.lang.String[])> ==> <com.atlassian.plugin.manager.PluginPersistentStateModifier: void enable(com.atlassian.plugin.Plugin)>
SPECIAL edge: specialinvoke $r7.<com.atlassian.plugin.event.events.PluginEnabledEvent: void <init>(com.atlassian.plugin.Plugin)>(r28) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enablePlugins$30(java.lang.String[])> ==> <com.atlassian.plugin.event.events.PluginEnabledEvent: void <init>(com.atlassian.plugin.Plugin)>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$lambda_enableConfiguredPluginModules_31__69: java.util.function.Supplier bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.Plugin)>(r0, r1) in <com.atlassian.plugin.manager.DefaultPluginManager: boolean enableConfiguredPluginModules(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_enableConfiguredPluginModules_31__69: java.util.function.Supplier bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.Plugin)>
INTERFACE edge: $r1 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: java.util.Collection getModuleDescriptors()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.stream.Stream lambda$getEnabledModuleDescriptorsByClass$29(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.util.Collection getModuleDescriptors()>
INTERFACE edge: $r1 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: java.util.Collection getModuleDescriptors()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.stream.Stream lambda$getModuleDescriptors$27(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.util.Collection getModuleDescriptors()>
INTERFACE edge: $r1 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$updatePlugin$26(com.atlassian.plugin.Plugin,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r1 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$updatePlugin$26(com.atlassian.plugin.Plugin,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
INTERFACE edge: r21 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginInformation getPluginInformation()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$updatePlugin$26(com.atlassian.plugin.Plugin,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: com.atlassian.plugin.PluginInformation getPluginInformation()>
INTERFACE edge: r21 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginInformation getPluginInformation()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$updatePlugin$26(com.atlassian.plugin.Plugin,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginInformation getPluginInformation()>
INTERFACE edge: $r3 = interfaceinvoke r2.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$updatePlugin$26(com.atlassian.plugin.Plugin,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r3 = interfaceinvoke r2.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$updatePlugin$26(com.atlassian.plugin.Plugin,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
INTERFACE edge: r24 = interfaceinvoke r2.<com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginInformation getPluginInformation()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$updatePlugin$26(com.atlassian.plugin.Plugin,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: com.atlassian.plugin.PluginInformation getPluginInformation()>
INTERFACE edge: r24 = interfaceinvoke r2.<com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginInformation getPluginInformation()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$updatePlugin$26(com.atlassian.plugin.Plugin,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginInformation getPluginInformation()>
INTERFACE edge: $r35 = interfaceinvoke r2.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$updatePlugin$26(com.atlassian.plugin.Plugin,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r35 = interfaceinvoke r2.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$updatePlugin$26(com.atlassian.plugin.Plugin,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
INTERFACE edge: $r36 = interfaceinvoke r2.<com.atlassian.plugin.Plugin: java.util.Collection getModuleDescriptors()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$updatePlugin$26(com.atlassian.plugin.Plugin,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.util.Collection getModuleDescriptors()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r3) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$updatePlugin$26(com.atlassian.plugin.Plugin,com.atlassian.plugin.Plugin)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r14.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$updatePlugin$26(com.atlassian.plugin.Plugin,com.atlassian.plugin.Plugin)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("New plugin \'") in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$updatePlugin$26(com.atlassian.plugin.Plugin,com.atlassian.plugin.Plugin)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$updatePlugin$26(com.atlassian.plugin.Plugin,com.atlassian.plugin.Plugin)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' must have the same key as the old plugin \'") in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$updatePlugin$26(com.atlassian.plugin.Plugin,com.atlassian.plugin.Plugin)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$updatePlugin$26(com.atlassian.plugin.Plugin,com.atlassian.plugin.Plugin)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'") in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$updatePlugin$26(com.atlassian.plugin.Plugin,com.atlassian.plugin.Plugin)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$updatePlugin$26(com.atlassian.plugin.Plugin,com.atlassian.plugin.Plugin)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r20) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$updatePlugin$26(com.atlassian.plugin.Plugin,com.atlassian.plugin.Plugin)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $r22 = virtualinvoke r21.<com.atlassian.plugin.PluginInformation: java.lang.String getVersion()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$updatePlugin$26(com.atlassian.plugin.Plugin,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.PluginInformation: java.lang.String getVersion()>
VIRTUAL edge: $r25 = virtualinvoke r24.<com.atlassian.plugin.PluginInformation: java.lang.String getVersion()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$updatePlugin$26(com.atlassian.plugin.Plugin,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.PluginInformation: java.lang.String getVersion()>
VIRTUAL edge: $r28 = virtualinvoke r5.<com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.manager.PluginPersistentState getState()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$updatePlugin$26(com.atlassian.plugin.Plugin,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.manager.PluginPersistentState getState()>
VIRTUAL edge: virtualinvoke r5.<com.atlassian.plugin.manager.DefaultPluginManager: void uninstallNoEvent(com.atlassian.plugin.Plugin)>(r0) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$updatePlugin$26(com.atlassian.plugin.Plugin,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void uninstallNoEvent(com.atlassian.plugin.Plugin)>
INTERFACE edge: $r29 = interfaceinvoke $r28.<com.atlassian.plugin.manager.PluginPersistentState: java.util.Map getPluginEnabledStateMap(com.atlassian.plugin.Plugin)>(r0) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$updatePlugin$26(com.atlassian.plugin.Plugin,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DefaultPluginPersistentState: java.util.Map getPluginEnabledStateMap(com.atlassian.plugin.Plugin)>
SPECIAL edge: specialinvoke $r27.<java.util.HashMap: void <init>(java.util.Map)>($r29) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$updatePlugin$26(com.atlassian.plugin.Plugin,com.atlassian.plugin.Plugin)> ==> <java.util.HashMap: void <init>(java.util.Map)>
INTERFACE edge: interfaceinvoke $r31.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Uninstalling old plugin: {}", r0) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$updatePlugin$26(com.atlassian.plugin.Plugin,com.atlassian.plugin.Plugin)> ==> <org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r32.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Plugin uninstalled \'{}\', preserving old state", r0) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$updatePlugin$26(com.atlassian.plugin.Plugin,com.atlassian.plugin.Plugin)> ==> <org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>
SPECIAL edge: specialinvoke $r33.<java.util.HashSet: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$updatePlugin$26(com.atlassian.plugin.Plugin,com.atlassian.plugin.Plugin)> ==> <java.util.HashSet: void <init>()>
INTERFACE edge: interfaceinvoke $r33.<java.util.Set: boolean add(java.lang.Object)>($r35) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$updatePlugin$26(com.atlassian.plugin.Plugin,com.atlassian.plugin.Plugin)> ==> <java.util.HashSet: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r33.<java.util.Set: boolean add(java.lang.Object)>($r10) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$updatePlugin$26(com.atlassian.plugin.Plugin,com.atlassian.plugin.Plugin)> ==> <java.util.HashSet: boolean add(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r33.<java.lang.Object: java.lang.Class getClass()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$updatePlugin$26(com.atlassian.plugin.Plugin,com.atlassian.plugin.Plugin)> ==> <java.lang.Object: java.lang.Class getClass()>
INTERFACE edge: r37 = interfaceinvoke $r36.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$updatePlugin$26(com.atlassian.plugin.Plugin,com.atlassian.plugin.Plugin)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r37 = interfaceinvoke $r36.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$updatePlugin$26(com.atlassian.plugin.Plugin,com.atlassian.plugin.Plugin)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r37 = interfaceinvoke $r36.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$updatePlugin$26(com.atlassian.plugin.Plugin,com.atlassian.plugin.Plugin)> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r37 = interfaceinvoke $r36.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$updatePlugin$26(com.atlassian.plugin.Plugin,com.atlassian.plugin.Plugin)> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r37 = interfaceinvoke $r36.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$updatePlugin$26(com.atlassian.plugin.Plugin,com.atlassian.plugin.Plugin)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: r37 = interfaceinvoke $r36.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$updatePlugin$26(com.atlassian.plugin.Plugin,com.atlassian.plugin.Plugin)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $r10 = interfaceinvoke r38.<com.atlassian.plugin.ModuleDescriptor: java.lang.String getCompleteKey()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$updatePlugin$26(com.atlassian.plugin.Plugin,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.String getCompleteKey()>
VIRTUAL edge: virtualinvoke $r8.<com.atlassian.plugin.manager.PluginPersistentStateModifier: void addPluginEnabledState(java.util.Map)>(r39) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$updatePlugin$26(com.atlassian.plugin.Plugin,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.PluginPersistentStateModifier: void addPluginEnabledState(java.util.Map)>
VIRTUAL edge: $r9 = virtualinvoke r0.<com.atlassian.plugin.manager.DependentPlugins: java.util.List getPlugins(boolean)>(1) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$disablePlugins$25(boolean,com.atlassian.plugin.manager.DependentPlugins,java.util.Collection)> ==> <com.atlassian.plugin.manager.DependentPlugins: java.util.List getPlugins(boolean)>
VIRTUAL edge: $r9 = virtualinvoke r0.<com.atlassian.plugin.manager.DependentPlugins: java.util.List getPlugins(boolean)>(0) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$disablePlugins$25(boolean,com.atlassian.plugin.manager.DependentPlugins,java.util.Collection)> ==> <com.atlassian.plugin.manager.DependentPlugins: java.util.List getPlugins(boolean)>
VIRTUAL edge: $r4 = virtualinvoke r0.<com.atlassian.plugin.manager.DependentPlugins: java.util.List toStringList()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$disablePlugins$25(boolean,com.atlassian.plugin.manager.DependentPlugins,java.util.Collection)> ==> <com.atlassian.plugin.manager.DependentPlugins: java.util.List toStringList()>
INTERFACE edge: $z1 = interfaceinvoke $r9.<java.util.List: boolean isEmpty()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$disablePlugins$25(boolean,com.atlassian.plugin.manager.DependentPlugins,java.util.Collection)> ==> <java.util.AbstractCollection: boolean isEmpty()>
INTERFACE edge: $z1 = interfaceinvoke $r9.<java.util.List: boolean isEmpty()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$disablePlugins$25(boolean,com.atlassian.plugin.manager.DependentPlugins,java.util.Collection)> ==> <java.util.ArrayList: boolean isEmpty()>
INTERFACE edge: r10 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$disablePlugins$25(boolean,com.atlassian.plugin.manager.DependentPlugins,java.util.Collection)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r10 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$disablePlugins$25(boolean,com.atlassian.plugin.manager.DependentPlugins,java.util.Collection)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: interfaceinvoke $r3.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("To disable plugins \'{}\', we need to first disable all dependent enabled plugins: {}", r2, $r4) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$disablePlugins$25(boolean,com.atlassian.plugin.manager.DependentPlugins,java.util.Collection)> ==> <org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r6.<com.atlassian.plugin.manager.DefaultPluginManager: void broadcastPluginDisabling(com.atlassian.plugin.Plugin)>(r11) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$disablePlugins$25(boolean,com.atlassian.plugin.manager.DependentPlugins,java.util.Collection)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void broadcastPluginDisabling(com.atlassian.plugin.Plugin)>
SPECIAL edge: specialinvoke r6.<com.atlassian.plugin.manager.DefaultPluginManager: void disablePluginWithModuleEvents(com.atlassian.plugin.Plugin)>(r13) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$disablePlugins$25(boolean,com.atlassian.plugin.manager.DependentPlugins,java.util.Collection)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void disablePluginWithModuleEvents(com.atlassian.plugin.Plugin)>
SPECIAL edge: specialinvoke r6.<com.atlassian.plugin.manager.DefaultPluginManager: void broadcastPluginDisabled(com.atlassian.plugin.Plugin)>(r15) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$disablePlugins$25(boolean,com.atlassian.plugin.manager.DependentPlugins,java.util.Collection)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void broadcastPluginDisabled(com.atlassian.plugin.Plugin)>
INTERFACE edge: r12 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$disablePlugins$25(boolean,com.atlassian.plugin.manager.DependentPlugins,java.util.Collection)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r12 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$disablePlugins$25(boolean,com.atlassian.plugin.manager.DependentPlugins,java.util.Collection)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: r14 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$disablePlugins$25(boolean,com.atlassian.plugin.manager.DependentPlugins,java.util.Collection)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r14 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$disablePlugins$25(boolean,com.atlassian.plugin.manager.DependentPlugins,java.util.Collection)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.Collection: boolean isEmpty()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enableDependentPlugins$24(java.util.Collection)> ==> <java.util.HashSet: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.Collection: boolean isEmpty()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enableDependentPlugins$24(java.util.Collection)> ==> <java.util.AbstractCollection: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.Collection: boolean isEmpty()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enableDependentPlugins$24(java.util.Collection)> ==> <java.util.ArrayDeque: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.Collection: boolean isEmpty()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enableDependentPlugins$24(java.util.Collection)> ==> <java.util.concurrent.CopyOnWriteArraySet: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.Collection: boolean isEmpty()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enableDependentPlugins$24(java.util.Collection)> ==> <java.util.TreeSet: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.Collection: boolean isEmpty()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enableDependentPlugins$24(java.util.Collection)> ==> <java.util.ArrayList: boolean isEmpty()>
SPECIAL edge: specialinvoke $r29.<com.atlassian.plugin.manager.PluginsInEnableOrder: void <init>(java.util.Collection,com.atlassian.plugin.PluginRegistry$ReadOnly)>(r0, $r32) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enableDependentPlugins$24(java.util.Collection)> ==> <com.atlassian.plugin.manager.PluginsInEnableOrder: void <init>(java.util.Collection,com.atlassian.plugin.PluginRegistry$ReadOnly)>
VIRTUAL edge: r4 = virtualinvoke $r29.<com.atlassian.plugin.manager.PluginsInEnableOrder: java.util.List get()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enableDependentPlugins$24(java.util.Collection)> ==> <com.atlassian.plugin.manager.PluginsInEnableOrder: java.util.List get()>
INTERFACE edge: $z1 = interfaceinvoke $r5.<org.slf4j.Logger: boolean isDebugEnabled()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enableDependentPlugins$24(java.util.Collection)> ==> <org.slf4j.Logger: boolean isDebugEnabled()>
INTERFACE edge: $i0 = interfaceinvoke r4.<java.util.List: int size()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enableDependentPlugins$24(java.util.Collection)> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i0 = interfaceinvoke r4.<java.util.List: int size()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enableDependentPlugins$24(java.util.Collection)> ==> <java.util.ArrayList: int size()>
INTERFACE edge: r23 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enableDependentPlugins$24(java.util.Collection)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r23 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enableDependentPlugins$24(java.util.Collection)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: r27 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enableDependentPlugins$24(java.util.Collection)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r27 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enableDependentPlugins$24(java.util.Collection)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: interfaceinvoke $r19.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Found {} plugins to enable: {}", $r20, $r21) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enableDependentPlugins$24(java.util.Collection)> ==> <org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r30.<com.atlassian.plugin.event.events.PluginEnablingEvent: void <init>(com.atlassian.plugin.Plugin)>(r24) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enableDependentPlugins$24(java.util.Collection)> ==> <com.atlassian.plugin.event.events.PluginEnablingEvent: void <init>(com.atlassian.plugin.Plugin)>
SPECIAL edge: specialinvoke r2.<com.atlassian.plugin.manager.DefaultPluginManager: void broadcastIgnoreError(java.lang.Object)>($r30) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enableDependentPlugins$24(java.util.Collection)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void broadcastIgnoreError(java.lang.Object)>
SPECIAL edge: $z4 = specialinvoke r2.<com.atlassian.plugin.manager.DefaultPluginManager: boolean enableConfiguredPluginModules(com.atlassian.plugin.Plugin)>(r28) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enableDependentPlugins$24(java.util.Collection)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: boolean enableConfiguredPluginModules(com.atlassian.plugin.Plugin)>
SPECIAL edge: specialinvoke r2.<com.atlassian.plugin.manager.DefaultPluginManager: void broadcastIgnoreError(java.lang.Object)>($r31) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enableDependentPlugins$24(java.util.Collection)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void broadcastIgnoreError(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r6.<com.atlassian.plugin.manager.PluginEnabler: void enable(java.util.Collection)>(r4) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enableDependentPlugins$24(java.util.Collection)> ==> <com.atlassian.plugin.manager.PluginEnabler: void enable(java.util.Collection)>
INTERFACE edge: r25 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enableDependentPlugins$24(java.util.Collection)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r25 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enableDependentPlugins$24(java.util.Collection)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r25 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enableDependentPlugins$24(java.util.Collection)> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r25 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enableDependentPlugins$24(java.util.Collection)> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r25 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enableDependentPlugins$24(java.util.Collection)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: r25 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enableDependentPlugins$24(java.util.Collection)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $r15 = interfaceinvoke r26.<com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginState getPluginState()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enableDependentPlugins$24(java.util.Collection)> ==> <com.atlassian.plugin.impl.AbstractPlugin: com.atlassian.plugin.PluginState getPluginState()>
INTERFACE edge: $r15 = interfaceinvoke r26.<com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginState getPluginState()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enableDependentPlugins$24(java.util.Collection)> ==> <com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginState getPluginState()>
INTERFACE edge: interfaceinvoke $r8.<java.util.Collection: void clear()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enableDependentPlugins$24(java.util.Collection)> ==> <java.util.HashSet: void clear()>
INTERFACE edge: interfaceinvoke $r8.<java.util.Collection: void clear()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enableDependentPlugins$24(java.util.Collection)> ==> <java.util.LinkedList: void clear()>
INTERFACE edge: interfaceinvoke $r8.<java.util.Collection: void clear()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enableDependentPlugins$24(java.util.Collection)> ==> <java.util.ArrayDeque: void clear()>
INTERFACE edge: interfaceinvoke $r8.<java.util.Collection: void clear()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enableDependentPlugins$24(java.util.Collection)> ==> <java.util.concurrent.CopyOnWriteArraySet: void clear()>
INTERFACE edge: interfaceinvoke $r8.<java.util.Collection: void clear()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enableDependentPlugins$24(java.util.Collection)> ==> <java.util.TreeSet: void clear()>
INTERFACE edge: interfaceinvoke $r8.<java.util.Collection: void clear()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enableDependentPlugins$24(java.util.Collection)> ==> <java.util.ArrayList: void clear()>
INTERFACE edge: $r10 = interfaceinvoke r28.<com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginState getPluginState()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enableDependentPlugins$24(java.util.Collection)> ==> <com.atlassian.plugin.impl.AbstractPlugin: com.atlassian.plugin.PluginState getPluginState()>
INTERFACE edge: $r10 = interfaceinvoke r28.<com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginState getPluginState()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enableDependentPlugins$24(java.util.Collection)> ==> <com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginState getPluginState()>
SPECIAL edge: specialinvoke $r31.<com.atlassian.plugin.event.events.PluginEnabledEvent: void <init>(com.atlassian.plugin.Plugin)>(r28) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enableDependentPlugins$24(java.util.Collection)> ==> <com.atlassian.plugin.event.events.PluginEnabledEvent: void <init>(com.atlassian.plugin.Plugin)>
SPECIAL edge: specialinvoke $r66.<java.util.ArrayList: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <java.util.ArrayList: void <init>()>
INTERFACE edge: interfaceinvoke $r66.<java.util.List: boolean addAll(java.util.Collection)>(r26) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <java.util.ArrayList: boolean addAll(java.util.Collection)>
INTERFACE edge: interfaceinvoke $r66.<java.util.List: boolean remove(java.lang.Object)>(r14) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <java.util.ArrayList: boolean remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r66.<java.util.List: boolean add(java.lang.Object)>(r61) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r66.<java.util.List: boolean addAll(java.util.Collection)>($r9) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <java.util.ArrayList: boolean addAll(java.util.Collection)>
SPECIAL edge: specialinvoke $r67.<java.util.HashSet: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <java.util.HashSet: void <init>()>
INTERFACE edge: interfaceinvoke $r67.<java.util.Set: boolean add(java.lang.Object)>($r72) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <java.util.HashSet: boolean add(java.lang.Object)>
INTERFACE edge: r64 = interfaceinvoke $r67.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <java.util.HashSet: java.util.Iterator iterator()>
SPECIAL edge: r6 = specialinvoke r4.<com.atlassian.plugin.manager.DefaultPluginManager: java.util.Map parseFileNamedByPropertyAsMap(java.lang.String)>($r5) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: java.util.Map parseFileNamedByPropertyAsMap(java.lang.String)>
SPECIAL edge: $z2 = specialinvoke r4.<com.atlassian.plugin.manager.DefaultPluginManager: boolean pluginVersionIsAcceptable(com.atlassian.plugin.Plugin,java.util.Map)>(r61, r6) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: boolean pluginVersionIsAcceptable(com.atlassian.plugin.Plugin,java.util.Map)>
SPECIAL edge: specialinvoke r4.<com.atlassian.plugin.manager.DefaultPluginManager: void discardPlugin(com.atlassian.plugin.loaders.PluginLoader,com.atlassian.plugin.Plugin)>(r16, r61) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void discardPlugin(com.atlassian.plugin.loaders.PluginLoader,com.atlassian.plugin.Plugin)>
SPECIAL edge: specialinvoke r4.<com.atlassian.plugin.manager.DefaultPluginManager: void broadcastIgnoreError(java.lang.Object)>($r69) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void broadcastIgnoreError(java.lang.Object)>
SPECIAL edge: r62 = specialinvoke r4.<com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.manager.DependentPlugins disableOnlyPluginDependencies(java.util.Collection,java.util.Set)>($r18, $r25) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.manager.DependentPlugins disableOnlyPluginDependencies(java.util.Collection,java.util.Set)>
SPECIAL edge: specialinvoke r4.<com.atlassian.plugin.manager.DefaultPluginManager: void broadcastIgnoreError(java.lang.Object)>($r71) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void broadcastIgnoreError(java.lang.Object)>
VIRTUAL edge: virtualinvoke r4.<com.atlassian.plugin.manager.DefaultPluginManager: void updatePlugin(com.atlassian.plugin.Plugin,com.atlassian.plugin.Plugin)>(r14, r61) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void updatePlugin(com.atlassian.plugin.Plugin,com.atlassian.plugin.Plugin)>
SPECIAL edge: specialinvoke r4.<com.atlassian.plugin.manager.DefaultPluginManager: void discardPlugin(com.atlassian.plugin.loaders.PluginLoader,com.atlassian.plugin.Plugin)>(r16, r61) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void discardPlugin(com.atlassian.plugin.loaders.PluginLoader,com.atlassian.plugin.Plugin)>
SPECIAL edge: $z10 = specialinvoke r4.<com.atlassian.plugin.manager.DefaultPluginManager: boolean isPluginEnabledInSafeMode(com.atlassian.plugin.Plugin,java.util.Collection)>(r61, r8) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: boolean isPluginEnabledInSafeMode(com.atlassian.plugin.Plugin,java.util.Collection)>
VIRTUAL edge: $r31 = virtualinvoke r4.<com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.manager.PluginPersistentState getState()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.manager.PluginPersistentState getState()>
SPECIAL edge: specialinvoke r4.<com.atlassian.plugin.manager.DefaultPluginManager: void broadcastIgnoreError(java.lang.Object)>($r75) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void broadcastIgnoreError(java.lang.Object)>
SPECIAL edge: specialinvoke r4.<com.atlassian.plugin.manager.DefaultPluginManager: void broadcastIgnoreError(java.lang.Object)>($r76) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void broadcastIgnoreError(java.lang.Object)>
SPECIAL edge: specialinvoke r4.<com.atlassian.plugin.manager.DefaultPluginManager: void enableDependentPlugins(java.util.Collection)>($r66) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void enableDependentPlugins(java.util.Collection)>
SPECIAL edge: specialinvoke r4.<com.atlassian.plugin.manager.DefaultPluginManager: void broadcastIgnoreError(java.lang.Object)>(r65) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void broadcastIgnoreError(java.lang.Object)>
SPECIAL edge: specialinvoke $r68.<java.util.TreeSet: void <init>(java.util.Collection)>(r8) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <java.util.TreeSet: void <init>(java.util.Collection)>
VIRTUAL edge: r60 = virtualinvoke $r68.<java.util.TreeSet: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: r12 = interfaceinvoke r61.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: r12 = interfaceinvoke r61.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
INTERFACE edge: $i0 = interfaceinvoke r61.<com.atlassian.plugin.Plugin: int compareTo(java.lang.Object)>(r14) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <com.atlassian.plugin.impl.AbstractPlugin: int compareTo(java.lang.Object)>
INTERFACE edge: $r17 = interfaceinvoke r61.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r17 = interfaceinvoke r61.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
INTERFACE edge: interfaceinvoke r61.<com.atlassian.plugin.Plugin: void install()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <com.atlassian.plugin.impl.AbstractPlugin: void install()>
INTERFACE edge: $z8 = interfaceinvoke r61.<com.atlassian.plugin.Plugin: boolean isSystemPlugin()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <com.atlassian.plugin.impl.AbstractPlugin: boolean isSystemPlugin()>
INTERFACE edge: r14 = interfaceinvoke $r13.<com.atlassian.plugin.PluginRegistry$ReadWrite: com.atlassian.plugin.Plugin get(java.lang.String)>(r12) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <com.atlassian.plugin.manager.PluginRegistryImpl: com.atlassian.plugin.Plugin get(java.lang.String)>
INTERFACE edge: $r52 = interfaceinvoke r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r12) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r52 = interfaceinvoke r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r12) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r52 = interfaceinvoke r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r12) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <java.util.TreeMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r52 = interfaceinvoke r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r12) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r52 = interfaceinvoke r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r12) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r51.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Unacceptable plugin {} found - version less than minimum \'{}\'", r61, $r52) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r69.<com.atlassian.plugin.event.events.PluginInstallingEvent: void <init>(com.atlassian.plugin.Plugin)>(r61) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <com.atlassian.plugin.event.events.PluginInstallingEvent: void <init>(com.atlassian.plugin.Plugin)>
SPECIAL edge: specialinvoke $r70.<java.util.HashSet: void <init>(java.util.Collection)>($r24) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <java.util.HashSet: void <init>(java.util.Collection)>
VIRTUAL edge: r26 = virtualinvoke r62.<com.atlassian.plugin.manager.DependentPlugins: java.util.List getPlugins(boolean)>(0) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <com.atlassian.plugin.manager.DependentPlugins: java.util.List getPlugins(boolean)>
INTERFACE edge: $z4 = interfaceinvoke r26.<java.util.List: boolean isEmpty()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <java.util.AbstractCollection: boolean isEmpty()>
INTERFACE edge: $z4 = interfaceinvoke r26.<java.util.List: boolean isEmpty()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <java.util.ArrayList: boolean isEmpty()>
INTERFACE edge: $z6 = interfaceinvoke r26.<java.util.List: boolean isEmpty()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <java.util.AbstractCollection: boolean isEmpty()>
INTERFACE edge: $z6 = interfaceinvoke r26.<java.util.List: boolean isEmpty()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <java.util.ArrayList: boolean isEmpty()>
INTERFACE edge: interfaceinvoke $r48.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Found mandatory, optional and dynamically dependent plugins to re-enable after plugin upgrade \'{}\': {}. Enabling...", r61, $r49) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r71.<com.atlassian.plugin.event.events.PluginUpgradingEvent: void <init>(com.atlassian.plugin.Plugin)>(r14) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <com.atlassian.plugin.event.events.PluginUpgradingEvent: void <init>(com.atlassian.plugin.Plugin)>
SPECIAL edge: specialinvoke $r72.<com.atlassian.plugin.event.events.PluginDependentsChangedEvent: void <init>(com.atlassian.plugin.Plugin,com.atlassian.plugin.PluginState,java.util.List,java.util.List)>(r61, $r46, $r47, r26) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <com.atlassian.plugin.event.events.PluginDependentsChangedEvent: void <init>(com.atlassian.plugin.Plugin,com.atlassian.plugin.PluginState,java.util.List,java.util.List)>
SPECIAL edge: specialinvoke $r73.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r56 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Duplicate plugin found (installed version is the same or older) and could not be unloaded: \'") in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'") in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r74.<com.atlassian.plugin.PluginParseException: void <init>(java.lang.String,java.lang.Throwable)>($r59, $r53) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <com.atlassian.plugin.PluginParseException: void <init>(java.lang.String,java.lang.Throwable)>
INTERFACE edge: interfaceinvoke $r15.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Duplicate plugin found (installed version is newer): \'{}\'", r12) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>
VIRTUAL edge: $r29 = virtualinvoke $r28.<com.atlassian.plugin.manager.StateTracker: com.atlassian.plugin.manager.StateTracker$State get()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <com.atlassian.plugin.manager.StateTracker: com.atlassian.plugin.manager.StateTracker$State get()>
INTERFACE edge: $z7 = interfaceinvoke $r31.<com.atlassian.plugin.manager.PluginPersistentState: boolean isEnabled(com.atlassian.plugin.Plugin)>(r61) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <com.atlassian.plugin.manager.PluginPersistentState: boolean isEnabled(com.atlassian.plugin.Plugin)>
INTERFACE edge: $z7 = interfaceinvoke $r31.<com.atlassian.plugin.manager.PluginPersistentState: boolean isEnabled(com.atlassian.plugin.Plugin)>(r61) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <com.atlassian.plugin.manager.DefaultPluginPersistentState: boolean isEnabled(com.atlassian.plugin.Plugin)>
INTERFACE edge: interfaceinvoke $r44.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Plugin \'{}\' is to be enabled.", r12) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r32.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Plugin \'{}\' is disabled.", r12) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>
SPECIAL edge: specialinvoke $r75.<com.atlassian.plugin.event.events.PluginUpgradedEvent: void <init>(com.atlassian.plugin.Plugin)>(r61) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <com.atlassian.plugin.event.events.PluginUpgradedEvent: void <init>(com.atlassian.plugin.Plugin)>
SPECIAL edge: specialinvoke $r76.<com.atlassian.plugin.event.events.PluginInstalledEvent: void <init>(com.atlassian.plugin.Plugin)>(r61) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <com.atlassian.plugin.event.events.PluginInstalledEvent: void <init>(com.atlassian.plugin.Plugin)>
INTERFACE edge: interfaceinvoke $r34.<com.atlassian.plugin.PluginRegistry$ReadWrite: void put(com.atlassian.plugin.Plugin)>(r61) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <com.atlassian.plugin.manager.PluginRegistryImpl: void put(com.atlassian.plugin.Plugin)>
INTERFACE edge: $r39 = interfaceinvoke $r37.<java.util.Map: java.lang.Object get(java.lang.Object)>(r61) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r39 = interfaceinvoke $r37.<java.util.Map: java.lang.Object get(java.lang.Object)>(r61) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r39 = interfaceinvoke $r37.<java.util.Map: java.lang.Object get(java.lang.Object)>(r61) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <java.util.TreeMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r39 = interfaceinvoke $r37.<java.util.Map: java.lang.Object get(java.lang.Object)>(r61) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r39 = interfaceinvoke $r37.<java.util.Map: java.lang.Object get(java.lang.Object)>(r61) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r38.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r61, $r39) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r38.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r61, $r39) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r38.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r61, $r39) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r38.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r61, $r39) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r35.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r61, r16) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r35.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r61, r16) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r35.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r61, r16) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r35.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r61, r16) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
CLINIT edge: r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(r2) in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.Map parseFileNamedByPropertyAsMap(java.lang.String)> ==> <java.lang.System: void <clinit>()>
STATIC edge: $r20 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r19) in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.Map parseFileNamedByPropertyAsMap(java.lang.String)> ==> <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>
STATIC edge: r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(r2) in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.Map parseFileNamedByPropertyAsMap(java.lang.String)> ==> <java.lang.System: java.lang.String getProperty(java.lang.String)>
CLINIT edge: $r20 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r19) in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.Map parseFileNamedByPropertyAsMap(java.lang.String)> ==> <java.util.Collections: void <clinit>()>
CLINIT edge: $r8 = <com.atlassian.plugin.manager.DefaultPluginManager: org.slf4j.Logger log> in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.Map parseFileNamedByPropertyAsMap(java.lang.String)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void <clinit>()>
CLINIT edge: r5 = staticinvoke <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String cleanVersionString(java.lang.String)>(r4) in <com.atlassian.plugin.manager.DefaultPluginManager: boolean pluginVersionIsAcceptable(com.atlassian.plugin.Plugin,java.util.Map)> ==> <com.atlassian.plugin.impl.AbstractPlugin: void <clinit>()>
STATIC edge: r6 = staticinvoke <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String cleanVersionString(java.lang.String)>($r15) in <com.atlassian.plugin.manager.DefaultPluginManager: boolean pluginVersionIsAcceptable(com.atlassian.plugin.Plugin,java.util.Map)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String cleanVersionString(java.lang.String)>
STATIC edge: r5 = staticinvoke <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String cleanVersionString(java.lang.String)>(r4) in <com.atlassian.plugin.manager.DefaultPluginManager: boolean pluginVersionIsAcceptable(com.atlassian.plugin.Plugin,java.util.Map)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String cleanVersionString(java.lang.String)>
CLINIT edge: $r11 = <com.atlassian.plugin.manager.DefaultPluginManager: org.slf4j.Logger log> in <com.atlassian.plugin.manager.DefaultPluginManager: boolean pluginVersionIsAcceptable(com.atlassian.plugin.Plugin,java.util.Map)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void <clinit>()>
CLINIT edge: $r17 = new com.atlassian.plugin.util.VersionStringComparator in <com.atlassian.plugin.manager.DefaultPluginManager: boolean pluginVersionIsAcceptable(com.atlassian.plugin.Plugin,java.util.Map)> ==> <com.atlassian.plugin.util.VersionStringComparator: void <clinit>()>
CLINIT edge: $r2 = <com.atlassian.plugin.manager.DefaultPluginManager: org.slf4j.Logger log> in <com.atlassian.plugin.manager.DefaultPluginManager: void discardPlugin(com.atlassian.plugin.loaders.PluginLoader,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void <clinit>()>
STATIC edge: $r4 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$lambda_updatePlugin_26__56: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.Plugin,com.atlassian.plugin.Plugin)>(r0, r1, r2) in <com.atlassian.plugin.manager.DefaultPluginManager: void updatePlugin(com.atlassian.plugin.Plugin,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_updatePlugin_26__56: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.Plugin,com.atlassian.plugin.Plugin)>
STATIC edge: $r4 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$lambda_isPluginEnabledInSafeMode_23__53: java.util.function.Predicate bootstrap$()>() in <com.atlassian.plugin.manager.DefaultPluginManager: boolean isPluginEnabledInSafeMode(com.atlassian.plugin.Plugin,java.util.Collection)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_isPluginEnabledInSafeMode_23__53: java.util.function.Predicate bootstrap$()>
STATIC edge: $r6 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>() in <com.atlassian.plugin.manager.DefaultPluginManager: boolean isPluginEnabledInSafeMode(com.atlassian.plugin.Plugin,java.util.Collection)> ==> <java.util.stream.Collectors: java.util.stream.Collector toList()>
SPECIAL edge: r2 = specialinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.loaders.PluginLoader ensurePluginAndLoaderSupportsUninstall(com.atlassian.plugin.Plugin)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$unloadPlugin$21(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.loaders.PluginLoader ensurePluginAndLoaderSupportsUninstall(com.atlassian.plugin.Plugin)>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: boolean isPluginEnabled(java.lang.String)>($r3) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$unloadPlugin$21(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: boolean isPluginEnabled(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: void notifyPluginDisabled(com.atlassian.plugin.Plugin)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$unloadPlugin$21(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void notifyPluginDisabled(com.atlassian.plugin.Plugin)>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: void notifyUninstallPlugin(com.atlassian.plugin.Plugin)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$unloadPlugin$21(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void notifyUninstallPlugin(com.atlassian.plugin.Plugin)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: void removePluginFromLoader(com.atlassian.plugin.Plugin)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$unloadPlugin$21(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void removePluginFromLoader(com.atlassian.plugin.Plugin)>
INTERFACE edge: $r3 = interfaceinvoke r1.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$unloadPlugin$21(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r3 = interfaceinvoke r1.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$unloadPlugin$21(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
INTERFACE edge: $r5 = interfaceinvoke r1.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$unloadPlugin$21(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r5 = interfaceinvoke r1.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$unloadPlugin$21(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
INTERFACE edge: interfaceinvoke $r4.<com.atlassian.plugin.PluginRegistry$ReadWrite: com.atlassian.plugin.Plugin remove(java.lang.String)>($r5) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$unloadPlugin$21(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.PluginRegistryImpl: com.atlassian.plugin.Plugin remove(java.lang.String)>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$lambda_notifyPluginDisabled_41__79: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.Plugin)>(r0, r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void notifyPluginDisabled(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_notifyPluginDisabled_41__79: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.Plugin)>
VIRTUAL edge: $r3 = virtualinvoke r2.<com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.manager.PluginPersistentState getState()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$revertRestartRequiredChange$20(java.lang.String)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.manager.PluginPersistentState getState()>
SPECIAL edge: specialinvoke r2.<com.atlassian.plugin.manager.DefaultPluginManager: void updateRequiresRestartState(java.lang.String,com.atlassian.plugin.PluginRestartState)>(r0, $r11) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$revertRestartRequiredChange$20(java.lang.String)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void updateRequiresRestartState(java.lang.String,com.atlassian.plugin.PluginRestartState)>
INTERFACE edge: r4 = interfaceinvoke $r3.<com.atlassian.plugin.manager.PluginPersistentState: com.atlassian.plugin.PluginRestartState getPluginRestartState(java.lang.String)>(r0) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$revertRestartRequiredChange$20(java.lang.String)> ==> <com.atlassian.plugin.manager.PluginPersistentState: com.atlassian.plugin.PluginRestartState getPluginRestartState(java.lang.String)>
INTERFACE edge: r4 = interfaceinvoke $r3.<com.atlassian.plugin.manager.PluginPersistentState: com.atlassian.plugin.PluginRestartState getPluginRestartState(java.lang.String)>(r0) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$revertRestartRequiredChange$20(java.lang.String)> ==> <com.atlassian.plugin.manager.DefaultPluginPersistentState: com.atlassian.plugin.PluginRestartState getPluginRestartState(java.lang.String)>
INTERFACE edge: interfaceinvoke $r10.<com.atlassian.plugin.RevertablePluginInstaller: void revertInstalledPlugin(java.lang.String)>(r0) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$revertRestartRequiredChange$20(java.lang.String)> ==> <com.atlassian.plugin.repositories.FilePluginInstaller: void revertInstalledPlugin(java.lang.String)>
INTERFACE edge: interfaceinvoke $r10.<com.atlassian.plugin.RevertablePluginInstaller: void revertInstalledPlugin(java.lang.String)>(r0) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$revertRestartRequiredChange$20(java.lang.String)> ==> <com.atlassian.plugin.manager.NoOpRevertablePluginInstaller: void revertInstalledPlugin(java.lang.String)>
INTERFACE edge: interfaceinvoke $r7.<com.atlassian.plugin.RevertablePluginInstaller: void revertInstalledPlugin(java.lang.String)>(r0) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$revertRestartRequiredChange$20(java.lang.String)> ==> <com.atlassian.plugin.manager.NoOpRevertablePluginInstaller: void revertInstalledPlugin(java.lang.String)>
INTERFACE edge: interfaceinvoke $r7.<com.atlassian.plugin.RevertablePluginInstaller: void revertInstalledPlugin(java.lang.String)>(r0) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$revertRestartRequiredChange$20(java.lang.String)> ==> <com.atlassian.plugin.repositories.FilePluginInstaller: void revertInstalledPlugin(java.lang.String)>
INTERFACE edge: interfaceinvoke $r8.<com.atlassian.plugin.PluginRegistry$ReadWrite: com.atlassian.plugin.Plugin remove(java.lang.String)>(r0) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$revertRestartRequiredChange$20(java.lang.String)> ==> <com.atlassian.plugin.manager.PluginRegistryImpl: com.atlassian.plugin.Plugin remove(java.lang.String)>
INTERFACE edge: $r5 = interfaceinvoke $r1.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r4) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$uninstallPlugins$19(java.util.Collection)> ==> <java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>
INTERFACE edge: $r8 = interfaceinvoke r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$uninstallPlugins$19(java.util.Collection)> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r8 = interfaceinvoke r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$uninstallPlugins$19(java.util.Collection)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r8 = interfaceinvoke r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$uninstallPlugins$19(java.util.Collection)> ==> <java.util.TreeMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r8 = interfaceinvoke r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$uninstallPlugins$19(java.util.Collection)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r8 = interfaceinvoke r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$uninstallPlugins$19(java.util.Collection)> ==> <java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r13 = interfaceinvoke r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r12) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$uninstallPlugins$19(java.util.Collection)> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r13 = interfaceinvoke r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r12) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$uninstallPlugins$19(java.util.Collection)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r13 = interfaceinvoke r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r12) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$uninstallPlugins$19(java.util.Collection)> ==> <java.util.TreeMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r13 = interfaceinvoke r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r12) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$uninstallPlugins$19(java.util.Collection)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r13 = interfaceinvoke r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r12) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$uninstallPlugins$19(java.util.Collection)> ==> <java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r14.<java.util.Set: boolean isEmpty()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$uninstallPlugins$19(java.util.Collection)> ==> <java.util.HashSet: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke r14.<java.util.Set: boolean isEmpty()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$uninstallPlugins$19(java.util.Collection)> ==> <java.util.concurrent.CopyOnWriteArraySet: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke r14.<java.util.Set: boolean isEmpty()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$uninstallPlugins$19(java.util.Collection)> ==> <java.util.TreeSet: boolean isEmpty()>
INTERFACE edge: $r17 = interfaceinvoke $r15.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r16) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$uninstallPlugins$19(java.util.Collection)> ==> <java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>
INTERFACE edge: $r19 = interfaceinvoke $r17.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r18) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$uninstallPlugins$19(java.util.Collection)> ==> <java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>
SPECIAL edge: specialinvoke $r20.<java.util.HashSet: void <init>(java.util.Collection)>($r26) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$uninstallPlugins$19(java.util.Collection)> ==> <java.util.HashSet: void <init>(java.util.Collection)>
SPECIAL edge: r28 = specialinvoke r9.<com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.manager.DependentPlugins disablePluginsAndTheirDependencies(java.util.Collection,java.util.Set)>($r25, $r27) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$uninstallPlugins$19(java.util.Collection)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.manager.DependentPlugins disablePluginsAndTheirDependencies(java.util.Collection,java.util.Set)>
SPECIAL edge: specialinvoke r9.<com.atlassian.plugin.manager.DefaultPluginManager: void reenableDependent(java.util.Collection,com.atlassian.plugin.manager.DependentPlugins,com.atlassian.plugin.PluginState)>(r14, r28, $r38) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$uninstallPlugins$19(java.util.Collection)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void reenableDependent(java.util.Collection,com.atlassian.plugin.manager.DependentPlugins,com.atlassian.plugin.PluginState)>
VIRTUAL edge: $r31 = virtualinvoke r28.<com.atlassian.plugin.manager.DependentPlugins: java.util.List getPluginsByTypes(java.util.Set,boolean)>($r30, 1) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$uninstallPlugins$19(java.util.Collection)> ==> <com.atlassian.plugin.manager.DependentPlugins: java.util.List getPluginsByTypes(java.util.Set,boolean)>
VIRTUAL edge: virtualinvoke $r32.<java.lang.Object: java.lang.Class getClass()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$uninstallPlugins$19(java.util.Collection)> ==> <java.lang.Object: java.lang.Class getClass()>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.event.events.PluginUninstalledEvent: void <init>(com.atlassian.plugin.Plugin)>(r2) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$null$18(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.event.events.PluginUninstalledEvent: void <init>(com.atlassian.plugin.Plugin)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: void broadcastIgnoreError(java.lang.Object)>($r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$null$18(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void broadcastIgnoreError(java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.event.events.PluginUninstallingEvent: void <init>(com.atlassian.plugin.Plugin)>(r2) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$null$17(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.event.events.PluginUninstallingEvent: void <init>(com.atlassian.plugin.Plugin)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: void broadcastIgnoreError(java.lang.Object)>($r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$null$17(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void broadcastIgnoreError(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.loaders.PluginLoader ensurePluginAndLoaderSupportsUninstall(com.atlassian.plugin.Plugin)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$null$16(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.loaders.PluginLoader ensurePluginAndLoaderSupportsUninstall(com.atlassian.plugin.Plugin)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: void markPluginUninstallThatRequiresRestart(com.atlassian.plugin.Plugin)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$null$16(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void markPluginUninstallThatRequiresRestart(com.atlassian.plugin.Plugin)>
CLINIT edge: $r1 = <com.atlassian.plugin.manager.DefaultPluginManager: org.slf4j.Logger log> in <com.atlassian.plugin.manager.DefaultPluginManager: void markPluginUninstallThatRequiresRestart(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.atlassian.plugin.util.PluginUtils: java.util.Set getPluginModulesThatRequireRestart(com.atlassian.plugin.Plugin)>(r0) in <com.atlassian.plugin.manager.DefaultPluginManager: void markPluginUninstallThatRequiresRestart(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.util.PluginUtils: java.util.Set getPluginModulesThatRequireRestart(com.atlassian.plugin.Plugin)>
CLINIT edge: $r2 = staticinvoke <com.atlassian.plugin.util.PluginUtils: java.util.Set getPluginModulesThatRequireRestart(com.atlassian.plugin.Plugin)>(r0) in <com.atlassian.plugin.manager.DefaultPluginManager: void markPluginUninstallThatRequiresRestart(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.util.PluginUtils: void <clinit>()>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: void uninstallPlugins(java.util.Collection)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$uninstall$15(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void uninstallPlugins(java.util.Collection)>
INTERFACE edge: r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$scanForNewPlugins$14(java.util.concurrent.atomic.AtomicInteger)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$scanForNewPlugins$14(java.util.concurrent.atomic.AtomicInteger)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z1 = interfaceinvoke r4.<com.atlassian.plugin.loaders.PluginLoader: boolean supportsAddition()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$scanForNewPlugins$14(java.util.concurrent.atomic.AtomicInteger)> ==> <com.atlassian.plugin.loaders.ForwardingPluginLoader: boolean supportsAddition()>
INTERFACE edge: $z1 = interfaceinvoke r4.<com.atlassian.plugin.loaders.PluginLoader: boolean supportsAddition()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$scanForNewPlugins$14(java.util.concurrent.atomic.AtomicInteger)> ==> <com.atlassian.plugin.loaders.ScanningPluginLoader: boolean supportsAddition()>
INTERFACE edge: $z1 = interfaceinvoke r4.<com.atlassian.plugin.loaders.PluginLoader: boolean supportsAddition()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$scanForNewPlugins$14(java.util.concurrent.atomic.AtomicInteger)> ==> <com.atlassian.plugin.loaders.SinglePluginLoader: boolean supportsAddition()>
INTERFACE edge: $z1 = interfaceinvoke r4.<com.atlassian.plugin.loaders.PluginLoader: boolean supportsAddition()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$scanForNewPlugins$14(java.util.concurrent.atomic.AtomicInteger)> ==> <com.atlassian.plugin.loaders.ClassPathPluginLoader: boolean supportsAddition()>
INTERFACE edge: $r8 = interfaceinvoke r4.<com.atlassian.plugin.loaders.PluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)>($r7) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$scanForNewPlugins$14(java.util.concurrent.atomic.AtomicInteger)> ==> <com.atlassian.plugin.loaders.ForwardingPluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)>
INTERFACE edge: $r8 = interfaceinvoke r4.<com.atlassian.plugin.loaders.PluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)>($r7) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$scanForNewPlugins$14(java.util.concurrent.atomic.AtomicInteger)> ==> <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)>
INTERFACE edge: $r8 = interfaceinvoke r4.<com.atlassian.plugin.loaders.PluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)>($r7) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$scanForNewPlugins$14(java.util.concurrent.atomic.AtomicInteger)> ==> <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)>
INTERFACE edge: $r8 = interfaceinvoke r4.<com.atlassian.plugin.loaders.PluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)>($r7) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$scanForNewPlugins$14(java.util.concurrent.atomic.AtomicInteger)> ==> <com.atlassian.plugin.loaders.SinglePluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)>
INTERFACE edge: $r8 = interfaceinvoke r4.<com.atlassian.plugin.loaders.PluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)>($r7) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$scanForNewPlugins$14(java.util.concurrent.atomic.AtomicInteger)> ==> <com.atlassian.plugin.loaders.ClassPathPluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)>
SPECIAL edge: specialinvoke $r29.<java.util.ArrayList: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$scanForNewPlugins$14(java.util.concurrent.atomic.AtomicInteger)> ==> <java.util.ArrayList: void <init>()>
INTERFACE edge: interfaceinvoke $r29.<java.util.List: boolean add(java.lang.Object)>(r28) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$scanForNewPlugins$14(java.util.concurrent.atomic.AtomicInteger)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: $i0 = interfaceinvoke $r29.<java.util.List: int size()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$scanForNewPlugins$14(java.util.concurrent.atomic.AtomicInteger)> ==> <java.util.ArrayList: int size()>
INTERFACE edge: r9 = interfaceinvoke $r8.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$scanForNewPlugins$14(java.util.concurrent.atomic.AtomicInteger)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r9 = interfaceinvoke $r8.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$scanForNewPlugins$14(java.util.concurrent.atomic.AtomicInteger)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r9 = interfaceinvoke $r8.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$scanForNewPlugins$14(java.util.concurrent.atomic.AtomicInteger)> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r9 = interfaceinvoke $r8.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$scanForNewPlugins$14(java.util.concurrent.atomic.AtomicInteger)> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r9 = interfaceinvoke $r8.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$scanForNewPlugins$14(java.util.concurrent.atomic.AtomicInteger)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: r9 = interfaceinvoke $r8.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$scanForNewPlugins$14(java.util.concurrent.atomic.AtomicInteger)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $r13 = interfaceinvoke $r31.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$scanForNewPlugins$14(java.util.concurrent.atomic.AtomicInteger)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r13 = interfaceinvoke $r31.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$scanForNewPlugins$14(java.util.concurrent.atomic.AtomicInteger)> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
INTERFACE edge: r14 = interfaceinvoke $r12.<com.atlassian.plugin.PluginRegistry$ReadWrite: com.atlassian.plugin.Plugin get(java.lang.String)>($r13) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$scanForNewPlugins$14(java.util.concurrent.atomic.AtomicInteger)> ==> <com.atlassian.plugin.manager.PluginRegistryImpl: com.atlassian.plugin.Plugin get(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: void markPluginInstallThatRequiresRestart(com.atlassian.plugin.Plugin)>($r33) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$scanForNewPlugins$14(java.util.concurrent.atomic.AtomicInteger)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void markPluginInstallThatRequiresRestart(com.atlassian.plugin.Plugin)>
VIRTUAL edge: $r21 = virtualinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.PluginRestartState getPluginRestartState(java.lang.String)>($r20) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$scanForNewPlugins$14(java.util.concurrent.atomic.AtomicInteger)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.PluginRestartState getPluginRestartState(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: void markPluginUpgradeThatRequiresRestart(com.atlassian.plugin.Plugin)>($r37) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$scanForNewPlugins$14(java.util.concurrent.atomic.AtomicInteger)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void markPluginUpgradeThatRequiresRestart(com.atlassian.plugin.Plugin)>
VIRTUAL edge: $r17 = virtualinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.PluginRestartState getPluginRestartState(java.lang.String)>($r16) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$scanForNewPlugins$14(java.util.concurrent.atomic.AtomicInteger)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.PluginRestartState getPluginRestartState(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: void revertRestartRequiredChange(java.lang.String)>($r18) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$scanForNewPlugins$14(java.util.concurrent.atomic.AtomicInteger)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void revertRestartRequiredChange(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: void markPluginUpgradeThatRequiresRestart(com.atlassian.plugin.Plugin)>($r38) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$scanForNewPlugins$14(java.util.concurrent.atomic.AtomicInteger)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void markPluginUpgradeThatRequiresRestart(com.atlassian.plugin.Plugin)>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: void addPlugins(com.atlassian.plugin.loaders.PluginLoader,java.util.Collection)>(r4, $r29) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$scanForNewPlugins$14(java.util.concurrent.atomic.AtomicInteger)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void addPlugins(com.atlassian.plugin.loaders.PluginLoader,java.util.Collection)>
SPECIAL edge: specialinvoke $r30.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$scanForNewPlugins$14(java.util.concurrent.atomic.AtomicInteger)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r24 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Plugin requires a restart of the application due to the following modules: ") in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$scanForNewPlugins$14(java.util.concurrent.atomic.AtomicInteger)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r25) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$scanForNewPlugins$14(java.util.concurrent.atomic.AtomicInteger)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$scanForNewPlugins$14(java.util.concurrent.atomic.AtomicInteger)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke r22.<com.atlassian.plugin.impl.UnloadablePlugin: void setErrorText(java.lang.String)>($r27) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$scanForNewPlugins$14(java.util.concurrent.atomic.AtomicInteger)> ==> <com.atlassian.plugin.impl.UnloadablePlugin: void setErrorText(java.lang.String)>
INTERFACE edge: $r20 = interfaceinvoke $r36.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$scanForNewPlugins$14(java.util.concurrent.atomic.AtomicInteger)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r20 = interfaceinvoke $r36.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$scanForNewPlugins$14(java.util.concurrent.atomic.AtomicInteger)> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
INTERFACE edge: $r16 = interfaceinvoke r14.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$scanForNewPlugins$14(java.util.concurrent.atomic.AtomicInteger)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r16 = interfaceinvoke r14.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$scanForNewPlugins$14(java.util.concurrent.atomic.AtomicInteger)> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
INTERFACE edge: $r18 = interfaceinvoke r14.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$scanForNewPlugins$14(java.util.concurrent.atomic.AtomicInteger)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r18 = interfaceinvoke r14.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$scanForNewPlugins$14(java.util.concurrent.atomic.AtomicInteger)> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
VIRTUAL edge: virtualinvoke r10.<java.util.concurrent.atomic.AtomicInteger: int addAndGet(int)>($i0) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$scanForNewPlugins$14(java.util.concurrent.atomic.AtomicInteger)> ==> <java.util.concurrent.atomic.AtomicInteger: int addAndGet(int)>
CLINIT edge: $r1 = <com.atlassian.plugin.manager.DefaultPluginManager: org.slf4j.Logger log> in <com.atlassian.plugin.manager.DefaultPluginManager: void markPluginInstallThatRequiresRestart(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.atlassian.plugin.util.PluginUtils: java.util.Set getPluginModulesThatRequireRestart(com.atlassian.plugin.Plugin)>(r0) in <com.atlassian.plugin.manager.DefaultPluginManager: void markPluginInstallThatRequiresRestart(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.util.PluginUtils: java.util.Set getPluginModulesThatRequireRestart(com.atlassian.plugin.Plugin)>
CLINIT edge: $r2 = staticinvoke <com.atlassian.plugin.util.PluginUtils: java.util.Set getPluginModulesThatRequireRestart(com.atlassian.plugin.Plugin)>(r0) in <com.atlassian.plugin.manager.DefaultPluginManager: void markPluginInstallThatRequiresRestart(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.util.PluginUtils: void <clinit>()>
CLINIT edge: $r1 = <com.atlassian.plugin.manager.DefaultPluginManager: org.slf4j.Logger log> in <com.atlassian.plugin.manager.DefaultPluginManager: void markPluginUpgradeThatRequiresRestart(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.atlassian.plugin.util.PluginUtils: java.util.Set getPluginModulesThatRequireRestart(com.atlassian.plugin.Plugin)>(r0) in <com.atlassian.plugin.manager.DefaultPluginManager: void markPluginUpgradeThatRequiresRestart(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.util.PluginUtils: java.util.Set getPluginModulesThatRequireRestart(com.atlassian.plugin.Plugin)>
CLINIT edge: $r2 = staticinvoke <com.atlassian.plugin.util.PluginUtils: java.util.Set getPluginModulesThatRequireRestart(com.atlassian.plugin.Plugin)>(r0) in <com.atlassian.plugin.manager.DefaultPluginManager: void markPluginUpgradeThatRequiresRestart(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.util.PluginUtils: void <clinit>()>
STATIC edge: $r4 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$lambda_addPlugins_22__52: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)>(r0, r1, r2) in <com.atlassian.plugin.manager.DefaultPluginManager: void addPlugins(com.atlassian.plugin.loaders.PluginLoader,java.util.Collection)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_addPlugins_22__52: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)>
VIRTUAL edge: $r11 = virtualinvoke r3.<com.atlassian.plugin.manager.DefaultPluginManager: java.lang.String validatePlugin(com.atlassian.plugin.PluginArtifact)>(r10) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$installPlugins$13(com.atlassian.plugin.PluginArtifact[],java.util.Map)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.String validatePlugin(com.atlassian.plugin.PluginArtifact)>
VIRTUAL edge: virtualinvoke r3.<com.atlassian.plugin.manager.DefaultPluginManager: int scanForNewPlugins()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$installPlugins$13(com.atlassian.plugin.PluginArtifact[],java.util.Map)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: int scanForNewPlugins()>
INTERFACE edge: interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, r10) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$installPlugins$13(com.atlassian.plugin.PluginArtifact[],java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, r10) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$installPlugins$13(com.atlassian.plugin.PluginArtifact[],java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, r10) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$installPlugins$13(com.atlassian.plugin.PluginArtifact[],java.util.Map)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, r10) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$installPlugins$13(com.atlassian.plugin.PluginArtifact[],java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$installPlugins$13(com.atlassian.plugin.PluginArtifact[],java.util.Map)> ==> <java.util.HashMap: java.util.Set entrySet()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$installPlugins$13(com.atlassian.plugin.PluginArtifact[],java.util.Map)> ==> <java.util.Hashtable: java.util.Set entrySet()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$installPlugins$13(com.atlassian.plugin.PluginArtifact[],java.util.Map)> ==> <java.util.TreeMap: java.util.Set entrySet()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$installPlugins$13(com.atlassian.plugin.PluginArtifact[],java.util.Map)> ==> <java.util.jar.Attributes: java.util.Set entrySet()>
SPECIAL edge: specialinvoke $r19.<com.atlassian.plugin.PluginParseException: void <init>(java.lang.String,java.lang.Throwable)>("All plugins could not be validated", $r13) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$installPlugins$13(com.atlassian.plugin.PluginArtifact[],java.util.Map)> ==> <com.atlassian.plugin.PluginParseException: void <init>(java.lang.String,java.lang.Throwable)>
INTERFACE edge: r17 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$installPlugins$13(com.atlassian.plugin.PluginArtifact[],java.util.Map)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r17 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$installPlugins$13(com.atlassian.plugin.PluginArtifact[],java.util.Map)> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r17 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$installPlugins$13(com.atlassian.plugin.PluginArtifact[],java.util.Map)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: interfaceinvoke $r5.<com.atlassian.plugin.RevertablePluginInstaller: void installPlugin(java.lang.String,com.atlassian.plugin.PluginArtifact)>($r7, $r9) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$installPlugins$13(com.atlassian.plugin.PluginArtifact[],java.util.Map)> ==> <com.atlassian.plugin.manager.NoOpRevertablePluginInstaller: void installPlugin(java.lang.String,com.atlassian.plugin.PluginArtifact)>
INTERFACE edge: interfaceinvoke $r5.<com.atlassian.plugin.RevertablePluginInstaller: void installPlugin(java.lang.String,com.atlassian.plugin.PluginArtifact)>($r7, $r9) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$installPlugins$13(com.atlassian.plugin.PluginArtifact[],java.util.Map)> ==> <com.atlassian.plugin.repositories.FilePluginInstaller: void installPlugin(java.lang.String,com.atlassian.plugin.PluginArtifact)>
SPECIAL edge: specialinvoke r2.<com.atlassian.plugin.manager.DefaultPluginManager: void disablePluginModules(com.atlassian.plugin.Plugin)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$onPluginRefresh$12(com.atlassian.plugin.event.events.PluginRefreshedEvent)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void disablePluginModules(com.atlassian.plugin.Plugin)>
SPECIAL edge: specialinvoke r2.<com.atlassian.plugin.manager.DefaultPluginManager: void broadcastIgnoreError(java.lang.Object)>($r3) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$onPluginRefresh$12(com.atlassian.plugin.event.events.PluginRefreshedEvent)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void broadcastIgnoreError(java.lang.Object)>
SPECIAL edge: $z0 = specialinvoke r2.<com.atlassian.plugin.manager.DefaultPluginManager: boolean enableConfiguredPluginModules(com.atlassian.plugin.Plugin)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$onPluginRefresh$12(com.atlassian.plugin.event.events.PluginRefreshedEvent)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: boolean enableConfiguredPluginModules(com.atlassian.plugin.Plugin)>
SPECIAL edge: specialinvoke r2.<com.atlassian.plugin.manager.DefaultPluginManager: void broadcastIgnoreError(java.lang.Object)>($r4) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$onPluginRefresh$12(com.atlassian.plugin.event.events.PluginRefreshedEvent)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void broadcastIgnoreError(java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<com.atlassian.plugin.event.events.PluginEnablingEvent: void <init>(com.atlassian.plugin.Plugin)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$onPluginRefresh$12(com.atlassian.plugin.event.events.PluginRefreshedEvent)> ==> <com.atlassian.plugin.event.events.PluginEnablingEvent: void <init>(com.atlassian.plugin.Plugin)>
SPECIAL edge: specialinvoke $r4.<com.atlassian.plugin.event.events.PluginEnabledEvent: void <init>(com.atlassian.plugin.Plugin)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$onPluginRefresh$12(com.atlassian.plugin.event.events.PluginRefreshedEvent)> ==> <com.atlassian.plugin.event.events.PluginEnabledEvent: void <init>(com.atlassian.plugin.Plugin)>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$lambda_disablePluginModules_42__80: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.Plugin)>(r0, r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void disablePluginModules(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_disablePluginModules_42__80: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.Plugin)>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: void disablePluginWithoutPersisting(java.lang.String)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$onPluginContainerUnavailable$11(com.atlassian.plugin.event.events.PluginContainerUnavailableEvent)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void disablePluginWithoutPersisting(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: void disablePluginModuleNoPersist(com.atlassian.plugin.ModuleDescriptor)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$onPluginModuleUnavailable$10(com.atlassian.plugin.event.events.PluginModuleUnavailableEvent)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void disablePluginModuleNoPersist(com.atlassian.plugin.ModuleDescriptor)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.atlassian.plugin.ModuleDescriptor: com.atlassian.plugin.Plugin getPlugin()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Boolean lambda$onPluginModuleAvailable$9(com.atlassian.plugin.event.events.PluginModuleAvailableEvent)> ==> <com.atlassian.plugin.ModuleDescriptor: com.atlassian.plugin.Plugin getPlugin()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.atlassian.plugin.ModuleDescriptor: com.atlassian.plugin.Plugin getPlugin()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Boolean lambda$onPluginModuleAvailable$9(com.atlassian.plugin.event.events.PluginModuleAvailableEvent)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: com.atlassian.plugin.Plugin getPlugin()>
SPECIAL edge: specialinvoke $r5.<java.util.HashSet: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Boolean lambda$onPluginModuleAvailable$9(com.atlassian.plugin.event.events.PluginModuleAvailableEvent)> ==> <java.util.HashSet: void <init>()>
SPECIAL edge: $z0 = specialinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: boolean enableConfiguredPluginModule(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor,java.util.Set)>($r3, $r4, $r5) in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Boolean lambda$onPluginModuleAvailable$9(com.atlassian.plugin.event.events.PluginModuleAvailableEvent)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: boolean enableConfiguredPluginModule(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor,java.util.Set)>
VIRTUAL edge: virtualinvoke $r2.<com.atlassian.plugin.manager.StateTracker: com.atlassian.plugin.manager.StateTracker setState(com.atlassian.plugin.manager.StateTracker$State)>($r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$warmRestart$8()> ==> <com.atlassian.plugin.manager.StateTracker: com.atlassian.plugin.manager.StateTracker setState(com.atlassian.plugin.manager.StateTracker$State)>
INTERFACE edge: interfaceinvoke $r4.<org.slf4j.Logger: void info(java.lang.String)>("Initiating a warm restart of the plugin system") in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$warmRestart$8()> ==> <org.slf4j.Logger: void info(java.lang.String)>
SPECIAL edge: specialinvoke $r5.<com.atlassian.plugin.event.events.PluginFrameworkWarmRestartingEvent: void <init>(com.atlassian.plugin.PluginController,com.atlassian.plugin.PluginAccessor)>(r0, r0) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$warmRestart$8()> ==> <com.atlassian.plugin.event.events.PluginFrameworkWarmRestartingEvent: void <init>(com.atlassian.plugin.PluginController,com.atlassian.plugin.PluginAccessor)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: void broadcastIgnoreError(java.lang.Object)>($r5) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$warmRestart$8()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void broadcastIgnoreError(java.lang.Object)>
VIRTUAL edge: $z4 = virtualinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: boolean isPluginEnabled(java.lang.String)>($r26) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$warmRestart$8()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: boolean isPluginEnabled(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: void disablePluginModules(com.atlassian.plugin.Plugin)>(r25) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$warmRestart$8()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void disablePluginModules(com.atlassian.plugin.Plugin)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: boolean enableConfiguredPluginModules(com.atlassian.plugin.Plugin)>(r30) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$warmRestart$8()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: boolean enableConfiguredPluginModules(com.atlassian.plugin.Plugin)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: void broadcastIgnoreError(java.lang.Object)>($r12) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$warmRestart$8()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void broadcastIgnoreError(java.lang.Object)>
SPECIAL edge: specialinvoke $r6.<java.util.ArrayList: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$warmRestart$8()> ==> <java.util.ArrayList: void <init>()>
INTERFACE edge: interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r25) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$warmRestart$8()> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: r29 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$warmRestart$8()> ==> <java.util.ArrayList: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke $r8.<java.util.ArrayList: void <init>(java.util.Collection)>($r9) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$warmRestart$8()> ==> <java.util.ArrayList: void <init>(java.util.Collection)>
INTERFACE edge: r27 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$warmRestart$8()> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r27 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$warmRestart$8()> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $r19 = interfaceinvoke $r18.<java.util.Map: java.util.Set entrySet()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$warmRestart$8()> ==> <java.util.HashMap: java.util.Set entrySet()>
INTERFACE edge: $r19 = interfaceinvoke $r18.<java.util.Map: java.util.Set entrySet()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$warmRestart$8()> ==> <java.util.Hashtable: java.util.Set entrySet()>
INTERFACE edge: $r19 = interfaceinvoke $r18.<java.util.Map: java.util.Set entrySet()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$warmRestart$8()> ==> <java.util.TreeMap: java.util.Set entrySet()>
INTERFACE edge: $r19 = interfaceinvoke $r18.<java.util.Map: java.util.Set entrySet()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$warmRestart$8()> ==> <java.util.jar.Attributes: java.util.Set entrySet()>
INTERFACE edge: r20 = interfaceinvoke $r19.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$warmRestart$8()> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r20 = interfaceinvoke $r19.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$warmRestart$8()> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r20 = interfaceinvoke $r19.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$warmRestart$8()> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: $r26 = interfaceinvoke r25.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$warmRestart$8()> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r26 = interfaceinvoke r25.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$warmRestart$8()> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
SPECIAL edge: specialinvoke $r12.<com.atlassian.plugin.event.events.PluginFrameworkWarmRestartedEvent: void <init>(com.atlassian.plugin.PluginController,com.atlassian.plugin.PluginAccessor)>(r0, r0) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$warmRestart$8()> ==> <com.atlassian.plugin.event.events.PluginFrameworkWarmRestartedEvent: void <init>(com.atlassian.plugin.PluginController,com.atlassian.plugin.PluginAccessor)>
VIRTUAL edge: virtualinvoke $r14.<com.atlassian.plugin.manager.StateTracker: com.atlassian.plugin.manager.StateTracker setState(com.atlassian.plugin.manager.StateTracker$State)>($r13) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$warmRestart$8()> ==> <com.atlassian.plugin.manager.StateTracker: com.atlassian.plugin.manager.StateTracker setState(com.atlassian.plugin.manager.StateTracker$State)>
VIRTUAL edge: r1 = virtualinvoke $r0.<com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: com.atlassian.plugin.instrumentation.SingleTimer pullSingleTimer(java.lang.String)>("shutdown") in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$shutdown$7()> ==> <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: com.atlassian.plugin.instrumentation.SingleTimer pullSingleTimer(java.lang.String)>
VIRTUAL edge: virtualinvoke $r4.<com.atlassian.plugin.manager.StateTracker: com.atlassian.plugin.manager.StateTracker setState(com.atlassian.plugin.manager.StateTracker$State)>($r3) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$shutdown$7()> ==> <com.atlassian.plugin.manager.StateTracker: com.atlassian.plugin.manager.StateTracker setState(com.atlassian.plugin.manager.StateTracker$State)>
INTERFACE edge: interfaceinvoke $r5.<org.slf4j.Logger: void info(java.lang.String)>("Preparing to shut down the plugin system") in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$shutdown$7()> ==> <org.slf4j.Logger: void info(java.lang.String)>
SPECIAL edge: specialinvoke $r6.<com.atlassian.plugin.event.events.PluginFrameworkShuttingDownEvent: void <init>(com.atlassian.plugin.PluginController,com.atlassian.plugin.PluginAccessor)>(r2, r2) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$shutdown$7()> ==> <com.atlassian.plugin.event.events.PluginFrameworkShuttingDownEvent: void <init>(com.atlassian.plugin.PluginController,com.atlassian.plugin.PluginAccessor)>
SPECIAL edge: specialinvoke r2.<com.atlassian.plugin.manager.DefaultPluginManager: void broadcastIgnoreError(java.lang.Object)>($r6) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$shutdown$7()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void broadcastIgnoreError(java.lang.Object)>
SPECIAL edge: specialinvoke r2.<com.atlassian.plugin.manager.DefaultPluginManager: void broadcastIgnoreError(java.lang.Object)>($r8) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$shutdown$7()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void broadcastIgnoreError(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r7.<org.slf4j.Logger: void info(java.lang.String)>("Shutting down the plugin system") in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$shutdown$7()> ==> <org.slf4j.Logger: void info(java.lang.String)>
SPECIAL edge: specialinvoke $r8.<com.atlassian.plugin.event.events.PluginFrameworkShutdownEvent: void <init>(com.atlassian.plugin.PluginController,com.atlassian.plugin.PluginAccessor)>(r2, r2) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$shutdown$7()> ==> <com.atlassian.plugin.event.events.PluginFrameworkShutdownEvent: void <init>(com.atlassian.plugin.PluginController,com.atlassian.plugin.PluginAccessor)>
INTERFACE edge: interfaceinvoke $r9.<com.atlassian.plugin.PluginRegistry$ReadWrite: void clear()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$shutdown$7()> ==> <com.atlassian.plugin.PluginRegistry$ReadWrite: void clear()>
INTERFACE edge: interfaceinvoke $r9.<com.atlassian.plugin.PluginRegistry$ReadWrite: void clear()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$shutdown$7()> ==> <com.atlassian.plugin.manager.PluginRegistryImpl: void clear()>
INTERFACE edge: interfaceinvoke $r10.<com.atlassian.plugin.event.PluginEventManager: void unregister(java.lang.Object)>(r2) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$shutdown$7()> ==> <com.atlassian.plugin.event.impl.DefaultPluginEventManager: void unregister(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r12.<com.atlassian.plugin.manager.StateTracker: com.atlassian.plugin.manager.StateTracker setState(com.atlassian.plugin.manager.StateTracker$State)>($r11) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$shutdown$7()> ==> <com.atlassian.plugin.manager.StateTracker: com.atlassian.plugin.manager.StateTracker setState(com.atlassian.plugin.manager.StateTracker$State)>
VIRTUAL edge: virtualinvoke $r13.<com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge: void unregister()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$shutdown$7()> ==> <com.atlassian.plugin.jmx.AbstractJmxBridge: void unregister()>
VIRTUAL edge: virtualinvoke r1.<com.atlassian.plugin.instrumentation.Timer: void close()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$shutdown$7()> ==> <com.atlassian.plugin.instrumentation.SingleTimer: void close()>
VIRTUAL edge: virtualinvoke r1.<com.atlassian.plugin.instrumentation.Timer: void close()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$shutdown$7()> ==> <com.atlassian.plugin.instrumentation.SingleTimer: void close()>
VIRTUAL edge: virtualinvoke r1.<com.atlassian.plugin.instrumentation.Timer: void close()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$shutdown$7()> ==> <com.atlassian.plugin.instrumentation.SingleTimer: void close()>
VIRTUAL edge: virtualinvoke $r18.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r14) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$shutdown$7()> ==> <java.lang.Throwable: void addSuppressed(java.lang.Throwable)>
VIRTUAL edge: r1 = virtualinvoke $r0.<com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: com.atlassian.plugin.instrumentation.SingleTimer pullSingleTimer(java.lang.String)>("lateStartup") in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$lateStartup$6()> ==> <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: com.atlassian.plugin.instrumentation.SingleTimer pullSingleTimer(java.lang.String)>
INTERFACE edge: interfaceinvoke $r2.<org.slf4j.Logger: void info(java.lang.String)>("Plugin system lateStartup begun") in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$lateStartup$6()> ==> <org.slf4j.Logger: void info(java.lang.String)>
VIRTUAL edge: virtualinvoke $r5.<com.atlassian.plugin.manager.StateTracker: com.atlassian.plugin.manager.StateTracker setState(com.atlassian.plugin.manager.StateTracker$State)>($r4) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$lateStartup$6()> ==> <com.atlassian.plugin.manager.StateTracker: com.atlassian.plugin.manager.StateTracker setState(com.atlassian.plugin.manager.StateTracker$State)>
SPECIAL edge: specialinvoke $r6.<com.atlassian.plugin.event.events.PluginFrameworkResumingEvent: void <init>(com.atlassian.plugin.PluginController,com.atlassian.plugin.PluginAccessor)>(r3, r3) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$lateStartup$6()> ==> <com.atlassian.plugin.event.events.PluginFrameworkResumingEvent: void <init>(com.atlassian.plugin.PluginController,com.atlassian.plugin.PluginAccessor)>
SPECIAL edge: specialinvoke r3.<com.atlassian.plugin.manager.DefaultPluginManager: void broadcastIgnoreError(java.lang.Object)>($r6) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$lateStartup$6()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void broadcastIgnoreError(java.lang.Object)>
VIRTUAL edge: virtualinvoke r3.<com.atlassian.plugin.manager.DefaultPluginManager: void addPlugins(com.atlassian.plugin.loaders.PluginLoader,java.util.Collection)>(null, $r7) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$lateStartup$6()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void addPlugins(com.atlassian.plugin.loaders.PluginLoader,java.util.Collection)>
SPECIAL edge: specialinvoke r3.<com.atlassian.plugin.manager.DefaultPluginManager: void logTime(com.atlassian.plugin.instrumentation.Timer,java.lang.String)>(r1, "Plugin system lateStartup ended") in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$lateStartup$6()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void logTime(com.atlassian.plugin.instrumentation.Timer,java.lang.String)>
SPECIAL edge: specialinvoke r3.<com.atlassian.plugin.manager.DefaultPluginManager: void validateRequiredPlugins()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$lateStartup$6()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void validateRequiredPlugins()>
SPECIAL edge: specialinvoke r3.<com.atlassian.plugin.manager.DefaultPluginManager: void broadcastIgnoreError(java.lang.Object)>($r16) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$lateStartup$6()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void broadcastIgnoreError(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<java.util.List: void clear()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$lateStartup$6()> ==> <java.util.LinkedList: void clear()>
INTERFACE edge: interfaceinvoke $r8.<java.util.List: void clear()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$lateStartup$6()> ==> <java.util.ArrayList: void clear()>
INTERFACE edge: interfaceinvoke $r9.<java.util.Map: void clear()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$lateStartup$6()> ==> <java.util.LinkedHashMap: void clear()>
INTERFACE edge: interfaceinvoke $r9.<java.util.Map: void clear()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$lateStartup$6()> ==> <java.util.Hashtable: void clear()>
INTERFACE edge: interfaceinvoke $r9.<java.util.Map: void clear()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$lateStartup$6()> ==> <java.util.TreeMap: void clear()>
INTERFACE edge: interfaceinvoke $r9.<java.util.Map: void clear()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$lateStartup$6()> ==> <java.util.HashMap: void clear()>
INTERFACE edge: interfaceinvoke $r9.<java.util.Map: void clear()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$lateStartup$6()> ==> <java.util.jar.Attributes: void clear()>
VIRTUAL edge: virtualinvoke $r10.<com.atlassian.plugin.manager.PluginPersistentStateModifier: void clearPluginRestartState()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$lateStartup$6()> ==> <com.atlassian.plugin.manager.PluginPersistentStateModifier: void clearPluginRestartState()>
INTERFACE edge: $r12 = interfaceinvoke $r11.<java.util.Map: java.util.Set entrySet()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$lateStartup$6()> ==> <java.util.HashMap: java.util.Set entrySet()>
INTERFACE edge: $r12 = interfaceinvoke $r11.<java.util.Map: java.util.Set entrySet()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$lateStartup$6()> ==> <java.util.Hashtable: java.util.Set entrySet()>
INTERFACE edge: $r12 = interfaceinvoke $r11.<java.util.Map: java.util.Set entrySet()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$lateStartup$6()> ==> <java.util.TreeMap: java.util.Set entrySet()>
INTERFACE edge: $r12 = interfaceinvoke $r11.<java.util.Map: java.util.Set entrySet()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$lateStartup$6()> ==> <java.util.jar.Attributes: java.util.Set entrySet()>
INTERFACE edge: r30 = interfaceinvoke $r12.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$lateStartup$6()> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r30 = interfaceinvoke $r12.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$lateStartup$6()> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r30 = interfaceinvoke $r12.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$lateStartup$6()> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: interfaceinvoke r22.<com.atlassian.plugin.loaders.DiscardablePluginLoader: void removePlugin(com.atlassian.plugin.Plugin)>(r20) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$lateStartup$6()> ==> <com.atlassian.plugin.loaders.ForwardingPluginLoader: void removePlugin(com.atlassian.plugin.Plugin)>
INTERFACE edge: interfaceinvoke r22.<com.atlassian.plugin.loaders.DiscardablePluginLoader: void removePlugin(com.atlassian.plugin.Plugin)>(r20) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$lateStartup$6()> ==> <com.atlassian.plugin.loaders.ScanningPluginLoader: void removePlugin(com.atlassian.plugin.Plugin)>
INTERFACE edge: interfaceinvoke r22.<com.atlassian.plugin.loaders.DiscardablePluginLoader: void removePlugin(com.atlassian.plugin.Plugin)>(r20) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$lateStartup$6()> ==> <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: void removePlugin(com.atlassian.plugin.Plugin)>
VIRTUAL edge: virtualinvoke $r23.<com.atlassian.plugin.manager.PluginPersistentStateModifier: void removeState(com.atlassian.plugin.Plugin)>(r20) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$lateStartup$6()> ==> <com.atlassian.plugin.manager.PluginPersistentStateModifier: void removeState(com.atlassian.plugin.Plugin)>
INTERFACE edge: interfaceinvoke $r13.<java.util.Map: void clear()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$lateStartup$6()> ==> <java.util.LinkedHashMap: void clear()>
INTERFACE edge: interfaceinvoke $r13.<java.util.Map: void clear()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$lateStartup$6()> ==> <java.util.Hashtable: void clear()>
INTERFACE edge: interfaceinvoke $r13.<java.util.Map: void clear()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$lateStartup$6()> ==> <java.util.TreeMap: void clear()>
INTERFACE edge: interfaceinvoke $r13.<java.util.Map: void clear()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$lateStartup$6()> ==> <java.util.HashMap: void clear()>
INTERFACE edge: interfaceinvoke $r13.<java.util.Map: void clear()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$lateStartup$6()> ==> <java.util.jar.Attributes: void clear()>
VIRTUAL edge: virtualinvoke $r15.<com.atlassian.plugin.manager.StateTracker: com.atlassian.plugin.manager.StateTracker setState(com.atlassian.plugin.manager.StateTracker$State)>($r14) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$lateStartup$6()> ==> <com.atlassian.plugin.manager.StateTracker: com.atlassian.plugin.manager.StateTracker setState(com.atlassian.plugin.manager.StateTracker$State)>
SPECIAL edge: specialinvoke $r16.<com.atlassian.plugin.event.events.PluginFrameworkStartedEvent: void <init>(com.atlassian.plugin.PluginController,com.atlassian.plugin.PluginAccessor)>(r3, r3) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$lateStartup$6()> ==> <com.atlassian.plugin.event.events.PluginFrameworkStartedEvent: void <init>(com.atlassian.plugin.PluginController,com.atlassian.plugin.PluginAccessor)>
VIRTUAL edge: virtualinvoke r1.<com.atlassian.plugin.instrumentation.Timer: void close()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$lateStartup$6()> ==> <com.atlassian.plugin.instrumentation.SingleTimer: void close()>
VIRTUAL edge: virtualinvoke r1.<com.atlassian.plugin.instrumentation.Timer: void close()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$lateStartup$6()> ==> <com.atlassian.plugin.instrumentation.SingleTimer: void close()>
VIRTUAL edge: virtualinvoke r1.<com.atlassian.plugin.instrumentation.Timer: void close()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$lateStartup$6()> ==> <com.atlassian.plugin.instrumentation.SingleTimer: void close()>
VIRTUAL edge: virtualinvoke $r28.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r24) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$lateStartup$6()> ==> <java.lang.Throwable: void addSuppressed(java.lang.Throwable)>
CLINIT edge: $r7 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS> in <com.atlassian.plugin.manager.DefaultPluginManager: void logTime(com.atlassian.plugin.instrumentation.Timer,java.lang.String)> ==> <java.util.concurrent.TimeUnit: void <clinit>()>
STATIC edge: $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0) in <com.atlassian.plugin.manager.DefaultPluginManager: void logTime(com.atlassian.plugin.instrumentation.Timer,java.lang.String)> ==> <java.lang.Long: java.lang.Long valueOf(long)>
CLINIT edge: $r3 = <com.atlassian.plugin.manager.DefaultPluginManager: org.slf4j.Logger log> in <com.atlassian.plugin.manager.DefaultPluginManager: void logTime(com.atlassian.plugin.instrumentation.Timer,java.lang.String)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void <clinit>()>
CLINIT edge: $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0) in <com.atlassian.plugin.manager.DefaultPluginManager: void logTime(com.atlassian.plugin.instrumentation.Timer,java.lang.String)> ==> <java.lang.Long: void <clinit>()>
CLINIT edge: $r8 = <com.atlassian.plugin.manager.DefaultPluginManager: org.slf4j.Logger log> in <com.atlassian.plugin.manager.DefaultPluginManager: void logTime(com.atlassian.plugin.instrumentation.Timer,java.lang.String)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void <clinit>()>
CLINIT edge: $r13 = new com.atlassian.plugin.metadata.DefaultRequiredPluginValidator in <com.atlassian.plugin.manager.DefaultPluginManager: void validateRequiredPlugins()> ==> <com.atlassian.plugin.metadata.DefaultRequiredPluginValidator: void <clinit>()>
CLINIT edge: $r5 = <com.atlassian.plugin.manager.DefaultPluginManager: org.slf4j.Logger log> in <com.atlassian.plugin.manager.DefaultPluginManager: void validateRequiredPlugins()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void <clinit>()>
VIRTUAL edge: r1 = virtualinvoke $r0.<com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: com.atlassian.plugin.instrumentation.SingleTimer pullSingleTimer(java.lang.String)>("earlyStartup") in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: com.atlassian.plugin.instrumentation.SingleTimer pullSingleTimer(java.lang.String)>
INTERFACE edge: interfaceinvoke $r2.<org.slf4j.Logger: void info(java.lang.String)>("Plugin system earlyStartup begun") in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <org.slf4j.Logger: void info(java.lang.String)>
VIRTUAL edge: virtualinvoke $r5.<com.atlassian.plugin.manager.StateTracker: com.atlassian.plugin.manager.StateTracker setState(com.atlassian.plugin.manager.StateTracker$State)>($r4) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.manager.StateTracker: com.atlassian.plugin.manager.StateTracker setState(com.atlassian.plugin.manager.StateTracker$State)>
VIRTUAL edge: virtualinvoke $r6.<com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge: void register()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.jmx.AbstractJmxBridge: void register()>
SPECIAL edge: specialinvoke $r7.<com.atlassian.plugin.event.events.PluginFrameworkStartingEvent: void <init>(com.atlassian.plugin.PluginController,com.atlassian.plugin.PluginAccessor)>(r3, r3) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.event.events.PluginFrameworkStartingEvent: void <init>(com.atlassian.plugin.PluginController,com.atlassian.plugin.PluginAccessor)>
SPECIAL edge: specialinvoke r3.<com.atlassian.plugin.manager.DefaultPluginManager: void broadcastIgnoreError(java.lang.Object)>($r7) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void broadcastIgnoreError(java.lang.Object)>
VIRTUAL edge: r75 = virtualinvoke r3.<com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.manager.PluginPersistentState getState()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.manager.PluginPersistentState getState()>
VIRTUAL edge: virtualinvoke r3.<com.atlassian.plugin.manager.DefaultPluginManager: void addPlugins(com.atlassian.plugin.loaders.PluginLoader,java.util.Collection)>(null, $r14) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void addPlugins(com.atlassian.plugin.loaders.PluginLoader,java.util.Collection)>
SPECIAL edge: specialinvoke r3.<com.atlassian.plugin.manager.DefaultPluginManager: void logTime(com.atlassian.plugin.instrumentation.Timer,java.lang.String)>(r1, "Plugin system earlyStartup ended") in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void logTime(com.atlassian.plugin.instrumentation.Timer,java.lang.String)>
SPECIAL edge: specialinvoke r3.<com.atlassian.plugin.manager.DefaultPluginManager: void broadcastIgnoreError(java.lang.Object)>($r22) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void broadcastIgnoreError(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<com.atlassian.plugin.RevertablePluginInstaller: void clearBackups()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.manager.NoOpRevertablePluginInstaller: void clearBackups()>
INTERFACE edge: interfaceinvoke $r8.<com.atlassian.plugin.RevertablePluginInstaller: void clearBackups()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.repositories.FilePluginInstaller: void clearBackups()>
SPECIAL edge: specialinvoke $r9.<java.util.TreeMap: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.TreeMap: void <init>()>
INTERFACE edge: $r13 = interfaceinvoke $r9.<java.util.Map: java.util.Collection values()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.AbstractMap: java.util.Collection values()>
INTERFACE edge: r76 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r76 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: r78 = interfaceinvoke r77.<com.atlassian.plugin.loaders.DiscardablePluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)>($r52) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.loaders.ForwardingPluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)>
INTERFACE edge: r78 = interfaceinvoke r77.<com.atlassian.plugin.loaders.DiscardablePluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)>($r52) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)>
INTERFACE edge: r78 = interfaceinvoke r77.<com.atlassian.plugin.loaders.DiscardablePluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)>($r52) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)>
INTERFACE edge: $z9 = interfaceinvoke $r53.<org.slf4j.Logger: boolean isDebugEnabled()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <org.slf4j.Logger: boolean isDebugEnabled()>
INTERFACE edge: $r65 = interfaceinvoke r78.<java.lang.Iterable: java.util.Spliterator spliterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.lang.Iterable: java.util.Spliterator spliterator()>
INTERFACE edge: r79 = interfaceinvoke r78.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r79 = interfaceinvoke r78.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r79 = interfaceinvoke r78.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r79 = interfaceinvoke r78.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r79 = interfaceinvoke r78.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: r79 = interfaceinvoke r78.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $l2 = interfaceinvoke $r66.<java.util.stream.Stream: long count()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.stream.Stream: long count()>
INTERFACE edge: interfaceinvoke $r64.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Found {} plugins to possibly load: {}", $r67, $r68) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>
INTERFACE edge: $r55 = interfaceinvoke r80.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r55 = interfaceinvoke r80.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
INTERFACE edge: $r59 = interfaceinvoke r80.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r59 = interfaceinvoke r80.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
INTERFACE edge: $r56 = interfaceinvoke r75.<com.atlassian.plugin.manager.PluginPersistentState: com.atlassian.plugin.PluginRestartState getPluginRestartState(java.lang.String)>($r55) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.manager.PluginPersistentState: com.atlassian.plugin.PluginRestartState getPluginRestartState(java.lang.String)>
INTERFACE edge: $r56 = interfaceinvoke r75.<com.atlassian.plugin.manager.PluginPersistentState: com.atlassian.plugin.PluginRestartState getPluginRestartState(java.lang.String)>($r55) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.manager.DefaultPluginPersistentState: com.atlassian.plugin.PluginRestartState getPluginRestartState(java.lang.String)>
INTERFACE edge: $z7 = interfaceinvoke r75.<com.atlassian.plugin.manager.PluginPersistentState: boolean isEnabled(com.atlassian.plugin.Plugin)>(r92) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.manager.PluginPersistentState: boolean isEnabled(com.atlassian.plugin.Plugin)>
INTERFACE edge: $z7 = interfaceinvoke r75.<com.atlassian.plugin.manager.PluginPersistentState: boolean isEnabled(com.atlassian.plugin.Plugin)>(r92) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.manager.DefaultPluginPersistentState: boolean isEnabled(com.atlassian.plugin.Plugin)>
INTERFACE edge: interfaceinvoke $r62.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Plugin {} was marked to be removed on restart. Removing now.", r80) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r63.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r80, r77) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r63.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r80, r77) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r63.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r80, r77) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r63.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r80, r77) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r58.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r80, r77) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r58.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r80, r77) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r58.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r80, r77) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r58.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r80, r77) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r81.<java.util.List: boolean add(java.lang.Object)>(r80) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke r81.<java.util.List: boolean add(java.lang.Object)>(r80) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke $r12.<java.util.ArrayList: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.ArrayList: void <init>()>
INTERFACE edge: interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>(r85) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: r87 = interfaceinvoke $r12.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: r83 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r83 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r83 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r83 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r83 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: r83 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $i1 = interfaceinvoke r84.<java.util.List: int size()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i1 = interfaceinvoke r84.<java.util.List: int size()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.ArrayList: int size()>
INTERFACE edge: $r48 = interfaceinvoke r85.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r48 = interfaceinvoke r85.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
INTERFACE edge: $r49 = interfaceinvoke r85.<com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginInformation getPluginInformation()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.impl.AbstractPlugin: com.atlassian.plugin.PluginInformation getPluginInformation()>
INTERFACE edge: $r49 = interfaceinvoke r85.<com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginInformation getPluginInformation()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginInformation getPluginInformation()>
VIRTUAL edge: $r50 = virtualinvoke $r49.<com.atlassian.plugin.PluginInformation: java.lang.String getVersion()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.PluginInformation: java.lang.String getVersion()>
INTERFACE edge: interfaceinvoke $r47.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Plugin {} contained multiple versions. installing version {}.", $r48, $r50) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r14.<java.util.ArrayList: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.ArrayList: void <init>()>
INTERFACE edge: interfaceinvoke $r14.<java.util.List: boolean add(java.lang.Object)>(r88) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: r89 = interfaceinvoke $r14.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: r91 = interfaceinvoke $r14.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z8 = interfaceinvoke $r42.<java.util.function.Predicate: boolean test(java.lang.Object)>(r88) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.parsers.PluginDescriptorReader$lambda_getModules_2__127: boolean test(java.lang.Object)>
INTERFACE edge: $z8 = interfaceinvoke $r42.<java.util.function.Predicate: boolean test(java.lang.Object)>(r88) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.manager.DependentPlugins$lambda_getPluginsByTypes_6__120: boolean test(java.lang.Object)>
INTERFACE edge: $z8 = interfaceinvoke $r42.<java.util.function.Predicate: boolean test(java.lang.Object)>(r88) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getParamElements_12__168: boolean test(java.lang.Object)>
INTERFACE edge: $z8 = interfaceinvoke $r42.<java.util.function.Predicate: boolean test(java.lang.Object)>(r88) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase$lambda_getEnabledPlugins_0__141: boolean test(java.lang.Object)>
INTERFACE edge: $z8 = interfaceinvoke $r42.<java.util.function.Predicate: boolean test(java.lang.Object)>(r88) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.predicate.ModuleOfClassPredicate: boolean test(java.lang.Object)>
INTERFACE edge: $z8 = interfaceinvoke $r42.<java.util.function.Predicate: boolean test(java.lang.Object)>(r88) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_findDelayedPlugin_38__75: boolean test(java.lang.Object)>
INTERFACE edge: $z8 = interfaceinvoke $r42.<java.util.function.Predicate: boolean test(java.lang.Object)>(r88) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.manager.DependentPlugins$lambda_getInDependencyOrder_0__113: boolean test(java.lang.Object)>
INTERFACE edge: $z8 = interfaceinvoke $r42.<java.util.function.Predicate: boolean test(java.lang.Object)>(r88) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.JarPluginArtifact$isSpringContext__3: boolean test(java.lang.Object)>
INTERFACE edge: $z8 = interfaceinvoke $r42.<java.util.function.Predicate: boolean test(java.lang.Object)>(r88) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_isPluginEnabledInSafeMode_23__53: boolean test(java.lang.Object)>
INTERFACE edge: $z8 = interfaceinvoke $r42.<java.util.function.Predicate: boolean test(java.lang.Object)>(r88) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.factories.XmlDynamicPluginFactory$lambda_static_0__111: boolean test(java.lang.Object)>
INTERFACE edge: $z8 = interfaceinvoke $r42.<java.util.function.Predicate: boolean test(java.lang.Object)>(r88) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.manager.DependentPlugins$lambda_toStringList_3__117: boolean test(java.lang.Object)>
INTERFACE edge: $z8 = interfaceinvoke $r42.<java.util.function.Predicate: boolean test(java.lang.Object)>(r88) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.parsers.PluginDescriptorReader$lambda_getPluginInformation_0__126: boolean test(java.lang.Object)>
INTERFACE edge: $z8 = interfaceinvoke $r42.<java.util.function.Predicate: boolean test(java.lang.Object)>(r88) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.manager.DependentPlugins$lambda_toStringList_2__116: boolean test(java.lang.Object)>
INTERFACE edge: $z8 = interfaceinvoke $r42.<java.util.function.Predicate: boolean test(java.lang.Object)>(r88) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.manager.DefaultPluginManager$Builder$lambda_new_0__183: boolean test(java.lang.Object)>
INTERFACE edge: $z8 = interfaceinvoke $r42.<java.util.function.Predicate: boolean test(java.lang.Object)>(r88) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.parsers.PluginInformationReader$ElementWithForApplicationsPredicate: boolean test(java.lang.Object)>
INTERFACE edge: $z8 = interfaceinvoke $r42.<java.util.function.Predicate: boolean test(java.lang.Object)>(r88) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.util.ChainingClassLoader$nonNull__176: boolean test(java.lang.Object)>
INTERFACE edge: $z8 = interfaceinvoke $r42.<java.util.function.Predicate: boolean test(java.lang.Object)>(r88) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.factories.LegacyDynamicPluginFactory$lambda_static_0__21: boolean test(java.lang.Object)>
INTERFACE edge: $z8 = interfaceinvoke $r42.<java.util.function.Predicate: boolean test(java.lang.Object)>(r88) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getPermissionElements_11__172: boolean test(java.lang.Object)>
INTERFACE edge: $z8 = interfaceinvoke $r42.<java.util.function.Predicate: boolean test(java.lang.Object)>(r88) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.predicate.ModuleDescriptorOfClassPredicate: boolean test(java.lang.Object)>
INTERFACE edge: $z8 = interfaceinvoke $r42.<java.util.function.Predicate: boolean test(java.lang.Object)>(r88) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.manager.DefaultPluginPersistentState$lambda_getPluginEnabledStateMap_0__128: boolean test(java.lang.Object)>
INTERFACE edge: $z8 = interfaceinvoke $r42.<java.util.function.Predicate: boolean test(java.lang.Object)>(r88) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.manager.DependentPlugins$lambda_getPluginsByTypes_5__118: boolean test(java.lang.Object)>
INTERFACE edge: $z8 = interfaceinvoke $r42.<java.util.function.Predicate: boolean test(java.lang.Object)>(r88) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.JarPluginArtifact$lambda_extraModuleDescriptorFiles_1__4: boolean test(java.lang.Object)>
INTERFACE edge: $z8 = interfaceinvoke $r42.<java.util.function.Predicate: boolean test(java.lang.Object)>(r88) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.predicate.PluginKeyPatternsPredicate: boolean test(java.lang.Object)>
INTERFACE edge: $z8 = interfaceinvoke $r42.<java.util.function.Predicate: boolean test(java.lang.Object)>(r88) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.predicate.EnabledModulePredicate: boolean test(java.lang.Object)>
INTERFACE edge: $z8 = interfaceinvoke $r42.<java.util.function.Predicate: boolean test(java.lang.Object)>(r88) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.function.Predicate: boolean test(java.lang.Object)>
INTERFACE edge: $z8 = interfaceinvoke $r42.<java.util.function.Predicate: boolean test(java.lang.Object)>(r88) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.impl.AbstractPlugin$lambda_getPermissionsForCurrentInstallationMode_0__136: boolean test(java.lang.Object)>
INTERFACE edge: $z8 = interfaceinvoke $r42.<java.util.function.Predicate: boolean test(java.lang.Object)>(r88) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.manager.DefaultPluginManager$isInstance__77: boolean test(java.lang.Object)>
INTERFACE edge: $z8 = interfaceinvoke $r42.<java.util.function.Predicate: boolean test(java.lang.Object)>(r88) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.manager.DefaultPluginManager$nonNull__65: boolean test(java.lang.Object)>
INTERFACE edge: $z8 = interfaceinvoke $r42.<java.util.function.Predicate: boolean test(java.lang.Object)>(r88) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler$1$lambda_getScope_0__161: boolean test(java.lang.Object)>
INTERFACE edge: $z8 = interfaceinvoke $r42.<java.util.function.Predicate: boolean test(java.lang.Object)>(r88) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.manager.DefaultPluginManager$nonNull__61: boolean test(java.lang.Object)>
INTERFACE edge: $z8 = interfaceinvoke $r42.<java.util.function.Predicate: boolean test(java.lang.Object)>(r88) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.parsers.PluginDescriptorReader$nonNull__122: boolean test(java.lang.Object)>
INTERFACE edge: $z8 = interfaceinvoke $r42.<java.util.function.Predicate: boolean test(java.lang.Object)>(r88) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.predicate.EnabledPluginPredicate: boolean test(java.lang.Object)>
INTERFACE edge: $z8 = interfaceinvoke $r42.<java.util.function.Predicate: boolean test(java.lang.Object)>(r88) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.parsers.PluginInformationReader$ElementWithForApplicationsPredicate$lambda_test_0__31: boolean test(java.lang.Object)>
INTERFACE edge: $z8 = interfaceinvoke $r42.<java.util.function.Predicate: boolean test(java.lang.Object)>(r88) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.parsers.PluginDescriptorReader$lambda_getModules_1__123: boolean test(java.lang.Object)>
INTERFACE edge: $z8 = interfaceinvoke $r42.<java.util.function.Predicate: boolean test(java.lang.Object)>(r88) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.JarPluginArtifact$lambda_containsJavaExecutableCode_0__2: boolean test(java.lang.Object)>
INTERFACE edge: $z8 = interfaceinvoke $r42.<java.util.function.Predicate: boolean test(java.lang.Object)>(r88) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase$nonNull__145: boolean test(java.lang.Object)>
INTERFACE edge: $z8 = interfaceinvoke $r42.<java.util.function.Predicate: boolean test(java.lang.Object)>(r88) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.manager.DefaultPluginManager$doesPluginRequireRestart__92: boolean test(java.lang.Object)>
INTERFACE edge: $z8 = interfaceinvoke $r42.<java.util.function.Predicate: boolean test(java.lang.Object)>(r88) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase$isInstance__147: boolean test(java.lang.Object)>
INTERFACE edge: $z8 = interfaceinvoke $r42.<java.util.function.Predicate: boolean test(java.lang.Object)>(r88) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase$nonNull__140: boolean test(java.lang.Object)>
INTERFACE edge: $z8 = interfaceinvoke $r42.<java.util.function.Predicate: boolean test(java.lang.Object)>(r88) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.manager.DefaultPluginManager$1: boolean test(java.lang.Object)>
INTERFACE edge: $z8 = interfaceinvoke $r42.<java.util.function.Predicate: boolean test(java.lang.Object)>(r88) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.predicate.ModuleDescriptorOfClassPredicate$lambda_test_0__20: boolean test(java.lang.Object)>
INTERFACE edge: $z8 = interfaceinvoke $r42.<java.util.function.Predicate: boolean test(java.lang.Object)>(r88) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.manager.SafeModuleExtractor$nonNull__182: boolean test(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r43.<java.util.List: boolean add(java.lang.Object)>(r88) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r43.<java.util.List: boolean add(java.lang.Object)>(r88) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r40.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r90) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.HashMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r40.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r90) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.Hashtable: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r40.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r90) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.TreeMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r40.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r90) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.jar.Attributes: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: $r37 = interfaceinvoke r92.<com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginState getPluginState()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.impl.AbstractPlugin: com.atlassian.plugin.PluginState getPluginState()>
INTERFACE edge: $r37 = interfaceinvoke r92.<com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginState getPluginState()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginState getPluginState()>
INTERFACE edge: interfaceinvoke $r38.<java.util.Collection: boolean add(java.lang.Object)>(r92) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.HashSet: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r38.<java.util.Collection: boolean add(java.lang.Object)>(r92) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r38.<java.util.Collection: boolean add(java.lang.Object)>(r92) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.ArrayDeque: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r38.<java.util.Collection: boolean add(java.lang.Object)>(r92) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.concurrent.CopyOnWriteArraySet: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r38.<java.util.Collection: boolean add(java.lang.Object)>(r92) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.TreeSet: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r38.<java.util.Collection: boolean add(java.lang.Object)>(r92) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: $z6 = interfaceinvoke $r30.<java.util.Collection: boolean isEmpty()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.HashSet: boolean isEmpty()>
INTERFACE edge: $z6 = interfaceinvoke $r30.<java.util.Collection: boolean isEmpty()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.AbstractCollection: boolean isEmpty()>
INTERFACE edge: $z6 = interfaceinvoke $r30.<java.util.Collection: boolean isEmpty()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.ArrayDeque: boolean isEmpty()>
INTERFACE edge: $z6 = interfaceinvoke $r30.<java.util.Collection: boolean isEmpty()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.concurrent.CopyOnWriteArraySet: boolean isEmpty()>
INTERFACE edge: $z6 = interfaceinvoke $r30.<java.util.Collection: boolean isEmpty()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.TreeSet: boolean isEmpty()>
INTERFACE edge: $z6 = interfaceinvoke $r30.<java.util.Collection: boolean isEmpty()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.ArrayList: boolean isEmpty()>
INTERFACE edge: $i0 = interfaceinvoke $r31.<java.util.Collection: int size()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.HashSet: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r31.<java.util.Collection: int size()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r31.<java.util.Collection: int size()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.ArrayDeque: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r31.<java.util.Collection: int size()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.concurrent.CopyOnWriteArraySet: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r31.<java.util.Collection: int size()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.TreeSet: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r31.<java.util.Collection: int size()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.ArrayList: int size()>
INTERFACE edge: interfaceinvoke $r32.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>("Failed to enable some ({}) early plugins, will fallback during lateStartup. Plugins: {}", $r33, $r34) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <org.slf4j.Logger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r93.<java.util.HashMap: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.HashMap: void <init>()>
INTERFACE edge: interfaceinvoke $r93.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r97, r98) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: r96 = interfaceinvoke $r95.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r96 = interfaceinvoke $r95.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $r29 = interfaceinvoke $r28.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r97) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.HashMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: $r29 = interfaceinvoke $r28.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r97) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.Hashtable: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: $r29 = interfaceinvoke $r28.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r97) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.TreeMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: $r29 = interfaceinvoke $r28.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r97) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.jar.Attributes: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: $r17 = interfaceinvoke $r16.<java.util.Map: java.util.Set entrySet()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.HashMap: java.util.Set entrySet()>
INTERFACE edge: $r17 = interfaceinvoke $r16.<java.util.Map: java.util.Set entrySet()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.Hashtable: java.util.Set entrySet()>
INTERFACE edge: $r17 = interfaceinvoke $r16.<java.util.Map: java.util.Set entrySet()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.TreeMap: java.util.Set entrySet()>
INTERFACE edge: $r17 = interfaceinvoke $r16.<java.util.Map: java.util.Set entrySet()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.jar.Attributes: java.util.Set entrySet()>
INTERFACE edge: r99 = interfaceinvoke $r17.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r99 = interfaceinvoke $r17.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r99 = interfaceinvoke $r17.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: interfaceinvoke r26.<com.atlassian.plugin.loaders.DiscardablePluginLoader: void discardPlugin(com.atlassian.plugin.Plugin)>(r101) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.loaders.ForwardingPluginLoader: void discardPlugin(com.atlassian.plugin.Plugin)>
INTERFACE edge: interfaceinvoke r26.<com.atlassian.plugin.loaders.DiscardablePluginLoader: void discardPlugin(com.atlassian.plugin.Plugin)>(r101) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.loaders.ScanningPluginLoader: void discardPlugin(com.atlassian.plugin.Plugin)>
INTERFACE edge: interfaceinvoke r26.<com.atlassian.plugin.loaders.DiscardablePluginLoader: void discardPlugin(com.atlassian.plugin.Plugin)>(r101) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: void discardPlugin(com.atlassian.plugin.Plugin)>
INTERFACE edge: interfaceinvoke $r18.<java.util.Map: void clear()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.LinkedHashMap: void clear()>
INTERFACE edge: interfaceinvoke $r18.<java.util.Map: void clear()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.Hashtable: void clear()>
INTERFACE edge: interfaceinvoke $r18.<java.util.Map: void clear()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.TreeMap: void clear()>
INTERFACE edge: interfaceinvoke $r18.<java.util.Map: void clear()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.HashMap: void clear()>
INTERFACE edge: interfaceinvoke $r18.<java.util.Map: void clear()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.jar.Attributes: void clear()>
INTERFACE edge: interfaceinvoke $r19.<java.util.Map: void putAll(java.util.Map)>($r93) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.HashMap: void putAll(java.util.Map)>
INTERFACE edge: interfaceinvoke $r19.<java.util.Map: void putAll(java.util.Map)>($r93) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.Hashtable: void putAll(java.util.Map)>
INTERFACE edge: interfaceinvoke $r19.<java.util.Map: void putAll(java.util.Map)>($r93) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.AbstractMap: void putAll(java.util.Map)>
INTERFACE edge: interfaceinvoke $r19.<java.util.Map: void putAll(java.util.Map)>($r93) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.util.jar.Attributes: void putAll(java.util.Map)>
VIRTUAL edge: virtualinvoke $r21.<com.atlassian.plugin.manager.StateTracker: com.atlassian.plugin.manager.StateTracker setState(com.atlassian.plugin.manager.StateTracker$State)>($r20) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.manager.StateTracker: com.atlassian.plugin.manager.StateTracker setState(com.atlassian.plugin.manager.StateTracker$State)>
SPECIAL edge: specialinvoke $r22.<com.atlassian.plugin.event.events.PluginFrameworkDelayedEvent: void <init>(com.atlassian.plugin.PluginController,com.atlassian.plugin.PluginAccessor)>(r3, r3) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.event.events.PluginFrameworkDelayedEvent: void <init>(com.atlassian.plugin.PluginController,com.atlassian.plugin.PluginAccessor)>
VIRTUAL edge: virtualinvoke r1.<com.atlassian.plugin.instrumentation.Timer: void close()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.instrumentation.SingleTimer: void close()>
VIRTUAL edge: virtualinvoke r1.<com.atlassian.plugin.instrumentation.Timer: void close()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.instrumentation.SingleTimer: void close()>
VIRTUAL edge: virtualinvoke r1.<com.atlassian.plugin.instrumentation.Timer: void close()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <com.atlassian.plugin.instrumentation.SingleTimer: void close()>
VIRTUAL edge: virtualinvoke $r73.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r69) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()> ==> <java.lang.Throwable: void addSuppressed(java.lang.Throwable)>
SPECIAL edge: specialinvoke $r0.<java.util.ArrayList: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.List lambda$null$4(java.lang.String)> ==> <java.util.ArrayList: void <init>()>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: void earlyStartup()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$init$3()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void earlyStartup()>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: void lateStartup()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$init$3()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void lateStartup()>
INTERFACE edge: $r5 = interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r3) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$propertiesToMap$2(java.util.Map,java.lang.Object,java.lang.Object)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: $r5 = interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r3) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$propertiesToMap$2(java.util.Map,java.lang.Object,java.lang.Object)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: $r5 = interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r3) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$propertiesToMap$2(java.util.Map,java.lang.Object,java.lang.Object)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: $r5 = interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r3) in <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$propertiesToMap$2(java.util.Map,java.lang.Object,java.lang.Object)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.classloader.PluginsClassLoader: void <init>(java.lang.ClassLoader,com.atlassian.plugin.PluginAccessor,com.atlassian.plugin.event.PluginEventManager)>(null, r1, $r2) in <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.classloader.PluginsClassLoader lambda$new$1()> ==> <com.atlassian.plugin.classloader.PluginsClassLoader: void <init>(java.lang.ClassLoader,com.atlassian.plugin.PluginAccessor,com.atlassian.plugin.event.PluginEventManager)>
INTERFACE edge: $r2 = interfaceinvoke r0.<com.atlassian.plugin.PluginAccessor: java.lang.ClassLoader getClassLoader()>() in <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.classloader.PluginsClassLoader lambda$new$0(com.atlassian.plugin.PluginAccessor)> ==> <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: java.lang.ClassLoader getClassLoader()>
INTERFACE edge: $r2 = interfaceinvoke r0.<com.atlassian.plugin.PluginAccessor: java.lang.ClassLoader getClassLoader()>() in <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.classloader.PluginsClassLoader lambda$new$0(com.atlassian.plugin.PluginAccessor)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.lang.ClassLoader getClassLoader()>
INTERFACE edge: $r2 = interfaceinvoke r0.<com.atlassian.plugin.PluginAccessor: java.lang.ClassLoader getClassLoader()>() in <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.classloader.PluginsClassLoader lambda$new$0(com.atlassian.plugin.PluginAccessor)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.ClassLoader getClassLoader()>
INTERFACE edge: $r2 = interfaceinvoke r0.<com.atlassian.plugin.PluginAccessor: java.lang.ClassLoader getClassLoader()>() in <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.classloader.PluginsClassLoader lambda$new$0(com.atlassian.plugin.PluginAccessor)> ==> <com.atlassian.plugin.manager.ProductPluginAccessor: java.lang.ClassLoader getClassLoader()>
VIRTUAL edge: $r3 = virtualinvoke $r1.<java.lang.Class: java.lang.Object cast(java.lang.Object)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.classloader.PluginsClassLoader lambda$new$0(com.atlassian.plugin.PluginAccessor)> ==> <java.lang.Class: java.lang.Object cast(java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<com.atlassian.plugin.event.impl.DefaultPluginEventManager: void <init>()>() in <com.atlassian.plugin.classloader.PluginsClassLoader: void <init>(com.atlassian.plugin.PluginAccessor)> ==> <com.atlassian.plugin.event.impl.DefaultPluginEventManager: void <init>()>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.classloader.PluginsClassLoader: void <init>(java.lang.ClassLoader,com.atlassian.plugin.PluginAccessor,com.atlassian.plugin.event.PluginEventManager)>(null, r1, $r2) in <com.atlassian.plugin.classloader.PluginsClassLoader: void <init>(com.atlassian.plugin.PluginAccessor)> ==> <com.atlassian.plugin.classloader.PluginsClassLoader: void <init>(java.lang.ClassLoader,com.atlassian.plugin.PluginAccessor,com.atlassian.plugin.event.PluginEventManager)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.classloader.AbstractClassLoader: void <init>(java.lang.ClassLoader)>(r1) in <com.atlassian.plugin.classloader.PluginsClassLoader: void <init>(java.lang.ClassLoader,com.atlassian.plugin.PluginAccessor,com.atlassian.plugin.event.PluginEventManager)> ==> <com.atlassian.plugin.classloader.AbstractClassLoader: void <init>(java.lang.ClassLoader)>
SPECIAL edge: specialinvoke $r2.<java.util.HashMap: void <init>()>() in <com.atlassian.plugin.classloader.PluginsClassLoader: void <init>(java.lang.ClassLoader,com.atlassian.plugin.PluginAccessor,com.atlassian.plugin.event.PluginEventManager)> ==> <java.util.HashMap: void <init>()>
SPECIAL edge: specialinvoke $r3.<java.util.HashMap: void <init>()>() in <com.atlassian.plugin.classloader.PluginsClassLoader: void <init>(java.lang.ClassLoader,com.atlassian.plugin.PluginAccessor,com.atlassian.plugin.event.PluginEventManager)> ==> <java.util.HashMap: void <init>()>
SPECIAL edge: specialinvoke $r4.<java.util.HashSet: void <init>()>() in <com.atlassian.plugin.classloader.PluginsClassLoader: void <init>(java.lang.ClassLoader,com.atlassian.plugin.PluginAccessor,com.atlassian.plugin.event.PluginEventManager)> ==> <java.util.HashSet: void <init>()>
SPECIAL edge: specialinvoke $r5.<java.util.HashSet: void <init>()>() in <com.atlassian.plugin.classloader.PluginsClassLoader: void <init>(java.lang.ClassLoader,com.atlassian.plugin.PluginAccessor,com.atlassian.plugin.event.PluginEventManager)> ==> <java.util.HashSet: void <init>()>
INTERFACE edge: interfaceinvoke r9.<com.atlassian.plugin.event.PluginEventManager: void register(java.lang.Object)>(r0) in <com.atlassian.plugin.classloader.PluginsClassLoader: void <init>(java.lang.ClassLoader,com.atlassian.plugin.PluginAccessor,com.atlassian.plugin.event.PluginEventManager)> ==> <com.atlassian.plugin.event.impl.DefaultPluginEventManager: void register(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.classloader.PluginsClassLoader: void flushMissesCaches()>() in <com.atlassian.plugin.classloader.PluginsClassLoader: void notifyUninstallPlugin(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.classloader.PluginsClassLoader: void flushMissesCaches()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>() in <com.atlassian.plugin.classloader.PluginsClassLoader: void notifyUninstallPlugin(com.atlassian.plugin.Plugin)> ==> <java.util.HashMap: java.util.Set entrySet()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>() in <com.atlassian.plugin.classloader.PluginsClassLoader: void notifyUninstallPlugin(com.atlassian.plugin.Plugin)> ==> <java.util.Hashtable: java.util.Set entrySet()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>() in <com.atlassian.plugin.classloader.PluginsClassLoader: void notifyUninstallPlugin(com.atlassian.plugin.Plugin)> ==> <java.util.TreeMap: java.util.Set entrySet()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>() in <com.atlassian.plugin.classloader.PluginsClassLoader: void notifyUninstallPlugin(com.atlassian.plugin.Plugin)> ==> <java.util.jar.Attributes: java.util.Set entrySet()>
INTERFACE edge: r14 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.classloader.PluginsClassLoader: void notifyUninstallPlugin(com.atlassian.plugin.Plugin)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r14 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.classloader.PluginsClassLoader: void notifyUninstallPlugin(com.atlassian.plugin.Plugin)> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r14 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.classloader.PluginsClassLoader: void notifyUninstallPlugin(com.atlassian.plugin.Plugin)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: $r12 = interfaceinvoke r7.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.classloader.PluginsClassLoader: void notifyUninstallPlugin(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r12 = interfaceinvoke r7.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.classloader.PluginsClassLoader: void notifyUninstallPlugin(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
INTERFACE edge: $r8 = interfaceinvoke r7.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.classloader.PluginsClassLoader: void notifyUninstallPlugin(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r8 = interfaceinvoke r7.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.classloader.PluginsClassLoader: void notifyUninstallPlugin(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
INTERFACE edge: $r13 = interfaceinvoke r16.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.classloader.PluginsClassLoader: void notifyUninstallPlugin(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r13 = interfaceinvoke r16.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.classloader.PluginsClassLoader: void notifyUninstallPlugin(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
VIRTUAL edge: $z3 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r13) in <com.atlassian.plugin.classloader.PluginsClassLoader: void notifyUninstallPlugin(com.atlassian.plugin.Plugin)> ==> <java.lang.String: boolean equals(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>() in <com.atlassian.plugin.classloader.PluginsClassLoader: void notifyUninstallPlugin(com.atlassian.plugin.Plugin)> ==> <java.util.HashMap: java.util.Set entrySet()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>() in <com.atlassian.plugin.classloader.PluginsClassLoader: void notifyUninstallPlugin(com.atlassian.plugin.Plugin)> ==> <java.util.Hashtable: java.util.Set entrySet()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>() in <com.atlassian.plugin.classloader.PluginsClassLoader: void notifyUninstallPlugin(com.atlassian.plugin.Plugin)> ==> <java.util.TreeMap: java.util.Set entrySet()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>() in <com.atlassian.plugin.classloader.PluginsClassLoader: void notifyUninstallPlugin(com.atlassian.plugin.Plugin)> ==> <java.util.jar.Attributes: java.util.Set entrySet()>
INTERFACE edge: r17 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.classloader.PluginsClassLoader: void notifyUninstallPlugin(com.atlassian.plugin.Plugin)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r17 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.classloader.PluginsClassLoader: void notifyUninstallPlugin(com.atlassian.plugin.Plugin)> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r17 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.classloader.PluginsClassLoader: void notifyUninstallPlugin(com.atlassian.plugin.Plugin)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: $r9 = interfaceinvoke r19.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.classloader.PluginsClassLoader: void notifyUninstallPlugin(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r9 = interfaceinvoke r19.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.classloader.PluginsClassLoader: void notifyUninstallPlugin(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
VIRTUAL edge: $z2 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r9) in <com.atlassian.plugin.classloader.PluginsClassLoader: void notifyUninstallPlugin(com.atlassian.plugin.Plugin)> ==> <java.lang.String: boolean equals(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) in <com.atlassian.plugin.classloader.PluginsClassLoader: com.atlassian.plugin.Plugin getPluginForClass(java.lang.String)> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) in <com.atlassian.plugin.classloader.PluginsClassLoader: com.atlassian.plugin.Plugin getPluginForClass(java.lang.String)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) in <com.atlassian.plugin.classloader.PluginsClassLoader: com.atlassian.plugin.Plugin getPluginForClass(java.lang.String)> ==> <java.util.TreeMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) in <com.atlassian.plugin.classloader.PluginsClassLoader: com.atlassian.plugin.Plugin getPluginForClass(java.lang.String)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) in <com.atlassian.plugin.classloader.PluginsClassLoader: com.atlassian.plugin.Plugin getPluginForClass(java.lang.String)> ==> <java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>
SPECIAL edge: $z0 = specialinvoke r0.<com.atlassian.plugin.classloader.PluginsClassLoader: boolean isPluginEnabled(com.atlassian.plugin.Plugin)>(r12) in <com.atlassian.plugin.classloader.PluginsClassLoader: com.atlassian.plugin.Plugin getPluginForClass(java.lang.String)> ==> <com.atlassian.plugin.classloader.PluginsClassLoader: boolean isPluginEnabled(com.atlassian.plugin.Plugin)>
SPECIAL edge: $z1 = specialinvoke r0.<com.atlassian.plugin.classloader.PluginsClassLoader: boolean isSystemClass(java.lang.String)>(r2) in <com.atlassian.plugin.classloader.PluginsClassLoader: com.atlassian.plugin.Plugin getPluginForClass(java.lang.String)> ==> <com.atlassian.plugin.classloader.PluginsClassLoader: boolean isSystemClass(java.lang.String)>
SPECIAL edge: r14 = specialinvoke r0.<com.atlassian.plugin.classloader.PluginsClassLoader: java.lang.Class loadClassFromPlugins(java.lang.String)>(r2) in <com.atlassian.plugin.classloader.PluginsClassLoader: com.atlassian.plugin.Plugin getPluginForClass(java.lang.String)> ==> <com.atlassian.plugin.classloader.PluginsClassLoader: java.lang.Class loadClassFromPlugins(java.lang.String)>
INTERFACE edge: $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) in <com.atlassian.plugin.classloader.PluginsClassLoader: com.atlassian.plugin.Plugin getPluginForClass(java.lang.String)> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) in <com.atlassian.plugin.classloader.PluginsClassLoader: com.atlassian.plugin.Plugin getPluginForClass(java.lang.String)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) in <com.atlassian.plugin.classloader.PluginsClassLoader: com.atlassian.plugin.Plugin getPluginForClass(java.lang.String)> ==> <java.util.TreeMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) in <com.atlassian.plugin.classloader.PluginsClassLoader: com.atlassian.plugin.Plugin getPluginForClass(java.lang.String)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) in <com.atlassian.plugin.classloader.PluginsClassLoader: com.atlassian.plugin.Plugin getPluginForClass(java.lang.String)> ==> <java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>
CLINIT edge: $r5 = <com.atlassian.plugin.classloader.PluginsClassLoader: org.slf4j.Logger log> in <com.atlassian.plugin.classloader.PluginsClassLoader: java.lang.Class loadClassFromPlugins(java.lang.String)> ==> <com.atlassian.plugin.classloader.PluginsClassLoader: void <clinit>()>
CLINIT edge: $r6 = <com.atlassian.plugin.classloader.PluginsClassLoader: org.slf4j.Logger log> in <com.atlassian.plugin.classloader.PluginsClassLoader: java.lang.Class loadClassFromPlugins(java.lang.String)> ==> <com.atlassian.plugin.classloader.PluginsClassLoader: void <clinit>()>
CLINIT edge: $r12 = <com.atlassian.plugin.classloader.PluginsClassLoader: org.slf4j.Logger log> in <com.atlassian.plugin.classloader.PluginsClassLoader: java.lang.Class loadClassFromPlugins(java.lang.String)> ==> <com.atlassian.plugin.classloader.PluginsClassLoader: void <clinit>()>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.classloader.PluginsClassLoader: void notifyPluginOrModuleEnabled()>() in <com.atlassian.plugin.classloader.PluginsClassLoader: void onPluginEnabled(com.atlassian.plugin.event.events.PluginEnabledEvent)> ==> <com.atlassian.plugin.classloader.PluginsClassLoader: void notifyPluginOrModuleEnabled()>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.classloader.PluginsClassLoader: void notifyPluginOrModuleEnabled()>() in <com.atlassian.plugin.classloader.PluginsClassLoader: void onPluginModuleEnabled(com.atlassian.plugin.event.events.PluginModuleEnabledEvent)> ==> <com.atlassian.plugin.classloader.PluginsClassLoader: void notifyPluginOrModuleEnabled()>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.classloader.PluginsClassLoader: void flushMissesCaches()>() in <com.atlassian.plugin.classloader.PluginsClassLoader: void notifyPluginOrModuleEnabled()> ==> <com.atlassian.plugin.classloader.PluginsClassLoader: void flushMissesCaches()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.PluginEnabler: void <init>(com.atlassian.plugin.PluginAccessor,com.atlassian.plugin.PluginController,com.atlassian.plugin.exception.PluginExceptionInterception)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.concurrent.CopyOnWriteArraySet: void <init>()>() in <com.atlassian.plugin.manager.PluginEnabler: void <init>(com.atlassian.plugin.PluginAccessor,com.atlassian.plugin.PluginController,com.atlassian.plugin.exception.PluginExceptionInterception)> ==> <java.util.concurrent.CopyOnWriteArraySet: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.PluginEnabler: boolean isPluginBeingEnabled(com.atlassian.plugin.Plugin)> ==> <java.util.HashSet: boolean contains(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.PluginEnabler: boolean isPluginBeingEnabled(com.atlassian.plugin.Plugin)> ==> <java.util.concurrent.CopyOnWriteArraySet: boolean contains(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.PluginEnabler: boolean isPluginBeingEnabled(com.atlassian.plugin.Plugin)> ==> <java.util.TreeSet: boolean contains(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>() in <com.atlassian.plugin.manager.StateTracker: com.atlassian.plugin.manager.StateTracker$State get()> ==> <java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.atlassian.plugin.manager.StateTracker: com.atlassian.plugin.manager.StateTracker$State get()>() in <com.atlassian.plugin.manager.StateTracker: java.lang.String toString()> ==> <com.atlassian.plugin.manager.StateTracker: com.atlassian.plugin.manager.StateTracker$State get()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.atlassian.plugin.manager.StateTracker$State: java.lang.String toString()>() in <com.atlassian.plugin.manager.StateTracker: java.lang.String toString()> ==> <java.lang.Enum: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.atlassian.plugin.manager.DefaultPluginManager: java.util.Collection getPlugins()>() in <com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge: com.atlassian.plugin.jmx.PluginManagerMXBean$PluginData[] getPlugins()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: java.util.Collection getPlugins()>
INTERFACE edge: $r5 = interfaceinvoke $r3.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r4) in <com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge: com.atlassian.plugin.jmx.PluginManagerMXBean$PluginData[] getPlugins()> ==> <java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<com.atlassian.plugin.manager.DefaultPluginManager: int scanForNewPlugins()>() in <com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge: int scanForNewPlugins()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: int scanForNewPlugins()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge$1: void <init>(com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge,com.atlassian.plugin.Plugin)>(r1, r2) in <com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge: com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge$1 lambda$getPlugins$0(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge$1: void <init>(com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge,com.atlassian.plugin.Plugin)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.SafeModuleExtractor: void <init>(com.atlassian.plugin.PluginController)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Spliterator spliterator()>() in <com.atlassian.plugin.manager.SafeModuleExtractor: java.util.List getModules(java.lang.Iterable)> ==> <java.lang.Iterable: java.util.Spliterator spliterator()>
INTERFACE edge: $r5 = interfaceinvoke $r2.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r4) in <com.atlassian.plugin.manager.SafeModuleExtractor: java.util.List getModules(java.lang.Iterable)> ==> <java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>
INTERFACE edge: $r7 = interfaceinvoke $r5.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($r6) in <com.atlassian.plugin.manager.SafeModuleExtractor: java.util.List getModules(java.lang.Iterable)> ==> <java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>
INTERFACE edge: $r9 = interfaceinvoke $r7.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r8) in <com.atlassian.plugin.manager.SafeModuleExtractor: java.util.List getModules(java.lang.Iterable)> ==> <java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.PluginTransactionContext: void <init>(com.atlassian.plugin.event.PluginEventManager)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.ThreadLocal: java.lang.Object get()>() in <com.atlassian.plugin.manager.PluginTransactionContext: void addEvent(java.lang.Object)> ==> <java.lang.ThreadLocal: java.lang.Object get()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int get()>() in <com.atlassian.plugin.manager.PluginTransactionContext: void addEvent(java.lang.Object)> ==> <java.util.concurrent.atomic.AtomicInteger: int get()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.ThreadLocal: java.lang.Object get()>() in <com.atlassian.plugin.manager.PluginTransactionContext: void addEvent(java.lang.Object)> ==> <java.lang.ThreadLocal: java.lang.Object get()>
INTERFACE edge: interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r5) in <com.atlassian.plugin.manager.PluginTransactionContext: void addEvent(java.lang.Object)> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r5) in <com.atlassian.plugin.manager.PluginTransactionContext: void addEvent(java.lang.Object)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.manager.PluginTransactionContext: void start()>() in <com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)> ==> <com.atlassian.plugin.manager.PluginTransactionContext: void start()>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.manager.PluginTransactionContext: void stop()>() in <com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)> ==> <com.atlassian.plugin.manager.PluginTransactionContext: void stop()>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.manager.PluginTransactionContext: void stop()>() in <com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)> ==> <com.atlassian.plugin.manager.PluginTransactionContext: void stop()>
INTERFACE edge: interfaceinvoke r1.<java.lang.Runnable: void run()>() in <com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)> ==> <java.lang.Thread: void run()>
INTERFACE edge: interfaceinvoke r1.<java.lang.Runnable: void run()>() in <com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_uninstall_15__48: void run()>
INTERFACE edge: interfaceinvoke r1.<java.lang.Runnable: void run()>() in <com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_uninstallPlugins_19__49: void run()>
INTERFACE edge: interfaceinvoke r1.<java.lang.Runnable: void run()>() in <com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_reenableDependent_37__74: void run()>
INTERFACE edge: interfaceinvoke r1.<java.lang.Runnable: void run()>() in <com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_disablePluginModule_43__81: void run()>
INTERFACE edge: interfaceinvoke r1.<java.lang.Runnable: void run()>() in <com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_updatePlugin_26__56: void run()>
INTERFACE edge: interfaceinvoke r1.<java.lang.Runnable: void run()>() in <com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_onPluginContainerUnavailable_11__44: void run()>
INTERFACE edge: interfaceinvoke r1.<java.lang.Runnable: void run()>() in <com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_scanForNewPlugins_14__47: void run()>
INTERFACE edge: interfaceinvoke r1.<java.lang.Runnable: void run()>() in <com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_notifyModuleEnabled_46__84: void run()>
INTERFACE edge: interfaceinvoke r1.<java.lang.Runnable: void run()>() in <com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_earlyStartup_5__38: void run()>
INTERFACE edge: interfaceinvoke r1.<java.lang.Runnable: void run()>() in <com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_enablePluginModule_45__83: void run()>
INTERFACE edge: interfaceinvoke r1.<java.lang.Runnable: void run()>() in <com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)> ==> <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$lambda_save_0__17: void run()>
INTERFACE edge: interfaceinvoke r1.<java.lang.Runnable: void run()>() in <com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_shutdown_7__40: void run()>
INTERFACE edge: interfaceinvoke r1.<java.lang.Runnable: void run()>() in <com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_revertRestartRequiredChange_20__50: void run()>
INTERFACE edge: interfaceinvoke r1.<java.lang.Runnable: void run()>() in <com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_unloadPlugin_21__51: void run()>
INTERFACE edge: interfaceinvoke r1.<java.lang.Runnable: void run()>() in <com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_onPluginRefresh_12__45: void run()>
INTERFACE edge: interfaceinvoke r1.<java.lang.Runnable: void run()>() in <com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_broadcastPluginDisabling_39__76: void run()>
INTERFACE edge: interfaceinvoke r1.<java.lang.Runnable: void run()>() in <com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_removeDynamicModule_48__87: void run()>
INTERFACE edge: interfaceinvoke r1.<java.lang.Runnable: void run()>() in <com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_broadcastPluginDisabled_40__78: void run()>
INTERFACE edge: interfaceinvoke r1.<java.lang.Runnable: void run()>() in <com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_disablePlugin_33__71: void run()>
INTERFACE edge: interfaceinvoke r1.<java.lang.Runnable: void run()>() in <com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_disablePlugins_25__55: void run()>
INTERFACE edge: interfaceinvoke r1.<java.lang.Runnable: void run()>() in <com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_onPluginModuleUnavailable_10__43: void run()>
INTERFACE edge: interfaceinvoke r1.<java.lang.Runnable: void run()>() in <com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_disablePluginWithoutPersisting_34__72: void run()>
INTERFACE edge: interfaceinvoke r1.<java.lang.Runnable: void run()>() in <com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_disablePluginModules_42__80: void run()>
INTERFACE edge: interfaceinvoke r1.<java.lang.Runnable: void run()>() in <com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_installPlugins_13__46: void run()>
INTERFACE edge: interfaceinvoke r1.<java.lang.Runnable: void run()>() in <com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_publishModuleDisabledEvents_44__82: void run()>
INTERFACE edge: interfaceinvoke r1.<java.lang.Runnable: void run()>() in <com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_lateStartup_6__39: void run()>
INTERFACE edge: interfaceinvoke r1.<java.lang.Runnable: void run()>() in <com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_addPlugins_22__52: void run()>
INTERFACE edge: interfaceinvoke r1.<java.lang.Runnable: void run()>() in <com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_init_3__37: void run()>
INTERFACE edge: interfaceinvoke r1.<java.lang.Runnable: void run()>() in <com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_disablePluginInternal_35__73: void run()>
INTERFACE edge: interfaceinvoke r1.<java.lang.Runnable: void run()>() in <com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_addDynamicModule_47__86: void run()>
INTERFACE edge: interfaceinvoke r1.<java.lang.Runnable: void run()>() in <com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_notifyPluginDisabled_41__79: void run()>
INTERFACE edge: interfaceinvoke r1.<java.lang.Runnable: void run()>() in <com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_enablePlugins_30__68: void run()>
INTERFACE edge: interfaceinvoke r1.<java.lang.Runnable: void run()>() in <com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_warmRestart_8__41: void run()>
INTERFACE edge: interfaceinvoke r1.<java.lang.Runnable: void run()>() in <com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_enableDependentPlugins_24__54: void run()>
CLINIT edge: $r0 = <com.atlassian.plugin.manager.PluginTransactionContext: java.lang.ThreadLocal level> in <com.atlassian.plugin.manager.PluginTransactionContext: void start()> ==> <com.atlassian.plugin.manager.PluginTransactionContext: void <clinit>()>
CLINIT edge: $r0 = <com.atlassian.plugin.manager.PluginTransactionContext: java.lang.ThreadLocal level> in <com.atlassian.plugin.manager.PluginTransactionContext: void stop()> ==> <com.atlassian.plugin.manager.PluginTransactionContext: void <clinit>()>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.manager.PluginTransactionContext: void start()>() in <com.atlassian.plugin.manager.PluginTransactionContext: java.lang.Object wrap(java.util.function.Supplier)> ==> <com.atlassian.plugin.manager.PluginTransactionContext: void start()>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.manager.PluginTransactionContext: void stop()>() in <com.atlassian.plugin.manager.PluginTransactionContext: java.lang.Object wrap(java.util.function.Supplier)> ==> <com.atlassian.plugin.manager.PluginTransactionContext: void stop()>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.manager.PluginTransactionContext: void stop()>() in <com.atlassian.plugin.manager.PluginTransactionContext: java.lang.Object wrap(java.util.function.Supplier)> ==> <com.atlassian.plugin.manager.PluginTransactionContext: void stop()>
INTERFACE edge: r2 = interfaceinvoke r1.<java.util.function.Supplier: java.lang.Object get()>() in <com.atlassian.plugin.manager.PluginTransactionContext: java.lang.Object wrap(java.util.function.Supplier)> ==> <java.util.function.Supplier: java.lang.Object get()>
SPECIAL edge: specialinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0) in <com.atlassian.plugin.manager.PluginTransactionContext: java.util.concurrent.atomic.AtomicInteger lambda$static$0()> ==> <java.util.concurrent.atomic.AtomicInteger: void <init>(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$Builder: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.ArrayList: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$Builder: void <init>()> ==> <java.util.ArrayList: void <init>()>
SPECIAL edge: specialinvoke $r4.<com.atlassian.plugin.manager.PluginRegistryImpl: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$Builder: void <init>()> ==> <com.atlassian.plugin.manager.PluginRegistryImpl: void <init>()>
INTERFACE edge: interfaceinvoke $r2.<java.util.List: boolean addAll(java.util.Collection)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withPluginLoaders(java.util.List)> ==> <java.util.LinkedList: boolean addAll(java.util.Collection)>
INTERFACE edge: interfaceinvoke $r2.<java.util.List: boolean addAll(java.util.Collection)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withPluginLoaders(java.util.List)> ==> <java.util.ArrayList: boolean addAll(java.util.Collection)>
INTERFACE edge: interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withPluginLoader(com.atlassian.plugin.loaders.PluginLoader)> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager$Builder withPluginLoader(com.atlassian.plugin.loaders.PluginLoader)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.DefaultPluginManager$Builder)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager$Builder: com.atlassian.plugin.manager.DefaultPluginManager build()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.DefaultPluginManager$Builder)>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: java.lang.String getEnabledProperty()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: java.lang.String getEnabledProperty()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>() in <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: java.lang.String getEnabledProperty()> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".enabled") in <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: java.lang.String getEnabledProperty()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: java.lang.String getEnabledProperty()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.instrumentation.Timer: void <init>(java.util.Optional)>($r8) in <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: com.atlassian.plugin.instrumentation.Timer pullTimer(java.lang.String)> ==> <com.atlassian.plugin.instrumentation.Timer: void <init>(java.util.Optional)>
STATIC edge: $r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1) in <com.atlassian.plugin.instrumentation.Timer: void <init>(java.util.Optional)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.instrumentation.SingleTimer: void <init>(java.util.Optional,java.lang.String)>($r8, r2) in <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: com.atlassian.plugin.instrumentation.SingleTimer pullSingleTimer(java.lang.String)> ==> <com.atlassian.plugin.instrumentation.SingleTimer: void <init>(java.util.Optional,java.lang.String)>
SPECIAL edge: $r5 = specialinvoke r1.<com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: java.lang.String formatSingleName(java.lang.String)>($r4) in <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: java.util.Optional lambda$pullSingleTimer$2(java.lang.String,com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$InstrumentRegistryProxy)> ==> <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: java.lang.String formatSingleName(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke r0.<com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$InstrumentRegistryProxy: com.atlassian.instrumentation.operations.OpTimer pullTimer(java.lang.String)>($r5) in <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: java.util.Optional lambda$pullSingleTimer$2(java.lang.String,com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$InstrumentRegistryProxy)> ==> <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$InstrumentRegistryProxy: com.atlassian.instrumentation.operations.OpTimer pullTimer(java.lang.String)>
CLINIT edge: $r3 = <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: java.time.format.DateTimeFormatter timerDateFormatter> in <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: java.lang.String formatSingleName(java.lang.String)> ==> <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: void <clinit>()>
STATIC edge: $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s.%s", $r0) in <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: java.lang.String formatSingleName(java.lang.String)> ==> <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
STATIC edge: $r4 = staticinvoke <java.time.LocalDateTime: java.time.LocalDateTime now()>() in <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: java.lang.String formatSingleName(java.lang.String)> ==> <java.time.LocalDateTime: java.time.LocalDateTime now()>
STATIC edge: $r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1) in <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: java.lang.String formatSingleName(java.lang.String)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
CLINIT edge: $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s.%s", $r0) in <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: java.lang.String formatSingleName(java.lang.String)> ==> <java.lang.String: void <clinit>()>
STATIC edge: $r3 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1) in <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$InstrumentRegistryProxy: com.atlassian.instrumentation.operations.OpTimer pullTimer(java.lang.String)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
VIRTUAL edge: $r4 = virtualinvoke r0.<com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$InstrumentRegistryProxy: com.atlassian.instrumentation.operations.OpTimer pullTimer(java.lang.String)>($r3) in <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: java.util.Optional lambda$pullTimer$1(java.lang.String,com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$InstrumentRegistryProxy)> ==> <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$InstrumentRegistryProxy: com.atlassian.instrumentation.operations.OpTimer pullTimer(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$InstrumentRegistryProxy: com.atlassian.instrumentation.InstrumentRegistry getInstrumentRegistry()>() in <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: java.util.Optional lambda$getInstrumentRegistry$0(com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$InstrumentRegistryProxy)> ==> <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$InstrumentRegistryProxy: com.atlassian.instrumentation.InstrumentRegistry getInstrumentRegistry()>
SPECIAL edge: specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Dynamic plugin installation is not supported") in <com.atlassian.plugin.manager.UnsupportedPluginInstaller: void installPlugin(java.lang.String,com.atlassian.plugin.PluginArtifact)> ==> <java.lang.UnsupportedOperationException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.predicate.EnabledModulePredicate: void <init>()> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke r0.<com.atlassian.plugin.ModuleDescriptor: boolean isEnabled()>() in <com.atlassian.plugin.predicate.EnabledModulePredicate: boolean test(com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: boolean isEnabled()>
INTERFACE edge: $z1 = interfaceinvoke r0.<com.atlassian.plugin.ModuleDescriptor: boolean isBroken()>() in <com.atlassian.plugin.predicate.EnabledModulePredicate: boolean test(com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: boolean isBroken()>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.atlassian.plugin.predicate.EnabledModulePredicate: boolean test(com.atlassian.plugin.ModuleDescriptor)>($r2) in <com.atlassian.plugin.predicate.EnabledModulePredicate: boolean test(java.lang.Object)> ==> <com.atlassian.plugin.predicate.EnabledModulePredicate: boolean test(com.atlassian.plugin.ModuleDescriptor)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.PluginsInEnableOrder: void <init>(java.util.Collection,com.atlassian.plugin.PluginRegistry$ReadOnly)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.manager.PluginsInEnableOrder: void sortPluginForEnable(com.atlassian.plugin.Plugin,java.util.Set,java.util.Collection,com.atlassian.plugin.PluginRegistry$ReadOnly)>(r7, $r2, r4, r8) in <com.atlassian.plugin.manager.PluginsInEnableOrder: void <init>(java.util.Collection,com.atlassian.plugin.PluginRegistry$ReadOnly)> ==> <com.atlassian.plugin.manager.PluginsInEnableOrder: void sortPluginForEnable(com.atlassian.plugin.Plugin,java.util.Set,java.util.Collection,com.atlassian.plugin.PluginRegistry$ReadOnly)>
SPECIAL edge: specialinvoke $r1.<java.util.ArrayList: void <init>()>() in <com.atlassian.plugin.manager.PluginsInEnableOrder: void <init>(java.util.Collection,com.atlassian.plugin.PluginRegistry$ReadOnly)> ==> <java.util.ArrayList: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.util.HashSet: void <init>()>() in <com.atlassian.plugin.manager.PluginsInEnableOrder: void <init>(java.util.Collection,com.atlassian.plugin.PluginRegistry$ReadOnly)> ==> <java.util.HashSet: void <init>()>
INTERFACE edge: r5 = interfaceinvoke r4.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.PluginsInEnableOrder: void <init>(java.util.Collection,com.atlassian.plugin.PluginRegistry$ReadOnly)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r5 = interfaceinvoke r4.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.PluginsInEnableOrder: void <init>(java.util.Collection,com.atlassian.plugin.PluginRegistry$ReadOnly)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r5 = interfaceinvoke r4.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.PluginsInEnableOrder: void <init>(java.util.Collection,com.atlassian.plugin.PluginRegistry$ReadOnly)> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r5 = interfaceinvoke r4.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.PluginsInEnableOrder: void <init>(java.util.Collection,com.atlassian.plugin.PluginRegistry$ReadOnly)> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r5 = interfaceinvoke r4.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.PluginsInEnableOrder: void <init>(java.util.Collection,com.atlassian.plugin.PluginRegistry$ReadOnly)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: r5 = interfaceinvoke r4.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.PluginsInEnableOrder: void <init>(java.util.Collection,com.atlassian.plugin.PluginRegistry$ReadOnly)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.metadata.DefaultRequiredPluginValidator: void <init>(com.atlassian.plugin.PluginAccessor,com.atlassian.plugin.metadata.RequiredPluginProvider)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r3.<java.util.HashSet: void <init>()>() in <com.atlassian.plugin.metadata.DefaultRequiredPluginValidator: void <init>(com.atlassian.plugin.PluginAccessor,com.atlassian.plugin.metadata.RequiredPluginProvider)> ==> <java.util.HashSet: void <init>()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.atlassian.plugin.metadata.RequiredPluginProvider: java.util.Set getRequiredPluginKeys()>() in <com.atlassian.plugin.metadata.DefaultRequiredPluginValidator: java.util.Collection validate()> ==> <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: java.util.Set getRequiredPluginKeys()>
INTERFACE edge: r14 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.metadata.DefaultRequiredPluginValidator: java.util.Collection validate()> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r14 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.metadata.DefaultRequiredPluginValidator: java.util.Collection validate()> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r14 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.metadata.DefaultRequiredPluginValidator: java.util.Collection validate()> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: $z4 = interfaceinvoke $r11.<com.atlassian.plugin.PluginAccessor: boolean isPluginEnabled(java.lang.String)>(r15) in <com.atlassian.plugin.metadata.DefaultRequiredPluginValidator: java.util.Collection validate()> ==> <com.atlassian.plugin.manager.ProductPluginAccessor: boolean isPluginEnabled(java.lang.String)>
INTERFACE edge: $z4 = interfaceinvoke $r11.<com.atlassian.plugin.PluginAccessor: boolean isPluginEnabled(java.lang.String)>(r15) in <com.atlassian.plugin.metadata.DefaultRequiredPluginValidator: java.util.Collection validate()> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase: boolean isPluginEnabled(java.lang.String)>
INTERFACE edge: $z4 = interfaceinvoke $r11.<com.atlassian.plugin.PluginAccessor: boolean isPluginEnabled(java.lang.String)>(r15) in <com.atlassian.plugin.metadata.DefaultRequiredPluginValidator: java.util.Collection validate()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: boolean isPluginEnabled(java.lang.String)>
INTERFACE edge: $z4 = interfaceinvoke $r11.<com.atlassian.plugin.PluginAccessor: boolean isPluginEnabled(java.lang.String)>(r15) in <com.atlassian.plugin.metadata.DefaultRequiredPluginValidator: java.util.Collection validate()> ==> <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: boolean isPluginEnabled(java.lang.String)>
INTERFACE edge: interfaceinvoke $r12.<org.slf4j.Logger: void error(java.lang.String,java.lang.Object)>("Plugin Not Enabled: {}", r15) in <com.atlassian.plugin.metadata.DefaultRequiredPluginValidator: java.util.Collection validate()> ==> <org.slf4j.Logger: void error(java.lang.String,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r13.<java.util.Collection: boolean add(java.lang.Object)>(r15) in <com.atlassian.plugin.metadata.DefaultRequiredPluginValidator: java.util.Collection validate()> ==> <java.util.HashSet: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r13.<java.util.Collection: boolean add(java.lang.Object)>(r15) in <com.atlassian.plugin.metadata.DefaultRequiredPluginValidator: java.util.Collection validate()> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r13.<java.util.Collection: boolean add(java.lang.Object)>(r15) in <com.atlassian.plugin.metadata.DefaultRequiredPluginValidator: java.util.Collection validate()> ==> <java.util.ArrayDeque: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r13.<java.util.Collection: boolean add(java.lang.Object)>(r15) in <com.atlassian.plugin.metadata.DefaultRequiredPluginValidator: java.util.Collection validate()> ==> <java.util.concurrent.CopyOnWriteArraySet: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r13.<java.util.Collection: boolean add(java.lang.Object)>(r15) in <com.atlassian.plugin.metadata.DefaultRequiredPluginValidator: java.util.Collection validate()> ==> <java.util.TreeSet: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r13.<java.util.Collection: boolean add(java.lang.Object)>(r15) in <com.atlassian.plugin.metadata.DefaultRequiredPluginValidator: java.util.Collection validate()> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<com.atlassian.plugin.metadata.RequiredPluginProvider: java.util.Set getRequiredModuleKeys()>() in <com.atlassian.plugin.metadata.DefaultRequiredPluginValidator: java.util.Collection validate()> ==> <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: java.util.Set getRequiredModuleKeys()>
INTERFACE edge: r16 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.metadata.DefaultRequiredPluginValidator: java.util.Collection validate()> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r16 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.metadata.DefaultRequiredPluginValidator: java.util.Collection validate()> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r16 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.metadata.DefaultRequiredPluginValidator: java.util.Collection validate()> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: $z2 = interfaceinvoke $r7.<com.atlassian.plugin.PluginAccessor: boolean isPluginModuleEnabled(java.lang.String)>(r17) in <com.atlassian.plugin.metadata.DefaultRequiredPluginValidator: java.util.Collection validate()> ==> <com.atlassian.plugin.manager.ProductPluginAccessor: boolean isPluginModuleEnabled(java.lang.String)>
INTERFACE edge: $z2 = interfaceinvoke $r7.<com.atlassian.plugin.PluginAccessor: boolean isPluginModuleEnabled(java.lang.String)>(r17) in <com.atlassian.plugin.metadata.DefaultRequiredPluginValidator: java.util.Collection validate()> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase: boolean isPluginModuleEnabled(java.lang.String)>
INTERFACE edge: $z2 = interfaceinvoke $r7.<com.atlassian.plugin.PluginAccessor: boolean isPluginModuleEnabled(java.lang.String)>(r17) in <com.atlassian.plugin.metadata.DefaultRequiredPluginValidator: java.util.Collection validate()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: boolean isPluginModuleEnabled(java.lang.String)>
INTERFACE edge: $z2 = interfaceinvoke $r7.<com.atlassian.plugin.PluginAccessor: boolean isPluginModuleEnabled(java.lang.String)>(r17) in <com.atlassian.plugin.metadata.DefaultRequiredPluginValidator: java.util.Collection validate()> ==> <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: boolean isPluginModuleEnabled(java.lang.String)>
INTERFACE edge: interfaceinvoke $r8.<org.slf4j.Logger: void error(java.lang.String,java.lang.Object)>("Plugin Module Not Enabled: {}", r17) in <com.atlassian.plugin.metadata.DefaultRequiredPluginValidator: java.util.Collection validate()> ==> <org.slf4j.Logger: void error(java.lang.String,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r9.<java.util.Collection: boolean add(java.lang.Object)>(r17) in <com.atlassian.plugin.metadata.DefaultRequiredPluginValidator: java.util.Collection validate()> ==> <java.util.HashSet: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r9.<java.util.Collection: boolean add(java.lang.Object)>(r17) in <com.atlassian.plugin.metadata.DefaultRequiredPluginValidator: java.util.Collection validate()> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r9.<java.util.Collection: boolean add(java.lang.Object)>(r17) in <com.atlassian.plugin.metadata.DefaultRequiredPluginValidator: java.util.Collection validate()> ==> <java.util.ArrayDeque: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r9.<java.util.Collection: boolean add(java.lang.Object)>(r17) in <com.atlassian.plugin.metadata.DefaultRequiredPluginValidator: java.util.Collection validate()> ==> <java.util.concurrent.CopyOnWriteArraySet: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r9.<java.util.Collection: boolean add(java.lang.Object)>(r17) in <com.atlassian.plugin.metadata.DefaultRequiredPluginValidator: java.util.Collection validate()> ==> <java.util.TreeSet: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r9.<java.util.Collection: boolean add(java.lang.Object)>(r17) in <com.atlassian.plugin.metadata.DefaultRequiredPluginValidator: java.util.Collection validate()> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.predicate.ModuleOfClassPredicate: void <init>(java.lang.Class)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: r1 = interfaceinvoke r0.<com.atlassian.plugin.ModuleDescriptor: java.lang.Class getModuleClass()>() in <com.atlassian.plugin.predicate.ModuleOfClassPredicate: boolean test(com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.Class getModuleClass()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1) in <com.atlassian.plugin.predicate.ModuleOfClassPredicate: boolean test(com.atlassian.plugin.ModuleDescriptor)> ==> <java.lang.Class: boolean isAssignableFrom(java.lang.Class)>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.atlassian.plugin.predicate.ModuleOfClassPredicate: boolean test(com.atlassian.plugin.ModuleDescriptor)>($r2) in <com.atlassian.plugin.predicate.ModuleOfClassPredicate: boolean test(java.lang.Object)> ==> <com.atlassian.plugin.predicate.ModuleOfClassPredicate: boolean test(com.atlassian.plugin.ModuleDescriptor)>
VIRTUAL edge: r1 = virtualinvoke r0.<com.atlassian.plugin.instrumentation.SingleTimer: java.util.Optional getOpTimer()>() in <com.atlassian.plugin.instrumentation.SingleTimer: void close()> ==> <com.atlassian.plugin.instrumentation.Timer: java.util.Optional getOpTimer()>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.instrumentation.Timer: void close()>() in <com.atlassian.plugin.instrumentation.SingleTimer: void close()> ==> <com.atlassian.plugin.instrumentation.Timer: void close()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.atlassian.plugin.manager.StateTracker$State: com.atlassian.plugin.manager.StateTracker$State[] values()> ==> <java.lang.Object: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.atlassian.plugin.manager.StateTracker$State: com.atlassian.plugin.manager.StateTracker$State[] values()> ==> <java.util.HashMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.atlassian.plugin.manager.StateTracker$State: com.atlassian.plugin.manager.StateTracker$State[] values()> ==> <java.util.TreeMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.atlassian.plugin.manager.StateTracker$State: com.atlassian.plugin.manager.StateTracker$State[] values()> ==> <java.lang.Enum: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.atlassian.plugin.manager.StateTracker$State: com.atlassian.plugin.manager.StateTracker$State[] values()> ==> <java.util.jar.Attributes: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.atlassian.plugin.manager.StateTracker$State: com.atlassian.plugin.manager.StateTracker$State[] values()> ==> <java.util.TreeSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.atlassian.plugin.manager.StateTracker$State: com.atlassian.plugin.manager.StateTracker$State[] values()> ==> <java.util.ArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.atlassian.plugin.manager.StateTracker$State: com.atlassian.plugin.manager.StateTracker$State[] values()> ==> <java.util.HashSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.atlassian.plugin.manager.StateTracker$State: com.atlassian.plugin.manager.StateTracker$State[] values()> ==> <java.util.Hashtable: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.atlassian.plugin.manager.StateTracker$State: com.atlassian.plugin.manager.StateTracker$State[] values()> ==> <java.util.ArrayDeque: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.atlassian.plugin.manager.StateTracker$State: com.atlassian.plugin.manager.StateTracker$State[] values()> ==> <java.util.jar.Manifest: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.atlassian.plugin.manager.StateTracker$State: com.atlassian.plugin.manager.StateTracker$State[] values()> ==> <java.util.Date: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.atlassian.plugin.manager.StateTracker$State: com.atlassian.plugin.manager.StateTracker$State[] values()> ==> <java.util.Locale: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.atlassian.plugin.manager.StateTracker$State: com.atlassian.plugin.manager.StateTracker$State[] values()> ==> <java.util.zip.ZipEntry: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.atlassian.plugin.manager.StateTracker$State: com.atlassian.plugin.manager.StateTracker$State[] values()> ==> <java.util.LinkedList: java.lang.Object clone()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.predicate.EnabledPluginPredicate: void <init>(java.util.Set)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $r2 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginState getPluginState()>() in <com.atlassian.plugin.predicate.EnabledPluginPredicate: boolean test(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: com.atlassian.plugin.PluginState getPluginState()>
INTERFACE edge: $r2 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginState getPluginState()>() in <com.atlassian.plugin.predicate.EnabledPluginPredicate: boolean test(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginState getPluginState()>
INTERFACE edge: $z1 = interfaceinvoke $r4.<java.util.Set: boolean contains(java.lang.Object)>(r0) in <com.atlassian.plugin.predicate.EnabledPluginPredicate: boolean test(com.atlassian.plugin.Plugin)> ==> <java.util.HashSet: boolean contains(java.lang.Object)>
INTERFACE edge: $z1 = interfaceinvoke $r4.<java.util.Set: boolean contains(java.lang.Object)>(r0) in <com.atlassian.plugin.predicate.EnabledPluginPredicate: boolean test(com.atlassian.plugin.Plugin)> ==> <java.util.concurrent.CopyOnWriteArraySet: boolean contains(java.lang.Object)>
INTERFACE edge: $z1 = interfaceinvoke $r4.<java.util.Set: boolean contains(java.lang.Object)>(r0) in <com.atlassian.plugin.predicate.EnabledPluginPredicate: boolean test(com.atlassian.plugin.Plugin)> ==> <java.util.TreeSet: boolean contains(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.atlassian.plugin.predicate.EnabledPluginPredicate: boolean test(com.atlassian.plugin.Plugin)>($r2) in <com.atlassian.plugin.predicate.EnabledPluginPredicate: boolean test(java.lang.Object)> ==> <com.atlassian.plugin.predicate.EnabledPluginPredicate: boolean test(com.atlassian.plugin.Plugin)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.NoOpRevertablePluginInstaller: void <init>(com.atlassian.plugin.PluginInstaller)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: interfaceinvoke $r3.<com.atlassian.plugin.PluginInstaller: void installPlugin(java.lang.String,com.atlassian.plugin.PluginArtifact)>(r1, r2) in <com.atlassian.plugin.manager.NoOpRevertablePluginInstaller: void installPlugin(java.lang.String,com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.repositories.FilePluginInstaller: void installPlugin(java.lang.String,com.atlassian.plugin.PluginArtifact)>
INTERFACE edge: interfaceinvoke $r3.<com.atlassian.plugin.PluginInstaller: void installPlugin(java.lang.String,com.atlassian.plugin.PluginArtifact)>(r1, r2) in <com.atlassian.plugin.manager.NoOpRevertablePluginInstaller: void installPlugin(java.lang.String,com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.manager.NoOpRevertablePluginInstaller: void installPlugin(java.lang.String,com.atlassian.plugin.PluginArtifact)>
INTERFACE edge: interfaceinvoke $r3.<com.atlassian.plugin.PluginInstaller: void installPlugin(java.lang.String,com.atlassian.plugin.PluginArtifact)>(r1, r2) in <com.atlassian.plugin.manager.NoOpRevertablePluginInstaller: void installPlugin(java.lang.String,com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.manager.UnsupportedPluginInstaller: void installPlugin(java.lang.String,com.atlassian.plugin.PluginArtifact)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>() in <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: void <init>()> ==> <java.lang.Class: java.lang.ClassLoader getClassLoader()>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: void <init>(java.lang.ClassLoader)>($r2) in <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: void <init>()> ==> <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: void <init>(java.lang.ClassLoader)>
INTERFACE edge: $r3 = interfaceinvoke r1.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: boolean applicationProvided(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r3 = interfaceinvoke r1.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: boolean applicationProvided(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>($r3) in <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: boolean applicationProvided(com.atlassian.plugin.Plugin)> ==> <java.util.HashSet: boolean contains(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>($r3) in <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: boolean applicationProvided(com.atlassian.plugin.Plugin)> ==> <java.util.concurrent.CopyOnWriteArraySet: boolean contains(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>($r3) in <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: boolean applicationProvided(com.atlassian.plugin.Plugin)> ==> <java.util.TreeSet: boolean contains(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke r1.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: boolean required(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r3 = interfaceinvoke r1.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: boolean required(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>($r3) in <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: boolean required(com.atlassian.plugin.Plugin)> ==> <java.util.HashSet: boolean contains(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>($r3) in <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: boolean required(com.atlassian.plugin.Plugin)> ==> <java.util.concurrent.CopyOnWriteArraySet: boolean contains(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>($r3) in <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: boolean required(com.atlassian.plugin.Plugin)> ==> <java.util.TreeSet: boolean contains(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke r1.<com.atlassian.plugin.ModuleDescriptor: java.lang.String getCompleteKey()>() in <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: boolean required(com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.String getCompleteKey()>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>($r3) in <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: boolean required(com.atlassian.plugin.ModuleDescriptor)> ==> <java.util.HashSet: boolean contains(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>($r3) in <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: boolean required(com.atlassian.plugin.ModuleDescriptor)> ==> <java.util.concurrent.CopyOnWriteArraySet: boolean contains(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>($r3) in <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: boolean required(com.atlassian.plugin.ModuleDescriptor)> ==> <java.util.TreeSet: boolean contains(java.lang.Object)>
INTERFACE edge: $z1 = interfaceinvoke r2.<com.atlassian.plugin.util.WaitUntil$WaitCondition: boolean isFinished()>() in <com.atlassian.plugin.util.WaitUntil: boolean invoke(com.atlassian.plugin.util.WaitUntil$WaitCondition,int,java.util.concurrent.TimeUnit,int)> ==> <com.atlassian.plugin.manager.PluginEnabler$1: boolean isFinished()>
INTERFACE edge: $r5 = interfaceinvoke r2.<com.atlassian.plugin.util.WaitUntil$WaitCondition: java.lang.String getWaitMessage()>() in <com.atlassian.plugin.util.WaitUntil: boolean invoke(com.atlassian.plugin.util.WaitUntil$WaitCondition,int,java.util.concurrent.TimeUnit,int)> ==> <com.atlassian.plugin.manager.PluginEnabler$1: java.lang.String getWaitMessage()>
VIRTUAL edge: $l6 = virtualinvoke $r6.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($l5, $r7) in <com.atlassian.plugin.util.WaitUntil: boolean invoke(com.atlassian.plugin.util.WaitUntil$WaitCondition,int,java.util.concurrent.TimeUnit,int)> ==> <java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>
INTERFACE edge: interfaceinvoke $r4.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("{}, {} seconds remaining", $r5, $r8) in <com.atlassian.plugin.util.WaitUntil: boolean invoke(com.atlassian.plugin.util.WaitUntil$WaitCondition,int,java.util.concurrent.TimeUnit,int)> ==> <org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>
VIRTUAL edge: $l4 = virtualinvoke r0.<java.util.concurrent.TimeUnit: long toMillis(long)>($l3) in <com.atlassian.plugin.util.WaitUntil: boolean invoke(com.atlassian.plugin.util.WaitUntil$WaitCondition,int,java.util.concurrent.TimeUnit,int)> ==> <java.util.concurrent.TimeUnit: long toMillis(long)>
INTERFACE edge: r17 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.PluginEnabler$1: boolean isFinished()> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r17 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.PluginEnabler$1: boolean isFinished()> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r17 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.PluginEnabler$1: boolean isFinished()> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: r18 = interfaceinvoke r13.<com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginState getPluginState()>() in <com.atlassian.plugin.manager.PluginEnabler$1: boolean isFinished()> ==> <com.atlassian.plugin.impl.AbstractPlugin: com.atlassian.plugin.PluginState getPluginState()>
INTERFACE edge: r18 = interfaceinvoke r13.<com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginState getPluginState()>() in <com.atlassian.plugin.manager.PluginEnabler$1: boolean isFinished()> ==> <com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginState getPluginState()>
INTERFACE edge: $r16 = interfaceinvoke r13.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.PluginEnabler$1: boolean isFinished()> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r16 = interfaceinvoke r13.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.PluginEnabler$1: boolean isFinished()> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
INTERFACE edge: interfaceinvoke $r15.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Plugin \'{}\' is now {}", $r16, r18) in <com.atlassian.plugin.manager.PluginEnabler$1: boolean isFinished()> ==> <org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>
INTERFACE edge: $i2 = interfaceinvoke $r2.<java.util.Set: int size()>() in <com.atlassian.plugin.manager.PluginEnabler$1: boolean isFinished()> ==> <java.util.HashSet: int size()>
INTERFACE edge: $i2 = interfaceinvoke $r2.<java.util.Set: int size()>() in <com.atlassian.plugin.manager.PluginEnabler$1: boolean isFinished()> ==> <java.util.concurrent.CopyOnWriteArraySet: int size()>
INTERFACE edge: $i2 = interfaceinvoke $r2.<java.util.Set: int size()>() in <com.atlassian.plugin.manager.PluginEnabler$1: boolean isFinished()> ==> <java.util.TreeSet: int size()>
INTERFACE edge: interfaceinvoke $r10.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Only one plugin left not enabled. Resetting the timeout to {} seconds.", $r11) in <com.atlassian.plugin.manager.PluginEnabler$1: boolean isFinished()> ==> <org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.PluginEnabler$1: boolean isFinished()> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.PluginEnabler$1: boolean isFinished()> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.PluginEnabler$1: boolean isFinished()> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: $z2 = interfaceinvoke $r20.<java.util.Set: boolean isEmpty()>() in <com.atlassian.plugin.manager.PluginEnabler$1: boolean isFinished()> ==> <java.util.HashSet: boolean isEmpty()>
INTERFACE edge: $z2 = interfaceinvoke $r20.<java.util.Set: boolean isEmpty()>() in <com.atlassian.plugin.manager.PluginEnabler$1: boolean isFinished()> ==> <java.util.concurrent.CopyOnWriteArraySet: boolean isEmpty()>
INTERFACE edge: $z2 = interfaceinvoke $r20.<java.util.Set: boolean isEmpty()>() in <com.atlassian.plugin.manager.PluginEnabler$1: boolean isFinished()> ==> <java.util.TreeSet: boolean isEmpty()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.manager.PluginEnabler$1: java.lang.String getWaitMessage()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Plugins that have yet to be enabled: (") in <com.atlassian.plugin.manager.PluginEnabler$1: java.lang.String getWaitMessage()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
INTERFACE edge: $i0 = interfaceinvoke $r3.<java.util.Set: int size()>() in <com.atlassian.plugin.manager.PluginEnabler$1: java.lang.String getWaitMessage()> ==> <java.util.HashSet: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r3.<java.util.Set: int size()>() in <com.atlassian.plugin.manager.PluginEnabler$1: java.lang.String getWaitMessage()> ==> <java.util.concurrent.CopyOnWriteArraySet: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r3.<java.util.Set: int size()>() in <com.atlassian.plugin.manager.PluginEnabler$1: java.lang.String getWaitMessage()> ==> <java.util.TreeSet: int size()>
VIRTUAL edge: $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <com.atlassian.plugin.manager.PluginEnabler$1: java.lang.String getWaitMessage()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): ") in <com.atlassian.plugin.manager.PluginEnabler$1: java.lang.String getWaitMessage()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6) in <com.atlassian.plugin.manager.PluginEnabler$1: java.lang.String getWaitMessage()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.manager.PluginEnabler$1: java.lang.String getWaitMessage()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.jmx.AbstractJmxBridge: void <init>(javax.management.ObjectName,java.lang.Class)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.jmx.AbstractJmxBridge: com.atlassian.plugin.jmx.AbstractJmxBridge$WeakMXBeanInvocationHandler registerInternal()>() in <com.atlassian.plugin.jmx.AbstractJmxBridge: void register()> ==> <com.atlassian.plugin.jmx.AbstractJmxBridge: com.atlassian.plugin.jmx.AbstractJmxBridge$WeakMXBeanInvocationHandler registerInternal()>
CLINIT edge: staticinvoke <com.atlassian.plugin.jmx.JmxUtil: javax.management.ObjectInstance register(java.lang.Object,javax.management.ObjectName)>(r9, $r10) in <com.atlassian.plugin.jmx.AbstractJmxBridge: com.atlassian.plugin.jmx.AbstractJmxBridge$WeakMXBeanInvocationHandler registerInternal()> ==> <com.atlassian.plugin.jmx.JmxUtil: void <clinit>()>
STATIC edge: staticinvoke <com.atlassian.plugin.jmx.JmxUtil: javax.management.ObjectInstance register(java.lang.Object,javax.management.ObjectName)>(r9, $r10) in <com.atlassian.plugin.jmx.AbstractJmxBridge: com.atlassian.plugin.jmx.AbstractJmxBridge$WeakMXBeanInvocationHandler registerInternal()> ==> <com.atlassian.plugin.jmx.JmxUtil: javax.management.ObjectInstance register(java.lang.Object,javax.management.ObjectName)>
STATIC edge: r9 = staticinvoke <java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>($r6, $r7, $r0) in <com.atlassian.plugin.jmx.AbstractJmxBridge: com.atlassian.plugin.jmx.AbstractJmxBridge$WeakMXBeanInvocationHandler registerInternal()> ==> <java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge$1: java.lang.String getKey()> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge$1: java.lang.String getKey()> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
INTERFACE edge: r2 = interfaceinvoke $r1.<com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginInformation getPluginInformation()>() in <com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge$1: java.lang.String getVersion()> ==> <com.atlassian.plugin.impl.AbstractPlugin: com.atlassian.plugin.PluginInformation getPluginInformation()>
INTERFACE edge: r2 = interfaceinvoke $r1.<com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginInformation getPluginInformation()>() in <com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge$1: java.lang.String getVersion()> ==> <com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginInformation getPluginInformation()>
VIRTUAL edge: $r3 = virtualinvoke r2.<com.atlassian.plugin.PluginInformation: java.lang.String getVersion()>() in <com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge$1: java.lang.String getVersion()> ==> <com.atlassian.plugin.PluginInformation: java.lang.String getVersion()>
INTERFACE edge: r2 = interfaceinvoke $r1.<com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginArtifact getPluginArtifact()>() in <com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge$1: java.lang.String getLocation()> ==> <com.atlassian.plugin.impl.AbstractPlugin: com.atlassian.plugin.PluginArtifact getPluginArtifact()>
INTERFACE edge: r2 = interfaceinvoke $r1.<com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginArtifact getPluginArtifact()>() in <com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge$1: java.lang.String getLocation()> ==> <com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginArtifact getPluginArtifact()>
INTERFACE edge: $r3 = interfaceinvoke r2.<com.atlassian.plugin.PluginArtifact: java.io.File toFile()>() in <com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge$1: java.lang.String getLocation()> ==> <com.atlassian.plugin.PluginArtifact: java.io.File toFile()>
INTERFACE edge: $r3 = interfaceinvoke r2.<com.atlassian.plugin.PluginArtifact: java.io.File toFile()>() in <com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge$1: java.lang.String getLocation()> ==> <com.atlassian.plugin.JarPluginArtifact: java.io.File toFile()>
INTERFACE edge: $r3 = interfaceinvoke r2.<com.atlassian.plugin.PluginArtifact: java.io.File toFile()>() in <com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge$1: java.lang.String getLocation()> ==> <com.atlassian.plugin.XmlPluginArtifact: java.io.File toFile()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.io.File: java.lang.String getAbsolutePath()>() in <com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge$1: java.lang.String getLocation()> ==> <java.io.File: java.lang.String getAbsolutePath()>
INTERFACE edge: r2 = interfaceinvoke $r1.<com.atlassian.plugin.Plugin: java.util.Date getDateLoaded()>() in <com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge$1: java.lang.Long getDateLoaded()> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.util.Date getDateLoaded()>
VIRTUAL edge: $l0 = virtualinvoke r2.<java.util.Date: long getTime()>() in <com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge$1: java.lang.Long getDateLoaded()> ==> <java.util.Date: long getTime()>
INTERFACE edge: r2 = interfaceinvoke $r1.<com.atlassian.plugin.Plugin: java.util.Date getDateInstalled()>() in <com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge$1: java.lang.Long getDateInstalled()> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.util.Date getDateInstalled()>
VIRTUAL edge: $l0 = virtualinvoke r2.<java.util.Date: long getTime()>() in <com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge$1: java.lang.Long getDateInstalled()> ==> <java.util.Date: long getTime()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge$1: boolean isEnabled()> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge$1: boolean isEnabled()> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<com.atlassian.plugin.manager.DefaultPluginManager: boolean isPluginEnabled(java.lang.String)>($r4) in <com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge$1: boolean isEnabled()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: boolean isPluginEnabled(java.lang.String)>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.atlassian.plugin.Plugin: boolean isEnabledByDefault()>() in <com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge$1: boolean isEnabledByDefault()> ==> <com.atlassian.plugin.impl.AbstractPlugin: boolean isEnabledByDefault()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.atlassian.plugin.Plugin: boolean isEnabledByDefault()>() in <com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge$1: boolean isEnabledByDefault()> ==> <com.atlassian.plugin.impl.UnloadablePlugin: boolean isEnabledByDefault()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.atlassian.plugin.Plugin: boolean isBundledPlugin()>() in <com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge$1: boolean isBundledPlugin()> ==> <com.atlassian.plugin.impl.AbstractPlugin: boolean isBundledPlugin()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.jmx.JmxUtil: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>() in <com.atlassian.plugin.jmx.JmxUtil: javax.management.ObjectName objectName(java.util.concurrent.atomic.AtomicInteger,java.lang.String)> ==> <java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>
SPECIAL edge: specialinvoke $r10.<java.util.Hashtable: void <init>(java.util.Map)>($r12) in <com.atlassian.plugin.jmx.JmxUtil: javax.management.ObjectName objectName(java.util.concurrent.atomic.AtomicInteger,java.lang.String)> ==> <java.util.Hashtable: void <init>(java.util.Map)>
SPECIAL edge: specialinvoke $r11.<javax.management.ObjectName: void <init>(java.lang.String,java.util.Hashtable)>("com.atlassian.plugin", $r10) in <com.atlassian.plugin.jmx.JmxUtil: javax.management.ObjectName objectName(java.util.concurrent.atomic.AtomicInteger,java.lang.String)> ==> <javax.management.ObjectName: void <init>(java.lang.String,java.util.Hashtable)>
INTERFACE edge: $r4 = interfaceinvoke $r2.<javax.management.MBeanServer: javax.management.ObjectInstance registerMBean(java.lang.Object,javax.management.ObjectName)>(r3, r0) in <com.atlassian.plugin.jmx.JmxUtil: javax.management.ObjectInstance register(java.lang.Object,javax.management.ObjectName)> ==> <javax.management.MBeanServer: javax.management.ObjectInstance registerMBean(java.lang.Object,javax.management.ObjectName)>
INTERFACE edge: interfaceinvoke $r1.<org.slf4j.Logger: void warn(java.lang.String)>("Failed to register, objectName null") in <com.atlassian.plugin.jmx.JmxUtil: javax.management.ObjectInstance register(java.lang.Object,javax.management.ObjectName)> ==> <org.slf4j.Logger: void warn(java.lang.String)>
INTERFACE edge: interfaceinvoke $r0.<javax.management.MBeanServer: void unregisterMBean(javax.management.ObjectName)>(r1) in <com.atlassian.plugin.jmx.JmxUtil: boolean unregister(javax.management.ObjectName)> ==> <javax.management.MBeanServer: void unregisterMBean(javax.management.ObjectName)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.event.impl.DefaultPluginEventManager: void <init>(com.atlassian.plugin.event.impl.ListenerMethodSelector[])>($r1) in <com.atlassian.plugin.event.impl.DefaultPluginEventManager: void <init>()> ==> <com.atlassian.plugin.event.impl.DefaultPluginEventManager: void <init>(com.atlassian.plugin.event.impl.ListenerMethodSelector[])>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.event.impl.DefaultPluginEventManager: void <init>(com.atlassian.plugin.event.impl.ListenerMethodSelector[])> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r9.<com.atlassian.event.internal.EventThreadPoolConfigurationImpl: void <init>()>() in <com.atlassian.plugin.event.impl.DefaultPluginEventManager: void <init>(com.atlassian.plugin.event.impl.ListenerMethodSelector[])> ==> <com.atlassian.event.internal.EventThreadPoolConfigurationImpl: void <init>()>
SPECIAL edge: specialinvoke $r10.<com.atlassian.event.internal.DirectEventExecutorFactory: void <init>(com.atlassian.event.config.EventThreadPoolConfiguration)>($r13) in <com.atlassian.plugin.event.impl.DefaultPluginEventManager: void <init>(com.atlassian.plugin.event.impl.ListenerMethodSelector[])> ==> <com.atlassian.event.internal.DirectEventExecutorFactory: void <init>(com.atlassian.event.config.EventThreadPoolConfiguration)>
SPECIAL edge: specialinvoke $r11.<com.atlassian.event.internal.AsynchronousAbleEventDispatcher: void <init>(com.atlassian.event.spi.EventExecutorFactory)>($r14) in <com.atlassian.plugin.event.impl.DefaultPluginEventManager: void <init>(com.atlassian.plugin.event.impl.ListenerMethodSelector[])> ==> <com.atlassian.event.internal.AsynchronousAbleEventDispatcher: void <init>(com.atlassian.event.spi.EventExecutorFactory)>
SPECIAL edge: specialinvoke $r12.<com.atlassian.event.internal.EventPublisherImpl: void <init>(com.atlassian.event.spi.EventDispatcher,com.atlassian.event.config.ListenerHandlersConfiguration)>($r15, r2) in <com.atlassian.plugin.event.impl.DefaultPluginEventManager: void <init>(com.atlassian.plugin.event.impl.ListenerMethodSelector[])> ==> <com.atlassian.event.internal.EventPublisherImpl: void <init>(com.atlassian.event.spi.EventDispatcher,com.atlassian.event.config.ListenerHandlersConfiguration)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.event.impl.DefaultPluginEventManager: void <init>(com.atlassian.plugin.event.impl.ListenerMethodSelector[])>($r1) in <com.atlassian.plugin.event.impl.DefaultPluginEventManager: void <init>(com.atlassian.plugin.scope.ScopeManager)> ==> <com.atlassian.plugin.event.impl.DefaultPluginEventManager: void <init>(com.atlassian.plugin.event.impl.ListenerMethodSelector[])>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.event.impl.DefaultPluginEventManager: void <init>(com.atlassian.plugin.event.impl.ListenerMethodSelector[])>(r1) in <com.atlassian.plugin.event.impl.DefaultPluginEventManager: void <init>(com.atlassian.plugin.scope.ScopeManager,com.atlassian.plugin.event.impl.ListenerMethodSelector[])> ==> <com.atlassian.plugin.event.impl.DefaultPluginEventManager: void <init>(com.atlassian.plugin.event.impl.ListenerMethodSelector[])>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.event.impl.DefaultPluginEventManager: void <init>(com.atlassian.event.api.EventPublisher)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: interfaceinvoke $r3.<com.atlassian.event.api.EventPublisher: void publish(java.lang.Object)>(r0) in <com.atlassian.plugin.event.impl.DefaultPluginEventManager: void broadcast(java.lang.Object)> ==> <com.atlassian.event.api.EventPublisher: void publish(java.lang.Object)>
SPECIAL edge: specialinvoke $r7.<com.atlassian.plugin.event.NotificationException: void <init>(java.lang.Throwable)>($r4) in <com.atlassian.plugin.event.impl.DefaultPluginEventManager: void broadcast(java.lang.Object)> ==> <com.atlassian.plugin.event.NotificationException: void <init>(java.lang.Throwable)>
SPECIAL edge: specialinvoke $r0.<java.util.ArrayList: void <init>(int)>($i0) in <com.atlassian.plugin.event.impl.DefaultPluginEventManager: java.util.List lambda$new$0(com.atlassian.plugin.event.impl.ListenerMethodSelector[])> ==> <java.util.ArrayList: void <init>(int)>
INTERFACE edge: interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r5) in <com.atlassian.plugin.event.impl.DefaultPluginEventManager: java.util.List lambda$new$0(com.atlassian.plugin.event.impl.ListenerMethodSelector[])> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke $r5.<com.atlassian.plugin.event.impl.MethodSelectorListenerHandler: void <init>(com.atlassian.plugin.event.impl.ListenerMethodSelector)>(r4) in <com.atlassian.plugin.event.impl.DefaultPluginEventManager: java.util.List lambda$new$0(com.atlassian.plugin.event.impl.ListenerMethodSelector[])> ==> <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler: void <init>(com.atlassian.plugin.event.impl.ListenerMethodSelector)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.jmx.AbstractJmxBridge$WeakMXBeanInvocationHandler: void <init>(javax.management.ObjectName,java.lang.Object)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r3) in <com.atlassian.plugin.jmx.AbstractJmxBridge$WeakMXBeanInvocationHandler: void <init>(javax.management.ObjectName,java.lang.Object)> ==> <java.lang.ref.WeakReference: void <init>(java.lang.Object)>
VIRTUAL edge: r2 = virtualinvoke $r1.<java.lang.ref.WeakReference: java.lang.Object get()>() in <com.atlassian.plugin.jmx.AbstractJmxBridge$WeakMXBeanInvocationHandler: java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])> ==> <java.lang.ref.Reference: java.lang.Object get()>
SPECIAL edge: specialinvoke $r8.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.jmx.AbstractJmxBridge$WeakMXBeanInvocationHandler: java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot use stale MXBean \'") in <com.atlassian.plugin.jmx.AbstractJmxBridge$WeakMXBeanInvocationHandler: java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10) in <com.atlassian.plugin.jmx.AbstractJmxBridge$WeakMXBeanInvocationHandler: java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'") in <com.atlassian.plugin.jmx.AbstractJmxBridge$WeakMXBeanInvocationHandler: java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.jmx.AbstractJmxBridge$WeakMXBeanInvocationHandler: java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r13) in <com.atlassian.plugin.jmx.AbstractJmxBridge$WeakMXBeanInvocationHandler: java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r2, r4) in <com.atlassian.plugin.jmx.AbstractJmxBridge$WeakMXBeanInvocationHandler: java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])> ==> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler: void <init>(com.atlassian.plugin.event.impl.ListenerMethodSelector)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: r3 = specialinvoke r0.<com.atlassian.plugin.event.impl.MethodSelectorListenerHandler: java.util.List getValidMethods(java.lang.Object)>($r2) in <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler: java.util.List getInvokers(java.lang.Object)> ==> <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler: java.util.List getValidMethods(java.lang.Object)>
STATIC edge: r0 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>() in <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler: java.util.List getValidMethods(java.lang.Object)> ==> <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.event.impl.MethodSelectorListenerHandler$1: void <init>(com.atlassian.plugin.event.impl.MethodSelectorListenerHandler,java.lang.reflect.Method,java.lang.Object)>(r1, r2, r3) in <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler: com.atlassian.event.spi.ListenerInvoker lambda$getInvokers$0(java.lang.Object,java.lang.reflect.Method)> ==> <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler$1: void <init>(com.atlassian.plugin.event.impl.MethodSelectorListenerHandler,java.lang.reflect.Method,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.event.impl.MethodNameListenerMethodSelector: void <init>(java.lang.String)>("channel") in <com.atlassian.plugin.event.impl.MethodNameListenerMethodSelector: void <init>()> ==> <com.atlassian.plugin.event.impl.MethodNameListenerMethodSelector: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.event.impl.MethodNameListenerMethodSelector: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Method name for the listener must be a valid method name") in <com.atlassian.plugin.event.impl.MethodNameListenerMethodSelector: void <init>(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Method cannot be null") in <com.atlassian.plugin.event.impl.MethodNameListenerMethodSelector: boolean isListenerMethod(java.lang.reflect.Method)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.String getName()>() in <com.atlassian.plugin.event.impl.MethodNameListenerMethodSelector: boolean isListenerMethod(java.lang.reflect.Method)> ==> <java.lang.reflect.Method: java.lang.String getName()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3) in <com.atlassian.plugin.event.impl.MethodNameListenerMethodSelector: boolean isListenerMethod(java.lang.reflect.Method)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.event.impl.AnnotationListenerMethodSelector: void <init>(java.lang.Class)>(class "Lcom/atlassian/plugin/event/PluginEventListener;") in <com.atlassian.plugin.event.impl.AnnotationListenerMethodSelector: void <init>()> ==> <com.atlassian.plugin.event.impl.AnnotationListenerMethodSelector: void <init>(java.lang.Class)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.event.impl.AnnotationListenerMethodSelector: void <init>(java.lang.Class)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>($r2) in <com.atlassian.plugin.event.impl.AnnotationListenerMethodSelector: boolean isListenerMethod(java.lang.reflect.Method)> ==> <java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>() in <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler$1: java.util.Set getSupportedEventTypes()> ==> <java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>
VIRTUAL edge: virtualinvoke $r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r3, $r1) in <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler$1: void invoke(java.lang.Object)> ==> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke $r20.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r16) in <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler$1: void invoke(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
VIRTUAL edge: $r7 = virtualinvoke $r24.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>() in <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler$1: void invoke(java.lang.Object)> ==> <java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>
SPECIAL edge: specialinvoke $r21.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r6) in <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler$1: void invoke(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
VIRTUAL edge: $r8 = virtualinvoke $r25.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>() in <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler$1: void invoke(java.lang.Object)> ==> <java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.Throwable: java.lang.String getMessage()>() in <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler$1: void invoke(java.lang.Object)> ==> <java.lang.Throwable: java.lang.String getMessage()>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.Throwable: java.lang.String getMessage()>() in <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler$1: void invoke(java.lang.Object)> ==> <org.xml.sax.SAXException: java.lang.String getMessage()>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.Throwable: java.lang.String getMessage()>() in <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler$1: void invoke(java.lang.Object)> ==> <java.nio.charset.MalformedInputException: java.lang.String getMessage()>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.Throwable: java.lang.String getMessage()>() in <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler$1: void invoke(java.lang.Object)> ==> <java.net.URISyntaxException: java.lang.String getMessage()>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.Throwable: java.lang.String getMessage()>() in <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler$1: void invoke(java.lang.Object)> ==> <java.util.regex.PatternSyntaxException: java.lang.String getMessage()>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.Throwable: java.lang.String getMessage()>() in <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler$1: void invoke(java.lang.Object)> ==> <java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
VIRTUAL edge: $r14 = virtualinvoke $r26.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>() in <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler$1: void invoke(java.lang.Object)> ==> <java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>
SPECIAL edge: specialinvoke $r22.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r14) in <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler$1: void invoke(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
VIRTUAL edge: $r11 = virtualinvoke $r27.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>() in <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler$1: void invoke(java.lang.Object)> ==> <java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.Throwable: java.lang.String getMessage()>() in <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler$1: void invoke(java.lang.Object)> ==> <java.lang.Throwable: java.lang.String getMessage()>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.Throwable: java.lang.String getMessage()>() in <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler$1: void invoke(java.lang.Object)> ==> <org.xml.sax.SAXException: java.lang.String getMessage()>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.Throwable: java.lang.String getMessage()>() in <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler$1: void invoke(java.lang.Object)> ==> <java.nio.charset.MalformedInputException: java.lang.String getMessage()>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.Throwable: java.lang.String getMessage()>() in <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler$1: void invoke(java.lang.Object)> ==> <java.net.URISyntaxException: java.lang.String getMessage()>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.Throwable: java.lang.String getMessage()>() in <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler$1: void invoke(java.lang.Object)> ==> <java.util.regex.PatternSyntaxException: java.lang.String getMessage()>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.Throwable: java.lang.String getMessage()>() in <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler$1: void invoke(java.lang.Object)> ==> <java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
SPECIAL edge: specialinvoke $r23.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r12, $r6) in <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler$1: void invoke(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lcom/atlassian/event/api/EventListener;") in <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler$1: java.util.Optional getScope()> ==> <java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lcom/atlassian/event/api/EventListener;") in <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler$1: int getOrder()> ==> <java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0) in <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler$1: boolean lambda$getScope$0(java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$MatchType: com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$MatchType[] values()> ==> <java.lang.Object: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$MatchType: com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$MatchType[] values()> ==> <java.util.HashMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$MatchType: com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$MatchType[] values()> ==> <java.util.TreeMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$MatchType: com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$MatchType[] values()> ==> <java.lang.Enum: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$MatchType: com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$MatchType[] values()> ==> <java.util.jar.Attributes: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$MatchType: com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$MatchType[] values()> ==> <java.util.TreeSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$MatchType: com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$MatchType[] values()> ==> <java.util.ArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$MatchType: com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$MatchType[] values()> ==> <java.util.HashSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$MatchType: com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$MatchType[] values()> ==> <java.util.Hashtable: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$MatchType: com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$MatchType[] values()> ==> <java.util.ArrayDeque: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$MatchType: com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$MatchType[] values()> ==> <java.util.jar.Manifest: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$MatchType: com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$MatchType[] values()> ==> <java.util.Date: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$MatchType: com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$MatchType[] values()> ==> <java.util.Locale: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$MatchType: com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$MatchType[] values()> ==> <java.util.zip.ZipEntry: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$MatchType: com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$MatchType[] values()> ==> <java.util.LinkedList: java.lang.Object clone()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.predicate.PluginKeyPatternsPredicate: void <init>(com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$MatchType,java.util.Collection)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke r1.<com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$MatchType: java.lang.String buildRegularExpression(java.util.Collection)>(r2) in <com.atlassian.plugin.predicate.PluginKeyPatternsPredicate: void <init>(com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$MatchType,java.util.Collection)> ==> <com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$MatchType$1: java.lang.String buildRegularExpression(java.util.Collection)>
VIRTUAL edge: $r3 = virtualinvoke r1.<com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$MatchType: java.lang.String buildRegularExpression(java.util.Collection)>(r2) in <com.atlassian.plugin.predicate.PluginKeyPatternsPredicate: void <init>(com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$MatchType,java.util.Collection)> ==> <com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$MatchType$2: java.lang.String buildRegularExpression(java.util.Collection)>
INTERFACE edge: $r4 = interfaceinvoke r1.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.predicate.PluginKeyPatternsPredicate: boolean test(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r4 = interfaceinvoke r1.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.predicate.PluginKeyPatternsPredicate: boolean test(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
VIRTUAL edge: $r5 = virtualinvoke $r3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r4) in <com.atlassian.plugin.predicate.PluginKeyPatternsPredicate: boolean test(com.atlassian.plugin.Plugin)> ==> <java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$MatchType: boolean processMatcher(java.util.regex.Matcher)>($r5) in <com.atlassian.plugin.predicate.PluginKeyPatternsPredicate: boolean test(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$MatchType$2: boolean processMatcher(java.util.regex.Matcher)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$MatchType: boolean processMatcher(java.util.regex.Matcher)>($r5) in <com.atlassian.plugin.predicate.PluginKeyPatternsPredicate: boolean test(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$MatchType$1: boolean processMatcher(java.util.regex.Matcher)>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.atlassian.plugin.predicate.PluginKeyPatternsPredicate: boolean test(com.atlassian.plugin.Plugin)>($r2) in <com.atlassian.plugin.predicate.PluginKeyPatternsPredicate: boolean test(java.lang.Object)> ==> <com.atlassian.plugin.predicate.PluginKeyPatternsPredicate: boolean test(com.atlassian.plugin.Plugin)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.util.regex.Matcher: boolean matches()>() in <com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$MatchType$2: boolean processMatcher(java.util.regex.Matcher)> ==> <java.util.regex.Matcher: boolean matches()>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.util.regex.Matcher: boolean matches()>() in <com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$MatchType$1: boolean processMatcher(java.util.regex.Matcher)> ==> <java.util.regex.Matcher: boolean matches()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.util.RegularExpressions: void <init>()> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.Collection: boolean isEmpty()>() in <com.atlassian.plugin.util.RegularExpressions: java.lang.String anyOf(java.util.Collection)> ==> <java.util.HashSet: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.Collection: boolean isEmpty()>() in <com.atlassian.plugin.util.RegularExpressions: java.lang.String anyOf(java.util.Collection)> ==> <java.util.AbstractCollection: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.Collection: boolean isEmpty()>() in <com.atlassian.plugin.util.RegularExpressions: java.lang.String anyOf(java.util.Collection)> ==> <java.util.ArrayDeque: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.Collection: boolean isEmpty()>() in <com.atlassian.plugin.util.RegularExpressions: java.lang.String anyOf(java.util.Collection)> ==> <java.util.concurrent.CopyOnWriteArraySet: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.Collection: boolean isEmpty()>() in <com.atlassian.plugin.util.RegularExpressions: java.lang.String anyOf(java.util.Collection)> ==> <java.util.TreeSet: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.Collection: boolean isEmpty()>() in <com.atlassian.plugin.util.RegularExpressions: java.lang.String anyOf(java.util.Collection)> ==> <java.util.ArrayList: boolean isEmpty()>
INTERFACE edge: $i0 = interfaceinvoke r0.<java.util.Collection: int size()>() in <com.atlassian.plugin.util.RegularExpressions: java.lang.String anyOf(java.util.Collection)> ==> <java.util.HashSet: int size()>
INTERFACE edge: $i0 = interfaceinvoke r0.<java.util.Collection: int size()>() in <com.atlassian.plugin.util.RegularExpressions: java.lang.String anyOf(java.util.Collection)> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i0 = interfaceinvoke r0.<java.util.Collection: int size()>() in <com.atlassian.plugin.util.RegularExpressions: java.lang.String anyOf(java.util.Collection)> ==> <java.util.ArrayDeque: int size()>
INTERFACE edge: $i0 = interfaceinvoke r0.<java.util.Collection: int size()>() in <com.atlassian.plugin.util.RegularExpressions: java.lang.String anyOf(java.util.Collection)> ==> <java.util.concurrent.CopyOnWriteArraySet: int size()>
INTERFACE edge: $i0 = interfaceinvoke r0.<java.util.Collection: int size()>() in <com.atlassian.plugin.util.RegularExpressions: java.lang.String anyOf(java.util.Collection)> ==> <java.util.TreeSet: int size()>
INTERFACE edge: $i0 = interfaceinvoke r0.<java.util.Collection: int size()>() in <com.atlassian.plugin.util.RegularExpressions: java.lang.String anyOf(java.util.Collection)> ==> <java.util.ArrayList: int size()>
INTERFACE edge: r10 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.util.RegularExpressions: java.lang.String anyOf(java.util.Collection)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r10 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.util.RegularExpressions: java.lang.String anyOf(java.util.Collection)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r10 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.util.RegularExpressions: java.lang.String anyOf(java.util.Collection)> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r10 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.util.RegularExpressions: java.lang.String anyOf(java.util.Collection)> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r10 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.util.RegularExpressions: java.lang.String anyOf(java.util.Collection)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: r10 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.util.RegularExpressions: java.lang.String anyOf(java.util.Collection)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: r13 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.util.RegularExpressions: java.lang.String anyOf(java.util.Collection)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r13 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.util.RegularExpressions: java.lang.String anyOf(java.util.Collection)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r13 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.util.RegularExpressions: java.lang.String anyOf(java.util.Collection)> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r13 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.util.RegularExpressions: java.lang.String anyOf(java.util.Collection)> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r13 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.util.RegularExpressions: java.lang.String anyOf(java.util.Collection)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: r13 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.util.RegularExpressions: java.lang.String anyOf(java.util.Collection)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
VIRTUAL edge: $i3 = virtualinvoke r11.<java.lang.String: int length()>() in <com.atlassian.plugin.util.RegularExpressions: java.lang.String anyOf(java.util.Collection)> ==> <java.lang.String: int length()>
SPECIAL edge: specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>(i4) in <com.atlassian.plugin.util.RegularExpressions: java.lang.String anyOf(java.util.Collection)> ==> <java.lang.StringBuilder: void <init>(int)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(40) in <com.atlassian.plugin.util.RegularExpressions: java.lang.String anyOf(java.util.Collection)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")|(?:") in <com.atlassian.plugin.util.RegularExpressions: java.lang.String anyOf(java.util.Collection)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6) in <com.atlassian.plugin.util.RegularExpressions: java.lang.String anyOf(java.util.Collection)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("))") in <com.atlassian.plugin.util.RegularExpressions: java.lang.String anyOf(java.util.Collection)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: void setCharAt(int,char)>(1, 63) in <com.atlassian.plugin.util.RegularExpressions: java.lang.String anyOf(java.util.Collection)> ==> <java.lang.StringBuilder: void setCharAt(int,char)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: void setCharAt(int,char)>(2, 58) in <com.atlassian.plugin.util.RegularExpressions: java.lang.String anyOf(java.util.Collection)> ==> <java.lang.StringBuilder: void setCharAt(int,char)>
VIRTUAL edge: $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.util.RegularExpressions: java.lang.String anyOf(java.util.Collection)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.loaders.RosterFileScanner: void <init>(java.io.File)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r31.<java.util.ArrayList: void <init>()>() in <com.atlassian.plugin.loaders.RosterFileScanner: java.util.Collection scan()> ==> <java.util.ArrayList: void <init>()>
INTERFACE edge: interfaceinvoke $r31.<java.util.List: boolean add(java.lang.Object)>($r35) in <com.atlassian.plugin.loaders.RosterFileScanner: java.util.Collection scan()> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: l0 = virtualinvoke $r2.<java.io.File: long lastModified()>() in <com.atlassian.plugin.loaders.RosterFileScanner: java.util.Collection scan()> ==> <java.io.File: long lastModified()>
INTERFACE edge: $i4 = interfaceinvoke r5.<java.util.List: int size()>() in <com.atlassian.plugin.loaders.RosterFileScanner: java.util.Collection scan()> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i4 = interfaceinvoke r5.<java.util.List: int size()>() in <com.atlassian.plugin.loaders.RosterFileScanner: java.util.Collection scan()> ==> <java.util.ArrayList: int size()>
INTERFACE edge: r8 = interfaceinvoke r5.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.loaders.RosterFileScanner: java.util.Collection scan()> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r8 = interfaceinvoke r5.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.loaders.RosterFileScanner: java.util.Collection scan()> ==> <java.util.ArrayList: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke $r32.<java.util.HashMap: void <init>(int)>($i4) in <com.atlassian.plugin.loaders.RosterFileScanner: java.util.Collection scan()> ==> <java.util.HashMap: void <init>(int)>
INTERFACE edge: interfaceinvoke $r32.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r10, $r35) in <com.atlassian.plugin.loaders.RosterFileScanner: java.util.Collection scan()> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r32.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r10, r13) in <com.atlassian.plugin.loaders.RosterFileScanner: java.util.Collection scan()> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>(r10) in <com.atlassian.plugin.loaders.RosterFileScanner: java.util.Collection scan()> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>(r10) in <com.atlassian.plugin.loaders.RosterFileScanner: java.util.Collection scan()> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>(r10) in <com.atlassian.plugin.loaders.RosterFileScanner: java.util.Collection scan()> ==> <java.util.TreeMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>(r10) in <com.atlassian.plugin.loaders.RosterFileScanner: java.util.Collection scan()> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>(r10) in <com.atlassian.plugin.loaders.RosterFileScanner: java.util.Collection scan()> ==> <java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>
SPECIAL edge: specialinvoke $r33.<java.io.File: void <init>(java.lang.String)>(r10) in <com.atlassian.plugin.loaders.RosterFileScanner: java.util.Collection scan()> ==> <java.io.File: void <init>(java.lang.String)>
VIRTUAL edge: $z1 = virtualinvoke $r33.<java.io.File: boolean isAbsolute()>() in <com.atlassian.plugin.loaders.RosterFileScanner: java.util.Collection scan()> ==> <java.io.File: boolean isAbsolute()>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.io.File: java.io.File getParentFile()>() in <com.atlassian.plugin.loaders.RosterFileScanner: java.util.Collection scan()> ==> <java.io.File: java.io.File getParentFile()>
SPECIAL edge: specialinvoke $r34.<java.io.File: void <init>(java.io.File,java.lang.String)>($r18, r10) in <com.atlassian.plugin.loaders.RosterFileScanner: java.util.Collection scan()> ==> <java.io.File: void <init>(java.io.File,java.lang.String)>
SPECIAL edge: specialinvoke $r35.<com.atlassian.plugin.loaders.classloading.DeploymentUnit: void <init>(java.io.File)>($r29) in <com.atlassian.plugin.loaders.RosterFileScanner: java.util.Collection scan()> ==> <com.atlassian.plugin.loaders.classloading.DeploymentUnit: void <init>(java.io.File)>
VIRTUAL edge: $r26 = virtualinvoke $r24.<java.io.File: java.lang.String getAbsolutePath()>() in <com.atlassian.plugin.loaders.RosterFileScanner: java.util.Collection scan()> ==> <java.io.File: java.lang.String getAbsolutePath()>
VIRTUAL edge: $r27 = virtualinvoke $r36.<java.io.IOException: java.lang.String getMessage()>() in <com.atlassian.plugin.loaders.RosterFileScanner: java.util.Collection scan()> ==> <java.lang.Throwable: java.lang.String getMessage()>
VIRTUAL edge: $r27 = virtualinvoke $r36.<java.io.IOException: java.lang.String getMessage()>() in <com.atlassian.plugin.loaders.RosterFileScanner: java.util.Collection scan()> ==> <java.nio.charset.MalformedInputException: java.lang.String getMessage()>
VIRTUAL edge: $r27 = virtualinvoke $r36.<java.io.IOException: java.lang.String getMessage()>() in <com.atlassian.plugin.loaders.RosterFileScanner: java.util.Collection scan()> ==> <java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
INTERFACE edge: interfaceinvoke $r25.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>("Cannot read roster file \'{}\': {}", $r26, $r27) in <com.atlassian.plugin.loaders.RosterFileScanner: java.util.Collection scan()> ==> <org.slf4j.Logger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>() in <com.atlassian.plugin.loaders.RosterFileScanner: java.util.Collection getDeploymentUnits()> ==> <java.util.HashMap: java.util.Collection values()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>() in <com.atlassian.plugin.loaders.RosterFileScanner: java.util.Collection getDeploymentUnits()> ==> <java.util.Hashtable: java.util.Collection values()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>() in <com.atlassian.plugin.loaders.RosterFileScanner: java.util.Collection getDeploymentUnits()> ==> <java.util.AbstractMap: java.util.Collection values()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>() in <com.atlassian.plugin.loaders.RosterFileScanner: java.util.Collection getDeploymentUnits()> ==> <java.util.jar.Attributes: java.util.Collection values()>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.io.File: java.lang.String getName()>() in <com.atlassian.plugin.loaders.RosterFileScanner: boolean isKnownRosterFileFormat(java.io.File)> ==> <java.io.File: java.lang.String getName()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.String: boolean endsWith(java.lang.String)>($r2) in <com.atlassian.plugin.loaders.RosterFileScanner: boolean isKnownRosterFileFormat(java.io.File)> ==> <java.lang.String: boolean endsWith(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.util.EfficientStringUtils: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: i2 = virtualinvoke r0.<java.lang.String: int length()>() in <com.atlassian.plugin.util.EfficientStringUtils: boolean endsWith(java.lang.String,java.lang.String[])> ==> <java.lang.String: int length()>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String,int)>(r2, i2) in <com.atlassian.plugin.util.EfficientStringUtils: boolean endsWith(java.lang.String,java.lang.String[])> ==> <java.lang.String: boolean startsWith(java.lang.String,int)>
VIRTUAL edge: $i1 = virtualinvoke r2.<java.lang.String: int length()>() in <com.atlassian.plugin.util.EfficientStringUtils: boolean endsWith(java.lang.String,java.lang.String[])> ==> <java.lang.String: int length()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.store.DefaultStoredPluginStateAccessor: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.atlassian.plugin.manager.PluginPersistentStateStore: com.atlassian.plugin.manager.PluginPersistentState load()>() in <com.atlassian.plugin.manager.store.DefaultStoredPluginStateAccessor: com.atlassian.plugin.StoredPluginState get()> ==> <com.atlassian.plugin.manager.store.MemoryPluginPersistentStateStore: com.atlassian.plugin.manager.PluginPersistentState load()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.atlassian.plugin.manager.PluginPersistentStateStore: com.atlassian.plugin.manager.PluginPersistentState load()>() in <com.atlassian.plugin.manager.store.DefaultStoredPluginStateAccessor: com.atlassian.plugin.StoredPluginState get()> ==> <com.atlassian.plugin.manager.store.LoadOnlyPluginPersistentStateStore: com.atlassian.plugin.manager.PluginPersistentState load()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.atlassian.plugin.manager.PluginPersistentStateStore: com.atlassian.plugin.manager.PluginPersistentState load()>() in <com.atlassian.plugin.manager.store.DefaultStoredPluginStateAccessor: com.atlassian.plugin.StoredPluginState get()> ==> <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore: com.atlassian.plugin.manager.PluginPersistentState load()>
INTERFACE edge: $r3 = interfaceinvoke r1.<com.atlassian.plugin.ModuleDescriptorFactory: java.lang.Class getModuleDescriptorClass(java.lang.String)>(r2) in <com.atlassian.plugin.predicate.ModuleDescriptorOfTypePredicate: void <init>(com.atlassian.plugin.ModuleDescriptorFactory,java.lang.String)> ==> <com.atlassian.plugin.DefaultModuleDescriptorFactory: java.lang.Class getModuleDescriptorClass(java.lang.String)>
INTERFACE edge: $r3 = interfaceinvoke r1.<com.atlassian.plugin.ModuleDescriptorFactory: java.lang.Class getModuleDescriptorClass(java.lang.String)>(r2) in <com.atlassian.plugin.predicate.ModuleDescriptorOfTypePredicate: void <init>(com.atlassian.plugin.ModuleDescriptorFactory,java.lang.String)> ==> <com.atlassian.plugin.descriptors.ChainModuleDescriptorFactory: java.lang.Class getModuleDescriptorClass(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.predicate.ModuleDescriptorOfClassPredicate: void <init>(java.lang.Class)>($r3) in <com.atlassian.plugin.predicate.ModuleDescriptorOfTypePredicate: void <init>(com.atlassian.plugin.ModuleDescriptorFactory,java.lang.String)> ==> <com.atlassian.plugin.predicate.ModuleDescriptorOfClassPredicate: void <init>(java.lang.Class)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.predicate.ModuleDescriptorOfClassPredicate: void <init>(java.lang.Class)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.predicate.ModuleDescriptorOfClassPredicate: void <init>(java.lang.Class[])> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke $r4.<java.util.stream.Stream: boolean anyMatch(java.util.function.Predicate)>($r5) in <com.atlassian.plugin.predicate.ModuleDescriptorOfClassPredicate: boolean test(com.atlassian.plugin.ModuleDescriptor)> ==> <java.util.stream.Stream: boolean anyMatch(java.util.function.Predicate)>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.atlassian.plugin.predicate.ModuleDescriptorOfClassPredicate: boolean test(com.atlassian.plugin.ModuleDescriptor)>($r2) in <com.atlassian.plugin.predicate.ModuleDescriptorOfClassPredicate: boolean test(java.lang.Object)> ==> <com.atlassian.plugin.predicate.ModuleDescriptorOfClassPredicate: boolean test(com.atlassian.plugin.ModuleDescriptor)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Class: boolean isInstance(java.lang.Object)>(r1) in <com.atlassian.plugin.predicate.ModuleDescriptorOfClassPredicate: boolean lambda$test$0(com.atlassian.plugin.ModuleDescriptor,java.lang.Class)> ==> <java.lang.Class: boolean isInstance(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<com.google.common.collect.ForwardingObject: void <init>()>() in <com.atlassian.plugin.loaders.ForwardingPluginLoader: void <init>(com.atlassian.plugin.loaders.PluginLoader)> ==> <com.google.common.collect.ForwardingObject: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.atlassian.plugin.loaders.ForwardingPluginLoader: com.atlassian.plugin.loaders.PluginLoader delegate()>() in <com.atlassian.plugin.loaders.ForwardingPluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.ForwardingPluginLoader: com.atlassian.plugin.loaders.PluginLoader delegate()>
INTERFACE edge: $r3 = interfaceinvoke $r1.<com.atlassian.plugin.loaders.PluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)>(r2) in <com.atlassian.plugin.loaders.ForwardingPluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.ForwardingPluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)>
INTERFACE edge: $r3 = interfaceinvoke $r1.<com.atlassian.plugin.loaders.PluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)>(r2) in <com.atlassian.plugin.loaders.ForwardingPluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)>
INTERFACE edge: $r3 = interfaceinvoke $r1.<com.atlassian.plugin.loaders.PluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)>(r2) in <com.atlassian.plugin.loaders.ForwardingPluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)>
INTERFACE edge: $r3 = interfaceinvoke $r1.<com.atlassian.plugin.loaders.PluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)>(r2) in <com.atlassian.plugin.loaders.ForwardingPluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.SinglePluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)>
INTERFACE edge: $r3 = interfaceinvoke $r1.<com.atlassian.plugin.loaders.PluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)>(r2) in <com.atlassian.plugin.loaders.ForwardingPluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.ClassPathPluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.atlassian.plugin.loaders.ForwardingPluginLoader: com.atlassian.plugin.loaders.PluginLoader delegate()>() in <com.atlassian.plugin.loaders.ForwardingPluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.ForwardingPluginLoader: com.atlassian.plugin.loaders.PluginLoader delegate()>
INTERFACE edge: $r3 = interfaceinvoke $r1.<com.atlassian.plugin.loaders.PluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)>(r2) in <com.atlassian.plugin.loaders.ForwardingPluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.ForwardingPluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)>
INTERFACE edge: $r3 = interfaceinvoke $r1.<com.atlassian.plugin.loaders.PluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)>(r2) in <com.atlassian.plugin.loaders.ForwardingPluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)>
INTERFACE edge: $r3 = interfaceinvoke $r1.<com.atlassian.plugin.loaders.PluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)>(r2) in <com.atlassian.plugin.loaders.ForwardingPluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)>
INTERFACE edge: $r3 = interfaceinvoke $r1.<com.atlassian.plugin.loaders.PluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)>(r2) in <com.atlassian.plugin.loaders.ForwardingPluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.SinglePluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)>
INTERFACE edge: $r3 = interfaceinvoke $r1.<com.atlassian.plugin.loaders.PluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)>(r2) in <com.atlassian.plugin.loaders.ForwardingPluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.ClassPathPluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.atlassian.plugin.loaders.ForwardingPluginLoader: com.atlassian.plugin.loaders.PluginLoader delegate()>() in <com.atlassian.plugin.loaders.ForwardingPluginLoader: boolean supportsAddition()> ==> <com.atlassian.plugin.loaders.ForwardingPluginLoader: com.atlassian.plugin.loaders.PluginLoader delegate()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.atlassian.plugin.loaders.PluginLoader: boolean supportsAddition()>() in <com.atlassian.plugin.loaders.ForwardingPluginLoader: boolean supportsAddition()> ==> <com.atlassian.plugin.loaders.ForwardingPluginLoader: boolean supportsAddition()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.atlassian.plugin.loaders.PluginLoader: boolean supportsAddition()>() in <com.atlassian.plugin.loaders.ForwardingPluginLoader: boolean supportsAddition()> ==> <com.atlassian.plugin.loaders.ScanningPluginLoader: boolean supportsAddition()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.atlassian.plugin.loaders.PluginLoader: boolean supportsAddition()>() in <com.atlassian.plugin.loaders.ForwardingPluginLoader: boolean supportsAddition()> ==> <com.atlassian.plugin.loaders.SinglePluginLoader: boolean supportsAddition()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.atlassian.plugin.loaders.PluginLoader: boolean supportsAddition()>() in <com.atlassian.plugin.loaders.ForwardingPluginLoader: boolean supportsAddition()> ==> <com.atlassian.plugin.loaders.ClassPathPluginLoader: boolean supportsAddition()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.atlassian.plugin.loaders.ForwardingPluginLoader: com.atlassian.plugin.loaders.PluginLoader delegate()>() in <com.atlassian.plugin.loaders.ForwardingPluginLoader: boolean supportsRemoval()> ==> <com.atlassian.plugin.loaders.ForwardingPluginLoader: com.atlassian.plugin.loaders.PluginLoader delegate()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.atlassian.plugin.loaders.PluginLoader: boolean supportsRemoval()>() in <com.atlassian.plugin.loaders.ForwardingPluginLoader: boolean supportsRemoval()> ==> <com.atlassian.plugin.loaders.ForwardingPluginLoader: boolean supportsRemoval()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.atlassian.plugin.loaders.PluginLoader: boolean supportsRemoval()>() in <com.atlassian.plugin.loaders.ForwardingPluginLoader: boolean supportsRemoval()> ==> <com.atlassian.plugin.loaders.ScanningPluginLoader: boolean supportsRemoval()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.atlassian.plugin.loaders.PluginLoader: boolean supportsRemoval()>() in <com.atlassian.plugin.loaders.ForwardingPluginLoader: boolean supportsRemoval()> ==> <com.atlassian.plugin.loaders.SinglePluginLoader: boolean supportsRemoval()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.atlassian.plugin.loaders.PluginLoader: boolean supportsRemoval()>() in <com.atlassian.plugin.loaders.ForwardingPluginLoader: boolean supportsRemoval()> ==> <com.atlassian.plugin.loaders.ClassPathPluginLoader: boolean supportsRemoval()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.atlassian.plugin.loaders.ForwardingPluginLoader: com.atlassian.plugin.loaders.PluginLoader delegate()>() in <com.atlassian.plugin.loaders.ForwardingPluginLoader: void removePlugin(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.loaders.ForwardingPluginLoader: com.atlassian.plugin.loaders.PluginLoader delegate()>
INTERFACE edge: interfaceinvoke $r1.<com.atlassian.plugin.loaders.PluginLoader: void removePlugin(com.atlassian.plugin.Plugin)>(r2) in <com.atlassian.plugin.loaders.ForwardingPluginLoader: void removePlugin(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.loaders.ForwardingPluginLoader: void removePlugin(com.atlassian.plugin.Plugin)>
INTERFACE edge: interfaceinvoke $r1.<com.atlassian.plugin.loaders.PluginLoader: void removePlugin(com.atlassian.plugin.Plugin)>(r2) in <com.atlassian.plugin.loaders.ForwardingPluginLoader: void removePlugin(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.loaders.ScanningPluginLoader: void removePlugin(com.atlassian.plugin.Plugin)>
INTERFACE edge: interfaceinvoke $r1.<com.atlassian.plugin.loaders.PluginLoader: void removePlugin(com.atlassian.plugin.Plugin)>(r2) in <com.atlassian.plugin.loaders.ForwardingPluginLoader: void removePlugin(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: void removePlugin(com.atlassian.plugin.Plugin)>
INTERFACE edge: interfaceinvoke $r1.<com.atlassian.plugin.loaders.PluginLoader: void removePlugin(com.atlassian.plugin.Plugin)>(r2) in <com.atlassian.plugin.loaders.ForwardingPluginLoader: void removePlugin(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.loaders.SinglePluginLoader: void removePlugin(com.atlassian.plugin.Plugin)>
INTERFACE edge: interfaceinvoke $r1.<com.atlassian.plugin.loaders.PluginLoader: void removePlugin(com.atlassian.plugin.Plugin)>(r2) in <com.atlassian.plugin.loaders.ForwardingPluginLoader: void removePlugin(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.loaders.ClassPathPluginLoader: void removePlugin(com.atlassian.plugin.Plugin)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.atlassian.plugin.loaders.ForwardingPluginLoader: com.atlassian.plugin.loaders.PluginLoader delegate()>() in <com.atlassian.plugin.loaders.ForwardingPluginLoader: boolean isDynamicPluginLoader()> ==> <com.atlassian.plugin.loaders.ForwardingPluginLoader: com.atlassian.plugin.loaders.PluginLoader delegate()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.atlassian.plugin.loaders.PluginLoader: boolean isDynamicPluginLoader()>() in <com.atlassian.plugin.loaders.ForwardingPluginLoader: boolean isDynamicPluginLoader()> ==> <com.atlassian.plugin.loaders.ForwardingPluginLoader: boolean isDynamicPluginLoader()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.atlassian.plugin.loaders.PluginLoader: boolean isDynamicPluginLoader()>() in <com.atlassian.plugin.loaders.ForwardingPluginLoader: boolean isDynamicPluginLoader()> ==> <com.atlassian.plugin.loaders.ScanningPluginLoader: boolean isDynamicPluginLoader()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.atlassian.plugin.loaders.PluginLoader: boolean isDynamicPluginLoader()>() in <com.atlassian.plugin.loaders.ForwardingPluginLoader: boolean isDynamicPluginLoader()> ==> <com.atlassian.plugin.loaders.SinglePluginLoader: boolean isDynamicPluginLoader()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.atlassian.plugin.loaders.PluginLoader: boolean isDynamicPluginLoader()>() in <com.atlassian.plugin.loaders.ForwardingPluginLoader: boolean isDynamicPluginLoader()> ==> <com.atlassian.plugin.loaders.ClassPathPluginLoader: boolean isDynamicPluginLoader()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.atlassian.plugin.loaders.ForwardingPluginLoader: com.atlassian.plugin.loaders.PluginLoader delegate()>() in <com.atlassian.plugin.loaders.ForwardingPluginLoader: com.atlassian.plugin.ModuleDescriptor createModule(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.ForwardingPluginLoader: com.atlassian.plugin.loaders.PluginLoader delegate()>
INTERFACE edge: $r5 = interfaceinvoke $r1.<com.atlassian.plugin.loaders.PluginLoader: com.atlassian.plugin.ModuleDescriptor createModule(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)>(r2, r3, r4) in <com.atlassian.plugin.loaders.ForwardingPluginLoader: com.atlassian.plugin.ModuleDescriptor createModule(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.ForwardingPluginLoader: com.atlassian.plugin.ModuleDescriptor createModule(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)>
INTERFACE edge: $r5 = interfaceinvoke $r1.<com.atlassian.plugin.loaders.PluginLoader: com.atlassian.plugin.ModuleDescriptor createModule(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)>(r2, r3, r4) in <com.atlassian.plugin.loaders.ForwardingPluginLoader: com.atlassian.plugin.ModuleDescriptor createModule(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.ScanningPluginLoader: com.atlassian.plugin.ModuleDescriptor createModule(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)>
INTERFACE edge: $r5 = interfaceinvoke $r1.<com.atlassian.plugin.loaders.PluginLoader: com.atlassian.plugin.ModuleDescriptor createModule(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)>(r2, r3, r4) in <com.atlassian.plugin.loaders.ForwardingPluginLoader: com.atlassian.plugin.ModuleDescriptor createModule(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.SinglePluginLoader: com.atlassian.plugin.ModuleDescriptor createModule(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)>
INTERFACE edge: $r5 = interfaceinvoke $r1.<com.atlassian.plugin.loaders.PluginLoader: com.atlassian.plugin.ModuleDescriptor createModule(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)>(r2, r3, r4) in <com.atlassian.plugin.loaders.ForwardingPluginLoader: com.atlassian.plugin.ModuleDescriptor createModule(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.ClassPathPluginLoader: com.atlassian.plugin.ModuleDescriptor createModule(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.atlassian.plugin.loaders.ForwardingPluginLoader: boolean isDynamicPluginLoader()>() in <com.atlassian.plugin.loaders.ForwardingPluginLoader: java.lang.String canLoad(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.loaders.ForwardingPluginLoader: boolean isDynamicPluginLoader()>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.atlassian.plugin.loaders.ForwardingPluginLoader: com.atlassian.plugin.loaders.PluginLoader delegate()>() in <com.atlassian.plugin.loaders.ForwardingPluginLoader: java.lang.String canLoad(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.loaders.ForwardingPluginLoader: com.atlassian.plugin.loaders.PluginLoader delegate()>
INTERFACE edge: $r5 = interfaceinvoke $r4.<com.atlassian.plugin.loaders.DynamicPluginLoader: java.lang.String canLoad(com.atlassian.plugin.PluginArtifact)>(r3) in <com.atlassian.plugin.loaders.ForwardingPluginLoader: java.lang.String canLoad(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.loaders.ForwardingPluginLoader: java.lang.String canLoad(com.atlassian.plugin.PluginArtifact)>
INTERFACE edge: $r5 = interfaceinvoke $r4.<com.atlassian.plugin.loaders.DynamicPluginLoader: java.lang.String canLoad(com.atlassian.plugin.PluginArtifact)>(r3) in <com.atlassian.plugin.loaders.ForwardingPluginLoader: java.lang.String canLoad(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.String canLoad(com.atlassian.plugin.PluginArtifact)>
SPECIAL edge: specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Should not call on non-dynamic plugin loader") in <com.atlassian.plugin.loaders.ForwardingPluginLoader: java.lang.String canLoad(com.atlassian.plugin.PluginArtifact)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
VIRTUAL edge: r1 = virtualinvoke r0.<com.atlassian.plugin.loaders.ForwardingPluginLoader: com.atlassian.plugin.loaders.PluginLoader delegate()>() in <com.atlassian.plugin.loaders.ForwardingPluginLoader: void discardPlugin(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.loaders.ForwardingPluginLoader: com.atlassian.plugin.loaders.PluginLoader delegate()>
INTERFACE edge: interfaceinvoke $r7.<com.atlassian.plugin.loaders.DiscardablePluginLoader: void discardPlugin(com.atlassian.plugin.Plugin)>(r2) in <com.atlassian.plugin.loaders.ForwardingPluginLoader: void discardPlugin(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.loaders.ForwardingPluginLoader: void discardPlugin(com.atlassian.plugin.Plugin)>
INTERFACE edge: interfaceinvoke $r7.<com.atlassian.plugin.loaders.DiscardablePluginLoader: void discardPlugin(com.atlassian.plugin.Plugin)>(r2) in <com.atlassian.plugin.loaders.ForwardingPluginLoader: void discardPlugin(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.loaders.ScanningPluginLoader: void discardPlugin(com.atlassian.plugin.Plugin)>
INTERFACE edge: interfaceinvoke $r7.<com.atlassian.plugin.loaders.DiscardablePluginLoader: void discardPlugin(com.atlassian.plugin.Plugin)>(r2) in <com.atlassian.plugin.loaders.ForwardingPluginLoader: void discardPlugin(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: void discardPlugin(com.atlassian.plugin.Plugin)>
INTERFACE edge: $r4 = interfaceinvoke r2.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.loaders.ForwardingPluginLoader: void discardPlugin(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r4 = interfaceinvoke r2.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.loaders.ForwardingPluginLoader: void discardPlugin(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
INTERFACE edge: $r5 = interfaceinvoke r2.<com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginInformation getPluginInformation()>() in <com.atlassian.plugin.loaders.ForwardingPluginLoader: void discardPlugin(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: com.atlassian.plugin.PluginInformation getPluginInformation()>
INTERFACE edge: $r5 = interfaceinvoke r2.<com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginInformation getPluginInformation()>() in <com.atlassian.plugin.loaders.ForwardingPluginLoader: void discardPlugin(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginInformation getPluginInformation()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<com.atlassian.plugin.PluginInformation: java.lang.String getVersion()>() in <com.atlassian.plugin.loaders.ForwardingPluginLoader: void discardPlugin(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.PluginInformation: java.lang.String getVersion()>
INTERFACE edge: interfaceinvoke $r3.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Ignoring discardPlugin({}, version {}) as delegate is not a DiscardablePluginLoader", $r4, $r6) in <com.atlassian.plugin.loaders.ForwardingPluginLoader: void discardPlugin(com.atlassian.plugin.Plugin)> ==> <org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.descriptors.ChainModuleDescriptorFactory: void <init>(com.atlassian.plugin.ModuleDescriptorFactory[])> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $i0 = interfaceinvoke r1.<java.util.Collection: int size()>() in <com.atlassian.plugin.descriptors.ChainModuleDescriptorFactory: void <init>(java.util.Collection)> ==> <java.util.HashSet: int size()>
INTERFACE edge: $i0 = interfaceinvoke r1.<java.util.Collection: int size()>() in <com.atlassian.plugin.descriptors.ChainModuleDescriptorFactory: void <init>(java.util.Collection)> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i0 = interfaceinvoke r1.<java.util.Collection: int size()>() in <com.atlassian.plugin.descriptors.ChainModuleDescriptorFactory: void <init>(java.util.Collection)> ==> <java.util.ArrayDeque: int size()>
INTERFACE edge: $i0 = interfaceinvoke r1.<java.util.Collection: int size()>() in <com.atlassian.plugin.descriptors.ChainModuleDescriptorFactory: void <init>(java.util.Collection)> ==> <java.util.concurrent.CopyOnWriteArraySet: int size()>
INTERFACE edge: $i0 = interfaceinvoke r1.<java.util.Collection: int size()>() in <com.atlassian.plugin.descriptors.ChainModuleDescriptorFactory: void <init>(java.util.Collection)> ==> <java.util.TreeSet: int size()>
INTERFACE edge: $i0 = interfaceinvoke r1.<java.util.Collection: int size()>() in <com.atlassian.plugin.descriptors.ChainModuleDescriptorFactory: void <init>(java.util.Collection)> ==> <java.util.ArrayList: int size()>
INTERFACE edge: $r3 = interfaceinvoke r1.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r2) in <com.atlassian.plugin.descriptors.ChainModuleDescriptorFactory: void <init>(java.util.Collection)> ==> <java.util.AbstractCollection: java.lang.Object[] toArray(java.lang.Object[])>
INTERFACE edge: $r3 = interfaceinvoke r1.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r2) in <com.atlassian.plugin.descriptors.ChainModuleDescriptorFactory: void <init>(java.util.Collection)> ==> <java.util.LinkedList: java.lang.Object[] toArray(java.lang.Object[])>
INTERFACE edge: $r3 = interfaceinvoke r1.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r2) in <com.atlassian.plugin.descriptors.ChainModuleDescriptorFactory: void <init>(java.util.Collection)> ==> <java.util.ArrayDeque: java.lang.Object[] toArray(java.lang.Object[])>
INTERFACE edge: $r3 = interfaceinvoke r1.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r2) in <com.atlassian.plugin.descriptors.ChainModuleDescriptorFactory: void <init>(java.util.Collection)> ==> <java.util.concurrent.CopyOnWriteArraySet: java.lang.Object[] toArray(java.lang.Object[])>
INTERFACE edge: $r3 = interfaceinvoke r1.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r2) in <com.atlassian.plugin.descriptors.ChainModuleDescriptorFactory: void <init>(java.util.Collection)> ==> <java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.descriptors.ChainModuleDescriptorFactory: void <init>(com.atlassian.plugin.ModuleDescriptorFactory[])>($r4) in <com.atlassian.plugin.descriptors.ChainModuleDescriptorFactory: void <init>(java.util.Collection)> ==> <com.atlassian.plugin.descriptors.ChainModuleDescriptorFactory: void <init>(com.atlassian.plugin.ModuleDescriptorFactory[])>
INTERFACE edge: $z0 = interfaceinvoke r2.<com.atlassian.plugin.ModuleDescriptorFactory: boolean hasModuleDescriptor(java.lang.String)>(r3) in <com.atlassian.plugin.descriptors.ChainModuleDescriptorFactory: com.atlassian.plugin.ModuleDescriptor getModuleDescriptor(java.lang.String)> ==> <com.atlassian.plugin.DefaultModuleDescriptorFactory: boolean hasModuleDescriptor(java.lang.String)>
INTERFACE edge: $z0 = interfaceinvoke r2.<com.atlassian.plugin.ModuleDescriptorFactory: boolean hasModuleDescriptor(java.lang.String)>(r3) in <com.atlassian.plugin.descriptors.ChainModuleDescriptorFactory: com.atlassian.plugin.ModuleDescriptor getModuleDescriptor(java.lang.String)> ==> <com.atlassian.plugin.descriptors.ChainModuleDescriptorFactory: boolean hasModuleDescriptor(java.lang.String)>
INTERFACE edge: $r4 = interfaceinvoke r2.<com.atlassian.plugin.ModuleDescriptorFactory: com.atlassian.plugin.ModuleDescriptor getModuleDescriptor(java.lang.String)>(r3) in <com.atlassian.plugin.descriptors.ChainModuleDescriptorFactory: com.atlassian.plugin.ModuleDescriptor getModuleDescriptor(java.lang.String)> ==> <com.atlassian.plugin.DefaultModuleDescriptorFactory: com.atlassian.plugin.ModuleDescriptor getModuleDescriptor(java.lang.String)>
INTERFACE edge: $r4 = interfaceinvoke r2.<com.atlassian.plugin.ModuleDescriptorFactory: com.atlassian.plugin.ModuleDescriptor getModuleDescriptor(java.lang.String)>(r3) in <com.atlassian.plugin.descriptors.ChainModuleDescriptorFactory: com.atlassian.plugin.ModuleDescriptor getModuleDescriptor(java.lang.String)> ==> <com.atlassian.plugin.descriptors.ChainModuleDescriptorFactory: com.atlassian.plugin.ModuleDescriptor getModuleDescriptor(java.lang.String)>
INTERFACE edge: $r4 = interfaceinvoke r2.<com.atlassian.plugin.ModuleDescriptorFactory: com.atlassian.plugin.ModuleDescriptor getModuleDescriptor(java.lang.String)>(r3) in <com.atlassian.plugin.descriptors.ChainModuleDescriptorFactory: com.atlassian.plugin.ModuleDescriptor getModuleDescriptor(java.lang.String)> ==> <com.atlassian.plugin.ModuleDescriptorFactory: com.atlassian.plugin.ModuleDescriptor getModuleDescriptor(java.lang.String)>
INTERFACE edge: $z0 = interfaceinvoke r2.<com.atlassian.plugin.ModuleDescriptorFactory: boolean hasModuleDescriptor(java.lang.String)>(r3) in <com.atlassian.plugin.descriptors.ChainModuleDescriptorFactory: boolean hasModuleDescriptor(java.lang.String)> ==> <com.atlassian.plugin.DefaultModuleDescriptorFactory: boolean hasModuleDescriptor(java.lang.String)>
INTERFACE edge: $z0 = interfaceinvoke r2.<com.atlassian.plugin.ModuleDescriptorFactory: boolean hasModuleDescriptor(java.lang.String)>(r3) in <com.atlassian.plugin.descriptors.ChainModuleDescriptorFactory: boolean hasModuleDescriptor(java.lang.String)> ==> <com.atlassian.plugin.descriptors.ChainModuleDescriptorFactory: boolean hasModuleDescriptor(java.lang.String)>
INTERFACE edge: r4 = interfaceinvoke r2.<com.atlassian.plugin.ModuleDescriptorFactory: java.lang.Class getModuleDescriptorClass(java.lang.String)>(r3) in <com.atlassian.plugin.descriptors.ChainModuleDescriptorFactory: java.lang.Class getModuleDescriptorClass(java.lang.String)> ==> <com.atlassian.plugin.DefaultModuleDescriptorFactory: java.lang.Class getModuleDescriptorClass(java.lang.String)>
INTERFACE edge: r4 = interfaceinvoke r2.<com.atlassian.plugin.ModuleDescriptorFactory: java.lang.Class getModuleDescriptorClass(java.lang.String)>(r3) in <com.atlassian.plugin.descriptors.ChainModuleDescriptorFactory: java.lang.Class getModuleDescriptorClass(java.lang.String)> ==> <com.atlassian.plugin.descriptors.ChainModuleDescriptorFactory: java.lang.Class getModuleDescriptorClass(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.parsers.ModuleReader: void <init>(org.dom4j.Element)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.parsers.DefaultSafeModeCommandLineArgumentsFactory: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.parsers.DefaultSafeModeCommandLineArgumentsFactory$1: void <init>(com.atlassian.plugin.parsers.DefaultSafeModeCommandLineArgumentsFactory)>(r0) in <com.atlassian.plugin.parsers.DefaultSafeModeCommandLineArgumentsFactory: void <init>()> ==> <com.atlassian.plugin.parsers.DefaultSafeModeCommandLineArgumentsFactory$1: void <init>(com.atlassian.plugin.parsers.DefaultSafeModeCommandLineArgumentsFactory)>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: void <init>()>() in <com.atlassian.plugin.metadata.DefaultPluginMetadataManager: void <init>()> ==> <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: void <init>()>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.metadata.DefaultPluginMetadataManager: void <init>(com.atlassian.plugin.metadata.PluginMetadata)>($r1) in <com.atlassian.plugin.metadata.DefaultPluginMetadataManager: void <init>()> ==> <com.atlassian.plugin.metadata.DefaultPluginMetadataManager: void <init>(com.atlassian.plugin.metadata.PluginMetadata)>
STATIC edge: $r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "metadata") in <com.atlassian.plugin.metadata.DefaultPluginMetadataManager: void <init>(com.atlassian.plugin.metadata.PluginMetadata)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: boolean isBundledPlugin()>() in <com.atlassian.plugin.metadata.DefaultPluginMetadataManager: boolean isUserInstalled(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: boolean isBundledPlugin()>
INTERFACE edge: $z1 = interfaceinvoke $r3.<com.atlassian.plugin.metadata.PluginMetadata: boolean applicationProvided(com.atlassian.plugin.Plugin)>(r0) in <com.atlassian.plugin.metadata.DefaultPluginMetadataManager: boolean isUserInstalled(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: boolean applicationProvided(com.atlassian.plugin.Plugin)>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.atlassian.plugin.metadata.DefaultPluginMetadataManager: boolean isUserInstalled(com.atlassian.plugin.Plugin)>(r1) in <com.atlassian.plugin.metadata.DefaultPluginMetadataManager: boolean isSystemProvided(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.metadata.DefaultPluginMetadataManager: boolean isUserInstalled(com.atlassian.plugin.Plugin)>
SPECIAL edge: $z0 = specialinvoke r2.<com.atlassian.plugin.metadata.DefaultPluginMetadataManager: boolean optionalAccordingToHostApplication(com.atlassian.plugin.Plugin)>(r0) in <com.atlassian.plugin.metadata.DefaultPluginMetadataManager: boolean isOptional(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.metadata.DefaultPluginMetadataManager: boolean optionalAccordingToHostApplication(com.atlassian.plugin.Plugin)>
SPECIAL edge: $z2 = specialinvoke r2.<com.atlassian.plugin.metadata.DefaultPluginMetadataManager: boolean optionalAccordingToHostApplication(com.atlassian.plugin.ModuleDescriptor)>(r6) in <com.atlassian.plugin.metadata.DefaultPluginMetadataManager: boolean isOptional(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.metadata.DefaultPluginMetadataManager: boolean optionalAccordingToHostApplication(com.atlassian.plugin.ModuleDescriptor)>
INTERFACE edge: $r3 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: java.util.Collection getModuleDescriptors()>() in <com.atlassian.plugin.metadata.DefaultPluginMetadataManager: boolean isOptional(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.util.Collection getModuleDescriptors()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.metadata.DefaultPluginMetadataManager: boolean isOptional(com.atlassian.plugin.Plugin)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.metadata.DefaultPluginMetadataManager: boolean isOptional(com.atlassian.plugin.Plugin)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.metadata.DefaultPluginMetadataManager: boolean isOptional(com.atlassian.plugin.Plugin)> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.metadata.DefaultPluginMetadataManager: boolean isOptional(com.atlassian.plugin.Plugin)> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.metadata.DefaultPluginMetadataManager: boolean isOptional(com.atlassian.plugin.Plugin)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.metadata.DefaultPluginMetadataManager: boolean isOptional(com.atlassian.plugin.Plugin)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
SPECIAL edge: $z0 = specialinvoke r2.<com.atlassian.plugin.metadata.DefaultPluginMetadataManager: boolean optionalAccordingToHostApplication(com.atlassian.plugin.ModuleDescriptor)>(r0) in <com.atlassian.plugin.metadata.DefaultPluginMetadataManager: boolean isOptional(com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.metadata.DefaultPluginMetadataManager: boolean optionalAccordingToHostApplication(com.atlassian.plugin.ModuleDescriptor)>
SPECIAL edge: $z1 = specialinvoke r2.<com.atlassian.plugin.metadata.DefaultPluginMetadataManager: boolean optionalAccordingToModuleDescriptorType(com.atlassian.plugin.ModuleDescriptor)>(r0) in <com.atlassian.plugin.metadata.DefaultPluginMetadataManager: boolean isOptional(com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.metadata.DefaultPluginMetadataManager: boolean optionalAccordingToModuleDescriptorType(com.atlassian.plugin.ModuleDescriptor)>
SPECIAL edge: $z2 = specialinvoke r2.<com.atlassian.plugin.metadata.DefaultPluginMetadataManager: boolean optionalAccordingToHostApplication(com.atlassian.plugin.Plugin)>($r3) in <com.atlassian.plugin.metadata.DefaultPluginMetadataManager: boolean isOptional(com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.metadata.DefaultPluginMetadataManager: boolean optionalAccordingToHostApplication(com.atlassian.plugin.Plugin)>
INTERFACE edge: $r3 = interfaceinvoke r0.<com.atlassian.plugin.ModuleDescriptor: com.atlassian.plugin.Plugin getPlugin()>() in <com.atlassian.plugin.metadata.DefaultPluginMetadataManager: boolean isOptional(com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.ModuleDescriptor: com.atlassian.plugin.Plugin getPlugin()>
INTERFACE edge: $r3 = interfaceinvoke r0.<com.atlassian.plugin.ModuleDescriptor: com.atlassian.plugin.Plugin getPlugin()>() in <com.atlassian.plugin.metadata.DefaultPluginMetadataManager: boolean isOptional(com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: com.atlassian.plugin.Plugin getPlugin()>
SPECIAL edge: specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>($r3) in <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: void <init>(java.lang.String)> ==> <java.io.File: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r4.<com.atlassian.plugin.parsers.XmlDescriptorParserFactory: void <init>()>() in <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: void <init>(java.lang.String)> ==> <com.atlassian.plugin.parsers.XmlDescriptorParserFactory: void <init>()>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.factories.LegacyDynamicPluginFactory: void <init>(java.lang.String,java.io.File,com.atlassian.plugin.parsers.XmlDescriptorParserFactory)>(r1, $r2, $r4) in <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: void <init>(java.lang.String)> ==> <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: void <init>(java.lang.String,java.io.File,com.atlassian.plugin.parsers.XmlDescriptorParserFactory)>
SPECIAL edge: specialinvoke $r3.<com.atlassian.plugin.parsers.XmlDescriptorParserFactory: void <init>()>() in <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: void <init>(java.lang.String,java.io.File)> ==> <com.atlassian.plugin.parsers.XmlDescriptorParserFactory: void <init>()>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.factories.LegacyDynamicPluginFactory: void <init>(java.lang.String,java.io.File,com.atlassian.plugin.parsers.XmlDescriptorParserFactory)>(r1, r2, $r3) in <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: void <init>(java.lang.String,java.io.File)> ==> <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: void <init>(java.lang.String,java.io.File,com.atlassian.plugin.parsers.XmlDescriptorParserFactory)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.factories.AbstractPluginFactory: void <init>(com.atlassian.plugin.parsers.DescriptorParserFactory,java.util.Set)>(r1, $r2) in <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: void <init>(java.lang.String,java.io.File,com.atlassian.plugin.parsers.XmlDescriptorParserFactory)> ==> <com.atlassian.plugin.factories.AbstractPluginFactory: void <init>(com.atlassian.plugin.parsers.DescriptorParserFactory,java.util.Set)>
STATIC edge: $r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1) in <com.atlassian.plugin.factories.AbstractPluginFactory: void <init>(com.atlassian.plugin.parsers.DescriptorParserFactory,java.util.Set)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
STATIC edge: $r5 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r4) in <com.atlassian.plugin.factories.AbstractPluginFactory: void <init>(com.atlassian.plugin.parsers.DescriptorParserFactory,java.util.Set)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
INTERFACE edge: r2 = interfaceinvoke r0.<com.atlassian.plugin.PluginArtifact: java.io.File toFile()>() in <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: com.atlassian.plugin.Plugin create(com.atlassian.plugin.PluginArtifact,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.PluginArtifact: java.io.File toFile()>
INTERFACE edge: r2 = interfaceinvoke r0.<com.atlassian.plugin.PluginArtifact: java.io.File toFile()>() in <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: com.atlassian.plugin.Plugin create(com.atlassian.plugin.PluginArtifact,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.JarPluginArtifact: java.io.File toFile()>
INTERFACE edge: r2 = interfaceinvoke r0.<com.atlassian.plugin.PluginArtifact: java.io.File toFile()>() in <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: com.atlassian.plugin.Plugin create(com.atlassian.plugin.PluginArtifact,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.XmlPluginArtifact: java.io.File toFile()>
INTERFACE edge: r23 = interfaceinvoke r0.<com.atlassian.plugin.PluginArtifact: java.io.InputStream getResourceAsStream(java.lang.String)>($r4) in <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: com.atlassian.plugin.Plugin create(com.atlassian.plugin.PluginArtifact,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.PluginArtifact: java.io.InputStream getResourceAsStream(java.lang.String)>
INTERFACE edge: r23 = interfaceinvoke r0.<com.atlassian.plugin.PluginArtifact: java.io.InputStream getResourceAsStream(java.lang.String)>($r4) in <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: com.atlassian.plugin.Plugin create(com.atlassian.plugin.PluginArtifact,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.JarPluginArtifact: java.io.InputStream getResourceAsStream(java.lang.String)>
INTERFACE edge: r23 = interfaceinvoke r0.<com.atlassian.plugin.PluginArtifact: java.io.InputStream getResourceAsStream(java.lang.String)>($r4) in <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: com.atlassian.plugin.Plugin create(com.atlassian.plugin.PluginArtifact,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.XmlPluginArtifact: java.io.InputStream getResourceAsStream(java.lang.String)>
SPECIAL edge: specialinvoke $r30.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: com.atlassian.plugin.Plugin create(com.atlassian.plugin.PluginArtifact,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r14 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No descriptor found in classloader for : ") in <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: com.atlassian.plugin.Plugin create(com.atlassian.plugin.PluginArtifact,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2) in <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: com.atlassian.plugin.Plugin create(com.atlassian.plugin.PluginArtifact,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: com.atlassian.plugin.Plugin create(com.atlassian.plugin.PluginArtifact,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r31.<com.atlassian.plugin.PluginParseException: void <init>(java.lang.String)>($r16) in <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: com.atlassian.plugin.Plugin create(com.atlassian.plugin.PluginArtifact,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.PluginParseException: void <init>(java.lang.String)>
INTERFACE edge: r25 = interfaceinvoke $r5.<com.atlassian.plugin.parsers.DescriptorParserFactory: com.atlassian.plugin.parsers.DescriptorParser getInstance(java.io.InputStream,java.util.Set)>(r23, $r6) in <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: com.atlassian.plugin.Plugin create(com.atlassian.plugin.PluginArtifact,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.parsers.XmlDescriptorParserFactory: com.atlassian.plugin.parsers.DescriptorParser getInstance(java.io.InputStream,java.util.Set)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>() in <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: com.atlassian.plugin.Plugin create(com.atlassian.plugin.PluginArtifact,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>
SPECIAL edge: specialinvoke $r32.<com.atlassian.plugin.classloader.PluginClassLoader: void <init>(java.io.File,java.lang.ClassLoader,java.io.File)>(r2, $r9, $r10) in <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: com.atlassian.plugin.Plugin create(com.atlassian.plugin.PluginArtifact,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.classloader.PluginClassLoader: void <init>(java.io.File,java.lang.ClassLoader,java.io.File)>
VIRTUAL edge: $r11 = virtualinvoke r3.<com.atlassian.plugin.factories.LegacyDynamicPluginFactory: com.atlassian.plugin.Plugin createPlugin(com.atlassian.plugin.PluginArtifact,com.atlassian.plugin.classloader.PluginClassLoader)>(r0, $r32) in <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: com.atlassian.plugin.Plugin create(com.atlassian.plugin.PluginArtifact,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: com.atlassian.plugin.Plugin createPlugin(com.atlassian.plugin.PluginArtifact,com.atlassian.plugin.classloader.PluginClassLoader)>
INTERFACE edge: r26 = interfaceinvoke r25.<com.atlassian.plugin.parsers.DescriptorParser: com.atlassian.plugin.Plugin configurePlugin(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin)>(r1, $r11) in <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: com.atlassian.plugin.Plugin create(com.atlassian.plugin.PluginArtifact,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.Plugin configurePlugin(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin)>
VIRTUAL edge: virtualinvoke r24.<com.atlassian.plugin.classloader.PluginClassLoader: void close()>() in <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: com.atlassian.plugin.Plugin create(com.atlassian.plugin.PluginArtifact,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.classloader.PluginClassLoader: void close()>
VIRTUAL edge: virtualinvoke r24.<com.atlassian.plugin.classloader.PluginClassLoader: void close()>() in <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: com.atlassian.plugin.Plugin create(com.atlassian.plugin.PluginArtifact,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.classloader.PluginClassLoader: void close()>
VIRTUAL edge: virtualinvoke r24.<com.atlassian.plugin.classloader.PluginClassLoader: void close()>() in <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: com.atlassian.plugin.Plugin create(com.atlassian.plugin.PluginArtifact,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.classloader.PluginClassLoader: void close()>
SPECIAL edge: specialinvoke $r33.<com.atlassian.plugin.PluginParseException: void <init>(java.lang.Throwable)>($r20) in <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: com.atlassian.plugin.Plugin create(com.atlassian.plugin.PluginArtifact,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.PluginParseException: void <init>(java.lang.Throwable)>
INTERFACE edge: r1 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginArtifact getPluginArtifact()>() in <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: com.atlassian.plugin.ModuleDescriptor createModule(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.impl.AbstractPlugin: com.atlassian.plugin.PluginArtifact getPluginArtifact()>
INTERFACE edge: r1 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginArtifact getPluginArtifact()>() in <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: com.atlassian.plugin.ModuleDescriptor createModule(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginArtifact getPluginArtifact()>
INTERFACE edge: r12 = interfaceinvoke r1.<com.atlassian.plugin.PluginArtifact: java.io.InputStream getResourceAsStream(java.lang.String)>($r3) in <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: com.atlassian.plugin.ModuleDescriptor createModule(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.PluginArtifact: java.io.InputStream getResourceAsStream(java.lang.String)>
INTERFACE edge: r12 = interfaceinvoke r1.<com.atlassian.plugin.PluginArtifact: java.io.InputStream getResourceAsStream(java.lang.String)>($r3) in <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: com.atlassian.plugin.ModuleDescriptor createModule(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.JarPluginArtifact: java.io.InputStream getResourceAsStream(java.lang.String)>
INTERFACE edge: r12 = interfaceinvoke r1.<com.atlassian.plugin.PluginArtifact: java.io.InputStream getResourceAsStream(java.lang.String)>($r3) in <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: com.atlassian.plugin.ModuleDescriptor createModule(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.XmlPluginArtifact: java.io.InputStream getResourceAsStream(java.lang.String)>
INTERFACE edge: r6 = interfaceinvoke $r4.<com.atlassian.plugin.parsers.DescriptorParserFactory: com.atlassian.plugin.parsers.DescriptorParser getInstance(java.io.InputStream,java.util.Set)>(r12, $r5) in <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: com.atlassian.plugin.ModuleDescriptor createModule(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.parsers.XmlDescriptorParserFactory: com.atlassian.plugin.parsers.DescriptorParser getInstance(java.io.InputStream,java.util.Set)>
INTERFACE edge: r9 = interfaceinvoke r6.<com.atlassian.plugin.parsers.DescriptorParser: com.atlassian.plugin.ModuleDescriptor addModule(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin,org.dom4j.Element)>(r7, r0, r8) in <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: com.atlassian.plugin.ModuleDescriptor createModule(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.ModuleDescriptor addModule(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin,org.dom4j.Element)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Integer: int intValue()>() in <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: boolean lambda$static$0(java.lang.Integer)> ==> <java.lang.Integer: int intValue()>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.atlassian.plugin.factories.AbstractPluginFactory: java.lang.String getPluginKeyFromDescriptor(com.atlassian.plugin.PluginArtifact)>(r1) in <com.atlassian.plugin.factories.AbstractPluginFactory: java.lang.String canCreate(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.factories.AbstractPluginFactory: java.lang.String getPluginKeyFromDescriptor(com.atlassian.plugin.PluginArtifact)>
CLINIT edge: $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <com.atlassian.plugin.factories.AbstractPluginFactory: java.lang.String getPluginKeyFromDescriptor(com.atlassian.plugin.PluginArtifact)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r10) in <com.atlassian.plugin.factories.AbstractPluginFactory: java.lang.String getPluginKeyFromDescriptor(com.atlassian.plugin.PluginArtifact)> ==> <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r10) in <com.atlassian.plugin.factories.AbstractPluginFactory: java.lang.String getPluginKeyFromDescriptor(com.atlassian.plugin.PluginArtifact)> ==> <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>
STATIC edge: $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <com.atlassian.plugin.factories.AbstractPluginFactory: java.lang.String getPluginKeyFromDescriptor(com.atlassian.plugin.PluginArtifact)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.classloader.PluginClassLoader: void <init>(java.io.File,java.lang.ClassLoader)>(r1, null) in <com.atlassian.plugin.classloader.PluginClassLoader: void <init>(java.io.File)> ==> <com.atlassian.plugin.classloader.PluginClassLoader: void <init>(java.io.File,java.lang.ClassLoader)>
SPECIAL edge: specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>($r4) in <com.atlassian.plugin.classloader.PluginClassLoader: void <init>(java.io.File,java.lang.ClassLoader)> ==> <java.io.File: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.classloader.PluginClassLoader: void <init>(java.io.File,java.lang.ClassLoader,java.io.File)>(r1, r2, $r3) in <com.atlassian.plugin.classloader.PluginClassLoader: void <init>(java.io.File,java.lang.ClassLoader)> ==> <com.atlassian.plugin.classloader.PluginClassLoader: void <init>(java.io.File,java.lang.ClassLoader,java.io.File)>
SPECIAL edge: specialinvoke r0.<java.lang.ClassLoader: void <init>(java.lang.ClassLoader)>(r1) in <com.atlassian.plugin.classloader.PluginClassLoader: void <init>(java.io.File,java.lang.ClassLoader,java.io.File)> ==> <java.lang.ClassLoader: void <init>(java.lang.ClassLoader)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.classloader.PluginClassLoader: void initialiseOuterJar(java.io.File)>(r6) in <com.atlassian.plugin.classloader.PluginClassLoader: void <init>(java.io.File,java.lang.ClassLoader,java.io.File)> ==> <com.atlassian.plugin.classloader.PluginClassLoader: void initialiseOuterJar(java.io.File)>
SPECIAL edge: specialinvoke $r2.<java.util.HashMap: void <init>()>() in <com.atlassian.plugin.classloader.PluginClassLoader: void <init>(java.io.File,java.lang.ClassLoader,java.io.File)> ==> <java.util.HashMap: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke r3.<java.io.File: boolean exists()>() in <com.atlassian.plugin.classloader.PluginClassLoader: void <init>(java.io.File,java.lang.ClassLoader,java.io.File)> ==> <java.io.File: boolean exists()>
SPECIAL edge: specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r11) in <com.atlassian.plugin.classloader.PluginClassLoader: void <init>(java.io.File,java.lang.ClassLoader,java.io.File)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
VIRTUAL edge: $z1 = virtualinvoke r6.<java.io.File: boolean exists()>() in <com.atlassian.plugin.classloader.PluginClassLoader: void <init>(java.io.File,java.lang.ClassLoader,java.io.File)> ==> <java.io.File: boolean exists()>
SPECIAL edge: specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Plugin jar file must not be null and must exist.") in <com.atlassian.plugin.classloader.PluginClassLoader: void <init>(java.io.File,java.lang.ClassLoader,java.io.File)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r8.<java.util.ArrayList: void <init>()>() in <com.atlassian.plugin.classloader.PluginClassLoader: void <init>(java.io.File,java.lang.ClassLoader,java.io.File)> ==> <java.util.ArrayList: void <init>()>
SPECIAL edge: specialinvoke $r14.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r12) in <com.atlassian.plugin.classloader.PluginClassLoader: void <init>(java.io.File,java.lang.ClassLoader,java.io.File)> ==> <java.lang.IllegalStateException: void <init>(java.lang.Throwable)>
SPECIAL edge: $z0 = specialinvoke r0.<com.atlassian.plugin.classloader.PluginClassLoader: boolean isEntryInPlugin(java.lang.String)>(r1) in <com.atlassian.plugin.classloader.PluginClassLoader: java.net.URL getResource(java.lang.String)> ==> <com.atlassian.plugin.classloader.PluginClassLoader: boolean isEntryInPlugin(java.lang.String)>
SPECIAL edge: $r2 = specialinvoke r0.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>(r1) in <com.atlassian.plugin.classloader.PluginClassLoader: java.net.URL getResource(java.lang.String)> ==> <java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.atlassian.plugin.classloader.PluginClassLoader: java.net.URL getResource(java.lang.String)> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.atlassian.plugin.classloader.PluginClassLoader: java.net.URL getResource(java.lang.String)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.atlassian.plugin.classloader.PluginClassLoader: java.net.URL getResource(java.lang.String)> ==> <java.util.TreeMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.atlassian.plugin.classloader.PluginClassLoader: java.net.URL getResource(java.lang.String)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.atlassian.plugin.classloader.PluginClassLoader: java.net.URL getResource(java.lang.String)> ==> <java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>
SPECIAL edge: $z0 = specialinvoke r0.<com.atlassian.plugin.classloader.PluginClassLoader: boolean isEntryInPlugin(java.lang.String)>(r1) in <com.atlassian.plugin.classloader.PluginClassLoader: java.net.URL getLocalResource(java.lang.String)> ==> <com.atlassian.plugin.classloader.PluginClassLoader: boolean isEntryInPlugin(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.atlassian.plugin.classloader.PluginClassLoader: java.net.URL getResource(java.lang.String)>(r1) in <com.atlassian.plugin.classloader.PluginClassLoader: java.net.URL getLocalResource(java.lang.String)> ==> <com.atlassian.plugin.classloader.PluginClassLoader: java.net.URL getResource(java.lang.String)>
INTERFACE edge: r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.classloader.PluginClassLoader: void close()> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.classloader.PluginClassLoader: void close()> ==> <java.util.ArrayList: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>($r2) in <com.atlassian.plugin.classloader.PluginClassLoader: java.util.List getPluginInnerJars()> ==> <java.util.ArrayList: void <init>(java.util.Collection)>
VIRTUAL edge: $r3 = virtualinvoke r2.<com.atlassian.plugin.loaders.classloading.DeploymentUnit: java.io.File getPath()>() in <com.atlassian.plugin.impl.DefaultDynamicPlugin: void <init>(com.atlassian.plugin.loaders.classloading.DeploymentUnit,com.atlassian.plugin.classloader.PluginClassLoader)> ==> <com.atlassian.plugin.loaders.classloading.DeploymentUnit: java.io.File getPath()>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.JarPluginArtifact: void <init>(java.io.File)>($r3) in <com.atlassian.plugin.impl.DefaultDynamicPlugin: void <init>(com.atlassian.plugin.loaders.classloading.DeploymentUnit,com.atlassian.plugin.classloader.PluginClassLoader)> ==> <com.atlassian.plugin.JarPluginArtifact: void <init>(java.io.File)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.impl.DefaultDynamicPlugin: void <init>(com.atlassian.plugin.PluginArtifact,com.atlassian.plugin.classloader.PluginClassLoader)>($r1, r4) in <com.atlassian.plugin.impl.DefaultDynamicPlugin: void <init>(com.atlassian.plugin.loaders.classloading.DeploymentUnit,com.atlassian.plugin.classloader.PluginClassLoader)> ==> <com.atlassian.plugin.impl.DefaultDynamicPlugin: void <init>(com.atlassian.plugin.PluginArtifact,com.atlassian.plugin.classloader.PluginClassLoader)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.impl.AbstractPlugin: void <init>(com.atlassian.plugin.PluginArtifact)>($r3) in <com.atlassian.plugin.impl.DefaultDynamicPlugin: void <init>(com.atlassian.plugin.PluginArtifact,com.atlassian.plugin.classloader.PluginClassLoader)> ==> <com.atlassian.plugin.impl.AbstractPlugin: void <init>(com.atlassian.plugin.PluginArtifact)>
VIRTUAL edge: r3 = virtualinvoke $r2.<com.atlassian.plugin.classloader.PluginClassLoader: java.lang.Class loadClass(java.lang.String)>(r1) in <com.atlassian.plugin.impl.DefaultDynamicPlugin: java.lang.Class loadClass(java.lang.String,java.lang.Class)> ==> <java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<com.atlassian.plugin.classloader.PluginClassLoader: java.net.URL getResource(java.lang.String)>(r1) in <com.atlassian.plugin.impl.DefaultDynamicPlugin: java.net.URL getResource(java.lang.String)> ==> <com.atlassian.plugin.classloader.PluginClassLoader: java.net.URL getResource(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<com.atlassian.plugin.classloader.PluginClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>(r1) in <com.atlassian.plugin.impl.DefaultDynamicPlugin: java.io.InputStream getResourceAsStream(java.lang.String)> ==> <java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.hostcontainer.DefaultHostContainer: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.lang.Class: java.lang.Object newInstance()>() in <com.atlassian.plugin.hostcontainer.DefaultHostContainer: java.lang.Object create(java.lang.Class)> ==> <java.lang.Class: java.lang.Object newInstance()>
SPECIAL edge: specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>("Unable to instantiate constructor", $r4) in <com.atlassian.plugin.hostcontainer.DefaultHostContainer: java.lang.Object create(java.lang.Class)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>("Unable to access constructor", $r2) in <com.atlassian.plugin.hostcontainer.DefaultHostContainer: java.lang.Object create(java.lang.Class)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.store.MemoryPluginPersistentStateStore: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState toState()>() in <com.atlassian.plugin.manager.store.MemoryPluginPersistentStateStore: void <init>()> ==> <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState toState()>
SPECIAL edge: specialinvoke r0.<java.net.URLConnection: void <init>(java.net.URL)>(r1) in <com.atlassian.plugin.classloader.url.BytesUrlConnection: void <init>(java.net.URL,byte[])> ==> <java.net.URLConnection: void <init>(java.net.URL)>
SPECIAL edge: specialinvoke $r0.<java.io.ByteArrayInputStream: void <init>(byte[])>($r2) in <com.atlassian.plugin.classloader.url.BytesUrlConnection: java.io.InputStream getInputStream()> ==> <java.io.ByteArrayInputStream: void <init>(byte[])>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.DefaultModuleDescriptorFactory: void <init>(com.atlassian.plugin.hostcontainer.HostContainer)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r6.<java.util.ArrayList: void <init>()>() in <com.atlassian.plugin.DefaultModuleDescriptorFactory: void <init>(com.atlassian.plugin.hostcontainer.HostContainer)> ==> <java.util.ArrayList: void <init>()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.atlassian.plugin.DefaultModuleDescriptorFactory: java.lang.Class getModuleDescriptorClass(java.lang.String)> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.atlassian.plugin.DefaultModuleDescriptorFactory: java.lang.Class getModuleDescriptorClass(java.lang.String)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.atlassian.plugin.DefaultModuleDescriptorFactory: java.lang.Class getModuleDescriptorClass(java.lang.String)> ==> <java.util.TreeMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.atlassian.plugin.DefaultModuleDescriptorFactory: java.lang.Class getModuleDescriptorClass(java.lang.String)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.atlassian.plugin.DefaultModuleDescriptorFactory: java.lang.Class getModuleDescriptorClass(java.lang.String)> ==> <java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.atlassian.plugin.DefaultModuleDescriptorFactory: boolean shouldSkipModuleOfType(java.lang.String)>(r1) in <com.atlassian.plugin.DefaultModuleDescriptorFactory: com.atlassian.plugin.ModuleDescriptor getModuleDescriptor(java.lang.String)> ==> <com.atlassian.plugin.DefaultModuleDescriptorFactory: boolean shouldSkipModuleOfType(java.lang.String)>
VIRTUAL edge: r2 = virtualinvoke r0.<com.atlassian.plugin.DefaultModuleDescriptorFactory: java.lang.Class getModuleDescriptorClass(java.lang.String)>(r1) in <com.atlassian.plugin.DefaultModuleDescriptorFactory: com.atlassian.plugin.ModuleDescriptor getModuleDescriptor(java.lang.String)> ==> <com.atlassian.plugin.DefaultModuleDescriptorFactory: java.lang.Class getModuleDescriptorClass(java.lang.String)>
SPECIAL edge: specialinvoke $r12.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.DefaultModuleDescriptorFactory: com.atlassian.plugin.ModuleDescriptor getModuleDescriptor(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r8 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot find ModuleDescriptor class for plugin of type \'") in <com.atlassian.plugin.DefaultModuleDescriptorFactory: com.atlassian.plugin.ModuleDescriptor getModuleDescriptor(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <com.atlassian.plugin.DefaultModuleDescriptorFactory: com.atlassian.plugin.ModuleDescriptor getModuleDescriptor(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'.") in <com.atlassian.plugin.DefaultModuleDescriptorFactory: com.atlassian.plugin.ModuleDescriptor getModuleDescriptor(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.DefaultModuleDescriptorFactory: com.atlassian.plugin.ModuleDescriptor getModuleDescriptor(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r13.<com.atlassian.plugin.PluginParseException: void <init>(java.lang.String)>($r11) in <com.atlassian.plugin.DefaultModuleDescriptorFactory: com.atlassian.plugin.ModuleDescriptor getModuleDescriptor(java.lang.String)> ==> <com.atlassian.plugin.PluginParseException: void <init>(java.lang.String)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<com.atlassian.plugin.hostcontainer.HostContainer: java.lang.Object create(java.lang.Class)>(r2) in <com.atlassian.plugin.DefaultModuleDescriptorFactory: com.atlassian.plugin.ModuleDescriptor getModuleDescriptor(java.lang.String)> ==> <com.atlassian.plugin.hostcontainer.SimpleConstructorHostContainer: java.lang.Object create(java.lang.Class)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<com.atlassian.plugin.hostcontainer.HostContainer: java.lang.Object create(java.lang.Class)>(r2) in <com.atlassian.plugin.DefaultModuleDescriptorFactory: com.atlassian.plugin.ModuleDescriptor getModuleDescriptor(java.lang.String)> ==> <com.atlassian.plugin.hostcontainer.DefaultHostContainer: java.lang.Object create(java.lang.Class)>
INTERFACE edge: $r1 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>() in <com.atlassian.plugin.DefaultModuleDescriptorFactory: void setModuleDescriptors(java.util.Map)> ==> <java.util.HashMap: java.util.Set entrySet()>
INTERFACE edge: $r1 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>() in <com.atlassian.plugin.DefaultModuleDescriptorFactory: void setModuleDescriptors(java.util.Map)> ==> <java.util.Hashtable: java.util.Set entrySet()>
INTERFACE edge: $r1 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>() in <com.atlassian.plugin.DefaultModuleDescriptorFactory: void setModuleDescriptors(java.util.Map)> ==> <java.util.TreeMap: java.util.Set entrySet()>
INTERFACE edge: $r1 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>() in <com.atlassian.plugin.DefaultModuleDescriptorFactory: void setModuleDescriptors(java.util.Map)> ==> <java.util.jar.Attributes: java.util.Set entrySet()>
INTERFACE edge: r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.DefaultModuleDescriptorFactory: void setModuleDescriptors(java.util.Map)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.DefaultModuleDescriptorFactory: void setModuleDescriptors(java.util.Map)> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.DefaultModuleDescriptorFactory: void setModuleDescriptors(java.util.Map)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
SPECIAL edge: r6 = specialinvoke r5.<com.atlassian.plugin.DefaultModuleDescriptorFactory: java.lang.Class getClassFromEntry(java.util.Map$Entry)>(r4) in <com.atlassian.plugin.DefaultModuleDescriptorFactory: void setModuleDescriptors(java.util.Map)> ==> <com.atlassian.plugin.DefaultModuleDescriptorFactory: java.lang.Class getClassFromEntry(java.util.Map$Entry)>
VIRTUAL edge: virtualinvoke r5.<com.atlassian.plugin.DefaultModuleDescriptorFactory: void addModuleDescriptor(java.lang.String,java.lang.Class)>($r8, r6) in <com.atlassian.plugin.DefaultModuleDescriptorFactory: void setModuleDescriptors(java.util.Map)> ==> <com.atlassian.plugin.DefaultModuleDescriptorFactory: void addModuleDescriptor(java.lang.String,java.lang.Class)>
CLINIT edge: $r8 = <com.atlassian.plugin.DefaultModuleDescriptorFactory: org.slf4j.Logger log> in <com.atlassian.plugin.DefaultModuleDescriptorFactory: java.lang.Class getClassFromEntry(java.util.Map$Entry)> ==> <com.atlassian.plugin.DefaultModuleDescriptorFactory: void <clinit>()>
STATIC edge: r14 = staticinvoke <com.atlassian.plugin.util.ClassLoaderUtils: java.lang.Class loadClass(java.lang.String,java.lang.Class)>($r5, $r6) in <com.atlassian.plugin.DefaultModuleDescriptorFactory: java.lang.Class getClassFromEntry(java.util.Map$Entry)> ==> <com.atlassian.plugin.util.ClassLoaderUtils: java.lang.Class loadClass(java.lang.String,java.lang.Class)>
CLINIT edge: $r11 = <com.atlassian.plugin.DefaultModuleDescriptorFactory: org.slf4j.Logger log> in <com.atlassian.plugin.DefaultModuleDescriptorFactory: java.lang.Class getClassFromEntry(java.util.Map$Entry)> ==> <com.atlassian.plugin.DefaultModuleDescriptorFactory: void <clinit>()>
CLINIT edge: <com.atlassian.plugin.DefaultModuleDescriptorFactory: org.slf4j.Logger log> = $r0 in <com.atlassian.plugin.DefaultModuleDescriptorFactory: void <clinit>()> ==> <com.atlassian.plugin.DefaultModuleDescriptorFactory: void <clinit>()>
STATIC edge: $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/atlassian/plugin/DefaultModuleDescriptorFactory;") in <com.atlassian.plugin.DefaultModuleDescriptorFactory: void <clinit>()> ==> <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1) in <com.atlassian.plugin.DefaultModuleDescriptorFactory: boolean hasModuleDescriptor(java.lang.String)> ==> <java.util.HashMap: boolean containsKey(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1) in <com.atlassian.plugin.DefaultModuleDescriptorFactory: boolean hasModuleDescriptor(java.lang.String)> ==> <java.util.Hashtable: boolean containsKey(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1) in <com.atlassian.plugin.DefaultModuleDescriptorFactory: boolean hasModuleDescriptor(java.lang.String)> ==> <java.util.TreeMap: boolean containsKey(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1) in <com.atlassian.plugin.DefaultModuleDescriptorFactory: boolean hasModuleDescriptor(java.lang.String)> ==> <java.util.jar.Attributes: boolean containsKey(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) in <com.atlassian.plugin.DefaultModuleDescriptorFactory: void addModuleDescriptor(java.lang.String,java.lang.Class)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) in <com.atlassian.plugin.DefaultModuleDescriptorFactory: void addModuleDescriptor(java.lang.String,java.lang.Class)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) in <com.atlassian.plugin.DefaultModuleDescriptorFactory: void addModuleDescriptor(java.lang.String,java.lang.Class)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) in <com.atlassian.plugin.DefaultModuleDescriptorFactory: void addModuleDescriptor(java.lang.String,java.lang.Class)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1) in <com.atlassian.plugin.DefaultModuleDescriptorFactory: void removeModuleDescriptorForType(java.lang.String)> ==> <java.util.HashMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1) in <com.atlassian.plugin.DefaultModuleDescriptorFactory: void removeModuleDescriptorForType(java.lang.String)> ==> <java.util.Hashtable: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1) in <com.atlassian.plugin.DefaultModuleDescriptorFactory: void removeModuleDescriptorForType(java.lang.String)> ==> <java.util.TreeMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1) in <com.atlassian.plugin.DefaultModuleDescriptorFactory: void removeModuleDescriptorForType(java.lang.String)> ==> <java.util.jar.Attributes: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<java.util.List: void clear()>() in <com.atlassian.plugin.DefaultModuleDescriptorFactory: void setPermittedModuleKeys(java.util.List)> ==> <java.util.LinkedList: void clear()>
INTERFACE edge: interfaceinvoke $r3.<java.util.List: void clear()>() in <com.atlassian.plugin.DefaultModuleDescriptorFactory: void setPermittedModuleKeys(java.util.List)> ==> <java.util.ArrayList: void clear()>
INTERFACE edge: interfaceinvoke $r4.<java.util.List: boolean addAll(java.util.Collection)>(r7) in <com.atlassian.plugin.DefaultModuleDescriptorFactory: void setPermittedModuleKeys(java.util.List)> ==> <java.util.LinkedList: boolean addAll(java.util.Collection)>
INTERFACE edge: interfaceinvoke $r4.<java.util.List: boolean addAll(java.util.Collection)>(r7) in <com.atlassian.plugin.DefaultModuleDescriptorFactory: void setPermittedModuleKeys(java.util.List)> ==> <java.util.ArrayList: boolean addAll(java.util.Collection)>
SPECIAL edge: specialinvoke r0.<java.net.URLStreamHandler: void <init>()>() in <com.atlassian.plugin.classloader.url.BytesUrlStreamHandler: void <init>(byte[])> ==> <java.net.URLStreamHandler: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.classloader.url.BytesUrlConnection: void <init>(java.net.URL,byte[])>(r1, $r3) in <com.atlassian.plugin.classloader.url.BytesUrlStreamHandler: java.net.URLConnection openConnection(java.net.URL)> ==> <com.atlassian.plugin.classloader.url.BytesUrlConnection: void <init>(java.net.URL,byte[])>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.util.ContextClassLoaderSwitchingUtil: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptor: void <init>()>() in <com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptorRequiringRestart: void <init>()> ==> <com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptor: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState toState()>() in <com.atlassian.plugin.manager.store.LoadOnlyPluginPersistentStateStore: void <init>()> ==> <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState toState()>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.manager.store.LoadOnlyPluginPersistentStateStore: void <init>(com.atlassian.plugin.manager.PluginPersistentState)>($r2) in <com.atlassian.plugin.manager.store.LoadOnlyPluginPersistentStateStore: void <init>()> ==> <com.atlassian.plugin.manager.store.LoadOnlyPluginPersistentStateStore: void <init>(com.atlassian.plugin.manager.PluginPersistentState)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.store.LoadOnlyPluginPersistentStateStore: void <init>(com.atlassian.plugin.manager.PluginPersistentState)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.manager.store.LoadOnlyPluginPersistentStateStore: void save(com.atlassian.plugin.manager.PluginPersistentState)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot save state to ") in <com.atlassian.plugin.manager.store.LoadOnlyPluginPersistentStateStore: void save(com.atlassian.plugin.manager.PluginPersistentState)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(class "Lcom/atlassian/plugin/manager/store/LoadOnlyPluginPersistentStateStore;") in <com.atlassian.plugin.manager.store.LoadOnlyPluginPersistentStateStore: void save(com.atlassian.plugin.manager.PluginPersistentState)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.manager.store.LoadOnlyPluginPersistentStateStore: void save(com.atlassian.plugin.manager.PluginPersistentState)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4) in <com.atlassian.plugin.manager.store.LoadOnlyPluginPersistentStateStore: void save(com.atlassian.plugin.manager.PluginPersistentState)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.ClassLoader: void <init>()>() in <com.atlassian.plugin.classloader.DelegationClassLoader: void <init>()> ==> <java.lang.ClassLoader: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>() in <com.atlassian.plugin.classloader.DelegationClassLoader: void <init>()> ==> <java.lang.Class: java.lang.ClassLoader getClassLoader()>
INTERFACE edge: $z0 = interfaceinvoke $r4.<org.slf4j.Logger: boolean isDebugEnabled()>() in <com.atlassian.plugin.classloader.DelegationClassLoader: void setDelegateClassLoader(java.lang.ClassLoader)> ==> <org.slf4j.Logger: boolean isDebugEnabled()>
INTERFACE edge: interfaceinvoke $r6.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Update class loader delegation from [{}] to [{}]", $r5, r1) in <com.atlassian.plugin.classloader.DelegationClassLoader: void setDelegateClassLoader(java.lang.ClassLoader)> ==> <org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r1) in <com.atlassian.plugin.classloader.DelegationClassLoader: java.lang.Class loadClass(java.lang.String)> ==> <java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r1) in <com.atlassian.plugin.classloader.DelegationClassLoader: java.lang.Class loadClass(java.lang.String)> ==> <com.atlassian.plugin.util.ChainingClassLoader: java.lang.Class loadClass(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r1) in <com.atlassian.plugin.classloader.DelegationClassLoader: java.lang.Class loadClass(java.lang.String)> ==> <com.atlassian.plugin.classloader.DelegationClassLoader: java.lang.Class loadClass(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>(r1) in <com.atlassian.plugin.classloader.DelegationClassLoader: java.net.URL getResource(java.lang.String)> ==> <com.atlassian.plugin.classloader.PluginClassLoader: java.net.URL getResource(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>(r1) in <com.atlassian.plugin.classloader.DelegationClassLoader: java.net.URL getResource(java.lang.String)> ==> <java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>(r1) in <com.atlassian.plugin.classloader.DelegationClassLoader: java.net.URL getResource(java.lang.String)> ==> <com.atlassian.plugin.util.ChainingClassLoader: java.net.URL getResource(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>(r1) in <com.atlassian.plugin.classloader.DelegationClassLoader: java.net.URL getResource(java.lang.String)> ==> <com.atlassian.plugin.classloader.DelegationClassLoader: java.net.URL getResource(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>(r1) in <com.atlassian.plugin.classloader.DelegationClassLoader: java.util.Enumeration getResources(java.lang.String)> ==> <java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>(r1) in <com.atlassian.plugin.classloader.DelegationClassLoader: java.util.Enumeration getResources(java.lang.String)> ==> <com.atlassian.plugin.util.ChainingClassLoader: java.util.Enumeration getResources(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>(r1) in <com.atlassian.plugin.classloader.DelegationClassLoader: java.util.Enumeration getResources(java.lang.String)> ==> <com.atlassian.plugin.classloader.DelegationClassLoader: java.util.Enumeration getResources(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>(r1) in <com.atlassian.plugin.classloader.DelegationClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)> ==> <java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>(r1) in <com.atlassian.plugin.classloader.DelegationClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)> ==> <com.atlassian.plugin.util.ChainingClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>(r1) in <com.atlassian.plugin.classloader.DelegationClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)> ==> <com.atlassian.plugin.classloader.DelegationClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.ClassLoader: void setDefaultAssertionStatus(boolean)>(z0) in <com.atlassian.plugin.classloader.DelegationClassLoader: void setDefaultAssertionStatus(boolean)> ==> <java.lang.ClassLoader: void setDefaultAssertionStatus(boolean)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.ClassLoader: void setDefaultAssertionStatus(boolean)>(z0) in <com.atlassian.plugin.classloader.DelegationClassLoader: void setDefaultAssertionStatus(boolean)> ==> <com.atlassian.plugin.util.ChainingClassLoader: void setDefaultAssertionStatus(boolean)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.ClassLoader: void setDefaultAssertionStatus(boolean)>(z0) in <com.atlassian.plugin.classloader.DelegationClassLoader: void setDefaultAssertionStatus(boolean)> ==> <com.atlassian.plugin.classloader.DelegationClassLoader: void setDefaultAssertionStatus(boolean)>
VIRTUAL edge: virtualinvoke $r2.<java.lang.ClassLoader: void setPackageAssertionStatus(java.lang.String,boolean)>(r1, z0) in <com.atlassian.plugin.classloader.DelegationClassLoader: void setPackageAssertionStatus(java.lang.String,boolean)> ==> <java.lang.ClassLoader: void setPackageAssertionStatus(java.lang.String,boolean)>
VIRTUAL edge: virtualinvoke $r2.<java.lang.ClassLoader: void setPackageAssertionStatus(java.lang.String,boolean)>(r1, z0) in <com.atlassian.plugin.classloader.DelegationClassLoader: void setPackageAssertionStatus(java.lang.String,boolean)> ==> <com.atlassian.plugin.util.ChainingClassLoader: void setPackageAssertionStatus(java.lang.String,boolean)>
VIRTUAL edge: virtualinvoke $r2.<java.lang.ClassLoader: void setPackageAssertionStatus(java.lang.String,boolean)>(r1, z0) in <com.atlassian.plugin.classloader.DelegationClassLoader: void setPackageAssertionStatus(java.lang.String,boolean)> ==> <com.atlassian.plugin.classloader.DelegationClassLoader: void setPackageAssertionStatus(java.lang.String,boolean)>
VIRTUAL edge: virtualinvoke $r2.<java.lang.ClassLoader: void setClassAssertionStatus(java.lang.String,boolean)>(r1, z0) in <com.atlassian.plugin.classloader.DelegationClassLoader: void setClassAssertionStatus(java.lang.String,boolean)> ==> <java.lang.ClassLoader: void setClassAssertionStatus(java.lang.String,boolean)>
VIRTUAL edge: virtualinvoke $r2.<java.lang.ClassLoader: void setClassAssertionStatus(java.lang.String,boolean)>(r1, z0) in <com.atlassian.plugin.classloader.DelegationClassLoader: void setClassAssertionStatus(java.lang.String,boolean)> ==> <com.atlassian.plugin.util.ChainingClassLoader: void setClassAssertionStatus(java.lang.String,boolean)>
VIRTUAL edge: virtualinvoke $r2.<java.lang.ClassLoader: void setClassAssertionStatus(java.lang.String,boolean)>(r1, z0) in <com.atlassian.plugin.classloader.DelegationClassLoader: void setClassAssertionStatus(java.lang.String,boolean)> ==> <com.atlassian.plugin.classloader.DelegationClassLoader: void setClassAssertionStatus(java.lang.String,boolean)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.ClassLoader: void clearAssertionStatus()>() in <com.atlassian.plugin.classloader.DelegationClassLoader: void clearAssertionStatus()> ==> <java.lang.ClassLoader: void clearAssertionStatus()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.ClassLoader: void clearAssertionStatus()>() in <com.atlassian.plugin.classloader.DelegationClassLoader: void clearAssertionStatus()> ==> <com.atlassian.plugin.util.ChainingClassLoader: void clearAssertionStatus()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.ClassLoader: void clearAssertionStatus()>() in <com.atlassian.plugin.classloader.DelegationClassLoader: void clearAssertionStatus()> ==> <com.atlassian.plugin.classloader.DelegationClassLoader: void clearAssertionStatus()>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.manager.ForwardingPluginAccessor: void <init>(com.atlassian.plugin.PluginAccessor)>(r1) in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: void <init>(com.atlassian.plugin.PluginAccessor,com.atlassian.plugin.event.PluginEventManager,com.atlassian.plugin.PluginController)> ==> <com.atlassian.plugin.manager.ForwardingPluginAccessor: void <init>(com.atlassian.plugin.PluginAccessor)>
SPECIAL edge: specialinvoke $r5.<com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor$ByModuleDescriptorClassCacheLoader: void <init>(com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor,com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor$1)>(r0, null) in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: void <init>(com.atlassian.plugin.PluginAccessor,com.atlassian.plugin.event.PluginEventManager,com.atlassian.plugin.PluginController)> ==> <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor$ByModuleDescriptorClassCacheLoader: void <init>(com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor,com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor$1)>
SPECIAL edge: specialinvoke $r10.<com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor$ByModuleClassCacheLoader: void <init>(com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor,com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor$1)>(r0, null) in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: void <init>(com.atlassian.plugin.PluginAccessor,com.atlassian.plugin.event.PluginEventManager,com.atlassian.plugin.PluginController)> ==> <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor$ByModuleClassCacheLoader: void <init>(com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor,com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor$1)>
SPECIAL edge: specialinvoke $r14.<com.atlassian.plugin.manager.SafeModuleExtractor: void <init>(com.atlassian.plugin.PluginController)>(r15) in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: void <init>(com.atlassian.plugin.PluginAccessor,com.atlassian.plugin.event.PluginEventManager,com.atlassian.plugin.PluginController)> ==> <com.atlassian.plugin.manager.SafeModuleExtractor: void <init>(com.atlassian.plugin.PluginController)>
INTERFACE edge: interfaceinvoke r12.<com.atlassian.plugin.event.PluginEventManager: void register(java.lang.Object)>(r0) in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: void <init>(com.atlassian.plugin.PluginAccessor,com.atlassian.plugin.event.PluginEventManager,com.atlassian.plugin.PluginController)> ==> <com.atlassian.plugin.event.impl.DefaultPluginEventManager: void register(java.lang.Object)>
STATIC edge: $r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.ForwardingPluginAccessor: void <init>(com.atlassian.plugin.PluginAccessor)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: void invalidateAll()>() in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: void onPluginDisable(com.atlassian.plugin.event.events.PluginDisabledEvent)> ==> <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: void invalidateAll()>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: void invalidateAll()>() in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: void onPluginEnable(com.atlassian.plugin.event.events.PluginEnabledEvent)> ==> <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: void invalidateAll()>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: void invalidateAll()>() in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: void onPluginModuleEnabled(com.atlassian.plugin.event.events.PluginModuleEnabledEvent)> ==> <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: void invalidateAll()>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: void invalidateAll()>() in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: void onPluginModuleDisabled(com.atlassian.plugin.event.events.PluginModuleDisabledEvent)> ==> <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: void invalidateAll()>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: void invalidateAll()>() in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: void onPluginFrameworkShutdown(com.atlassian.plugin.event.events.PluginFrameworkShutdownEvent)> ==> <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: void invalidateAll()>
VIRTUAL edge: r1 = virtualinvoke $r0.<com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: com.atlassian.plugin.instrumentation.Timer pullTimer(java.lang.String)>("getEnabledModuleDescriptorsByClass") in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: java.util.List getEnabledModuleDescriptorsByClass(java.lang.Class)> ==> <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: com.atlassian.plugin.instrumentation.Timer pullTimer(java.lang.String)>
INTERFACE edge: $r5 = interfaceinvoke $r4.<com.google.common.cache.LoadingCache: java.lang.Object getUnchecked(java.lang.Object)>(r3) in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: java.util.List getEnabledModuleDescriptorsByClass(java.lang.Class)> ==> <com.google.common.cache.LoadingCache: java.lang.Object getUnchecked(java.lang.Object)>
VIRTUAL edge: virtualinvoke r1.<com.atlassian.plugin.instrumentation.Timer: void close()>() in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: java.util.List getEnabledModuleDescriptorsByClass(java.lang.Class)> ==> <com.atlassian.plugin.instrumentation.Timer: void close()>
VIRTUAL edge: virtualinvoke r1.<com.atlassian.plugin.instrumentation.Timer: void close()>() in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: java.util.List getEnabledModuleDescriptorsByClass(java.lang.Class)> ==> <com.atlassian.plugin.instrumentation.SingleTimer: void close()>
VIRTUAL edge: virtualinvoke r1.<com.atlassian.plugin.instrumentation.Timer: void close()>() in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: java.util.List getEnabledModuleDescriptorsByClass(java.lang.Class)> ==> <com.atlassian.plugin.instrumentation.Timer: void close()>
VIRTUAL edge: virtualinvoke r1.<com.atlassian.plugin.instrumentation.Timer: void close()>() in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: java.util.List getEnabledModuleDescriptorsByClass(java.lang.Class)> ==> <com.atlassian.plugin.instrumentation.SingleTimer: void close()>
VIRTUAL edge: virtualinvoke r1.<com.atlassian.plugin.instrumentation.Timer: void close()>() in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: java.util.List getEnabledModuleDescriptorsByClass(java.lang.Class)> ==> <com.atlassian.plugin.instrumentation.Timer: void close()>
VIRTUAL edge: virtualinvoke r1.<com.atlassian.plugin.instrumentation.Timer: void close()>() in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: java.util.List getEnabledModuleDescriptorsByClass(java.lang.Class)> ==> <com.atlassian.plugin.instrumentation.SingleTimer: void close()>
VIRTUAL edge: virtualinvoke $r11.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r7) in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: java.util.List getEnabledModuleDescriptorsByClass(java.lang.Class)> ==> <java.lang.Throwable: void addSuppressed(java.lang.Throwable)>
VIRTUAL edge: r1 = virtualinvoke $r0.<com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: com.atlassian.plugin.instrumentation.Timer pullTimer(java.lang.String)>("getEnabledModulesByClass") in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: java.util.List getEnabledModulesByClass(java.lang.Class)> ==> <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: com.atlassian.plugin.instrumentation.Timer pullTimer(java.lang.String)>
INTERFACE edge: $r5 = interfaceinvoke $r4.<com.google.common.cache.LoadingCache: java.lang.Object getUnchecked(java.lang.Object)>(r3) in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: java.util.List getEnabledModulesByClass(java.lang.Class)> ==> <com.google.common.cache.LoadingCache: java.lang.Object getUnchecked(java.lang.Object)>
VIRTUAL edge: r7 = virtualinvoke $r6.<com.atlassian.plugin.manager.SafeModuleExtractor: java.util.List getModules(java.lang.Iterable)>(r14) in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: java.util.List getEnabledModulesByClass(java.lang.Class)> ==> <com.atlassian.plugin.manager.SafeModuleExtractor: java.util.List getModules(java.lang.Iterable)>
VIRTUAL edge: virtualinvoke r1.<com.atlassian.plugin.instrumentation.Timer: void close()>() in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: java.util.List getEnabledModulesByClass(java.lang.Class)> ==> <com.atlassian.plugin.instrumentation.Timer: void close()>
VIRTUAL edge: virtualinvoke r1.<com.atlassian.plugin.instrumentation.Timer: void close()>() in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: java.util.List getEnabledModulesByClass(java.lang.Class)> ==> <com.atlassian.plugin.instrumentation.SingleTimer: void close()>
VIRTUAL edge: virtualinvoke r1.<com.atlassian.plugin.instrumentation.Timer: void close()>() in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: java.util.List getEnabledModulesByClass(java.lang.Class)> ==> <com.atlassian.plugin.instrumentation.Timer: void close()>
VIRTUAL edge: virtualinvoke r1.<com.atlassian.plugin.instrumentation.Timer: void close()>() in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: java.util.List getEnabledModulesByClass(java.lang.Class)> ==> <com.atlassian.plugin.instrumentation.SingleTimer: void close()>
VIRTUAL edge: virtualinvoke r1.<com.atlassian.plugin.instrumentation.Timer: void close()>() in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: java.util.List getEnabledModulesByClass(java.lang.Class)> ==> <com.atlassian.plugin.instrumentation.Timer: void close()>
VIRTUAL edge: virtualinvoke r1.<com.atlassian.plugin.instrumentation.Timer: void close()>() in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: java.util.List getEnabledModulesByClass(java.lang.Class)> ==> <com.atlassian.plugin.instrumentation.SingleTimer: void close()>
VIRTUAL edge: virtualinvoke $r12.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r8) in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: java.util.List getEnabledModulesByClass(java.lang.Class)> ==> <java.lang.Throwable: void addSuppressed(java.lang.Throwable)>
SPECIAL edge: $r2 = specialinvoke r0.<com.atlassian.plugin.manager.ForwardingPluginAccessor: java.lang.Iterable getDynamicModules(com.atlassian.plugin.Plugin)>(r1) in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: java.lang.Iterable getDynamicModules(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.ForwardingPluginAccessor: java.lang.Iterable getDynamicModules(com.atlassian.plugin.Plugin)>
SPECIAL edge: $z0 = specialinvoke r0.<com.atlassian.plugin.manager.ForwardingPluginAccessor: boolean isSystemPlugin(java.lang.String)>(r1) in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: boolean isSystemPlugin(java.lang.String)> ==> <com.atlassian.plugin.manager.ForwardingPluginAccessor: boolean isSystemPlugin(java.lang.String)>
SPECIAL edge: $z0 = specialinvoke r0.<com.atlassian.plugin.manager.ForwardingPluginAccessor: boolean isPluginModuleEnabled(java.lang.String)>(r1) in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: boolean isPluginModuleEnabled(java.lang.String)> ==> <com.atlassian.plugin.manager.ForwardingPluginAccessor: boolean isPluginModuleEnabled(java.lang.String)>
SPECIAL edge: $z0 = specialinvoke r0.<com.atlassian.plugin.manager.ForwardingPluginAccessor: boolean isPluginEnabled(java.lang.String)>(r1) in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: boolean isPluginEnabled(java.lang.String)> ==> <com.atlassian.plugin.manager.ForwardingPluginAccessor: boolean isPluginEnabled(java.lang.String)>
SPECIAL edge: $r2 = specialinvoke r0.<com.atlassian.plugin.manager.ForwardingPluginAccessor: java.util.Collection getPlugins(java.util.function.Predicate)>(r1) in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: java.util.Collection getPlugins(java.util.function.Predicate)> ==> <com.atlassian.plugin.manager.ForwardingPluginAccessor: java.util.Collection getPlugins(java.util.function.Predicate)>
SPECIAL edge: $r1 = specialinvoke r0.<com.atlassian.plugin.manager.ForwardingPluginAccessor: java.util.Collection getPlugins()>() in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: java.util.Collection getPlugins()> ==> <com.atlassian.plugin.manager.ForwardingPluginAccessor: java.util.Collection getPlugins()>
SPECIAL edge: $r2 = specialinvoke r0.<com.atlassian.plugin.manager.ForwardingPluginAccessor: com.atlassian.plugin.PluginRestartState getPluginRestartState(java.lang.String)>(r1) in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: com.atlassian.plugin.PluginRestartState getPluginRestartState(java.lang.String)> ==> <com.atlassian.plugin.manager.ForwardingPluginAccessor: com.atlassian.plugin.PluginRestartState getPluginRestartState(java.lang.String)>
SPECIAL edge: $r2 = specialinvoke r0.<com.atlassian.plugin.manager.ForwardingPluginAccessor: com.atlassian.plugin.ModuleDescriptor getPluginModule(java.lang.String)>(r1) in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: com.atlassian.plugin.ModuleDescriptor getPluginModule(java.lang.String)> ==> <com.atlassian.plugin.manager.ForwardingPluginAccessor: com.atlassian.plugin.ModuleDescriptor getPluginModule(java.lang.String)>
SPECIAL edge: $r2 = specialinvoke r0.<com.atlassian.plugin.manager.ForwardingPluginAccessor: com.atlassian.plugin.Plugin getPlugin(java.lang.String)>(r1) in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: com.atlassian.plugin.Plugin getPlugin(java.lang.String)> ==> <com.atlassian.plugin.manager.ForwardingPluginAccessor: com.atlassian.plugin.Plugin getPlugin(java.lang.String)>
SPECIAL edge: $r2 = specialinvoke r0.<com.atlassian.plugin.manager.ForwardingPluginAccessor: java.util.Collection getModules(java.util.function.Predicate)>(r1) in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: java.util.Collection getModules(java.util.function.Predicate)> ==> <com.atlassian.plugin.manager.ForwardingPluginAccessor: java.util.Collection getModules(java.util.function.Predicate)>
SPECIAL edge: $r2 = specialinvoke r0.<com.atlassian.plugin.manager.ForwardingPluginAccessor: java.util.Collection getModuleDescriptors(java.util.function.Predicate)>(r1) in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: java.util.Collection getModuleDescriptors(java.util.function.Predicate)> ==> <com.atlassian.plugin.manager.ForwardingPluginAccessor: java.util.Collection getModuleDescriptors(java.util.function.Predicate)>
SPECIAL edge: $r1 = specialinvoke r0.<com.atlassian.plugin.manager.ForwardingPluginAccessor: java.util.Collection getEnabledPlugins()>() in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: java.util.Collection getEnabledPlugins()> ==> <com.atlassian.plugin.manager.ForwardingPluginAccessor: java.util.Collection getEnabledPlugins()>
SPECIAL edge: $r2 = specialinvoke r0.<com.atlassian.plugin.manager.ForwardingPluginAccessor: com.atlassian.plugin.ModuleDescriptor getEnabledPluginModule(java.lang.String)>(r1) in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: com.atlassian.plugin.ModuleDescriptor getEnabledPluginModule(java.lang.String)> ==> <com.atlassian.plugin.manager.ForwardingPluginAccessor: com.atlassian.plugin.ModuleDescriptor getEnabledPluginModule(java.lang.String)>
SPECIAL edge: $r2 = specialinvoke r0.<com.atlassian.plugin.manager.ForwardingPluginAccessor: com.atlassian.plugin.Plugin getEnabledPlugin(java.lang.String)>(r1) in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: com.atlassian.plugin.Plugin getEnabledPlugin(java.lang.String)> ==> <com.atlassian.plugin.manager.ForwardingPluginAccessor: com.atlassian.plugin.Plugin getEnabledPlugin(java.lang.String)>
SPECIAL edge: $r2 = specialinvoke r0.<com.atlassian.plugin.manager.ForwardingPluginAccessor: java.util.List getActiveModuleDescriptorsByClass(java.lang.Class)>(r1) in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: java.util.List getActiveModuleDescriptorsByClass(java.lang.Class)> ==> <com.atlassian.plugin.manager.ForwardingPluginAccessor: java.util.List getActiveModuleDescriptorsByClass(java.lang.Class)>
SPECIAL edge: $r2 = specialinvoke r0.<com.atlassian.plugin.manager.ForwardingPluginAccessor: java.io.InputStream getDynamicResourceAsStream(java.lang.String)>(r1) in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: java.io.InputStream getDynamicResourceAsStream(java.lang.String)> ==> <com.atlassian.plugin.manager.ForwardingPluginAccessor: java.io.InputStream getDynamicResourceAsStream(java.lang.String)>
SPECIAL edge: $r1 = specialinvoke r0.<com.atlassian.plugin.manager.ForwardingPluginAccessor: java.lang.ClassLoader getClassLoader()>() in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: java.lang.ClassLoader getClassLoader()> ==> <com.atlassian.plugin.manager.ForwardingPluginAccessor: java.lang.ClassLoader getClassLoader()>
INTERFACE edge: $r1 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: java.util.Collection getModuleDescriptors()>() in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: java.util.stream.Stream lambda$getModuleDescriptors$0(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.util.Collection getModuleDescriptors()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.atlassian.plugin.PluginAccessor: java.lang.ClassLoader getClassLoader()>() in <com.atlassian.plugin.manager.ForwardingPluginAccessor: java.lang.ClassLoader getClassLoader()> ==> <com.atlassian.plugin.manager.ProductPluginAccessor: java.lang.ClassLoader getClassLoader()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.atlassian.plugin.PluginAccessor: java.lang.ClassLoader getClassLoader()>() in <com.atlassian.plugin.manager.ForwardingPluginAccessor: java.lang.ClassLoader getClassLoader()> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.lang.ClassLoader getClassLoader()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.atlassian.plugin.PluginAccessor: java.lang.ClassLoader getClassLoader()>() in <com.atlassian.plugin.manager.ForwardingPluginAccessor: java.lang.ClassLoader getClassLoader()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.ClassLoader getClassLoader()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.atlassian.plugin.PluginAccessor: java.lang.ClassLoader getClassLoader()>() in <com.atlassian.plugin.manager.ForwardingPluginAccessor: java.lang.ClassLoader getClassLoader()> ==> <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: java.lang.ClassLoader getClassLoader()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.atlassian.plugin.PluginAccessor: java.io.InputStream getDynamicResourceAsStream(java.lang.String)>(r1) in <com.atlassian.plugin.manager.ForwardingPluginAccessor: java.io.InputStream getDynamicResourceAsStream(java.lang.String)> ==> <com.atlassian.plugin.manager.ProductPluginAccessor: java.io.InputStream getDynamicResourceAsStream(java.lang.String)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.atlassian.plugin.PluginAccessor: java.io.InputStream getDynamicResourceAsStream(java.lang.String)>(r1) in <com.atlassian.plugin.manager.ForwardingPluginAccessor: java.io.InputStream getDynamicResourceAsStream(java.lang.String)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.io.InputStream getDynamicResourceAsStream(java.lang.String)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.atlassian.plugin.PluginAccessor: java.io.InputStream getDynamicResourceAsStream(java.lang.String)>(r1) in <com.atlassian.plugin.manager.ForwardingPluginAccessor: java.io.InputStream getDynamicResourceAsStream(java.lang.String)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: java.io.InputStream getDynamicResourceAsStream(java.lang.String)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.atlassian.plugin.PluginAccessor: java.io.InputStream getDynamicResourceAsStream(java.lang.String)>(r1) in <com.atlassian.plugin.manager.ForwardingPluginAccessor: java.io.InputStream getDynamicResourceAsStream(java.lang.String)> ==> <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: java.io.InputStream getDynamicResourceAsStream(java.lang.String)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.atlassian.plugin.PluginAccessor: java.util.List getEnabledModuleDescriptorsByClass(java.lang.Class)>(r1) in <com.atlassian.plugin.manager.ForwardingPluginAccessor: java.util.List getEnabledModuleDescriptorsByClass(java.lang.Class)> ==> <com.atlassian.plugin.manager.ProductPluginAccessor: java.util.List getEnabledModuleDescriptorsByClass(java.lang.Class)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.atlassian.plugin.PluginAccessor: java.util.List getEnabledModuleDescriptorsByClass(java.lang.Class)>(r1) in <com.atlassian.plugin.manager.ForwardingPluginAccessor: java.util.List getEnabledModuleDescriptorsByClass(java.lang.Class)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.List getEnabledModuleDescriptorsByClass(java.lang.Class)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.atlassian.plugin.PluginAccessor: java.util.List getEnabledModuleDescriptorsByClass(java.lang.Class)>(r1) in <com.atlassian.plugin.manager.ForwardingPluginAccessor: java.util.List getEnabledModuleDescriptorsByClass(java.lang.Class)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: java.util.List getEnabledModuleDescriptorsByClass(java.lang.Class)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.atlassian.plugin.PluginAccessor: java.util.List getEnabledModuleDescriptorsByClass(java.lang.Class)>(r1) in <com.atlassian.plugin.manager.ForwardingPluginAccessor: java.util.List getEnabledModuleDescriptorsByClass(java.lang.Class)> ==> <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: java.util.List getEnabledModuleDescriptorsByClass(java.lang.Class)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.atlassian.plugin.PluginAccessor: java.util.List getActiveModuleDescriptorsByClass(java.lang.Class)>(r1) in <com.atlassian.plugin.manager.ForwardingPluginAccessor: java.util.List getActiveModuleDescriptorsByClass(java.lang.Class)> ==> <com.atlassian.plugin.manager.ProductPluginAccessor: java.util.List getActiveModuleDescriptorsByClass(java.lang.Class)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.atlassian.plugin.PluginAccessor: java.util.List getActiveModuleDescriptorsByClass(java.lang.Class)>(r1) in <com.atlassian.plugin.manager.ForwardingPluginAccessor: java.util.List getActiveModuleDescriptorsByClass(java.lang.Class)> ==> <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: java.util.List getActiveModuleDescriptorsByClass(java.lang.Class)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.atlassian.plugin.PluginAccessor: java.util.List getEnabledModulesByClass(java.lang.Class)>(r1) in <com.atlassian.plugin.manager.ForwardingPluginAccessor: java.util.List getEnabledModulesByClass(java.lang.Class)> ==> <com.atlassian.plugin.manager.ProductPluginAccessor: java.util.List getEnabledModulesByClass(java.lang.Class)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.atlassian.plugin.PluginAccessor: java.util.List getEnabledModulesByClass(java.lang.Class)>(r1) in <com.atlassian.plugin.manager.ForwardingPluginAccessor: java.util.List getEnabledModulesByClass(java.lang.Class)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.List getEnabledModulesByClass(java.lang.Class)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.atlassian.plugin.PluginAccessor: java.util.List getEnabledModulesByClass(java.lang.Class)>(r1) in <com.atlassian.plugin.manager.ForwardingPluginAccessor: java.util.List getEnabledModulesByClass(java.lang.Class)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: java.util.List getEnabledModulesByClass(java.lang.Class)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.atlassian.plugin.PluginAccessor: java.util.List getEnabledModulesByClass(java.lang.Class)>(r1) in <com.atlassian.plugin.manager.ForwardingPluginAccessor: java.util.List getEnabledModulesByClass(java.lang.Class)> ==> <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: java.util.List getEnabledModulesByClass(java.lang.Class)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.atlassian.plugin.PluginAccessor: com.atlassian.plugin.Plugin getEnabledPlugin(java.lang.String)>(r1) in <com.atlassian.plugin.manager.ForwardingPluginAccessor: com.atlassian.plugin.Plugin getEnabledPlugin(java.lang.String)> ==> <com.atlassian.plugin.manager.ProductPluginAccessor: com.atlassian.plugin.Plugin getEnabledPlugin(java.lang.String)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.atlassian.plugin.PluginAccessor: com.atlassian.plugin.Plugin getEnabledPlugin(java.lang.String)>(r1) in <com.atlassian.plugin.manager.ForwardingPluginAccessor: com.atlassian.plugin.Plugin getEnabledPlugin(java.lang.String)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase: com.atlassian.plugin.Plugin getEnabledPlugin(java.lang.String)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.atlassian.plugin.PluginAccessor: com.atlassian.plugin.Plugin getEnabledPlugin(java.lang.String)>(r1) in <com.atlassian.plugin.manager.ForwardingPluginAccessor: com.atlassian.plugin.Plugin getEnabledPlugin(java.lang.String)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.Plugin getEnabledPlugin(java.lang.String)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.atlassian.plugin.PluginAccessor: com.atlassian.plugin.Plugin getEnabledPlugin(java.lang.String)>(r1) in <com.atlassian.plugin.manager.ForwardingPluginAccessor: com.atlassian.plugin.Plugin getEnabledPlugin(java.lang.String)> ==> <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: com.atlassian.plugin.Plugin getEnabledPlugin(java.lang.String)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.atlassian.plugin.PluginAccessor: com.atlassian.plugin.ModuleDescriptor getEnabledPluginModule(java.lang.String)>(r1) in <com.atlassian.plugin.manager.ForwardingPluginAccessor: com.atlassian.plugin.ModuleDescriptor getEnabledPluginModule(java.lang.String)> ==> <com.atlassian.plugin.manager.ProductPluginAccessor: com.atlassian.plugin.ModuleDescriptor getEnabledPluginModule(java.lang.String)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.atlassian.plugin.PluginAccessor: com.atlassian.plugin.ModuleDescriptor getEnabledPluginModule(java.lang.String)>(r1) in <com.atlassian.plugin.manager.ForwardingPluginAccessor: com.atlassian.plugin.ModuleDescriptor getEnabledPluginModule(java.lang.String)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase: com.atlassian.plugin.ModuleDescriptor getEnabledPluginModule(java.lang.String)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.atlassian.plugin.PluginAccessor: com.atlassian.plugin.ModuleDescriptor getEnabledPluginModule(java.lang.String)>(r1) in <com.atlassian.plugin.manager.ForwardingPluginAccessor: com.atlassian.plugin.ModuleDescriptor getEnabledPluginModule(java.lang.String)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.ModuleDescriptor getEnabledPluginModule(java.lang.String)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.atlassian.plugin.PluginAccessor: com.atlassian.plugin.ModuleDescriptor getEnabledPluginModule(java.lang.String)>(r1) in <com.atlassian.plugin.manager.ForwardingPluginAccessor: com.atlassian.plugin.ModuleDescriptor getEnabledPluginModule(java.lang.String)> ==> <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: com.atlassian.plugin.ModuleDescriptor getEnabledPluginModule(java.lang.String)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.atlassian.plugin.PluginAccessor: java.util.Collection getEnabledPlugins()>() in <com.atlassian.plugin.manager.ForwardingPluginAccessor: java.util.Collection getEnabledPlugins()> ==> <com.atlassian.plugin.manager.ProductPluginAccessor: java.util.Collection getEnabledPlugins()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.atlassian.plugin.PluginAccessor: java.util.Collection getEnabledPlugins()>() in <com.atlassian.plugin.manager.ForwardingPluginAccessor: java.util.Collection getEnabledPlugins()> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.Collection getEnabledPlugins()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.atlassian.plugin.PluginAccessor: java.util.Collection getEnabledPlugins()>() in <com.atlassian.plugin.manager.ForwardingPluginAccessor: java.util.Collection getEnabledPlugins()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: java.util.Collection getEnabledPlugins()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.atlassian.plugin.PluginAccessor: java.util.Collection getEnabledPlugins()>() in <com.atlassian.plugin.manager.ForwardingPluginAccessor: java.util.Collection getEnabledPlugins()> ==> <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: java.util.Collection getEnabledPlugins()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.atlassian.plugin.PluginAccessor: java.util.Collection getModuleDescriptors(java.util.function.Predicate)>(r1) in <com.atlassian.plugin.manager.ForwardingPluginAccessor: java.util.Collection getModuleDescriptors(java.util.function.Predicate)> ==> <com.atlassian.plugin.manager.ProductPluginAccessor: java.util.Collection getModuleDescriptors(java.util.function.Predicate)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.atlassian.plugin.PluginAccessor: java.util.Collection getModuleDescriptors(java.util.function.Predicate)>(r1) in <com.atlassian.plugin.manager.ForwardingPluginAccessor: java.util.Collection getModuleDescriptors(java.util.function.Predicate)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.Collection getModuleDescriptors(java.util.function.Predicate)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.atlassian.plugin.PluginAccessor: java.util.Collection getModuleDescriptors(java.util.function.Predicate)>(r1) in <com.atlassian.plugin.manager.ForwardingPluginAccessor: java.util.Collection getModuleDescriptors(java.util.function.Predicate)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: java.util.Collection getModuleDescriptors(java.util.function.Predicate)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.atlassian.plugin.PluginAccessor: java.util.Collection getModuleDescriptors(java.util.function.Predicate)>(r1) in <com.atlassian.plugin.manager.ForwardingPluginAccessor: java.util.Collection getModuleDescriptors(java.util.function.Predicate)> ==> <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: java.util.Collection getModuleDescriptors(java.util.function.Predicate)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.atlassian.plugin.PluginAccessor: java.util.Collection getModules(java.util.function.Predicate)>(r1) in <com.atlassian.plugin.manager.ForwardingPluginAccessor: java.util.Collection getModules(java.util.function.Predicate)> ==> <com.atlassian.plugin.manager.ProductPluginAccessor: java.util.Collection getModules(java.util.function.Predicate)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.atlassian.plugin.PluginAccessor: java.util.Collection getModules(java.util.function.Predicate)>(r1) in <com.atlassian.plugin.manager.ForwardingPluginAccessor: java.util.Collection getModules(java.util.function.Predicate)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.Collection getModules(java.util.function.Predicate)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.atlassian.plugin.PluginAccessor: java.util.Collection getModules(java.util.function.Predicate)>(r1) in <com.atlassian.plugin.manager.ForwardingPluginAccessor: java.util.Collection getModules(java.util.function.Predicate)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: java.util.Collection getModules(java.util.function.Predicate)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.atlassian.plugin.PluginAccessor: java.util.Collection getModules(java.util.function.Predicate)>(r1) in <com.atlassian.plugin.manager.ForwardingPluginAccessor: java.util.Collection getModules(java.util.function.Predicate)> ==> <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: java.util.Collection getModules(java.util.function.Predicate)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.atlassian.plugin.PluginAccessor: com.atlassian.plugin.Plugin getPlugin(java.lang.String)>(r1) in <com.atlassian.plugin.manager.ForwardingPluginAccessor: com.atlassian.plugin.Plugin getPlugin(java.lang.String)> ==> <com.atlassian.plugin.manager.ProductPluginAccessor: com.atlassian.plugin.Plugin getPlugin(java.lang.String)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.atlassian.plugin.PluginAccessor: com.atlassian.plugin.Plugin getPlugin(java.lang.String)>(r1) in <com.atlassian.plugin.manager.ForwardingPluginAccessor: com.atlassian.plugin.Plugin getPlugin(java.lang.String)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase: com.atlassian.plugin.Plugin getPlugin(java.lang.String)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.atlassian.plugin.PluginAccessor: com.atlassian.plugin.Plugin getPlugin(java.lang.String)>(r1) in <com.atlassian.plugin.manager.ForwardingPluginAccessor: com.atlassian.plugin.Plugin getPlugin(java.lang.String)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.Plugin getPlugin(java.lang.String)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.atlassian.plugin.PluginAccessor: com.atlassian.plugin.Plugin getPlugin(java.lang.String)>(r1) in <com.atlassian.plugin.manager.ForwardingPluginAccessor: com.atlassian.plugin.Plugin getPlugin(java.lang.String)> ==> <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: com.atlassian.plugin.Plugin getPlugin(java.lang.String)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.atlassian.plugin.PluginAccessor: com.atlassian.plugin.ModuleDescriptor getPluginModule(java.lang.String)>(r1) in <com.atlassian.plugin.manager.ForwardingPluginAccessor: com.atlassian.plugin.ModuleDescriptor getPluginModule(java.lang.String)> ==> <com.atlassian.plugin.manager.ProductPluginAccessor: com.atlassian.plugin.ModuleDescriptor getPluginModule(java.lang.String)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.atlassian.plugin.PluginAccessor: com.atlassian.plugin.ModuleDescriptor getPluginModule(java.lang.String)>(r1) in <com.atlassian.plugin.manager.ForwardingPluginAccessor: com.atlassian.plugin.ModuleDescriptor getPluginModule(java.lang.String)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase: com.atlassian.plugin.ModuleDescriptor getPluginModule(java.lang.String)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.atlassian.plugin.PluginAccessor: com.atlassian.plugin.ModuleDescriptor getPluginModule(java.lang.String)>(r1) in <com.atlassian.plugin.manager.ForwardingPluginAccessor: com.atlassian.plugin.ModuleDescriptor getPluginModule(java.lang.String)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.ModuleDescriptor getPluginModule(java.lang.String)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.atlassian.plugin.PluginAccessor: com.atlassian.plugin.ModuleDescriptor getPluginModule(java.lang.String)>(r1) in <com.atlassian.plugin.manager.ForwardingPluginAccessor: com.atlassian.plugin.ModuleDescriptor getPluginModule(java.lang.String)> ==> <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: com.atlassian.plugin.ModuleDescriptor getPluginModule(java.lang.String)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.atlassian.plugin.PluginAccessor: com.atlassian.plugin.PluginRestartState getPluginRestartState(java.lang.String)>(r1) in <com.atlassian.plugin.manager.ForwardingPluginAccessor: com.atlassian.plugin.PluginRestartState getPluginRestartState(java.lang.String)> ==> <com.atlassian.plugin.manager.ProductPluginAccessor: com.atlassian.plugin.PluginRestartState getPluginRestartState(java.lang.String)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.atlassian.plugin.PluginAccessor: com.atlassian.plugin.PluginRestartState getPluginRestartState(java.lang.String)>(r1) in <com.atlassian.plugin.manager.ForwardingPluginAccessor: com.atlassian.plugin.PluginRestartState getPluginRestartState(java.lang.String)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase: com.atlassian.plugin.PluginRestartState getPluginRestartState(java.lang.String)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.atlassian.plugin.PluginAccessor: com.atlassian.plugin.PluginRestartState getPluginRestartState(java.lang.String)>(r1) in <com.atlassian.plugin.manager.ForwardingPluginAccessor: com.atlassian.plugin.PluginRestartState getPluginRestartState(java.lang.String)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.PluginRestartState getPluginRestartState(java.lang.String)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.atlassian.plugin.PluginAccessor: com.atlassian.plugin.PluginRestartState getPluginRestartState(java.lang.String)>(r1) in <com.atlassian.plugin.manager.ForwardingPluginAccessor: com.atlassian.plugin.PluginRestartState getPluginRestartState(java.lang.String)> ==> <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: com.atlassian.plugin.PluginRestartState getPluginRestartState(java.lang.String)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.atlassian.plugin.PluginAccessor: java.util.Collection getPlugins()>() in <com.atlassian.plugin.manager.ForwardingPluginAccessor: java.util.Collection getPlugins()> ==> <com.atlassian.plugin.manager.ProductPluginAccessor: java.util.Collection getPlugins()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.atlassian.plugin.PluginAccessor: java.util.Collection getPlugins()>() in <com.atlassian.plugin.manager.ForwardingPluginAccessor: java.util.Collection getPlugins()> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.Collection getPlugins()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.atlassian.plugin.PluginAccessor: java.util.Collection getPlugins()>() in <com.atlassian.plugin.manager.ForwardingPluginAccessor: java.util.Collection getPlugins()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: java.util.Collection getPlugins()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.atlassian.plugin.PluginAccessor: java.util.Collection getPlugins()>() in <com.atlassian.plugin.manager.ForwardingPluginAccessor: java.util.Collection getPlugins()> ==> <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: java.util.Collection getPlugins()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.atlassian.plugin.PluginAccessor: java.util.Collection getPlugins(java.util.function.Predicate)>(r1) in <com.atlassian.plugin.manager.ForwardingPluginAccessor: java.util.Collection getPlugins(java.util.function.Predicate)> ==> <com.atlassian.plugin.manager.ProductPluginAccessor: java.util.Collection getPlugins(java.util.function.Predicate)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.atlassian.plugin.PluginAccessor: java.util.Collection getPlugins(java.util.function.Predicate)>(r1) in <com.atlassian.plugin.manager.ForwardingPluginAccessor: java.util.Collection getPlugins(java.util.function.Predicate)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.Collection getPlugins(java.util.function.Predicate)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.atlassian.plugin.PluginAccessor: java.util.Collection getPlugins(java.util.function.Predicate)>(r1) in <com.atlassian.plugin.manager.ForwardingPluginAccessor: java.util.Collection getPlugins(java.util.function.Predicate)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: java.util.Collection getPlugins(java.util.function.Predicate)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.atlassian.plugin.PluginAccessor: java.util.Collection getPlugins(java.util.function.Predicate)>(r1) in <com.atlassian.plugin.manager.ForwardingPluginAccessor: java.util.Collection getPlugins(java.util.function.Predicate)> ==> <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: java.util.Collection getPlugins(java.util.function.Predicate)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<com.atlassian.plugin.PluginAccessor: boolean isPluginEnabled(java.lang.String)>(r1) in <com.atlassian.plugin.manager.ForwardingPluginAccessor: boolean isPluginEnabled(java.lang.String)> ==> <com.atlassian.plugin.manager.ProductPluginAccessor: boolean isPluginEnabled(java.lang.String)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<com.atlassian.plugin.PluginAccessor: boolean isPluginEnabled(java.lang.String)>(r1) in <com.atlassian.plugin.manager.ForwardingPluginAccessor: boolean isPluginEnabled(java.lang.String)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase: boolean isPluginEnabled(java.lang.String)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<com.atlassian.plugin.PluginAccessor: boolean isPluginEnabled(java.lang.String)>(r1) in <com.atlassian.plugin.manager.ForwardingPluginAccessor: boolean isPluginEnabled(java.lang.String)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: boolean isPluginEnabled(java.lang.String)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<com.atlassian.plugin.PluginAccessor: boolean isPluginEnabled(java.lang.String)>(r1) in <com.atlassian.plugin.manager.ForwardingPluginAccessor: boolean isPluginEnabled(java.lang.String)> ==> <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: boolean isPluginEnabled(java.lang.String)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<com.atlassian.plugin.PluginAccessor: boolean isPluginModuleEnabled(java.lang.String)>(r1) in <com.atlassian.plugin.manager.ForwardingPluginAccessor: boolean isPluginModuleEnabled(java.lang.String)> ==> <com.atlassian.plugin.manager.ProductPluginAccessor: boolean isPluginModuleEnabled(java.lang.String)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<com.atlassian.plugin.PluginAccessor: boolean isPluginModuleEnabled(java.lang.String)>(r1) in <com.atlassian.plugin.manager.ForwardingPluginAccessor: boolean isPluginModuleEnabled(java.lang.String)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase: boolean isPluginModuleEnabled(java.lang.String)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<com.atlassian.plugin.PluginAccessor: boolean isPluginModuleEnabled(java.lang.String)>(r1) in <com.atlassian.plugin.manager.ForwardingPluginAccessor: boolean isPluginModuleEnabled(java.lang.String)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: boolean isPluginModuleEnabled(java.lang.String)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<com.atlassian.plugin.PluginAccessor: boolean isPluginModuleEnabled(java.lang.String)>(r1) in <com.atlassian.plugin.manager.ForwardingPluginAccessor: boolean isPluginModuleEnabled(java.lang.String)> ==> <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: boolean isPluginModuleEnabled(java.lang.String)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<com.atlassian.plugin.PluginAccessor: boolean isSystemPlugin(java.lang.String)>(r1) in <com.atlassian.plugin.manager.ForwardingPluginAccessor: boolean isSystemPlugin(java.lang.String)> ==> <com.atlassian.plugin.manager.ProductPluginAccessor: boolean isSystemPlugin(java.lang.String)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<com.atlassian.plugin.PluginAccessor: boolean isSystemPlugin(java.lang.String)>(r1) in <com.atlassian.plugin.manager.ForwardingPluginAccessor: boolean isSystemPlugin(java.lang.String)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase: boolean isSystemPlugin(java.lang.String)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<com.atlassian.plugin.PluginAccessor: boolean isSystemPlugin(java.lang.String)>(r1) in <com.atlassian.plugin.manager.ForwardingPluginAccessor: boolean isSystemPlugin(java.lang.String)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: boolean isSystemPlugin(java.lang.String)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<com.atlassian.plugin.PluginAccessor: boolean isSystemPlugin(java.lang.String)>(r1) in <com.atlassian.plugin.manager.ForwardingPluginAccessor: boolean isSystemPlugin(java.lang.String)> ==> <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: boolean isSystemPlugin(java.lang.String)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.atlassian.plugin.PluginAccessor: java.lang.Iterable getDynamicModules(com.atlassian.plugin.Plugin)>(r1) in <com.atlassian.plugin.manager.ForwardingPluginAccessor: java.lang.Iterable getDynamicModules(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.ProductPluginAccessor: java.lang.Iterable getDynamicModules(com.atlassian.plugin.Plugin)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.atlassian.plugin.PluginAccessor: java.lang.Iterable getDynamicModules(com.atlassian.plugin.Plugin)>(r1) in <com.atlassian.plugin.manager.ForwardingPluginAccessor: java.lang.Iterable getDynamicModules(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.lang.Iterable getDynamicModules(com.atlassian.plugin.Plugin)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.atlassian.plugin.PluginAccessor: java.lang.Iterable getDynamicModules(com.atlassian.plugin.Plugin)>(r1) in <com.atlassian.plugin.manager.ForwardingPluginAccessor: java.lang.Iterable getDynamicModules(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Iterable getDynamicModules(com.atlassian.plugin.Plugin)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.atlassian.plugin.PluginAccessor: java.lang.Iterable getDynamicModules(com.atlassian.plugin.Plugin)>(r1) in <com.atlassian.plugin.manager.ForwardingPluginAccessor: java.lang.Iterable getDynamicModules(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: java.lang.Iterable getDynamicModules(com.atlassian.plugin.Plugin)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor$ByModuleClassCacheLoader: java.util.List load(java.lang.Class)>($r2) in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor$ByModuleClassCacheLoader: java.lang.Object load(java.lang.Object)> ==> <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor$ByModuleClassCacheLoader: java.util.List load(java.lang.Class)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<com.atlassian.plugin.PluginAccessor: java.util.List getEnabledModuleDescriptorsByClass(java.lang.Class)>(r2) in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor$ByModuleDescriptorClassCacheLoader: java.util.List load(java.lang.Class)> ==> <com.atlassian.plugin.manager.ProductPluginAccessor: java.util.List getEnabledModuleDescriptorsByClass(java.lang.Class)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<com.atlassian.plugin.PluginAccessor: java.util.List getEnabledModuleDescriptorsByClass(java.lang.Class)>(r2) in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor$ByModuleDescriptorClassCacheLoader: java.util.List load(java.lang.Class)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.List getEnabledModuleDescriptorsByClass(java.lang.Class)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<com.atlassian.plugin.PluginAccessor: java.util.List getEnabledModuleDescriptorsByClass(java.lang.Class)>(r2) in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor$ByModuleDescriptorClassCacheLoader: java.util.List load(java.lang.Class)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: java.util.List getEnabledModuleDescriptorsByClass(java.lang.Class)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<com.atlassian.plugin.PluginAccessor: java.util.List getEnabledModuleDescriptorsByClass(java.lang.Class)>(r2) in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor$ByModuleDescriptorClassCacheLoader: java.util.List load(java.lang.Class)> ==> <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: java.util.List getEnabledModuleDescriptorsByClass(java.lang.Class)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor$ByModuleDescriptorClassCacheLoader: java.util.List load(java.lang.Class)>($r2) in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor$ByModuleDescriptorClassCacheLoader: java.lang.Object load(java.lang.Object)> ==> <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor$ByModuleDescriptorClassCacheLoader: java.util.List load(java.lang.Class)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.factories.XmlDynamicPluginFactory: void <init>(java.util.Set)>($r3) in <com.atlassian.plugin.factories.XmlDynamicPluginFactory: void <init>(com.atlassian.plugin.Application)> ==> <com.atlassian.plugin.factories.XmlDynamicPluginFactory: void <init>(java.util.Set)>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.parsers.XmlDescriptorParserFactory: void <init>()>() in <com.atlassian.plugin.factories.XmlDynamicPluginFactory: void <init>(java.util.Set)> ==> <com.atlassian.plugin.parsers.XmlDescriptorParserFactory: void <init>()>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.factories.AbstractPluginFactory: void <init>(com.atlassian.plugin.parsers.DescriptorParserFactory,java.util.Set)>($r1, r2) in <com.atlassian.plugin.factories.XmlDynamicPluginFactory: void <init>(java.util.Set)> ==> <com.atlassian.plugin.factories.AbstractPluginFactory: void <init>(com.atlassian.plugin.parsers.DescriptorParserFactory,java.util.Set)>
SPECIAL edge: $r2 = specialinvoke r0.<com.atlassian.plugin.factories.AbstractPluginFactory: java.lang.String canCreate(com.atlassian.plugin.PluginArtifact)>(r1) in <com.atlassian.plugin.factories.XmlDynamicPluginFactory: java.lang.String canCreate(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.factories.AbstractPluginFactory: java.lang.String canCreate(com.atlassian.plugin.PluginArtifact)>
INTERFACE edge: interfaceinvoke $r6.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("There was an error parsing the plugin descriptor for \'{}\'", r1) in <com.atlassian.plugin.factories.XmlDynamicPluginFactory: java.lang.String canCreate(com.atlassian.plugin.PluginArtifact)> ==> <org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke r0.<com.atlassian.plugin.PluginArtifact: java.io.File toFile()>() in <com.atlassian.plugin.factories.XmlDynamicPluginFactory: com.atlassian.plugin.Plugin create(com.atlassian.plugin.PluginArtifact,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.PluginArtifact: java.io.File toFile()>
INTERFACE edge: $r3 = interfaceinvoke r0.<com.atlassian.plugin.PluginArtifact: java.io.File toFile()>() in <com.atlassian.plugin.factories.XmlDynamicPluginFactory: com.atlassian.plugin.Plugin create(com.atlassian.plugin.PluginArtifact,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.JarPluginArtifact: java.io.File toFile()>
INTERFACE edge: $r3 = interfaceinvoke r0.<com.atlassian.plugin.PluginArtifact: java.io.File toFile()>() in <com.atlassian.plugin.factories.XmlDynamicPluginFactory: com.atlassian.plugin.Plugin create(com.atlassian.plugin.PluginArtifact,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.XmlPluginArtifact: java.io.File toFile()>
SPECIAL edge: specialinvoke $r22.<java.io.FileInputStream: void <init>(java.io.File)>($r3) in <com.atlassian.plugin.factories.XmlDynamicPluginFactory: com.atlassian.plugin.Plugin create(com.atlassian.plugin.PluginArtifact,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.io.FileInputStream: void <init>(java.io.File)>
VIRTUAL edge: virtualinvoke $r22.<java.io.InputStream: void close()>() in <com.atlassian.plugin.factories.XmlDynamicPluginFactory: com.atlassian.plugin.Plugin create(com.atlassian.plugin.PluginArtifact,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.io.FileInputStream: void close()>
VIRTUAL edge: virtualinvoke $r22.<java.io.InputStream: void close()>() in <com.atlassian.plugin.factories.XmlDynamicPluginFactory: com.atlassian.plugin.Plugin create(com.atlassian.plugin.PluginArtifact,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.io.FileInputStream: void close()>
VIRTUAL edge: virtualinvoke $r22.<java.io.InputStream: void close()>() in <com.atlassian.plugin.factories.XmlDynamicPluginFactory: com.atlassian.plugin.Plugin create(com.atlassian.plugin.PluginArtifact,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.io.FileInputStream: void close()>
INTERFACE edge: r18 = interfaceinvoke $r6.<com.atlassian.plugin.parsers.DescriptorParserFactory: com.atlassian.plugin.parsers.DescriptorParser getInstance(java.io.InputStream,java.util.Set)>($r22, $r5) in <com.atlassian.plugin.factories.XmlDynamicPluginFactory: com.atlassian.plugin.Plugin create(com.atlassian.plugin.PluginArtifact,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.parsers.XmlDescriptorParserFactory: com.atlassian.plugin.parsers.DescriptorParser getInstance(java.io.InputStream,java.util.Set)>
SPECIAL edge: specialinvoke $r23.<com.atlassian.plugin.impl.XmlDynamicPlugin: void <init>(com.atlassian.plugin.PluginArtifact)>(r0) in <com.atlassian.plugin.factories.XmlDynamicPluginFactory: com.atlassian.plugin.Plugin create(com.atlassian.plugin.PluginArtifact,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.impl.XmlDynamicPlugin: void <init>(com.atlassian.plugin.PluginArtifact)>
INTERFACE edge: r8 = interfaceinvoke r18.<com.atlassian.plugin.parsers.DescriptorParser: com.atlassian.plugin.Plugin configurePlugin(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin)>(r1, $r23) in <com.atlassian.plugin.factories.XmlDynamicPluginFactory: com.atlassian.plugin.Plugin create(com.atlassian.plugin.PluginArtifact,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.Plugin configurePlugin(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin)>
VIRTUAL edge: virtualinvoke $r15.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r11) in <com.atlassian.plugin.factories.XmlDynamicPluginFactory: com.atlassian.plugin.Plugin create(com.atlassian.plugin.PluginArtifact,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.lang.Throwable: void addSuppressed(java.lang.Throwable)>
SPECIAL edge: specialinvoke $r24.<com.atlassian.plugin.PluginParseException: void <init>(java.lang.Throwable)>($r9) in <com.atlassian.plugin.factories.XmlDynamicPluginFactory: com.atlassian.plugin.Plugin create(com.atlassian.plugin.PluginArtifact,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.PluginParseException: void <init>(java.lang.Throwable)>
SPECIAL edge: specialinvoke $r5.<com.atlassian.plugin.PluginException: void <init>(java.lang.String)>("cannot create modules for an XmlDynamicPlugin") in <com.atlassian.plugin.factories.XmlDynamicPluginFactory: com.atlassian.plugin.ModuleDescriptor createModule(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.PluginException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.impl.AbstractPlugin: void <init>(com.atlassian.plugin.PluginArtifact)>(r1) in <com.atlassian.plugin.impl.XmlDynamicPlugin: void <init>(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.impl.AbstractPlugin: void <init>(com.atlassian.plugin.PluginArtifact)>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() in <com.atlassian.plugin.impl.XmlDynamicPlugin: java.lang.ClassLoader getClassLoader()> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>() in <com.atlassian.plugin.impl.XmlDynamicPlugin: java.lang.ClassLoader getClassLoader()> ==> <java.lang.Class: java.lang.ClassLoader getClassLoader()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() in <com.atlassian.plugin.impl.XmlDynamicPlugin: java.net.URL getResource(java.lang.String)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() in <com.atlassian.plugin.impl.XmlDynamicPlugin: java.io.InputStream getResourceAsStream(java.lang.String)> ==> <java.lang.Object: java.lang.Class getClass()>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void <init>(com.atlassian.plugin.module.ModuleFactory)>(r1) in <com.atlassian.plugin.eventlistener.descriptors.EventListenerModuleDescriptor: void <init>(com.atlassian.plugin.module.ModuleFactory,com.atlassian.event.api.EventPublisher)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void <init>(com.atlassian.plugin.module.ModuleFactory)>
SPECIAL edge: specialinvoke $r2.<com.atlassian.plugin.eventlistener.descriptors.EventListenerModuleDescriptor$1: void <init>(com.atlassian.plugin.eventlistener.descriptors.EventListenerModuleDescriptor)>(r0) in <com.atlassian.plugin.eventlistener.descriptors.EventListenerModuleDescriptor: void <init>(com.atlassian.plugin.module.ModuleFactory,com.atlassian.event.api.EventPublisher)> ==> <com.atlassian.plugin.eventlistener.descriptors.EventListenerModuleDescriptor$1: void <init>(com.atlassian.plugin.eventlistener.descriptors.EventListenerModuleDescriptor)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void init(com.atlassian.plugin.Plugin,org.dom4j.Element)>(r1, r2) in <com.atlassian.plugin.eventlistener.descriptors.EventListenerModuleDescriptor: void init(com.atlassian.plugin.Plugin,org.dom4j.Element)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void init(com.atlassian.plugin.Plugin,org.dom4j.Element)>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.eventlistener.descriptors.EventListenerModuleDescriptor: void checkPermissions()>() in <com.atlassian.plugin.eventlistener.descriptors.EventListenerModuleDescriptor: void init(com.atlassian.plugin.Plugin,org.dom4j.Element)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void checkPermissions()>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void enabled()>() in <com.atlassian.plugin.eventlistener.descriptors.EventListenerModuleDescriptor: void enabled()> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void enabled()>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.atlassian.plugin.eventlistener.descriptors.EventListenerModuleDescriptor: java.lang.Object getModule()>() in <com.atlassian.plugin.eventlistener.descriptors.EventListenerModuleDescriptor: void enabled()> ==> <com.atlassian.plugin.eventlistener.descriptors.EventListenerModuleDescriptor: java.lang.Object getModule()>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.atlassian.plugin.eventlistener.descriptors.EventListenerModuleDescriptor: java.lang.Object getModule()>() in <com.atlassian.plugin.eventlistener.descriptors.EventListenerModuleDescriptor: void disabled()> ==> <com.atlassian.plugin.eventlistener.descriptors.EventListenerModuleDescriptor: java.lang.Object getModule()>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void disabled()>() in <com.atlassian.plugin.eventlistener.descriptors.EventListenerModuleDescriptor: void disabled()> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void disabled()>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.util.zip.AbstractUnzipper: void <init>()>() in <com.atlassian.plugin.util.zip.FileUnzipper: void <init>(java.io.File,java.io.File)> ==> <com.atlassian.plugin.util.zip.AbstractUnzipper: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.io.File: boolean isFile()>() in <com.atlassian.plugin.util.zip.FileUnzipper: void unzip()> ==> <java.io.File: boolean isFile()>
SPECIAL edge: $r3 = specialinvoke r0.<com.atlassian.plugin.util.zip.FileUnzipper: com.atlassian.plugin.util.zip.StreamUnzipper getStreamUnzipper()>() in <com.atlassian.plugin.util.zip.FileUnzipper: void unzip()> ==> <com.atlassian.plugin.util.zip.FileUnzipper: com.atlassian.plugin.util.zip.StreamUnzipper getStreamUnzipper()>
VIRTUAL edge: virtualinvoke $r3.<com.atlassian.plugin.util.zip.StreamUnzipper: void unzip()>() in <com.atlassian.plugin.util.zip.FileUnzipper: void unzip()> ==> <com.atlassian.plugin.util.zip.StreamUnzipper: void unzip()>
SPECIAL edge: $r1 = specialinvoke r0.<com.atlassian.plugin.util.zip.FileUnzipper: com.atlassian.plugin.util.zip.StreamUnzipper getStreamUnzipper()>() in <com.atlassian.plugin.util.zip.FileUnzipper: java.util.zip.ZipEntry[] entries()> ==> <com.atlassian.plugin.util.zip.FileUnzipper: com.atlassian.plugin.util.zip.StreamUnzipper getStreamUnzipper()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.atlassian.plugin.util.zip.StreamUnzipper: java.util.zip.ZipEntry[] entries()>() in <com.atlassian.plugin.util.zip.FileUnzipper: java.util.zip.ZipEntry[] entries()> ==> <com.atlassian.plugin.util.zip.StreamUnzipper: java.util.zip.ZipEntry[] entries()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.io.File: boolean isFile()>() in <com.atlassian.plugin.util.zip.FileUnzipper: java.io.File unzipFileInArchive(java.lang.String)> ==> <java.io.File: boolean isFile()>
SPECIAL edge: $r4 = specialinvoke r0.<com.atlassian.plugin.util.zip.FileUnzipper: com.atlassian.plugin.util.zip.StreamUnzipper getStreamUnzipper()>() in <com.atlassian.plugin.util.zip.FileUnzipper: java.io.File unzipFileInArchive(java.lang.String)> ==> <com.atlassian.plugin.util.zip.FileUnzipper: com.atlassian.plugin.util.zip.StreamUnzipper getStreamUnzipper()>
VIRTUAL edge: r5 = virtualinvoke $r4.<com.atlassian.plugin.util.zip.StreamUnzipper: java.io.File unzipFileInArchive(java.lang.String)>(r3) in <com.atlassian.plugin.util.zip.FileUnzipper: java.io.File unzipFileInArchive(java.lang.String)> ==> <com.atlassian.plugin.util.zip.StreamUnzipper: java.io.File unzipFileInArchive(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r6.<java.io.File: java.lang.String getAbsolutePath()>() in <com.atlassian.plugin.util.zip.FileUnzipper: java.io.File unzipFileInArchive(java.lang.String)> ==> <java.io.File: java.lang.String getAbsolutePath()>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.util.zip.AbstractUnzipper: void <init>()>() in <com.atlassian.plugin.util.zip.StreamUnzipper: void <init>(java.io.InputStream,java.io.File)> ==> <com.atlassian.plugin.util.zip.AbstractUnzipper: void <init>()>
SPECIAL edge: specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("zip stream cannot be null") in <com.atlassian.plugin.util.zip.StreamUnzipper: void <init>(java.io.InputStream,java.io.File)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r2.<java.util.zip.ZipInputStream: void <init>(java.io.InputStream)>(r1) in <com.atlassian.plugin.util.zip.StreamUnzipper: void <init>(java.io.InputStream,java.io.File)> ==> <java.util.zip.ZipInputStream: void <init>(java.io.InputStream)>
VIRTUAL edge: r10 = virtualinvoke $r1.<java.util.zip.ZipInputStream: java.util.zip.ZipEntry getNextEntry()>() in <com.atlassian.plugin.util.zip.StreamUnzipper: void unzip()> ==> <java.util.jar.JarInputStream: java.util.zip.ZipEntry getNextEntry()>
VIRTUAL edge: r10 = virtualinvoke $r1.<java.util.zip.ZipInputStream: java.util.zip.ZipEntry getNextEntry()>() in <com.atlassian.plugin.util.zip.StreamUnzipper: void unzip()> ==> <java.util.zip.ZipInputStream: java.util.zip.ZipEntry getNextEntry()>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.util.zip.StreamUnzipper: java.io.File saveEntry(java.io.InputStream,java.util.zip.ZipEntry)>($r3, r10) in <com.atlassian.plugin.util.zip.StreamUnzipper: void unzip()> ==> <com.atlassian.plugin.util.zip.AbstractUnzipper: java.io.File saveEntry(java.io.InputStream,java.util.zip.ZipEntry)>
VIRTUAL edge: virtualinvoke $r5.<java.util.zip.ZipInputStream: void closeEntry()>() in <com.atlassian.plugin.util.zip.StreamUnzipper: void unzip()> ==> <java.util.zip.ZipInputStream: void closeEntry()>
VIRTUAL edge: r10 = virtualinvoke $r6.<java.util.zip.ZipInputStream: java.util.zip.ZipEntry getNextEntry()>() in <com.atlassian.plugin.util.zip.StreamUnzipper: void unzip()> ==> <java.util.jar.JarInputStream: java.util.zip.ZipEntry getNextEntry()>
VIRTUAL edge: r10 = virtualinvoke $r6.<java.util.zip.ZipInputStream: java.util.zip.ZipEntry getNextEntry()>() in <com.atlassian.plugin.util.zip.StreamUnzipper: void unzip()> ==> <java.util.zip.ZipInputStream: java.util.zip.ZipEntry getNextEntry()>
VIRTUAL edge: r11 = virtualinvoke $r1.<java.util.zip.ZipInputStream: java.util.zip.ZipEntry getNextEntry()>() in <com.atlassian.plugin.util.zip.StreamUnzipper: java.io.File unzipFileInArchive(java.lang.String)> ==> <java.util.jar.JarInputStream: java.util.zip.ZipEntry getNextEntry()>
VIRTUAL edge: r11 = virtualinvoke $r1.<java.util.zip.ZipInputStream: java.util.zip.ZipEntry getNextEntry()>() in <com.atlassian.plugin.util.zip.StreamUnzipper: java.io.File unzipFileInArchive(java.lang.String)> ==> <java.util.zip.ZipInputStream: java.util.zip.ZipEntry getNextEntry()>
VIRTUAL edge: r12 = virtualinvoke r11.<java.util.zip.ZipEntry: java.lang.String getName()>() in <com.atlassian.plugin.util.zip.StreamUnzipper: java.io.File unzipFileInArchive(java.lang.String)> ==> <java.util.jar.JarEntry: java.lang.String getName()>
VIRTUAL edge: r12 = virtualinvoke r11.<java.util.zip.ZipEntry: java.lang.String getName()>() in <com.atlassian.plugin.util.zip.StreamUnzipper: java.io.File unzipFileInArchive(java.lang.String)> ==> <java.util.zip.ZipEntry: java.lang.String getName()>
VIRTUAL edge: $z1 = virtualinvoke r12.<java.lang.String: boolean startsWith(java.lang.String)>("/") in <com.atlassian.plugin.util.zip.StreamUnzipper: java.io.File unzipFileInArchive(java.lang.String)> ==> <java.lang.String: boolean startsWith(java.lang.String)>
VIRTUAL edge: r12 = virtualinvoke r12.<java.lang.String: java.lang.String substring(int)>(1) in <com.atlassian.plugin.util.zip.StreamUnzipper: java.io.File unzipFileInArchive(java.lang.String)> ==> <java.lang.String: java.lang.String substring(int)>
VIRTUAL edge: $z2 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>(r12) in <com.atlassian.plugin.util.zip.StreamUnzipper: java.io.File unzipFileInArchive(java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: r10 = virtualinvoke r0.<com.atlassian.plugin.util.zip.StreamUnzipper: java.io.File saveEntry(java.io.InputStream,java.util.zip.ZipEntry)>($r6, r11) in <com.atlassian.plugin.util.zip.StreamUnzipper: java.io.File unzipFileInArchive(java.lang.String)> ==> <com.atlassian.plugin.util.zip.AbstractUnzipper: java.io.File saveEntry(java.io.InputStream,java.util.zip.ZipEntry)>
VIRTUAL edge: virtualinvoke $r4.<java.util.zip.ZipInputStream: void closeEntry()>() in <com.atlassian.plugin.util.zip.StreamUnzipper: java.io.File unzipFileInArchive(java.lang.String)> ==> <java.util.zip.ZipInputStream: void closeEntry()>
VIRTUAL edge: r11 = virtualinvoke $r5.<java.util.zip.ZipInputStream: java.util.zip.ZipEntry getNextEntry()>() in <com.atlassian.plugin.util.zip.StreamUnzipper: java.io.File unzipFileInArchive(java.lang.String)> ==> <java.util.jar.JarInputStream: java.util.zip.ZipEntry getNextEntry()>
VIRTUAL edge: r11 = virtualinvoke $r5.<java.util.zip.ZipInputStream: java.util.zip.ZipEntry getNextEntry()>() in <com.atlassian.plugin.util.zip.StreamUnzipper: java.io.File unzipFileInArchive(java.lang.String)> ==> <java.util.zip.ZipInputStream: java.util.zip.ZipEntry getNextEntry()>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.atlassian.plugin.util.zip.StreamUnzipper: java.util.zip.ZipEntry[] entries(java.util.zip.ZipInputStream)>($r1) in <com.atlassian.plugin.util.zip.StreamUnzipper: java.util.zip.ZipEntry[] entries()> ==> <com.atlassian.plugin.util.zip.AbstractUnzipper: java.util.zip.ZipEntry[] entries(java.util.zip.ZipInputStream)>
SPECIAL edge: specialinvoke $r3.<com.atlassian.plugin.DefaultPluginArtifactFactory: void <init>()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: void <init>(com.atlassian.plugin.loaders.classloading.Scanner,java.util.List,com.atlassian.plugin.event.PluginEventManager)> ==> <com.atlassian.plugin.DefaultPluginArtifactFactory: void <init>()>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.loaders.ScanningPluginLoader: void <init>(com.atlassian.plugin.loaders.classloading.Scanner,java.util.List,com.atlassian.plugin.PluginArtifactFactory,com.atlassian.plugin.event.PluginEventManager)>(r1, r2, $r3, r4) in <com.atlassian.plugin.loaders.ScanningPluginLoader: void <init>(com.atlassian.plugin.loaders.classloading.Scanner,java.util.List,com.atlassian.plugin.event.PluginEventManager)> ==> <com.atlassian.plugin.loaders.ScanningPluginLoader: void <init>(com.atlassian.plugin.loaders.classloading.Scanner,java.util.List,com.atlassian.plugin.PluginArtifactFactory,com.atlassian.plugin.event.PluginEventManager)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: void <init>(com.atlassian.plugin.loaders.classloading.Scanner,java.util.List,com.atlassian.plugin.PluginArtifactFactory,com.atlassian.plugin.event.PluginEventManager)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r7.<java.util.TreeMap: void <init>()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: void <init>(com.atlassian.plugin.loaders.classloading.Scanner,java.util.List,com.atlassian.plugin.PluginArtifactFactory,com.atlassian.plugin.event.PluginEventManager)> ==> <java.util.TreeMap: void <init>()>
SPECIAL edge: specialinvoke $r9.<java.util.ArrayList: void <init>(java.util.Collection)>(r1) in <com.atlassian.plugin.loaders.ScanningPluginLoader: void <init>(com.atlassian.plugin.loaders.classloading.Scanner,java.util.List,com.atlassian.plugin.PluginArtifactFactory,com.atlassian.plugin.event.PluginEventManager)> ==> <java.util.ArrayList: void <init>(java.util.Collection)>
INTERFACE edge: interfaceinvoke r3.<com.atlassian.plugin.event.PluginEventManager: void register(java.lang.Object)>(r0) in <com.atlassian.plugin.loaders.ScanningPluginLoader: void <init>(com.atlassian.plugin.loaders.classloading.Scanner,java.util.List,com.atlassian.plugin.PluginArtifactFactory,com.atlassian.plugin.event.PluginEventManager)> ==> <com.atlassian.plugin.event.impl.DefaultPluginEventManager: void register(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r1.<com.atlassian.plugin.loaders.classloading.Scanner: java.util.Collection scan()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.DirectoryScanner: java.util.Collection scan()>
INTERFACE edge: interfaceinvoke $r1.<com.atlassian.plugin.loaders.classloading.Scanner: java.util.Collection scan()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.classloading.EmptyScanner: java.util.Collection scan()>
INTERFACE edge: interfaceinvoke $r1.<com.atlassian.plugin.loaders.classloading.Scanner: java.util.Collection scan()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.RosterFileScanner: java.util.Collection scan()>
INTERFACE edge: interfaceinvoke $r1.<com.atlassian.plugin.loaders.classloading.Scanner: java.util.Collection scan()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.classloading.ForwardingScanner: java.util.Collection scan()>
INTERFACE edge: interfaceinvoke $r1.<com.atlassian.plugin.loaders.classloading.Scanner: java.util.Collection scan()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.FileListScanner: java.util.Collection scan()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<com.atlassian.plugin.loaders.classloading.Scanner: java.util.Collection getDeploymentUnits()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.DirectoryScanner: java.util.Collection getDeploymentUnits()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<com.atlassian.plugin.loaders.classloading.Scanner: java.util.Collection getDeploymentUnits()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.classloading.EmptyScanner: java.util.Collection getDeploymentUnits()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<com.atlassian.plugin.loaders.classloading.Scanner: java.util.Collection getDeploymentUnits()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.RosterFileScanner: java.util.Collection getDeploymentUnits()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<com.atlassian.plugin.loaders.classloading.Scanner: java.util.Collection getDeploymentUnits()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.classloading.ForwardingScanner: java.util.Collection getDeploymentUnits()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<com.atlassian.plugin.loaders.classloading.Scanner: java.util.Collection getDeploymentUnits()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.FileListScanner: java.util.Collection getDeploymentUnits()>
INTERFACE edge: r5 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r5 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r5 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r5 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r5 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: r5 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
VIRTUAL edge: r17 = virtualinvoke r0.<com.atlassian.plugin.loaders.ScanningPluginLoader: com.atlassian.plugin.Plugin deployPluginFromUnit(com.atlassian.plugin.loaders.classloading.DeploymentUnit,com.atlassian.plugin.ModuleDescriptorFactory)>(r13, r14) in <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.ScanningPluginLoader: com.atlassian.plugin.Plugin deployPluginFromUnit(com.atlassian.plugin.loaders.classloading.DeploymentUnit,com.atlassian.plugin.ModuleDescriptorFactory)>
VIRTUAL edge: r18 = virtualinvoke r0.<com.atlassian.plugin.loaders.ScanningPluginLoader: com.atlassian.plugin.Plugin postProcess(com.atlassian.plugin.Plugin)>(r17) in <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.BundledPluginLoader: com.atlassian.plugin.Plugin postProcess(com.atlassian.plugin.Plugin)>
VIRTUAL edge: r18 = virtualinvoke r0.<com.atlassian.plugin.loaders.ScanningPluginLoader: com.atlassian.plugin.Plugin postProcess(com.atlassian.plugin.Plugin)>(r17) in <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.ScanningPluginLoader: com.atlassian.plugin.Plugin postProcess(com.atlassian.plugin.Plugin)>
INTERFACE edge: interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r13, r18) in <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r13, r18) in <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r13, r18) in <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r13, r18) in <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: $r7 = interfaceinvoke $r6.<com.atlassian.plugin.loaders.classloading.Scanner: java.util.Collection getDeploymentUnits()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.DirectoryScanner: java.util.Collection getDeploymentUnits()>
INTERFACE edge: $r7 = interfaceinvoke $r6.<com.atlassian.plugin.loaders.classloading.Scanner: java.util.Collection getDeploymentUnits()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.classloading.EmptyScanner: java.util.Collection getDeploymentUnits()>
INTERFACE edge: $r7 = interfaceinvoke $r6.<com.atlassian.plugin.loaders.classloading.Scanner: java.util.Collection getDeploymentUnits()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.RosterFileScanner: java.util.Collection getDeploymentUnits()>
INTERFACE edge: $r7 = interfaceinvoke $r6.<com.atlassian.plugin.loaders.classloading.Scanner: java.util.Collection getDeploymentUnits()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.classloading.ForwardingScanner: java.util.Collection getDeploymentUnits()>
INTERFACE edge: $r7 = interfaceinvoke $r6.<com.atlassian.plugin.loaders.classloading.Scanner: java.util.Collection getDeploymentUnits()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.FileListScanner: java.util.Collection getDeploymentUnits()>
INTERFACE edge: $z1 = interfaceinvoke $r7.<java.util.Collection: boolean isEmpty()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.HashSet: boolean isEmpty()>
INTERFACE edge: $z1 = interfaceinvoke $r7.<java.util.Collection: boolean isEmpty()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.AbstractCollection: boolean isEmpty()>
INTERFACE edge: $z1 = interfaceinvoke $r7.<java.util.Collection: boolean isEmpty()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.ArrayDeque: boolean isEmpty()>
INTERFACE edge: $z1 = interfaceinvoke $r7.<java.util.Collection: boolean isEmpty()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.concurrent.CopyOnWriteArraySet: boolean isEmpty()>
INTERFACE edge: $z1 = interfaceinvoke $r7.<java.util.Collection: boolean isEmpty()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.TreeSet: boolean isEmpty()>
INTERFACE edge: $z1 = interfaceinvoke $r7.<java.util.Collection: boolean isEmpty()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.ArrayList: boolean isEmpty()>
INTERFACE edge: interfaceinvoke $r11.<org.slf4j.Logger: void info(java.lang.String)>("No plugins found to be deployed") in <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <org.slf4j.Logger: void info(java.lang.String)>
INTERFACE edge: $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Collection values()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.HashMap: java.util.Collection values()>
INTERFACE edge: $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Collection values()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.Hashtable: java.util.Collection values()>
INTERFACE edge: $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Collection values()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.AbstractMap: java.util.Collection values()>
INTERFACE edge: $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Collection values()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.jar.Attributes: java.util.Collection values()>
CLINIT edge: $r19 = <com.atlassian.plugin.loaders.ScanningPluginLoader: org.slf4j.Logger log> in <com.atlassian.plugin.loaders.ScanningPluginLoader: com.atlassian.plugin.Plugin deployPluginFromUnit(com.atlassian.plugin.loaders.classloading.DeploymentUnit,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.ScanningPluginLoader: void <clinit>()>
CLINIT edge: $r7 = <com.atlassian.plugin.loaders.ScanningPluginLoader: org.slf4j.Logger log> in <com.atlassian.plugin.loaders.ScanningPluginLoader: com.atlassian.plugin.Plugin deployPluginFromUnit(com.atlassian.plugin.loaders.classloading.DeploymentUnit,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.ScanningPluginLoader: void <clinit>()>
CLINIT edge: $r12 = <com.atlassian.plugin.loaders.ScanningPluginLoader: org.slf4j.Logger log> in <com.atlassian.plugin.loaders.ScanningPluginLoader: com.atlassian.plugin.Plugin deployPluginFromUnit(com.atlassian.plugin.loaders.classloading.DeploymentUnit,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.ScanningPluginLoader: void <clinit>()>
CLINIT edge: $r23 = <com.atlassian.plugin.loaders.ScanningPluginLoader: org.slf4j.Logger log> in <com.atlassian.plugin.loaders.ScanningPluginLoader: com.atlassian.plugin.Plugin deployPluginFromUnit(com.atlassian.plugin.loaders.classloading.DeploymentUnit,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.ScanningPluginLoader: void <clinit>()>
CLINIT edge: $r1 = <com.atlassian.plugin.loaders.BundledPluginLoader: org.slf4j.Logger log> in <com.atlassian.plugin.loaders.BundledPluginLoader: com.atlassian.plugin.Plugin postProcess(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.loaders.BundledPluginLoader: void <clinit>()>
CLINIT edge: $r1 = <com.atlassian.plugin.loaders.BundledPluginLoader: org.slf4j.Logger log> in <com.atlassian.plugin.loaders.BundledPluginLoader: com.atlassian.plugin.Plugin postProcess(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.loaders.ScanningPluginLoader: void <clinit>()>
INTERFACE edge: r2 = interfaceinvoke $r1.<com.atlassian.plugin.loaders.classloading.Scanner: java.util.Collection scan()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.DirectoryScanner: java.util.Collection scan()>
INTERFACE edge: r2 = interfaceinvoke $r1.<com.atlassian.plugin.loaders.classloading.Scanner: java.util.Collection scan()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.classloading.EmptyScanner: java.util.Collection scan()>
INTERFACE edge: r2 = interfaceinvoke $r1.<com.atlassian.plugin.loaders.classloading.Scanner: java.util.Collection scan()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.RosterFileScanner: java.util.Collection scan()>
INTERFACE edge: r2 = interfaceinvoke $r1.<com.atlassian.plugin.loaders.classloading.Scanner: java.util.Collection scan()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.classloading.ForwardingScanner: java.util.Collection scan()>
INTERFACE edge: r2 = interfaceinvoke $r1.<com.atlassian.plugin.loaders.classloading.Scanner: java.util.Collection scan()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.FileListScanner: java.util.Collection scan()>
SPECIAL edge: specialinvoke $r16.<java.util.ArrayList: void <init>()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.ArrayList: void <init>()>
INTERFACE edge: interfaceinvoke $r16.<java.util.List: boolean add(java.lang.Object)>(r15) in <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: $z1 = interfaceinvoke $r16.<java.util.List: boolean isEmpty()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.ArrayList: boolean isEmpty()>
INTERFACE edge: r5 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r5 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r5 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r5 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r5 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: r5 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z2 = interfaceinvoke $r10.<java.util.Map: boolean containsKey(java.lang.Object)>(r9) in <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.HashMap: boolean containsKey(java.lang.Object)>
INTERFACE edge: $z2 = interfaceinvoke $r10.<java.util.Map: boolean containsKey(java.lang.Object)>(r9) in <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.Hashtable: boolean containsKey(java.lang.Object)>
INTERFACE edge: $z2 = interfaceinvoke $r10.<java.util.Map: boolean containsKey(java.lang.Object)>(r9) in <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.TreeMap: boolean containsKey(java.lang.Object)>
INTERFACE edge: $z2 = interfaceinvoke $r10.<java.util.Map: boolean containsKey(java.lang.Object)>(r9) in <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.jar.Attributes: boolean containsKey(java.lang.Object)>
VIRTUAL edge: r14 = virtualinvoke r0.<com.atlassian.plugin.loaders.ScanningPluginLoader: com.atlassian.plugin.Plugin deployPluginFromUnit(com.atlassian.plugin.loaders.classloading.DeploymentUnit,com.atlassian.plugin.ModuleDescriptorFactory)>(r9, r11) in <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.ScanningPluginLoader: com.atlassian.plugin.Plugin deployPluginFromUnit(com.atlassian.plugin.loaders.classloading.DeploymentUnit,com.atlassian.plugin.ModuleDescriptorFactory)>
VIRTUAL edge: r15 = virtualinvoke r0.<com.atlassian.plugin.loaders.ScanningPluginLoader: com.atlassian.plugin.Plugin postProcess(com.atlassian.plugin.Plugin)>(r14) in <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.BundledPluginLoader: com.atlassian.plugin.Plugin postProcess(com.atlassian.plugin.Plugin)>
VIRTUAL edge: r15 = virtualinvoke r0.<com.atlassian.plugin.loaders.ScanningPluginLoader: com.atlassian.plugin.Plugin postProcess(com.atlassian.plugin.Plugin)>(r14) in <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.ScanningPluginLoader: com.atlassian.plugin.Plugin postProcess(com.atlassian.plugin.Plugin)>
INTERFACE edge: interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r9, r15) in <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r9, r15) in <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r9, r15) in <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r9, r15) in <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r7.<org.slf4j.Logger: void info(java.lang.String)>("No plugins found to be installed") in <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <org.slf4j.Logger: void info(java.lang.String)>
INTERFACE edge: $r1 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginState getPluginState()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: void removePlugin(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: com.atlassian.plugin.PluginState getPluginState()>
INTERFACE edge: $r1 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginState getPluginState()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: void removePlugin(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginState getPluginState()>
INTERFACE edge: $r19 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: void removePlugin(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r19 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: void removePlugin(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
INTERFACE edge: $z0 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: boolean isUninstallable()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: void removePlugin(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.DefaultDynamicPlugin: boolean isUninstallable()>
INTERFACE edge: $z0 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: boolean isUninstallable()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: void removePlugin(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.XmlDynamicPlugin: boolean isUninstallable()>
INTERFACE edge: $z0 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: boolean isUninstallable()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: void removePlugin(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.StaticPlugin: boolean isUninstallable()>
INTERFACE edge: $z0 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: boolean isUninstallable()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: void removePlugin(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.UnloadablePlugin: boolean isUninstallable()>
INTERFACE edge: $r12 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: void removePlugin(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r12 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: void removePlugin(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
INTERFACE edge: interfaceinvoke r0.<com.atlassian.plugin.Plugin: void uninstall()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: void removePlugin(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: void uninstall()>
INTERFACE edge: $z1 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: boolean isDeleteable()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: void removePlugin(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.DefaultDynamicPlugin: boolean isDeleteable()>
INTERFACE edge: $z1 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: boolean isDeleteable()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: void removePlugin(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.XmlDynamicPlugin: boolean isDeleteable()>
INTERFACE edge: $z1 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: boolean isDeleteable()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: void removePlugin(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.StaticPlugin: boolean isDeleteable()>
INTERFACE edge: $z1 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: boolean isDeleteable()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: void removePlugin(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.UnloadablePlugin: boolean isDeleteable()>
INTERFACE edge: $r8 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: void removePlugin(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r8 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: void removePlugin(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
SPECIAL edge: specialinvoke $r23.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: void removePlugin(com.atlassian.plugin.Plugin)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r18 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot remove enabled plugin \'") in <com.atlassian.plugin.loaders.ScanningPluginLoader: void removePlugin(com.atlassian.plugin.Plugin)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19) in <com.atlassian.plugin.loaders.ScanningPluginLoader: void removePlugin(com.atlassian.plugin.Plugin)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34) in <com.atlassian.plugin.loaders.ScanningPluginLoader: void removePlugin(com.atlassian.plugin.Plugin)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: void removePlugin(com.atlassian.plugin.Plugin)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r24.<com.atlassian.plugin.PluginException: void <init>(java.lang.String)>($r22) in <com.atlassian.plugin.loaders.ScanningPluginLoader: void removePlugin(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.PluginException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r25.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: void removePlugin(com.atlassian.plugin.Plugin)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r11 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot remove uninstallable plugin \'") in <com.atlassian.plugin.loaders.ScanningPluginLoader: void removePlugin(com.atlassian.plugin.Plugin)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12) in <com.atlassian.plugin.loaders.ScanningPluginLoader: void removePlugin(com.atlassian.plugin.Plugin)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34) in <com.atlassian.plugin.loaders.ScanningPluginLoader: void removePlugin(com.atlassian.plugin.Plugin)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: void removePlugin(com.atlassian.plugin.Plugin)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r26.<com.atlassian.plugin.PluginException: void <init>(java.lang.String)>($r15) in <com.atlassian.plugin.loaders.ScanningPluginLoader: void removePlugin(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.PluginException: void <init>(java.lang.String)>
SPECIAL edge: r4 = specialinvoke r3.<com.atlassian.plugin.loaders.ScanningPluginLoader: com.atlassian.plugin.loaders.classloading.DeploymentUnit findMatchingDeploymentUnit(com.atlassian.plugin.Plugin)>(r0) in <com.atlassian.plugin.loaders.ScanningPluginLoader: void removePlugin(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.loaders.ScanningPluginLoader: com.atlassian.plugin.loaders.classloading.DeploymentUnit findMatchingDeploymentUnit(com.atlassian.plugin.Plugin)>
SPECIAL edge: specialinvoke r3.<com.atlassian.plugin.loaders.ScanningPluginLoader: void deleteDeploymentUnit(com.atlassian.plugin.loaders.classloading.DeploymentUnit)>(r4) in <com.atlassian.plugin.loaders.ScanningPluginLoader: void removePlugin(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.loaders.ScanningPluginLoader: void deleteDeploymentUnit(com.atlassian.plugin.loaders.classloading.DeploymentUnit)>
INTERFACE edge: interfaceinvoke $r5.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r4) in <com.atlassian.plugin.loaders.ScanningPluginLoader: void removePlugin(com.atlassian.plugin.Plugin)> ==> <java.util.HashMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r4) in <com.atlassian.plugin.loaders.ScanningPluginLoader: void removePlugin(com.atlassian.plugin.Plugin)> ==> <java.util.Hashtable: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r4) in <com.atlassian.plugin.loaders.ScanningPluginLoader: void removePlugin(com.atlassian.plugin.Plugin)> ==> <java.util.TreeMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r4) in <com.atlassian.plugin.loaders.ScanningPluginLoader: void removePlugin(com.atlassian.plugin.Plugin)> ==> <java.util.jar.Attributes: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r7.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Removed plugin \'{}\'", $r8) in <com.atlassian.plugin.loaders.ScanningPluginLoader: void removePlugin(com.atlassian.plugin.Plugin)> ==> <org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: void onShutdown(com.atlassian.plugin.event.events.PluginFrameworkShutdownEvent)> ==> <java.util.HashMap: java.util.Collection values()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: void onShutdown(com.atlassian.plugin.event.events.PluginFrameworkShutdownEvent)> ==> <java.util.Hashtable: java.util.Collection values()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: void onShutdown(com.atlassian.plugin.event.events.PluginFrameworkShutdownEvent)> ==> <java.util.AbstractMap: java.util.Collection values()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: void onShutdown(com.atlassian.plugin.event.events.PluginFrameworkShutdownEvent)> ==> <java.util.jar.Attributes: java.util.Collection values()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: void onShutdown(com.atlassian.plugin.event.events.PluginFrameworkShutdownEvent)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: void onShutdown(com.atlassian.plugin.event.events.PluginFrameworkShutdownEvent)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: void onShutdown(com.atlassian.plugin.event.events.PluginFrameworkShutdownEvent)> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: void onShutdown(com.atlassian.plugin.event.events.PluginFrameworkShutdownEvent)> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: void onShutdown(com.atlassian.plugin.event.events.PluginFrameworkShutdownEvent)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: void onShutdown(com.atlassian.plugin.event.events.PluginFrameworkShutdownEvent)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z1 = interfaceinvoke r6.<com.atlassian.plugin.Plugin: boolean isUninstallable()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: void onShutdown(com.atlassian.plugin.event.events.PluginFrameworkShutdownEvent)> ==> <com.atlassian.plugin.impl.DefaultDynamicPlugin: boolean isUninstallable()>
INTERFACE edge: $z1 = interfaceinvoke r6.<com.atlassian.plugin.Plugin: boolean isUninstallable()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: void onShutdown(com.atlassian.plugin.event.events.PluginFrameworkShutdownEvent)> ==> <com.atlassian.plugin.impl.XmlDynamicPlugin: boolean isUninstallable()>
INTERFACE edge: $z1 = interfaceinvoke r6.<com.atlassian.plugin.Plugin: boolean isUninstallable()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: void onShutdown(com.atlassian.plugin.event.events.PluginFrameworkShutdownEvent)> ==> <com.atlassian.plugin.impl.StaticPlugin: boolean isUninstallable()>
INTERFACE edge: $z1 = interfaceinvoke r6.<com.atlassian.plugin.Plugin: boolean isUninstallable()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: void onShutdown(com.atlassian.plugin.event.events.PluginFrameworkShutdownEvent)> ==> <com.atlassian.plugin.impl.UnloadablePlugin: boolean isUninstallable()>
INTERFACE edge: interfaceinvoke r6.<com.atlassian.plugin.Plugin: void uninstall()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: void onShutdown(com.atlassian.plugin.event.events.PluginFrameworkShutdownEvent)> ==> <com.atlassian.plugin.impl.AbstractPlugin: void uninstall()>
INTERFACE edge: interfaceinvoke $r4.<com.atlassian.plugin.loaders.classloading.Scanner: void reset()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: void onShutdown(com.atlassian.plugin.event.events.PluginFrameworkShutdownEvent)> ==> <com.atlassian.plugin.loaders.DirectoryScanner: void reset()>
INTERFACE edge: interfaceinvoke $r4.<com.atlassian.plugin.loaders.classloading.Scanner: void reset()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: void onShutdown(com.atlassian.plugin.event.events.PluginFrameworkShutdownEvent)> ==> <com.atlassian.plugin.loaders.classloading.EmptyScanner: void reset()>
INTERFACE edge: interfaceinvoke $r4.<com.atlassian.plugin.loaders.classloading.Scanner: void reset()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: void onShutdown(com.atlassian.plugin.event.events.PluginFrameworkShutdownEvent)> ==> <com.atlassian.plugin.loaders.RosterFileScanner: void reset()>
INTERFACE edge: interfaceinvoke $r4.<com.atlassian.plugin.loaders.classloading.Scanner: void reset()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: void onShutdown(com.atlassian.plugin.event.events.PluginFrameworkShutdownEvent)> ==> <com.atlassian.plugin.loaders.classloading.ForwardingScanner: void reset()>
INTERFACE edge: interfaceinvoke $r4.<com.atlassian.plugin.loaders.classloading.Scanner: void reset()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: void onShutdown(com.atlassian.plugin.event.events.PluginFrameworkShutdownEvent)> ==> <com.atlassian.plugin.loaders.FileListScanner: void reset()>
INTERFACE edge: r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.String canLoad(com.atlassian.plugin.PluginArtifact)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.String canLoad(com.atlassian.plugin.PluginArtifact)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: r6 = interfaceinvoke r4.<com.atlassian.plugin.factories.PluginFactory: java.lang.String canCreate(com.atlassian.plugin.PluginArtifact)>(r5) in <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.String canLoad(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.factories.XmlDynamicPluginFactory: java.lang.String canCreate(com.atlassian.plugin.PluginArtifact)>
INTERFACE edge: r6 = interfaceinvoke r4.<com.atlassian.plugin.factories.PluginFactory: java.lang.String canCreate(com.atlassian.plugin.PluginArtifact)>(r5) in <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.String canLoad(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.factories.AbstractPluginFactory: java.lang.String canCreate(com.atlassian.plugin.PluginArtifact)>
SPECIAL edge: $r3 = specialinvoke r0.<com.atlassian.plugin.loaders.ScanningPluginLoader: com.atlassian.plugin.loaders.classloading.DeploymentUnit findMatchingDeploymentUnit(com.atlassian.plugin.Plugin)>(r1) in <com.atlassian.plugin.loaders.ScanningPluginLoader: void discardPlugin(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.loaders.ScanningPluginLoader: com.atlassian.plugin.loaders.classloading.DeploymentUnit findMatchingDeploymentUnit(com.atlassian.plugin.Plugin)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r3) in <com.atlassian.plugin.loaders.ScanningPluginLoader: void discardPlugin(com.atlassian.plugin.Plugin)> ==> <java.util.HashMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r3) in <com.atlassian.plugin.loaders.ScanningPluginLoader: void discardPlugin(com.atlassian.plugin.Plugin)> ==> <java.util.Hashtable: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r3) in <com.atlassian.plugin.loaders.ScanningPluginLoader: void discardPlugin(com.atlassian.plugin.Plugin)> ==> <java.util.TreeMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r3) in <com.atlassian.plugin.loaders.ScanningPluginLoader: void discardPlugin(com.atlassian.plugin.Plugin)> ==> <java.util.jar.Attributes: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: com.atlassian.plugin.ModuleDescriptor createModule(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: com.atlassian.plugin.ModuleDescriptor createModule(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: r8 = interfaceinvoke r4.<com.atlassian.plugin.factories.PluginFactory: com.atlassian.plugin.ModuleDescriptor createModule(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)>(r5, r6, r7) in <com.atlassian.plugin.loaders.ScanningPluginLoader: com.atlassian.plugin.ModuleDescriptor createModule(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.factories.XmlDynamicPluginFactory: com.atlassian.plugin.ModuleDescriptor createModule(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)>
INTERFACE edge: r8 = interfaceinvoke r4.<com.atlassian.plugin.factories.PluginFactory: com.atlassian.plugin.ModuleDescriptor createModule(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)>(r5, r6, r7) in <com.atlassian.plugin.loaders.ScanningPluginLoader: com.atlassian.plugin.ModuleDescriptor createModule(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: com.atlassian.plugin.ModuleDescriptor createModule(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.hostcontainer.SimpleConstructorHostContainer: void <init>(java.util.Map)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.HashMap: void <init>(java.util.Map)>(r2) in <com.atlassian.plugin.hostcontainer.SimpleConstructorHostContainer: void <init>(java.util.Map)> ==> <java.util.HashMap: void <init>(java.util.Map)>
INTERFACE edge: interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Lcom/atlassian/plugin/hostcontainer/HostContainer;", r0) in <com.atlassian.plugin.hostcontainer.SimpleConstructorHostContainer: void <init>(java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: $r2 = specialinvoke r0.<com.atlassian.plugin.hostcontainer.SimpleConstructorHostContainer: java.util.Collection findConstructorsLargestFirst(java.lang.Class)>(r1) in <com.atlassian.plugin.hostcontainer.SimpleConstructorHostContainer: java.lang.Object create(java.lang.Class)> ==> <com.atlassian.plugin.hostcontainer.SimpleConstructorHostContainer: java.util.Collection findConstructorsLargestFirst(java.lang.Class)>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.hostcontainer.SimpleConstructorHostContainer: java.lang.Object create(java.lang.Class)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.hostcontainer.SimpleConstructorHostContainer: java.lang.Object create(java.lang.Class)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.hostcontainer.SimpleConstructorHostContainer: java.lang.Object create(java.lang.Class)> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.hostcontainer.SimpleConstructorHostContainer: java.lang.Object create(java.lang.Class)> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.hostcontainer.SimpleConstructorHostContainer: java.lang.Object create(java.lang.Class)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.hostcontainer.SimpleConstructorHostContainer: java.lang.Object create(java.lang.Class)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke $r11.<java.util.ArrayList: void <init>()>() in <com.atlassian.plugin.hostcontainer.SimpleConstructorHostContainer: java.lang.Object create(java.lang.Class)> ==> <java.util.ArrayList: void <init>()>
INTERFACE edge: interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>($r19) in <com.atlassian.plugin.hostcontainer.SimpleConstructorHostContainer: java.lang.Object create(java.lang.Class)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: $i2 = interfaceinvoke $r11.<java.util.List: int size()>() in <com.atlassian.plugin.hostcontainer.SimpleConstructorHostContainer: java.lang.Object create(java.lang.Class)> ==> <java.util.ArrayList: int size()>
INTERFACE edge: $r14 = interfaceinvoke $r11.<java.util.List: java.lang.Object[] toArray()>() in <com.atlassian.plugin.hostcontainer.SimpleConstructorHostContainer: java.lang.Object create(java.lang.Class)> ==> <java.util.ArrayList: java.lang.Object[] toArray()>
VIRTUAL edge: r26 = virtualinvoke r10.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>() in <com.atlassian.plugin.hostcontainer.SimpleConstructorHostContainer: java.lang.Object create(java.lang.Class)> ==> <java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>
VIRTUAL edge: $r13 = virtualinvoke r10.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>() in <com.atlassian.plugin.hostcontainer.SimpleConstructorHostContainer: java.lang.Object create(java.lang.Class)> ==> <java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>
VIRTUAL edge: $r15 = virtualinvoke r10.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r14) in <com.atlassian.plugin.hostcontainer.SimpleConstructorHostContainer: java.lang.Object create(java.lang.Class)> ==> <java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>
INTERFACE edge: $z1 = interfaceinvoke $r17.<java.util.Map: boolean containsKey(java.lang.Object)>(r16) in <com.atlassian.plugin.hostcontainer.SimpleConstructorHostContainer: java.lang.Object create(java.lang.Class)> ==> <java.util.HashMap: boolean containsKey(java.lang.Object)>
INTERFACE edge: $z1 = interfaceinvoke $r17.<java.util.Map: boolean containsKey(java.lang.Object)>(r16) in <com.atlassian.plugin.hostcontainer.SimpleConstructorHostContainer: java.lang.Object create(java.lang.Class)> ==> <java.util.Hashtable: boolean containsKey(java.lang.Object)>
INTERFACE edge: $z1 = interfaceinvoke $r17.<java.util.Map: boolean containsKey(java.lang.Object)>(r16) in <com.atlassian.plugin.hostcontainer.SimpleConstructorHostContainer: java.lang.Object create(java.lang.Class)> ==> <java.util.TreeMap: boolean containsKey(java.lang.Object)>
INTERFACE edge: $z1 = interfaceinvoke $r17.<java.util.Map: boolean containsKey(java.lang.Object)>(r16) in <com.atlassian.plugin.hostcontainer.SimpleConstructorHostContainer: java.lang.Object create(java.lang.Class)> ==> <java.util.jar.Attributes: boolean containsKey(java.lang.Object)>
INTERFACE edge: $r19 = interfaceinvoke $r18.<java.util.Map: java.lang.Object get(java.lang.Object)>(r16) in <com.atlassian.plugin.hostcontainer.SimpleConstructorHostContainer: java.lang.Object create(java.lang.Class)> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r19 = interfaceinvoke $r18.<java.util.Map: java.lang.Object get(java.lang.Object)>(r16) in <com.atlassian.plugin.hostcontainer.SimpleConstructorHostContainer: java.lang.Object create(java.lang.Class)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r19 = interfaceinvoke $r18.<java.util.Map: java.lang.Object get(java.lang.Object)>(r16) in <com.atlassian.plugin.hostcontainer.SimpleConstructorHostContainer: java.lang.Object create(java.lang.Class)> ==> <java.util.TreeMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r19 = interfaceinvoke $r18.<java.util.Map: java.lang.Object get(java.lang.Object)>(r16) in <com.atlassian.plugin.hostcontainer.SimpleConstructorHostContainer: java.lang.Object create(java.lang.Class)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r19 = interfaceinvoke $r18.<java.util.Map: java.lang.Object get(java.lang.Object)>(r16) in <com.atlassian.plugin.hostcontainer.SimpleConstructorHostContainer: java.lang.Object create(java.lang.Class)> ==> <java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>
SPECIAL edge: specialinvoke $r25.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r24) in <com.atlassian.plugin.hostcontainer.SimpleConstructorHostContainer: java.lang.Object create(java.lang.Class)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>
SPECIAL edge: specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r22) in <com.atlassian.plugin.hostcontainer.SimpleConstructorHostContainer: java.lang.Object create(java.lang.Class)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>
SPECIAL edge: specialinvoke $r21.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r20) in <com.atlassian.plugin.hostcontainer.SimpleConstructorHostContainer: java.lang.Object create(java.lang.Class)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>
SPECIAL edge: specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.hostcontainer.SimpleConstructorHostContainer: java.lang.Object create(java.lang.Class)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to match any constructor for class ") in <com.atlassian.plugin.hostcontainer.SimpleConstructorHostContainer: java.lang.Object create(java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1) in <com.atlassian.plugin.hostcontainer.SimpleConstructorHostContainer: java.lang.Object create(java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.hostcontainer.SimpleConstructorHostContainer: java.lang.Object create(java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8) in <com.atlassian.plugin.hostcontainer.SimpleConstructorHostContainer: java.lang.Object create(java.lang.Class)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
STATIC edge: $r1 = staticinvoke <com.atlassian.plugin.hostcontainer.SimpleConstructorHostContainer$lambda_findConstructorsLargestFirst_0__131: java.util.Comparator bootstrap$()>() in <com.atlassian.plugin.hostcontainer.SimpleConstructorHostContainer: java.util.Collection findConstructorsLargestFirst(java.lang.Class)> ==> <com.atlassian.plugin.hostcontainer.SimpleConstructorHostContainer$lambda_findConstructorsLargestFirst_0__131: java.util.Comparator bootstrap$()>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>() in <com.atlassian.plugin.hostcontainer.SimpleConstructorHostContainer: int lambda$findConstructorsLargestFirst$0(java.lang.reflect.Constructor,java.lang.reflect.Constructor)> ==> <java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>
VIRTUAL edge: $r4 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>() in <com.atlassian.plugin.hostcontainer.SimpleConstructorHostContainer: int lambda$findConstructorsLargestFirst$0(java.lang.reflect.Constructor,java.lang.reflect.Constructor)> ==> <java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.lang.Integer: int compareTo(java.lang.Integer)>($r5) in <com.atlassian.plugin.hostcontainer.SimpleConstructorHostContainer: int lambda$findConstructorsLargestFirst$0(java.lang.reflect.Constructor,java.lang.reflect.Constructor)> ==> <java.lang.Integer: int compareTo(java.lang.Integer)>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.loaders.DirectoryScanner: void <init>(java.io.File)>(r2) in <com.atlassian.plugin.loaders.DirectoryPluginLoader: void <init>(java.io.File,java.util.List,com.atlassian.plugin.event.PluginEventManager)> ==> <com.atlassian.plugin.loaders.DirectoryScanner: void <init>(java.io.File)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.loaders.ScanningPluginLoader: void <init>(com.atlassian.plugin.loaders.classloading.Scanner,java.util.List,com.atlassian.plugin.event.PluginEventManager)>($r1, r3, r4) in <com.atlassian.plugin.loaders.DirectoryPluginLoader: void <init>(java.io.File,java.util.List,com.atlassian.plugin.event.PluginEventManager)> ==> <com.atlassian.plugin.loaders.ScanningPluginLoader: void <init>(com.atlassian.plugin.loaders.classloading.Scanner,java.util.List,com.atlassian.plugin.event.PluginEventManager)>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.loaders.DirectoryScanner: void <init>(java.io.File)>(r2) in <com.atlassian.plugin.loaders.DirectoryPluginLoader: void <init>(java.io.File,java.util.List,com.atlassian.plugin.PluginArtifactFactory,com.atlassian.plugin.event.PluginEventManager)> ==> <com.atlassian.plugin.loaders.DirectoryScanner: void <init>(java.io.File)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.loaders.ScanningPluginLoader: void <init>(com.atlassian.plugin.loaders.classloading.Scanner,java.util.List,com.atlassian.plugin.PluginArtifactFactory,com.atlassian.plugin.event.PluginEventManager)>($r1, r3, r4, r5) in <com.atlassian.plugin.loaders.DirectoryPluginLoader: void <init>(java.io.File,java.util.List,com.atlassian.plugin.PluginArtifactFactory,com.atlassian.plugin.event.PluginEventManager)> ==> <com.atlassian.plugin.loaders.ScanningPluginLoader: void <init>(com.atlassian.plugin.loaders.classloading.Scanner,java.util.List,com.atlassian.plugin.PluginArtifactFactory,com.atlassian.plugin.event.PluginEventManager)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.loaders.DirectoryScanner: void <init>(java.io.File)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.TreeMap: void <init>()>() in <com.atlassian.plugin.loaders.DirectoryScanner: void <init>(java.io.File)> ==> <java.util.TreeMap: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke r1.<java.io.File: java.lang.String getAbsolutePath()>() in <com.atlassian.plugin.loaders.DirectoryScanner: com.atlassian.plugin.loaders.classloading.DeploymentUnit locateDeploymentUnit(java.io.File)> ==> <java.io.File: java.lang.String getAbsolutePath()>
INTERFACE edge: $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3) in <com.atlassian.plugin.loaders.DirectoryScanner: com.atlassian.plugin.loaders.classloading.DeploymentUnit locateDeploymentUnit(java.io.File)> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3) in <com.atlassian.plugin.loaders.DirectoryScanner: com.atlassian.plugin.loaders.classloading.DeploymentUnit locateDeploymentUnit(java.io.File)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3) in <com.atlassian.plugin.loaders.DirectoryScanner: com.atlassian.plugin.loaders.classloading.DeploymentUnit locateDeploymentUnit(java.io.File)> ==> <java.util.TreeMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3) in <com.atlassian.plugin.loaders.DirectoryScanner: com.atlassian.plugin.loaders.classloading.DeploymentUnit locateDeploymentUnit(java.io.File)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3) in <com.atlassian.plugin.loaders.DirectoryScanner: com.atlassian.plugin.loaders.classloading.DeploymentUnit locateDeploymentUnit(java.io.File)> ==> <java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke r1.<java.io.File: java.lang.String getAbsolutePath()>() in <com.atlassian.plugin.loaders.DirectoryScanner: void clear(java.io.File)> ==> <java.io.File: java.lang.String getAbsolutePath()>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r3) in <com.atlassian.plugin.loaders.DirectoryScanner: void clear(java.io.File)> ==> <java.util.HashMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r3) in <com.atlassian.plugin.loaders.DirectoryScanner: void clear(java.io.File)> ==> <java.util.Hashtable: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r3) in <com.atlassian.plugin.loaders.DirectoryScanner: void clear(java.io.File)> ==> <java.util.TreeMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r3) in <com.atlassian.plugin.loaders.DirectoryScanner: void clear(java.io.File)> ==> <java.util.jar.Attributes: java.lang.Object remove(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.util.ArrayList: void <init>()>() in <com.atlassian.plugin.loaders.DirectoryScanner: java.util.Collection scan()> ==> <java.util.ArrayList: void <init>()>
INTERFACE edge: interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r15) in <com.atlassian.plugin.loaders.DirectoryScanner: java.util.Collection scan()> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Collection values()>() in <com.atlassian.plugin.loaders.DirectoryScanner: java.util.Collection scan()> ==> <java.util.HashMap: java.util.Collection values()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Collection values()>() in <com.atlassian.plugin.loaders.DirectoryScanner: java.util.Collection scan()> ==> <java.util.Hashtable: java.util.Collection values()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Collection values()>() in <com.atlassian.plugin.loaders.DirectoryScanner: java.util.Collection scan()> ==> <java.util.AbstractMap: java.util.Collection values()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Collection values()>() in <com.atlassian.plugin.loaders.DirectoryScanner: java.util.Collection scan()> ==> <java.util.jar.Attributes: java.util.Collection values()>
INTERFACE edge: r17 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.loaders.DirectoryScanner: java.util.Collection scan()> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r17 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.loaders.DirectoryScanner: java.util.Collection scan()> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r17 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.loaders.DirectoryScanner: java.util.Collection scan()> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r17 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.loaders.DirectoryScanner: java.util.Collection scan()> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r17 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.loaders.DirectoryScanner: java.util.Collection scan()> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: r17 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.loaders.DirectoryScanner: java.util.Collection scan()> ==> <java.util.ArrayList: java.util.Iterator iterator()>
VIRTUAL edge: $r14 = virtualinvoke r18.<com.atlassian.plugin.loaders.classloading.DeploymentUnit: java.io.File getPath()>() in <com.atlassian.plugin.loaders.DirectoryScanner: java.util.Collection scan()> ==> <com.atlassian.plugin.loaders.classloading.DeploymentUnit: java.io.File getPath()>
VIRTUAL edge: $r16 = virtualinvoke r18.<com.atlassian.plugin.loaders.classloading.DeploymentUnit: java.io.File getPath()>() in <com.atlassian.plugin.loaders.DirectoryScanner: java.util.Collection scan()> ==> <com.atlassian.plugin.loaders.classloading.DeploymentUnit: java.io.File getPath()>
VIRTUAL edge: $r15 = virtualinvoke r18.<com.atlassian.plugin.loaders.classloading.DeploymentUnit: java.io.File getPath()>() in <com.atlassian.plugin.loaders.DirectoryScanner: java.util.Collection scan()> ==> <com.atlassian.plugin.loaders.classloading.DeploymentUnit: java.io.File getPath()>
VIRTUAL edge: $z6 = virtualinvoke $r14.<java.io.File: boolean exists()>() in <com.atlassian.plugin.loaders.DirectoryScanner: java.util.Collection scan()> ==> <java.io.File: boolean exists()>
VIRTUAL edge: $z8 = virtualinvoke $r16.<java.io.File: boolean canRead()>() in <com.atlassian.plugin.loaders.DirectoryScanner: java.util.Collection scan()> ==> <java.io.File: boolean canRead()>
SPECIAL edge: specialinvoke r2.<com.atlassian.plugin.loaders.DirectoryScanner: void clear(java.util.List)>($r0) in <com.atlassian.plugin.loaders.DirectoryScanner: java.util.Collection scan()> ==> <com.atlassian.plugin.loaders.DirectoryScanner: void clear(java.util.List)>
SPECIAL edge: $z1 = specialinvoke r2.<com.atlassian.plugin.loaders.DirectoryScanner: boolean isScanned(java.io.File)>(r9) in <com.atlassian.plugin.loaders.DirectoryScanner: java.util.Collection scan()> ==> <com.atlassian.plugin.loaders.DirectoryScanner: boolean isScanned(java.io.File)>
SPECIAL edge: $z4 = specialinvoke r2.<com.atlassian.plugin.loaders.DirectoryScanner: boolean isModified(java.io.File)>(r9) in <com.atlassian.plugin.loaders.DirectoryScanner: java.util.Collection scan()> ==> <com.atlassian.plugin.loaders.DirectoryScanner: boolean isModified(java.io.File)>
VIRTUAL edge: virtualinvoke r2.<com.atlassian.plugin.loaders.DirectoryScanner: void clear(java.io.File)>(r9) in <com.atlassian.plugin.loaders.DirectoryScanner: java.util.Collection scan()> ==> <com.atlassian.plugin.loaders.DirectoryScanner: void clear(java.io.File)>
SPECIAL edge: r21 = specialinvoke r2.<com.atlassian.plugin.loaders.DirectoryScanner: com.atlassian.plugin.loaders.classloading.DeploymentUnit createAndStoreDeploymentUnit(java.io.File)>(r9) in <com.atlassian.plugin.loaders.DirectoryScanner: java.util.Collection scan()> ==> <com.atlassian.plugin.loaders.DirectoryScanner: com.atlassian.plugin.loaders.classloading.DeploymentUnit createAndStoreDeploymentUnit(java.io.File)>
SPECIAL edge: $z2 = specialinvoke r2.<com.atlassian.plugin.loaders.DirectoryScanner: boolean isScanned(java.io.File)>(r9) in <com.atlassian.plugin.loaders.DirectoryScanner: java.util.Collection scan()> ==> <com.atlassian.plugin.loaders.DirectoryScanner: boolean isScanned(java.io.File)>
SPECIAL edge: r22 = specialinvoke r2.<com.atlassian.plugin.loaders.DirectoryScanner: com.atlassian.plugin.loaders.classloading.DeploymentUnit createAndStoreDeploymentUnit(java.io.File)>(r9) in <com.atlassian.plugin.loaders.DirectoryScanner: java.util.Collection scan()> ==> <com.atlassian.plugin.loaders.DirectoryScanner: com.atlassian.plugin.loaders.classloading.DeploymentUnit createAndStoreDeploymentUnit(java.io.File)>
SPECIAL edge: specialinvoke $r5.<java.util.ArrayList: void <init>()>() in <com.atlassian.plugin.loaders.DirectoryScanner: java.util.Collection scan()> ==> <java.util.ArrayList: void <init>()>
INTERFACE edge: interfaceinvoke $r5.<java.util.Collection: boolean add(java.lang.Object)>(r21) in <com.atlassian.plugin.loaders.DirectoryScanner: java.util.Collection scan()> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<java.util.Collection: boolean add(java.lang.Object)>(r22) in <com.atlassian.plugin.loaders.DirectoryScanner: java.util.Collection scan()> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: r20 = virtualinvoke $r6.<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>($r7) in <com.atlassian.plugin.loaders.DirectoryScanner: java.util.Collection scan()> ==> <java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>
VIRTUAL edge: $r12 = virtualinvoke $r10.<java.io.File: java.lang.String getAbsolutePath()>() in <com.atlassian.plugin.loaders.DirectoryScanner: java.util.Collection scan()> ==> <java.io.File: java.lang.String getAbsolutePath()>
INTERFACE edge: interfaceinvoke $r11.<org.slf4j.Logger: void error(java.lang.String,java.lang.Object)>("listFiles returned null for directory {}", $r12) in <com.atlassian.plugin.loaders.DirectoryScanner: java.util.Collection scan()> ==> <org.slf4j.Logger: void error(java.lang.String,java.lang.Object)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>() in <com.atlassian.plugin.loaders.DirectoryScanner: java.util.Collection getDeploymentUnits()> ==> <java.util.HashMap: java.util.Collection values()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>() in <com.atlassian.plugin.loaders.DirectoryScanner: java.util.Collection getDeploymentUnits()> ==> <java.util.Hashtable: java.util.Collection values()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>() in <com.atlassian.plugin.loaders.DirectoryScanner: java.util.Collection getDeploymentUnits()> ==> <java.util.AbstractMap: java.util.Collection values()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>() in <com.atlassian.plugin.loaders.DirectoryScanner: java.util.Collection getDeploymentUnits()> ==> <java.util.jar.Attributes: java.util.Collection values()>
INTERFACE edge: interfaceinvoke $r1.<java.util.Map: void clear()>() in <com.atlassian.plugin.loaders.DirectoryScanner: void reset()> ==> <java.util.LinkedHashMap: void clear()>
INTERFACE edge: interfaceinvoke $r1.<java.util.Map: void clear()>() in <com.atlassian.plugin.loaders.DirectoryScanner: void reset()> ==> <java.util.Hashtable: void clear()>
INTERFACE edge: interfaceinvoke $r1.<java.util.Map: void clear()>() in <com.atlassian.plugin.loaders.DirectoryScanner: void reset()> ==> <java.util.TreeMap: void clear()>
INTERFACE edge: interfaceinvoke $r1.<java.util.Map: void clear()>() in <com.atlassian.plugin.loaders.DirectoryScanner: void reset()> ==> <java.util.HashMap: void clear()>
INTERFACE edge: interfaceinvoke $r1.<java.util.Map: void clear()>() in <com.atlassian.plugin.loaders.DirectoryScanner: void reset()> ==> <java.util.jar.Attributes: void clear()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.atlassian.plugin.loaders.classloading.DeploymentUnit: java.io.File getPath()>() in <com.atlassian.plugin.loaders.DirectoryScanner: void remove(com.atlassian.plugin.loaders.classloading.DeploymentUnit)> ==> <com.atlassian.plugin.loaders.classloading.DeploymentUnit: java.io.File getPath()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.io.File: java.nio.file.Path toPath()>() in <com.atlassian.plugin.loaders.DirectoryScanner: void remove(com.atlassian.plugin.loaders.classloading.DeploymentUnit)> ==> <java.io.File: java.nio.file.Path toPath()>
VIRTUAL edge: $r16 = virtualinvoke r1.<java.io.File: java.lang.String getAbsolutePath()>() in <com.atlassian.plugin.loaders.DirectoryScanner: void remove(com.atlassian.plugin.loaders.classloading.DeploymentUnit)> ==> <java.io.File: java.lang.String getAbsolutePath()>
VIRTUAL edge: $r13 = virtualinvoke r1.<java.io.File: java.lang.String getAbsolutePath()>() in <com.atlassian.plugin.loaders.DirectoryScanner: void remove(com.atlassian.plugin.loaders.classloading.DeploymentUnit)> ==> <java.io.File: java.lang.String getAbsolutePath()>
VIRTUAL edge: $r8 = virtualinvoke r1.<java.io.File: java.lang.String getAbsolutePath()>() in <com.atlassian.plugin.loaders.DirectoryScanner: void remove(com.atlassian.plugin.loaders.classloading.DeploymentUnit)> ==> <java.io.File: java.lang.String getAbsolutePath()>
INTERFACE edge: interfaceinvoke $r15.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Plugin file <{}> exists but we do not have permission to remove it. Ignoring.", $r16) in <com.atlassian.plugin.loaders.DirectoryScanner: void remove(com.atlassian.plugin.loaders.classloading.DeploymentUnit)> ==> <org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r12.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Plugin file <{}> doesn\'t exist to delete. Ignoring.", $r13) in <com.atlassian.plugin.loaders.DirectoryScanner: void remove(com.atlassian.plugin.loaders.classloading.DeploymentUnit)> ==> <org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>
SPECIAL edge: specialinvoke $r20.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.loaders.DirectoryScanner: void remove(com.atlassian.plugin.loaders.classloading.DeploymentUnit)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to delete plugin file: ") in <com.atlassian.plugin.loaders.DirectoryScanner: void remove(com.atlassian.plugin.loaders.classloading.DeploymentUnit)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8) in <com.atlassian.plugin.loaders.DirectoryScanner: void remove(com.atlassian.plugin.loaders.classloading.DeploymentUnit)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.loaders.DirectoryScanner: void remove(com.atlassian.plugin.loaders.classloading.DeploymentUnit)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r21.<com.atlassian.plugin.PluginException: void <init>(java.lang.String)>($r10) in <com.atlassian.plugin.loaders.DirectoryScanner: void remove(com.atlassian.plugin.loaders.classloading.DeploymentUnit)> ==> <com.atlassian.plugin.PluginException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r3.<com.atlassian.plugin.loaders.DirectoryScanner: void clear(java.io.File)>(r1) in <com.atlassian.plugin.loaders.DirectoryScanner: void remove(com.atlassian.plugin.loaders.classloading.DeploymentUnit)> ==> <com.atlassian.plugin.loaders.DirectoryScanner: void clear(java.io.File)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>(".") in <com.atlassian.plugin.loaders.DirectoryScanner: boolean lambda$scan$0(java.io.File,java.lang.String)> ==> <java.lang.String: boolean startsWith(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.loaders.RosterFilePluginLoader: java.lang.String getReferenceModePropertyName()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <com.atlassian.plugin.loaders.RosterFilePluginLoader: java.lang.String getReferenceModePropertyName()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>() in <com.atlassian.plugin.loaders.RosterFilePluginLoader: java.lang.String getReferenceModePropertyName()> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".referenceMode") in <com.atlassian.plugin.loaders.RosterFilePluginLoader: java.lang.String getReferenceModePropertyName()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.loaders.RosterFilePluginLoader: java.lang.String getReferenceModePropertyName()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.loaders.RosterFilePluginLoader: void <init>(java.io.File,java.util.List,com.atlassian.plugin.ReferenceMode,com.atlassian.plugin.event.PluginEventManager)>(r1, r2, $r3, r4) in <com.atlassian.plugin.loaders.RosterFilePluginLoader: void <init>(java.io.File,java.util.List,com.atlassian.plugin.event.PluginEventManager)> ==> <com.atlassian.plugin.loaders.RosterFilePluginLoader: void <init>(java.io.File,java.util.List,com.atlassian.plugin.ReferenceMode,com.atlassian.plugin.event.PluginEventManager)>
SPECIAL edge: specialinvoke $r3.<com.atlassian.plugin.DefaultPluginArtifactFactory: void <init>(com.atlassian.plugin.ReferenceMode)>(r4) in <com.atlassian.plugin.loaders.RosterFilePluginLoader: void <init>(java.io.File,java.util.List,com.atlassian.plugin.ReferenceMode,com.atlassian.plugin.event.PluginEventManager)> ==> <com.atlassian.plugin.DefaultPluginArtifactFactory: void <init>(com.atlassian.plugin.ReferenceMode)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.loaders.RosterFilePluginLoader: void <init>(java.io.File,java.util.List,com.atlassian.plugin.PluginArtifactFactory,com.atlassian.plugin.event.PluginEventManager)>(r1, r2, $r3, r5) in <com.atlassian.plugin.loaders.RosterFilePluginLoader: void <init>(java.io.File,java.util.List,com.atlassian.plugin.ReferenceMode,com.atlassian.plugin.event.PluginEventManager)> ==> <com.atlassian.plugin.loaders.RosterFilePluginLoader: void <init>(java.io.File,java.util.List,com.atlassian.plugin.PluginArtifactFactory,com.atlassian.plugin.event.PluginEventManager)>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.loaders.RosterFileScanner: void <init>(java.io.File)>(r2) in <com.atlassian.plugin.loaders.RosterFilePluginLoader: void <init>(java.io.File,java.util.List,com.atlassian.plugin.PluginArtifactFactory,com.atlassian.plugin.event.PluginEventManager)> ==> <com.atlassian.plugin.loaders.RosterFileScanner: void <init>(java.io.File)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.loaders.ScanningPluginLoader: void <init>(com.atlassian.plugin.loaders.classloading.Scanner,java.util.List,com.atlassian.plugin.PluginArtifactFactory,com.atlassian.plugin.event.PluginEventManager)>($r1, r3, r4, r5) in <com.atlassian.plugin.loaders.RosterFilePluginLoader: void <init>(java.io.File,java.util.List,com.atlassian.plugin.PluginArtifactFactory,com.atlassian.plugin.event.PluginEventManager)> ==> <com.atlassian.plugin.loaders.ScanningPluginLoader: void <init>(com.atlassian.plugin.loaders.classloading.Scanner,java.util.List,com.atlassian.plugin.PluginArtifactFactory,com.atlassian.plugin.event.PluginEventManager)>
SPECIAL edge: specialinvoke $r4.<com.atlassian.plugin.tracker.DefaultPluginModuleTracker$NoOpPluginModuleTrackerCustomizer: void <init>(com.atlassian.plugin.tracker.DefaultPluginModuleTracker$1)>(null) in <com.atlassian.plugin.tracker.DefaultPluginModuleTracker: void <init>(com.atlassian.plugin.PluginAccessor,com.atlassian.plugin.event.PluginEventManager,java.lang.Class)> ==> <com.atlassian.plugin.tracker.DefaultPluginModuleTracker$NoOpPluginModuleTrackerCustomizer: void <init>(com.atlassian.plugin.tracker.DefaultPluginModuleTracker$1)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.tracker.DefaultPluginModuleTracker: void <init>(com.atlassian.plugin.PluginAccessor,com.atlassian.plugin.event.PluginEventManager,java.lang.Class,com.atlassian.plugin.tracker.PluginModuleTracker$Customizer)>(r1, r2, r3, $r4) in <com.atlassian.plugin.tracker.DefaultPluginModuleTracker: void <init>(com.atlassian.plugin.PluginAccessor,com.atlassian.plugin.event.PluginEventManager,java.lang.Class)> ==> <com.atlassian.plugin.tracker.DefaultPluginModuleTracker: void <init>(com.atlassian.plugin.PluginAccessor,com.atlassian.plugin.event.PluginEventManager,java.lang.Class,com.atlassian.plugin.tracker.PluginModuleTracker$Customizer)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.tracker.DefaultPluginModuleTracker: void <init>(com.atlassian.plugin.PluginAccessor,com.atlassian.plugin.event.PluginEventManager,java.lang.Class,com.atlassian.plugin.tracker.PluginModuleTracker$Customizer)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.tracker.DefaultPluginModuleTracker: void addDescriptors(java.lang.Iterable)>($r7) in <com.atlassian.plugin.tracker.DefaultPluginModuleTracker: void <init>(com.atlassian.plugin.PluginAccessor,com.atlassian.plugin.event.PluginEventManager,java.lang.Class,com.atlassian.plugin.tracker.PluginModuleTracker$Customizer)> ==> <com.atlassian.plugin.tracker.DefaultPluginModuleTracker: void addDescriptors(java.lang.Iterable)>
SPECIAL edge: specialinvoke $r1.<java.util.concurrent.CopyOnWriteArraySet: void <init>()>() in <com.atlassian.plugin.tracker.DefaultPluginModuleTracker: void <init>(com.atlassian.plugin.PluginAccessor,com.atlassian.plugin.event.PluginEventManager,java.lang.Class,com.atlassian.plugin.tracker.PluginModuleTracker$Customizer)> ==> <java.util.concurrent.CopyOnWriteArraySet: void <init>()>
SPECIAL edge: specialinvoke $r2.<com.atlassian.plugin.tracker.DefaultPluginModuleTracker$ModuleTransformer: void <init>(com.atlassian.plugin.tracker.DefaultPluginModuleTracker$1)>(null) in <com.atlassian.plugin.tracker.DefaultPluginModuleTracker: void <init>(com.atlassian.plugin.PluginAccessor,com.atlassian.plugin.event.PluginEventManager,java.lang.Class,com.atlassian.plugin.tracker.PluginModuleTracker$Customizer)> ==> <com.atlassian.plugin.tracker.DefaultPluginModuleTracker$ModuleTransformer: void <init>(com.atlassian.plugin.tracker.DefaultPluginModuleTracker$1)>
INTERFACE edge: interfaceinvoke r3.<com.atlassian.plugin.event.PluginEventManager: void register(java.lang.Object)>(r0) in <com.atlassian.plugin.tracker.DefaultPluginModuleTracker: void <init>(com.atlassian.plugin.PluginAccessor,com.atlassian.plugin.event.PluginEventManager,java.lang.Class,com.atlassian.plugin.tracker.PluginModuleTracker$Customizer)> ==> <com.atlassian.plugin.event.impl.DefaultPluginEventManager: void register(java.lang.Object)>
INTERFACE edge: $r7 = interfaceinvoke r6.<com.atlassian.plugin.PluginAccessor: java.util.List getEnabledModuleDescriptorsByClass(java.lang.Class)>(r4) in <com.atlassian.plugin.tracker.DefaultPluginModuleTracker: void <init>(com.atlassian.plugin.PluginAccessor,com.atlassian.plugin.event.PluginEventManager,java.lang.Class,com.atlassian.plugin.tracker.PluginModuleTracker$Customizer)> ==> <com.atlassian.plugin.manager.ProductPluginAccessor: java.util.List getEnabledModuleDescriptorsByClass(java.lang.Class)>
INTERFACE edge: $r7 = interfaceinvoke r6.<com.atlassian.plugin.PluginAccessor: java.util.List getEnabledModuleDescriptorsByClass(java.lang.Class)>(r4) in <com.atlassian.plugin.tracker.DefaultPluginModuleTracker: void <init>(com.atlassian.plugin.PluginAccessor,com.atlassian.plugin.event.PluginEventManager,java.lang.Class,com.atlassian.plugin.tracker.PluginModuleTracker$Customizer)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.List getEnabledModuleDescriptorsByClass(java.lang.Class)>
INTERFACE edge: $r7 = interfaceinvoke r6.<com.atlassian.plugin.PluginAccessor: java.util.List getEnabledModuleDescriptorsByClass(java.lang.Class)>(r4) in <com.atlassian.plugin.tracker.DefaultPluginModuleTracker: void <init>(com.atlassian.plugin.PluginAccessor,com.atlassian.plugin.event.PluginEventManager,java.lang.Class,com.atlassian.plugin.tracker.PluginModuleTracker$Customizer)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: java.util.List getEnabledModuleDescriptorsByClass(java.lang.Class)>
INTERFACE edge: $r7 = interfaceinvoke r6.<com.atlassian.plugin.PluginAccessor: java.util.List getEnabledModuleDescriptorsByClass(java.lang.Class)>(r4) in <com.atlassian.plugin.tracker.DefaultPluginModuleTracker: void <init>(com.atlassian.plugin.PluginAccessor,com.atlassian.plugin.event.PluginEventManager,java.lang.Class,com.atlassian.plugin.tracker.PluginModuleTracker$Customizer)> ==> <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: java.util.List getEnabledModuleDescriptorsByClass(java.lang.Class)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.atlassian.plugin.tracker.DefaultPluginModuleTracker: java.lang.Iterable getModuleDescriptors()>() in <com.atlassian.plugin.tracker.DefaultPluginModuleTracker: java.lang.Iterable getModules()> ==> <com.atlassian.plugin.tracker.DefaultPluginModuleTracker: java.lang.Iterable getModuleDescriptors()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.util.concurrent.CopyOnWriteArraySet: int size()>() in <com.atlassian.plugin.tracker.DefaultPluginModuleTracker: int size()> ==> <java.util.concurrent.CopyOnWriteArraySet: int size()>
INTERFACE edge: interfaceinvoke $r1.<com.atlassian.plugin.event.PluginEventManager: void unregister(java.lang.Object)>(r0) in <com.atlassian.plugin.tracker.DefaultPluginModuleTracker: void close()> ==> <com.atlassian.plugin.event.PluginEventManager: void unregister(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r1.<com.atlassian.plugin.event.PluginEventManager: void unregister(java.lang.Object)>(r0) in <com.atlassian.plugin.tracker.DefaultPluginModuleTracker: void close()> ==> <com.atlassian.plugin.event.impl.DefaultPluginEventManager: void unregister(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.tracker.DefaultPluginModuleTracker: void addDescriptors(java.lang.Iterable)>($r3) in <com.atlassian.plugin.tracker.DefaultPluginModuleTracker: void onPluginModuleEnabled(com.atlassian.plugin.event.events.PluginModuleEnabledEvent)> ==> <com.atlassian.plugin.tracker.DefaultPluginModuleTracker: void addDescriptors(java.lang.Iterable)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.tracker.DefaultPluginModuleTracker: void removeDescriptors(java.lang.Iterable)>($r3) in <com.atlassian.plugin.tracker.DefaultPluginModuleTracker: void onPluginModuleDisabled(com.atlassian.plugin.event.events.PluginModuleDisabledEvent)> ==> <com.atlassian.plugin.tracker.DefaultPluginModuleTracker: void removeDescriptors(java.lang.Iterable)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.atlassian.plugin.Plugin: java.util.Collection getModuleDescriptors()>() in <com.atlassian.plugin.tracker.DefaultPluginModuleTracker: void onPluginDisabled(com.atlassian.plugin.event.events.PluginDisabledEvent)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.util.Collection getModuleDescriptors()>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.tracker.DefaultPluginModuleTracker: void removeDescriptors(java.lang.Iterable)>($r3) in <com.atlassian.plugin.tracker.DefaultPluginModuleTracker: void onPluginDisabled(com.atlassian.plugin.event.events.PluginDisabledEvent)> ==> <com.atlassian.plugin.tracker.DefaultPluginModuleTracker: void removeDescriptors(java.lang.Iterable)>
SPECIAL edge: specialinvoke $r2.<com.atlassian.plugin.tracker.DefaultPluginModuleTracker: void <init>(com.atlassian.plugin.PluginAccessor,com.atlassian.plugin.event.PluginEventManager,java.lang.Class)>(r3, r4, r0) in <com.atlassian.plugin.tracker.DefaultPluginModuleTracker: com.atlassian.plugin.tracker.PluginModuleTracker create(com.atlassian.plugin.PluginAccessor,com.atlassian.plugin.event.PluginEventManager,java.lang.Class)> ==> <com.atlassian.plugin.tracker.DefaultPluginModuleTracker: void <init>(com.atlassian.plugin.PluginAccessor,com.atlassian.plugin.event.PluginEventManager,java.lang.Class)>
INTERFACE edge: $r1 = interfaceinvoke r0.<com.atlassian.plugin.ModuleDescriptor: java.lang.Object getModule()>() in <com.atlassian.plugin.tracker.DefaultPluginModuleTracker$ModuleTransformer: java.lang.Object apply(com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.ModuleDescriptor: java.lang.Object getModule()>
INTERFACE edge: $r1 = interfaceinvoke r0.<com.atlassian.plugin.ModuleDescriptor: java.lang.Object getModule()>() in <com.atlassian.plugin.tracker.DefaultPluginModuleTracker$ModuleTransformer: java.lang.Object apply(com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.descriptors.AbstractNoOpModuleDescriptor: java.lang.Object getModule()>
INTERFACE edge: $r1 = interfaceinvoke r0.<com.atlassian.plugin.ModuleDescriptor: java.lang.Object getModule()>() in <com.atlassian.plugin.tracker.DefaultPluginModuleTracker$ModuleTransformer: java.lang.Object apply(com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.eventlistener.descriptors.EventListenerModuleDescriptor: java.lang.Object getModule()>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.atlassian.plugin.tracker.DefaultPluginModuleTracker$ModuleTransformer: java.lang.Object apply(com.atlassian.plugin.ModuleDescriptor)>($r2) in <com.atlassian.plugin.tracker.DefaultPluginModuleTracker$ModuleTransformer: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.tracker.DefaultPluginModuleTracker$ModuleTransformer: java.lang.Object apply(com.atlassian.plugin.ModuleDescriptor)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.manager.DefaultSafeModeManager: void <init>(com.atlassian.plugin.metadata.PluginMetadataManager,com.atlassian.plugin.manager.ApplicationDefinedPluginsProvider,com.atlassian.plugin.manager.ClusterEnvironmentProvider,com.atlassian.plugin.parsers.SafeModeCommandLineArgumentsFactory,com.atlassian.plugin.manager.PluginPersistentStateStore)>(r1, $r5, r2, r3, r4) in <com.atlassian.plugin.manager.DefaultSafeModeManager: void <init>(com.atlassian.plugin.metadata.PluginMetadataManager,com.atlassian.plugin.manager.ClusterEnvironmentProvider,com.atlassian.plugin.parsers.SafeModeCommandLineArgumentsFactory,com.atlassian.plugin.manager.PluginPersistentStateStore)> ==> <com.atlassian.plugin.manager.DefaultSafeModeManager: void <init>(com.atlassian.plugin.metadata.PluginMetadataManager,com.atlassian.plugin.manager.ApplicationDefinedPluginsProvider,com.atlassian.plugin.manager.ClusterEnvironmentProvider,com.atlassian.plugin.parsers.SafeModeCommandLineArgumentsFactory,com.atlassian.plugin.manager.PluginPersistentStateStore)>
CLINIT edge: $r15 = staticinvoke <java.util.Collections: java.util.List emptyList()>() in <com.atlassian.plugin.manager.DefaultSafeModeManager: void <init>(com.atlassian.plugin.metadata.PluginMetadataManager,com.atlassian.plugin.manager.ApplicationDefinedPluginsProvider,com.atlassian.plugin.manager.ClusterEnvironmentProvider,com.atlassian.plugin.parsers.SafeModeCommandLineArgumentsFactory,com.atlassian.plugin.manager.PluginPersistentStateStore)> ==> <java.util.Collections: void <clinit>()>
STATIC edge: $r15 = staticinvoke <java.util.Collections: java.util.List emptyList()>() in <com.atlassian.plugin.manager.DefaultSafeModeManager: void <init>(com.atlassian.plugin.metadata.PluginMetadataManager,com.atlassian.plugin.manager.ApplicationDefinedPluginsProvider,com.atlassian.plugin.manager.ClusterEnvironmentProvider,com.atlassian.plugin.parsers.SafeModeCommandLineArgumentsFactory,com.atlassian.plugin.manager.PluginPersistentStateStore)> ==> <java.util.Collections: java.util.List emptyList()>
STATIC edge: $r2 = staticinvoke <com.google.common.base.Suppliers: com.google.common.base.Supplier memoize(com.google.common.base.Supplier)>($r1) in <com.atlassian.plugin.manager.DefaultSafeModeManager: void <init>(com.atlassian.plugin.metadata.PluginMetadataManager,com.atlassian.plugin.manager.ApplicationDefinedPluginsProvider,com.atlassian.plugin.manager.ClusterEnvironmentProvider,com.atlassian.plugin.parsers.SafeModeCommandLineArgumentsFactory,com.atlassian.plugin.manager.PluginPersistentStateStore)> ==> <com.google.common.base.Suppliers: com.google.common.base.Supplier memoize(com.google.common.base.Supplier)>
CLINIT edge: $r11 = <com.atlassian.plugin.manager.DefaultSafeModeManager: org.slf4j.Logger LOGGER> in <com.atlassian.plugin.manager.DefaultSafeModeManager: void <init>(com.atlassian.plugin.metadata.PluginMetadataManager,com.atlassian.plugin.manager.ApplicationDefinedPluginsProvider,com.atlassian.plugin.manager.ClusterEnvironmentProvider,com.atlassian.plugin.parsers.SafeModeCommandLineArgumentsFactory,com.atlassian.plugin.manager.PluginPersistentStateStore)> ==> <com.atlassian.plugin.manager.DefaultSafeModeManager: void <clinit>()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.atlassian.plugin.manager.ClusterEnvironmentProvider: boolean isInCluster()>() in <com.atlassian.plugin.manager.DefaultSafeModeManager: boolean pluginShouldBeStarted(com.atlassian.plugin.Plugin,java.lang.Iterable)> ==> <com.atlassian.plugin.manager.ClusterEnvironmentProvider$lambda_static_0__27: boolean isInCluster()>
SPECIAL edge: $z1 = specialinvoke r0.<com.atlassian.plugin.manager.DefaultSafeModeManager: boolean isPluginDisabledByDisableLastEnabled(com.atlassian.plugin.Plugin)>(r2) in <com.atlassian.plugin.manager.DefaultSafeModeManager: boolean pluginShouldBeStarted(com.atlassian.plugin.Plugin,java.lang.Iterable)> ==> <com.atlassian.plugin.manager.DefaultSafeModeManager: boolean isPluginDisabledByDisableLastEnabled(com.atlassian.plugin.Plugin)>
SPECIAL edge: $z2 = specialinvoke r0.<com.atlassian.plugin.manager.DefaultSafeModeManager: boolean isPluginDisabledBySafeMode(com.atlassian.plugin.Plugin,java.lang.Iterable)>(r2, r3) in <com.atlassian.plugin.manager.DefaultSafeModeManager: boolean pluginShouldBeStarted(com.atlassian.plugin.Plugin,java.lang.Iterable)> ==> <com.atlassian.plugin.manager.DefaultSafeModeManager: boolean isPluginDisabledBySafeMode(com.atlassian.plugin.Plugin,java.lang.Iterable)>
INTERFACE edge: $r5 = interfaceinvoke r2.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultSafeModeManager: boolean pluginShouldBeStarted(com.atlassian.plugin.Plugin,java.lang.Iterable)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r5 = interfaceinvoke r2.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultSafeModeManager: boolean pluginShouldBeStarted(com.atlassian.plugin.Plugin,java.lang.Iterable)> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
VIRTUAL edge: $z3 = virtualinvoke $r4.<com.atlassian.plugin.parsers.SafeModeCommandLineArguments: boolean isDisabledByParam(java.lang.String)>($r5) in <com.atlassian.plugin.manager.DefaultSafeModeManager: boolean pluginShouldBeStarted(com.atlassian.plugin.Plugin,java.lang.Iterable)> ==> <com.atlassian.plugin.parsers.SafeModeCommandLineArguments: boolean isDisabledByParam(java.lang.String)>
INTERFACE edge: r3 = interfaceinvoke $r2.<com.atlassian.plugin.manager.PluginPersistentStateStore: com.atlassian.plugin.manager.PluginPersistentState load()>() in <com.atlassian.plugin.manager.DefaultSafeModeManager$1: java.util.Optional get()> ==> <com.atlassian.plugin.manager.store.MemoryPluginPersistentStateStore: com.atlassian.plugin.manager.PluginPersistentState load()>
INTERFACE edge: r3 = interfaceinvoke $r2.<com.atlassian.plugin.manager.PluginPersistentStateStore: com.atlassian.plugin.manager.PluginPersistentState load()>() in <com.atlassian.plugin.manager.DefaultSafeModeManager$1: java.util.Optional get()> ==> <com.atlassian.plugin.manager.store.LoadOnlyPluginPersistentStateStore: com.atlassian.plugin.manager.PluginPersistentState load()>
INTERFACE edge: r3 = interfaceinvoke $r2.<com.atlassian.plugin.manager.PluginPersistentStateStore: com.atlassian.plugin.manager.PluginPersistentState load()>() in <com.atlassian.plugin.manager.DefaultSafeModeManager$1: java.util.Optional get()> ==> <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore: com.atlassian.plugin.manager.PluginPersistentState load()>
INTERFACE edge: $r4 = interfaceinvoke r3.<com.atlassian.plugin.manager.PluginPersistentState: java.util.Map getStatesMap()>() in <com.atlassian.plugin.manager.DefaultSafeModeManager$1: java.util.Optional get()> ==> <com.atlassian.plugin.manager.DefaultPluginPersistentState: java.util.Map getStatesMap()>
INTERFACE edge: $r5 = interfaceinvoke r3.<com.atlassian.plugin.manager.PluginPersistentState: java.util.Map getStatesMap()>() in <com.atlassian.plugin.manager.DefaultSafeModeManager$1: java.util.Optional get()> ==> <com.atlassian.plugin.manager.DefaultPluginPersistentState: java.util.Map getStatesMap()>
INTERFACE edge: $z0 = interfaceinvoke $r4.<java.util.Map: boolean isEmpty()>() in <com.atlassian.plugin.manager.DefaultSafeModeManager$1: java.util.Optional get()> ==> <java.util.HashMap: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke $r4.<java.util.Map: boolean isEmpty()>() in <com.atlassian.plugin.manager.DefaultSafeModeManager$1: java.util.Optional get()> ==> <java.util.Hashtable: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke $r4.<java.util.Map: boolean isEmpty()>() in <com.atlassian.plugin.manager.DefaultSafeModeManager$1: java.util.Optional get()> ==> <java.util.TreeMap: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke $r4.<java.util.Map: boolean isEmpty()>() in <com.atlassian.plugin.manager.DefaultSafeModeManager$1: java.util.Optional get()> ==> <java.util.jar.Attributes: boolean isEmpty()>
INTERFACE edge: $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set entrySet()>() in <com.atlassian.plugin.manager.DefaultSafeModeManager$1: java.util.Optional get()> ==> <java.util.HashMap: java.util.Set entrySet()>
INTERFACE edge: $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set entrySet()>() in <com.atlassian.plugin.manager.DefaultSafeModeManager$1: java.util.Optional get()> ==> <java.util.Hashtable: java.util.Set entrySet()>
INTERFACE edge: $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set entrySet()>() in <com.atlassian.plugin.manager.DefaultSafeModeManager$1: java.util.Optional get()> ==> <java.util.TreeMap: java.util.Set entrySet()>
INTERFACE edge: $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set entrySet()>() in <com.atlassian.plugin.manager.DefaultSafeModeManager$1: java.util.Optional get()> ==> <java.util.jar.Attributes: java.util.Set entrySet()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.atlassian.plugin.manager.DefaultSafeModeManager$1: java.util.Optional get()>() in <com.atlassian.plugin.manager.DefaultSafeModeManager$1: java.lang.Object get()> ==> <com.atlassian.plugin.manager.DefaultSafeModeManager$1: java.util.Optional get()>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.loaders.BundledPluginLoader: void <init>(com.atlassian.plugin.loaders.classloading.Scanner,java.util.List,com.atlassian.plugin.event.PluginEventManager)>($r2, r3, r4) in <com.atlassian.plugin.loaders.BundledPluginLoader: void <init>(java.io.File,java.util.List,com.atlassian.plugin.event.PluginEventManager)> ==> <com.atlassian.plugin.loaders.BundledPluginLoader: void <init>(com.atlassian.plugin.loaders.classloading.Scanner,java.util.List,com.atlassian.plugin.event.PluginEventManager)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.loaders.BundledPluginLoader: void <init>(com.atlassian.plugin.loaders.classloading.Scanner,java.util.List,com.atlassian.plugin.event.PluginEventManager)>($r3, r4, r5) in <com.atlassian.plugin.loaders.BundledPluginLoader: void <init>(java.net.URL,java.io.File,java.util.List,com.atlassian.plugin.event.PluginEventManager)> ==> <com.atlassian.plugin.loaders.BundledPluginLoader: void <init>(com.atlassian.plugin.loaders.classloading.Scanner,java.util.List,com.atlassian.plugin.event.PluginEventManager)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.loaders.classloading.EmptyScanner: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.loaders.ForwardingPluginLoader: void <init>(com.atlassian.plugin.loaders.PluginLoader)>(r1) in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: void <init>(com.atlassian.plugin.loaders.PluginLoader)> ==> <com.atlassian.plugin.loaders.ForwardingPluginLoader: void <init>(com.atlassian.plugin.loaders.PluginLoader)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: com.atlassian.plugin.loaders.PluginLoader delegate()>() in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.ForwardingPluginLoader: com.atlassian.plugin.loaders.PluginLoader delegate()>
INTERFACE edge: $r3 = interfaceinvoke $r1.<com.atlassian.plugin.loaders.PluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)>(r2) in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.ForwardingPluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)>
INTERFACE edge: $r3 = interfaceinvoke $r1.<com.atlassian.plugin.loaders.PluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)>(r2) in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)>
INTERFACE edge: $r3 = interfaceinvoke $r1.<com.atlassian.plugin.loaders.PluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)>(r2) in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)>
INTERFACE edge: $r3 = interfaceinvoke $r1.<com.atlassian.plugin.loaders.PluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)>(r2) in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.SinglePluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)>
INTERFACE edge: $r3 = interfaceinvoke $r1.<com.atlassian.plugin.loaders.PluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)>(r2) in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.ClassPathPluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)>
SPECIAL edge: specialinvoke $r7.<com.atlassian.plugin.loaders.PermissionCheckingPluginLoader$CheckPluginPermissionFunction: void <init>(com.atlassian.plugin.loaders.PermissionCheckingPluginLoader,com.atlassian.plugin.loaders.PermissionCheckingPluginLoader$1)>(r0, null) in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader$CheckPluginPermissionFunction: void <init>(com.atlassian.plugin.loaders.PermissionCheckingPluginLoader,com.atlassian.plugin.loaders.PermissionCheckingPluginLoader$1)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: com.atlassian.plugin.loaders.PluginLoader delegate()>() in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.ForwardingPluginLoader: com.atlassian.plugin.loaders.PluginLoader delegate()>
INTERFACE edge: $r3 = interfaceinvoke $r1.<com.atlassian.plugin.loaders.PluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)>(r2) in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.ForwardingPluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)>
INTERFACE edge: $r3 = interfaceinvoke $r1.<com.atlassian.plugin.loaders.PluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)>(r2) in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)>
INTERFACE edge: $r3 = interfaceinvoke $r1.<com.atlassian.plugin.loaders.PluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)>(r2) in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)>
INTERFACE edge: $r3 = interfaceinvoke $r1.<com.atlassian.plugin.loaders.PluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)>(r2) in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.SinglePluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)>
INTERFACE edge: $r3 = interfaceinvoke $r1.<com.atlassian.plugin.loaders.PluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)>(r2) in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.ClassPathPluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)>
SPECIAL edge: specialinvoke $r7.<com.atlassian.plugin.loaders.PermissionCheckingPluginLoader$CheckPluginPermissionFunction: void <init>(com.atlassian.plugin.loaders.PermissionCheckingPluginLoader,com.atlassian.plugin.loaders.PermissionCheckingPluginLoader$1)>(r0, null) in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader$CheckPluginPermissionFunction: void <init>(com.atlassian.plugin.loaders.PermissionCheckingPluginLoader,com.atlassian.plugin.loaders.PermissionCheckingPluginLoader$1)>
SPECIAL edge: specialinvoke r3.<com.atlassian.plugin.loaders.ForwardingPluginLoader: void removePlugin(com.atlassian.plugin.Plugin)>(r0) in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: void removePlugin(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.loaders.ForwardingPluginLoader: void removePlugin(com.atlassian.plugin.Plugin)>
INTERFACE edge: $r2 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: void removePlugin(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r2 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: void removePlugin(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
INTERFACE edge: interfaceinvoke $r1.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Detected an unloadable plugin \'{}\', so skipping removal", $r2) in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: void removePlugin(com.atlassian.plugin.Plugin)> ==> <org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>
SPECIAL edge: specialinvoke r3.<com.atlassian.plugin.loaders.ForwardingPluginLoader: void discardPlugin(com.atlassian.plugin.Plugin)>(r0) in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: void discardPlugin(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.loaders.ForwardingPluginLoader: void discardPlugin(com.atlassian.plugin.Plugin)>
INTERFACE edge: $r2 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: void discardPlugin(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r2 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: void discardPlugin(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
INTERFACE edge: interfaceinvoke $r1.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Detected an unloadable plugin \'{}\', so skipping discard", $r2) in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: void discardPlugin(com.atlassian.plugin.Plugin)> ==> <org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: boolean hasAllPermissions()>() in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader$CheckPluginPermissionFunction: com.atlassian.plugin.Plugin apply(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: boolean hasAllPermissions()>
SPECIAL edge: $r3 = specialinvoke r1.<com.atlassian.plugin.loaders.PermissionCheckingPluginLoader$CheckPluginPermissionFunction: com.atlassian.plugin.Plugin checkPlugin(com.atlassian.plugin.PluginInternal)>($r2) in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader$CheckPluginPermissionFunction: com.atlassian.plugin.Plugin apply(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader$CheckPluginPermissionFunction: com.atlassian.plugin.Plugin checkPlugin(com.atlassian.plugin.PluginInternal)>
CLINIT edge: $r16 = staticinvoke <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: org.slf4j.Logger access$100()>() in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader$CheckPluginPermissionFunction: com.atlassian.plugin.Plugin checkPlugin(com.atlassian.plugin.PluginInternal)> ==> <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: void <clinit>()>
STATIC edge: $r7 = staticinvoke <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: org.slf4j.Logger access$100()>() in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader$CheckPluginPermissionFunction: com.atlassian.plugin.Plugin checkPlugin(com.atlassian.plugin.PluginInternal)> ==> <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: org.slf4j.Logger access$100()>
STATIC edge: $r16 = staticinvoke <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: org.slf4j.Logger access$100()>() in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader$CheckPluginPermissionFunction: com.atlassian.plugin.Plugin checkPlugin(com.atlassian.plugin.PluginInternal)> ==> <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: org.slf4j.Logger access$100()>
CLINIT edge: $r7 = staticinvoke <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: org.slf4j.Logger access$100()>() in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader$CheckPluginPermissionFunction: com.atlassian.plugin.Plugin checkPlugin(com.atlassian.plugin.PluginInternal)> ==> <com.atlassian.plugin.loaders.ForwardingPluginLoader: void <clinit>()>
CLINIT edge: $r7 = staticinvoke <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: org.slf4j.Logger access$100()>() in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader$CheckPluginPermissionFunction: com.atlassian.plugin.Plugin checkPlugin(com.atlassian.plugin.PluginInternal)> ==> <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: void <clinit>()>
CLINIT edge: $r16 = staticinvoke <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: org.slf4j.Logger access$100()>() in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader$CheckPluginPermissionFunction: com.atlassian.plugin.Plugin checkPlugin(com.atlassian.plugin.PluginInternal)> ==> <com.atlassian.plugin.loaders.ForwardingPluginLoader: void <clinit>()>
CLINIT edge: $r0 = <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: org.slf4j.Logger logger> in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: org.slf4j.Logger access$100()> ==> <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: void <clinit>()>
CLINIT edge: $r0 = <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: org.slf4j.Logger logger> in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: org.slf4j.Logger access$100()> ==> <com.atlassian.plugin.loaders.ForwardingPluginLoader: void <clinit>()>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.atlassian.plugin.loaders.PermissionCheckingPluginLoader$CheckPluginPermissionFunction: com.atlassian.plugin.Plugin apply(com.atlassian.plugin.Plugin)>($r2) in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader$CheckPluginPermissionFunction: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader$CheckPluginPermissionFunction: com.atlassian.plugin.Plugin apply(com.atlassian.plugin.Plugin)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.scope.AlwaysEnabledScopeManager: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.ProductPluginAccessorBase: void <init>(com.atlassian.plugin.PluginRegistry$ReadOnly,com.atlassian.plugin.manager.PluginPersistentStateStore,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r5.<com.atlassian.plugin.classloader.PluginsClassLoader: void <init>(java.lang.ClassLoader,com.atlassian.plugin.PluginAccessor,com.atlassian.plugin.event.PluginEventManager)>(null, r0, r6) in <com.atlassian.plugin.manager.ProductPluginAccessorBase: void <init>(com.atlassian.plugin.PluginRegistry$ReadOnly,com.atlassian.plugin.manager.PluginPersistentStateStore,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager)> ==> <com.atlassian.plugin.classloader.PluginsClassLoader: void <init>(java.lang.ClassLoader,com.atlassian.plugin.PluginAccessor,com.atlassian.plugin.event.PluginEventManager)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.manager.ProductPluginAccessorBase: void <init>(com.atlassian.plugin.PluginRegistry$ReadOnly,com.atlassian.plugin.manager.PluginPersistentStateStore,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager)>(r1, r2, r3, r4) in <com.atlassian.plugin.manager.ProductPluginAccessorBase: void <init>(com.atlassian.plugin.PluginRegistry$ReadOnly,com.atlassian.plugin.manager.PluginPersistentStateStore,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager,com.atlassian.plugin.scope.ScopeManager)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase: void <init>(com.atlassian.plugin.PluginRegistry$ReadOnly,com.atlassian.plugin.manager.PluginPersistentStateStore,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager)>
VIRTUAL edge: $r3 = virtualinvoke r2.<com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.Collection getPlugins()>() in <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.Collection getPlugins(java.util.function.Predicate)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.Collection getPlugins()>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>(r0) in <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.Collection getPlugins(java.util.function.Predicate)> ==> <java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>
INTERFACE edge: $r7 = interfaceinvoke $r5.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r6) in <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.Collection getPlugins(java.util.function.Predicate)> ==> <java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.Collection getPlugins(java.util.function.Predicate)>($r1) in <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.Collection getEnabledPlugins()> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.Collection getPlugins(java.util.function.Predicate)>
VIRTUAL edge: $r3 = virtualinvoke r2.<com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.Collection getPlugins()>() in <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.Collection getModules(java.util.function.Predicate)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.Collection getPlugins()>
SPECIAL edge: $r4 = specialinvoke r2.<com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.stream.Stream getModuleDescriptors(java.util.Collection,java.util.function.Predicate)>($r3, r0) in <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.Collection getModules(java.util.function.Predicate)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.stream.Stream getModuleDescriptors(java.util.Collection,java.util.function.Predicate)>
SPECIAL edge: $r5 = specialinvoke r2.<com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.stream.Stream getModules(java.util.stream.Stream)>($r4) in <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.Collection getModules(java.util.function.Predicate)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.stream.Stream getModules(java.util.stream.Stream)>
INTERFACE edge: $r7 = interfaceinvoke $r5.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r6) in <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.Collection getModules(java.util.function.Predicate)> ==> <java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>
STATIC edge: $r2 = staticinvoke <com.atlassian.plugin.manager.ProductPluginAccessorBase$lambda_getModuleDescriptors_2__142: java.util.function.Function bootstrap$()>() in <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.stream.Stream getModuleDescriptors(java.util.Collection,java.util.function.Predicate)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase$lambda_getModuleDescriptors_2__142: java.util.function.Function bootstrap$()>
STATIC edge: $r4 = staticinvoke <com.atlassian.plugin.manager.ProductPluginAccessorBase$lambda_getModuleDescriptors_3__144: java.util.function.Function bootstrap$()>() in <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.stream.Stream getModuleDescriptors(java.util.Collection,java.util.function.Predicate)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase$lambda_getModuleDescriptors_3__144: java.util.function.Function bootstrap$()>
STATIC edge: $r1 = staticinvoke <com.atlassian.plugin.manager.ProductPluginAccessorBase$nonNull__140: java.util.function.Predicate bootstrap$()>() in <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.stream.Stream getModules(java.util.stream.Stream)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase$nonNull__140: java.util.function.Predicate bootstrap$()>
STATIC edge: $r5 = staticinvoke <com.atlassian.plugin.manager.ProductPluginAccessorBase$nonNull__145: java.util.function.Predicate bootstrap$()>() in <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.stream.Stream getModules(java.util.stream.Stream)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase$nonNull__145: java.util.function.Predicate bootstrap$()>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.manager.ProductPluginAccessorBase$lambda_getModules_1__143: java.util.function.Function bootstrap$()>() in <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.stream.Stream getModules(java.util.stream.Stream)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase$lambda_getModules_1__143: java.util.function.Function bootstrap$()>
VIRTUAL edge: $r3 = virtualinvoke r2.<com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.Collection getPlugins()>() in <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.Collection getModuleDescriptors(java.util.function.Predicate)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.Collection getPlugins()>
SPECIAL edge: $r4 = specialinvoke r2.<com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.stream.Stream getModuleDescriptors(java.util.Collection,java.util.function.Predicate)>($r3, r0) in <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.Collection getModuleDescriptors(java.util.function.Predicate)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.stream.Stream getModuleDescriptors(java.util.Collection,java.util.function.Predicate)>
INTERFACE edge: $r6 = interfaceinvoke $r4.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r5) in <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.Collection getModuleDescriptors(java.util.function.Predicate)> ==> <java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.atlassian.plugin.manager.ProductPluginAccessorBase: boolean isPluginEnabled(java.lang.String)>(r1) in <com.atlassian.plugin.manager.ProductPluginAccessorBase: com.atlassian.plugin.Plugin getEnabledPlugin(java.lang.String)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase: boolean isPluginEnabled(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.atlassian.plugin.manager.ProductPluginAccessorBase: com.atlassian.plugin.Plugin getPlugin(java.lang.String)>(r1) in <com.atlassian.plugin.manager.ProductPluginAccessorBase: com.atlassian.plugin.Plugin getEnabledPlugin(java.lang.String)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase: com.atlassian.plugin.Plugin getPlugin(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.ModuleCompleteKey: void <init>(java.lang.String)>(r2) in <com.atlassian.plugin.manager.ProductPluginAccessorBase: com.atlassian.plugin.ModuleDescriptor getPluginModule(java.lang.String)> ==> <com.atlassian.plugin.ModuleCompleteKey: void <init>(java.lang.String)>
SPECIAL edge: $r3 = specialinvoke r0.<com.atlassian.plugin.manager.ProductPluginAccessorBase: com.atlassian.plugin.ModuleDescriptor getPluginModule(com.atlassian.plugin.ModuleCompleteKey)>($r1) in <com.atlassian.plugin.manager.ProductPluginAccessorBase: com.atlassian.plugin.ModuleDescriptor getPluginModule(java.lang.String)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase: com.atlassian.plugin.ModuleDescriptor getPluginModule(com.atlassian.plugin.ModuleCompleteKey)>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.ModuleCompleteKey: void <init>(java.lang.String)>(r1) in <com.atlassian.plugin.manager.ProductPluginAccessorBase: com.atlassian.plugin.ModuleDescriptor getEnabledPluginModule(java.lang.String)> ==> <com.atlassian.plugin.ModuleCompleteKey: void <init>(java.lang.String)>
SPECIAL edge: $z0 = specialinvoke r3.<com.atlassian.plugin.manager.ProductPluginAccessorBase: boolean isPluginModuleEnabled(com.atlassian.plugin.ModuleCompleteKey)>($r0) in <com.atlassian.plugin.manager.ProductPluginAccessorBase: com.atlassian.plugin.ModuleDescriptor getEnabledPluginModule(java.lang.String)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase: boolean isPluginModuleEnabled(com.atlassian.plugin.ModuleCompleteKey)>
VIRTUAL edge: $r5 = virtualinvoke r3.<com.atlassian.plugin.manager.ProductPluginAccessorBase: com.atlassian.plugin.Plugin getEnabledPlugin(java.lang.String)>($r4) in <com.atlassian.plugin.manager.ProductPluginAccessorBase: com.atlassian.plugin.ModuleDescriptor getEnabledPluginModule(java.lang.String)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase: com.atlassian.plugin.Plugin getEnabledPlugin(java.lang.String)>
INTERFACE edge: $r7 = interfaceinvoke $r5.<com.atlassian.plugin.Plugin: com.atlassian.plugin.ModuleDescriptor getModuleDescriptor(java.lang.String)>($r6) in <com.atlassian.plugin.manager.ProductPluginAccessorBase: com.atlassian.plugin.ModuleDescriptor getEnabledPluginModule(java.lang.String)> ==> <com.atlassian.plugin.impl.AbstractPlugin: com.atlassian.plugin.ModuleDescriptor getModuleDescriptor(java.lang.String)>
INTERFACE edge: $r6 = interfaceinvoke r5.<com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginState getPluginState()>() in <com.atlassian.plugin.manager.ProductPluginAccessorBase: boolean isPluginEnabled(java.lang.String)> ==> <com.atlassian.plugin.impl.AbstractPlugin: com.atlassian.plugin.PluginState getPluginState()>
INTERFACE edge: $r6 = interfaceinvoke r5.<com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginState getPluginState()>() in <com.atlassian.plugin.manager.ProductPluginAccessorBase: boolean isPluginEnabled(java.lang.String)> ==> <com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginState getPluginState()>
SPECIAL edge: specialinvoke $r2.<com.atlassian.plugin.ModuleCompleteKey: void <init>(java.lang.String)>(r0) in <com.atlassian.plugin.manager.ProductPluginAccessorBase: boolean isPluginModuleEnabled(java.lang.String)> ==> <com.atlassian.plugin.ModuleCompleteKey: void <init>(java.lang.String)>
SPECIAL edge: $z0 = specialinvoke r1.<com.atlassian.plugin.manager.ProductPluginAccessorBase: boolean isPluginModuleEnabled(com.atlassian.plugin.ModuleCompleteKey)>($r2) in <com.atlassian.plugin.manager.ProductPluginAccessorBase: boolean isPluginModuleEnabled(java.lang.String)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase: boolean isPluginModuleEnabled(com.atlassian.plugin.ModuleCompleteKey)>
SPECIAL edge: $r2 = specialinvoke r0.<com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.stream.Stream getEnabledModuleDescriptorsByModuleClass(java.lang.Class)>(r1) in <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.List getEnabledModulesByClass(java.lang.Class)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.stream.Stream getEnabledModuleDescriptorsByModuleClass(java.lang.Class)>
SPECIAL edge: $r3 = specialinvoke r0.<com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.stream.Stream getModules(java.util.stream.Stream)>($r2) in <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.List getEnabledModulesByClass(java.lang.Class)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.stream.Stream getModules(java.util.stream.Stream)>
INTERFACE edge: $r5 = interfaceinvoke $r3.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r4) in <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.List getEnabledModulesByClass(java.lang.Class)> ==> <java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>
VIRTUAL edge: $r3 = virtualinvoke r2.<com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.Collection getEnabledPlugins()>() in <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.List getEnabledModuleDescriptorsByClass(java.lang.Class)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.Collection getEnabledPlugins()>
VIRTUAL edge: virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() in <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.List getEnabledModuleDescriptorsByClass(java.lang.Class)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() in <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.List getEnabledModuleDescriptorsByClass(java.lang.Class)> ==> <java.lang.Object: java.lang.Class getClass()>
INTERFACE edge: $r9 = interfaceinvoke $r6.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($r8) in <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.List getEnabledModuleDescriptorsByClass(java.lang.Class)> ==> <java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>
SPECIAL edge: specialinvoke $r10.<com.atlassian.plugin.predicate.EnabledModulePredicate: void <init>()>() in <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.List getEnabledModuleDescriptorsByClass(java.lang.Class)> ==> <com.atlassian.plugin.predicate.EnabledModulePredicate: void <init>()>
INTERFACE edge: $r11 = interfaceinvoke $r9.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($r10) in <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.List getEnabledModuleDescriptorsByClass(java.lang.Class)> ==> <java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>
INTERFACE edge: $r14 = interfaceinvoke $r11.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r13) in <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.List getEnabledModuleDescriptorsByClass(java.lang.Class)> ==> <java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>
INTERFACE edge: $r16 = interfaceinvoke $r14.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r15) in <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.List getEnabledModuleDescriptorsByClass(java.lang.Class)> ==> <java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.atlassian.plugin.manager.ProductPluginAccessorBase: java.lang.ClassLoader getClassLoader()>() in <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.io.InputStream getDynamicResourceAsStream(java.lang.String)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.lang.ClassLoader getClassLoader()>
VIRTUAL edge: $r3 = virtualinvoke $r1.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>(r2) in <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.io.InputStream getDynamicResourceAsStream(java.lang.String)> ==> <java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r1.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>(r2) in <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.io.InputStream getDynamicResourceAsStream(java.lang.String)> ==> <com.atlassian.plugin.util.ChainingClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r1.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>(r2) in <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.io.InputStream getDynamicResourceAsStream(java.lang.String)> ==> <com.atlassian.plugin.classloader.DelegationClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>
VIRTUAL edge: r2 = virtualinvoke r0.<com.atlassian.plugin.manager.ProductPluginAccessorBase: com.atlassian.plugin.Plugin getPlugin(java.lang.String)>(r1) in <com.atlassian.plugin.manager.ProductPluginAccessorBase: boolean isSystemPlugin(java.lang.String)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase: com.atlassian.plugin.Plugin getPlugin(java.lang.String)>
INTERFACE edge: $z0 = interfaceinvoke r2.<com.atlassian.plugin.Plugin: boolean isSystemPlugin()>() in <com.atlassian.plugin.manager.ProductPluginAccessorBase: boolean isSystemPlugin(java.lang.String)> ==> <com.atlassian.plugin.impl.AbstractPlugin: boolean isSystemPlugin()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.atlassian.plugin.manager.PluginPersistentStateStore: com.atlassian.plugin.manager.PluginPersistentState load()>() in <com.atlassian.plugin.manager.ProductPluginAccessorBase: com.atlassian.plugin.PluginRestartState getPluginRestartState(java.lang.String)> ==> <com.atlassian.plugin.manager.store.MemoryPluginPersistentStateStore: com.atlassian.plugin.manager.PluginPersistentState load()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.atlassian.plugin.manager.PluginPersistentStateStore: com.atlassian.plugin.manager.PluginPersistentState load()>() in <com.atlassian.plugin.manager.ProductPluginAccessorBase: com.atlassian.plugin.PluginRestartState getPluginRestartState(java.lang.String)> ==> <com.atlassian.plugin.manager.store.LoadOnlyPluginPersistentStateStore: com.atlassian.plugin.manager.PluginPersistentState load()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.atlassian.plugin.manager.PluginPersistentStateStore: com.atlassian.plugin.manager.PluginPersistentState load()>() in <com.atlassian.plugin.manager.ProductPluginAccessorBase: com.atlassian.plugin.PluginRestartState getPluginRestartState(java.lang.String)> ==> <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore: com.atlassian.plugin.manager.PluginPersistentState load()>
INTERFACE edge: $r4 = interfaceinvoke $r2.<com.atlassian.plugin.manager.PluginPersistentState: com.atlassian.plugin.PluginRestartState getPluginRestartState(java.lang.String)>(r3) in <com.atlassian.plugin.manager.ProductPluginAccessorBase: com.atlassian.plugin.PluginRestartState getPluginRestartState(java.lang.String)> ==> <com.atlassian.plugin.manager.PluginPersistentState: com.atlassian.plugin.PluginRestartState getPluginRestartState(java.lang.String)>
INTERFACE edge: $r4 = interfaceinvoke $r2.<com.atlassian.plugin.manager.PluginPersistentState: com.atlassian.plugin.PluginRestartState getPluginRestartState(java.lang.String)>(r3) in <com.atlassian.plugin.manager.ProductPluginAccessorBase: com.atlassian.plugin.PluginRestartState getPluginRestartState(java.lang.String)> ==> <com.atlassian.plugin.manager.DefaultPluginPersistentState: com.atlassian.plugin.PluginRestartState getPluginRestartState(java.lang.String)>
INTERFACE edge: $r10 = interfaceinvoke $r9.<com.atlassian.plugin.PluginInternal: java.lang.Iterable getDynamicModuleDescriptors()>() in <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.lang.Iterable getDynamicModules(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.Iterable getDynamicModuleDescriptors()>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.lang.Iterable getDynamicModules(com.atlassian.plugin.Plugin)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0) in <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.lang.Iterable getDynamicModules(com.atlassian.plugin.Plugin)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not implement com.atlassian.plugin.PluginInternal it is a ") in <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.lang.Iterable getDynamicModules(com.atlassian.plugin.Plugin)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() in <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.lang.Iterable getDynamicModules(com.atlassian.plugin.Plugin)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getCanonicalName()>() in <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.lang.Iterable getDynamicModules(com.atlassian.plugin.Plugin)> ==> <java.lang.Class: java.lang.String getCanonicalName()>
VIRTUAL edge: $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) in <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.lang.Iterable getDynamicModules(com.atlassian.plugin.Plugin)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.lang.Iterable getDynamicModules(com.atlassian.plugin.Plugin)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8) in <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.lang.Iterable getDynamicModules(com.atlassian.plugin.Plugin)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
INTERFACE edge: $r1 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: java.util.Collection getModuleDescriptors()>() in <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.stream.Stream lambda$getEnabledModuleDescriptorsByClass$4(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.util.Collection getModuleDescriptors()>
INTERFACE edge: $r1 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: java.util.Collection getModuleDescriptors()>() in <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.stream.Stream lambda$getModuleDescriptors$2(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.util.Collection getModuleDescriptors()>
INTERFACE edge: $r1 = interfaceinvoke r0.<com.atlassian.plugin.ModuleDescriptor: java.lang.Object getModule()>() in <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.lang.Object lambda$getModules$1(com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.ModuleDescriptor: java.lang.Object getModule()>
INTERFACE edge: $r1 = interfaceinvoke r0.<com.atlassian.plugin.ModuleDescriptor: java.lang.Object getModule()>() in <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.lang.Object lambda$getModules$1(com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.descriptors.AbstractNoOpModuleDescriptor: java.lang.Object getModule()>
INTERFACE edge: $r1 = interfaceinvoke r0.<com.atlassian.plugin.ModuleDescriptor: java.lang.Object getModule()>() in <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.lang.Object lambda$getModules$1(com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.eventlistener.descriptors.EventListenerModuleDescriptor: java.lang.Object getModule()>
INTERFACE edge: $r5 = interfaceinvoke r0.<com.atlassian.plugin.ModuleDescriptor: java.lang.String getCompleteKey()>() in <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.lang.Object lambda$getModules$1(com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.String getCompleteKey()>
INTERFACE edge: interfaceinvoke r0.<com.atlassian.plugin.ModuleDescriptor: void setBroken()>() in <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.lang.Object lambda$getModules$1(com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void setBroken()>
INTERFACE edge: $r2 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginState getPluginState()>() in <com.atlassian.plugin.manager.ProductPluginAccessorBase: boolean lambda$getEnabledPlugins$0(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: com.atlassian.plugin.PluginState getPluginState()>
INTERFACE edge: $r2 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginState getPluginState()>() in <com.atlassian.plugin.manager.ProductPluginAccessorBase: boolean lambda$getEnabledPlugins$0(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginState getPluginState()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.scope.EverythingIsActiveScopeManager: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.loaders.SinglePluginLoader: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.parsers.XmlDescriptorParserFactory: void <init>()>() in <com.atlassian.plugin.loaders.SinglePluginLoader: void <init>(java.lang.String)> ==> <com.atlassian.plugin.parsers.XmlDescriptorParserFactory: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.loaders.SinglePluginLoader: void <init>(java.net.URL)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.parsers.XmlDescriptorParserFactory: void <init>()>() in <com.atlassian.plugin.loaders.SinglePluginLoader: void <init>(java.net.URL)> ==> <com.atlassian.plugin.parsers.XmlDescriptorParserFactory: void <init>()>
VIRTUAL edge: r18 = virtualinvoke r0.<com.atlassian.plugin.loaders.SinglePluginLoader: com.atlassian.plugin.Plugin loadPlugin(com.atlassian.plugin.ModuleDescriptorFactory)>(r2) in <com.atlassian.plugin.loaders.SinglePluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.SinglePluginLoader: com.atlassian.plugin.Plugin loadPlugin(com.atlassian.plugin.ModuleDescriptorFactory)>
SPECIAL edge: r6 = specialinvoke r0.<com.atlassian.plugin.loaders.SinglePluginLoader: java.lang.String getIdentifier()>() in <com.atlassian.plugin.loaders.SinglePluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.SinglePluginLoader: java.lang.String getIdentifier()>
SPECIAL edge: specialinvoke $r21.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.loaders.SinglePluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r9 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error loading plugin or descriptor: ") in <com.atlassian.plugin.loaders.SinglePluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6) in <com.atlassian.plugin.loaders.SinglePluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.loaders.SinglePluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r8.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>($r11, $r4) in <com.atlassian.plugin.loaders.SinglePluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r22.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.loaders.SinglePluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r14 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6) in <com.atlassian.plugin.loaders.SinglePluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ") in <com.atlassian.plugin.loaders.SinglePluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4) in <com.atlassian.plugin.loaders.SinglePluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.loaders.SinglePluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r23.<com.atlassian.plugin.impl.UnloadablePlugin: void <init>(java.lang.String)>($r17) in <com.atlassian.plugin.loaders.SinglePluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.impl.UnloadablePlugin: void <init>(java.lang.String)>
INTERFACE edge: interfaceinvoke $r24.<com.atlassian.plugin.Plugin: void setKey(java.lang.String)>(r6) in <com.atlassian.plugin.loaders.SinglePluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.impl.AbstractPlugin: void setKey(java.lang.String)>
STATIC edge: $r3 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet of()>() in <com.atlassian.plugin.loaders.SinglePluginLoader: com.atlassian.plugin.Plugin loadPlugin(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet of()>
STATIC edge: r6 = staticinvoke <com.atlassian.plugin.impl.UnloadablePluginFactory: com.atlassian.plugin.impl.UnloadablePlugin createUnloadablePlugin(com.atlassian.plugin.Plugin)>($r39) in <com.atlassian.plugin.loaders.SinglePluginLoader: com.atlassian.plugin.Plugin loadPlugin(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.impl.UnloadablePluginFactory: com.atlassian.plugin.impl.UnloadablePlugin createUnloadablePlugin(com.atlassian.plugin.Plugin)>
SPECIAL edge: specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("This PluginLoader does not support addition.") in <com.atlassian.plugin.loaders.SinglePluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.lang.UnsupportedOperationException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r3.<com.atlassian.plugin.PluginException: void <init>(java.lang.String)>("This PluginLoader does not support removal.") in <com.atlassian.plugin.loaders.SinglePluginLoader: void removePlugin(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.PluginException: void <init>(java.lang.String)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Collection: boolean contains(java.lang.Object)>(r1) in <com.atlassian.plugin.loaders.SinglePluginLoader: com.atlassian.plugin.ModuleDescriptor createModule(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.HashSet: boolean contains(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Collection: boolean contains(java.lang.Object)>(r1) in <com.atlassian.plugin.loaders.SinglePluginLoader: com.atlassian.plugin.ModuleDescriptor createModule(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.LinkedList: boolean contains(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Collection: boolean contains(java.lang.Object)>(r1) in <com.atlassian.plugin.loaders.SinglePluginLoader: com.atlassian.plugin.ModuleDescriptor createModule(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.ArrayDeque: boolean contains(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Collection: boolean contains(java.lang.Object)>(r1) in <com.atlassian.plugin.loaders.SinglePluginLoader: com.atlassian.plugin.ModuleDescriptor createModule(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.concurrent.CopyOnWriteArraySet: boolean contains(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Collection: boolean contains(java.lang.Object)>(r1) in <com.atlassian.plugin.loaders.SinglePluginLoader: com.atlassian.plugin.ModuleDescriptor createModule(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.TreeSet: boolean contains(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Collection: boolean contains(java.lang.Object)>(r1) in <com.atlassian.plugin.loaders.SinglePluginLoader: com.atlassian.plugin.ModuleDescriptor createModule(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.ArrayList: boolean contains(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.loaders.ClassPathPluginLoader: void <init>(java.lang.String)>("atlassian-plugin.xml") in <com.atlassian.plugin.loaders.ClassPathPluginLoader: void <init>()> ==> <com.atlassian.plugin.loaders.ClassPathPluginLoader: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.loaders.ClassPathPluginLoader: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.loaders.ClassPathPluginLoader: void loadClassPathPlugins(com.atlassian.plugin.ModuleDescriptorFactory)>(r5) in <com.atlassian.plugin.loaders.ClassPathPluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.ClassPathPluginLoader: void loadClassPathPlugins(com.atlassian.plugin.ModuleDescriptorFactory)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>() in <com.atlassian.plugin.loaders.ClassPathPluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.HashMap: java.util.Set keySet()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>() in <com.atlassian.plugin.loaders.ClassPathPluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.Hashtable: java.util.Set keySet()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>() in <com.atlassian.plugin.loaders.ClassPathPluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.TreeMap: java.util.Set keySet()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>() in <com.atlassian.plugin.loaders.ClassPathPluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.jar.Attributes: java.util.Set keySet()>
CLINIT edge: $r17 = <com.atlassian.plugin.loaders.ClassPathPluginLoader: org.slf4j.Logger log> in <com.atlassian.plugin.loaders.ClassPathPluginLoader: void loadClassPathPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.ClassPathPluginLoader: void <clinit>()>
STATIC edge: r3 = staticinvoke <com.atlassian.plugin.util.ClassLoaderUtils: java.util.Enumeration getResources(java.lang.String,java.lang.Class)>($r1, $r2) in <com.atlassian.plugin.loaders.ClassPathPluginLoader: void loadClassPathPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.util.ClassLoaderUtils: java.util.Enumeration getResources(java.lang.String,java.lang.Class)>
CLINIT edge: $r6 = new com.atlassian.plugin.loaders.SinglePluginLoader in <com.atlassian.plugin.loaders.ClassPathPluginLoader: void loadClassPathPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.SinglePluginLoader: void <clinit>()>
CLINIT edge: <com.atlassian.plugin.loaders.ClassPathPluginLoader: org.slf4j.Logger log> = $r0 in <com.atlassian.plugin.loaders.ClassPathPluginLoader: void <clinit>()> ==> <com.atlassian.plugin.loaders.ClassPathPluginLoader: void <clinit>()>
STATIC edge: $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/atlassian/plugin/loaders/ClassPathPluginLoader;") in <com.atlassian.plugin.loaders.ClassPathPluginLoader: void <clinit>()> ==> <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1) in <com.atlassian.plugin.loaders.ClassPathPluginLoader: com.atlassian.plugin.ModuleDescriptor createModule(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.HashMap: boolean containsKey(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1) in <com.atlassian.plugin.loaders.ClassPathPluginLoader: com.atlassian.plugin.ModuleDescriptor createModule(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.Hashtable: boolean containsKey(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1) in <com.atlassian.plugin.loaders.ClassPathPluginLoader: com.atlassian.plugin.ModuleDescriptor createModule(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.TreeMap: boolean containsKey(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1) in <com.atlassian.plugin.loaders.ClassPathPluginLoader: com.atlassian.plugin.ModuleDescriptor createModule(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.jar.Attributes: boolean containsKey(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.atlassian.plugin.loaders.ClassPathPluginLoader: com.atlassian.plugin.ModuleDescriptor createModule(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.atlassian.plugin.loaders.ClassPathPluginLoader: com.atlassian.plugin.ModuleDescriptor createModule(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.atlassian.plugin.loaders.ClassPathPluginLoader: com.atlassian.plugin.ModuleDescriptor createModule(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.TreeMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.atlassian.plugin.loaders.ClassPathPluginLoader: com.atlassian.plugin.ModuleDescriptor createModule(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.atlassian.plugin.loaders.ClassPathPluginLoader: com.atlassian.plugin.ModuleDescriptor createModule(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<com.atlassian.plugin.loaders.SinglePluginLoader: com.atlassian.plugin.ModuleDescriptor createModule(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)>(r1, r5, r6) in <com.atlassian.plugin.loaders.ClassPathPluginLoader: com.atlassian.plugin.ModuleDescriptor createModule(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.SinglePluginLoader: com.atlassian.plugin.ModuleDescriptor createModule(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)>
SPECIAL edge: specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("This PluginLoader does not support addition.") in <com.atlassian.plugin.loaders.ClassPathPluginLoader: java.lang.Iterable loadFoundPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.lang.UnsupportedOperationException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r3.<com.atlassian.plugin.PluginException: void <init>(java.lang.String)>("This PluginLoader does not support removal.") in <com.atlassian.plugin.loaders.ClassPathPluginLoader: void removePlugin(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.PluginException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.util.resource.NoOpAlternativeResourceLoader: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<com.atlassian.plugin.manager.ProductPluginAccessorBase: void <init>(com.atlassian.plugin.PluginRegistry$ReadOnly,com.atlassian.plugin.manager.PluginPersistentStateStore,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager)>(r3, r4, r5, r6) in <com.atlassian.plugin.manager.ProductPluginAccessor: void <init>(com.atlassian.plugin.PluginRegistry$ReadOnly,com.atlassian.plugin.manager.PluginPersistentStateStore,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase: void <init>(com.atlassian.plugin.PluginRegistry$ReadOnly,com.atlassian.plugin.manager.PluginPersistentStateStore,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager)>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: void <init>(com.atlassian.plugin.PluginAccessor,com.atlassian.plugin.event.PluginEventManager,com.atlassian.plugin.PluginController)>($r2, r6, $r7) in <com.atlassian.plugin.manager.ProductPluginAccessor: void <init>(com.atlassian.plugin.PluginRegistry$ReadOnly,com.atlassian.plugin.manager.PluginPersistentStateStore,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager)> ==> <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: void <init>(com.atlassian.plugin.PluginAccessor,com.atlassian.plugin.event.PluginEventManager,com.atlassian.plugin.PluginController)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.manager.ForwardingPluginAccessor: void <init>(com.atlassian.plugin.PluginAccessor)>($r1) in <com.atlassian.plugin.manager.ProductPluginAccessor: void <init>(com.atlassian.plugin.PluginRegistry$ReadOnly,com.atlassian.plugin.manager.PluginPersistentStateStore,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager)> ==> <com.atlassian.plugin.manager.ForwardingPluginAccessor: void <init>(com.atlassian.plugin.PluginAccessor)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.manager.ProductPluginAccessor: void <init>(com.atlassian.plugin.PluginRegistry$ReadOnly,com.atlassian.plugin.manager.PluginPersistentStateStore,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager)>(r1, r2, r3, r4) in <com.atlassian.plugin.manager.ProductPluginAccessor: void <init>(com.atlassian.plugin.PluginRegistry$ReadOnly,com.atlassian.plugin.manager.PluginPersistentStateStore,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager,com.atlassian.plugin.scope.ScopeManager)> ==> <com.atlassian.plugin.manager.ProductPluginAccessor: void <init>(com.atlassian.plugin.PluginRegistry$ReadOnly,com.atlassian.plugin.manager.PluginPersistentStateStore,com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.event.PluginEventManager)>
SPECIAL edge: $r2 = specialinvoke r0.<com.atlassian.plugin.manager.ForwardingPluginAccessor: java.lang.Iterable getDynamicModules(com.atlassian.plugin.Plugin)>(r1) in <com.atlassian.plugin.manager.ProductPluginAccessor: java.lang.Iterable getDynamicModules(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.ForwardingPluginAccessor: java.lang.Iterable getDynamicModules(com.atlassian.plugin.Plugin)>
SPECIAL edge: $z0 = specialinvoke r0.<com.atlassian.plugin.manager.ForwardingPluginAccessor: boolean isSystemPlugin(java.lang.String)>(r1) in <com.atlassian.plugin.manager.ProductPluginAccessor: boolean isSystemPlugin(java.lang.String)> ==> <com.atlassian.plugin.manager.ForwardingPluginAccessor: boolean isSystemPlugin(java.lang.String)>
SPECIAL edge: $z0 = specialinvoke r0.<com.atlassian.plugin.manager.ForwardingPluginAccessor: boolean isPluginModuleEnabled(java.lang.String)>(r1) in <com.atlassian.plugin.manager.ProductPluginAccessor: boolean isPluginModuleEnabled(java.lang.String)> ==> <com.atlassian.plugin.manager.ForwardingPluginAccessor: boolean isPluginModuleEnabled(java.lang.String)>
SPECIAL edge: $z0 = specialinvoke r0.<com.atlassian.plugin.manager.ForwardingPluginAccessor: boolean isPluginEnabled(java.lang.String)>(r1) in <com.atlassian.plugin.manager.ProductPluginAccessor: boolean isPluginEnabled(java.lang.String)> ==> <com.atlassian.plugin.manager.ForwardingPluginAccessor: boolean isPluginEnabled(java.lang.String)>
SPECIAL edge: $r2 = specialinvoke r0.<com.atlassian.plugin.manager.ForwardingPluginAccessor: java.util.Collection getPlugins(java.util.function.Predicate)>(r1) in <com.atlassian.plugin.manager.ProductPluginAccessor: java.util.Collection getPlugins(java.util.function.Predicate)> ==> <com.atlassian.plugin.manager.ForwardingPluginAccessor: java.util.Collection getPlugins(java.util.function.Predicate)>
SPECIAL edge: $r1 = specialinvoke r0.<com.atlassian.plugin.manager.ForwardingPluginAccessor: java.util.Collection getPlugins()>() in <com.atlassian.plugin.manager.ProductPluginAccessor: java.util.Collection getPlugins()> ==> <com.atlassian.plugin.manager.ForwardingPluginAccessor: java.util.Collection getPlugins()>
SPECIAL edge: $r2 = specialinvoke r0.<com.atlassian.plugin.manager.ForwardingPluginAccessor: com.atlassian.plugin.PluginRestartState getPluginRestartState(java.lang.String)>(r1) in <com.atlassian.plugin.manager.ProductPluginAccessor: com.atlassian.plugin.PluginRestartState getPluginRestartState(java.lang.String)> ==> <com.atlassian.plugin.manager.ForwardingPluginAccessor: com.atlassian.plugin.PluginRestartState getPluginRestartState(java.lang.String)>
SPECIAL edge: $r2 = specialinvoke r0.<com.atlassian.plugin.manager.ForwardingPluginAccessor: com.atlassian.plugin.ModuleDescriptor getPluginModule(java.lang.String)>(r1) in <com.atlassian.plugin.manager.ProductPluginAccessor: com.atlassian.plugin.ModuleDescriptor getPluginModule(java.lang.String)> ==> <com.atlassian.plugin.manager.ForwardingPluginAccessor: com.atlassian.plugin.ModuleDescriptor getPluginModule(java.lang.String)>
SPECIAL edge: $r2 = specialinvoke r0.<com.atlassian.plugin.manager.ForwardingPluginAccessor: com.atlassian.plugin.Plugin getPlugin(java.lang.String)>(r1) in <com.atlassian.plugin.manager.ProductPluginAccessor: com.atlassian.plugin.Plugin getPlugin(java.lang.String)> ==> <com.atlassian.plugin.manager.ForwardingPluginAccessor: com.atlassian.plugin.Plugin getPlugin(java.lang.String)>
SPECIAL edge: $r2 = specialinvoke r0.<com.atlassian.plugin.manager.ForwardingPluginAccessor: java.util.Collection getModules(java.util.function.Predicate)>(r1) in <com.atlassian.plugin.manager.ProductPluginAccessor: java.util.Collection getModules(java.util.function.Predicate)> ==> <com.atlassian.plugin.manager.ForwardingPluginAccessor: java.util.Collection getModules(java.util.function.Predicate)>
SPECIAL edge: $r2 = specialinvoke r0.<com.atlassian.plugin.manager.ForwardingPluginAccessor: java.util.Collection getModuleDescriptors(java.util.function.Predicate)>(r1) in <com.atlassian.plugin.manager.ProductPluginAccessor: java.util.Collection getModuleDescriptors(java.util.function.Predicate)> ==> <com.atlassian.plugin.manager.ForwardingPluginAccessor: java.util.Collection getModuleDescriptors(java.util.function.Predicate)>
SPECIAL edge: $r1 = specialinvoke r0.<com.atlassian.plugin.manager.ForwardingPluginAccessor: java.util.Collection getEnabledPlugins()>() in <com.atlassian.plugin.manager.ProductPluginAccessor: java.util.Collection getEnabledPlugins()> ==> <com.atlassian.plugin.manager.ForwardingPluginAccessor: java.util.Collection getEnabledPlugins()>
SPECIAL edge: $r2 = specialinvoke r0.<com.atlassian.plugin.manager.ForwardingPluginAccessor: com.atlassian.plugin.ModuleDescriptor getEnabledPluginModule(java.lang.String)>(r1) in <com.atlassian.plugin.manager.ProductPluginAccessor: com.atlassian.plugin.ModuleDescriptor getEnabledPluginModule(java.lang.String)> ==> <com.atlassian.plugin.manager.ForwardingPluginAccessor: com.atlassian.plugin.ModuleDescriptor getEnabledPluginModule(java.lang.String)>
SPECIAL edge: $r2 = specialinvoke r0.<com.atlassian.plugin.manager.ForwardingPluginAccessor: com.atlassian.plugin.Plugin getEnabledPlugin(java.lang.String)>(r1) in <com.atlassian.plugin.manager.ProductPluginAccessor: com.atlassian.plugin.Plugin getEnabledPlugin(java.lang.String)> ==> <com.atlassian.plugin.manager.ForwardingPluginAccessor: com.atlassian.plugin.Plugin getEnabledPlugin(java.lang.String)>
SPECIAL edge: $r2 = specialinvoke r0.<com.atlassian.plugin.manager.ForwardingPluginAccessor: java.util.List getEnabledModulesByClass(java.lang.Class)>(r1) in <com.atlassian.plugin.manager.ProductPluginAccessor: java.util.List getEnabledModulesByClass(java.lang.Class)> ==> <com.atlassian.plugin.manager.ForwardingPluginAccessor: java.util.List getEnabledModulesByClass(java.lang.Class)>
SPECIAL edge: $r2 = specialinvoke r0.<com.atlassian.plugin.manager.ForwardingPluginAccessor: java.util.List getActiveModuleDescriptorsByClass(java.lang.Class)>(r1) in <com.atlassian.plugin.manager.ProductPluginAccessor: java.util.List getActiveModuleDescriptorsByClass(java.lang.Class)> ==> <com.atlassian.plugin.manager.ForwardingPluginAccessor: java.util.List getActiveModuleDescriptorsByClass(java.lang.Class)>
SPECIAL edge: $r2 = specialinvoke r0.<com.atlassian.plugin.manager.ForwardingPluginAccessor: java.util.List getEnabledModuleDescriptorsByClass(java.lang.Class)>(r1) in <com.atlassian.plugin.manager.ProductPluginAccessor: java.util.List getEnabledModuleDescriptorsByClass(java.lang.Class)> ==> <com.atlassian.plugin.manager.ForwardingPluginAccessor: java.util.List getEnabledModuleDescriptorsByClass(java.lang.Class)>
SPECIAL edge: $r2 = specialinvoke r0.<com.atlassian.plugin.manager.ForwardingPluginAccessor: java.io.InputStream getDynamicResourceAsStream(java.lang.String)>(r1) in <com.atlassian.plugin.manager.ProductPluginAccessor: java.io.InputStream getDynamicResourceAsStream(java.lang.String)> ==> <com.atlassian.plugin.manager.ForwardingPluginAccessor: java.io.InputStream getDynamicResourceAsStream(java.lang.String)>
SPECIAL edge: $r1 = specialinvoke r0.<com.atlassian.plugin.manager.ForwardingPluginAccessor: java.lang.ClassLoader getClassLoader()>() in <com.atlassian.plugin.manager.ProductPluginAccessor: java.lang.ClassLoader getClassLoader()> ==> <com.atlassian.plugin.manager.ForwardingPluginAccessor: java.lang.ClassLoader getClassLoader()>
SPECIAL edge: specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Not implemented") in <com.atlassian.plugin.manager.ProductPluginAccessor$1: void enablePlugins(java.lang.String[])> ==> <java.lang.UnsupportedOperationException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Not implemented") in <com.atlassian.plugin.manager.ProductPluginAccessor$1: void disablePlugin(java.lang.String)> ==> <java.lang.UnsupportedOperationException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Not implemented") in <com.atlassian.plugin.manager.ProductPluginAccessor$1: void enablePluginModule(java.lang.String)> ==> <java.lang.UnsupportedOperationException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Not implemented") in <com.atlassian.plugin.manager.ProductPluginAccessor$1: void disablePluginModule(java.lang.String)> ==> <java.lang.UnsupportedOperationException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Not implemented") in <com.atlassian.plugin.manager.ProductPluginAccessor$1: java.util.Set installPlugins(com.atlassian.plugin.PluginArtifact[])> ==> <java.lang.UnsupportedOperationException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Not implemented") in <com.atlassian.plugin.manager.ProductPluginAccessor$1: void uninstall(com.atlassian.plugin.Plugin)> ==> <java.lang.UnsupportedOperationException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Not implemented") in <com.atlassian.plugin.manager.ProductPluginAccessor$1: void revertRestartRequiredChange(java.lang.String)> ==> <java.lang.UnsupportedOperationException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Not implemented") in <com.atlassian.plugin.manager.ProductPluginAccessor$1: int scanForNewPlugins()> ==> <java.lang.UnsupportedOperationException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Not implemented") in <com.atlassian.plugin.manager.ProductPluginAccessor$1: com.atlassian.plugin.ModuleDescriptor addDynamicModule(com.atlassian.plugin.Plugin,org.dom4j.Element)> ==> <java.lang.UnsupportedOperationException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Not implemented") in <com.atlassian.plugin.manager.ProductPluginAccessor$1: void removeDynamicModule(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor)> ==> <java.lang.UnsupportedOperationException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.util.resource.AlternativeDirectoryResourceLoader: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.util.resource.AlternativeDirectoryResourceLoader: java.util.List getPluginResourceDirs()>() in <com.atlassian.plugin.util.resource.AlternativeDirectoryResourceLoader: void <init>()> ==> <com.atlassian.plugin.util.resource.AlternativeDirectoryResourceLoader: java.util.List getPluginResourceDirs()>
CLINIT edge: r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("plugin.resource.directories", "") in <com.atlassian.plugin.util.resource.AlternativeDirectoryResourceLoader: java.util.List getPluginResourceDirs()> ==> <java.lang.System: void <clinit>()>
STATIC edge: r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("plugin.resource.directories", "") in <com.atlassian.plugin.util.resource.AlternativeDirectoryResourceLoader: java.util.List getPluginResourceDirs()> ==> <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>
CLINIT edge: $r11 = new java.io.File in <com.atlassian.plugin.util.resource.AlternativeDirectoryResourceLoader: java.util.List getPluginResourceDirs()> ==> <java.io.File: void <clinit>()>
CLINIT edge: $r6 = <com.atlassian.plugin.util.resource.AlternativeDirectoryResourceLoader: com.google.common.base.Splitter splitter> in <com.atlassian.plugin.util.resource.AlternativeDirectoryResourceLoader: java.util.List getPluginResourceDirs()> ==> <com.atlassian.plugin.util.resource.AlternativeDirectoryResourceLoader: void <clinit>()>
SPECIAL edge: $r1 = specialinvoke r0.<com.atlassian.plugin.util.resource.AlternativeDirectoryResourceLoader: java.util.List getPluginResourceDirs()>() in <com.atlassian.plugin.util.resource.AlternativeDirectoryResourceLoader: java.net.URL getResource(java.lang.String)> ==> <com.atlassian.plugin.util.resource.AlternativeDirectoryResourceLoader: java.util.List getPluginResourceDirs()>
INTERFACE edge: r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.util.resource.AlternativeDirectoryResourceLoader: java.net.URL getResource(java.lang.String)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.util.resource.AlternativeDirectoryResourceLoader: java.net.URL getResource(java.lang.String)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke $r5.<java.io.File: void <init>(java.io.File,java.lang.String)>(r4, r6) in <com.atlassian.plugin.util.resource.AlternativeDirectoryResourceLoader: java.net.URL getResource(java.lang.String)> ==> <java.io.File: void <init>(java.io.File,java.lang.String)>
VIRTUAL edge: $z1 = virtualinvoke $r5.<java.io.File: boolean exists()>() in <com.atlassian.plugin.util.resource.AlternativeDirectoryResourceLoader: java.net.URL getResource(java.lang.String)> ==> <java.io.File: boolean exists()>
VIRTUAL edge: $r9 = virtualinvoke $r5.<java.io.File: java.net.URI toURI()>() in <com.atlassian.plugin.util.resource.AlternativeDirectoryResourceLoader: java.net.URL getResource(java.lang.String)> ==> <java.io.File: java.net.URI toURI()>
VIRTUAL edge: $r16 = virtualinvoke $r5.<java.io.File: java.lang.String toString()>() in <com.atlassian.plugin.util.resource.AlternativeDirectoryResourceLoader: java.net.URL getResource(java.lang.String)> ==> <java.io.File: java.lang.String toString()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.net.URI: java.net.URL toURL()>() in <com.atlassian.plugin.util.resource.AlternativeDirectoryResourceLoader: java.net.URL getResource(java.lang.String)> ==> <java.net.URI: java.net.URL toURL()>
SPECIAL edge: specialinvoke $r13.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.util.resource.AlternativeDirectoryResourceLoader: java.net.URL getResource(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Malformed URL: ") in <com.atlassian.plugin.util.resource.AlternativeDirectoryResourceLoader: java.net.URL getResource(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16) in <com.atlassian.plugin.util.resource.AlternativeDirectoryResourceLoader: java.net.URL getResource(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.util.resource.AlternativeDirectoryResourceLoader: java.net.URL getResource(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r14.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>($r18, $r11) in <com.atlassian.plugin.util.resource.AlternativeDirectoryResourceLoader: java.net.URL getResource(java.lang.String)> ==> <org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>
INTERFACE edge: interfaceinvoke $r8.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("File {} not found, ignoring", $r5) in <com.atlassian.plugin.util.resource.AlternativeDirectoryResourceLoader: java.net.URL getResource(java.lang.String)> ==> <org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>
VIRTUAL edge: r2 = virtualinvoke r0.<com.atlassian.plugin.util.resource.AlternativeDirectoryResourceLoader: java.net.URL getResource(java.lang.String)>(r1) in <com.atlassian.plugin.util.resource.AlternativeDirectoryResourceLoader: java.io.InputStream getResourceAsStream(java.lang.String)> ==> <com.atlassian.plugin.util.resource.AlternativeDirectoryResourceLoader: java.net.URL getResource(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r2.<java.net.URL: java.io.InputStream openStream()>() in <com.atlassian.plugin.util.resource.AlternativeDirectoryResourceLoader: java.io.InputStream getResourceAsStream(java.lang.String)> ==> <java.net.URL: java.io.InputStream openStream()>
SPECIAL edge: specialinvoke $r6.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.util.resource.AlternativeDirectoryResourceLoader: java.io.InputStream getResourceAsStream(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to open URL ") in <com.atlassian.plugin.util.resource.AlternativeDirectoryResourceLoader: java.io.InputStream getResourceAsStream(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2) in <com.atlassian.plugin.util.resource.AlternativeDirectoryResourceLoader: java.io.InputStream getResourceAsStream(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.util.resource.AlternativeDirectoryResourceLoader: java.io.InputStream getResourceAsStream(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r7.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>($r10, $r4) in <com.atlassian.plugin.util.resource.AlternativeDirectoryResourceLoader: java.io.InputStream getResourceAsStream(java.lang.String)> ==> <org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>
SPECIAL edge: $r1 = specialinvoke r0.<com.atlassian.plugin.util.resource.AlternativeDirectoryResourceLoader: java.util.List getPluginResourceDirs()>() in <com.atlassian.plugin.util.resource.AlternativeDirectoryResourceLoader: java.util.List getResourceDirectories()> ==> <com.atlassian.plugin.util.resource.AlternativeDirectoryResourceLoader: java.util.List getPluginResourceDirs()>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.manager.store.PluginPersistentStateStoreMigrator$lambda_removeDirectives_0__1: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore)>($r0) in <com.atlassian.plugin.manager.store.PluginPersistentStateStoreMigrator$lambda_removeDirectives_0__1: io.atlassian.fugue.Effect bootstrap$(com.atlassian.plugin.manager.PluginPersistentStateStore)> ==> <com.atlassian.plugin.manager.store.PluginPersistentStateStoreMigrator$lambda_removeDirectives_0__1: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.store.PluginPersistentStateStoreMigrator$lambda_removeDirectives_0__1: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.JarPluginArtifact$lambda_containsJavaExecutableCode_0__2: void <init>(com.atlassian.plugin.JarPluginArtifact)>($r0) in <com.atlassian.plugin.JarPluginArtifact$lambda_containsJavaExecutableCode_0__2: java.util.function.Predicate bootstrap$(com.atlassian.plugin.JarPluginArtifact)> ==> <com.atlassian.plugin.JarPluginArtifact$lambda_containsJavaExecutableCode_0__2: void <init>(com.atlassian.plugin.JarPluginArtifact)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.JarPluginArtifact$lambda_containsJavaExecutableCode_0__2: void <init>(com.atlassian.plugin.JarPluginArtifact)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<com.atlassian.plugin.JarPluginArtifact: boolean lambda$containsJavaExecutableCode$0(java.util.jar.JarEntry)>($r2) in <com.atlassian.plugin.JarPluginArtifact$lambda_containsJavaExecutableCode_0__2: boolean test(java.lang.Object)> ==> <com.atlassian.plugin.JarPluginArtifact: boolean lambda$containsJavaExecutableCode$0(java.util.jar.JarEntry)>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.JarPluginArtifact$isSpringContext__3: void <init>(com.atlassian.plugin.JarPluginArtifact)>($r0) in <com.atlassian.plugin.JarPluginArtifact$isSpringContext__3: java.util.function.Predicate bootstrap$(com.atlassian.plugin.JarPluginArtifact)> ==> <com.atlassian.plugin.JarPluginArtifact$isSpringContext__3: void <init>(com.atlassian.plugin.JarPluginArtifact)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.JarPluginArtifact$isSpringContext__3: void <init>(com.atlassian.plugin.JarPluginArtifact)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<com.atlassian.plugin.JarPluginArtifact: boolean isSpringContext(java.util.zip.ZipEntry)>($r2) in <com.atlassian.plugin.JarPluginArtifact$isSpringContext__3: boolean test(java.lang.Object)> ==> <com.atlassian.plugin.JarPluginArtifact: boolean isSpringContext(java.util.zip.ZipEntry)>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.JarPluginArtifact$lambda_extraModuleDescriptorFiles_1__4: void <init>(java.util.regex.Matcher)>($r0) in <com.atlassian.plugin.JarPluginArtifact$lambda_extraModuleDescriptorFiles_1__4: java.util.function.Predicate bootstrap$(java.util.regex.Matcher)> ==> <com.atlassian.plugin.JarPluginArtifact$lambda_extraModuleDescriptorFiles_1__4: void <init>(java.util.regex.Matcher)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.JarPluginArtifact$lambda_extraModuleDescriptorFiles_1__4: void <init>(java.util.regex.Matcher)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.JarPluginArtifact$getName__5: void <init>()>() in <com.atlassian.plugin.JarPluginArtifact$getName__5: java.util.function.Function bootstrap$()> ==> <com.atlassian.plugin.JarPluginArtifact$getName__5: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.JarPluginArtifact$getName__5: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.util.zip.ZipEntry: java.lang.String getName()>() in <com.atlassian.plugin.JarPluginArtifact$getName__5: java.lang.Object apply(java.lang.Object)> ==> <java.util.jar.JarEntry: java.lang.String getName()>
SPECIAL edge: specialinvoke $r2.<com.atlassian.plugin.manager.DefaultPluginManager$1$lambda_test_0__6: void <init>(java.util.function.Predicate,com.atlassian.plugin.Plugin)>($r0, $r1) in <com.atlassian.plugin.manager.DefaultPluginManager$1$lambda_test_0__6: java.util.function.Supplier bootstrap$(java.util.function.Predicate,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$1$lambda_test_0__6: void <init>(java.util.function.Predicate,com.atlassian.plugin.Plugin)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$1$lambda_test_0__6: void <init>(java.util.function.Predicate,com.atlassian.plugin.Plugin)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.parsers.XmlDescriptorParser$createDocument__7: void <init>()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser$createDocument__7: com.google.common.base.Function bootstrap$()> ==> <com.atlassian.plugin.parsers.XmlDescriptorParser$createDocument__7: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser$createDocument__7: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.parsers.XmlDescriptorParser$getI18nNameKey__8: void <init>(com.atlassian.plugin.Plugin)>($r0) in <com.atlassian.plugin.parsers.XmlDescriptorParser$getI18nNameKey__8: java.util.function.Supplier bootstrap$(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.parsers.XmlDescriptorParser$getI18nNameKey__8: void <init>(com.atlassian.plugin.Plugin)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser$getI18nNameKey__8: void <init>(com.atlassian.plugin.Plugin)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.atlassian.plugin.Plugin: java.lang.String getI18nNameKey()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser$getI18nNameKey__8: java.lang.Object get()> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getI18nNameKey()>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.parsers.XmlDescriptorParser$getDescription__9: void <init>(com.atlassian.plugin.PluginInformation)>($r0) in <com.atlassian.plugin.parsers.XmlDescriptorParser$getDescription__9: java.util.function.Supplier bootstrap$(com.atlassian.plugin.PluginInformation)> ==> <com.atlassian.plugin.parsers.XmlDescriptorParser$getDescription__9: void <init>(com.atlassian.plugin.PluginInformation)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser$getDescription__9: void <init>(com.atlassian.plugin.PluginInformation)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.parsers.XmlDescriptorParser$getDescriptionKey__10: void <init>(com.atlassian.plugin.PluginInformation)>($r0) in <com.atlassian.plugin.parsers.XmlDescriptorParser$getDescriptionKey__10: java.util.function.Supplier bootstrap$(com.atlassian.plugin.PluginInformation)> ==> <com.atlassian.plugin.parsers.XmlDescriptorParser$getDescriptionKey__10: void <init>(com.atlassian.plugin.PluginInformation)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser$getDescriptionKey__10: void <init>(com.atlassian.plugin.PluginInformation)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.parsers.XmlDescriptorParser$getVersion__11: void <init>(com.atlassian.plugin.PluginInformation)>($r0) in <com.atlassian.plugin.parsers.XmlDescriptorParser$getVersion__11: java.util.function.Supplier bootstrap$(com.atlassian.plugin.PluginInformation)> ==> <com.atlassian.plugin.parsers.XmlDescriptorParser$getVersion__11: void <init>(com.atlassian.plugin.PluginInformation)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser$getVersion__11: void <init>(com.atlassian.plugin.PluginInformation)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.atlassian.plugin.PluginInformation: java.lang.String getVersion()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser$getVersion__11: java.lang.Object get()> ==> <com.atlassian.plugin.PluginInformation: java.lang.String getVersion()>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.parsers.XmlDescriptorParser$getVendorName__12: void <init>(com.atlassian.plugin.PluginInformation)>($r0) in <com.atlassian.plugin.parsers.XmlDescriptorParser$getVendorName__12: java.util.function.Supplier bootstrap$(com.atlassian.plugin.PluginInformation)> ==> <com.atlassian.plugin.parsers.XmlDescriptorParser$getVendorName__12: void <init>(com.atlassian.plugin.PluginInformation)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser$getVendorName__12: void <init>(com.atlassian.plugin.PluginInformation)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.util.ModuleRestricts$lambda_parseApplicationsFromRestrictElements_0__13: void <init>()>() in <com.atlassian.plugin.util.ModuleRestricts$lambda_parseApplicationsFromRestrictElements_0__13: com.google.common.base.Function bootstrap$()> ==> <com.atlassian.plugin.util.ModuleRestricts$lambda_parseApplicationsFromRestrictElements_0__13: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.util.ModuleRestricts$lambda_parseApplicationsFromRestrictElements_0__13: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.util.ModuleRestricts$init__14: void <init>()>() in <com.atlassian.plugin.util.ModuleRestricts$init__14: com.google.common.base.Function bootstrap$()> ==> <com.atlassian.plugin.util.ModuleRestricts$init__14: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.util.ModuleRestricts$init__14: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r3.<com.atlassian.plugin.util.ModuleRestricts$ModuleRestrict: void <init>(java.lang.String)>($r2) in <com.atlassian.plugin.util.ModuleRestricts$init__14: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.util.ModuleRestricts$ModuleRestrict: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.parsers.XmlDescriptorParser$getVendorUrl__15: void <init>(com.atlassian.plugin.PluginInformation)>($r0) in <com.atlassian.plugin.parsers.XmlDescriptorParser$getVendorUrl__15: java.util.function.Supplier bootstrap$(com.atlassian.plugin.PluginInformation)> ==> <com.atlassian.plugin.parsers.XmlDescriptorParser$getVendorUrl__15: void <init>(com.atlassian.plugin.PluginInformation)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser$getVendorUrl__15: void <init>(com.atlassian.plugin.PluginInformation)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.manager.ApplicationDefinedPluginsProvider$lambda_static_0__16: void <init>()>() in <com.atlassian.plugin.manager.ApplicationDefinedPluginsProvider$lambda_static_0__16: com.atlassian.plugin.manager.ApplicationDefinedPluginsProvider bootstrap$()> ==> <com.atlassian.plugin.manager.ApplicationDefinedPluginsProvider$lambda_static_0__16: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.ApplicationDefinedPluginsProvider$lambda_static_0__16: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$lambda_save_0__17: void <init>(com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore,com.atlassian.plugin.manager.PluginPersistentState)>($r0, $r1) in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$lambda_save_0__17: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore,com.atlassian.plugin.manager.PluginPersistentState)> ==> <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$lambda_save_0__17: void <init>(com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore,com.atlassian.plugin.manager.PluginPersistentState)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$lambda_save_0__17: void <init>(com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore,com.atlassian.plugin.manager.PluginPersistentState)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore: void lambda$save$0(com.atlassian.plugin.manager.PluginPersistentState)>($r2) in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$lambda_save_0__17: void run()> ==> <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore: void lambda$save$0(com.atlassian.plugin.manager.PluginPersistentState)>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$load__18: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore)>($r0) in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$load__18: java.util.function.Supplier bootstrap$(com.atlassian.plugin.manager.PluginPersistentStateStore)> ==> <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$load__18: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$load__18: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.atlassian.plugin.manager.PluginPersistentStateStore: com.atlassian.plugin.manager.PluginPersistentState load()>() in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$load__18: java.lang.Object get()> ==> <com.atlassian.plugin.manager.store.MemoryPluginPersistentStateStore: com.atlassian.plugin.manager.PluginPersistentState load()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.atlassian.plugin.manager.PluginPersistentStateStore: com.atlassian.plugin.manager.PluginPersistentState load()>() in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$load__18: java.lang.Object get()> ==> <com.atlassian.plugin.manager.store.LoadOnlyPluginPersistentStateStore: com.atlassian.plugin.manager.PluginPersistentState load()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.atlassian.plugin.manager.PluginPersistentStateStore: com.atlassian.plugin.manager.PluginPersistentState load()>() in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$load__18: java.lang.Object get()> ==> <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore: com.atlassian.plugin.manager.PluginPersistentState load()>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.parsers.XmlDescriptorParser$getMinJavaVersion__19: void <init>(com.atlassian.plugin.PluginInformation)>($r0) in <com.atlassian.plugin.parsers.XmlDescriptorParser$getMinJavaVersion__19: java.util.function.Supplier bootstrap$(com.atlassian.plugin.PluginInformation)> ==> <com.atlassian.plugin.parsers.XmlDescriptorParser$getMinJavaVersion__19: void <init>(com.atlassian.plugin.PluginInformation)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser$getMinJavaVersion__19: void <init>(com.atlassian.plugin.PluginInformation)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.predicate.ModuleDescriptorOfClassPredicate$lambda_test_0__20: void <init>(com.atlassian.plugin.ModuleDescriptor)>($r0) in <com.atlassian.plugin.predicate.ModuleDescriptorOfClassPredicate$lambda_test_0__20: java.util.function.Predicate bootstrap$(com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.predicate.ModuleDescriptorOfClassPredicate$lambda_test_0__20: void <init>(com.atlassian.plugin.ModuleDescriptor)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.predicate.ModuleDescriptorOfClassPredicate$lambda_test_0__20: void <init>(com.atlassian.plugin.ModuleDescriptor)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.factories.LegacyDynamicPluginFactory$lambda_static_0__21: void <init>()>() in <com.atlassian.plugin.factories.LegacyDynamicPluginFactory$lambda_static_0__21: java.util.function.Predicate bootstrap$()> ==> <com.atlassian.plugin.factories.LegacyDynamicPluginFactory$lambda_static_0__21: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.factories.LegacyDynamicPluginFactory$lambda_static_0__21: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.parsers.XmlDescriptorParser$getStartup__22: void <init>(com.atlassian.plugin.PluginInformation)>($r0) in <com.atlassian.plugin.parsers.XmlDescriptorParser$getStartup__22: java.util.function.Supplier bootstrap$(com.atlassian.plugin.PluginInformation)> ==> <com.atlassian.plugin.parsers.XmlDescriptorParser$getStartup__22: void <init>(com.atlassian.plugin.PluginInformation)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser$getStartup__22: void <init>(com.atlassian.plugin.PluginInformation)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.parsers.XmlDescriptorParser$of__23: void <init>()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser$of__23: java.util.function.Function bootstrap$()> ==> <com.atlassian.plugin.parsers.XmlDescriptorParser$of__23: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser$of__23: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge$lambda_getPlugins_0__24: void <init>(com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge)>($r0) in <com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge$lambda_getPlugins_0__24: java.util.function.Function bootstrap$(com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge)> ==> <com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge$lambda_getPlugins_0__24: void <init>(com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge$lambda_getPlugins_0__24: void <init>(com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge: com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge$1 lambda$getPlugins$0(com.atlassian.plugin.Plugin)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge$lambda_getPlugins_0__24: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge: com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge$1 lambda$getPlugins$0(com.atlassian.plugin.Plugin)>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.parsers.XmlDescriptorParser$getKey__25: void <init>()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser$getKey__25: com.google.common.base.Function bootstrap$()> ==> <com.atlassian.plugin.parsers.XmlDescriptorParser$getKey__25: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser$getKey__25: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge$lambda_getPlugins_1__26: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge$lambda_getPlugins_1__26: java.util.function.IntFunction bootstrap$()> ==> <com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge$lambda_getPlugins_1__26: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge$lambda_getPlugins_1__26: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.manager.ClusterEnvironmentProvider$lambda_static_0__27: void <init>()>() in <com.atlassian.plugin.manager.ClusterEnvironmentProvider$lambda_static_0__27: com.atlassian.plugin.manager.ClusterEnvironmentProvider bootstrap$()> ==> <com.atlassian.plugin.manager.ClusterEnvironmentProvider$lambda_static_0__27: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.ClusterEnvironmentProvider$lambda_static_0__27: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$lambda_getInstrumentRegistry_0__28: void <init>()>() in <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$lambda_getInstrumentRegistry_0__28: java.util.function.Function bootstrap$()> ==> <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$lambda_getInstrumentRegistry_0__28: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$lambda_getInstrumentRegistry_0__28: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$lambda_pullTimer_1__29: void <init>(java.lang.String)>($r0) in <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$lambda_pullTimer_1__29: java.util.function.Function bootstrap$(java.lang.String)> ==> <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$lambda_pullTimer_1__29: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$lambda_pullTimer_1__29: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$lambda_pullSingleTimer_2__30: void <init>(com.atlassian.plugin.instrumentation.PluginSystemInstrumentation,java.lang.String)>($r0, $r1) in <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$lambda_pullSingleTimer_2__30: java.util.function.Function bootstrap$(com.atlassian.plugin.instrumentation.PluginSystemInstrumentation,java.lang.String)> ==> <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$lambda_pullSingleTimer_2__30: void <init>(com.atlassian.plugin.instrumentation.PluginSystemInstrumentation,java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$lambda_pullSingleTimer_2__30: void <init>(com.atlassian.plugin.instrumentation.PluginSystemInstrumentation,java.lang.String)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r5 = virtualinvoke $r3.<com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: java.util.Optional lambda$pullSingleTimer$2(java.lang.String,com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$InstrumentRegistryProxy)>($r4, $r2) in <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$lambda_pullSingleTimer_2__30: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: java.util.Optional lambda$pullSingleTimer$2(java.lang.String,com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$InstrumentRegistryProxy)>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.parsers.PluginInformationReader$ElementWithForApplicationsPredicate$lambda_test_0__31: void <init>(java.lang.String)>($r0) in <com.atlassian.plugin.parsers.PluginInformationReader$ElementWithForApplicationsPredicate$lambda_test_0__31: java.util.function.Predicate bootstrap$(java.lang.String)> ==> <com.atlassian.plugin.parsers.PluginInformationReader$ElementWithForApplicationsPredicate$lambda_test_0__31: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.parsers.PluginInformationReader$ElementWithForApplicationsPredicate$lambda_test_0__31: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.manager.DefaultPluginManager$lambda_new_0__32: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_new_0__32: java.util.function.Function bootstrap$()> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_new_0__32: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_new_0__32: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.manager.DefaultPluginManager$getKey__33: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$getKey__33: java.util.function.Function bootstrap$()> ==> <com.atlassian.plugin.manager.DefaultPluginManager$getKey__33: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$getKey__33: void <init>()> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultPluginManager$getKey__33: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultPluginManager$getKey__33: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.manager.DefaultPluginManager$init__34: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$init__34: java.util.function.Function bootstrap$()> ==> <com.atlassian.plugin.manager.DefaultPluginManager$init__34: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$init__34: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r3.<com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: void <init>(com.atlassian.plugin.loaders.PluginLoader)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager$init__34: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: void <init>(com.atlassian.plugin.loaders.PluginLoader)>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.manager.DefaultPluginManager$lambda_new_1__35: void <init>(com.atlassian.plugin.manager.DefaultPluginManager)>($r0) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_new_1__35: java.util.function.Supplier bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_new_1__35: void <init>(com.atlassian.plugin.manager.DefaultPluginManager)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_new_1__35: void <init>(com.atlassian.plugin.manager.DefaultPluginManager)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.classloader.PluginsClassLoader lambda$new$1()>() in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_new_1__35: java.lang.Object get()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.classloader.PluginsClassLoader lambda$new$1()>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.manager.DefaultPluginManager$lambda_propertiesToMap_2__36: void <init>(java.util.Map)>($r0) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_propertiesToMap_2__36: java.util.function.BiConsumer bootstrap$(java.util.Map)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_propertiesToMap_2__36: void <init>(java.util.Map)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_propertiesToMap_2__36: void <init>(java.util.Map)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.manager.DefaultPluginManager$lambda_init_3__37: void <init>(com.atlassian.plugin.manager.DefaultPluginManager)>($r0) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_init_3__37: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_init_3__37: void <init>(com.atlassian.plugin.manager.DefaultPluginManager)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_init_3__37: void <init>(com.atlassian.plugin.manager.DefaultPluginManager)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<com.atlassian.plugin.manager.DefaultPluginManager: void lambda$init$3()>() in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_init_3__37: void run()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$init$3()>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.manager.DefaultPluginManager$lambda_earlyStartup_5__38: void <init>(com.atlassian.plugin.manager.DefaultPluginManager)>($r0) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_earlyStartup_5__38: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_earlyStartup_5__38: void <init>(com.atlassian.plugin.manager.DefaultPluginManager)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_earlyStartup_5__38: void <init>(com.atlassian.plugin.manager.DefaultPluginManager)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()>() in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_earlyStartup_5__38: void run()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$earlyStartup$5()>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.manager.DefaultPluginManager$lambda_lateStartup_6__39: void <init>(com.atlassian.plugin.manager.DefaultPluginManager)>($r0) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_lateStartup_6__39: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_lateStartup_6__39: void <init>(com.atlassian.plugin.manager.DefaultPluginManager)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_lateStartup_6__39: void <init>(com.atlassian.plugin.manager.DefaultPluginManager)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<com.atlassian.plugin.manager.DefaultPluginManager: void lambda$lateStartup$6()>() in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_lateStartup_6__39: void run()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$lateStartup$6()>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.manager.DefaultPluginManager$lambda_shutdown_7__40: void <init>(com.atlassian.plugin.manager.DefaultPluginManager)>($r0) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_shutdown_7__40: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_shutdown_7__40: void <init>(com.atlassian.plugin.manager.DefaultPluginManager)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_shutdown_7__40: void <init>(com.atlassian.plugin.manager.DefaultPluginManager)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<com.atlassian.plugin.manager.DefaultPluginManager: void lambda$shutdown$7()>() in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_shutdown_7__40: void run()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$shutdown$7()>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.manager.DefaultPluginManager$lambda_warmRestart_8__41: void <init>(com.atlassian.plugin.manager.DefaultPluginManager)>($r0) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_warmRestart_8__41: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_warmRestart_8__41: void <init>(com.atlassian.plugin.manager.DefaultPluginManager)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_warmRestart_8__41: void <init>(com.atlassian.plugin.manager.DefaultPluginManager)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<com.atlassian.plugin.manager.DefaultPluginManager: void lambda$warmRestart$8()>() in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_warmRestart_8__41: void run()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$warmRestart$8()>
SPECIAL edge: specialinvoke $r2.<com.atlassian.plugin.manager.DefaultPluginManager$lambda_onPluginModuleAvailable_9__42: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.event.events.PluginModuleAvailableEvent)>($r0, $r1) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_onPluginModuleAvailable_9__42: java.util.function.Supplier bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.event.events.PluginModuleAvailableEvent)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_onPluginModuleAvailable_9__42: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.event.events.PluginModuleAvailableEvent)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_onPluginModuleAvailable_9__42: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.event.events.PluginModuleAvailableEvent)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r1.<com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Boolean lambda$onPluginModuleAvailable$9(com.atlassian.plugin.event.events.PluginModuleAvailableEvent)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_onPluginModuleAvailable_9__42: java.lang.Object get()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Boolean lambda$onPluginModuleAvailable$9(com.atlassian.plugin.event.events.PluginModuleAvailableEvent)>
SPECIAL edge: specialinvoke $r2.<com.atlassian.plugin.manager.DefaultPluginManager$lambda_onPluginModuleUnavailable_10__43: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.event.events.PluginModuleUnavailableEvent)>($r0, $r1) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_onPluginModuleUnavailable_10__43: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.event.events.PluginModuleUnavailableEvent)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_onPluginModuleUnavailable_10__43: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.event.events.PluginModuleUnavailableEvent)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_onPluginModuleUnavailable_10__43: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.event.events.PluginModuleUnavailableEvent)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<com.atlassian.plugin.manager.DefaultPluginManager: void lambda$onPluginModuleUnavailable$10(com.atlassian.plugin.event.events.PluginModuleUnavailableEvent)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_onPluginModuleUnavailable_10__43: void run()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$onPluginModuleUnavailable$10(com.atlassian.plugin.event.events.PluginModuleUnavailableEvent)>
SPECIAL edge: specialinvoke $r2.<com.atlassian.plugin.manager.DefaultPluginManager$lambda_onPluginContainerUnavailable_11__44: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.event.events.PluginContainerUnavailableEvent)>($r0, $r1) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_onPluginContainerUnavailable_11__44: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.event.events.PluginContainerUnavailableEvent)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_onPluginContainerUnavailable_11__44: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.event.events.PluginContainerUnavailableEvent)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_onPluginContainerUnavailable_11__44: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.event.events.PluginContainerUnavailableEvent)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<com.atlassian.plugin.manager.DefaultPluginManager: void lambda$onPluginContainerUnavailable$11(com.atlassian.plugin.event.events.PluginContainerUnavailableEvent)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_onPluginContainerUnavailable_11__44: void run()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$onPluginContainerUnavailable$11(com.atlassian.plugin.event.events.PluginContainerUnavailableEvent)>
SPECIAL edge: specialinvoke $r2.<com.atlassian.plugin.manager.DefaultPluginManager$lambda_onPluginRefresh_12__45: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.event.events.PluginRefreshedEvent)>($r0, $r1) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_onPluginRefresh_12__45: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.event.events.PluginRefreshedEvent)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_onPluginRefresh_12__45: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.event.events.PluginRefreshedEvent)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_onPluginRefresh_12__45: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.event.events.PluginRefreshedEvent)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<com.atlassian.plugin.manager.DefaultPluginManager: void lambda$onPluginRefresh$12(com.atlassian.plugin.event.events.PluginRefreshedEvent)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_onPluginRefresh_12__45: void run()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$onPluginRefresh$12(com.atlassian.plugin.event.events.PluginRefreshedEvent)>
SPECIAL edge: specialinvoke $r3.<com.atlassian.plugin.manager.DefaultPluginManager$lambda_installPlugins_13__46: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.PluginArtifact[],java.util.Map)>($r0, $r1, $r2) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_installPlugins_13__46: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.PluginArtifact[],java.util.Map)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_installPlugins_13__46: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.PluginArtifact[],java.util.Map)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_installPlugins_13__46: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.PluginArtifact[],java.util.Map)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<com.atlassian.plugin.manager.DefaultPluginManager: void lambda$installPlugins$13(com.atlassian.plugin.PluginArtifact[],java.util.Map)>($r2, $r3) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_installPlugins_13__46: void run()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$installPlugins$13(com.atlassian.plugin.PluginArtifact[],java.util.Map)>
SPECIAL edge: specialinvoke $r2.<com.atlassian.plugin.manager.DefaultPluginManager$lambda_scanForNewPlugins_14__47: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,java.util.concurrent.atomic.AtomicInteger)>($r0, $r1) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_scanForNewPlugins_14__47: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,java.util.concurrent.atomic.AtomicInteger)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_scanForNewPlugins_14__47: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,java.util.concurrent.atomic.AtomicInteger)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_scanForNewPlugins_14__47: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,java.util.concurrent.atomic.AtomicInteger)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<com.atlassian.plugin.manager.DefaultPluginManager: void lambda$scanForNewPlugins$14(java.util.concurrent.atomic.AtomicInteger)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_scanForNewPlugins_14__47: void run()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$scanForNewPlugins$14(java.util.concurrent.atomic.AtomicInteger)>
SPECIAL edge: specialinvoke $r2.<com.atlassian.plugin.manager.DefaultPluginManager$lambda_uninstall_15__48: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.Plugin)>($r0, $r1) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_uninstall_15__48: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_uninstall_15__48: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.Plugin)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_uninstall_15__48: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.Plugin)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<com.atlassian.plugin.manager.DefaultPluginManager: void lambda$uninstall$15(com.atlassian.plugin.Plugin)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_uninstall_15__48: void run()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$uninstall$15(com.atlassian.plugin.Plugin)>
SPECIAL edge: specialinvoke $r2.<com.atlassian.plugin.manager.DefaultPluginManager$lambda_uninstallPlugins_19__49: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,java.util.Collection)>($r0, $r1) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_uninstallPlugins_19__49: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,java.util.Collection)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_uninstallPlugins_19__49: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,java.util.Collection)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_uninstallPlugins_19__49: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,java.util.Collection)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<com.atlassian.plugin.manager.DefaultPluginManager: void lambda$uninstallPlugins$19(java.util.Collection)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_uninstallPlugins_19__49: void run()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$uninstallPlugins$19(java.util.Collection)>
SPECIAL edge: specialinvoke $r2.<com.atlassian.plugin.manager.DefaultPluginManager$lambda_unloadPlugin_21__51: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.Plugin)>($r0, $r1) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_unloadPlugin_21__51: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_unloadPlugin_21__51: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.Plugin)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_unloadPlugin_21__51: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.Plugin)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<com.atlassian.plugin.manager.DefaultPluginManager: void lambda$unloadPlugin$21(com.atlassian.plugin.Plugin)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_unloadPlugin_21__51: void run()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$unloadPlugin$21(com.atlassian.plugin.Plugin)>
SPECIAL edge: specialinvoke $r2.<com.atlassian.plugin.manager.DefaultPluginManager$lambda_revertRestartRequiredChange_20__50: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,java.lang.String)>($r0, $r1) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_revertRestartRequiredChange_20__50: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,java.lang.String)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_revertRestartRequiredChange_20__50: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_revertRestartRequiredChange_20__50: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,java.lang.String)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<com.atlassian.plugin.manager.DefaultPluginManager: void lambda$revertRestartRequiredChange$20(java.lang.String)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_revertRestartRequiredChange_20__50: void run()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$revertRestartRequiredChange$20(java.lang.String)>
SPECIAL edge: specialinvoke $r3.<com.atlassian.plugin.manager.DefaultPluginManager$lambda_addPlugins_22__52: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)>($r0, $r1, $r2) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_addPlugins_22__52: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_addPlugins_22__52: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_addPlugins_22__52: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)>($r2, $r3) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_addPlugins_22__52: void run()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addPlugins$22(java.util.Collection,com.atlassian.plugin.loaders.PluginLoader)>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.manager.DefaultPluginManager$lambda_isPluginEnabledInSafeMode_23__53: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_isPluginEnabledInSafeMode_23__53: java.util.function.Predicate bootstrap$()> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_isPluginEnabledInSafeMode_23__53: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_isPluginEnabledInSafeMode_23__53: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<com.atlassian.plugin.manager.DefaultPluginManager$lambda_enableDependentPlugins_24__54: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,java.util.Collection)>($r0, $r1) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_enableDependentPlugins_24__54: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,java.util.Collection)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_enableDependentPlugins_24__54: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,java.util.Collection)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_enableDependentPlugins_24__54: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,java.util.Collection)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enableDependentPlugins$24(java.util.Collection)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_enableDependentPlugins_24__54: void run()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enableDependentPlugins$24(java.util.Collection)>
SPECIAL edge: specialinvoke $r3.<com.atlassian.plugin.manager.DefaultPluginManager$lambda_disablePlugins_25__55: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,boolean,com.atlassian.plugin.manager.DependentPlugins,java.util.Collection)>($r0, $z0, $r1, $r2) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_disablePlugins_25__55: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,boolean,com.atlassian.plugin.manager.DependentPlugins,java.util.Collection)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_disablePlugins_25__55: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,boolean,com.atlassian.plugin.manager.DependentPlugins,java.util.Collection)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_disablePlugins_25__55: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,boolean,com.atlassian.plugin.manager.DependentPlugins,java.util.Collection)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<com.atlassian.plugin.manager.DefaultPluginManager: void lambda$disablePlugins$25(boolean,com.atlassian.plugin.manager.DependentPlugins,java.util.Collection)>($z0, $r2, $r3) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_disablePlugins_25__55: void run()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$disablePlugins$25(boolean,com.atlassian.plugin.manager.DependentPlugins,java.util.Collection)>
SPECIAL edge: specialinvoke $r3.<com.atlassian.plugin.manager.DefaultPluginManager$lambda_updatePlugin_26__56: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.Plugin,com.atlassian.plugin.Plugin)>($r0, $r1, $r2) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_updatePlugin_26__56: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.Plugin,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_updatePlugin_26__56: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.Plugin,com.atlassian.plugin.Plugin)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_updatePlugin_26__56: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.Plugin,com.atlassian.plugin.Plugin)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<com.atlassian.plugin.manager.DefaultPluginManager: void lambda$updatePlugin$26(com.atlassian.plugin.Plugin,com.atlassian.plugin.Plugin)>($r2, $r3) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_updatePlugin_26__56: void run()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$updatePlugin$26(com.atlassian.plugin.Plugin,com.atlassian.plugin.Plugin)>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.manager.DefaultPluginManager$unmodifiableList__57: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$unmodifiableList__57: java.util.function.Function bootstrap$()> ==> <com.atlassian.plugin.manager.DefaultPluginManager$unmodifiableList__57: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$unmodifiableList__57: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.manager.DefaultPluginManager$getModule__58: void <init>(com.atlassian.plugin.manager.SafeModuleExtractor)>($r0) in <com.atlassian.plugin.manager.DefaultPluginManager$getModule__58: java.util.function.Function bootstrap$(com.atlassian.plugin.manager.SafeModuleExtractor)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$getModule__58: void <init>(com.atlassian.plugin.manager.SafeModuleExtractor)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$getModule__58: void <init>(com.atlassian.plugin.manager.SafeModuleExtractor)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<com.atlassian.plugin.manager.SafeModuleExtractor: java.lang.Object getModule(com.atlassian.plugin.ModuleDescriptor)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager$getModule__58: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.manager.SafeModuleExtractor: java.lang.Object getModule(com.atlassian.plugin.ModuleDescriptor)>
CLINIT edge: $r7 = <com.atlassian.plugin.manager.SafeModuleExtractor: org.slf4j.Logger log> in <com.atlassian.plugin.manager.SafeModuleExtractor: java.lang.Object getModule(com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.manager.SafeModuleExtractor: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.manager.DefaultPluginManager$unmodifiableList__59: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$unmodifiableList__59: java.util.function.Function bootstrap$()> ==> <com.atlassian.plugin.manager.DefaultPluginManager$unmodifiableList__59: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$unmodifiableList__59: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.manager.DefaultPluginManager$lambda_getModuleDescriptors_27__60: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_getModuleDescriptors_27__60: java.util.function.Function bootstrap$()> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_getModuleDescriptors_27__60: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_getModuleDescriptors_27__60: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.manager.DefaultPluginManager$nonNull__61: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$nonNull__61: java.util.function.Predicate bootstrap$()> ==> <com.atlassian.plugin.manager.DefaultPluginManager$nonNull__61: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$nonNull__61: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.manager.DefaultPluginManager$lambda_getModuleDescriptors_28__62: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_getModuleDescriptors_28__62: java.util.function.Function bootstrap$()> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_getModuleDescriptors_28__62: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_getModuleDescriptors_28__62: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.manager.DefaultPluginManager$getModule__63: void <init>(com.atlassian.plugin.manager.SafeModuleExtractor)>($r0) in <com.atlassian.plugin.manager.DefaultPluginManager$getModule__63: java.util.function.Function bootstrap$(com.atlassian.plugin.manager.SafeModuleExtractor)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$getModule__63: void <init>(com.atlassian.plugin.manager.SafeModuleExtractor)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$getModule__63: void <init>(com.atlassian.plugin.manager.SafeModuleExtractor)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<com.atlassian.plugin.manager.SafeModuleExtractor: java.lang.Object getModule(com.atlassian.plugin.ModuleDescriptor)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager$getModule__63: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.manager.SafeModuleExtractor: java.lang.Object getModule(com.atlassian.plugin.ModuleDescriptor)>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.manager.DefaultPluginManager$unmodifiableList__64: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$unmodifiableList__64: java.util.function.Function bootstrap$()> ==> <com.atlassian.plugin.manager.DefaultPluginManager$unmodifiableList__64: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$unmodifiableList__64: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.manager.DefaultPluginManager$nonNull__65: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$nonNull__65: java.util.function.Predicate bootstrap$()> ==> <com.atlassian.plugin.manager.DefaultPluginManager$nonNull__65: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$nonNull__65: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.manager.DefaultPluginManager$lambda_getEnabledModuleDescriptorsByClass_29__66: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_getEnabledModuleDescriptorsByClass_29__66: java.util.function.Function bootstrap$()> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_getEnabledModuleDescriptorsByClass_29__66: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_getEnabledModuleDescriptorsByClass_29__66: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.manager.DefaultPluginManager$unmodifiableList__67: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$unmodifiableList__67: java.util.function.Function bootstrap$()> ==> <com.atlassian.plugin.manager.DefaultPluginManager$unmodifiableList__67: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$unmodifiableList__67: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<com.atlassian.plugin.manager.DefaultPluginManager$lambda_enablePlugins_30__68: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,java.lang.String[])>($r0, $r1) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_enablePlugins_30__68: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,java.lang.String[])> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_enablePlugins_30__68: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,java.lang.String[])>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_enablePlugins_30__68: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,java.lang.String[])> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enablePlugins$30(java.lang.String[])>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_enablePlugins_30__68: void run()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enablePlugins$30(java.lang.String[])>
SPECIAL edge: specialinvoke $r2.<com.atlassian.plugin.manager.DefaultPluginManager$lambda_enableConfiguredPluginModules_31__69: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.Plugin)>($r0, $r1) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_enableConfiguredPluginModules_31__69: java.util.function.Supplier bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_enableConfiguredPluginModules_31__69: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.Plugin)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_enableConfiguredPluginModules_31__69: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.Plugin)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r1.<com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Boolean lambda$enableConfiguredPluginModules$31(com.atlassian.plugin.Plugin)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_enableConfiguredPluginModules_31__69: java.lang.Object get()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Boolean lambda$enableConfiguredPluginModules$31(com.atlassian.plugin.Plugin)>
SPECIAL edge: specialinvoke $r4.<com.atlassian.plugin.manager.DefaultPluginManager$lambda_enableConfiguredPluginModule_32__70: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor,java.util.Set)>($r0, $r1, $r2, $r3) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_enableConfiguredPluginModule_32__70: java.util.function.Supplier bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor,java.util.Set)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_enableConfiguredPluginModule_32__70: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor,java.util.Set)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_enableConfiguredPluginModule_32__70: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor,java.util.Set)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r5 = virtualinvoke $r1.<com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Boolean lambda$enableConfiguredPluginModule$32(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor,java.util.Set)>($r2, $r3, $r4) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_enableConfiguredPluginModule_32__70: java.lang.Object get()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Boolean lambda$enableConfiguredPluginModule$32(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor,java.util.Set)>
SPECIAL edge: specialinvoke $r2.<com.atlassian.plugin.manager.DefaultPluginManager$lambda_disablePlugin_33__71: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,java.lang.String)>($r0, $r1) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_disablePlugin_33__71: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,java.lang.String)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_disablePlugin_33__71: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_disablePlugin_33__71: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,java.lang.String)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<com.atlassian.plugin.manager.DefaultPluginManager: void lambda$disablePlugin$33(java.lang.String)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_disablePlugin_33__71: void run()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$disablePlugin$33(java.lang.String)>
SPECIAL edge: specialinvoke $r2.<com.atlassian.plugin.manager.DefaultPluginManager$lambda_disablePluginWithoutPersisting_34__72: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,java.lang.String)>($r0, $r1) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_disablePluginWithoutPersisting_34__72: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,java.lang.String)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_disablePluginWithoutPersisting_34__72: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_disablePluginWithoutPersisting_34__72: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,java.lang.String)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<com.atlassian.plugin.manager.DefaultPluginManager: void lambda$disablePluginWithoutPersisting$34(java.lang.String)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_disablePluginWithoutPersisting_34__72: void run()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$disablePluginWithoutPersisting$34(java.lang.String)>
SPECIAL edge: specialinvoke $r2.<com.atlassian.plugin.manager.DefaultPluginManager$lambda_disablePluginInternal_35__73: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,java.lang.String,boolean)>($r0, $r1, $z0) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_disablePluginInternal_35__73: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,java.lang.String,boolean)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_disablePluginInternal_35__73: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,java.lang.String,boolean)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_disablePluginInternal_35__73: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,java.lang.String,boolean)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<com.atlassian.plugin.manager.DefaultPluginManager: void lambda$disablePluginInternal$35(java.lang.String,boolean)>($r2, $z0) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_disablePluginInternal_35__73: void run()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$disablePluginInternal$35(java.lang.String,boolean)>
SPECIAL edge: specialinvoke $r4.<com.atlassian.plugin.manager.DefaultPluginManager$lambda_reenableDependent_37__74: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.PluginState,com.atlassian.plugin.manager.DependentPlugins,java.util.Collection)>($r0, $r1, $r2, $r3) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_reenableDependent_37__74: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.PluginState,com.atlassian.plugin.manager.DependentPlugins,java.util.Collection)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_reenableDependent_37__74: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.PluginState,com.atlassian.plugin.manager.DependentPlugins,java.util.Collection)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_reenableDependent_37__74: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.PluginState,com.atlassian.plugin.manager.DependentPlugins,java.util.Collection)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<com.atlassian.plugin.manager.DefaultPluginManager: void lambda$reenableDependent$37(com.atlassian.plugin.PluginState,com.atlassian.plugin.manager.DependentPlugins,java.util.Collection)>($r2, $r3, $r4) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_reenableDependent_37__74: void run()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$reenableDependent$37(com.atlassian.plugin.PluginState,com.atlassian.plugin.manager.DependentPlugins,java.util.Collection)>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.manager.DefaultPluginManager$lambda_findDelayedPlugin_38__75: void <init>(java.lang.String)>($r0) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_findDelayedPlugin_38__75: java.util.function.Predicate bootstrap$(java.lang.String)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_findDelayedPlugin_38__75: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_findDelayedPlugin_38__75: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.manager.DefaultPluginManager$isInstance__77: void <init>(java.lang.Class)>($r0) in <com.atlassian.plugin.manager.DefaultPluginManager$isInstance__77: java.util.function.Predicate bootstrap$(java.lang.Class)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$isInstance__77: void <init>(java.lang.Class)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$isInstance__77: void <init>(java.lang.Class)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.Class: boolean isInstance(java.lang.Object)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager$isInstance__77: boolean test(java.lang.Object)> ==> <java.lang.Class: boolean isInstance(java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<com.atlassian.plugin.manager.DefaultPluginManager$lambda_broadcastPluginDisabling_39__76: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.Plugin)>($r0, $r1) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_broadcastPluginDisabling_39__76: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_broadcastPluginDisabling_39__76: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.Plugin)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_broadcastPluginDisabling_39__76: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.Plugin)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<com.atlassian.plugin.manager.DefaultPluginManager: void lambda$broadcastPluginDisabling$39(com.atlassian.plugin.Plugin)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_broadcastPluginDisabling_39__76: void run()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$broadcastPluginDisabling$39(com.atlassian.plugin.Plugin)>
SPECIAL edge: specialinvoke $r2.<com.atlassian.plugin.manager.DefaultPluginManager$lambda_broadcastPluginDisabled_40__78: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.Plugin)>($r0, $r1) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_broadcastPluginDisabled_40__78: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_broadcastPluginDisabled_40__78: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.Plugin)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_broadcastPluginDisabled_40__78: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.Plugin)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<com.atlassian.plugin.manager.DefaultPluginManager: void lambda$broadcastPluginDisabled$40(com.atlassian.plugin.Plugin)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_broadcastPluginDisabled_40__78: void run()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$broadcastPluginDisabled$40(com.atlassian.plugin.Plugin)>
SPECIAL edge: specialinvoke $r2.<com.atlassian.plugin.manager.DefaultPluginManager$lambda_notifyPluginDisabled_41__79: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.Plugin)>($r0, $r1) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_notifyPluginDisabled_41__79: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_notifyPluginDisabled_41__79: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.Plugin)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_notifyPluginDisabled_41__79: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.Plugin)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<com.atlassian.plugin.manager.DefaultPluginManager: void lambda$notifyPluginDisabled$41(com.atlassian.plugin.Plugin)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_notifyPluginDisabled_41__79: void run()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$notifyPluginDisabled$41(com.atlassian.plugin.Plugin)>
SPECIAL edge: specialinvoke $r2.<com.atlassian.plugin.manager.DefaultPluginManager$lambda_disablePluginModules_42__80: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.Plugin)>($r0, $r1) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_disablePluginModules_42__80: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_disablePluginModules_42__80: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.Plugin)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_disablePluginModules_42__80: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.Plugin)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<com.atlassian.plugin.manager.DefaultPluginManager: void lambda$disablePluginModules$42(com.atlassian.plugin.Plugin)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_disablePluginModules_42__80: void run()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$disablePluginModules$42(com.atlassian.plugin.Plugin)>
SPECIAL edge: specialinvoke $r2.<com.atlassian.plugin.manager.DefaultPluginManager$lambda_disablePluginModule_43__81: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,java.lang.String)>($r0, $r1) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_disablePluginModule_43__81: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,java.lang.String)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_disablePluginModule_43__81: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_disablePluginModule_43__81: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,java.lang.String)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<com.atlassian.plugin.manager.DefaultPluginManager: void lambda$disablePluginModule$43(java.lang.String)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_disablePluginModule_43__81: void run()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$disablePluginModule$43(java.lang.String)>
SPECIAL edge: specialinvoke $r2.<com.atlassian.plugin.manager.DefaultPluginManager$lambda_publishModuleDisabledEvents_44__82: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.ModuleDescriptor,boolean)>($r0, $r1, $z0) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_publishModuleDisabledEvents_44__82: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.ModuleDescriptor,boolean)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_publishModuleDisabledEvents_44__82: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.ModuleDescriptor,boolean)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_publishModuleDisabledEvents_44__82: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.ModuleDescriptor,boolean)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<com.atlassian.plugin.manager.DefaultPluginManager: void lambda$publishModuleDisabledEvents$44(com.atlassian.plugin.ModuleDescriptor,boolean)>($r2, $z0) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_publishModuleDisabledEvents_44__82: void run()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$publishModuleDisabledEvents$44(com.atlassian.plugin.ModuleDescriptor,boolean)>
SPECIAL edge: specialinvoke $r2.<com.atlassian.plugin.manager.DefaultPluginManager$lambda_enablePluginModule_45__83: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,java.lang.String)>($r0, $r1) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_enablePluginModule_45__83: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,java.lang.String)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_enablePluginModule_45__83: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_enablePluginModule_45__83: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,java.lang.String)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enablePluginModule$45(java.lang.String)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_enablePluginModule_45__83: void run()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$enablePluginModule$45(java.lang.String)>
SPECIAL edge: specialinvoke $r2.<com.atlassian.plugin.manager.DefaultPluginManager$lambda_notifyModuleEnabled_46__84: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.ModuleDescriptor)>($r0, $r1) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_notifyModuleEnabled_46__84: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_notifyModuleEnabled_46__84: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.ModuleDescriptor)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_notifyModuleEnabled_46__84: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.ModuleDescriptor)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<com.atlassian.plugin.manager.DefaultPluginManager: void lambda$notifyModuleEnabled$46(com.atlassian.plugin.ModuleDescriptor)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_notifyModuleEnabled_46__84: void run()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$notifyModuleEnabled$46(com.atlassian.plugin.ModuleDescriptor)>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.manager.DefaultPluginManager$cast__85: void <init>(java.lang.Class)>($r0) in <com.atlassian.plugin.manager.DefaultPluginManager$cast__85: java.util.function.Function bootstrap$(java.lang.Class)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$cast__85: void <init>(java.lang.Class)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$cast__85: void <init>(java.lang.Class)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.Object cast(java.lang.Object)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager$cast__85: java.lang.Object apply(java.lang.Object)> ==> <java.lang.Class: java.lang.Object cast(java.lang.Object)>
SPECIAL edge: specialinvoke $r4.<com.atlassian.plugin.manager.DefaultPluginManager$lambda_addDynamicModule_47__86: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.Plugin,org.dom4j.Element,java.util.concurrent.atomic.AtomicReference)>($r0, $r1, $r2, $r3) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_addDynamicModule_47__86: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.Plugin,org.dom4j.Element,java.util.concurrent.atomic.AtomicReference)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_addDynamicModule_47__86: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.Plugin,org.dom4j.Element,java.util.concurrent.atomic.AtomicReference)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_addDynamicModule_47__86: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.Plugin,org.dom4j.Element,java.util.concurrent.atomic.AtomicReference)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addDynamicModule$47(com.atlassian.plugin.Plugin,org.dom4j.Element,java.util.concurrent.atomic.AtomicReference)>($r2, $r3, $r4) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_addDynamicModule_47__86: void run()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$addDynamicModule$47(com.atlassian.plugin.Plugin,org.dom4j.Element,java.util.concurrent.atomic.AtomicReference)>
SPECIAL edge: specialinvoke $r3.<com.atlassian.plugin.manager.DefaultPluginManager$lambda_removeDynamicModule_48__87: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor)>($r0, $r1, $r2) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_removeDynamicModule_48__87: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_removeDynamicModule_48__87: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_removeDynamicModule_48__87: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<com.atlassian.plugin.manager.DefaultPluginManager: void lambda$removeDynamicModule$48(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor)>($r2, $r3) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_removeDynamicModule_48__87: void run()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$removeDynamicModule$48(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor)>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.manager.DefaultPluginManager$unmodifiableList__88: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$unmodifiableList__88: java.util.function.Function bootstrap$()> ==> <com.atlassian.plugin.manager.DefaultPluginManager$unmodifiableList__88: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$unmodifiableList__88: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r4.<com.atlassian.plugin.manager.DefaultPluginManager$lambda_null_36__89: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.PluginState,java.util.List,java.util.List)>($r0, $r1, $r2, $r3) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_null_36__89: java.util.function.Consumer bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.PluginState,java.util.List,java.util.List)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_null_36__89: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.PluginState,java.util.List,java.util.List)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_null_36__89: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.PluginState,java.util.List,java.util.List)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r3.<com.atlassian.plugin.manager.DefaultPluginManager: void lambda$null$36(com.atlassian.plugin.PluginState,java.util.List,java.util.List,com.atlassian.plugin.Plugin)>($r4, $r5, $r6, $r2) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_null_36__89: void accept(java.lang.Object)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$null$36(com.atlassian.plugin.PluginState,java.util.List,java.util.List,com.atlassian.plugin.Plugin)>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.manager.DefaultPluginManager$disable__90: void <init>(com.atlassian.plugin.manager.PluginPersistentStateModifier)>($r0) in <com.atlassian.plugin.manager.DefaultPluginManager$disable__90: java.util.function.Consumer bootstrap$(com.atlassian.plugin.manager.PluginPersistentStateModifier)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$disable__90: void <init>(com.atlassian.plugin.manager.PluginPersistentStateModifier)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$disable__90: void <init>(com.atlassian.plugin.manager.PluginPersistentStateModifier)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r3.<com.atlassian.plugin.manager.PluginPersistentStateModifier: void disable(com.atlassian.plugin.Plugin)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager$disable__90: void accept(java.lang.Object)> ==> <com.atlassian.plugin.manager.PluginPersistentStateModifier: void disable(com.atlassian.plugin.Plugin)>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.manager.DefaultPluginManager$contains__91: void <init>(java.util.Set)>($r0) in <com.atlassian.plugin.manager.DefaultPluginManager$contains__91: com.google.common.base.Predicate bootstrap$(java.util.Set)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$contains__91: void <init>(java.util.Set)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$contains__91: void <init>(java.util.Set)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke $r3.<java.util.Set: boolean contains(java.lang.Object)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager$contains__91: boolean apply(java.lang.Object)> ==> <java.util.HashSet: boolean contains(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r3.<java.util.Set: boolean contains(java.lang.Object)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager$contains__91: boolean apply(java.lang.Object)> ==> <java.util.concurrent.CopyOnWriteArraySet: boolean contains(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r3.<java.util.Set: boolean contains(java.lang.Object)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager$contains__91: boolean apply(java.lang.Object)> ==> <java.util.TreeSet: boolean contains(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.manager.DefaultPluginManager$doesPluginRequireRestart__92: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$doesPluginRequireRestart__92: java.util.function.Predicate bootstrap$()> ==> <com.atlassian.plugin.manager.DefaultPluginManager$doesPluginRequireRestart__92: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$doesPluginRequireRestart__92: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.manager.DefaultPluginManager$lambda_null_16__93: void <init>(com.atlassian.plugin.manager.DefaultPluginManager)>($r0) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_null_16__93: java.util.function.Consumer bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_null_16__93: void <init>(com.atlassian.plugin.manager.DefaultPluginManager)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_null_16__93: void <init>(com.atlassian.plugin.manager.DefaultPluginManager)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r3.<com.atlassian.plugin.manager.DefaultPluginManager: void lambda$null$16(com.atlassian.plugin.Plugin)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_null_16__93: void accept(java.lang.Object)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$null$16(com.atlassian.plugin.Plugin)>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.manager.DefaultPluginManager$lambda_null_4__94: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_null_4__94: java.util.function.Function bootstrap$()> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_null_4__94: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_null_4__94: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.manager.DefaultPluginManager$getKey__95: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$getKey__95: java.util.function.Function bootstrap$()> ==> <com.atlassian.plugin.manager.DefaultPluginManager$getKey__95: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$getKey__95: void <init>()> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultPluginManager$getKey__95: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultPluginManager$getKey__95: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.util.zip.AbstractUnzipper$getName__96: void <init>()>() in <com.atlassian.plugin.util.zip.AbstractUnzipper$getName__96: java.util.function.Function bootstrap$()> ==> <com.atlassian.plugin.util.zip.AbstractUnzipper$getName__96: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.util.zip.AbstractUnzipper$getName__96: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.util.zip.ZipEntry: java.lang.String getName()>() in <com.atlassian.plugin.util.zip.AbstractUnzipper$getName__96: java.lang.Object apply(java.lang.Object)> ==> <java.util.jar.JarEntry: java.lang.String getName()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.util.zip.ZipEntry: java.lang.String getName()>() in <com.atlassian.plugin.util.zip.AbstractUnzipper$getName__96: java.lang.Object apply(java.lang.Object)> ==> <java.util.zip.ZipEntry: java.lang.String getName()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.util.zip.AbstractUnzipper$getTime__97: void <init>()>() in <com.atlassian.plugin.util.zip.AbstractUnzipper$getTime__97: java.util.function.Function bootstrap$()> ==> <com.atlassian.plugin.util.zip.AbstractUnzipper$getTime__97: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.util.zip.AbstractUnzipper$getTime__97: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $l0 = virtualinvoke $r2.<java.util.zip.ZipEntry: long getTime()>() in <com.atlassian.plugin.util.zip.AbstractUnzipper$getTime__97: java.lang.Object apply(java.lang.Object)> ==> <java.util.zip.ZipEntry: long getTime()>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.manager.DefaultPluginManager$disable__98: void <init>(com.atlassian.plugin.manager.PluginPersistentStateModifier)>($r0) in <com.atlassian.plugin.manager.DefaultPluginManager$disable__98: java.util.function.Consumer bootstrap$(com.atlassian.plugin.manager.PluginPersistentStateModifier)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$disable__98: void <init>(com.atlassian.plugin.manager.PluginPersistentStateModifier)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$disable__98: void <init>(com.atlassian.plugin.manager.PluginPersistentStateModifier)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r3.<com.atlassian.plugin.manager.PluginPersistentStateModifier: void disable(com.atlassian.plugin.Plugin)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager$disable__98: void accept(java.lang.Object)> ==> <com.atlassian.plugin.manager.PluginPersistentStateModifier: void disable(com.atlassian.plugin.Plugin)>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.manager.DefaultPluginManager$lambda_null_17__99: void <init>(com.atlassian.plugin.manager.DefaultPluginManager)>($r0) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_null_17__99: java.util.function.Consumer bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_null_17__99: void <init>(com.atlassian.plugin.manager.DefaultPluginManager)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_null_17__99: void <init>(com.atlassian.plugin.manager.DefaultPluginManager)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r3.<com.atlassian.plugin.manager.DefaultPluginManager: void lambda$null$17(com.atlassian.plugin.Plugin)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_null_17__99: void accept(java.lang.Object)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$null$17(com.atlassian.plugin.Plugin)>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.manager.PluginPersistentState$Builder$getKey__100: void <init>()>() in <com.atlassian.plugin.manager.PluginPersistentState$Builder$getKey__100: java.util.function.Function bootstrap$()> ==> <com.atlassian.plugin.manager.PluginPersistentState$Builder$getKey__100: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.PluginPersistentState$Builder$getKey__100: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.manager.DefaultPluginManager$uninstallNoEvent__101: void <init>(com.atlassian.plugin.manager.DefaultPluginManager)>($r0) in <com.atlassian.plugin.manager.DefaultPluginManager$uninstallNoEvent__101: java.util.function.Consumer bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$uninstallNoEvent__101: void <init>(com.atlassian.plugin.manager.DefaultPluginManager)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$uninstallNoEvent__101: void <init>(com.atlassian.plugin.manager.DefaultPluginManager)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r3.<com.atlassian.plugin.manager.DefaultPluginManager: void uninstallNoEvent(com.atlassian.plugin.Plugin)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager$uninstallNoEvent__101: void accept(java.lang.Object)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void uninstallNoEvent(com.atlassian.plugin.Plugin)>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.manager.PluginPersistentState$Builder$lambda_addState_0__102: void <init>()>() in <com.atlassian.plugin.manager.PluginPersistentState$Builder$lambda_addState_0__102: java.util.function.Function bootstrap$()> ==> <com.atlassian.plugin.manager.PluginPersistentState$Builder$lambda_addState_0__102: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.PluginPersistentState$Builder$lambda_addState_0__102: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.manager.PluginPersistentStateModifier$lambda_setEnabled_0__103: void <init>(com.atlassian.plugin.Plugin,boolean)>($r0, $z0) in <com.atlassian.plugin.manager.PluginPersistentStateModifier$lambda_setEnabled_0__103: io.atlassian.fugue.Effect bootstrap$(com.atlassian.plugin.Plugin,boolean)> ==> <com.atlassian.plugin.manager.PluginPersistentStateModifier$lambda_setEnabled_0__103: void <init>(com.atlassian.plugin.Plugin,boolean)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.PluginPersistentStateModifier$lambda_setEnabled_0__103: void <init>(com.atlassian.plugin.Plugin,boolean)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.manager.PluginPersistentStateModifier$lambda_setEnabled_1__104: void <init>(com.atlassian.plugin.ModuleDescriptor,boolean)>($r0, $z0) in <com.atlassian.plugin.manager.PluginPersistentStateModifier$lambda_setEnabled_1__104: io.atlassian.fugue.Effect bootstrap$(com.atlassian.plugin.ModuleDescriptor,boolean)> ==> <com.atlassian.plugin.manager.PluginPersistentStateModifier$lambda_setEnabled_1__104: void <init>(com.atlassian.plugin.ModuleDescriptor,boolean)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.PluginPersistentStateModifier$lambda_setEnabled_1__104: void <init>(com.atlassian.plugin.ModuleDescriptor,boolean)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.manager.PluginPersistentStateModifier$clearPluginRestartState__105: void <init>()>() in <com.atlassian.plugin.manager.PluginPersistentStateModifier$clearPluginRestartState__105: io.atlassian.fugue.Effect bootstrap$()> ==> <com.atlassian.plugin.manager.PluginPersistentStateModifier$clearPluginRestartState__105: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.PluginPersistentStateModifier$clearPluginRestartState__105: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r2.<com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder clearPluginRestartState()>() in <com.atlassian.plugin.manager.PluginPersistentStateModifier$clearPluginRestartState__105: void apply(java.lang.Object)> ==> <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder clearPluginRestartState()>
SPECIAL edge: specialinvoke $r2.<com.atlassian.plugin.manager.PluginPersistentStateModifier$lambda_setPluginRestartState_2__106: void <init>(java.lang.String,com.atlassian.plugin.PluginRestartState)>($r0, $r1) in <com.atlassian.plugin.manager.PluginPersistentStateModifier$lambda_setPluginRestartState_2__106: io.atlassian.fugue.Effect bootstrap$(java.lang.String,com.atlassian.plugin.PluginRestartState)> ==> <com.atlassian.plugin.manager.PluginPersistentStateModifier$lambda_setPluginRestartState_2__106: void <init>(java.lang.String,com.atlassian.plugin.PluginRestartState)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.PluginPersistentStateModifier$lambda_setPluginRestartState_2__106: void <init>(java.lang.String,com.atlassian.plugin.PluginRestartState)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.manager.PluginPersistentStateModifier$lambda_addState_3__107: void <init>(java.util.Map)>($r0) in <com.atlassian.plugin.manager.PluginPersistentStateModifier$lambda_addState_3__107: io.atlassian.fugue.Effect bootstrap$(java.util.Map)> ==> <com.atlassian.plugin.manager.PluginPersistentStateModifier$lambda_addState_3__107: void <init>(java.util.Map)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.PluginPersistentStateModifier$lambda_addState_3__107: void <init>(java.util.Map)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.manager.PluginPersistentStateModifier$lambda_addPluginEnabledState_4__108: void <init>(java.util.Map)>($r0) in <com.atlassian.plugin.manager.PluginPersistentStateModifier$lambda_addPluginEnabledState_4__108: io.atlassian.fugue.Effect bootstrap$(java.util.Map)> ==> <com.atlassian.plugin.manager.PluginPersistentStateModifier$lambda_addPluginEnabledState_4__108: void <init>(java.util.Map)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.PluginPersistentStateModifier$lambda_addPluginEnabledState_4__108: void <init>(java.util.Map)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.manager.DefaultPluginManager$lambda_null_18__109: void <init>(com.atlassian.plugin.manager.DefaultPluginManager)>($r0) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_null_18__109: java.util.function.Consumer bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_null_18__109: void <init>(com.atlassian.plugin.manager.DefaultPluginManager)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_null_18__109: void <init>(com.atlassian.plugin.manager.DefaultPluginManager)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r3.<com.atlassian.plugin.manager.DefaultPluginManager: void lambda$null$18(com.atlassian.plugin.Plugin)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager$lambda_null_18__109: void accept(java.lang.Object)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void lambda$null$18(com.atlassian.plugin.Plugin)>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.manager.PluginPersistentStateModifier$lambda_removeState_5__110: void <init>(com.atlassian.plugin.Plugin)>($r0) in <com.atlassian.plugin.manager.PluginPersistentStateModifier$lambda_removeState_5__110: io.atlassian.fugue.Effect bootstrap$(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.PluginPersistentStateModifier$lambda_removeState_5__110: void <init>(com.atlassian.plugin.Plugin)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.PluginPersistentStateModifier$lambda_removeState_5__110: void <init>(com.atlassian.plugin.Plugin)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.factories.XmlDynamicPluginFactory$lambda_static_0__111: void <init>()>() in <com.atlassian.plugin.factories.XmlDynamicPluginFactory$lambda_static_0__111: java.util.function.Predicate bootstrap$()> ==> <com.atlassian.plugin.factories.XmlDynamicPluginFactory$lambda_static_0__111: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.factories.XmlDynamicPluginFactory$lambda_static_0__111: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.manager.DependentPlugins$getKey__112: void <init>()>() in <com.atlassian.plugin.manager.DependentPlugins$getKey__112: com.google.common.base.Function bootstrap$()> ==> <com.atlassian.plugin.manager.DependentPlugins$getKey__112: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DependentPlugins$getKey__112: void <init>()> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DependentPlugins$getKey__112: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DependentPlugins$getKey__112: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.manager.DependentPlugins$lambda_getInDependencyOrder_0__113: void <init>(java.util.Map)>($r0) in <com.atlassian.plugin.manager.DependentPlugins$lambda_getInDependencyOrder_0__113: java.util.function.Predicate bootstrap$(java.util.Map)> ==> <com.atlassian.plugin.manager.DependentPlugins$lambda_getInDependencyOrder_0__113: void <init>(java.util.Map)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DependentPlugins$lambda_getInDependencyOrder_0__113: void <init>(java.util.Map)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.manager.DependentPlugins$lambda_findPluginToCutTheCycle_1__114: void <init>(java.util.Map)>($r0) in <com.atlassian.plugin.manager.DependentPlugins$lambda_findPluginToCutTheCycle_1__114: java.util.function.Supplier bootstrap$(java.util.Map)> ==> <com.atlassian.plugin.manager.DependentPlugins$lambda_findPluginToCutTheCycle_1__114: void <init>(java.util.Map)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DependentPlugins$lambda_findPluginToCutTheCycle_1__114: void <init>(java.util.Map)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.manager.DependentPlugins$getPlugin__115: void <init>()>() in <com.atlassian.plugin.manager.DependentPlugins$getPlugin__115: java.util.function.Function bootstrap$()> ==> <com.atlassian.plugin.manager.DependentPlugins$getPlugin__115: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DependentPlugins$getPlugin__115: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<com.atlassian.plugin.manager.DependentPlugins$DependentPlugin: com.atlassian.plugin.Plugin getPlugin()>() in <com.atlassian.plugin.manager.DependentPlugins$getPlugin__115: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.manager.DependentPlugins$DependentPlugin: com.atlassian.plugin.Plugin getPlugin()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.manager.DependentPlugins$lambda_toStringList_2__116: void <init>()>() in <com.atlassian.plugin.manager.DependentPlugins$lambda_toStringList_2__116: java.util.function.Predicate bootstrap$()> ==> <com.atlassian.plugin.manager.DependentPlugins$lambda_toStringList_2__116: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DependentPlugins$lambda_toStringList_2__116: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.manager.DependentPlugins$lambda_toStringList_3__117: void <init>(java.util.Set)>($r0) in <com.atlassian.plugin.manager.DependentPlugins$lambda_toStringList_3__117: java.util.function.Predicate bootstrap$(java.util.Set)> ==> <com.atlassian.plugin.manager.DependentPlugins$lambda_toStringList_3__117: void <init>(java.util.Set)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DependentPlugins$lambda_toStringList_3__117: void <init>(java.util.Set)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.manager.DependentPlugins$lambda_getPluginsByTypes_5__118: void <init>(boolean)>($z0) in <com.atlassian.plugin.manager.DependentPlugins$lambda_getPluginsByTypes_5__118: java.util.function.Predicate bootstrap$(boolean)> ==> <com.atlassian.plugin.manager.DependentPlugins$lambda_getPluginsByTypes_5__118: void <init>(boolean)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DependentPlugins$lambda_getPluginsByTypes_5__118: void <init>(boolean)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.manager.DependentPlugins$lambda_toStringList_4__119: void <init>()>() in <com.atlassian.plugin.manager.DependentPlugins$lambda_toStringList_4__119: java.util.function.Function bootstrap$()> ==> <com.atlassian.plugin.manager.DependentPlugins$lambda_toStringList_4__119: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DependentPlugins$lambda_toStringList_4__119: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.manager.DependentPlugins$lambda_getPluginsByTypes_6__120: void <init>(java.util.Set)>($r0) in <com.atlassian.plugin.manager.DependentPlugins$lambda_getPluginsByTypes_6__120: java.util.function.Predicate bootstrap$(java.util.Set)> ==> <com.atlassian.plugin.manager.DependentPlugins$lambda_getPluginsByTypes_6__120: void <init>(java.util.Set)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DependentPlugins$lambda_getPluginsByTypes_6__120: void <init>(java.util.Set)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.manager.DependentPlugins$getPlugin__121: void <init>()>() in <com.atlassian.plugin.manager.DependentPlugins$getPlugin__121: java.util.function.Function bootstrap$()> ==> <com.atlassian.plugin.manager.DependentPlugins$getPlugin__121: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DependentPlugins$getPlugin__121: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<com.atlassian.plugin.manager.DependentPlugins$DependentPlugin: com.atlassian.plugin.Plugin getPlugin()>() in <com.atlassian.plugin.manager.DependentPlugins$getPlugin__121: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.manager.DependentPlugins$DependentPlugin: com.atlassian.plugin.Plugin getPlugin()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.parsers.PluginDescriptorReader$nonNull__122: void <init>()>() in <com.atlassian.plugin.parsers.PluginDescriptorReader$nonNull__122: java.util.function.Predicate bootstrap$()> ==> <com.atlassian.plugin.parsers.PluginDescriptorReader$nonNull__122: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.parsers.PluginDescriptorReader$nonNull__122: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.parsers.PluginDescriptorReader$lambda_getModules_1__123: void <init>()>() in <com.atlassian.plugin.parsers.PluginDescriptorReader$lambda_getModules_1__123: java.util.function.Predicate bootstrap$()> ==> <com.atlassian.plugin.parsers.PluginDescriptorReader$lambda_getModules_1__123: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.parsers.PluginDescriptorReader$lambda_getModules_1__123: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.parsers.PluginDescriptorReader$init__124: void <init>()>() in <com.atlassian.plugin.parsers.PluginDescriptorReader$init__124: com.google.common.base.Function bootstrap$()> ==> <com.atlassian.plugin.parsers.PluginDescriptorReader$init__124: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.parsers.PluginDescriptorReader$init__124: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r3.<com.atlassian.plugin.parsers.ModuleReader: void <init>(org.dom4j.Element)>($r2) in <com.atlassian.plugin.parsers.PluginDescriptorReader$init__124: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.parsers.ModuleReader: void <init>(org.dom4j.Element)>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.manager.DependentPlugins$getKey__125: void <init>()>() in <com.atlassian.plugin.manager.DependentPlugins$getKey__125: java.util.function.Function bootstrap$()> ==> <com.atlassian.plugin.manager.DependentPlugins$getKey__125: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DependentPlugins$getKey__125: void <init>()> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DependentPlugins$getKey__125: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DependentPlugins$getKey__125: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.parsers.PluginDescriptorReader$lambda_getPluginInformation_0__126: void <init>()>() in <com.atlassian.plugin.parsers.PluginDescriptorReader$lambda_getPluginInformation_0__126: java.util.function.Predicate bootstrap$()> ==> <com.atlassian.plugin.parsers.PluginDescriptorReader$lambda_getPluginInformation_0__126: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.parsers.PluginDescriptorReader$lambda_getPluginInformation_0__126: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<com.atlassian.plugin.parsers.PluginDescriptorReader$lambda_getModules_2__127: void <init>(com.atlassian.plugin.parsers.PluginDescriptorReader,com.atlassian.plugin.InstallationMode)>($r0, $r1) in <com.atlassian.plugin.parsers.PluginDescriptorReader$lambda_getModules_2__127: java.util.function.Predicate bootstrap$(com.atlassian.plugin.parsers.PluginDescriptorReader,com.atlassian.plugin.InstallationMode)> ==> <com.atlassian.plugin.parsers.PluginDescriptorReader$lambda_getModules_2__127: void <init>(com.atlassian.plugin.parsers.PluginDescriptorReader,com.atlassian.plugin.InstallationMode)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.parsers.PluginDescriptorReader$lambda_getModules_2__127: void <init>(com.atlassian.plugin.parsers.PluginDescriptorReader,com.atlassian.plugin.InstallationMode)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<com.atlassian.plugin.parsers.PluginDescriptorReader: boolean lambda$getModules$2(com.atlassian.plugin.InstallationMode,org.dom4j.Element)>($r4, $r2) in <com.atlassian.plugin.parsers.PluginDescriptorReader$lambda_getModules_2__127: boolean test(java.lang.Object)> ==> <com.atlassian.plugin.parsers.PluginDescriptorReader: boolean lambda$getModules$2(com.atlassian.plugin.InstallationMode,org.dom4j.Element)>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.manager.DefaultPluginPersistentState$lambda_getPluginEnabledStateMap_0__128: void <init>(com.atlassian.plugin.Plugin)>($r0) in <com.atlassian.plugin.manager.DefaultPluginPersistentState$lambda_getPluginEnabledStateMap_0__128: java.util.function.Predicate bootstrap$(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DefaultPluginPersistentState$lambda_getPluginEnabledStateMap_0__128: void <init>(com.atlassian.plugin.Plugin)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginPersistentState$lambda_getPluginEnabledStateMap_0__128: void <init>(com.atlassian.plugin.Plugin)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.manager.DefaultPluginPersistentState$getKey__129: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginPersistentState$getKey__129: java.util.function.Function bootstrap$()> ==> <com.atlassian.plugin.manager.DefaultPluginPersistentState$getKey__129: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginPersistentState$getKey__129: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.manager.DefaultPluginPersistentState$getKey__130: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginPersistentState$getKey__130: java.util.function.Function bootstrap$()> ==> <com.atlassian.plugin.manager.DefaultPluginPersistentState$getKey__130: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginPersistentState$getKey__130: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.hostcontainer.SimpleConstructorHostContainer$lambda_findConstructorsLargestFirst_0__131: void <init>()>() in <com.atlassian.plugin.hostcontainer.SimpleConstructorHostContainer$lambda_findConstructorsLargestFirst_0__131: java.util.Comparator bootstrap$()> ==> <com.atlassian.plugin.hostcontainer.SimpleConstructorHostContainer$lambda_findConstructorsLargestFirst_0__131: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.hostcontainer.SimpleConstructorHostContainer$lambda_findConstructorsLargestFirst_0__131: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.manager.DefaultPluginPersistentState$getValue__132: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginPersistentState$getValue__132: java.util.function.Function bootstrap$()> ==> <com.atlassian.plugin.manager.DefaultPluginPersistentState$getValue__132: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginPersistentState$getValue__132: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.manager.DefaultPluginPersistentState$lambda_getPluginEnabledStateMap_1__133: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginPersistentState$lambda_getPluginEnabledStateMap_1__133: java.util.function.Function bootstrap$()> ==> <com.atlassian.plugin.manager.DefaultPluginPersistentState$lambda_getPluginEnabledStateMap_1__133: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginPersistentState$lambda_getPluginEnabledStateMap_1__133: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.loaders.DirectoryScanner$lambda_scan_0__134: void <init>()>() in <com.atlassian.plugin.loaders.DirectoryScanner$lambda_scan_0__134: java.io.FilenameFilter bootstrap$()> ==> <com.atlassian.plugin.loaders.DirectoryScanner$lambda_scan_0__134: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.loaders.DirectoryScanner$lambda_scan_0__134: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.impl.AbstractPlugin$getPermissionsInternal__135: void <init>(com.atlassian.plugin.impl.AbstractPlugin)>($r0) in <com.atlassian.plugin.impl.AbstractPlugin$getPermissionsInternal__135: com.google.common.base.Supplier bootstrap$(com.atlassian.plugin.impl.AbstractPlugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin$getPermissionsInternal__135: void <init>(com.atlassian.plugin.impl.AbstractPlugin)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.impl.AbstractPlugin$getPermissionsInternal__135: void <init>(com.atlassian.plugin.impl.AbstractPlugin)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.atlassian.plugin.impl.AbstractPlugin: java.util.Set getPermissionsInternal()>() in <com.atlassian.plugin.impl.AbstractPlugin$getPermissionsInternal__135: java.lang.Object get()> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.util.Set getPermissionsInternal()>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.impl.AbstractPlugin$lambda_getPermissionsForCurrentInstallationMode_0__136: void <init>(com.atlassian.plugin.InstallationMode)>($r0) in <com.atlassian.plugin.impl.AbstractPlugin$lambda_getPermissionsForCurrentInstallationMode_0__136: java.util.function.Predicate bootstrap$(com.atlassian.plugin.InstallationMode)> ==> <com.atlassian.plugin.impl.AbstractPlugin$lambda_getPermissionsForCurrentInstallationMode_0__136: void <init>(com.atlassian.plugin.InstallationMode)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.impl.AbstractPlugin$lambda_getPermissionsForCurrentInstallationMode_0__136: void <init>(com.atlassian.plugin.InstallationMode)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.impl.AbstractPlugin$getName__137: void <init>()>() in <com.atlassian.plugin.impl.AbstractPlugin$getName__137: java.util.function.Function bootstrap$()> ==> <com.atlassian.plugin.impl.AbstractPlugin$getName__137: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.impl.AbstractPlugin$getName__137: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.impl.AbstractPlugin$equals__138: void <init>(com.atlassian.plugin.InstallationMode)>($r0) in <com.atlassian.plugin.impl.AbstractPlugin$equals__138: java.util.function.Function bootstrap$(com.atlassian.plugin.InstallationMode)> ==> <com.atlassian.plugin.impl.AbstractPlugin$equals__138: void <init>(com.atlassian.plugin.InstallationMode)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.impl.AbstractPlugin$equals__138: void <init>(com.atlassian.plugin.InstallationMode)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.util.PluginUtils$lambda_asString_0__139: void <init>()>() in <com.atlassian.plugin.util.PluginUtils$lambda_asString_0__139: java.util.function.Function bootstrap$()> ==> <com.atlassian.plugin.util.PluginUtils$lambda_asString_0__139: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.util.PluginUtils$lambda_asString_0__139: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.manager.ProductPluginAccessorBase$nonNull__140: void <init>()>() in <com.atlassian.plugin.manager.ProductPluginAccessorBase$nonNull__140: java.util.function.Predicate bootstrap$()> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase$nonNull__140: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.ProductPluginAccessorBase$nonNull__140: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.manager.ProductPluginAccessorBase$lambda_getEnabledPlugins_0__141: void <init>()>() in <com.atlassian.plugin.manager.ProductPluginAccessorBase$lambda_getEnabledPlugins_0__141: java.util.function.Predicate bootstrap$()> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase$lambda_getEnabledPlugins_0__141: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.ProductPluginAccessorBase$lambda_getEnabledPlugins_0__141: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.manager.ProductPluginAccessorBase$lambda_getModuleDescriptors_2__142: void <init>()>() in <com.atlassian.plugin.manager.ProductPluginAccessorBase$lambda_getModuleDescriptors_2__142: java.util.function.Function bootstrap$()> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase$lambda_getModuleDescriptors_2__142: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.ProductPluginAccessorBase$lambda_getModuleDescriptors_2__142: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.manager.ProductPluginAccessorBase$lambda_getModules_1__143: void <init>()>() in <com.atlassian.plugin.manager.ProductPluginAccessorBase$lambda_getModules_1__143: java.util.function.Function bootstrap$()> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase$lambda_getModules_1__143: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.ProductPluginAccessorBase$lambda_getModules_1__143: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.manager.ProductPluginAccessorBase$lambda_getModuleDescriptors_3__144: void <init>()>() in <com.atlassian.plugin.manager.ProductPluginAccessorBase$lambda_getModuleDescriptors_3__144: java.util.function.Function bootstrap$()> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase$lambda_getModuleDescriptors_3__144: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.ProductPluginAccessorBase$lambda_getModuleDescriptors_3__144: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.manager.ProductPluginAccessorBase$nonNull__145: void <init>()>() in <com.atlassian.plugin.manager.ProductPluginAccessorBase$nonNull__145: java.util.function.Predicate bootstrap$()> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase$nonNull__145: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.ProductPluginAccessorBase$nonNull__145: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.manager.ProductPluginAccessorBase$lambda_getEnabledModuleDescriptorsByClass_4__146: void <init>()>() in <com.atlassian.plugin.manager.ProductPluginAccessorBase$lambda_getEnabledModuleDescriptorsByClass_4__146: java.util.function.Function bootstrap$()> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase$lambda_getEnabledModuleDescriptorsByClass_4__146: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.ProductPluginAccessorBase$lambda_getEnabledModuleDescriptorsByClass_4__146: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.manager.ProductPluginAccessorBase$isInstance__147: void <init>(java.lang.Class)>($r0) in <com.atlassian.plugin.manager.ProductPluginAccessorBase$isInstance__147: java.util.function.Predicate bootstrap$(java.lang.Class)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase$isInstance__147: void <init>(java.lang.Class)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.ProductPluginAccessorBase$isInstance__147: void <init>(java.lang.Class)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.Class: boolean isInstance(java.lang.Object)>($r2) in <com.atlassian.plugin.manager.ProductPluginAccessorBase$isInstance__147: boolean test(java.lang.Object)> ==> <java.lang.Class: boolean isInstance(java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.manager.ProductPluginAccessorBase$cast__148: void <init>(java.lang.Class)>($r0) in <com.atlassian.plugin.manager.ProductPluginAccessorBase$cast__148: java.util.function.Function bootstrap$(java.lang.Class)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase$cast__148: void <init>(java.lang.Class)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.ProductPluginAccessorBase$cast__148: void <init>(java.lang.Class)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.Object cast(java.lang.Object)>($r2) in <com.atlassian.plugin.manager.ProductPluginAccessorBase$cast__148: java.lang.Object apply(java.lang.Object)> ==> <java.lang.Class: java.lang.Object cast(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.event.impl.MethodSelectorListenerHandler$1$scope__149: void <init>()>() in <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler$1$scope__149: java.util.function.Function bootstrap$()> ==> <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler$1$scope__149: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler$1$scope__149: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<com.atlassian.plugin.event.impl.MethodSelectorListenerHandler$lambda_getInvokers_0__150: void <init>(com.atlassian.plugin.event.impl.MethodSelectorListenerHandler,java.lang.Object)>($r0, $r1) in <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler$lambda_getInvokers_0__150: com.google.common.base.Function bootstrap$(com.atlassian.plugin.event.impl.MethodSelectorListenerHandler,java.lang.Object)> ==> <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler$lambda_getInvokers_0__150: void <init>(com.atlassian.plugin.event.impl.MethodSelectorListenerHandler,java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler$lambda_getInvokers_0__150: void <init>(com.atlassian.plugin.event.impl.MethodSelectorListenerHandler,java.lang.Object)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r5 = virtualinvoke $r3.<com.atlassian.plugin.event.impl.MethodSelectorListenerHandler: com.atlassian.event.spi.ListenerInvoker lambda$getInvokers$0(java.lang.Object,java.lang.reflect.Method)>($r4, $r2) in <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler$lambda_getInvokers_0__150: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler: com.atlassian.event.spi.ListenerInvoker lambda$getInvokers$0(java.lang.Object,java.lang.reflect.Method)>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.manager.DefaultSafeModeManager$1$lambda_get_0__151: void <init>()>() in <com.atlassian.plugin.manager.DefaultSafeModeManager$1$lambda_get_0__151: java.util.function.ToLongFunction bootstrap$()> ==> <com.atlassian.plugin.manager.DefaultSafeModeManager$1$lambda_get_0__151: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultSafeModeManager$1$lambda_get_0__151: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.parsers.PluginInformationReader$getTextTrim__152: void <init>()>() in <com.atlassian.plugin.parsers.PluginInformationReader$getTextTrim__152: java.util.function.Function bootstrap$()> ==> <com.atlassian.plugin.parsers.PluginInformationReader$getTextTrim__152: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.parsers.PluginInformationReader$getTextTrim__152: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.parsers.PluginInformationReader$lambda_getDescriptionKey_0__153: void <init>()>() in <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getDescriptionKey_0__153: java.util.function.Function bootstrap$()> ==> <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getDescriptionKey_0__153: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getDescriptionKey_0__153: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.parsers.PluginInformationReader$getTextTrim__154: void <init>()>() in <com.atlassian.plugin.parsers.PluginInformationReader$getTextTrim__154: java.util.function.Function bootstrap$()> ==> <com.atlassian.plugin.parsers.PluginInformationReader$getTextTrim__154: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.parsers.PluginInformationReader$getTextTrim__154: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.manager.DefaultSafeModeManager$1$getKey__155: void <init>()>() in <com.atlassian.plugin.manager.DefaultSafeModeManager$1$getKey__155: java.util.function.Function bootstrap$()> ==> <com.atlassian.plugin.manager.DefaultSafeModeManager$1$getKey__155: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultSafeModeManager$1$getKey__155: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.parsers.PluginInformationReader$lambda_getVendorName_1__156: void <init>()>() in <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getVendorName_1__156: java.util.function.Function bootstrap$()> ==> <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getVendorName_1__156: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getVendorName_1__156: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.parsers.PluginInformationReader$lambda_getVendorUrl_2__157: void <init>()>() in <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getVendorUrl_2__157: java.util.function.Function bootstrap$()> ==> <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getVendorUrl_2__157: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getVendorUrl_2__157: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.parsers.PluginInformationReader$lambda_getScopeKey_3__158: void <init>()>() in <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getScopeKey_3__158: java.util.function.Function bootstrap$()> ==> <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getScopeKey_3__158: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getScopeKey_3__158: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.parsers.PluginInformationReader$isEmpty__159: void <init>()>() in <com.atlassian.plugin.parsers.PluginInformationReader$isEmpty__159: java.util.function.Function bootstrap$()> ==> <com.atlassian.plugin.parsers.PluginInformationReader$isEmpty__159: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.parsers.PluginInformationReader$isEmpty__159: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.String: boolean isEmpty()>() in <com.atlassian.plugin.parsers.PluginInformationReader$isEmpty__159: java.lang.Object apply(java.lang.Object)> ==> <java.lang.String: boolean isEmpty()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.parsers.PluginInformationReader$lambda_getParameters_4__160: void <init>()>() in <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getParameters_4__160: java.util.function.Function bootstrap$()> ==> <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getParameters_4__160: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getParameters_4__160: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.event.impl.MethodSelectorListenerHandler$1$lambda_getScope_0__161: void <init>()>() in <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler$1$lambda_getScope_0__161: java.util.function.Predicate bootstrap$()> ==> <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler$1$lambda_getScope_0__161: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler$1$lambda_getScope_0__161: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.parsers.PluginInformationReader$getTextTrim__162: void <init>()>() in <com.atlassian.plugin.parsers.PluginInformationReader$getTextTrim__162: java.util.function.Function bootstrap$()> ==> <com.atlassian.plugin.parsers.PluginInformationReader$getTextTrim__162: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.parsers.PluginInformationReader$getTextTrim__162: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.parsers.PluginInformationReader$lambda_getPermissions_7__163: void <init>(com.atlassian.plugin.InstallationMode)>($r0) in <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getPermissions_7__163: com.google.common.base.Predicate bootstrap$(com.atlassian.plugin.InstallationMode)> ==> <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getPermissions_7__163: void <init>(com.atlassian.plugin.InstallationMode)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getPermissions_7__163: void <init>(com.atlassian.plugin.InstallationMode)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.parsers.PluginInformationReader$getTextTrim__164: void <init>()>() in <com.atlassian.plugin.parsers.PluginInformationReader$getTextTrim__164: java.util.function.Function bootstrap$()> ==> <com.atlassian.plugin.parsers.PluginInformationReader$getTextTrim__164: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.parsers.PluginInformationReader$getTextTrim__164: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.parsers.PluginInformationReader$lambda_getModuleScanFolders_8__165: void <init>(java.util.Set)>($r0) in <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getModuleScanFolders_8__165: java.util.function.Function bootstrap$(java.util.Set)> ==> <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getModuleScanFolders_8__165: void <init>(java.util.Set)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getModuleScanFolders_8__165: void <init>(java.util.Set)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.parsers.PluginInformationReader$lambda_getPermissionElements_10__166: void <init>()>() in <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getPermissionElements_10__166: java.util.function.Function bootstrap$()> ==> <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getPermissionElements_10__166: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getPermissionElements_10__166: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.parsers.PluginInformationReader$lambda_getModuleScanFolders_9__167: void <init>(java.util.Set)>($r0) in <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getModuleScanFolders_9__167: java.util.function.Function bootstrap$(java.util.Set)> ==> <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getModuleScanFolders_9__167: void <init>(java.util.Set)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getModuleScanFolders_9__167: void <init>(java.util.Set)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.parsers.PluginInformationReader$lambda_getParamElements_12__168: void <init>()>() in <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getParamElements_12__168: java.util.function.Predicate bootstrap$()> ==> <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getParamElements_12__168: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getParamElements_12__168: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.parsers.PluginInformationReader$getText__169: void <init>()>() in <com.atlassian.plugin.parsers.PluginInformationReader$getText__169: java.util.function.Function bootstrap$()> ==> <com.atlassian.plugin.parsers.PluginInformationReader$getText__169: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.parsers.PluginInformationReader$getText__169: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.parsers.PluginInformationReader$lambda_getPermissions_5__170: void <init>()>() in <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getPermissions_5__170: java.util.function.Function bootstrap$()> ==> <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getPermissions_5__170: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getPermissions_5__170: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.parsers.PluginInformationReader$emptyList__171: void <init>()>() in <com.atlassian.plugin.parsers.PluginInformationReader$emptyList__171: java.util.function.Supplier bootstrap$()> ==> <com.atlassian.plugin.parsers.PluginInformationReader$emptyList__171: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.parsers.PluginInformationReader$emptyList__171: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.parsers.PluginInformationReader$lambda_getPermissionElements_11__172: void <init>()>() in <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getPermissionElements_11__172: java.util.function.Predicate bootstrap$()> ==> <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getPermissionElements_11__172: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getPermissionElements_11__172: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.parsers.PluginInformationReader$of__173: void <init>()>() in <com.atlassian.plugin.parsers.PluginInformationReader$of__173: java.util.function.Function bootstrap$()> ==> <com.atlassian.plugin.parsers.PluginInformationReader$of__173: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.parsers.PluginInformationReader$of__173: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.parsers.PluginInformationReader$empty__174: void <init>()>() in <com.atlassian.plugin.parsers.PluginInformationReader$empty__174: java.util.function.Supplier bootstrap$()> ==> <com.atlassian.plugin.parsers.PluginInformationReader$empty__174: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.parsers.PluginInformationReader$empty__174: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.parsers.PluginInformationReader$of__175: void <init>()>() in <com.atlassian.plugin.parsers.PluginInformationReader$of__175: java.util.function.Function bootstrap$()> ==> <com.atlassian.plugin.parsers.PluginInformationReader$of__175: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.parsers.PluginInformationReader$of__175: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.util.ChainingClassLoader$nonNull__176: void <init>()>() in <com.atlassian.plugin.util.ChainingClassLoader$nonNull__176: java.util.function.Predicate bootstrap$()> ==> <com.atlassian.plugin.util.ChainingClassLoader$nonNull__176: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.util.ChainingClassLoader$nonNull__176: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.parsers.PluginInformationReader$lambda_null_6__177: void <init>(com.atlassian.plugin.InstallationMode)>($r0) in <com.atlassian.plugin.parsers.PluginInformationReader$lambda_null_6__177: java.util.function.Function bootstrap$(com.atlassian.plugin.InstallationMode)> ==> <com.atlassian.plugin.parsers.PluginInformationReader$lambda_null_6__177: void <init>(com.atlassian.plugin.InstallationMode)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.parsers.PluginInformationReader$lambda_null_6__177: void <init>(com.atlassian.plugin.InstallationMode)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.manager.PluginTransactionContext$lambda_static_0__178: void <init>()>() in <com.atlassian.plugin.manager.PluginTransactionContext$lambda_static_0__178: java.util.function.Supplier bootstrap$()> ==> <com.atlassian.plugin.manager.PluginTransactionContext$lambda_static_0__178: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.PluginTransactionContext$lambda_static_0__178: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.manager.SafeModuleExtractor$getModule__179: void <init>(com.atlassian.plugin.manager.SafeModuleExtractor)>($r0) in <com.atlassian.plugin.manager.SafeModuleExtractor$getModule__179: java.util.function.Function bootstrap$(com.atlassian.plugin.manager.SafeModuleExtractor)> ==> <com.atlassian.plugin.manager.SafeModuleExtractor$getModule__179: void <init>(com.atlassian.plugin.manager.SafeModuleExtractor)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.SafeModuleExtractor$getModule__179: void <init>(com.atlassian.plugin.manager.SafeModuleExtractor)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<com.atlassian.plugin.manager.SafeModuleExtractor: java.lang.Object getModule(com.atlassian.plugin.ModuleDescriptor)>($r2) in <com.atlassian.plugin.manager.SafeModuleExtractor$getModule__179: java.lang.Object apply(java.lang.Object)> ==> <com.atlassian.plugin.manager.SafeModuleExtractor: java.lang.Object getModule(com.atlassian.plugin.ModuleDescriptor)>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.event.impl.DefaultPluginEventManager$lambda_new_0__180: void <init>(com.atlassian.plugin.event.impl.ListenerMethodSelector[])>($r0) in <com.atlassian.plugin.event.impl.DefaultPluginEventManager$lambda_new_0__180: com.atlassian.event.config.ListenerHandlersConfiguration bootstrap$(com.atlassian.plugin.event.impl.ListenerMethodSelector[])> ==> <com.atlassian.plugin.event.impl.DefaultPluginEventManager$lambda_new_0__180: void <init>(com.atlassian.plugin.event.impl.ListenerMethodSelector[])>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.event.impl.DefaultPluginEventManager$lambda_new_0__180: void <init>(com.atlassian.plugin.event.impl.ListenerMethodSelector[])> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.manager.PluginTransactionContext$init__181: void <init>()>() in <com.atlassian.plugin.manager.PluginTransactionContext$init__181: java.util.function.Supplier bootstrap$()> ==> <com.atlassian.plugin.manager.PluginTransactionContext$init__181: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.PluginTransactionContext$init__181: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.ArrayList: void <init>()>() in <com.atlassian.plugin.manager.PluginTransactionContext$init__181: java.lang.Object get()> ==> <java.util.ArrayList: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.manager.SafeModuleExtractor$nonNull__182: void <init>()>() in <com.atlassian.plugin.manager.SafeModuleExtractor$nonNull__182: java.util.function.Predicate bootstrap$()> ==> <com.atlassian.plugin.manager.SafeModuleExtractor$nonNull__182: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.SafeModuleExtractor$nonNull__182: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.manager.DefaultPluginManager$Builder$lambda_new_0__183: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$Builder$lambda_new_0__183: java.util.function.Predicate bootstrap$()> ==> <com.atlassian.plugin.manager.DefaultPluginManager$Builder$lambda_new_0__183: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$Builder$lambda_new_0__183: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor$lambda_getModuleDescriptors_0__184: void <init>()>() in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor$lambda_getModuleDescriptors_0__184: java.util.function.Function bootstrap$()> ==> <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor$lambda_getModuleDescriptors_0__184: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor$lambda_getModuleDescriptors_0__184: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor$lambda_getModuleDescriptors_1__185: void <init>()>() in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor$lambda_getModuleDescriptors_1__185: java.util.function.Function bootstrap$()> ==> <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor$lambda_getModuleDescriptors_1__185: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor$lambda_getModuleDescriptors_1__185: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.manager.PluginPersistentState$getKey__186: void <init>()>() in <com.atlassian.plugin.manager.PluginPersistentState$getKey__186: java.util.function.Function bootstrap$()> ==> <com.atlassian.plugin.manager.PluginPersistentState$getKey__186: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.PluginPersistentState$getKey__186: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.manager.PluginPersistentState$getKey__187: void <init>()>() in <com.atlassian.plugin.manager.PluginPersistentState$getKey__187: java.util.function.Function bootstrap$()> ==> <com.atlassian.plugin.manager.PluginPersistentState$getKey__187: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.PluginPersistentState$getKey__187: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.manager.PluginPersistentState$lambda_getPluginStateMap_1__188: void <init>()>() in <com.atlassian.plugin.manager.PluginPersistentState$lambda_getPluginStateMap_1__188: java.util.function.Function bootstrap$()> ==> <com.atlassian.plugin.manager.PluginPersistentState$lambda_getPluginStateMap_1__188: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.PluginPersistentState$lambda_getPluginStateMap_1__188: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.manager.PluginPersistentState$lambda_getMap_0__189: void <init>()>() in <com.atlassian.plugin.manager.PluginPersistentState$lambda_getMap_0__189: java.util.function.Function bootstrap$()> ==> <com.atlassian.plugin.manager.PluginPersistentState$lambda_getMap_0__189: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.PluginPersistentState$lambda_getMap_0__189: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.parsers.SafeModeCommandLineArguments$lambda_isDisabledByParam_0__190: void <init>(java.lang.String)>($r0) in <com.atlassian.plugin.parsers.SafeModeCommandLineArguments$lambda_isDisabledByParam_0__190: java.util.function.Function bootstrap$(java.lang.String)> ==> <com.atlassian.plugin.parsers.SafeModeCommandLineArguments$lambda_isDisabledByParam_0__190: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.parsers.SafeModeCommandLineArguments$lambda_isDisabledByParam_0__190: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: void finalize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarHandler: void <init>()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarHandler: void <clinit>()> ==> <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarHandler: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.ThreadLocal: void <init>()>() in <com.atlassian.plugin.util.ClassLoaderStack: void <clinit>()> ==> <java.lang.ThreadLocal: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode$1: void <init>(java.lang.String,int)>("UNLOCKED", 0) in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode: void <clinit>()> ==> <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode$1: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode$2: void <init>(java.lang.String,int)>("SIMPLE", 1) in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode: void <clinit>()> ==> <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode$2: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r2.<com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode$3: void <init>(java.lang.String,int)>("FAIRSIMPLE", 2) in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode: void <clinit>()> ==> <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode$3: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r3.<com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode$4: void <init>(java.lang.String,int)>("READWRITE", 3) in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode: void <clinit>()> ==> <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode$4: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r4.<com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode$5: void <init>(java.lang.String,int)>("FAIRREADWRITE", 4) in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode: void <clinit>()> ==> <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode$5: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r11.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode: void <clinit>()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13) in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode: void <clinit>()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.Class: java.lang.String getName()>() in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode: void <clinit>()> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".lockMode") in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode: void <clinit>()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode: void <clinit>()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.manager.PluginPersistentState$Util: java.lang.String buildStateKey(java.lang.String,com.atlassian.plugin.PluginRestartState)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <com.atlassian.plugin.manager.PluginPersistentState$Util: java.lang.String buildStateKey(java.lang.String,com.atlassian.plugin.PluginRestartState)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("--") in <com.atlassian.plugin.manager.PluginPersistentState$Util: java.lang.String buildStateKey(java.lang.String,com.atlassian.plugin.PluginRestartState)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5) in <com.atlassian.plugin.manager.PluginPersistentState$Util: java.lang.String buildStateKey(java.lang.String,com.atlassian.plugin.PluginRestartState)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.manager.PluginPersistentState$Util: java.lang.String buildStateKey(java.lang.String,com.atlassian.plugin.PluginRestartState)> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: r3 = interfaceinvoke r2.<com.atlassian.plugin.ModuleDescriptorFactory: com.atlassian.plugin.ModuleDescriptor getModuleDescriptor(java.lang.String)>(r1) in <com.atlassian.plugin.parsers.XmlDescriptorParserUtils: com.atlassian.plugin.ModuleDescriptor newModuleDescriptor(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.DefaultModuleDescriptorFactory: com.atlassian.plugin.ModuleDescriptor getModuleDescriptor(java.lang.String)>
INTERFACE edge: r3 = interfaceinvoke r2.<com.atlassian.plugin.ModuleDescriptorFactory: com.atlassian.plugin.ModuleDescriptor getModuleDescriptor(java.lang.String)>(r1) in <com.atlassian.plugin.parsers.XmlDescriptorParserUtils: com.atlassian.plugin.ModuleDescriptor newModuleDescriptor(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.descriptors.ChainModuleDescriptorFactory: com.atlassian.plugin.ModuleDescriptor getModuleDescriptor(java.lang.String)>
INTERFACE edge: r3 = interfaceinvoke r2.<com.atlassian.plugin.ModuleDescriptorFactory: com.atlassian.plugin.ModuleDescriptor getModuleDescriptor(java.lang.String)>(r1) in <com.atlassian.plugin.parsers.XmlDescriptorParserUtils: com.atlassian.plugin.ModuleDescriptor newModuleDescriptor(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.ModuleDescriptorFactory: com.atlassian.plugin.ModuleDescriptor getModuleDescriptor(java.lang.String)>
INTERFACE edge: $r9 = interfaceinvoke r6.<com.atlassian.plugin.Plugin: java.lang.String getName()>() in <com.atlassian.plugin.parsers.XmlDescriptorParserUtils: com.atlassian.plugin.ModuleDescriptor newModuleDescriptor(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getName()>
VIRTUAL edge: $r11 = virtualinvoke r7.<com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptor: java.lang.String getErrorText()>() in <com.atlassian.plugin.parsers.XmlDescriptorParserUtils: com.atlassian.plugin.ModuleDescriptor newModuleDescriptor(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.descriptors.AbstractNoOpModuleDescriptor: java.lang.String getErrorText()>
INTERFACE edge: interfaceinvoke $r10.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>($r11, $r4) in <com.atlassian.plugin.parsers.XmlDescriptorParserUtils: com.atlassian.plugin.ModuleDescriptor newModuleDescriptor(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.lang.Throwable: java.lang.String getMessage()>() in <com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.Throwable: java.lang.String getMessage()>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.lang.Throwable: java.lang.String getMessage()>() in <com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <org.xml.sax.SAXException: java.lang.String getMessage()>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.lang.Throwable: java.lang.String getMessage()>() in <com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.nio.charset.MalformedInputException: java.lang.String getMessage()>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.lang.Throwable: java.lang.String getMessage()>() in <com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.net.URISyntaxException: java.lang.String getMessage()>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.lang.Throwable: java.lang.String getMessage()>() in <com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.util.regex.PatternSyntaxException: java.lang.String getMessage()>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.lang.Throwable: java.lang.String getMessage()>() in <com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
VIRTUAL edge: $r32 = virtualinvoke r0.<java.lang.Throwable: java.lang.String getMessage()>() in <com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.Throwable: java.lang.String getMessage()>
VIRTUAL edge: $r32 = virtualinvoke r0.<java.lang.Throwable: java.lang.String getMessage()>() in <com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <org.xml.sax.SAXException: java.lang.String getMessage()>
VIRTUAL edge: $r32 = virtualinvoke r0.<java.lang.Throwable: java.lang.String getMessage()>() in <com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.nio.charset.MalformedInputException: java.lang.String getMessage()>
VIRTUAL edge: $r32 = virtualinvoke r0.<java.lang.Throwable: java.lang.String getMessage()>() in <com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.net.URISyntaxException: java.lang.String getMessage()>
VIRTUAL edge: $r32 = virtualinvoke r0.<java.lang.Throwable: java.lang.String getMessage()>() in <com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.util.regex.PatternSyntaxException: java.lang.String getMessage()>
VIRTUAL edge: $r32 = virtualinvoke r0.<java.lang.Throwable: java.lang.String getMessage()>() in <com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
VIRTUAL edge: r34 = virtualinvoke r0.<java.lang.Throwable: java.lang.String getMessage()>() in <com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.Throwable: java.lang.String getMessage()>
VIRTUAL edge: r34 = virtualinvoke r0.<java.lang.Throwable: java.lang.String getMessage()>() in <com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <org.xml.sax.SAXException: java.lang.String getMessage()>
VIRTUAL edge: r34 = virtualinvoke r0.<java.lang.Throwable: java.lang.String getMessage()>() in <com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.nio.charset.MalformedInputException: java.lang.String getMessage()>
VIRTUAL edge: r34 = virtualinvoke r0.<java.lang.Throwable: java.lang.String getMessage()>() in <com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.net.URISyntaxException: java.lang.String getMessage()>
VIRTUAL edge: r34 = virtualinvoke r0.<java.lang.Throwable: java.lang.String getMessage()>() in <com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.util.regex.PatternSyntaxException: java.lang.String getMessage()>
VIRTUAL edge: r34 = virtualinvoke r0.<java.lang.Throwable: java.lang.String getMessage()>() in <com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
VIRTUAL edge: $z5 = virtualinvoke $r31.<java.lang.String: boolean equals(java.lang.Object)>($r32) in <com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r23.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("There was a problem loading the descriptor for module \'") in <com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r25) in <com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' in plugin \'") in <com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
INTERFACE edge: $r33 = interfaceinvoke r28.<com.atlassian.plugin.Plugin: java.lang.String getName()>() in <com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getName()>
VIRTUAL edge: $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33) in <com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'.\n ") in <com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r34 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r19.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not instantiate module descriptor: ") in <com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) in <com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".<br/>") in <com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r34 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r15.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception instantiating module descriptor: ") in <com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) in <com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".<br/>") in <com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r34 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r11.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not find module descriptor class: ") in <com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) in <com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".<br/>") in <com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r34 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r7.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("A required class was missing: ") in <com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) in <com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Please check that you have all of the required dependencies.<br/>") in <com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r34 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("There was a problem loading the module descriptor: ") in <com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) in <com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".<br/>") in <com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r34 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.descriptors.UnrecognisedModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.util.validation.ValidationPattern$Rule: void evaluate(org.dom4j.Node,java.util.List)>(r1, r2) in <com.atlassian.plugin.util.validation.ValidationPattern$Rule: void access$100(com.atlassian.plugin.util.validation.ValidationPattern$Rule,org.dom4j.Node,java.util.List)> ==> <com.atlassian.plugin.util.validation.ValidationPattern$Rule: void evaluate(org.dom4j.Node,java.util.List)>
STATIC edge: staticinvoke <com.atlassian.plugin.util.validation.ValidationPattern$RuleTest: void access$300(com.atlassian.plugin.util.validation.ValidationPattern$RuleTest,org.dom4j.Node,java.util.List)>(r8, r6, r9) in <com.atlassian.plugin.util.validation.ValidationPattern$Rule: void evaluate(org.dom4j.Node,java.util.List)> ==> <com.atlassian.plugin.util.validation.ValidationPattern$RuleTest: void access$300(com.atlassian.plugin.util.validation.ValidationPattern$RuleTest,org.dom4j.Node,java.util.List)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>() in <com.atlassian.plugin.util.ClassUtils: java.lang.Class getClass(java.lang.reflect.Type)> ==> <java.lang.Object: java.lang.Class getClass()>
INTERFACE edge: r3 = interfaceinvoke r2.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: org.dom4j.Document mergeDocuments(org.dom4j.Document,java.lang.Iterable)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke r2.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: org.dom4j.Document mergeDocuments(org.dom4j.Document,java.lang.Iterable)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke r2.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: org.dom4j.Document mergeDocuments(org.dom4j.Document,java.lang.Iterable)> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke r2.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: org.dom4j.Document mergeDocuments(org.dom4j.Document,java.lang.Iterable)> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke r2.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: org.dom4j.Document mergeDocuments(org.dom4j.Document,java.lang.Iterable)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke r2.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: org.dom4j.Document mergeDocuments(org.dom4j.Document,java.lang.Iterable)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: r8 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: org.dom4j.Document mergeDocuments(org.dom4j.Document,java.lang.Iterable)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r8 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: org.dom4j.Document mergeDocuments(org.dom4j.Document,java.lang.Iterable)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.parsers.XmlDescriptorParser$NoopErrorHandler: void <init>()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser$NoopErrorHandler: void <clinit>()> ==> <com.atlassian.plugin.parsers.XmlDescriptorParser$NoopErrorHandler: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.String: void <init>(java.lang.String)>("atlassian.webresource.file.cache.size") in <com.atlassian.plugin.util.PluginUtils: void <clinit>()> ==> <java.lang.String: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r2.<java.lang.String: void <init>(java.lang.String)>("atlassian.webresource.file.cache.disable") in <com.atlassian.plugin.util.PluginUtils: void <clinit>()> ==> <java.lang.String: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r22.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("There was a problem loading the descriptor for module \'") in <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r24) in <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' in plugin \'") in <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
INTERFACE edge: $r30 = interfaceinvoke r27.<com.atlassian.plugin.Plugin: java.lang.String getName()>() in <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getName()>
VIRTUAL edge: $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30) in <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'.\n ") in <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r18.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not instantiate module descriptor: ") in <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) in <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".<br/>") in <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r31 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r14.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception instantiating module descriptor: ") in <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) in <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".<br/>") in <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r31 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r10.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not find module descriptor class: ") in <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) in <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".<br/>") in <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r31 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r6.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("A required class was missing: ") in <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) in <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Please check that you have all of the required dependencies.<br/>") in <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r31 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("There was a problem loading the module descriptor: ") in <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) in <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".<br/>") in <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r31 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r32.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r31) in <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r34 = virtualinvoke r0.<java.lang.Throwable: java.lang.String getMessage()>() in <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.Throwable: java.lang.String getMessage()>
VIRTUAL edge: $r34 = virtualinvoke r0.<java.lang.Throwable: java.lang.String getMessage()>() in <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <org.xml.sax.SAXException: java.lang.String getMessage()>
VIRTUAL edge: $r34 = virtualinvoke r0.<java.lang.Throwable: java.lang.String getMessage()>() in <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.nio.charset.MalformedInputException: java.lang.String getMessage()>
VIRTUAL edge: $r34 = virtualinvoke r0.<java.lang.Throwable: java.lang.String getMessage()>() in <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.net.URISyntaxException: java.lang.String getMessage()>
VIRTUAL edge: $r34 = virtualinvoke r0.<java.lang.Throwable: java.lang.String getMessage()>() in <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.util.regex.PatternSyntaxException: java.lang.String getMessage()>
VIRTUAL edge: $r34 = virtualinvoke r0.<java.lang.Throwable: java.lang.String getMessage()>() in <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
VIRTUAL edge: $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34) in <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.descriptors.UnloadableModuleDescriptorFactory: java.lang.String constructErrorMessage(com.atlassian.plugin.Plugin,java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.util.PluginUtils: java.lang.String asString(java.util.Set)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[") in <com.atlassian.plugin.util.PluginUtils: java.lang.String asString(java.util.Set)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
INTERFACE edge: $r6 = interfaceinvoke $r4.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r5) in <com.atlassian.plugin.util.PluginUtils: java.lang.String asString(java.util.Set)> ==> <java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>
INTERFACE edge: $r8 = interfaceinvoke $r6.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r7) in <com.atlassian.plugin.util.PluginUtils: java.lang.String asString(java.util.Set)> ==> <java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>
VIRTUAL edge: $r11 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10) in <com.atlassian.plugin.util.PluginUtils: java.lang.String asString(java.util.Set)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]") in <com.atlassian.plugin.util.PluginUtils: java.lang.String asString(java.util.Set)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.util.PluginUtils: java.lang.String asString(java.util.Set)> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>() in <com.atlassian.plugin.util.ModuleRestricts: com.atlassian.plugin.util.ModuleRestricts parse(org.dom4j.Element)> ==> <java.util.AbstractCollection: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>() in <com.atlassian.plugin.util.ModuleRestricts: com.atlassian.plugin.util.ModuleRestricts parse(org.dom4j.Element)> ==> <java.util.ArrayList: boolean isEmpty()>
SPECIAL edge: specialinvoke $r3.<com.atlassian.plugin.util.ModuleRestricts: void <init>()>() in <com.atlassian.plugin.util.ModuleRestricts: com.atlassian.plugin.util.ModuleRestricts parse(org.dom4j.Element)> ==> <com.atlassian.plugin.util.ModuleRestricts: void <init>()>
STATIC edge: $r1 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of()>() in <com.atlassian.plugin.util.ModuleRestricts: void <init>()> ==> <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of()>
INTERFACE edge: $z0 = interfaceinvoke r2.<java.util.List: boolean isEmpty()>() in <com.atlassian.plugin.util.ModuleRestricts: com.atlassian.plugin.util.VersionRange parseVersionRange(org.dom4j.Element)> ==> <java.util.AbstractCollection: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke r2.<java.util.List: boolean isEmpty()>() in <com.atlassian.plugin.util.ModuleRestricts: com.atlassian.plugin.util.VersionRange parseVersionRange(org.dom4j.Element)> ==> <java.util.ArrayList: boolean isEmpty()>
INTERFACE edge: r4 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.util.ModuleRestricts: com.atlassian.plugin.util.VersionRange parseVersionRange(org.dom4j.Element)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.util.ModuleRestricts: com.atlassian.plugin.util.VersionRange parseVersionRange(org.dom4j.Element)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
VIRTUAL edge: r10 = virtualinvoke r10.<com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange or(com.atlassian.plugin.util.VersionRange)>($r8) in <com.atlassian.plugin.util.ModuleRestricts: com.atlassian.plugin.util.VersionRange parseVersionRange(org.dom4j.Element)> ==> <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange or(com.atlassian.plugin.util.VersionRange)>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.net.URL: java.lang.String toString()>() in <com.atlassian.plugin.url.InnerJarURLConnection: java.net.URL normaliseURL(java.net.URL)> ==> <java.net.URL: java.lang.String toString()>
VIRTUAL edge: $z0 = virtualinvoke r9.<java.lang.String: boolean startsWith(java.lang.String)>("jar:") in <com.atlassian.plugin.url.InnerJarURLConnection: java.net.URL normaliseURL(java.net.URL)> ==> <java.lang.String: boolean startsWith(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r9.<java.lang.String: int indexOf(int)>(33) in <com.atlassian.plugin.url.InnerJarURLConnection: java.net.URL normaliseURL(java.net.URL)> ==> <java.lang.String: int indexOf(int)>
SPECIAL edge: specialinvoke $r6.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.url.InnerJarURLConnection: java.net.URL normaliseURL(java.net.URL)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("jar:") in <com.atlassian.plugin.url.InnerJarURLConnection: java.net.URL normaliseURL(java.net.URL)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9) in <com.atlassian.plugin.url.InnerJarURLConnection: java.net.URL normaliseURL(java.net.URL)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.url.InnerJarURLConnection: java.net.URL normaliseURL(java.net.URL)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.url.InnerJarURLConnection: java.net.URL normaliseURL(java.net.URL)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9) in <com.atlassian.plugin.url.InnerJarURLConnection: java.net.URL normaliseURL(java.net.URL)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!/") in <com.atlassian.plugin.url.InnerJarURLConnection: java.net.URL normaliseURL(java.net.URL)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.url.InnerJarURLConnection: java.net.URL normaliseURL(java.net.URL)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r2.<java.net.URL: void <init>(java.lang.String)>(r9) in <com.atlassian.plugin.url.InnerJarURLConnection: java.net.URL normaliseURL(java.net.URL)> ==> <java.net.URL: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.manager.StateTracker$State$1: void <init>(java.lang.String,int)>("NOT_STARTED", 0) in <com.atlassian.plugin.manager.StateTracker$State: void <clinit>()> ==> <com.atlassian.plugin.manager.StateTracker$State$1: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.manager.StateTracker$State: void <init>(java.lang.String,int)>("STARTING", 1) in <com.atlassian.plugin.manager.StateTracker$State: void <clinit>()> ==> <com.atlassian.plugin.manager.StateTracker$State: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r2.<com.atlassian.plugin.manager.StateTracker$State$2: void <init>(java.lang.String,int)>("DELAYED", 2) in <com.atlassian.plugin.manager.StateTracker$State: void <clinit>()> ==> <com.atlassian.plugin.manager.StateTracker$State$2: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r3.<com.atlassian.plugin.manager.StateTracker$State: void <init>(java.lang.String,int)>("RESUMING", 3) in <com.atlassian.plugin.manager.StateTracker$State: void <clinit>()> ==> <com.atlassian.plugin.manager.StateTracker$State: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r4.<com.atlassian.plugin.manager.StateTracker$State$3: void <init>(java.lang.String,int)>("STARTED", 4) in <com.atlassian.plugin.manager.StateTracker$State: void <clinit>()> ==> <com.atlassian.plugin.manager.StateTracker$State$3: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r5.<com.atlassian.plugin.manager.StateTracker$State$4: void <init>(java.lang.String,int)>("WARM_RESTARTING", 5) in <com.atlassian.plugin.manager.StateTracker$State: void <clinit>()> ==> <com.atlassian.plugin.manager.StateTracker$State$4: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r6.<com.atlassian.plugin.manager.StateTracker$State: void <init>(java.lang.String,int)>("SHUTTING_DOWN", 6) in <com.atlassian.plugin.manager.StateTracker$State: void <clinit>()> ==> <com.atlassian.plugin.manager.StateTracker$State: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r7.<com.atlassian.plugin.manager.StateTracker$State$5: void <init>(java.lang.String,int)>("SHUTDOWN", 7) in <com.atlassian.plugin.manager.StateTracker$State: void <clinit>()> ==> <com.atlassian.plugin.manager.StateTracker$State$5: void <init>(java.lang.String,int)>
INTERFACE edge: $r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Spliterator spliterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Iterable toPluginKeys(java.lang.Iterable)> ==> <java.lang.Iterable: java.util.Spliterator spliterator()>
INTERFACE edge: $r4 = interfaceinvoke $r2.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r3) in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Iterable toPluginKeys(java.lang.Iterable)> ==> <java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>
INTERFACE edge: $r6 = interfaceinvoke $r4.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r5) in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.Iterable toPluginKeys(java.lang.Iterable)> ==> <java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>
SPECIAL edge: specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>($r2) in <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: void <clinit>()> ==> <java.io.File: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.exception.NoOpPluginExceptionInterception: void <init>()>() in <com.atlassian.plugin.exception.NoOpPluginExceptionInterception: void <clinit>()> ==> <com.atlassian.plugin.exception.NoOpPluginExceptionInterception: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.manager.SafeModeManager$1: void <init>()>() in <com.atlassian.plugin.manager.SafeModeManager: void <clinit>()> ==> <com.atlassian.plugin.manager.SafeModeManager$1: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: void <init>()>() in <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$LazyHolder: void <clinit>()> ==> <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: void <init>()>
CLINIT edge: $r2 = staticinvoke <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: java.lang.String getEnabledProperty()>() in <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: void <init>()> ==> <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.util.Optional: java.util.Optional empty()>() in <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: void <init>()> ==> <java.util.Optional: java.util.Optional empty()>
STATIC edge: $r7 = staticinvoke <java.util.Optional: java.util.Optional of(java.lang.Object)>($r6) in <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: void <init>()> ==> <java.util.Optional: java.util.Optional of(java.lang.Object)>
STATIC edge: $r5 = staticinvoke <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: java.lang.String getEnabledProperty()>() in <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: void <init>()> ==> <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: java.lang.String getEnabledProperty()>
STATIC edge: r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0) in <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: void <init>()> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
STATIC edge: $z0 = staticinvoke <java.lang.Boolean: boolean getBoolean(java.lang.String)>($r2) in <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: void <init>()> ==> <java.lang.Boolean: boolean getBoolean(java.lang.String)>
STATIC edge: $r2 = staticinvoke <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: java.lang.String getEnabledProperty()>() in <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: void <init>()> ==> <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: java.lang.String getEnabledProperty()>
STATIC edge: staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("com.atlassian.instrumentation.InstrumentRegistry") in <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: void <init>()> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
CLINIT edge: $z0 = staticinvoke <java.lang.Boolean: boolean getBoolean(java.lang.String)>($r2) in <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: void <init>()> ==> <java.lang.Boolean: void <clinit>()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Integer: int intValue()>() in <com.atlassian.plugin.util.WaitUntil: void <clinit>()> ==> <java.lang.Integer: int intValue()>
SPECIAL edge: specialinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge: void <clinit>()> ==> <java.util.concurrent.atomic.AtomicInteger: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.event.impl.MethodNameListenerMethodSelector: void <init>()>() in <com.atlassian.plugin.event.impl.DefaultPluginEventManager: com.atlassian.plugin.event.impl.ListenerMethodSelector[] defaultMethodSelectors()> ==> <com.atlassian.plugin.event.impl.MethodNameListenerMethodSelector: void <init>()>
SPECIAL edge: specialinvoke $r2.<com.atlassian.plugin.event.impl.AnnotationListenerMethodSelector: void <init>()>() in <com.atlassian.plugin.event.impl.DefaultPluginEventManager: com.atlassian.plugin.event.impl.ListenerMethodSelector[] defaultMethodSelectors()> ==> <com.atlassian.plugin.event.impl.AnnotationListenerMethodSelector: void <init>()>
SPECIAL edge: specialinvoke $r4.<com.atlassian.plugin.event.impl.AnnotationListenerMethodSelector: void <init>(java.lang.Class)>(class "Lcom/atlassian/event/api/EventListener;") in <com.atlassian.plugin.event.impl.DefaultPluginEventManager: com.atlassian.plugin.event.impl.ListenerMethodSelector[] defaultMethodSelectors()> ==> <com.atlassian.plugin.event.impl.AnnotationListenerMethodSelector: void <init>(java.lang.Class)>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$MatchType$1: void <init>(java.lang.String,int)>("MATCHES_ANY", 0) in <com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$MatchType: void <clinit>()> ==> <com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$MatchType$1: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$MatchType$2: void <init>(java.lang.String,int)>("MATCHES_NONE", 1) in <com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$MatchType: void <clinit>()> ==> <com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$MatchType$2: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.util.PluginFrameworkUtils$1: void <init>()>() in <com.atlassian.plugin.util.PluginFrameworkUtils: void <clinit>()> ==> <com.atlassian.plugin.util.PluginFrameworkUtils$1: void <init>()>
VIRTUAL edge: $l0 = virtualinvoke $r0.<java.lang.Long: long longValue()>() in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: void <clinit>()> ==> <java.lang.Long: long longValue()>
VIRTUAL edge: $l1 = virtualinvoke $r1.<java.lang.Long: long longValue()>() in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: void <clinit>()> ==> <java.lang.Long: long longValue()>
SPECIAL edge: $r2 = specialinvoke r0.<com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: java.util.List getEnabledModuleDescriptorsByModuleClass(java.lang.Class)>(r1) in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: java.util.List access$200(com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor,java.lang.Class)> ==> <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: java.util.List getEnabledModuleDescriptorsByModuleClass(java.lang.Class)>
INTERFACE edge: interfaceinvoke $r3.<org.slf4j.Logger: void error(java.lang.String,java.lang.Object)>("Cannot build a scanner for source \'{}\'", r0) in <com.atlassian.plugin.loaders.BundledPluginLoader: com.atlassian.plugin.loaders.classloading.Scanner buildSourceScanner(java.io.File)> ==> <org.slf4j.Logger: void error(java.lang.String,java.lang.Object)>
SPECIAL edge: specialinvoke $r4.<com.atlassian.plugin.loaders.classloading.EmptyScanner: void <init>()>() in <com.atlassian.plugin.loaders.BundledPluginLoader: com.atlassian.plugin.loaders.classloading.Scanner buildSourceScanner(java.io.File)> ==> <com.atlassian.plugin.loaders.classloading.EmptyScanner: void <init>()>
SPECIAL edge: specialinvoke $r3.<com.atlassian.plugin.loaders.DirectoryScanner: void <init>(java.io.File)>(r2) in <com.atlassian.plugin.loaders.BundledPluginLoader: com.atlassian.plugin.loaders.classloading.Scanner buildZipScanner(java.net.URL,java.io.File)> ==> <com.atlassian.plugin.loaders.DirectoryScanner: void <init>(java.io.File)>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.manager.ProductPluginAccessor$1: void <init>()>() in <com.atlassian.plugin.manager.ProductPluginAccessor: void <clinit>()> ==> <com.atlassian.plugin.manager.ProductPluginAccessor$1: void <init>()>
VIRTUAL edge: r1 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\s*,[,\\s]*") in <com.atlassian.plugin.util.ModuleRestricts: com.atlassian.plugin.util.ModuleRestricts parseApplicationsFromAttribute(java.lang.String)> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
SPECIAL edge: specialinvoke $r3.<com.atlassian.plugin.util.ModuleRestricts$IsNotBlankPredicate: void <init>(com.atlassian.plugin.util.ModuleRestricts$1)>(null) in <com.atlassian.plugin.util.ModuleRestricts: com.atlassian.plugin.util.ModuleRestricts parseApplicationsFromAttribute(java.lang.String)> ==> <com.atlassian.plugin.util.ModuleRestricts$IsNotBlankPredicate: void <init>(com.atlassian.plugin.util.ModuleRestricts$1)>
SPECIAL edge: specialinvoke $r7.<com.atlassian.plugin.util.ModuleRestricts: void <init>(java.lang.Iterable)>(r6) in <com.atlassian.plugin.util.ModuleRestricts: com.atlassian.plugin.util.ModuleRestricts parseApplicationsFromAttribute(java.lang.String)> ==> <com.atlassian.plugin.util.ModuleRestricts: void <init>(java.lang.Iterable)>
STATIC edge: $r2 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.lang.Iterable)>(r1) in <com.atlassian.plugin.util.ModuleRestricts: void <init>(java.lang.Iterable)> ==> <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.lang.Iterable)>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.util.ModuleRestricts: void <init>(java.lang.Iterable)>($r3) in <com.atlassian.plugin.util.ModuleRestricts: com.atlassian.plugin.util.ModuleRestricts parseApplicationsFromRestrictElements(java.util.List)> ==> <com.atlassian.plugin.util.ModuleRestricts: void <init>(java.lang.Iterable)>
VIRTUAL edge: $z0 = virtualinvoke r5.<java.lang.String: boolean startsWith(java.lang.String)>("/") in <com.atlassian.plugin.url.InnerJarURLConnection: java.lang.String normalizeUrlPath(java.lang.String)> ==> <java.lang.String: boolean startsWith(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.String: java.lang.String substring(int)>(1) in <com.atlassian.plugin.url.InnerJarURLConnection: java.lang.String normalizeUrlPath(java.lang.String)> ==> <java.lang.String: java.lang.String substring(int)>
VIRTUAL edge: i0 = virtualinvoke r5.<java.lang.String: int indexOf(java.lang.String)>("/..") in <com.atlassian.plugin.url.InnerJarURLConnection: java.lang.String normalizeUrlPath(java.lang.String)> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: i2 = virtualinvoke r5.<java.lang.String: int lastIndexOf(int,int)>(47, $i1) in <com.atlassian.plugin.url.InnerJarURLConnection: java.lang.String normalizeUrlPath(java.lang.String)> ==> <java.lang.String: int lastIndexOf(int,int)>
VIRTUAL edge: $r1 = virtualinvoke r5.<java.lang.String: java.lang.String substring(int,int)>(0, i2) in <com.atlassian.plugin.url.InnerJarURLConnection: java.lang.String normalizeUrlPath(java.lang.String)> ==> <java.lang.String: java.lang.String substring(int,int)>
VIRTUAL edge: $r3 = virtualinvoke r5.<java.lang.String: java.lang.String substring(int)>($i3) in <com.atlassian.plugin.url.InnerJarURLConnection: java.lang.String normalizeUrlPath(java.lang.String)> ==> <java.lang.String: java.lang.String substring(int)>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.url.InnerJarURLConnection: java.lang.String normalizeUrlPath(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1) in <com.atlassian.plugin.url.InnerJarURLConnection: java.lang.String normalizeUrlPath(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3) in <com.atlassian.plugin.url.InnerJarURLConnection: java.lang.String normalizeUrlPath(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.url.InnerJarURLConnection: java.lang.String normalizeUrlPath(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.io.File: boolean isDirectory()>() in <com.atlassian.plugin.loaders.BundledPluginLoader: com.atlassian.plugin.loaders.classloading.Scanner buildScannerCommon(java.io.File)> ==> <java.io.File: boolean isDirectory()>
VIRTUAL edge: $z1 = virtualinvoke r0.<java.io.File: boolean isFile()>() in <com.atlassian.plugin.loaders.BundledPluginLoader: com.atlassian.plugin.loaders.classloading.Scanner buildScannerCommon(java.io.File)> ==> <java.io.File: boolean isFile()>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.io.File: java.lang.String getName()>() in <com.atlassian.plugin.loaders.BundledPluginLoader: com.atlassian.plugin.loaders.classloading.Scanner buildScannerCommon(java.io.File)> ==> <java.io.File: java.lang.String getName()>
SPECIAL edge: specialinvoke $r5.<com.atlassian.plugin.loaders.DirectoryScanner: void <init>(java.io.File)>(r0) in <com.atlassian.plugin.loaders.BundledPluginLoader: com.atlassian.plugin.loaders.classloading.Scanner buildScannerCommon(java.io.File)> ==> <com.atlassian.plugin.loaders.DirectoryScanner: void <init>(java.io.File)>
VIRTUAL edge: $z2 = virtualinvoke $r1.<java.lang.String: boolean endsWith(java.lang.String)>($r2) in <com.atlassian.plugin.loaders.BundledPluginLoader: com.atlassian.plugin.loaders.classloading.Scanner buildScannerCommon(java.io.File)> ==> <java.lang.String: boolean endsWith(java.lang.String)>
SPECIAL edge: specialinvoke $r4.<com.atlassian.plugin.loaders.FileListScanner: void <init>(java.util.Collection)>(r3) in <com.atlassian.plugin.loaders.BundledPluginLoader: com.atlassian.plugin.loaders.classloading.Scanner buildScannerCommon(java.io.File)> ==> <com.atlassian.plugin.loaders.FileListScanner: void <init>(java.util.Collection)>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.io.File: java.nio.file.Path toPath()>() in <com.atlassian.plugin.loaders.BundledPluginLoader: java.util.List readListFile(java.io.File)> ==> <java.io.File: java.nio.file.Path toPath()>
SPECIAL edge: specialinvoke $r2.<java.util.ArrayList: void <init>()>() in <com.atlassian.plugin.loaders.BundledPluginLoader: java.util.List readListFile(java.io.File)> ==> <java.util.ArrayList: void <init>()>
INTERFACE edge: interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r7) in <com.atlassian.plugin.loaders.BundledPluginLoader: java.util.List readListFile(java.io.File)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: r4 = interfaceinvoke r14.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.loaders.BundledPluginLoader: java.util.List readListFile(java.io.File)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke r14.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.loaders.BundledPluginLoader: java.util.List readListFile(java.io.File)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke $r7.<java.io.File: void <init>(java.lang.String)>(r6) in <com.atlassian.plugin.loaders.BundledPluginLoader: java.util.List readListFile(java.io.File)> ==> <java.io.File: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r10.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.loaders.BundledPluginLoader: java.util.List readListFile(java.io.File)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to read list from ") in <com.atlassian.plugin.loaders.BundledPluginLoader: java.util.List readListFile(java.io.File)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0) in <com.atlassian.plugin.loaders.BundledPluginLoader: java.util.List readListFile(java.io.File)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.loaders.BundledPluginLoader: java.util.List readListFile(java.io.File)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r13, $r8) in <com.atlassian.plugin.loaders.BundledPluginLoader: java.util.List readListFile(java.io.File)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke r0.<java.net.JarURLConnection: void <init>(java.net.URL)>($r1) in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: void <init>(java.net.URL)> ==> <java.net.JarURLConnection: void <init>(java.net.URL)>
VIRTUAL edge: r2 = virtualinvoke $r1.<java.net.URL: java.lang.String getPath()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: void <init>(java.net.URL)> ==> <java.net.URL: java.lang.String getPath()>
VIRTUAL edge: $r7 = virtualinvoke $r1.<java.net.URL: java.lang.String toExternalForm()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: void <init>(java.net.URL)> ==> <java.net.URL: java.lang.String toExternalForm()>
VIRTUAL edge: i0 = virtualinvoke r2.<java.lang.String: int indexOf(int)>(33) in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: void <init>(java.net.URL)> ==> <java.lang.String: int indexOf(int)>
VIRTUAL edge: r3 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, i0) in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: void <init>(java.net.URL)> ==> <java.lang.String: java.lang.String substring(int,int)>
VIRTUAL edge: $i1 = virtualinvoke r2.<java.lang.String: int length()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: void <init>(java.net.URL)> ==> <java.lang.String: int length()>
VIRTUAL edge: $c4 = virtualinvoke r2.<java.lang.String: char charAt(int)>($i3) in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: void <init>(java.net.URL)> ==> <java.lang.String: char charAt(int)>
VIRTUAL edge: $i6 = virtualinvoke r2.<java.lang.String: int length()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: void <init>(java.net.URL)> ==> <java.lang.String: int length()>
VIRTUAL edge: r23 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>($i7) in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: void <init>(java.net.URL)> ==> <java.lang.String: java.lang.String substring(int)>
SPECIAL edge: specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: void <init>(java.net.URL)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No !/ in url: ") in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: void <init>(java.net.URL)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: void <init>(java.net.URL)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: void <init>(java.net.URL)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r4.<java.net.MalformedURLException: void <init>(java.lang.String)>($r9) in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: void <init>(java.net.URL)> ==> <java.net.MalformedURLException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r10.<java.util.ArrayList: void <init>()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: void <init>(java.net.URL)> ==> <java.util.ArrayList: void <init>()>
INTERFACE edge: interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r19) in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: void <init>(java.net.URL)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: $i8 = interfaceinvoke $r10.<java.util.List: int size()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: void <init>(java.net.URL)> ==> <java.util.ArrayList: int size()>
INTERFACE edge: $r15 = interfaceinvoke $r10.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r14) in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: void <init>(java.net.URL)> ==> <java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>
SPECIAL edge: specialinvoke $r12.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r23, "!") in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: void <init>(java.net.URL)> ==> <java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>
VIRTUAL edge: $z1 = virtualinvoke $r12.<java.util.StringTokenizer: boolean hasMoreTokens()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: void <init>(java.net.URL)> ==> <java.util.StringTokenizer: boolean hasMoreTokens()>
VIRTUAL edge: $r19 = virtualinvoke $r12.<java.util.StringTokenizer: java.lang.String nextToken()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: void <init>(java.net.URL)> ==> <java.util.StringTokenizer: java.lang.String nextToken()>
SPECIAL edge: specialinvoke $r18.<java.net.URL: void <init>(java.lang.String)>(r3) in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: void <init>(java.net.URL)> ==> <java.net.URL: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.net.URL: java.lang.String toString()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: java.net.URL normaliseURL(java.net.URL)> ==> <java.net.URL: java.lang.String toString()>
VIRTUAL edge: $z0 = virtualinvoke r9.<java.lang.String: boolean startsWith(java.lang.String)>("jar:") in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: java.net.URL normaliseURL(java.net.URL)> ==> <java.lang.String: boolean startsWith(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r9.<java.lang.String: int indexOf(int)>(33) in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: java.net.URL normaliseURL(java.net.URL)> ==> <java.lang.String: int indexOf(int)>
SPECIAL edge: specialinvoke $r6.<java.lang.StringBuilder: void <init>()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: java.net.URL normaliseURL(java.net.URL)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("jar:") in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: java.net.URL normaliseURL(java.net.URL)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9) in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: java.net.URL normaliseURL(java.net.URL)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: java.net.URL normaliseURL(java.net.URL)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: java.net.URL normaliseURL(java.net.URL)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9) in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: java.net.URL normaliseURL(java.net.URL)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!/") in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: java.net.URL normaliseURL(java.net.URL)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: java.net.URL normaliseURL(java.net.URL)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r2.<java.net.URL: void <init>(java.lang.String)>(r9) in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: java.net.URL normaliseURL(java.net.URL)> ==> <java.net.URL: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r5.<java.lang.String: boolean startsWith(java.lang.String)>("/") in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: java.lang.String normalizeUrlPath(java.lang.String)> ==> <java.lang.String: boolean startsWith(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.String: java.lang.String substring(int)>(1) in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: java.lang.String normalizeUrlPath(java.lang.String)> ==> <java.lang.String: java.lang.String substring(int)>
VIRTUAL edge: i0 = virtualinvoke r5.<java.lang.String: int indexOf(java.lang.String)>("/..") in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: java.lang.String normalizeUrlPath(java.lang.String)> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: i2 = virtualinvoke r5.<java.lang.String: int lastIndexOf(int,int)>(47, $i1) in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: java.lang.String normalizeUrlPath(java.lang.String)> ==> <java.lang.String: int lastIndexOf(int,int)>
VIRTUAL edge: $r1 = virtualinvoke r5.<java.lang.String: java.lang.String substring(int,int)>(0, i2) in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: java.lang.String normalizeUrlPath(java.lang.String)> ==> <java.lang.String: java.lang.String substring(int,int)>
VIRTUAL edge: $r3 = virtualinvoke r5.<java.lang.String: java.lang.String substring(int)>($i3) in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: java.lang.String normalizeUrlPath(java.lang.String)> ==> <java.lang.String: java.lang.String substring(int)>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: java.lang.String normalizeUrlPath(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1) in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: java.lang.String normalizeUrlPath(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3) in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: java.lang.String normalizeUrlPath(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: java.lang.String normalizeUrlPath(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r1 = virtualinvoke r0.<org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: java.net.URL getBaseResource()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: void setupBaseResourceInputStream()> ==> <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: java.net.URL getBaseResource()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.net.URL: java.io.InputStream openStream()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: void setupBaseResourceInputStream()> ==> <java.net.URL: java.io.InputStream openStream()>
VIRTUAL edge: r1 = virtualinvoke r0.<org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: java.util.jar.JarFile getJarFile()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: void setupPathedInputStream()> ==> <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: java.util.jar.JarFile getJarFile()>
VIRTUAL edge: r4 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int)>(1) in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: void setupPathedInputStream()> ==> <java.lang.String: java.lang.String substring(int)>
VIRTUAL edge: r5 = virtualinvoke r1.<java.util.jar.JarFile: java.util.zip.ZipEntry getEntry(java.lang.String)>(r4) in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: void setupPathedInputStream()> ==> <java.util.jar.JarFile: java.util.zip.ZipEntry getEntry(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke r1.<java.util.jar.JarFile: java.lang.String getName()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: void setupPathedInputStream()> ==> <java.util.zip.ZipFile: java.lang.String getName()>
VIRTUAL edge: r6 = virtualinvoke r1.<java.util.jar.JarFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)>(r5) in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: void setupPathedInputStream()> ==> <java.util.jar.JarFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)>
SPECIAL edge: specialinvoke $r9.<java.lang.StringBuilder: void <init>()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: void setupPathedInputStream()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to locate entry: ") in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: void setupPathedInputStream()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: void setupPathedInputStream()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", in JAR file: ") in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: void setupPathedInputStream()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13) in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: void setupPathedInputStream()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: void setupPathedInputStream()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>($r15) in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: void setupPathedInputStream()> ==> <java.io.IOException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r7.<org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: void <init>(org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection,java.io.InputStream,java.util.jar.JarFile)>(r0, r6, r1) in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: void setupPathedInputStream()> ==> <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: void <init>(org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection,java.io.InputStream,java.util.jar.JarFile)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1) in <com.atlassian.plugin.repositories.FilePluginInstaller: void backup(java.lang.String,java.io.File)> ==> <java.util.HashMap: boolean containsKey(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1) in <com.atlassian.plugin.repositories.FilePluginInstaller: void backup(java.lang.String,java.io.File)> ==> <java.util.Hashtable: boolean containsKey(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1) in <com.atlassian.plugin.repositories.FilePluginInstaller: void backup(java.lang.String,java.io.File)> ==> <java.util.TreeMap: boolean containsKey(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1) in <com.atlassian.plugin.repositories.FilePluginInstaller: void backup(java.lang.String,java.io.File)> ==> <java.util.jar.Attributes: boolean containsKey(java.lang.Object)>
SPECIAL edge: r14 = specialinvoke r0.<com.atlassian.plugin.repositories.FilePluginInstaller: com.atlassian.plugin.repositories.FilePluginInstaller$BackupRepresentation getBackupRepresentation(java.lang.String,java.io.File)>(r1, r7) in <com.atlassian.plugin.repositories.FilePluginInstaller: void backup(java.lang.String,java.io.File)> ==> <com.atlassian.plugin.repositories.FilePluginInstaller: com.atlassian.plugin.repositories.FilePluginInstaller$BackupRepresentation getBackupRepresentation(java.lang.String,java.io.File)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.atlassian.plugin.repositories.FilePluginInstaller: void backup(java.lang.String,java.io.File)> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.atlassian.plugin.repositories.FilePluginInstaller: void backup(java.lang.String,java.io.File)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.atlassian.plugin.repositories.FilePluginInstaller: void backup(java.lang.String,java.io.File)> ==> <java.util.TreeMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.atlassian.plugin.repositories.FilePluginInstaller: void backup(java.lang.String,java.io.File)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.atlassian.plugin.repositories.FilePluginInstaller: void backup(java.lang.String,java.io.File)> ==> <java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $r8 = virtualinvoke r7.<java.io.File: java.lang.String getName()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: void backup(java.lang.String,java.io.File)> ==> <java.io.File: java.lang.String getName()>
SPECIAL edge: specialinvoke $r6.<com.atlassian.plugin.repositories.FilePluginInstaller$BackupRepresentation: void <init>(com.atlassian.plugin.repositories.FilePluginInstaller$BackupRepresentation,java.lang.String)>(r5, $r8) in <com.atlassian.plugin.repositories.FilePluginInstaller: void backup(java.lang.String,java.io.File)> ==> <com.atlassian.plugin.repositories.FilePluginInstaller$BackupRepresentation: void <init>(com.atlassian.plugin.repositories.FilePluginInstaller$BackupRepresentation,java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke r5.<com.atlassian.plugin.repositories.FilePluginInstaller$BackupRepresentation: java.io.File getBackupFile()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: void backup(java.lang.String,java.io.File)> ==> <com.atlassian.plugin.repositories.FilePluginInstaller$BackupRepresentation: java.io.File getBackupFile()>
VIRTUAL edge: $r12 = virtualinvoke r5.<com.atlassian.plugin.repositories.FilePluginInstaller$BackupRepresentation: java.lang.String getCurrentPluginFilename()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: void backup(java.lang.String,java.io.File)> ==> <com.atlassian.plugin.repositories.FilePluginInstaller$BackupRepresentation: java.lang.String getCurrentPluginFilename()>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.io.File: java.lang.String getParent()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: void backup(java.lang.String,java.io.File)> ==> <java.io.File: java.lang.String getParent()>
SPECIAL edge: specialinvoke $r9.<java.io.File: void <init>(java.lang.String,java.lang.String)>($r11, $r12) in <com.atlassian.plugin.repositories.FilePluginInstaller: void backup(java.lang.String,java.io.File)> ==> <java.io.File: void <init>(java.lang.String,java.lang.String)>
VIRTUAL edge: $z1 = virtualinvoke $r9.<java.io.File: boolean exists()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: void backup(java.lang.String,java.io.File)> ==> <java.io.File: boolean exists()>
VIRTUAL edge: virtualinvoke $r9.<java.io.File: boolean delete()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: void backup(java.lang.String,java.io.File)> ==> <java.io.File: boolean delete()>
INTERFACE edge: interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r14) in <com.atlassian.plugin.repositories.FilePluginInstaller: void backup(java.lang.String,java.io.File)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r14) in <com.atlassian.plugin.repositories.FilePluginInstaller: void backup(java.lang.String,java.io.File)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r14) in <com.atlassian.plugin.repositories.FilePluginInstaller: void backup(java.lang.String,java.io.File)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r14) in <com.atlassian.plugin.repositories.FilePluginInstaller: void backup(java.lang.String,java.io.File)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
CLINIT edge: $r3 = new java.io.File in <com.atlassian.plugin.repositories.FilePluginInstaller: com.atlassian.plugin.repositories.FilePluginInstaller$BackupRepresentation getBackupRepresentation(java.lang.String,java.io.File)> ==> <java.io.File: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File)>(r0, $r3) in <com.atlassian.plugin.repositories.FilePluginInstaller: com.atlassian.plugin.repositories.FilePluginInstaller$BackupRepresentation getBackupRepresentation(java.lang.String,java.io.File)> ==> <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.repositories.FilePluginInstaller$BackupNameFilter: void <init>()>() in <com.atlassian.plugin.repositories.FilePluginInstaller$BackupNameFilter: void <init>(com.atlassian.plugin.repositories.FilePluginInstaller$1)> ==> <com.atlassian.plugin.repositories.FilePluginInstaller$BackupNameFilter: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.String: boolean matches(java.lang.String)>("\\d+") in <com.atlassian.plugin.util.VersionStringComparator$VersionStringComponentComparator: boolean isInteger(java.lang.String)> ==> <java.lang.String: boolean matches(java.lang.String)>
VIRTUAL edge: r2 = virtualinvoke $r0.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1) in <com.atlassian.plugin.util.VersionStringComparator$VersionStringComponentComparator: java.math.BigInteger getStartingInteger(java.lang.String)> ==> <java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>
VIRTUAL edge: $z0 = virtualinvoke r2.<java.util.regex.Matcher: boolean find()>() in <com.atlassian.plugin.util.VersionStringComparator$VersionStringComponentComparator: java.math.BigInteger getStartingInteger(java.lang.String)> ==> <java.util.regex.Matcher: boolean find()>
VIRTUAL edge: $r4 = virtualinvoke r2.<java.util.regex.Matcher: java.lang.String group(int)>(1) in <com.atlassian.plugin.util.VersionStringComparator$VersionStringComponentComparator: java.math.BigInteger getStartingInteger(java.lang.String)> ==> <java.util.regex.Matcher: java.lang.String group(int)>
SPECIAL edge: specialinvoke $r3.<java.math.BigInteger: void <init>(java.lang.String)>($r4) in <com.atlassian.plugin.util.VersionStringComparator$VersionStringComponentComparator: java.math.BigInteger getStartingInteger(java.lang.String)> ==> <java.math.BigInteger: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.util.VersionStringComparator$VersionStringComponentComparator: void <init>(com.atlassian.plugin.util.VersionStringComparator)>(r1) in <com.atlassian.plugin.util.VersionStringComparator$VersionStringComponentComparator: void <init>(com.atlassian.plugin.util.VersionStringComparator,com.atlassian.plugin.util.VersionStringComparator$1)> ==> <com.atlassian.plugin.util.VersionStringComparator$VersionStringComponentComparator: void <init>(com.atlassian.plugin.util.VersionStringComparator)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: java.lang.Object clone()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: java.lang.Object clone()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$NoOpLock: void <init>()>() in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode$1: java.util.concurrent.locks.ReadWriteLock getReadWriteLock()> ==> <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$NoOpLock: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$CommonReadWriteLock: void <init>(java.util.concurrent.locks.Lock)>($r1) in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode$1: java.util.concurrent.locks.ReadWriteLock getReadWriteLock()> ==> <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$CommonReadWriteLock: void <init>(java.util.concurrent.locks.Lock)>
SPECIAL edge: specialinvoke $r0.<java.util.concurrent.locks.ReentrantReadWriteLock: void <init>()>() in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode$4: java.util.concurrent.locks.ReadWriteLock getReadWriteLock()> ==> <java.util.concurrent.locks.ReentrantReadWriteLock: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.concurrent.locks.ReentrantLock: void <init>(boolean)>(1) in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode$3: java.util.concurrent.locks.ReadWriteLock getReadWriteLock()> ==> <java.util.concurrent.locks.ReentrantLock: void <init>(boolean)>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$CommonReadWriteLock: void <init>(java.util.concurrent.locks.Lock)>($r1) in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode$3: java.util.concurrent.locks.ReadWriteLock getReadWriteLock()> ==> <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$CommonReadWriteLock: void <init>(java.util.concurrent.locks.Lock)>
SPECIAL edge: specialinvoke $r0.<java.util.concurrent.locks.ReentrantReadWriteLock: void <init>(boolean)>(1) in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode$5: java.util.concurrent.locks.ReadWriteLock getReadWriteLock()> ==> <java.util.concurrent.locks.ReentrantReadWriteLock: void <init>(boolean)>
SPECIAL edge: specialinvoke $r1.<java.util.concurrent.locks.ReentrantLock: void <init>()>() in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode$2: java.util.concurrent.locks.ReadWriteLock getReadWriteLock()> ==> <java.util.concurrent.locks.ReentrantLock: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$CommonReadWriteLock: void <init>(java.util.concurrent.locks.Lock)>($r1) in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode$2: java.util.concurrent.locks.ReadWriteLock getReadWriteLock()> ==> <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$CommonReadWriteLock: void <init>(java.util.concurrent.locks.Lock)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.PluginPersistentState$Builder: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.HashMap: void <init>()>() in <com.atlassian.plugin.manager.PluginPersistentState$Builder: void <init>()> ==> <java.util.HashMap: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.PluginPersistentState$Builder: void <init>(com.atlassian.plugin.manager.PluginPersistentState)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.HashMap: void <init>()>() in <com.atlassian.plugin.manager.PluginPersistentState$Builder: void <init>(com.atlassian.plugin.manager.PluginPersistentState)> ==> <java.util.HashMap: void <init>()>
INTERFACE edge: $r4 = interfaceinvoke r2.<com.atlassian.plugin.manager.PluginPersistentState: java.util.Map getStatesMap()>() in <com.atlassian.plugin.manager.PluginPersistentState$Builder: void <init>(com.atlassian.plugin.manager.PluginPersistentState)> ==> <com.atlassian.plugin.manager.DefaultPluginPersistentState: java.util.Map getStatesMap()>
INTERFACE edge: interfaceinvoke $r3.<java.util.Map: void putAll(java.util.Map)>($r4) in <com.atlassian.plugin.manager.PluginPersistentState$Builder: void <init>(com.atlassian.plugin.manager.PluginPersistentState)> ==> <java.util.HashMap: void putAll(java.util.Map)>
INTERFACE edge: interfaceinvoke $r3.<java.util.Map: void putAll(java.util.Map)>($r4) in <com.atlassian.plugin.manager.PluginPersistentState$Builder: void <init>(com.atlassian.plugin.manager.PluginPersistentState)> ==> <java.util.Hashtable: void putAll(java.util.Map)>
INTERFACE edge: interfaceinvoke $r3.<java.util.Map: void putAll(java.util.Map)>($r4) in <com.atlassian.plugin.manager.PluginPersistentState$Builder: void <init>(com.atlassian.plugin.manager.PluginPersistentState)> ==> <java.util.AbstractMap: void putAll(java.util.Map)>
INTERFACE edge: interfaceinvoke $r3.<java.util.Map: void putAll(java.util.Map)>($r4) in <com.atlassian.plugin.manager.PluginPersistentState$Builder: void <init>(com.atlassian.plugin.manager.PluginPersistentState)> ==> <java.util.jar.Attributes: void putAll(java.util.Map)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginPersistentState: void <init>(java.util.Map,boolean)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.HashMap: void <init>(java.util.Map)>(r2) in <com.atlassian.plugin.manager.DefaultPluginPersistentState: void <init>(java.util.Map,boolean)> ==> <java.util.HashMap: void <init>(java.util.Map)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r3) in <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder setEnabled(java.lang.String,boolean)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r3) in <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder setEnabled(java.lang.String,boolean)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r3) in <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder setEnabled(java.lang.String,boolean)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r3) in <com.atlassian.plugin.manager.PluginPersistentState$Builder: com.atlassian.plugin.manager.PluginPersistentState$Builder setEnabled(java.lang.String,boolean)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.parsers.XmlDescriptorParserUtils$NamespaceCleaner: void <init>()>() in <com.atlassian.plugin.parsers.XmlDescriptorParserUtils$NamespaceCleaner: void <init>(com.atlassian.plugin.parsers.XmlDescriptorParserUtils$1)> ==> <com.atlassian.plugin.parsers.XmlDescriptorParserUtils$NamespaceCleaner: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.descriptors.AbstractNoOpModuleDescriptor$1: void <init>()>() in <com.atlassian.plugin.descriptors.AbstractNoOpModuleDescriptor: void <init>()> ==> <com.atlassian.plugin.descriptors.AbstractNoOpModuleDescriptor$1: void <init>()>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void <init>(com.atlassian.plugin.module.ModuleFactory)>($r1) in <com.atlassian.plugin.descriptors.AbstractNoOpModuleDescriptor: void <init>()> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void <init>(com.atlassian.plugin.module.ModuleFactory)>
VIRTUAL edge: virtualinvoke r3.<com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void provideValidationRules(com.atlassian.plugin.util.validation.ValidationPattern)>(r2) in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void validate(org.dom4j.Element)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void provideValidationRules(com.atlassian.plugin.util.validation.ValidationPattern)>
VIRTUAL edge: virtualinvoke r2.<com.atlassian.plugin.util.validation.ValidationPattern: void evaluate(org.dom4j.Node)>($r4) in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void validate(org.dom4j.Element)> ==> <com.atlassian.plugin.util.validation.ValidationPattern: void evaluate(org.dom4j.Node)>
STATIC edge: $r2 = staticinvoke <com.atlassian.plugin.util.validation.ValidationPattern: com.atlassian.plugin.util.validation.ValidationPattern$RuleTest test(java.lang.String)>("@key") in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void provideValidationRules(com.atlassian.plugin.util.validation.ValidationPattern)> ==> <com.atlassian.plugin.util.validation.ValidationPattern: com.atlassian.plugin.util.validation.ValidationPattern$RuleTest test(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.String buildCompleteKey(com.atlassian.plugin.Plugin,java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.String buildCompleteKey(com.atlassian.plugin.Plugin,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
INTERFACE edge: $r2 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.String buildCompleteKey(com.atlassian.plugin.Plugin,java.lang.String)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r2 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.String buildCompleteKey(com.atlassian.plugin.Plugin,java.lang.String)> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":") in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.String buildCompleteKey(com.atlassian.plugin.Plugin,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5) in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.String buildCompleteKey(com.atlassian.plugin.Plugin,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.String buildCompleteKey(com.atlassian.plugin.Plugin,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<com.atlassian.plugin.module.PrefixDelegatingModuleFactory: java.lang.Class guessModuleClass(java.lang.String,com.atlassian.plugin.ModuleDescriptor)>($r8, r0) in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void loadClass(com.atlassian.plugin.Plugin,java.lang.String)> ==> <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: java.lang.Class guessModuleClass(java.lang.String,com.atlassian.plugin.ModuleDescriptor)>
SPECIAL edge: $r2 = specialinvoke r0.<com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.Class getModuleTypeClass()>() in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void loadClass(com.atlassian.plugin.Plugin,java.lang.String)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.Class getModuleTypeClass()>
SPECIAL edge: specialinvoke $r17.<java.lang.IllegalStateException: void <init>(java.lang.String)>("The module class must be defined in a concrete instance of ModuleDescriptor and not as another generic type.") in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void loadClass(com.atlassian.plugin.Plugin,java.lang.String)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("The module class cannot be determined, likely because it needs a concrete module type defined in the generic type it passes to AbstractModuleDescriptor") in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void loadClass(com.atlassian.plugin.Plugin,java.lang.String)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
CLINIT edge: $r7 = <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: org.slf4j.Logger log> in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.Class getModuleTypeClass()> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.atlassian.plugin.util.ClassUtils: java.util.List getTypeArguments(java.lang.Class,java.lang.Class)>(class "Lcom/atlassian/plugin/descriptors/AbstractModuleDescriptor;", $r1) in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.Class getModuleTypeClass()> ==> <com.atlassian.plugin.util.ClassUtils: java.util.List getTypeArguments(java.lang.Class,java.lang.Class)>
CLINIT edge: <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: org.slf4j.Logger log> = $r0 in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void <clinit>()> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void <clinit>()>
STATIC edge: $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/atlassian/plugin/descriptors/AbstractModuleDescriptor;") in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void <clinit>()> ==> <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.util.validation.ValidationPattern: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.ArrayList: void <init>()>() in <com.atlassian.plugin.util.validation.ValidationPattern: void <init>()> ==> <java.util.ArrayList: void <init>()>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.util.validation.ValidationPattern$Rule: void <init>(java.lang.String,com.atlassian.plugin.util.validation.ValidationPattern$RuleTest[])>(r1, r2) in <com.atlassian.plugin.util.validation.ValidationPattern$Rule: void <init>(java.lang.String,com.atlassian.plugin.util.validation.ValidationPattern$RuleTest[],com.atlassian.plugin.util.validation.ValidationPattern$1)> ==> <com.atlassian.plugin.util.validation.ValidationPattern$Rule: void <init>(java.lang.String,com.atlassian.plugin.util.validation.ValidationPattern$RuleTest[])>
STATIC edge: $r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1) in <com.atlassian.plugin.util.validation.ValidationPattern$Rule: void <init>(java.lang.String,com.atlassian.plugin.util.validation.ValidationPattern$RuleTest[])> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
STATIC edge: $r5 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r4) in <com.atlassian.plugin.util.validation.ValidationPattern$Rule: void <init>(java.lang.String,com.atlassian.plugin.util.validation.ValidationPattern$RuleTest[])> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.util.validation.ValidationPattern$RuleTest: void <init>(java.lang.String)>(r1) in <com.atlassian.plugin.util.validation.ValidationPattern$RuleTest: void <init>(java.lang.String,com.atlassian.plugin.util.validation.ValidationPattern$1)> ==> <com.atlassian.plugin.util.validation.ValidationPattern$RuleTest: void <init>(java.lang.String)>
STATIC edge: $r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1) in <com.atlassian.plugin.util.validation.ValidationPattern$RuleTest: void <init>(java.lang.String)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
VIRTUAL edge: i0 = virtualinvoke r2.<java.lang.String: int indexOf(int)>(58) in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: com.atlassian.plugin.module.PrefixDelegatingModuleFactory$ModuleReference getBeanReference(java.lang.String)> ==> <java.lang.String: int indexOf(int)>
VIRTUAL edge: r3 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, i0) in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: com.atlassian.plugin.module.PrefixDelegatingModuleFactory$ModuleReference getBeanReference(java.lang.String)> ==> <java.lang.String: java.lang.String substring(int,int)>
VIRTUAL edge: r2 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>($i1) in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: com.atlassian.plugin.module.PrefixDelegatingModuleFactory$ModuleReference getBeanReference(java.lang.String)> ==> <java.lang.String: java.lang.String substring(int)>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.module.PrefixDelegatingModuleFactory$ModuleReference: void <init>(java.lang.String,java.lang.String)>(r3, r2) in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: com.atlassian.plugin.module.PrefixDelegatingModuleFactory$ModuleReference getBeanReference(java.lang.String)> ==> <com.atlassian.plugin.module.PrefixDelegatingModuleFactory$ModuleReference: void <init>(java.lang.String,java.lang.String)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2) in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: com.atlassian.plugin.module.ModuleFactory getModuleFactoryForPrefix(com.atlassian.plugin.module.PrefixDelegatingModuleFactory$ModuleReference,com.atlassian.plugin.ModuleDescriptor)> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2) in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: com.atlassian.plugin.module.ModuleFactory getModuleFactoryForPrefix(com.atlassian.plugin.module.PrefixDelegatingModuleFactory$ModuleReference,com.atlassian.plugin.ModuleDescriptor)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2) in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: com.atlassian.plugin.module.ModuleFactory getModuleFactoryForPrefix(com.atlassian.plugin.module.PrefixDelegatingModuleFactory$ModuleReference,com.atlassian.plugin.ModuleDescriptor)> ==> <java.util.TreeMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2) in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: com.atlassian.plugin.module.ModuleFactory getModuleFactoryForPrefix(com.atlassian.plugin.module.PrefixDelegatingModuleFactory$ModuleReference,com.atlassian.plugin.ModuleDescriptor)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2) in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: com.atlassian.plugin.module.ModuleFactory getModuleFactoryForPrefix(com.atlassian.plugin.module.PrefixDelegatingModuleFactory$ModuleReference,com.atlassian.plugin.ModuleDescriptor)> ==> <java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>
INTERFACE edge: r6 = interfaceinvoke r5.<com.atlassian.plugin.ModuleDescriptor: com.atlassian.plugin.Plugin getPlugin()>() in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: com.atlassian.plugin.module.ModuleFactory getModuleFactoryForPrefix(com.atlassian.plugin.module.PrefixDelegatingModuleFactory$ModuleReference,com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.ModuleDescriptor: com.atlassian.plugin.Plugin getPlugin()>
INTERFACE edge: r6 = interfaceinvoke r5.<com.atlassian.plugin.ModuleDescriptor: com.atlassian.plugin.Plugin getPlugin()>() in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: com.atlassian.plugin.module.ModuleFactory getModuleFactoryForPrefix(com.atlassian.plugin.module.PrefixDelegatingModuleFactory$ModuleReference,com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: com.atlassian.plugin.Plugin getPlugin()>
INTERFACE edge: r10 = interfaceinvoke r9.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: com.atlassian.plugin.module.ModuleFactory getModuleFactoryForPrefix(com.atlassian.plugin.module.PrefixDelegatingModuleFactory$ModuleReference,com.atlassian.plugin.ModuleDescriptor)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r10 = interfaceinvoke r9.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: com.atlassian.plugin.module.ModuleFactory getModuleFactoryForPrefix(com.atlassian.plugin.module.PrefixDelegatingModuleFactory$ModuleReference,com.atlassian.plugin.ModuleDescriptor)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r10 = interfaceinvoke r9.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: com.atlassian.plugin.module.ModuleFactory getModuleFactoryForPrefix(com.atlassian.plugin.module.PrefixDelegatingModuleFactory$ModuleReference,com.atlassian.plugin.ModuleDescriptor)> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r10 = interfaceinvoke r9.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: com.atlassian.plugin.module.ModuleFactory getModuleFactoryForPrefix(com.atlassian.plugin.module.PrefixDelegatingModuleFactory$ModuleReference,com.atlassian.plugin.ModuleDescriptor)> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r10 = interfaceinvoke r9.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: com.atlassian.plugin.module.ModuleFactory getModuleFactoryForPrefix(com.atlassian.plugin.module.PrefixDelegatingModuleFactory$ModuleReference,com.atlassian.plugin.ModuleDescriptor)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: r10 = interfaceinvoke r9.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: com.atlassian.plugin.module.ModuleFactory getModuleFactoryForPrefix(com.atlassian.plugin.module.PrefixDelegatingModuleFactory$ModuleReference,com.atlassian.plugin.ModuleDescriptor)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $r14 = interfaceinvoke r12.<com.atlassian.plugin.module.PrefixModuleFactory: java.lang.String getPrefix()>() in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: com.atlassian.plugin.module.ModuleFactory getModuleFactoryForPrefix(com.atlassian.plugin.module.PrefixDelegatingModuleFactory$ModuleReference,com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.module.ClassPrefixModuleFactory: java.lang.String getPrefix()>
VIRTUAL edge: $z2 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>($r14) in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory: com.atlassian.plugin.module.ModuleFactory getModuleFactoryForPrefix(com.atlassian.plugin.module.PrefixDelegatingModuleFactory$ModuleReference,com.atlassian.plugin.ModuleDescriptor)> ==> <java.lang.String: boolean equals(java.lang.Object)>
INTERFACE edge: $r1 = interfaceinvoke r0.<com.atlassian.plugin.ModuleDescriptor: com.atlassian.plugin.Plugin getPlugin()>() in <com.atlassian.plugin.module.ClassPrefixModuleFactory: java.lang.Class getModuleClass(java.lang.String,com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.ModuleDescriptor: com.atlassian.plugin.Plugin getPlugin()>
INTERFACE edge: $r1 = interfaceinvoke r0.<com.atlassian.plugin.ModuleDescriptor: com.atlassian.plugin.Plugin getPlugin()>() in <com.atlassian.plugin.module.ClassPrefixModuleFactory: java.lang.Class getModuleClass(java.lang.String,com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: com.atlassian.plugin.Plugin getPlugin()>
INTERFACE edge: $r7 = interfaceinvoke r0.<com.atlassian.plugin.ModuleDescriptor: java.lang.String getPluginKey()>() in <com.atlassian.plugin.module.ClassPrefixModuleFactory: java.lang.Class getModuleClass(java.lang.String,com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.ModuleDescriptor: java.lang.String getPluginKey()>
INTERFACE edge: $r7 = interfaceinvoke r0.<com.atlassian.plugin.ModuleDescriptor: java.lang.String getPluginKey()>() in <com.atlassian.plugin.module.ClassPrefixModuleFactory: java.lang.Class getModuleClass(java.lang.String,com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.String getPluginKey()>
INTERFACE edge: $r8 = interfaceinvoke r0.<com.atlassian.plugin.ModuleDescriptor: java.lang.String getKey()>() in <com.atlassian.plugin.module.ClassPrefixModuleFactory: java.lang.Class getModuleClass(java.lang.String,com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.ModuleDescriptor: java.lang.String getKey()>
INTERFACE edge: $r8 = interfaceinvoke r0.<com.atlassian.plugin.ModuleDescriptor: java.lang.String getKey()>() in <com.atlassian.plugin.module.ClassPrefixModuleFactory: java.lang.Class getModuleClass(java.lang.String,com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.String getKey()>
INTERFACE edge: $r3 = interfaceinvoke $r1.<com.atlassian.plugin.Plugin: java.lang.Class loadClass(java.lang.String,java.lang.Class)>(r2, null) in <com.atlassian.plugin.module.ClassPrefixModuleFactory: java.lang.Class getModuleClass(java.lang.String,com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.impl.DefaultDynamicPlugin: java.lang.Class loadClass(java.lang.String,java.lang.Class)>
INTERFACE edge: $r3 = interfaceinvoke $r1.<com.atlassian.plugin.Plugin: java.lang.Class loadClass(java.lang.String,java.lang.Class)>(r2, null) in <com.atlassian.plugin.module.ClassPrefixModuleFactory: java.lang.Class getModuleClass(java.lang.String,com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.impl.XmlDynamicPlugin: java.lang.Class loadClass(java.lang.String,java.lang.Class)>
INTERFACE edge: $r3 = interfaceinvoke $r1.<com.atlassian.plugin.Plugin: java.lang.Class loadClass(java.lang.String,java.lang.Class)>(r2, null) in <com.atlassian.plugin.module.ClassPrefixModuleFactory: java.lang.Class getModuleClass(java.lang.String,com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.impl.StaticPlugin: java.lang.Class loadClass(java.lang.String,java.lang.Class)>
INTERFACE edge: $r3 = interfaceinvoke $r1.<com.atlassian.plugin.Plugin: java.lang.Class loadClass(java.lang.String,java.lang.Class)>(r2, null) in <com.atlassian.plugin.module.ClassPrefixModuleFactory: java.lang.Class getModuleClass(java.lang.String,com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.Plugin: java.lang.Class loadClass(java.lang.String,java.lang.Class)>
SPECIAL edge: $r10 = specialinvoke r9.<com.atlassian.plugin.module.ClassPrefixModuleFactory: java.lang.String createErrorMsg(java.lang.String)>(r2) in <com.atlassian.plugin.module.ClassPrefixModuleFactory: java.lang.Class getModuleClass(java.lang.String,com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.module.ClassPrefixModuleFactory: java.lang.String createErrorMsg(java.lang.String)>
SPECIAL edge: specialinvoke $r11.<com.atlassian.plugin.module.ModuleClassNotFoundException: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Exception,java.lang.String)>(r2, $r7, $r8, $r4, $r10) in <com.atlassian.plugin.module.ClassPrefixModuleFactory: java.lang.Class getModuleClass(java.lang.String,com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.module.ModuleClassNotFoundException: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Exception,java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.util.VersionRange$OrVersionRange: void <init>(com.atlassian.plugin.util.VersionRange,com.atlassian.plugin.util.VersionRange)>(r1, r2) in <com.atlassian.plugin.util.VersionRange$OrVersionRange: void <init>(com.atlassian.plugin.util.VersionRange,com.atlassian.plugin.util.VersionRange,com.atlassian.plugin.util.VersionRange$1)> ==> <com.atlassian.plugin.util.VersionRange$OrVersionRange: void <init>(com.atlassian.plugin.util.VersionRange,com.atlassian.plugin.util.VersionRange)>
STATIC edge: $r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1) in <com.atlassian.plugin.util.VersionRange$OrVersionRange: void <init>(com.atlassian.plugin.util.VersionRange,com.atlassian.plugin.util.VersionRange)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
STATIC edge: $r5 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r4) in <com.atlassian.plugin.util.VersionRange$OrVersionRange: void <init>(com.atlassian.plugin.util.VersionRange,com.atlassian.plugin.util.VersionRange)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.util.VersionRange$EmptyVersionRange: void <init>()>() in <com.atlassian.plugin.util.VersionRange$EmptyVersionRange: void <init>(com.atlassian.plugin.util.VersionRange$1)> ==> <com.atlassian.plugin.util.VersionRange$EmptyVersionRange: void <init>()>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.util.VersionRange$AllVersionRange: void <init>()>() in <com.atlassian.plugin.util.VersionRange$AllVersionRange: void <init>(com.atlassian.plugin.util.VersionRange$1)> ==> <com.atlassian.plugin.util.VersionRange$AllVersionRange: void <init>()>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.util.VersionRange$SingleVersionRange: void <init>(java.lang.String)>(r1) in <com.atlassian.plugin.util.VersionRange$SingleVersionRange: void <init>(java.lang.String,com.atlassian.plugin.util.VersionRange$1)> ==> <com.atlassian.plugin.util.VersionRange$SingleVersionRange: void <init>(java.lang.String)>
STATIC edge: $r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1) in <com.atlassian.plugin.util.VersionRange$SingleVersionRange: void <init>(java.lang.String)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
SPECIAL edge: $r4 = specialinvoke r0.<com.atlassian.plugin.util.VersionRange$ActualVersionRangeBuilder: com.atlassian.plugin.util.VersionRange$ActualVersionRange newActualRange(java.lang.String,boolean)>(r2, z0) in <com.atlassian.plugin.util.VersionRange$ActualVersionRangeBuilder: com.atlassian.plugin.util.VersionRange newRange(java.lang.String,boolean)> ==> <com.atlassian.plugin.util.VersionRange$ActualVersionRangeBuilder: com.atlassian.plugin.util.VersionRange$ActualVersionRange newActualRange(java.lang.String,boolean)>
SPECIAL edge: $r3 = specialinvoke r0.<com.atlassian.plugin.util.VersionRange$ActualVersionRangeBuilder: com.atlassian.plugin.util.VersionRange$LeftUnboundedVersionRange newLeftUnboundedRange(java.lang.String,boolean)>(r2, z0) in <com.atlassian.plugin.util.VersionRange$ActualVersionRangeBuilder: com.atlassian.plugin.util.VersionRange newRange(java.lang.String,boolean)> ==> <com.atlassian.plugin.util.VersionRange$ActualVersionRangeBuilder: com.atlassian.plugin.util.VersionRange$LeftUnboundedVersionRange newLeftUnboundedRange(java.lang.String,boolean)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.util.VersionRange$RightUnboundedVersionRange: void <init>(boolean,java.lang.String)>(z0, r1) in <com.atlassian.plugin.util.VersionRange$RightUnboundedVersionRange: void <init>(boolean,java.lang.String,com.atlassian.plugin.util.VersionRange$1)> ==> <com.atlassian.plugin.util.VersionRange$RightUnboundedVersionRange: void <init>(boolean,java.lang.String)>
STATIC edge: $r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1) in <com.atlassian.plugin.util.VersionRange$RightUnboundedVersionRange: void <init>(boolean,java.lang.String)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<io.atlassian.util.concurrent.LazyReference: void <init>()>() in <com.atlassian.plugin.parsers.SafeModeCommandLineArguments$1: void <init>(com.atlassian.plugin.parsers.SafeModeCommandLineArguments)> ==> <io.atlassian.util.concurrent.LazyReference: void <init>()>
SPECIAL edge: specialinvoke r0.<io.atlassian.util.concurrent.LazyReference: void <init>()>() in <com.atlassian.plugin.parsers.SafeModeCommandLineArguments$2: void <init>(com.atlassian.plugin.parsers.SafeModeCommandLineArguments)> ==> <io.atlassian.util.concurrent.LazyReference: void <init>()>
SPECIAL edge: specialinvoke r0.<io.atlassian.util.concurrent.LazyReference: void <init>()>() in <com.atlassian.plugin.parsers.SafeModeCommandLineArguments$3: void <init>(com.atlassian.plugin.parsers.SafeModeCommandLineArguments)> ==> <io.atlassian.util.concurrent.LazyReference: void <init>()>
SPECIAL edge: specialinvoke $r11.<java.util.jar.JarFile: void <init>(java.io.File)>($r2) in <com.atlassian.plugin.JarPluginArtifact: java.util.jar.JarFile open()> ==> <java.util.jar.JarFile: void <init>(java.io.File)>
SPECIAL edge: specialinvoke $r12.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.JarPluginArtifact: java.util.jar.JarFile open()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot open JAR file: ") in <com.atlassian.plugin.JarPluginArtifact: java.util.jar.JarFile open()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8) in <com.atlassian.plugin.JarPluginArtifact: java.util.jar.JarFile open()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.JarPluginArtifact: java.util.jar.JarFile open()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r13.<com.atlassian.plugin.PluginParseException: void <init>(java.lang.String,java.lang.Throwable)>($r10, $r3) in <com.atlassian.plugin.JarPluginArtifact: java.util.jar.JarFile open()> ==> <com.atlassian.plugin.PluginParseException: void <init>(java.lang.String,java.lang.Throwable)>
VIRTUAL edge: virtualinvoke r0.<java.util.jar.JarFile: void close()>() in <com.atlassian.plugin.JarPluginArtifact: void closeJarQuietly(java.util.jar.JarFile)> ==> <java.util.jar.JarFile: void close()>
INTERFACE edge: interfaceinvoke $r5.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Exception closing jar file {}.", $r4, $r1) in <com.atlassian.plugin.JarPluginArtifact: void closeJarQuietly(java.util.jar.JarFile)> ==> <org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>(r3) in <com.atlassian.plugin.JarPluginArtifact$1: void <init>(com.atlassian.plugin.JarPluginArtifact,java.io.InputStream,java.util.jar.JarFile)> ==> <java.io.BufferedInputStream: void <init>(java.io.InputStream)>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.util.jar.JarFile: java.util.jar.Manifest getManifest()>() in <com.atlassian.plugin.JarPluginArtifact: java.util.jar.Manifest getManifest(java.util.jar.JarFile)> ==> <java.util.jar.JarFile: java.util.jar.Manifest getManifest()>
SPECIAL edge: specialinvoke $r11.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.JarPluginArtifact: java.util.jar.Manifest getManifest(java.util.jar.JarFile)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot get manifest for JAR file: ") in <com.atlassian.plugin.JarPluginArtifact: java.util.jar.Manifest getManifest(java.util.jar.JarFile)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8) in <com.atlassian.plugin.JarPluginArtifact: java.util.jar.Manifest getManifest(java.util.jar.JarFile)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.JarPluginArtifact: java.util.jar.Manifest getManifest(java.util.jar.JarFile)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r12.<com.atlassian.plugin.PluginParseException: void <init>(java.lang.String,java.lang.Throwable)>($r10, $r2) in <com.atlassian.plugin.JarPluginArtifact: java.util.jar.Manifest getManifest(java.util.jar.JarFile)> ==> <com.atlassian.plugin.PluginParseException: void <init>(java.lang.String,java.lang.Throwable)>
SPECIAL edge: $z0 = specialinvoke r0.<com.atlassian.plugin.JarPluginArtifact: boolean hasManifestEntry(java.util.jar.Manifest,java.lang.String)>(r1, "Bundle-Activator") in <com.atlassian.plugin.JarPluginArtifact: boolean hasBundleActivator(java.util.jar.Manifest)> ==> <com.atlassian.plugin.JarPluginArtifact: boolean hasManifestEntry(java.util.jar.Manifest,java.lang.String)>
SPECIAL edge: $z0 = specialinvoke r0.<com.atlassian.plugin.JarPluginArtifact: boolean hasManifestEntry(java.util.jar.Manifest,java.lang.String)>(r1, "Spring-Context") in <com.atlassian.plugin.JarPluginArtifact: boolean hasSpringContext(java.util.jar.Manifest)> ==> <com.atlassian.plugin.JarPluginArtifact: boolean hasManifestEntry(java.util.jar.Manifest,java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.util.zip.ZipEntry: java.lang.String getName()>() in <com.atlassian.plugin.JarPluginArtifact: boolean isJavaClass(java.util.zip.ZipEntry)> ==> <java.util.jar.JarEntry: java.lang.String getName()>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.util.zip.ZipEntry: java.lang.String getName()>() in <com.atlassian.plugin.JarPluginArtifact: boolean isJavaClass(java.util.zip.ZipEntry)> ==> <java.util.zip.ZipEntry: java.lang.String getName()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.String: boolean endsWith(java.lang.String)>(".class") in <com.atlassian.plugin.JarPluginArtifact: boolean isJavaClass(java.util.zip.ZipEntry)> ==> <java.lang.String: boolean endsWith(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.util.zip.ZipEntry: java.lang.String getName()>() in <com.atlassian.plugin.JarPluginArtifact: boolean isJavaLibrary(java.util.zip.ZipEntry)> ==> <java.util.jar.JarEntry: java.lang.String getName()>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.util.zip.ZipEntry: java.lang.String getName()>() in <com.atlassian.plugin.JarPluginArtifact: boolean isJavaLibrary(java.util.zip.ZipEntry)> ==> <java.util.zip.ZipEntry: java.lang.String getName()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.String: boolean endsWith(java.lang.String)>(".jar") in <com.atlassian.plugin.JarPluginArtifact: boolean isJavaLibrary(java.util.zip.ZipEntry)> ==> <java.lang.String: boolean endsWith(java.lang.String)>
VIRTUAL edge: r2 = virtualinvoke $r1.<com.atlassian.plugin.parsers.PluginDescriptorReader: com.atlassian.plugin.parsers.PluginInformationReader getPluginInformationReader()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.PluginInformation createPluginInformation()> ==> <com.atlassian.plugin.parsers.PluginDescriptorReader: com.atlassian.plugin.parsers.PluginInformationReader getPluginInformationReader()>
SPECIAL edge: specialinvoke $r79.<com.atlassian.plugin.PluginInformation: void <init>()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.PluginInformation createPluginInformation()> ==> <com.atlassian.plugin.PluginInformation: void <init>()>
VIRTUAL edge: $r5 = virtualinvoke r2.<com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional getDescription()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.PluginInformation createPluginInformation()> ==> <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional getDescription()>
VIRTUAL edge: $r10 = virtualinvoke r2.<com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional getDescriptionKey()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.PluginInformation createPluginInformation()> ==> <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional getDescriptionKey()>
VIRTUAL edge: $r15 = virtualinvoke r2.<com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional getVersion()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.PluginInformation createPluginInformation()> ==> <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional getVersion()>
VIRTUAL edge: $r20 = virtualinvoke r2.<com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional getVendorName()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.PluginInformation createPluginInformation()> ==> <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional getVendorName()>
VIRTUAL edge: $r25 = virtualinvoke r2.<com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional getVendorUrl()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.PluginInformation createPluginInformation()> ==> <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional getVendorUrl()>
VIRTUAL edge: $r30 = virtualinvoke r2.<com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional getScopeKey()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.PluginInformation createPluginInformation()> ==> <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional getScopeKey()>
VIRTUAL edge: $r31 = virtualinvoke r2.<com.atlassian.plugin.parsers.PluginInformationReader: java.util.Map getParameters()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.PluginInformation createPluginInformation()> ==> <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Map getParameters()>
VIRTUAL edge: $r33 = virtualinvoke r2.<com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional getMinJavaVersion()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.PluginInformation createPluginInformation()> ==> <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional getMinJavaVersion()>
VIRTUAL edge: $r38 = virtualinvoke r2.<com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional getStartup()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.PluginInformation createPluginInformation()> ==> <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional getStartup()>
VIRTUAL edge: $r43 = virtualinvoke r2.<com.atlassian.plugin.parsers.PluginInformationReader: java.lang.Iterable getModuleScanFolders()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.PluginInformation createPluginInformation()> ==> <com.atlassian.plugin.parsers.PluginInformationReader: java.lang.Iterable getModuleScanFolders()>
VIRTUAL edge: r74 = virtualinvoke r2.<com.atlassian.plugin.parsers.PluginInformationReader: java.util.Map getPermissions()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.PluginInformation createPluginInformation()> ==> <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Map getPermissions()>
VIRTUAL edge: $z1 = virtualinvoke r2.<com.atlassian.plugin.parsers.PluginInformationReader: boolean hasAllPermissions()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.PluginInformation createPluginInformation()> ==> <com.atlassian.plugin.parsers.PluginInformationReader: boolean hasAllPermissions()>
INTERFACE edge: $r32 = interfaceinvoke $r31.<java.util.Map: java.util.Set entrySet()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.PluginInformation createPluginInformation()> ==> <java.util.HashMap: java.util.Set entrySet()>
INTERFACE edge: $r32 = interfaceinvoke $r31.<java.util.Map: java.util.Set entrySet()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.PluginInformation createPluginInformation()> ==> <java.util.Hashtable: java.util.Set entrySet()>
INTERFACE edge: $r32 = interfaceinvoke $r31.<java.util.Map: java.util.Set entrySet()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.PluginInformation createPluginInformation()> ==> <java.util.TreeMap: java.util.Set entrySet()>
INTERFACE edge: $r32 = interfaceinvoke $r31.<java.util.Map: java.util.Set entrySet()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.PluginInformation createPluginInformation()> ==> <java.util.jar.Attributes: java.util.Set entrySet()>
INTERFACE edge: r72 = interfaceinvoke $r32.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.PluginInformation createPluginInformation()> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r72 = interfaceinvoke $r32.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.PluginInformation createPluginInformation()> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r72 = interfaceinvoke $r32.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.PluginInformation createPluginInformation()> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: $r44 = interfaceinvoke r74.<java.util.Map: java.util.Set entrySet()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.PluginInformation createPluginInformation()> ==> <java.util.HashMap: java.util.Set entrySet()>
INTERFACE edge: $r44 = interfaceinvoke r74.<java.util.Map: java.util.Set entrySet()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.PluginInformation createPluginInformation()> ==> <java.util.Hashtable: java.util.Set entrySet()>
INTERFACE edge: $r44 = interfaceinvoke r74.<java.util.Map: java.util.Set entrySet()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.PluginInformation createPluginInformation()> ==> <java.util.TreeMap: java.util.Set entrySet()>
INTERFACE edge: $r44 = interfaceinvoke r74.<java.util.Map: java.util.Set entrySet()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.PluginInformation createPluginInformation()> ==> <java.util.jar.Attributes: java.util.Set entrySet()>
INTERFACE edge: r45 = interfaceinvoke $r44.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.PluginInformation createPluginInformation()> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r45 = interfaceinvoke $r44.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.PluginInformation createPluginInformation()> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r45 = interfaceinvoke $r44.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.PluginInformation createPluginInformation()> ==> <java.util.TreeSet: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke $r80.<com.atlassian.plugin.PluginPermission: void <init>(java.lang.String,com.atlassian.plugin.InstallationMode)>(r50, $r78) in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.PluginInformation createPluginInformation()> ==> <com.atlassian.plugin.PluginPermission: void <init>(java.lang.String,com.atlassian.plugin.InstallationMode)>
VIRTUAL edge: virtualinvoke r75.<com.google.common.collect.ImmutableSet$Builder: com.google.common.collect.ImmutableSet$Builder add(java.lang.Object)>($r80) in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.PluginInformation createPluginInformation()> ==> <com.google.common.collect.ImmutableSet$Builder: com.google.common.collect.ImmutableSet$Builder add(java.lang.Object)>
INTERFACE edge: $r6 = interfaceinvoke r2.<com.atlassian.plugin.Plugin: java.lang.String getName()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.ModuleDescriptor createModuleDescriptor(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getName()>
INTERFACE edge: interfaceinvoke $r5.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("The module \'{}\' in plugin \'{}\' is in the list of excluded module descriptors, so not enabling.", r1, $r6) in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.ModuleDescriptor createModuleDescriptor(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<com.atlassian.plugin.ModuleDescriptor: void init(com.atlassian.plugin.Plugin,org.dom4j.Element)>(r2, r0) in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.ModuleDescriptor createModuleDescriptor(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.ModuleDescriptor: void init(com.atlassian.plugin.Plugin,org.dom4j.Element)>
INTERFACE edge: interfaceinvoke r4.<com.atlassian.plugin.ModuleDescriptor: void init(com.atlassian.plugin.Plugin,org.dom4j.Element)>(r2, r0) in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.ModuleDescriptor createModuleDescriptor(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void init(com.atlassian.plugin.Plugin,org.dom4j.Element)>
INTERFACE edge: interfaceinvoke r4.<com.atlassian.plugin.ModuleDescriptor: void init(com.atlassian.plugin.Plugin,org.dom4j.Element)>(r2, r0) in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.ModuleDescriptor createModuleDescriptor(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.eventlistener.descriptors.EventListenerModuleDescriptor: void init(com.atlassian.plugin.Plugin,org.dom4j.Element)>
INTERFACE edge: interfaceinvoke $r10.<org.slf4j.Logger: void error(java.lang.String,java.lang.Object)>("There were problems loading the module \'{}\'. The module and its plugin have been disabled.", r1) in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.ModuleDescriptor createModuleDescriptor(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <org.slf4j.Logger: void error(java.lang.String,java.lang.Object)>
VIRTUAL edge: $r12 = virtualinvoke r9.<com.atlassian.plugin.descriptors.UnloadableModuleDescriptor: java.lang.String getErrorText()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.ModuleDescriptor createModuleDescriptor(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.descriptors.AbstractNoOpModuleDescriptor: java.lang.String getErrorText()>
INTERFACE edge: interfaceinvoke $r11.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>($r12, $r7) in <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.ModuleDescriptor createModuleDescriptor(com.atlassian.plugin.Plugin,org.dom4j.Element,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.parsers.PluginInformationReader: void <init>(org.dom4j.Element,java.util.Set,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: $r1 = specialinvoke r0.<com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional childElement(java.lang.String)>("description") in <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional getDescriptionElement()> ==> <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional childElement(java.lang.String)>
SPECIAL edge: $r1 = specialinvoke r0.<com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional childElement(java.lang.String)>("vendor") in <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional getVendorElement()> ==> <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional childElement(java.lang.String)>
SPECIAL edge: $r1 = specialinvoke r0.<com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional childElement(java.lang.String)>("scope") in <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional getScopeElement()> ==> <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional childElement(java.lang.String)>
SPECIAL edge: $r1 = specialinvoke r0.<com.atlassian.plugin.parsers.PluginInformationReader: java.util.stream.Stream childElements(java.lang.String)>("param") in <com.atlassian.plugin.parsers.PluginInformationReader: java.util.stream.Stream getParamElements()> ==> <com.atlassian.plugin.parsers.PluginInformationReader: java.util.stream.Stream childElements(java.lang.String)>
INTERFACE edge: $r3 = interfaceinvoke $r1.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($r2) in <com.atlassian.plugin.parsers.PluginInformationReader: java.util.stream.Stream getParamElements()> ==> <java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>
STATIC edge: $r5 = staticinvoke <java.util.stream.Stream: java.util.stream.Stream empty()>() in <com.atlassian.plugin.parsers.PluginInformationReader: java.util.stream.Stream childElements(java.lang.String)> ==> <java.util.stream.Stream: java.util.stream.Stream empty()>
SPECIAL edge: $r1 = specialinvoke r0.<com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional childElement(java.lang.String)>("application-version") in <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional getApplicationVersionElement()> ==> <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional childElement(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.parsers.PluginInformationReader$GetAttributeFunction: void <init>(java.lang.String)>(r1) in <com.atlassian.plugin.parsers.PluginInformationReader$GetAttributeFunction: void <init>(java.lang.String,com.atlassian.plugin.parsers.PluginInformationReader$1)> ==> <com.atlassian.plugin.parsers.PluginInformationReader$GetAttributeFunction: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.parsers.PluginInformationReader$ParseAttributeValueAsFloatFunction: void <init>()>() in <com.atlassian.plugin.parsers.PluginInformationReader$ParseAttributeValueAsFloatFunction: void <init>(com.atlassian.plugin.parsers.PluginInformationReader$1)> ==> <com.atlassian.plugin.parsers.PluginInformationReader$ParseAttributeValueAsFloatFunction: void <init>()>
SPECIAL edge: $r1 = specialinvoke r0.<com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional childElement(java.lang.String)>("permissions") in <com.atlassian.plugin.parsers.PluginInformationReader: java.util.stream.Stream getPermissionElements()> ==> <com.atlassian.plugin.parsers.PluginInformationReader: java.util.Optional childElement(java.lang.String)>
SPECIAL edge: specialinvoke $r5.<com.atlassian.plugin.parsers.PluginInformationReader$ElementWithForApplicationsPredicate: void <init>(java.util.Set,com.atlassian.plugin.parsers.PluginInformationReader$1)>($r6, null) in <com.atlassian.plugin.parsers.PluginInformationReader: java.util.stream.Stream getPermissionElements()> ==> <com.atlassian.plugin.parsers.PluginInformationReader$ElementWithForApplicationsPredicate: void <init>(java.util.Set,com.atlassian.plugin.parsers.PluginInformationReader$1)>
INTERFACE edge: $r7 = interfaceinvoke $r4.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($r5) in <com.atlassian.plugin.parsers.PluginInformationReader: java.util.stream.Stream getPermissionElements()> ==> <java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>
INTERFACE edge: $r9 = interfaceinvoke $r7.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($r8) in <com.atlassian.plugin.parsers.PluginInformationReader: java.util.stream.Stream getPermissionElements()> ==> <java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>
INTERFACE edge: $z0 = interfaceinvoke $r0.<org.slf4j.Logger: boolean isDebugEnabled()>() in <com.atlassian.plugin.impl.AbstractPlugin: void setPluginState(com.atlassian.plugin.PluginState)> ==> <org.slf4j.Logger: boolean isDebugEnabled()>
VIRTUAL edge: $r6 = virtualinvoke r1.<com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>() in <com.atlassian.plugin.impl.AbstractPlugin: void setPluginState(com.atlassian.plugin.PluginState)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
VIRTUAL edge: $r7 = virtualinvoke r1.<com.atlassian.plugin.impl.AbstractPlugin: com.atlassian.plugin.PluginState getPluginState()>() in <com.atlassian.plugin.impl.AbstractPlugin: void setPluginState(com.atlassian.plugin.PluginState)> ==> <com.atlassian.plugin.impl.AbstractPlugin: com.atlassian.plugin.PluginState getPluginState()>
SPECIAL edge: specialinvoke r1.<com.atlassian.plugin.impl.AbstractPlugin: void updateEnableTimes(com.atlassian.plugin.PluginState)>(r2) in <com.atlassian.plugin.impl.AbstractPlugin: void setPluginState(com.atlassian.plugin.PluginState)> ==> <com.atlassian.plugin.impl.AbstractPlugin: void updateEnableTimes(com.atlassian.plugin.PluginState)>
VIRTUAL edge: virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(r2) in <com.atlassian.plugin.impl.AbstractPlugin: void setPluginState(com.atlassian.plugin.PluginState)> ==> <java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>
VIRTUAL edge: r1 = virtualinvoke r0.<com.atlassian.plugin.impl.AbstractPlugin: com.atlassian.plugin.InstallationMode getInstallationMode()>() in <com.atlassian.plugin.impl.AbstractPlugin: java.lang.Iterable getPermissionsForCurrentInstallationMode()> ==> <com.atlassian.plugin.impl.AbstractPlugin: com.atlassian.plugin.InstallationMode getInstallationMode()>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.atlassian.plugin.impl.AbstractPlugin: com.atlassian.plugin.PluginInformation getPluginInformation()>() in <com.atlassian.plugin.impl.AbstractPlugin: java.lang.Iterable getPermissionsForCurrentInstallationMode()> ==> <com.atlassian.plugin.impl.AbstractPlugin: com.atlassian.plugin.PluginInformation getPluginInformation()>
INTERFACE edge: $r6 = interfaceinvoke $r4.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($r5) in <com.atlassian.plugin.impl.AbstractPlugin: java.lang.Iterable getPermissionsForCurrentInstallationMode()> ==> <java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>
INTERFACE edge: $r8 = interfaceinvoke $r6.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r7) in <com.atlassian.plugin.impl.AbstractPlugin: java.lang.Iterable getPermissionsForCurrentInstallationMode()> ==> <java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>() in <com.atlassian.plugin.impl.AbstractPlugin: void installInternal()> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: interfaceinvoke $r1.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Actually installing plugin \'{}\'.", $r2) in <com.atlassian.plugin.impl.AbstractPlugin: void installInternal()> ==> <org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r1.<com.atlassian.plugin.classloader.PluginClassLoader: void close()>() in <com.atlassian.plugin.impl.DefaultDynamicPlugin: void uninstallInternal()> ==> <com.atlassian.plugin.classloader.PluginClassLoader: void close()>
SPECIAL edge: specialinvoke $r2.<com.atlassian.plugin.PluginException: void <init>(java.lang.String)>("Static plugins cannot be uninstalled") in <com.atlassian.plugin.impl.StaticPlugin: void uninstallInternal()> ==> <com.atlassian.plugin.PluginException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.impl.StaticPlugin: void uninstallInternal()>() in <com.atlassian.plugin.impl.UnloadablePlugin: void uninstallInternal()> ==> <com.atlassian.plugin.impl.StaticPlugin: void uninstallInternal()>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1) in <com.atlassian.plugin.impl.AbstractPlugin: void removeModuleDescriptor(java.lang.String)> ==> <java.util.HashMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1) in <com.atlassian.plugin.impl.AbstractPlugin: void removeModuleDescriptor(java.lang.String)> ==> <java.util.Hashtable: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1) in <com.atlassian.plugin.impl.AbstractPlugin: void removeModuleDescriptor(java.lang.String)> ==> <java.util.TreeMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1) in <com.atlassian.plugin.impl.AbstractPlugin: void removeModuleDescriptor(java.lang.String)> ==> <java.util.jar.Attributes: java.lang.Object remove(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.util.ModuleRestricts$ModuleRestrict: void <init>(java.lang.String,com.atlassian.plugin.InstallationMode,com.atlassian.plugin.util.VersionRange)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $i0 = interfaceinvoke $r0.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r3, r2) in <com.atlassian.plugin.util.VersionRange$SingleVersionRange: boolean isInRange(java.lang.String)> ==> <com.atlassian.plugin.util.VersionStringComparator$VersionStringComponentComparator: int compare(java.lang.Object,java.lang.Object)>
INTERFACE edge: $i0 = interfaceinvoke $r0.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r3, r2) in <com.atlassian.plugin.util.VersionRange$SingleVersionRange: boolean isInRange(java.lang.String)> ==> <com.atlassian.plugin.util.VersionStringComparator: int compare(java.lang.Object,java.lang.Object)>
INTERFACE edge: $i0 = interfaceinvoke $r0.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r3, r2) in <com.atlassian.plugin.util.VersionRange$SingleVersionRange: boolean isInRange(java.lang.String)> ==> <com.atlassian.plugin.hostcontainer.SimpleConstructorHostContainer$lambda_findConstructorsLargestFirst_0__131: int compare(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<com.atlassian.plugin.util.VersionRange: boolean isInRange(java.lang.String)>(r1) in <com.atlassian.plugin.util.VersionRange$OrVersionRange: boolean isInRange(java.lang.String)> ==> <com.atlassian.plugin.util.VersionRange$EmptyVersionRange: boolean isInRange(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<com.atlassian.plugin.util.VersionRange: boolean isInRange(java.lang.String)>(r1) in <com.atlassian.plugin.util.VersionRange$OrVersionRange: boolean isInRange(java.lang.String)> ==> <com.atlassian.plugin.util.VersionRange$AllVersionRange: boolean isInRange(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<com.atlassian.plugin.util.VersionRange: boolean isInRange(java.lang.String)>(r1) in <com.atlassian.plugin.util.VersionRange$OrVersionRange: boolean isInRange(java.lang.String)> ==> <com.atlassian.plugin.util.VersionRange$OrVersionRange: boolean isInRange(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<com.atlassian.plugin.util.VersionRange: boolean isInRange(java.lang.String)>(r1) in <com.atlassian.plugin.util.VersionRange$OrVersionRange: boolean isInRange(java.lang.String)> ==> <com.atlassian.plugin.util.VersionRange$LeftUnboundedVersionRange: boolean isInRange(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<com.atlassian.plugin.util.VersionRange: boolean isInRange(java.lang.String)>(r1) in <com.atlassian.plugin.util.VersionRange$OrVersionRange: boolean isInRange(java.lang.String)> ==> <com.atlassian.plugin.util.VersionRange$ActualVersionRange: boolean isInRange(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<com.atlassian.plugin.util.VersionRange: boolean isInRange(java.lang.String)>(r1) in <com.atlassian.plugin.util.VersionRange$OrVersionRange: boolean isInRange(java.lang.String)> ==> <com.atlassian.plugin.util.VersionRange$RightUnboundedVersionRange: boolean isInRange(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<com.atlassian.plugin.util.VersionRange: boolean isInRange(java.lang.String)>(r1) in <com.atlassian.plugin.util.VersionRange$OrVersionRange: boolean isInRange(java.lang.String)> ==> <com.atlassian.plugin.util.VersionRange$SingleVersionRange: boolean isInRange(java.lang.String)>
VIRTUAL edge: $z1 = virtualinvoke $r3.<com.atlassian.plugin.util.VersionRange: boolean isInRange(java.lang.String)>(r1) in <com.atlassian.plugin.util.VersionRange$OrVersionRange: boolean isInRange(java.lang.String)> ==> <com.atlassian.plugin.util.VersionRange$EmptyVersionRange: boolean isInRange(java.lang.String)>
VIRTUAL edge: $z1 = virtualinvoke $r3.<com.atlassian.plugin.util.VersionRange: boolean isInRange(java.lang.String)>(r1) in <com.atlassian.plugin.util.VersionRange$OrVersionRange: boolean isInRange(java.lang.String)> ==> <com.atlassian.plugin.util.VersionRange$AllVersionRange: boolean isInRange(java.lang.String)>
VIRTUAL edge: $z1 = virtualinvoke $r3.<com.atlassian.plugin.util.VersionRange: boolean isInRange(java.lang.String)>(r1) in <com.atlassian.plugin.util.VersionRange$OrVersionRange: boolean isInRange(java.lang.String)> ==> <com.atlassian.plugin.util.VersionRange$OrVersionRange: boolean isInRange(java.lang.String)>
VIRTUAL edge: $z1 = virtualinvoke $r3.<com.atlassian.plugin.util.VersionRange: boolean isInRange(java.lang.String)>(r1) in <com.atlassian.plugin.util.VersionRange$OrVersionRange: boolean isInRange(java.lang.String)> ==> <com.atlassian.plugin.util.VersionRange$LeftUnboundedVersionRange: boolean isInRange(java.lang.String)>
VIRTUAL edge: $z1 = virtualinvoke $r3.<com.atlassian.plugin.util.VersionRange: boolean isInRange(java.lang.String)>(r1) in <com.atlassian.plugin.util.VersionRange$OrVersionRange: boolean isInRange(java.lang.String)> ==> <com.atlassian.plugin.util.VersionRange$ActualVersionRange: boolean isInRange(java.lang.String)>
VIRTUAL edge: $z1 = virtualinvoke $r3.<com.atlassian.plugin.util.VersionRange: boolean isInRange(java.lang.String)>(r1) in <com.atlassian.plugin.util.VersionRange$OrVersionRange: boolean isInRange(java.lang.String)> ==> <com.atlassian.plugin.util.VersionRange$RightUnboundedVersionRange: boolean isInRange(java.lang.String)>
VIRTUAL edge: $z1 = virtualinvoke $r3.<com.atlassian.plugin.util.VersionRange: boolean isInRange(java.lang.String)>(r1) in <com.atlassian.plugin.util.VersionRange$OrVersionRange: boolean isInRange(java.lang.String)> ==> <com.atlassian.plugin.util.VersionRange$SingleVersionRange: boolean isInRange(java.lang.String)>
INTERFACE edge: i0 = interfaceinvoke $r0.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r1, r2) in <com.atlassian.plugin.util.VersionRange: boolean isLowerThan(java.lang.String,java.lang.String,boolean)> ==> <com.atlassian.plugin.util.VersionStringComparator: int compare(java.lang.Object,java.lang.Object)>
INTERFACE edge: i0 = interfaceinvoke $r0.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r1, r2) in <com.atlassian.plugin.util.VersionRange: boolean isLowerThan(java.lang.String,java.lang.String,boolean)> ==> <com.atlassian.plugin.hostcontainer.SimpleConstructorHostContainer$lambda_findConstructorsLargestFirst_0__131: int compare(java.lang.Object,java.lang.Object)>
INTERFACE edge: i0 = interfaceinvoke $r0.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r1, r2) in <com.atlassian.plugin.util.VersionRange: boolean isLowerThan(java.lang.String,java.lang.String,boolean)> ==> <com.atlassian.plugin.util.VersionStringComparator$VersionStringComponentComparator: int compare(java.lang.Object,java.lang.Object)>
INTERFACE edge: i0 = interfaceinvoke $r0.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r1, r2) in <com.atlassian.plugin.util.VersionRange: boolean isGreaterThan(boolean,java.lang.String,java.lang.String)> ==> <com.atlassian.plugin.util.VersionStringComparator: int compare(java.lang.Object,java.lang.Object)>
INTERFACE edge: i0 = interfaceinvoke $r0.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r1, r2) in <com.atlassian.plugin.util.VersionRange: boolean isGreaterThan(boolean,java.lang.String,java.lang.String)> ==> <com.atlassian.plugin.hostcontainer.SimpleConstructorHostContainer$lambda_findConstructorsLargestFirst_0__131: int compare(java.lang.Object,java.lang.Object)>
INTERFACE edge: i0 = interfaceinvoke $r0.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r1, r2) in <com.atlassian.plugin.util.VersionRange: boolean isGreaterThan(boolean,java.lang.String,java.lang.String)> ==> <com.atlassian.plugin.util.VersionStringComparator$VersionStringComponentComparator: int compare(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.util.VersionStringComparator: void <init>()>() in <com.atlassian.plugin.util.VersionRange: java.util.Comparator newVersionComparator()> ==> <com.atlassian.plugin.util.VersionStringComparator: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.atlassian.plugin.url.InnerJarURLConnection: java.net.URL getBaseResource()>() in <com.atlassian.plugin.url.InnerJarURLConnection: void setupBaseResourceInputStream()> ==> <com.atlassian.plugin.url.InnerJarURLConnection: java.net.URL getBaseResource()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.net.URL: java.io.InputStream openStream()>() in <com.atlassian.plugin.url.InnerJarURLConnection: void setupBaseResourceInputStream()> ==> <java.net.URL: java.io.InputStream openStream()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.atlassian.plugin.url.InnerJarURLConnection: java.net.URL getBaseResource()>() in <com.atlassian.plugin.url.InnerJarURLConnection: void setupPathedInputStream()> ==> <com.atlassian.plugin.url.InnerJarURLConnection: java.net.URL getBaseResource()>
VIRTUAL edge: r5 = virtualinvoke r0.<com.atlassian.plugin.url.InnerJarURLConnection: java.io.InputStream getSegmentInputStream(java.io.InputStream,java.lang.String)>(r5, $r4) in <com.atlassian.plugin.url.InnerJarURLConnection: void setupPathedInputStream()> ==> <com.atlassian.plugin.url.InnerJarURLConnection: java.io.InputStream getSegmentInputStream(java.io.InputStream,java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke $r1.<java.net.URL: java.io.InputStream openStream()>() in <com.atlassian.plugin.url.InnerJarURLConnection: void setupPathedInputStream()> ==> <java.net.URL: java.io.InputStream openStream()>
VIRTUAL edge: $r4 = virtualinvoke r2.<java.util.zip.ZipEntry: java.lang.String getName()>() in <com.atlassian.plugin.util.zip.AbstractUnzipper: java.io.File saveEntry(java.io.InputStream,java.util.zip.ZipEntry)> ==> <java.util.jar.JarEntry: java.lang.String getName()>
VIRTUAL edge: $r4 = virtualinvoke r2.<java.util.zip.ZipEntry: java.lang.String getName()>() in <com.atlassian.plugin.util.zip.AbstractUnzipper: java.io.File saveEntry(java.io.InputStream,java.util.zip.ZipEntry)> ==> <java.util.zip.ZipEntry: java.lang.String getName()>
VIRTUAL edge: $z0 = virtualinvoke r2.<java.util.zip.ZipEntry: boolean isDirectory()>() in <com.atlassian.plugin.util.zip.AbstractUnzipper: java.io.File saveEntry(java.io.InputStream,java.util.zip.ZipEntry)> ==> <java.util.zip.ZipEntry: boolean isDirectory()>
VIRTUAL edge: $r17 = virtualinvoke r2.<java.util.zip.ZipEntry: java.lang.String getName()>() in <com.atlassian.plugin.util.zip.AbstractUnzipper: java.io.File saveEntry(java.io.InputStream,java.util.zip.ZipEntry)> ==> <java.util.jar.JarEntry: java.lang.String getName()>
VIRTUAL edge: $r17 = virtualinvoke r2.<java.util.zip.ZipEntry: java.lang.String getName()>() in <com.atlassian.plugin.util.zip.AbstractUnzipper: java.io.File saveEntry(java.io.InputStream,java.util.zip.ZipEntry)> ==> <java.util.zip.ZipEntry: java.lang.String getName()>
VIRTUAL edge: $l0 = virtualinvoke r2.<java.util.zip.ZipEntry: long getTime()>() in <com.atlassian.plugin.util.zip.AbstractUnzipper: java.io.File saveEntry(java.io.InputStream,java.util.zip.ZipEntry)> ==> <java.util.zip.ZipEntry: long getTime()>
SPECIAL edge: specialinvoke $r0.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, $r5) in <com.atlassian.plugin.util.zip.AbstractUnzipper: java.io.File saveEntry(java.io.InputStream,java.util.zip.ZipEntry)> ==> <java.io.File: void <init>(java.io.File,java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<java.io.File: boolean mkdirs()>() in <com.atlassian.plugin.util.zip.AbstractUnzipper: java.io.File saveEntry(java.io.InputStream,java.util.zip.ZipEntry)> ==> <java.io.File: boolean mkdirs()>
VIRTUAL edge: $r8 = virtualinvoke $r0.<java.io.File: java.lang.String getParent()>() in <com.atlassian.plugin.util.zip.AbstractUnzipper: java.io.File saveEntry(java.io.InputStream,java.util.zip.ZipEntry)> ==> <java.io.File: java.lang.String getParent()>
VIRTUAL edge: virtualinvoke $r0.<java.io.File: boolean setLastModified(long)>($l0) in <com.atlassian.plugin.util.zip.AbstractUnzipper: java.io.File saveEntry(java.io.InputStream,java.util.zip.ZipEntry)> ==> <java.io.File: boolean setLastModified(long)>
SPECIAL edge: specialinvoke $r7.<java.io.File: void <init>(java.lang.String)>($r8) in <com.atlassian.plugin.util.zip.AbstractUnzipper: java.io.File saveEntry(java.io.InputStream,java.util.zip.ZipEntry)> ==> <java.io.File: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r7.<java.io.File: boolean mkdirs()>() in <com.atlassian.plugin.util.zip.AbstractUnzipper: java.io.File saveEntry(java.io.InputStream,java.util.zip.ZipEntry)> ==> <java.io.File: boolean mkdirs()>
SPECIAL edge: specialinvoke $r10.<java.io.FileOutputStream: void <init>(java.io.File)>($r0) in <com.atlassian.plugin.util.zip.AbstractUnzipper: java.io.File saveEntry(java.io.InputStream,java.util.zip.ZipEntry)> ==> <java.io.FileOutputStream: void <init>(java.io.File)>
VIRTUAL edge: virtualinvoke $r10.<java.io.FileOutputStream: void flush()>() in <com.atlassian.plugin.util.zip.AbstractUnzipper: java.io.File saveEntry(java.io.InputStream,java.util.zip.ZipEntry)> ==> <java.io.FileOutputStream: void flush()>
VIRTUAL edge: virtualinvoke $r10.<java.io.FileOutputStream: void close()>() in <com.atlassian.plugin.util.zip.AbstractUnzipper: java.io.File saveEntry(java.io.InputStream,java.util.zip.ZipEntry)> ==> <java.io.FileOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r10.<java.io.FileOutputStream: void close()>() in <com.atlassian.plugin.util.zip.AbstractUnzipper: java.io.File saveEntry(java.io.InputStream,java.util.zip.ZipEntry)> ==> <java.io.FileOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r10.<java.io.FileOutputStream: void close()>() in <com.atlassian.plugin.util.zip.AbstractUnzipper: java.io.File saveEntry(java.io.InputStream,java.util.zip.ZipEntry)> ==> <java.io.FileOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r22.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r18) in <com.atlassian.plugin.util.zip.AbstractUnzipper: java.io.File saveEntry(java.io.InputStream,java.util.zip.ZipEntry)> ==> <java.lang.Throwable: void addSuppressed(java.lang.Throwable)>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.util.zip.AbstractUnzipper: java.lang.String normaliseAndVerify(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Path name ") in <com.atlassian.plugin.util.zip.AbstractUnzipper: java.lang.String normaliseAndVerify(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0) in <com.atlassian.plugin.util.zip.AbstractUnzipper: java.lang.String normaliseAndVerify(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is illegal") in <com.atlassian.plugin.util.zip.AbstractUnzipper: java.lang.String normaliseAndVerify(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.util.zip.AbstractUnzipper: java.lang.String normaliseAndVerify(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7) in <com.atlassian.plugin.util.zip.AbstractUnzipper: java.lang.String normaliseAndVerify(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.util.ArrayList: void <init>()>() in <com.atlassian.plugin.util.zip.AbstractUnzipper: java.util.zip.ZipEntry[] entries(java.util.zip.ZipInputStream)> ==> <java.util.ArrayList: void <init>()>
INTERFACE edge: interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r9) in <com.atlassian.plugin.util.zip.AbstractUnzipper: java.util.zip.ZipEntry[] entries(java.util.zip.ZipInputStream)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r0.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r3) in <com.atlassian.plugin.util.zip.AbstractUnzipper: java.util.zip.ZipEntry[] entries(java.util.zip.ZipInputStream)> ==> <java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>
VIRTUAL edge: r9 = virtualinvoke r2.<java.util.zip.ZipInputStream: java.util.zip.ZipEntry getNextEntry()>() in <com.atlassian.plugin.util.zip.AbstractUnzipper: java.util.zip.ZipEntry[] entries(java.util.zip.ZipInputStream)> ==> <java.util.jar.JarInputStream: java.util.zip.ZipEntry getNextEntry()>
VIRTUAL edge: r9 = virtualinvoke r2.<java.util.zip.ZipInputStream: java.util.zip.ZipEntry getNextEntry()>() in <com.atlassian.plugin.util.zip.AbstractUnzipper: java.util.zip.ZipEntry[] entries(java.util.zip.ZipInputStream)> ==> <java.util.zip.ZipInputStream: java.util.zip.ZipEntry getNextEntry()>
VIRTUAL edge: virtualinvoke r2.<java.util.zip.ZipInputStream: void closeEntry()>() in <com.atlassian.plugin.util.zip.AbstractUnzipper: java.util.zip.ZipEntry[] entries(java.util.zip.ZipInputStream)> ==> <java.util.zip.ZipInputStream: void closeEntry()>
VIRTUAL edge: r9 = virtualinvoke r2.<java.util.zip.ZipInputStream: java.util.zip.ZipEntry getNextEntry()>() in <com.atlassian.plugin.util.zip.AbstractUnzipper: java.util.zip.ZipEntry[] entries(java.util.zip.ZipInputStream)> ==> <java.util.jar.JarInputStream: java.util.zip.ZipEntry getNextEntry()>
VIRTUAL edge: r9 = virtualinvoke r2.<java.util.zip.ZipInputStream: java.util.zip.ZipEntry getNextEntry()>() in <com.atlassian.plugin.util.zip.AbstractUnzipper: java.util.zip.ZipEntry[] entries(java.util.zip.ZipInputStream)> ==> <java.util.zip.ZipInputStream: java.util.zip.ZipEntry getNextEntry()>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.io.File: boolean isDirectory()>() in <com.atlassian.plugin.util.zip.AbstractUnzipper: java.util.Map getContentsOfTargetDir(java.io.File)> ==> <java.io.File: boolean isDirectory()>
VIRTUAL edge: r1 = virtualinvoke r0.<java.io.File: java.io.File[] listFiles()>() in <com.atlassian.plugin.util.zip.AbstractUnzipper: java.util.Map getContentsOfTargetDir(java.io.File)> ==> <java.io.File: java.io.File[] listFiles()>
SPECIAL edge: specialinvoke $r2.<java.util.HashMap: void <init>()>() in <com.atlassian.plugin.util.zip.AbstractUnzipper: java.util.Map getContentsOfTargetDir(java.io.File)> ==> <java.util.HashMap: void <init>()>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r8) in <com.atlassian.plugin.util.zip.AbstractUnzipper: java.util.Map getContentsOfTargetDir(java.io.File)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: $z1 = interfaceinvoke $r6.<org.slf4j.Logger: boolean isDebugEnabled()>() in <com.atlassian.plugin.util.zip.AbstractUnzipper: java.util.Map getContentsOfTargetDir(java.io.File)> ==> <org.slf4j.Logger: boolean isDebugEnabled()>
INTERFACE edge: interfaceinvoke $r10.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Examining entry in zip: {}", r5) in <com.atlassian.plugin.util.zip.AbstractUnzipper: java.util.Map getContentsOfTargetDir(java.io.File)> ==> <org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>
VIRTUAL edge: $r7 = virtualinvoke r5.<java.io.File: java.lang.String getName()>() in <com.atlassian.plugin.util.zip.AbstractUnzipper: java.util.Map getContentsOfTargetDir(java.io.File)> ==> <java.io.File: java.lang.String getName()>
VIRTUAL edge: $l1 = virtualinvoke r5.<java.io.File: long lastModified()>() in <com.atlassian.plugin.util.zip.AbstractUnzipper: java.util.Map getContentsOfTargetDir(java.io.File)> ==> <java.io.File: long lastModified()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DependentPlugins: com.atlassian.plugin.PluginDependencies$Type getLeastSignificantType(java.util.Set)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DependentPlugins: com.atlassian.plugin.PluginDependencies$Type getLeastSignificantType(java.util.Set)> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DependentPlugins: com.atlassian.plugin.PluginDependencies$Type getLeastSignificantType(java.util.Set)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: r2 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DependentPlugins: com.google.common.collect.Multimap buildPluginToItsDependants(java.lang.Iterable,com.atlassian.plugin.PluginDependencies$Type)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r2 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DependentPlugins: com.google.common.collect.Multimap buildPluginToItsDependants(java.lang.Iterable,com.atlassian.plugin.PluginDependencies$Type)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r2 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DependentPlugins: com.google.common.collect.Multimap buildPluginToItsDependants(java.lang.Iterable,com.atlassian.plugin.PluginDependencies$Type)> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r2 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DependentPlugins: com.google.common.collect.Multimap buildPluginToItsDependants(java.lang.Iterable,com.atlassian.plugin.PluginDependencies$Type)> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r2 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DependentPlugins: com.google.common.collect.Multimap buildPluginToItsDependants(java.lang.Iterable,com.atlassian.plugin.PluginDependencies$Type)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: r2 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DependentPlugins: com.google.common.collect.Multimap buildPluginToItsDependants(java.lang.Iterable,com.atlassian.plugin.PluginDependencies$Type)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $r5 = interfaceinvoke r4.<com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginDependencies getDependencies()>() in <com.atlassian.plugin.manager.DependentPlugins: com.google.common.collect.Multimap buildPluginToItsDependants(java.lang.Iterable,com.atlassian.plugin.PluginDependencies$Type)> ==> <com.atlassian.plugin.impl.AbstractPlugin: com.atlassian.plugin.PluginDependencies getDependencies()>
INTERFACE edge: $r7 = interfaceinvoke $r6.<java.util.Map: java.util.Set entrySet()>() in <com.atlassian.plugin.manager.DependentPlugins: com.google.common.collect.Multimap buildPluginToItsDependants(java.lang.Iterable,com.atlassian.plugin.PluginDependencies$Type)> ==> <java.util.HashMap: java.util.Set entrySet()>
INTERFACE edge: $r7 = interfaceinvoke $r6.<java.util.Map: java.util.Set entrySet()>() in <com.atlassian.plugin.manager.DependentPlugins: com.google.common.collect.Multimap buildPluginToItsDependants(java.lang.Iterable,com.atlassian.plugin.PluginDependencies$Type)> ==> <java.util.Hashtable: java.util.Set entrySet()>
INTERFACE edge: $r7 = interfaceinvoke $r6.<java.util.Map: java.util.Set entrySet()>() in <com.atlassian.plugin.manager.DependentPlugins: com.google.common.collect.Multimap buildPluginToItsDependants(java.lang.Iterable,com.atlassian.plugin.PluginDependencies$Type)> ==> <java.util.TreeMap: java.util.Set entrySet()>
INTERFACE edge: $r7 = interfaceinvoke $r6.<java.util.Map: java.util.Set entrySet()>() in <com.atlassian.plugin.manager.DependentPlugins: com.google.common.collect.Multimap buildPluginToItsDependants(java.lang.Iterable,com.atlassian.plugin.PluginDependencies$Type)> ==> <java.util.jar.Attributes: java.util.Set entrySet()>
INTERFACE edge: r8 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DependentPlugins: com.google.common.collect.Multimap buildPluginToItsDependants(java.lang.Iterable,com.atlassian.plugin.PluginDependencies$Type)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r8 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DependentPlugins: com.google.common.collect.Multimap buildPluginToItsDependants(java.lang.Iterable,com.atlassian.plugin.PluginDependencies$Type)> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r8 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DependentPlugins: com.google.common.collect.Multimap buildPluginToItsDependants(java.lang.Iterable,com.atlassian.plugin.PluginDependencies$Type)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
VIRTUAL edge: r13 = virtualinvoke $r12.<java.util.TreeSet: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DependentPlugins: com.google.common.collect.Multimap buildPluginToItsDependants(java.lang.Iterable,com.atlassian.plugin.PluginDependencies$Type)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke $r20.<com.atlassian.plugin.manager.DependentPlugins$DependentPlugin: void <init>(com.atlassian.plugin.Plugin,com.atlassian.plugin.PluginDependencies$Type,boolean)>(r4, r15, 0) in <com.atlassian.plugin.manager.DependentPlugins: com.google.common.collect.Multimap buildPluginToItsDependants(java.lang.Iterable,com.atlassian.plugin.PluginDependencies$Type)> ==> <com.atlassian.plugin.manager.DependentPlugins$DependentPlugin: void <init>(com.atlassian.plugin.Plugin,com.atlassian.plugin.PluginDependencies$Type,boolean)>
SPECIAL edge: specialinvoke $r0.<java.util.HashMap: void <init>()>() in <com.atlassian.plugin.manager.DependentPlugins: java.util.Map calculateTransitivePluginDependencies(java.util.Collection,java.util.Set,com.google.common.collect.Multimap,java.util.Map)> ==> <java.util.HashMap: void <init>()>
INTERFACE edge: interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r31, $r25) in <com.atlassian.plugin.manager.DependentPlugins: java.util.Map calculateTransitivePluginDependencies(java.util.Collection,java.util.Set,com.google.common.collect.Multimap,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: $r14 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r40) in <com.atlassian.plugin.manager.DependentPlugins: java.util.Map calculateTransitivePluginDependencies(java.util.Collection,java.util.Set,com.google.common.collect.Multimap,java.util.Map)> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r14 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r40) in <com.atlassian.plugin.manager.DependentPlugins: java.util.Map calculateTransitivePluginDependencies(java.util.Collection,java.util.Set,com.google.common.collect.Multimap,java.util.Map)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, $r17) in <com.atlassian.plugin.manager.DependentPlugins: java.util.Map calculateTransitivePluginDependencies(java.util.Collection,java.util.Set,com.google.common.collect.Multimap,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<com.atlassian.plugin.manager.DependentPlugins$DependencyQueue: void <init>(com.atlassian.plugin.manager.DependentPlugins$1)>(null) in <com.atlassian.plugin.manager.DependentPlugins: java.util.Map calculateTransitivePluginDependencies(java.util.Collection,java.util.Set,com.google.common.collect.Multimap,java.util.Map)> ==> <com.atlassian.plugin.manager.DependentPlugins$DependencyQueue: void <init>(com.atlassian.plugin.manager.DependentPlugins$1)>
VIRTUAL edge: virtualinvoke $r2.<com.atlassian.plugin.manager.DependentPlugins$DependencyQueue: void addLast(com.atlassian.plugin.manager.DependentPlugins$CappedDep)>($r21) in <com.atlassian.plugin.manager.DependentPlugins: java.util.Map calculateTransitivePluginDependencies(java.util.Collection,java.util.Set,com.google.common.collect.Multimap,java.util.Map)> ==> <com.atlassian.plugin.manager.DependentPlugins$DependencyQueue: void addLast(com.atlassian.plugin.manager.DependentPlugins$CappedDep)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<com.atlassian.plugin.manager.DependentPlugins$DependencyQueue: boolean isEmpty()>() in <com.atlassian.plugin.manager.DependentPlugins: java.util.Map calculateTransitivePluginDependencies(java.util.Collection,java.util.Set,com.google.common.collect.Multimap,java.util.Map)> ==> <com.atlassian.plugin.manager.DependentPlugins$DependencyQueue: boolean isEmpty()>
VIRTUAL edge: r35 = virtualinvoke $r2.<com.atlassian.plugin.manager.DependentPlugins$DependencyQueue: com.atlassian.plugin.manager.DependentPlugins$CappedDep removeFirst()>() in <com.atlassian.plugin.manager.DependentPlugins: java.util.Map calculateTransitivePluginDependencies(java.util.Collection,java.util.Set,com.google.common.collect.Multimap,java.util.Map)> ==> <com.atlassian.plugin.manager.DependentPlugins$DependencyQueue: com.atlassian.plugin.manager.DependentPlugins$CappedDep removeFirst()>
VIRTUAL edge: virtualinvoke $r2.<com.atlassian.plugin.manager.DependentPlugins$DependencyQueue: void addLast(com.atlassian.plugin.manager.DependentPlugins$CappedDep)>($r12) in <com.atlassian.plugin.manager.DependentPlugins: java.util.Map calculateTransitivePluginDependencies(java.util.Collection,java.util.Set,com.google.common.collect.Multimap,java.util.Map)> ==> <com.atlassian.plugin.manager.DependentPlugins$DependencyQueue: void addLast(com.atlassian.plugin.manager.DependentPlugins$CappedDep)>
INTERFACE edge: r30 = interfaceinvoke r5.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DependentPlugins: java.util.Map calculateTransitivePluginDependencies(java.util.Collection,java.util.Set,com.google.common.collect.Multimap,java.util.Map)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r30 = interfaceinvoke r5.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DependentPlugins: java.util.Map calculateTransitivePluginDependencies(java.util.Collection,java.util.Set,com.google.common.collect.Multimap,java.util.Map)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r30 = interfaceinvoke r5.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DependentPlugins: java.util.Map calculateTransitivePluginDependencies(java.util.Collection,java.util.Set,com.google.common.collect.Multimap,java.util.Map)> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r30 = interfaceinvoke r5.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DependentPlugins: java.util.Map calculateTransitivePluginDependencies(java.util.Collection,java.util.Set,com.google.common.collect.Multimap,java.util.Map)> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r30 = interfaceinvoke r5.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DependentPlugins: java.util.Map calculateTransitivePluginDependencies(java.util.Collection,java.util.Set,com.google.common.collect.Multimap,java.util.Map)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: r30 = interfaceinvoke r5.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DependentPlugins: java.util.Map calculateTransitivePluginDependencies(java.util.Collection,java.util.Set,com.google.common.collect.Multimap,java.util.Map)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke $r21.<com.atlassian.plugin.manager.DependentPlugins$CappedDep: void <init>(java.lang.String,com.atlassian.plugin.PluginDependencies$Type)>(r31, $r22) in <com.atlassian.plugin.manager.DependentPlugins: java.util.Map calculateTransitivePluginDependencies(java.util.Collection,java.util.Set,com.google.common.collect.Multimap,java.util.Map)> ==> <com.atlassian.plugin.manager.DependentPlugins$CappedDep: void <init>(java.lang.String,com.atlassian.plugin.PluginDependencies$Type)>
SPECIAL edge: specialinvoke $r28.<com.atlassian.plugin.manager.DependentPlugins$CappedDep: void <init>(java.lang.String,com.atlassian.plugin.PluginDependencies$Type)>(r31, r33) in <com.atlassian.plugin.manager.DependentPlugins: java.util.Map calculateTransitivePluginDependencies(java.util.Collection,java.util.Set,com.google.common.collect.Multimap,java.util.Map)> ==> <com.atlassian.plugin.manager.DependentPlugins$CappedDep: void <init>(java.lang.String,com.atlassian.plugin.PluginDependencies$Type)>
INTERFACE edge: interfaceinvoke r4.<java.util.Set: boolean add(java.lang.Object)>($r28) in <com.atlassian.plugin.manager.DependentPlugins: java.util.Map calculateTransitivePluginDependencies(java.util.Collection,java.util.Set,com.google.common.collect.Multimap,java.util.Map)> ==> <java.util.HashSet: boolean add(java.lang.Object)>
INTERFACE edge: $z4 = interfaceinvoke r4.<java.util.Set: boolean add(java.lang.Object)>($r12) in <com.atlassian.plugin.manager.DependentPlugins: java.util.Map calculateTransitivePluginDependencies(java.util.Collection,java.util.Set,com.google.common.collect.Multimap,java.util.Map)> ==> <java.util.HashSet: boolean add(java.lang.Object)>
INTERFACE edge: $r24 = interfaceinvoke r23.<java.util.Map: java.lang.Object get(java.lang.Object)>(r31) in <com.atlassian.plugin.manager.DependentPlugins: java.util.Map calculateTransitivePluginDependencies(java.util.Collection,java.util.Set,com.google.common.collect.Multimap,java.util.Map)> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r24 = interfaceinvoke r23.<java.util.Map: java.lang.Object get(java.lang.Object)>(r31) in <com.atlassian.plugin.manager.DependentPlugins: java.util.Map calculateTransitivePluginDependencies(java.util.Collection,java.util.Set,com.google.common.collect.Multimap,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r24 = interfaceinvoke r23.<java.util.Map: java.lang.Object get(java.lang.Object)>(r31) in <com.atlassian.plugin.manager.DependentPlugins: java.util.Map calculateTransitivePluginDependencies(java.util.Collection,java.util.Set,com.google.common.collect.Multimap,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r24 = interfaceinvoke r23.<java.util.Map: java.lang.Object get(java.lang.Object)>(r31) in <com.atlassian.plugin.manager.DependentPlugins: java.util.Map calculateTransitivePluginDependencies(java.util.Collection,java.util.Set,com.google.common.collect.Multimap,java.util.Map)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r24 = interfaceinvoke r23.<java.util.Map: java.lang.Object get(java.lang.Object)>(r31) in <com.atlassian.plugin.manager.DependentPlugins: java.util.Map calculateTransitivePluginDependencies(java.util.Collection,java.util.Set,com.google.common.collect.Multimap,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>
SPECIAL edge: specialinvoke $r25.<com.atlassian.plugin.manager.DependentPlugins$DependentPlugin: void <init>(com.atlassian.plugin.Plugin,com.atlassian.plugin.PluginDependencies$Type,boolean)>(r34, $r26, 1) in <com.atlassian.plugin.manager.DependentPlugins: java.util.Map calculateTransitivePluginDependencies(java.util.Collection,java.util.Set,com.google.common.collect.Multimap,java.util.Map)> ==> <com.atlassian.plugin.manager.DependentPlugins$DependentPlugin: void <init>(com.atlassian.plugin.Plugin,com.atlassian.plugin.PluginDependencies$Type,boolean)>
INTERFACE edge: r36 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DependentPlugins: java.util.Map calculateTransitivePluginDependencies(java.util.Collection,java.util.Set,com.google.common.collect.Multimap,java.util.Map)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r36 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DependentPlugins: java.util.Map calculateTransitivePluginDependencies(java.util.Collection,java.util.Set,com.google.common.collect.Multimap,java.util.Map)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r36 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DependentPlugins: java.util.Map calculateTransitivePluginDependencies(java.util.Collection,java.util.Set,com.google.common.collect.Multimap,java.util.Map)> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r36 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DependentPlugins: java.util.Map calculateTransitivePluginDependencies(java.util.Collection,java.util.Set,com.google.common.collect.Multimap,java.util.Map)> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r36 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DependentPlugins: java.util.Map calculateTransitivePluginDependencies(java.util.Collection,java.util.Set,com.google.common.collect.Multimap,java.util.Map)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: r36 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DependentPlugins: java.util.Map calculateTransitivePluginDependencies(java.util.Collection,java.util.Set,com.google.common.collect.Multimap,java.util.Map)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
VIRTUAL edge: $r10 = virtualinvoke r37.<com.atlassian.plugin.manager.DependentPlugins$DependentPlugin: com.atlassian.plugin.PluginDependencies$Type getDependencyType()>() in <com.atlassian.plugin.manager.DependentPlugins: java.util.Map calculateTransitivePluginDependencies(java.util.Collection,java.util.Set,com.google.common.collect.Multimap,java.util.Map)> ==> <com.atlassian.plugin.manager.DependentPlugins$DependentPlugin: com.atlassian.plugin.PluginDependencies$Type getDependencyType()>
VIRTUAL edge: r39 = virtualinvoke r37.<com.atlassian.plugin.manager.DependentPlugins$DependentPlugin: com.atlassian.plugin.Plugin getPlugin()>() in <com.atlassian.plugin.manager.DependentPlugins: java.util.Map calculateTransitivePluginDependencies(java.util.Collection,java.util.Set,com.google.common.collect.Multimap,java.util.Map)> ==> <com.atlassian.plugin.manager.DependentPlugins$DependentPlugin: com.atlassian.plugin.Plugin getPlugin()>
VIRTUAL edge: r38 = virtualinvoke r35.<com.atlassian.plugin.manager.DependentPlugins$CappedDep: com.atlassian.plugin.PluginDependencies$Type cap(com.atlassian.plugin.PluginDependencies$Type)>($r10) in <com.atlassian.plugin.manager.DependentPlugins: java.util.Map calculateTransitivePluginDependencies(java.util.Collection,java.util.Set,com.google.common.collect.Multimap,java.util.Map)> ==> <com.atlassian.plugin.manager.DependentPlugins$CappedDep: com.atlassian.plugin.PluginDependencies$Type cap(com.atlassian.plugin.PluginDependencies$Type)>
INTERFACE edge: $z3 = interfaceinvoke r11.<java.util.Set: boolean contains(java.lang.Object)>(r38) in <com.atlassian.plugin.manager.DependentPlugins: java.util.Map calculateTransitivePluginDependencies(java.util.Collection,java.util.Set,com.google.common.collect.Multimap,java.util.Map)> ==> <java.util.HashSet: boolean contains(java.lang.Object)>
INTERFACE edge: $z3 = interfaceinvoke r11.<java.util.Set: boolean contains(java.lang.Object)>(r38) in <com.atlassian.plugin.manager.DependentPlugins: java.util.Map calculateTransitivePluginDependencies(java.util.Collection,java.util.Set,com.google.common.collect.Multimap,java.util.Map)> ==> <java.util.concurrent.CopyOnWriteArraySet: boolean contains(java.lang.Object)>
INTERFACE edge: $z3 = interfaceinvoke r11.<java.util.Set: boolean contains(java.lang.Object)>(r38) in <com.atlassian.plugin.manager.DependentPlugins: java.util.Map calculateTransitivePluginDependencies(java.util.Collection,java.util.Set,com.google.common.collect.Multimap,java.util.Map)> ==> <java.util.TreeSet: boolean contains(java.lang.Object)>
INTERFACE edge: r40 = interfaceinvoke r39.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DependentPlugins: java.util.Map calculateTransitivePluginDependencies(java.util.Collection,java.util.Set,com.google.common.collect.Multimap,java.util.Map)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: r40 = interfaceinvoke r39.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DependentPlugins: java.util.Map calculateTransitivePluginDependencies(java.util.Collection,java.util.Set,com.google.common.collect.Multimap,java.util.Map)> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
INTERFACE edge: $r16 = interfaceinvoke r39.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DependentPlugins: java.util.Map calculateTransitivePluginDependencies(java.util.Collection,java.util.Set,com.google.common.collect.Multimap,java.util.Map)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r16 = interfaceinvoke r39.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DependentPlugins: java.util.Map calculateTransitivePluginDependencies(java.util.Collection,java.util.Set,com.google.common.collect.Multimap,java.util.Map)> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
SPECIAL edge: specialinvoke $r12.<com.atlassian.plugin.manager.DependentPlugins$CappedDep: void <init>(java.lang.String,com.atlassian.plugin.PluginDependencies$Type)>(r40, r38) in <com.atlassian.plugin.manager.DependentPlugins: java.util.Map calculateTransitivePluginDependencies(java.util.Collection,java.util.Set,com.google.common.collect.Multimap,java.util.Map)> ==> <com.atlassian.plugin.manager.DependentPlugins$CappedDep: void <init>(java.lang.String,com.atlassian.plugin.PluginDependencies$Type)>
VIRTUAL edge: $r19 = virtualinvoke r15.<com.atlassian.plugin.manager.DependentPlugins$DependentPlugin: com.atlassian.plugin.PluginDependencies$Type getDependencyType()>() in <com.atlassian.plugin.manager.DependentPlugins: java.util.Map calculateTransitivePluginDependencies(java.util.Collection,java.util.Set,com.google.common.collect.Multimap,java.util.Map)> ==> <com.atlassian.plugin.manager.DependentPlugins$DependentPlugin: com.atlassian.plugin.PluginDependencies$Type getDependencyType()>
SPECIAL edge: specialinvoke $r17.<com.atlassian.plugin.manager.DependentPlugins$DependentPlugin: void <init>(com.atlassian.plugin.Plugin,com.atlassian.plugin.PluginDependencies$Type,boolean)>(r39, r38, 0) in <com.atlassian.plugin.manager.DependentPlugins: java.util.Map calculateTransitivePluginDependencies(java.util.Collection,java.util.Set,com.google.common.collect.Multimap,java.util.Map)> ==> <com.atlassian.plugin.manager.DependentPlugins$DependentPlugin: void <init>(com.atlassian.plugin.Plugin,com.atlassian.plugin.PluginDependencies$Type,boolean)>
SPECIAL edge: specialinvoke $r0.<java.util.HashMap: void <init>()>() in <com.atlassian.plugin.manager.DependentPlugins: java.util.Map constructWorkMap(com.google.common.collect.Multimap,java.util.Collection)> ==> <java.util.HashMap: void <init>()>
INTERFACE edge: interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r19, r17) in <com.atlassian.plugin.manager.DependentPlugins: java.util.Map constructWorkMap(com.google.common.collect.Multimap,java.util.Collection)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: r3 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DependentPlugins: java.util.Map constructWorkMap(com.google.common.collect.Multimap,java.util.Collection)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DependentPlugins: java.util.Map constructWorkMap(com.google.common.collect.Multimap,java.util.Collection)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DependentPlugins: java.util.Map constructWorkMap(com.google.common.collect.Multimap,java.util.Collection)> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DependentPlugins: java.util.Map constructWorkMap(com.google.common.collect.Multimap,java.util.Collection)> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DependentPlugins: java.util.Map constructWorkMap(com.google.common.collect.Multimap,java.util.Collection)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DependentPlugins: java.util.Map constructWorkMap(com.google.common.collect.Multimap,java.util.Collection)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
VIRTUAL edge: $r7 = virtualinvoke r5.<com.atlassian.plugin.manager.DependentPlugins$DependentPlugin: com.atlassian.plugin.Plugin getPlugin()>() in <com.atlassian.plugin.manager.DependentPlugins: java.util.Map constructWorkMap(com.google.common.collect.Multimap,java.util.Collection)> ==> <com.atlassian.plugin.manager.DependentPlugins$DependentPlugin: com.atlassian.plugin.Plugin getPlugin()>
VIRTUAL edge: $r18 = virtualinvoke r5.<com.atlassian.plugin.manager.DependentPlugins$DependentPlugin: com.atlassian.plugin.Plugin getPlugin()>() in <com.atlassian.plugin.manager.DependentPlugins: java.util.Map constructWorkMap(com.google.common.collect.Multimap,java.util.Collection)> ==> <com.atlassian.plugin.manager.DependentPlugins$DependentPlugin: com.atlassian.plugin.Plugin getPlugin()>
INTERFACE edge: $r8 = interfaceinvoke $r7.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DependentPlugins: java.util.Map constructWorkMap(com.google.common.collect.Multimap,java.util.Collection)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r8 = interfaceinvoke $r7.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DependentPlugins: java.util.Map constructWorkMap(com.google.common.collect.Multimap,java.util.Collection)> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
INTERFACE edge: $r12 = interfaceinvoke $r10.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r11) in <com.atlassian.plugin.manager.DependentPlugins: java.util.Map constructWorkMap(com.google.common.collect.Multimap,java.util.Collection)> ==> <java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>
INTERFACE edge: $r14 = interfaceinvoke $r12.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r13) in <com.atlassian.plugin.manager.DependentPlugins: java.util.Map constructWorkMap(com.google.common.collect.Multimap,java.util.Collection)> ==> <java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>
INTERFACE edge: $r16 = interfaceinvoke $r14.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r15) in <com.atlassian.plugin.manager.DependentPlugins: java.util.Map constructWorkMap(com.google.common.collect.Multimap,java.util.Collection)> ==> <java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>
INTERFACE edge: $r19 = interfaceinvoke $r18.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DependentPlugins: java.util.Map constructWorkMap(com.google.common.collect.Multimap,java.util.Collection)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r19 = interfaceinvoke $r18.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DependentPlugins: java.util.Map constructWorkMap(com.google.common.collect.Multimap,java.util.Collection)> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
INTERFACE edge: r21 = interfaceinvoke r17.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DependentPlugins: java.util.Map constructWorkMap(com.google.common.collect.Multimap,java.util.Collection)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r21 = interfaceinvoke r17.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DependentPlugins: java.util.Map constructWorkMap(com.google.common.collect.Multimap,java.util.Collection)> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r21 = interfaceinvoke r17.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DependentPlugins: java.util.Map constructWorkMap(com.google.common.collect.Multimap,java.util.Collection)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke $r0.<java.util.ArrayList: void <init>()>() in <com.atlassian.plugin.manager.DependentPlugins: java.util.List getInDependencyOrder(java.util.Map,java.util.Map)> ==> <java.util.ArrayList: void <init>()>
INTERFACE edge: interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r17) in <com.atlassian.plugin.manager.DependentPlugins: java.util.List getInDependencyOrder(java.util.Map,java.util.Map)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r14) in <com.atlassian.plugin.manager.DependentPlugins: java.util.List getInDependencyOrder(java.util.Map,java.util.Map)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r2.<java.util.Map: boolean isEmpty()>() in <com.atlassian.plugin.manager.DependentPlugins: java.util.List getInDependencyOrder(java.util.Map,java.util.Map)> ==> <java.util.HashMap: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke r2.<java.util.Map: boolean isEmpty()>() in <com.atlassian.plugin.manager.DependentPlugins: java.util.List getInDependencyOrder(java.util.Map,java.util.Map)> ==> <java.util.Hashtable: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke r2.<java.util.Map: boolean isEmpty()>() in <com.atlassian.plugin.manager.DependentPlugins: java.util.List getInDependencyOrder(java.util.Map,java.util.Map)> ==> <java.util.TreeMap: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke r2.<java.util.Map: boolean isEmpty()>() in <com.atlassian.plugin.manager.DependentPlugins: java.util.List getInDependencyOrder(java.util.Map,java.util.Map)> ==> <java.util.jar.Attributes: boolean isEmpty()>
INTERFACE edge: $r3 = interfaceinvoke r2.<java.util.Map: java.util.Set keySet()>() in <com.atlassian.plugin.manager.DependentPlugins: java.util.List getInDependencyOrder(java.util.Map,java.util.Map)> ==> <java.util.HashMap: java.util.Set keySet()>
INTERFACE edge: $r3 = interfaceinvoke r2.<java.util.Map: java.util.Set keySet()>() in <com.atlassian.plugin.manager.DependentPlugins: java.util.List getInDependencyOrder(java.util.Map,java.util.Map)> ==> <java.util.Hashtable: java.util.Set keySet()>
INTERFACE edge: $r3 = interfaceinvoke r2.<java.util.Map: java.util.Set keySet()>() in <com.atlassian.plugin.manager.DependentPlugins: java.util.List getInDependencyOrder(java.util.Map,java.util.Map)> ==> <java.util.TreeMap: java.util.Set keySet()>
INTERFACE edge: $r3 = interfaceinvoke r2.<java.util.Map: java.util.Set keySet()>() in <com.atlassian.plugin.manager.DependentPlugins: java.util.List getInDependencyOrder(java.util.Map,java.util.Map)> ==> <java.util.jar.Attributes: java.util.Set keySet()>
INTERFACE edge: $r6 = interfaceinvoke $r4.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($r5) in <com.atlassian.plugin.manager.DependentPlugins: java.util.List getInDependencyOrder(java.util.Map,java.util.Map)> ==> <java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>
INTERFACE edge: $r8 = interfaceinvoke $r6.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r7) in <com.atlassian.plugin.manager.DependentPlugins: java.util.List getInDependencyOrder(java.util.Map,java.util.Map)> ==> <java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>
INTERFACE edge: $z1 = interfaceinvoke r9.<java.util.List: boolean isEmpty()>() in <com.atlassian.plugin.manager.DependentPlugins: java.util.List getInDependencyOrder(java.util.Map,java.util.Map)> ==> <java.util.AbstractCollection: boolean isEmpty()>
INTERFACE edge: $z1 = interfaceinvoke r9.<java.util.List: boolean isEmpty()>() in <com.atlassian.plugin.manager.DependentPlugins: java.util.List getInDependencyOrder(java.util.Map,java.util.Map)> ==> <java.util.ArrayList: boolean isEmpty()>
INTERFACE edge: r18 = interfaceinvoke r9.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DependentPlugins: java.util.List getInDependencyOrder(java.util.Map,java.util.Map)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r18 = interfaceinvoke r9.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DependentPlugins: java.util.List getInDependencyOrder(java.util.Map,java.util.Map)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
SPECIAL edge: r16 = specialinvoke r11.<com.atlassian.plugin.manager.DependentPlugins: java.lang.String findPluginToCutTheCycle(java.util.Map)>(r2) in <com.atlassian.plugin.manager.DependentPlugins: java.util.List getInDependencyOrder(java.util.Map,java.util.Map)> ==> <com.atlassian.plugin.manager.DependentPlugins: java.lang.String findPluginToCutTheCycle(java.util.Map)>
SPECIAL edge: specialinvoke r11.<com.atlassian.plugin.manager.DependentPlugins: void removeFromWorkmap(java.util.Map,java.lang.String)>(r2, r16) in <com.atlassian.plugin.manager.DependentPlugins: java.util.List getInDependencyOrder(java.util.Map,java.util.Map)> ==> <com.atlassian.plugin.manager.DependentPlugins: void removeFromWorkmap(java.util.Map,java.lang.String)>
SPECIAL edge: specialinvoke r11.<com.atlassian.plugin.manager.DependentPlugins: void removeFromWorkmap(java.util.Map,java.lang.String)>(r2, r19) in <com.atlassian.plugin.manager.DependentPlugins: java.util.List getInDependencyOrder(java.util.Map,java.util.Map)> ==> <com.atlassian.plugin.manager.DependentPlugins: void removeFromWorkmap(java.util.Map,java.lang.String)>
INTERFACE edge: $r15 = interfaceinvoke r12.<java.util.Map: java.lang.Object get(java.lang.Object)>(r16) in <com.atlassian.plugin.manager.DependentPlugins: java.util.List getInDependencyOrder(java.util.Map,java.util.Map)> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r15 = interfaceinvoke r12.<java.util.Map: java.lang.Object get(java.lang.Object)>(r16) in <com.atlassian.plugin.manager.DependentPlugins: java.util.List getInDependencyOrder(java.util.Map,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r15 = interfaceinvoke r12.<java.util.Map: java.lang.Object get(java.lang.Object)>(r16) in <com.atlassian.plugin.manager.DependentPlugins: java.util.List getInDependencyOrder(java.util.Map,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r15 = interfaceinvoke r12.<java.util.Map: java.lang.Object get(java.lang.Object)>(r16) in <com.atlassian.plugin.manager.DependentPlugins: java.util.List getInDependencyOrder(java.util.Map,java.util.Map)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r15 = interfaceinvoke r12.<java.util.Map: java.lang.Object get(java.lang.Object)>(r16) in <com.atlassian.plugin.manager.DependentPlugins: java.util.List getInDependencyOrder(java.util.Map,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r13 = interfaceinvoke r12.<java.util.Map: java.lang.Object get(java.lang.Object)>(r19) in <com.atlassian.plugin.manager.DependentPlugins: java.util.List getInDependencyOrder(java.util.Map,java.util.Map)> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r13 = interfaceinvoke r12.<java.util.Map: java.lang.Object get(java.lang.Object)>(r19) in <com.atlassian.plugin.manager.DependentPlugins: java.util.List getInDependencyOrder(java.util.Map,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r13 = interfaceinvoke r12.<java.util.Map: java.lang.Object get(java.lang.Object)>(r19) in <com.atlassian.plugin.manager.DependentPlugins: java.util.List getInDependencyOrder(java.util.Map,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r13 = interfaceinvoke r12.<java.util.Map: java.lang.Object get(java.lang.Object)>(r19) in <com.atlassian.plugin.manager.DependentPlugins: java.util.List getInDependencyOrder(java.util.Map,java.util.Map)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r13 = interfaceinvoke r12.<java.util.Map: java.lang.Object get(java.lang.Object)>(r19) in <com.atlassian.plugin.manager.DependentPlugins: java.util.List getInDependencyOrder(java.util.Map,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>
STATIC edge: $r10 = staticinvoke <com.atlassian.plugin.manager.DependentPlugins$lambda_findPluginToCutTheCycle_1__114: java.util.function.Supplier bootstrap$(java.util.Map)>(r2) in <com.atlassian.plugin.manager.DependentPlugins: java.lang.String findPluginToCutTheCycle(java.util.Map)> ==> <com.atlassian.plugin.manager.DependentPlugins$lambda_findPluginToCutTheCycle_1__114: java.util.function.Supplier bootstrap$(java.util.Map)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r0) in <com.atlassian.plugin.util.ChainingClassLoader: java.lang.String getAlternativeResourceName(java.lang.String)> ==> <java.util.HashMap: boolean containsKey(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r0) in <com.atlassian.plugin.util.ChainingClassLoader: java.lang.String getAlternativeResourceName(java.lang.String)> ==> <java.util.Hashtable: boolean containsKey(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r0) in <com.atlassian.plugin.util.ChainingClassLoader: java.lang.String getAlternativeResourceName(java.lang.String)> ==> <java.util.TreeMap: boolean containsKey(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r0) in <com.atlassian.plugin.util.ChainingClassLoader: java.lang.String getAlternativeResourceName(java.lang.String)> ==> <java.util.jar.Attributes: boolean containsKey(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0) in <com.atlassian.plugin.util.ChainingClassLoader: java.lang.String getAlternativeResourceName(java.lang.String)> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0) in <com.atlassian.plugin.util.ChainingClassLoader: java.lang.String getAlternativeResourceName(java.lang.String)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0) in <com.atlassian.plugin.util.ChainingClassLoader: java.lang.String getAlternativeResourceName(java.lang.String)> ==> <java.util.TreeMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0) in <com.atlassian.plugin.util.ChainingClassLoader: java.lang.String getAlternativeResourceName(java.lang.String)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0) in <com.atlassian.plugin.util.ChainingClassLoader: java.lang.String getAlternativeResourceName(java.lang.String)> ==> <java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Redirecting resource \'{}\' to \'{}\'", r0, r5) in <com.atlassian.plugin.util.ChainingClassLoader: java.lang.String getAlternativeResourceName(java.lang.String)> ==> <org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.util.ChainingClassLoader$ResourcesEnumeration: void <init>(java.lang.String,java.util.List)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.util.LinkedList: void <init>()>() in <com.atlassian.plugin.util.ChainingClassLoader$ResourcesEnumeration: void <init>(java.lang.String,java.util.List)> ==> <java.util.LinkedList: void <init>()>
INTERFACE edge: r4 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.util.ChainingClassLoader$ResourcesEnumeration: void <init>(java.lang.String,java.util.List)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.util.ChainingClassLoader$ResourcesEnumeration: void <init>(java.lang.String,java.util.List)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
VIRTUAL edge: $r8 = virtualinvoke r6.<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>(r1) in <com.atlassian.plugin.util.ChainingClassLoader$ResourcesEnumeration: void <init>(java.lang.String,java.util.List)> ==> <java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke r6.<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>(r1) in <com.atlassian.plugin.util.ChainingClassLoader$ResourcesEnumeration: void <init>(java.lang.String,java.util.List)> ==> <com.atlassian.plugin.util.ChainingClassLoader: java.util.Enumeration getResources(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke r6.<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>(r1) in <com.atlassian.plugin.util.ChainingClassLoader$ResourcesEnumeration: void <init>(java.lang.String,java.util.List)> ==> <com.atlassian.plugin.classloader.DelegationClassLoader: java.util.Enumeration getResources(java.lang.String)>
INTERFACE edge: interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r8) in <com.atlassian.plugin.util.ChainingClassLoader$ResourcesEnumeration: void <init>(java.lang.String,java.util.List)> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r8) in <com.atlassian.plugin.util.ChainingClassLoader$ResourcesEnumeration: void <init>(java.lang.String,java.util.List)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r0) in <com.atlassian.plugin.manager.DefaultPluginManager$1: java.util.Optional parseStartupToDelay(java.lang.String,java.lang.String,java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r0) in <com.atlassian.plugin.manager.DefaultPluginManager$1: java.util.Optional parseStartupToDelay(java.lang.String,java.lang.String,java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.DefaultPluginManager$Builder)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: $r6 = specialinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: java.util.List toPermissionCheckingPluginLoaders(java.util.List)>($r5) in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.DefaultPluginManager$Builder)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: java.util.List toPermissionCheckingPluginLoaders(java.util.List)>
SPECIAL edge: $r22 = specialinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: java.util.function.Predicate wrapDelayPredicateWithOverrides(java.util.function.Predicate)>($r21) in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.DefaultPluginManager$Builder)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: java.util.function.Predicate wrapDelayPredicateWithOverrides(java.util.function.Predicate)>
SPECIAL edge: specialinvoke $r7.<com.atlassian.plugin.manager.PluginPersistentStateModifier: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore)>($r10) in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.DefaultPluginManager$Builder)> ==> <com.atlassian.plugin.manager.PluginPersistentStateModifier: void <init>(com.atlassian.plugin.manager.PluginPersistentStateStore)>
SPECIAL edge: specialinvoke $r17.<com.atlassian.plugin.manager.PluginEnabler: void <init>(com.atlassian.plugin.PluginAccessor,com.atlassian.plugin.PluginController,com.atlassian.plugin.exception.PluginExceptionInterception)>(r0, r0, $r20) in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.DefaultPluginManager$Builder)> ==> <com.atlassian.plugin.manager.PluginEnabler: void <init>(com.atlassian.plugin.PluginAccessor,com.atlassian.plugin.PluginController,com.atlassian.plugin.exception.PluginExceptionInterception)>
SPECIAL edge: specialinvoke $r30.<com.atlassian.plugin.manager.StateTracker: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.DefaultPluginManager$Builder)> ==> <com.atlassian.plugin.manager.StateTracker: void <init>()>
SPECIAL edge: specialinvoke $r32.<com.atlassian.plugin.manager.UnsupportedPluginInstaller: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.DefaultPluginManager$Builder)> ==> <com.atlassian.plugin.manager.UnsupportedPluginInstaller: void <init>()>
SPECIAL edge: specialinvoke $r31.<com.atlassian.plugin.manager.NoOpRevertablePluginInstaller: void <init>(com.atlassian.plugin.PluginInstaller)>($r32) in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.DefaultPluginManager$Builder)> ==> <com.atlassian.plugin.manager.NoOpRevertablePluginInstaller: void <init>(com.atlassian.plugin.PluginInstaller)>
SPECIAL edge: specialinvoke $r33.<java.util.HashMap: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.DefaultPluginManager$Builder)> ==> <java.util.HashMap: void <init>()>
SPECIAL edge: specialinvoke $r34.<java.util.HashMap: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.DefaultPluginManager$Builder)> ==> <java.util.HashMap: void <init>()>
SPECIAL edge: specialinvoke $r35.<java.util.ArrayList: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.DefaultPluginManager$Builder)> ==> <java.util.ArrayList: void <init>()>
SPECIAL edge: specialinvoke $r36.<java.util.ArrayList: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.DefaultPluginManager$Builder)> ==> <java.util.ArrayList: void <init>()>
SPECIAL edge: specialinvoke $r37.<java.util.HashMap: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.DefaultPluginManager$Builder)> ==> <java.util.HashMap: void <init>()>
INTERFACE edge: interfaceinvoke $r38.<com.atlassian.plugin.event.PluginEventManager: void register(java.lang.Object)>(r0) in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.DefaultPluginManager$Builder)> ==> <com.atlassian.plugin.event.impl.DefaultPluginEventManager: void register(java.lang.Object)>
SPECIAL edge: specialinvoke $r39.<com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge: void <init>(com.atlassian.plugin.manager.DefaultPluginManager)>(r0) in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.DefaultPluginManager$Builder)> ==> <com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge: void <init>(com.atlassian.plugin.manager.DefaultPluginManager)>
SPECIAL edge: specialinvoke $r40.<com.atlassian.plugin.manager.SafeModuleExtractor: void <init>(com.atlassian.plugin.PluginController)>(r0) in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.DefaultPluginManager$Builder)> ==> <com.atlassian.plugin.manager.SafeModuleExtractor: void <init>(com.atlassian.plugin.PluginController)>
SPECIAL edge: specialinvoke $r41.<com.atlassian.plugin.manager.PluginTransactionContext: void <init>(com.atlassian.plugin.event.PluginEventManager)>($r42) in <com.atlassian.plugin.manager.DefaultPluginManager: void <init>(com.atlassian.plugin.manager.DefaultPluginManager$Builder)> ==> <com.atlassian.plugin.manager.PluginTransactionContext: void <init>(com.atlassian.plugin.event.PluginEventManager)>
STATIC edge: $r2 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$init__34: java.util.function.Function bootstrap$()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.List toPermissionCheckingPluginLoaders(java.util.List)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$init__34: java.util.function.Function bootstrap$()>
STATIC edge: $r4 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.List toPermissionCheckingPluginLoaders(java.util.List)> ==> <java.util.stream.Collectors: java.util.stream.Collector toList()>
CLINIT edge: $r1 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.String getStartupOverrideFileProperty()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.function.Predicate wrapDelayPredicateWithOverrides(java.util.function.Predicate)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void <clinit>()>
STATIC edge: $r1 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.String getStartupOverrideFileProperty()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.function.Predicate wrapDelayPredicateWithOverrides(java.util.function.Predicate)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.String getStartupOverrideFileProperty()>
CLINIT edge: $r2 = <com.atlassian.plugin.manager.StateTracker$State: com.atlassian.plugin.manager.StateTracker$State NOT_STARTED> in <com.atlassian.plugin.manager.StateTracker: void <init>()> ==> <com.atlassian.plugin.manager.StateTracker$State: void <clinit>()>
CLINIT edge: $r1 = <com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge: java.util.concurrent.atomic.AtomicInteger nextJmxInstance> in <com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge: void <init>(com.atlassian.plugin.manager.DefaultPluginManager)> ==> <com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.atlassian.plugin.jmx.JmxUtil: javax.management.ObjectName objectName(java.util.concurrent.atomic.AtomicInteger,java.lang.String)>($r1, "PluginManager") in <com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge: void <init>(com.atlassian.plugin.manager.DefaultPluginManager)> ==> <com.atlassian.plugin.jmx.JmxUtil: javax.management.ObjectName objectName(java.util.concurrent.atomic.AtomicInteger,java.lang.String)>
CLINIT edge: $r2 = staticinvoke <com.atlassian.plugin.jmx.JmxUtil: javax.management.ObjectName objectName(java.util.concurrent.atomic.AtomicInteger,java.lang.String)>($r1, "PluginManager") in <com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge: void <init>(com.atlassian.plugin.manager.DefaultPluginManager)> ==> <com.atlassian.plugin.jmx.JmxUtil: void <clinit>()>
INTERFACE edge: $r5 = interfaceinvoke $r3.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r4) in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.stream.Stream getModuleDescriptors(java.util.Collection,java.util.function.Predicate)> ==> <java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>
INTERFACE edge: $r7 = interfaceinvoke $r5.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>(r6) in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.stream.Stream getModuleDescriptors(java.util.Collection,java.util.function.Predicate)> ==> <java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>
VIRTUAL edge: r3 = virtualinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.Plugin getPlugin(java.lang.String)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.ModuleDescriptor getPluginModule(com.atlassian.plugin.ModuleCompleteKey)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.Plugin getPlugin(java.lang.String)>
INTERFACE edge: $r5 = interfaceinvoke r3.<com.atlassian.plugin.Plugin: com.atlassian.plugin.ModuleDescriptor getModuleDescriptor(java.lang.String)>($r4) in <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.ModuleDescriptor getPluginModule(com.atlassian.plugin.ModuleCompleteKey)> ==> <com.atlassian.plugin.impl.AbstractPlugin: com.atlassian.plugin.ModuleDescriptor getModuleDescriptor(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: boolean isPluginEnabled(java.lang.String)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager: boolean isPluginModuleEnabled(com.atlassian.plugin.ModuleCompleteKey)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: boolean isPluginEnabled(java.lang.String)>
SPECIAL edge: r3 = specialinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.ModuleDescriptor getPluginModule(com.atlassian.plugin.ModuleCompleteKey)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager: boolean isPluginModuleEnabled(com.atlassian.plugin.ModuleCompleteKey)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.ModuleDescriptor getPluginModule(com.atlassian.plugin.ModuleCompleteKey)>
INTERFACE edge: $z1 = interfaceinvoke r3.<com.atlassian.plugin.ModuleDescriptor: boolean isEnabled()>() in <com.atlassian.plugin.manager.DefaultPluginManager: boolean isPluginModuleEnabled(com.atlassian.plugin.ModuleCompleteKey)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: boolean isEnabled()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.predicate.ModuleOfClassPredicate: void <init>(java.lang.Class)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.stream.Stream getEnabledModuleDescriptorsByModuleClass(java.lang.Class)> ==> <com.atlassian.plugin.predicate.ModuleOfClassPredicate: void <init>(java.lang.Class)>
SPECIAL edge: specialinvoke $r3.<com.atlassian.plugin.predicate.EnabledModulePredicate: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.stream.Stream getEnabledModuleDescriptorsByModuleClass(java.lang.Class)> ==> <com.atlassian.plugin.predicate.EnabledModulePredicate: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke r5.<com.atlassian.plugin.manager.DefaultPluginManager: java.util.Collection getEnabledPlugins()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.stream.Stream getEnabledModuleDescriptorsByModuleClass(java.lang.Class)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: java.util.Collection getEnabledPlugins()>
SPECIAL edge: $r8 = specialinvoke r5.<com.atlassian.plugin.manager.DefaultPluginManager: java.util.stream.Stream getModuleDescriptors(java.util.Collection,java.util.function.Predicate)>($r6, $r7) in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.stream.Stream getEnabledModuleDescriptorsByModuleClass(java.lang.Class)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: java.util.stream.Stream getModuleDescriptors(java.util.Collection,java.util.function.Predicate)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.atlassian.plugin.manager.PluginPersistentStateModifier: com.atlassian.plugin.manager.PluginPersistentState getState()>() in <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.manager.PluginPersistentState getState()> ==> <com.atlassian.plugin.manager.PluginPersistentStateModifier: com.atlassian.plugin.manager.PluginPersistentState getState()>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.PluginInternal checkPluginInternal(com.atlassian.plugin.Plugin)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0) in <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.PluginInternal checkPluginInternal(com.atlassian.plugin.Plugin)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not implement com.atlassian.plugin.PluginInternal it is a ") in <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.PluginInternal checkPluginInternal(com.atlassian.plugin.Plugin)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() in <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.PluginInternal checkPluginInternal(com.atlassian.plugin.Plugin)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getCanonicalName()>() in <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.PluginInternal checkPluginInternal(com.atlassian.plugin.Plugin)> ==> <java.lang.Class: java.lang.String getCanonicalName()>
VIRTUAL edge: $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) in <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.PluginInternal checkPluginInternal(com.atlassian.plugin.Plugin)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.PluginInternal checkPluginInternal(com.atlassian.plugin.Plugin)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9) in <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.PluginInternal checkPluginInternal(com.atlassian.plugin.Plugin)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: void publishModuleDisabledEvents(com.atlassian.plugin.ModuleDescriptor,boolean)>(r1, 1) in <com.atlassian.plugin.manager.DefaultPluginManager: void notifyModuleDisabled(com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void publishModuleDisabledEvents(com.atlassian.plugin.ModuleDescriptor,boolean)>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$lambda_publishModuleDisabledEvents_44__82: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.ModuleDescriptor,boolean)>(r0, r1, z0) in <com.atlassian.plugin.manager.DefaultPluginManager: void publishModuleDisabledEvents(com.atlassian.plugin.ModuleDescriptor,boolean)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_publishModuleDisabledEvents_44__82: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.ModuleDescriptor,boolean)>
VIRTUAL edge: virtualinvoke $r2.<com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)>($r3) in <com.atlassian.plugin.manager.DefaultPluginManager: void notifyModuleEnabled(com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)>
INTERFACE edge: interfaceinvoke $r2.<com.atlassian.plugin.event.PluginEventManager: void broadcast(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void broadcastIgnoreError(java.lang.Object)> ==> <com.atlassian.plugin.event.PluginEventManager: void broadcast(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<com.atlassian.plugin.event.PluginEventManager: void broadcast(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void broadcastIgnoreError(java.lang.Object)> ==> <com.atlassian.plugin.event.impl.DefaultPluginEventManager: void broadcast(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r3.<com.atlassian.plugin.manager.PluginTransactionContext: void addEvent(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void broadcastIgnoreError(java.lang.Object)> ==> <com.atlassian.plugin.manager.PluginTransactionContext: void addEvent(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>("Error broadcasting \'{}\': {}. Continuing anyway.", r1, $r4) in <com.atlassian.plugin.manager.DefaultPluginManager: void broadcastIgnoreError(java.lang.Object)> ==> <org.slf4j.Logger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>
INTERFACE edge: r8 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void broadcastIgnoreError(java.lang.Object)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r8 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void broadcastIgnoreError(java.lang.Object)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $r2 = interfaceinvoke r1.<com.atlassian.plugin.ModuleDescriptor: java.lang.String getCompleteKey()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void disablePluginModuleNoPersist(com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.String getCompleteKey()>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: boolean isPluginModuleEnabled(java.lang.String)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager: void disablePluginModuleNoPersist(com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: boolean isPluginModuleEnabled(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: void publishModuleDisabledEvents(com.atlassian.plugin.ModuleDescriptor,boolean)>(r1, 0) in <com.atlassian.plugin.manager.DefaultPluginManager: void disablePluginModuleNoPersist(com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void publishModuleDisabledEvents(com.atlassian.plugin.ModuleDescriptor,boolean)>
VIRTUAL edge: virtualinvoke $r2.<com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)>($r3) in <com.atlassian.plugin.manager.DefaultPluginManager: void broadcastPluginDisabling(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)>
INTERFACE edge: $r1 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginState getPluginState()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void disablePluginWithModuleEvents(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: com.atlassian.plugin.PluginState getPluginState()>
INTERFACE edge: $r1 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginState getPluginState()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void disablePluginWithModuleEvents(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginState getPluginState()>
INTERFACE edge: interfaceinvoke r0.<com.atlassian.plugin.Plugin: void disable()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void disablePluginWithModuleEvents(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: void disable()>
SPECIAL edge: specialinvoke r3.<com.atlassian.plugin.manager.DefaultPluginManager: void disablePluginModules(com.atlassian.plugin.Plugin)>(r0) in <com.atlassian.plugin.manager.DefaultPluginManager: void disablePluginWithModuleEvents(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void disablePluginModules(com.atlassian.plugin.Plugin)>
VIRTUAL edge: virtualinvoke $r2.<com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)>($r3) in <com.atlassian.plugin.manager.DefaultPluginManager: void broadcastPluginDisabled(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)>
VIRTUAL edge: virtualinvoke $r2.<com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)>($r3) in <com.atlassian.plugin.manager.DefaultPluginManager: void enableDependentPlugins(java.util.Collection)> ==> <com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)>
INTERFACE edge: $r5 = interfaceinvoke $r2.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($r4) in <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.Plugin findDelayedPlugin(java.lang.String)> ==> <java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>
SPECIAL edge: $r3 = specialinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.manager.DependentPlugins disablePlugins(java.util.Collection,java.util.Set,boolean)>(r1, r2, 1) in <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.manager.DependentPlugins disablePluginsAndTheirDependencies(java.util.Collection,java.util.Set)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.manager.DependentPlugins disablePlugins(java.util.Collection,java.util.Set,boolean)>
CLINIT edge: $r0 = new com.atlassian.plugin.manager.DependentPlugins in <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.manager.DependentPlugins disablePlugins(java.util.Collection,java.util.Set,boolean)> ==> <com.atlassian.plugin.manager.DependentPlugins: void <clinit>()>
STATIC edge: $r7 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$lambda_disablePlugins_25__55: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,boolean,com.atlassian.plugin.manager.DependentPlugins,java.util.Collection)>(r2, z0, $r0, r1) in <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.manager.DependentPlugins disablePlugins(java.util.Collection,java.util.Set,boolean)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_disablePlugins_25__55: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,boolean,com.atlassian.plugin.manager.DependentPlugins,java.util.Collection)>
VIRTUAL edge: virtualinvoke $r4.<com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)>($r5) in <com.atlassian.plugin.manager.DefaultPluginManager: void reenableDependent(java.util.Collection,com.atlassian.plugin.manager.DependentPlugins,com.atlassian.plugin.PluginState)> ==> <com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)>
SPECIAL edge: specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("You must specify a plugin key to disable.") in <com.atlassian.plugin.manager.DefaultPluginManager: void disablePluginInternal(java.lang.String,boolean)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)>($r3) in <com.atlassian.plugin.manager.DefaultPluginManager: void disablePluginInternal(java.lang.String,boolean)> ==> <com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)>
VIRTUAL edge: $r5 = virtualinvoke r3.<com.atlassian.plugin.descriptors.UnloadableModuleDescriptor: java.lang.String getErrorText()>() in <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.impl.UnloadablePlugin replacePluginWithUnloadablePlugin(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor,java.lang.Throwable)> ==> <com.atlassian.plugin.descriptors.AbstractNoOpModuleDescriptor: java.lang.String getErrorText()>
VIRTUAL edge: virtualinvoke r4.<com.atlassian.plugin.impl.UnloadablePlugin: void setErrorText(java.lang.String)>($r5) in <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.impl.UnloadablePlugin replacePluginWithUnloadablePlugin(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor,java.lang.Throwable)> ==> <com.atlassian.plugin.impl.UnloadablePlugin: void setErrorText(java.lang.String)>
INTERFACE edge: interfaceinvoke $r7.<com.atlassian.plugin.PluginRegistry$ReadWrite: void put(com.atlassian.plugin.Plugin)>(r4) in <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.impl.UnloadablePlugin replacePluginWithUnloadablePlugin(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor,java.lang.Throwable)> ==> <com.atlassian.plugin.manager.PluginRegistryImpl: void put(com.atlassian.plugin.Plugin)>
VIRTUAL edge: $r6 = virtualinvoke $r4.<com.atlassian.plugin.manager.PluginTransactionContext: java.lang.Object wrap(java.util.function.Supplier)>($r5) in <com.atlassian.plugin.manager.DefaultPluginManager: boolean enableConfiguredPluginModule(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor,java.util.Set)> ==> <com.atlassian.plugin.manager.PluginTransactionContext: java.lang.Object wrap(java.util.function.Supplier)>
VIRTUAL edge: $z0 = virtualinvoke $r7.<java.lang.Boolean: boolean booleanValue()>() in <com.atlassian.plugin.manager.DefaultPluginManager: boolean enableConfiguredPluginModule(com.atlassian.plugin.Plugin,com.atlassian.plugin.ModuleDescriptor,java.util.Set)> ==> <java.lang.Boolean: boolean booleanValue()>
VIRTUAL edge: $r4 = virtualinvoke $r2.<com.atlassian.plugin.manager.PluginTransactionContext: java.lang.Object wrap(java.util.function.Supplier)>($r3) in <com.atlassian.plugin.manager.DefaultPluginManager: boolean enableConfiguredPluginModules(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.PluginTransactionContext: java.lang.Object wrap(java.util.function.Supplier)>
VIRTUAL edge: $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>() in <com.atlassian.plugin.manager.DefaultPluginManager: boolean enableConfiguredPluginModules(com.atlassian.plugin.Plugin)> ==> <java.lang.Boolean: boolean booleanValue()>
SPECIAL edge: specialinvoke $r23.<java.util.ArrayList: void <init>()>() in <com.atlassian.plugin.manager.PluginEnabler: java.util.Collection enableAllRecursively(java.util.Collection)> ==> <java.util.ArrayList: void <init>()>
INTERFACE edge: interfaceinvoke $r23.<java.util.Collection: boolean add(java.lang.Object)>($r15) in <com.atlassian.plugin.manager.PluginEnabler: java.util.Collection enableAllRecursively(java.util.Collection)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: r22 = interfaceinvoke $r23.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.PluginEnabler: java.util.Collection enableAllRecursively(java.util.Collection)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke $r24.<java.util.HashSet: void <init>()>() in <com.atlassian.plugin.manager.PluginEnabler: java.util.Collection enableAllRecursively(java.util.Collection)> ==> <java.util.HashSet: void <init>()>
INTERFACE edge: r19 = interfaceinvoke $r24.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.PluginEnabler: java.util.Collection enableAllRecursively(java.util.Collection)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r17 = interfaceinvoke r4.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.PluginEnabler: java.util.Collection enableAllRecursively(java.util.Collection)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r17 = interfaceinvoke r4.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.PluginEnabler: java.util.Collection enableAllRecursively(java.util.Collection)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r17 = interfaceinvoke r4.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.PluginEnabler: java.util.Collection enableAllRecursively(java.util.Collection)> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r17 = interfaceinvoke r4.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.PluginEnabler: java.util.Collection enableAllRecursively(java.util.Collection)> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r17 = interfaceinvoke r4.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.PluginEnabler: java.util.Collection enableAllRecursively(java.util.Collection)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: r17 = interfaceinvoke r4.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.PluginEnabler: java.util.Collection enableAllRecursively(java.util.Collection)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke r5.<com.atlassian.plugin.manager.PluginEnabler: void scanDependencies(com.atlassian.plugin.Plugin,java.util.Set)>(r18, $r24) in <com.atlassian.plugin.manager.PluginEnabler: java.util.Collection enableAllRecursively(java.util.Collection)> ==> <com.atlassian.plugin.manager.PluginEnabler: void scanDependencies(com.atlassian.plugin.Plugin,java.util.Set)>
VIRTUAL edge: virtualinvoke r5.<com.atlassian.plugin.manager.PluginEnabler: void enable(java.util.Collection)>($r23) in <com.atlassian.plugin.manager.PluginEnabler: java.util.Collection enableAllRecursively(java.util.Collection)> ==> <com.atlassian.plugin.manager.PluginEnabler: void enable(java.util.Collection)>
INTERFACE edge: $r15 = interfaceinvoke $r14.<com.atlassian.plugin.PluginAccessor: com.atlassian.plugin.Plugin getPlugin(java.lang.String)>(r20) in <com.atlassian.plugin.manager.PluginEnabler: java.util.Collection enableAllRecursively(java.util.Collection)> ==> <com.atlassian.plugin.manager.ProductPluginAccessor: com.atlassian.plugin.Plugin getPlugin(java.lang.String)>
INTERFACE edge: $r15 = interfaceinvoke $r14.<com.atlassian.plugin.PluginAccessor: com.atlassian.plugin.Plugin getPlugin(java.lang.String)>(r20) in <com.atlassian.plugin.manager.PluginEnabler: java.util.Collection enableAllRecursively(java.util.Collection)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase: com.atlassian.plugin.Plugin getPlugin(java.lang.String)>
INTERFACE edge: $r15 = interfaceinvoke $r14.<com.atlassian.plugin.PluginAccessor: com.atlassian.plugin.Plugin getPlugin(java.lang.String)>(r20) in <com.atlassian.plugin.manager.PluginEnabler: java.util.Collection enableAllRecursively(java.util.Collection)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.Plugin getPlugin(java.lang.String)>
INTERFACE edge: $r15 = interfaceinvoke $r14.<com.atlassian.plugin.PluginAccessor: com.atlassian.plugin.Plugin getPlugin(java.lang.String)>(r20) in <com.atlassian.plugin.manager.PluginEnabler: java.util.Collection enableAllRecursively(java.util.Collection)> ==> <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: com.atlassian.plugin.Plugin getPlugin(java.lang.String)>
SPECIAL edge: specialinvoke $r25.<com.google.common.collect.ImmutableList$Builder: void <init>()>() in <com.atlassian.plugin.manager.PluginEnabler: java.util.Collection enableAllRecursively(java.util.Collection)> ==> <com.google.common.collect.ImmutableList$Builder: void <init>()>
INTERFACE edge: $r10 = interfaceinvoke r9.<com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginState getPluginState()>() in <com.atlassian.plugin.manager.PluginEnabler: java.util.Collection enableAllRecursively(java.util.Collection)> ==> <com.atlassian.plugin.impl.AbstractPlugin: com.atlassian.plugin.PluginState getPluginState()>
INTERFACE edge: $r10 = interfaceinvoke r9.<com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginState getPluginState()>() in <com.atlassian.plugin.manager.PluginEnabler: java.util.Collection enableAllRecursively(java.util.Collection)> ==> <com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginState getPluginState()>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: void unloadPlugin(com.atlassian.plugin.Plugin)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void uninstallNoEvent(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void unloadPlugin(com.atlassian.plugin.Plugin)>
VIRTUAL edge: virtualinvoke $r2.<com.atlassian.plugin.manager.PluginPersistentStateModifier: void removeState(com.atlassian.plugin.Plugin)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void uninstallNoEvent(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.PluginPersistentStateModifier: void removeState(com.atlassian.plugin.Plugin)>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$lambda_unloadPlugin_21__51: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.Plugin)>(r0, r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void unloadPlugin(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_unloadPlugin_21__51: java.lang.Runnable bootstrap$(com.atlassian.plugin.manager.DefaultPluginManager,com.atlassian.plugin.Plugin)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Set: boolean addAll(java.util.Collection)>(r1) in <com.atlassian.plugin.manager.PluginEnabler: void enable(java.util.Collection)> ==> <java.util.AbstractCollection: boolean addAll(java.util.Collection)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Set: boolean addAll(java.util.Collection)>(r1) in <com.atlassian.plugin.manager.PluginEnabler: void enable(java.util.Collection)> ==> <java.util.concurrent.CopyOnWriteArraySet: boolean addAll(java.util.Collection)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Set: boolean addAll(java.util.Collection)>(r1) in <com.atlassian.plugin.manager.PluginEnabler: void enable(java.util.Collection)> ==> <java.util.TreeSet: boolean addAll(java.util.Collection)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)>(r1) in <com.atlassian.plugin.manager.PluginEnabler: void enable(java.util.Collection)> ==> <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)>
INTERFACE edge: interfaceinvoke $r3.<java.util.Set: boolean removeAll(java.util.Collection)>(r1) in <com.atlassian.plugin.manager.PluginEnabler: void enable(java.util.Collection)> ==> <java.util.AbstractSet: boolean removeAll(java.util.Collection)>
INTERFACE edge: interfaceinvoke $r3.<java.util.Set: boolean removeAll(java.util.Collection)>(r1) in <com.atlassian.plugin.manager.PluginEnabler: void enable(java.util.Collection)> ==> <java.util.concurrent.CopyOnWriteArraySet: boolean removeAll(java.util.Collection)>
INTERFACE edge: interfaceinvoke $r6.<java.util.Set: boolean removeAll(java.util.Collection)>(r1) in <com.atlassian.plugin.manager.PluginEnabler: void enable(java.util.Collection)> ==> <java.util.AbstractSet: boolean removeAll(java.util.Collection)>
INTERFACE edge: interfaceinvoke $r6.<java.util.Set: boolean removeAll(java.util.Collection)>(r1) in <com.atlassian.plugin.manager.PluginEnabler: void enable(java.util.Collection)> ==> <java.util.concurrent.CopyOnWriteArraySet: boolean removeAll(java.util.Collection)>
CLINIT edge: $r1 = <com.atlassian.plugin.manager.PluginEnabler: org.slf4j.Logger log> in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <com.atlassian.plugin.manager.PluginEnabler: void <clinit>()>
STATIC edge: staticinvoke <com.atlassian.plugin.util.WaitUntil: boolean invoke(com.atlassian.plugin.util.WaitUntil$WaitCondition,int,java.util.concurrent.TimeUnit,int)>($r9, $i3, $r11, 1) in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <com.atlassian.plugin.util.WaitUntil: boolean invoke(com.atlassian.plugin.util.WaitUntil$WaitCondition,int,java.util.concurrent.TimeUnit,int)>
STATIC edge: $i3 = staticinvoke <com.atlassian.plugin.util.PluginUtils: int getDefaultEnablingWaitPeriod()>() in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <com.atlassian.plugin.util.PluginUtils: int getDefaultEnablingWaitPeriod()>
STATIC edge: $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2) in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1) in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
CLINIT edge: staticinvoke <com.atlassian.plugin.util.WaitUntil: boolean invoke(com.atlassian.plugin.util.WaitUntil$WaitCondition,int,java.util.concurrent.TimeUnit,int)>($r9, $i3, $r11, 1) in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <com.atlassian.plugin.util.WaitUntil: void <clinit>()>
CLINIT edge: $r11 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS> in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <java.util.concurrent.TimeUnit: void <clinit>()>
CLINIT edge: $i3 = staticinvoke <com.atlassian.plugin.util.PluginUtils: int getDefaultEnablingWaitPeriod()>() in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <com.atlassian.plugin.util.PluginUtils: void <clinit>()>
CLINIT edge: $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2) in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: $r7 = <com.atlassian.plugin.manager.PluginEnabler: org.slf4j.Logger log> in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <com.atlassian.plugin.manager.PluginEnabler: void <clinit>()>
CLINIT edge: $r29 = <com.atlassian.plugin.manager.PluginEnabler: org.slf4j.Logger log> in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <com.atlassian.plugin.manager.PluginEnabler: void <clinit>()>
CLINIT edge: $r23 = <com.atlassian.plugin.manager.PluginEnabler: org.slf4j.Logger log> in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <com.atlassian.plugin.manager.PluginEnabler: void <clinit>()>
CLINIT edge: $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1) in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: $r36 = <com.atlassian.plugin.manager.PluginEnabler: org.slf4j.Logger log> in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <com.atlassian.plugin.manager.PluginEnabler: void <clinit>()>
CLINIT edge: $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <java.lang.Integer: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<java.util.Properties: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.Map parseFileNamedByPropertyAsMap(java.lang.String)> ==> <java.util.Properties: void <init>()>
VIRTUAL edge: virtualinvoke $r0.<java.util.Properties: void load(java.io.InputStream)>($r5) in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.Map parseFileNamedByPropertyAsMap(java.lang.String)> ==> <java.util.Properties: void load(java.io.InputStream)>
SPECIAL edge: specialinvoke $r5.<java.io.FileInputStream: void <init>(java.lang.String)>(r3) in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.Map parseFileNamedByPropertyAsMap(java.lang.String)> ==> <java.io.FileInputStream: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r5.<java.io.FileInputStream: void close()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.Map parseFileNamedByPropertyAsMap(java.lang.String)> ==> <java.io.FileInputStream: void close()>
VIRTUAL edge: virtualinvoke $r5.<java.io.FileInputStream: void close()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.Map parseFileNamedByPropertyAsMap(java.lang.String)> ==> <java.io.FileInputStream: void close()>
VIRTUAL edge: virtualinvoke $r5.<java.io.FileInputStream: void close()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.Map parseFileNamedByPropertyAsMap(java.lang.String)> ==> <java.io.FileInputStream: void close()>
VIRTUAL edge: virtualinvoke $r13.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r9) in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.Map parseFileNamedByPropertyAsMap(java.lang.String)> ==> <java.lang.Throwable: void addSuppressed(java.lang.Throwable)>
SPECIAL edge: $r19 = specialinvoke r4.<com.atlassian.plugin.manager.DefaultPluginManager: java.util.Map propertiesToMap(java.util.Properties)>($r0) in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.Map parseFileNamedByPropertyAsMap(java.lang.String)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: java.util.Map propertiesToMap(java.util.Properties)>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.manager.DefaultPluginManager$lambda_propertiesToMap_2__36: java.util.function.BiConsumer bootstrap$(java.util.Map)>($r0) in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.Map propertiesToMap(java.util.Properties)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_propertiesToMap_2__36: java.util.function.BiConsumer bootstrap$(java.util.Map)>
INTERFACE edge: r1 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultPluginManager: boolean pluginVersionIsAcceptable(com.atlassian.plugin.Plugin,java.util.Map)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: r1 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultPluginManager: boolean pluginVersionIsAcceptable(com.atlassian.plugin.Plugin,java.util.Map)> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
INTERFACE edge: r14 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginInformation getPluginInformation()>() in <com.atlassian.plugin.manager.DefaultPluginManager: boolean pluginVersionIsAcceptable(com.atlassian.plugin.Plugin,java.util.Map)> ==> <com.atlassian.plugin.impl.AbstractPlugin: com.atlassian.plugin.PluginInformation getPluginInformation()>
INTERFACE edge: r14 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginInformation getPluginInformation()>() in <com.atlassian.plugin.manager.DefaultPluginManager: boolean pluginVersionIsAcceptable(com.atlassian.plugin.Plugin,java.util.Map)> ==> <com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginInformation getPluginInformation()>
INTERFACE edge: $r3 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager: boolean pluginVersionIsAcceptable(com.atlassian.plugin.Plugin,java.util.Map)> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager: boolean pluginVersionIsAcceptable(com.atlassian.plugin.Plugin,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager: boolean pluginVersionIsAcceptable(com.atlassian.plugin.Plugin,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager: boolean pluginVersionIsAcceptable(com.atlassian.plugin.Plugin,java.util.Map)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager: boolean pluginVersionIsAcceptable(com.atlassian.plugin.Plugin,java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $r15 = virtualinvoke r14.<com.atlassian.plugin.PluginInformation: java.lang.String getVersion()>() in <com.atlassian.plugin.manager.DefaultPluginManager: boolean pluginVersionIsAcceptable(com.atlassian.plugin.Plugin,java.util.Map)> ==> <com.atlassian.plugin.PluginInformation: java.lang.String getVersion()>
SPECIAL edge: specialinvoke $r17.<com.atlassian.plugin.util.VersionStringComparator: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager: boolean pluginVersionIsAcceptable(com.atlassian.plugin.Plugin,java.util.Map)> ==> <com.atlassian.plugin.util.VersionStringComparator: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r17.<com.atlassian.plugin.util.VersionStringComparator: int compare(java.lang.String,java.lang.String)>(r6, r5) in <com.atlassian.plugin.manager.DefaultPluginManager: boolean pluginVersionIsAcceptable(com.atlassian.plugin.Plugin,java.util.Map)> ==> <com.atlassian.plugin.util.VersionStringComparator: int compare(java.lang.String,java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r18.<java.lang.IllegalArgumentException: java.lang.String getMessage()>() in <com.atlassian.plugin.manager.DefaultPluginManager: boolean pluginVersionIsAcceptable(com.atlassian.plugin.Plugin,java.util.Map)> ==> <java.lang.Throwable: java.lang.String getMessage()>
VIRTUAL edge: $r12 = virtualinvoke $r18.<java.lang.IllegalArgumentException: java.lang.String getMessage()>() in <com.atlassian.plugin.manager.DefaultPluginManager: boolean pluginVersionIsAcceptable(com.atlassian.plugin.Plugin,java.util.Map)> ==> <java.util.regex.PatternSyntaxException: java.lang.String getMessage()>
INTERFACE edge: $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void discardPlugin(com.atlassian.plugin.loaders.PluginLoader,com.atlassian.plugin.Plugin)> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void discardPlugin(com.atlassian.plugin.loaders.PluginLoader,com.atlassian.plugin.Plugin)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void discardPlugin(com.atlassian.plugin.loaders.PluginLoader,com.atlassian.plugin.Plugin)> ==> <java.util.TreeMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void discardPlugin(com.atlassian.plugin.loaders.PluginLoader,com.atlassian.plugin.Plugin)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void discardPlugin(com.atlassian.plugin.loaders.PluginLoader,com.atlassian.plugin.Plugin)> ==> <java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<com.atlassian.plugin.loaders.DiscardablePluginLoader: void discardPlugin(com.atlassian.plugin.Plugin)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void discardPlugin(com.atlassian.plugin.loaders.PluginLoader,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.loaders.ForwardingPluginLoader: void discardPlugin(com.atlassian.plugin.Plugin)>
INTERFACE edge: interfaceinvoke $r10.<com.atlassian.plugin.loaders.DiscardablePluginLoader: void discardPlugin(com.atlassian.plugin.Plugin)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void discardPlugin(com.atlassian.plugin.loaders.PluginLoader,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.loaders.ScanningPluginLoader: void discardPlugin(com.atlassian.plugin.Plugin)>
INTERFACE edge: interfaceinvoke $r10.<com.atlassian.plugin.loaders.DiscardablePluginLoader: void discardPlugin(com.atlassian.plugin.Plugin)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void discardPlugin(com.atlassian.plugin.loaders.PluginLoader,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: void discardPlugin(com.atlassian.plugin.Plugin)>
INTERFACE edge: interfaceinvoke $r6.<com.atlassian.plugin.loaders.DiscardablePluginLoader: void discardPlugin(com.atlassian.plugin.Plugin)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void discardPlugin(com.atlassian.plugin.loaders.PluginLoader,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.loaders.ForwardingPluginLoader: void discardPlugin(com.atlassian.plugin.Plugin)>
INTERFACE edge: interfaceinvoke $r6.<com.atlassian.plugin.loaders.DiscardablePluginLoader: void discardPlugin(com.atlassian.plugin.Plugin)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void discardPlugin(com.atlassian.plugin.loaders.PluginLoader,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.loaders.ScanningPluginLoader: void discardPlugin(com.atlassian.plugin.Plugin)>
INTERFACE edge: interfaceinvoke $r6.<com.atlassian.plugin.loaders.DiscardablePluginLoader: void discardPlugin(com.atlassian.plugin.Plugin)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void discardPlugin(com.atlassian.plugin.loaders.PluginLoader,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: void discardPlugin(com.atlassian.plugin.Plugin)>
INTERFACE edge: $r3 = interfaceinvoke r1.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void discardPlugin(com.atlassian.plugin.loaders.PluginLoader,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r3 = interfaceinvoke r1.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void discardPlugin(com.atlassian.plugin.loaders.PluginLoader,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
INTERFACE edge: $r4 = interfaceinvoke r1.<com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginInformation getPluginInformation()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void discardPlugin(com.atlassian.plugin.loaders.PluginLoader,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: com.atlassian.plugin.PluginInformation getPluginInformation()>
INTERFACE edge: $r4 = interfaceinvoke r1.<com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginInformation getPluginInformation()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void discardPlugin(com.atlassian.plugin.loaders.PluginLoader,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginInformation getPluginInformation()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<com.atlassian.plugin.PluginInformation: java.lang.String getVersion()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void discardPlugin(com.atlassian.plugin.loaders.PluginLoader,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.PluginInformation: java.lang.String getVersion()>
INTERFACE edge: interfaceinvoke $r2.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Ignoring discardPlugin({}, version {}) as delegate is not a DiscardablePluginLoader", $r3, $r5) in <com.atlassian.plugin.manager.DefaultPluginManager: void discardPlugin(com.atlassian.plugin.loaders.PluginLoader,com.atlassian.plugin.Plugin)> ==> <org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>
SPECIAL edge: $r3 = specialinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.manager.DependentPlugins disablePlugins(java.util.Collection,java.util.Set,boolean)>(r1, r2, 0) in <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.manager.DependentPlugins disableOnlyPluginDependencies(java.util.Collection,java.util.Set)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.manager.DependentPlugins disablePlugins(java.util.Collection,java.util.Set,boolean)>
VIRTUAL edge: virtualinvoke $r3.<com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)>($r4) in <com.atlassian.plugin.manager.DefaultPluginManager: void updatePlugin(com.atlassian.plugin.Plugin,com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)>
SPECIAL edge: $r5 = specialinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: java.util.stream.Stream getModuleDescriptors(java.util.Collection,java.util.function.Predicate)>(r2, $r4) in <com.atlassian.plugin.manager.DefaultPluginManager: boolean isPluginEnabledInSafeMode(com.atlassian.plugin.Plugin,java.util.Collection)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: java.util.stream.Stream getModuleDescriptors(java.util.Collection,java.util.function.Predicate)>
INTERFACE edge: $r7 = interfaceinvoke $r5.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r6) in <com.atlassian.plugin.manager.DefaultPluginManager: boolean isPluginEnabledInSafeMode(com.atlassian.plugin.Plugin,java.util.Collection)> ==> <java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>
INTERFACE edge: $z0 = interfaceinvoke $r3.<com.atlassian.plugin.manager.SafeModeManager: boolean pluginShouldBeStarted(com.atlassian.plugin.Plugin,java.lang.Iterable)>(r1, $r8) in <com.atlassian.plugin.manager.DefaultPluginManager: boolean isPluginEnabledInSafeMode(com.atlassian.plugin.Plugin,java.util.Collection)> ==> <com.atlassian.plugin.manager.SafeModeManager$1: boolean pluginShouldBeStarted(com.atlassian.plugin.Plugin,java.lang.Iterable)>
INTERFACE edge: $z0 = interfaceinvoke $r3.<com.atlassian.plugin.manager.SafeModeManager: boolean pluginShouldBeStarted(com.atlassian.plugin.Plugin,java.lang.Iterable)>(r1, $r8) in <com.atlassian.plugin.manager.DefaultPluginManager: boolean isPluginEnabledInSafeMode(com.atlassian.plugin.Plugin,java.util.Collection)> ==> <com.atlassian.plugin.manager.DefaultSafeModeManager: boolean pluginShouldBeStarted(com.atlassian.plugin.Plugin,java.lang.Iterable)>
INTERFACE edge: $z0 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: boolean isUninstallable()>() in <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.loaders.PluginLoader ensurePluginAndLoaderSupportsUninstall(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.DefaultDynamicPlugin: boolean isUninstallable()>
INTERFACE edge: $z0 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: boolean isUninstallable()>() in <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.loaders.PluginLoader ensurePluginAndLoaderSupportsUninstall(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.XmlDynamicPlugin: boolean isUninstallable()>
INTERFACE edge: $z0 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: boolean isUninstallable()>() in <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.loaders.PluginLoader ensurePluginAndLoaderSupportsUninstall(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.StaticPlugin: boolean isUninstallable()>
INTERFACE edge: $z0 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: boolean isUninstallable()>() in <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.loaders.PluginLoader ensurePluginAndLoaderSupportsUninstall(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.UnloadablePlugin: boolean isUninstallable()>
SPECIAL edge: specialinvoke $r15.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.loaders.PluginLoader ensurePluginAndLoaderSupportsUninstall(com.atlassian.plugin.Plugin)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r12 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Plugin is not uninstallable: ") in <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.loaders.PluginLoader ensurePluginAndLoaderSupportsUninstall(com.atlassian.plugin.Plugin)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0) in <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.loaders.PluginLoader ensurePluginAndLoaderSupportsUninstall(com.atlassian.plugin.Plugin)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.loaders.PluginLoader ensurePluginAndLoaderSupportsUninstall(com.atlassian.plugin.Plugin)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r16.<com.atlassian.plugin.PluginException: void <init>(java.lang.String)>($r14) in <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.loaders.PluginLoader ensurePluginAndLoaderSupportsUninstall(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.PluginException: void <init>(java.lang.String)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0) in <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.loaders.PluginLoader ensurePluginAndLoaderSupportsUninstall(com.atlassian.plugin.Plugin)> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0) in <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.loaders.PluginLoader ensurePluginAndLoaderSupportsUninstall(com.atlassian.plugin.Plugin)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0) in <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.loaders.PluginLoader ensurePluginAndLoaderSupportsUninstall(com.atlassian.plugin.Plugin)> ==> <java.util.TreeMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0) in <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.loaders.PluginLoader ensurePluginAndLoaderSupportsUninstall(com.atlassian.plugin.Plugin)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0) in <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.loaders.PluginLoader ensurePluginAndLoaderSupportsUninstall(com.atlassian.plugin.Plugin)> ==> <java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $z1 = interfaceinvoke r4.<com.atlassian.plugin.loaders.PluginLoader: boolean supportsRemoval()>() in <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.loaders.PluginLoader ensurePluginAndLoaderSupportsUninstall(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.loaders.ForwardingPluginLoader: boolean supportsRemoval()>
INTERFACE edge: $z1 = interfaceinvoke r4.<com.atlassian.plugin.loaders.PluginLoader: boolean supportsRemoval()>() in <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.loaders.PluginLoader ensurePluginAndLoaderSupportsUninstall(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.loaders.ScanningPluginLoader: boolean supportsRemoval()>
INTERFACE edge: $z1 = interfaceinvoke r4.<com.atlassian.plugin.loaders.PluginLoader: boolean supportsRemoval()>() in <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.loaders.PluginLoader ensurePluginAndLoaderSupportsUninstall(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.loaders.SinglePluginLoader: boolean supportsRemoval()>
INTERFACE edge: $z1 = interfaceinvoke r4.<com.atlassian.plugin.loaders.PluginLoader: boolean supportsRemoval()>() in <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.loaders.PluginLoader ensurePluginAndLoaderSupportsUninstall(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.loaders.ClassPathPluginLoader: boolean supportsRemoval()>
SPECIAL edge: specialinvoke $r17.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.loaders.PluginLoader ensurePluginAndLoaderSupportsUninstall(com.atlassian.plugin.Plugin)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not uninstalling plugin - loader doesn\'t allow removal. Plugin: ") in <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.loaders.PluginLoader ensurePluginAndLoaderSupportsUninstall(com.atlassian.plugin.Plugin)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0) in <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.loaders.PluginLoader ensurePluginAndLoaderSupportsUninstall(com.atlassian.plugin.Plugin)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.loaders.PluginLoader ensurePluginAndLoaderSupportsUninstall(com.atlassian.plugin.Plugin)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r18.<com.atlassian.plugin.PluginException: void <init>(java.lang.String)>($r9) in <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.loaders.PluginLoader ensurePluginAndLoaderSupportsUninstall(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.PluginException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)>($r3) in <com.atlassian.plugin.manager.DefaultPluginManager: void notifyPluginDisabled(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)>
VIRTUAL edge: virtualinvoke $r2.<com.atlassian.plugin.classloader.PluginsClassLoader: void notifyUninstallPlugin(com.atlassian.plugin.Plugin)>(r1) in <com.atlassian.plugin.manager.DefaultPluginManager: void notifyUninstallPlugin(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.classloader.PluginsClassLoader: void notifyUninstallPlugin(com.atlassian.plugin.Plugin)>
INTERFACE edge: $r3 = interfaceinvoke r1.<com.atlassian.plugin.Plugin: java.util.Collection getModuleDescriptors()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void notifyUninstallPlugin(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.util.Collection getModuleDescriptors()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void notifyUninstallPlugin(com.atlassian.plugin.Plugin)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void notifyUninstallPlugin(com.atlassian.plugin.Plugin)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void notifyUninstallPlugin(com.atlassian.plugin.Plugin)> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void notifyUninstallPlugin(com.atlassian.plugin.Plugin)> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void notifyUninstallPlugin(com.atlassian.plugin.Plugin)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void notifyUninstallPlugin(com.atlassian.plugin.Plugin)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: interfaceinvoke r6.<com.atlassian.plugin.ModuleDescriptor: void destroy()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void notifyUninstallPlugin(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void destroy()>
INTERFACE edge: $z0 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: boolean isUninstallable()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void removePluginFromLoader(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.DefaultDynamicPlugin: boolean isUninstallable()>
INTERFACE edge: $z0 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: boolean isUninstallable()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void removePluginFromLoader(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.XmlDynamicPlugin: boolean isUninstallable()>
INTERFACE edge: $z0 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: boolean isUninstallable()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void removePluginFromLoader(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.StaticPlugin: boolean isUninstallable()>
INTERFACE edge: $z0 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: boolean isUninstallable()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void removePluginFromLoader(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.UnloadablePlugin: boolean isUninstallable()>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0) in <com.atlassian.plugin.manager.DefaultPluginManager: void removePluginFromLoader(com.atlassian.plugin.Plugin)> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0) in <com.atlassian.plugin.manager.DefaultPluginManager: void removePluginFromLoader(com.atlassian.plugin.Plugin)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0) in <com.atlassian.plugin.manager.DefaultPluginManager: void removePluginFromLoader(com.atlassian.plugin.Plugin)> ==> <java.util.TreeMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0) in <com.atlassian.plugin.manager.DefaultPluginManager: void removePluginFromLoader(com.atlassian.plugin.Plugin)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0) in <com.atlassian.plugin.manager.DefaultPluginManager: void removePluginFromLoader(com.atlassian.plugin.Plugin)> ==> <java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>
INTERFACE edge: interfaceinvoke r6.<com.atlassian.plugin.loaders.PluginLoader: void removePlugin(com.atlassian.plugin.Plugin)>(r0) in <com.atlassian.plugin.manager.DefaultPluginManager: void removePluginFromLoader(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.loaders.ForwardingPluginLoader: void removePlugin(com.atlassian.plugin.Plugin)>
INTERFACE edge: interfaceinvoke r6.<com.atlassian.plugin.loaders.PluginLoader: void removePlugin(com.atlassian.plugin.Plugin)>(r0) in <com.atlassian.plugin.manager.DefaultPluginManager: void removePluginFromLoader(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.loaders.ScanningPluginLoader: void removePlugin(com.atlassian.plugin.Plugin)>
INTERFACE edge: interfaceinvoke r6.<com.atlassian.plugin.loaders.PluginLoader: void removePlugin(com.atlassian.plugin.Plugin)>(r0) in <com.atlassian.plugin.manager.DefaultPluginManager: void removePluginFromLoader(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: void removePlugin(com.atlassian.plugin.Plugin)>
INTERFACE edge: interfaceinvoke r6.<com.atlassian.plugin.loaders.PluginLoader: void removePlugin(com.atlassian.plugin.Plugin)>(r0) in <com.atlassian.plugin.manager.DefaultPluginManager: void removePluginFromLoader(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.loaders.SinglePluginLoader: void removePlugin(com.atlassian.plugin.Plugin)>
INTERFACE edge: interfaceinvoke r6.<com.atlassian.plugin.loaders.PluginLoader: void removePlugin(com.atlassian.plugin.Plugin)>(r0) in <com.atlassian.plugin.manager.DefaultPluginManager: void removePluginFromLoader(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.loaders.ClassPathPluginLoader: void removePlugin(com.atlassian.plugin.Plugin)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r0) in <com.atlassian.plugin.manager.DefaultPluginManager: void removePluginFromLoader(com.atlassian.plugin.Plugin)> ==> <java.util.HashMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r0) in <com.atlassian.plugin.manager.DefaultPluginManager: void removePluginFromLoader(com.atlassian.plugin.Plugin)> ==> <java.util.Hashtable: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r0) in <com.atlassian.plugin.manager.DefaultPluginManager: void removePluginFromLoader(com.atlassian.plugin.Plugin)> ==> <java.util.TreeMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r0) in <com.atlassian.plugin.manager.DefaultPluginManager: void removePluginFromLoader(com.atlassian.plugin.Plugin)> ==> <java.util.jar.Attributes: java.lang.Object remove(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r3.<com.atlassian.plugin.manager.PluginPersistentStateModifier: void setPluginRestartState(java.lang.String,com.atlassian.plugin.PluginRestartState)>(r1, r2) in <com.atlassian.plugin.manager.DefaultPluginManager: void updateRequiresRestartState(java.lang.String,com.atlassian.plugin.PluginRestartState)> ==> <com.atlassian.plugin.manager.PluginPersistentStateModifier: void setPluginRestartState(java.lang.String,com.atlassian.plugin.PluginRestartState)>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: void onUpdateRequiresRestartState(java.lang.String,com.atlassian.plugin.PluginRestartState)>(r1, r2) in <com.atlassian.plugin.manager.DefaultPluginManager: void updateRequiresRestartState(java.lang.String,com.atlassian.plugin.PluginRestartState)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void onUpdateRequiresRestartState(java.lang.String,com.atlassian.plugin.PluginRestartState)>
INTERFACE edge: interfaceinvoke $r1.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Uninstalled plugin \'{}\' requires a restart due to the following modules: {}", r0, $r2) in <com.atlassian.plugin.manager.DefaultPluginManager: void markPluginUninstallThatRequiresRestart(com.atlassian.plugin.Plugin)> ==> <org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void markPluginUninstallThatRequiresRestart(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r4 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void markPluginUninstallThatRequiresRestart(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
SPECIAL edge: specialinvoke r3.<com.atlassian.plugin.manager.DefaultPluginManager: void updateRequiresRestartState(java.lang.String,com.atlassian.plugin.PluginRestartState)>($r4, $r5) in <com.atlassian.plugin.manager.DefaultPluginManager: void markPluginUninstallThatRequiresRestart(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void updateRequiresRestartState(java.lang.String,com.atlassian.plugin.PluginRestartState)>
INTERFACE edge: interfaceinvoke $r1.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Installed plugin \'{}\' requires a restart due to the following modules: {}", r0, $r2) in <com.atlassian.plugin.manager.DefaultPluginManager: void markPluginInstallThatRequiresRestart(com.atlassian.plugin.Plugin)> ==> <org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void markPluginInstallThatRequiresRestart(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r4 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void markPluginInstallThatRequiresRestart(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
SPECIAL edge: specialinvoke r3.<com.atlassian.plugin.manager.DefaultPluginManager: void updateRequiresRestartState(java.lang.String,com.atlassian.plugin.PluginRestartState)>($r4, $r5) in <com.atlassian.plugin.manager.DefaultPluginManager: void markPluginInstallThatRequiresRestart(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void updateRequiresRestartState(java.lang.String,com.atlassian.plugin.PluginRestartState)>
INTERFACE edge: interfaceinvoke $r1.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Upgraded plugin \'{}\' requires a restart due to the following modules: {}", r0, $r2) in <com.atlassian.plugin.manager.DefaultPluginManager: void markPluginUpgradeThatRequiresRestart(com.atlassian.plugin.Plugin)> ==> <org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void markPluginUpgradeThatRequiresRestart(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r4 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void markPluginUpgradeThatRequiresRestart(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
SPECIAL edge: specialinvoke r3.<com.atlassian.plugin.manager.DefaultPluginManager: void updateRequiresRestartState(java.lang.String,com.atlassian.plugin.PluginRestartState)>($r4, $r5) in <com.atlassian.plugin.manager.DefaultPluginManager: void markPluginUpgradeThatRequiresRestart(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void updateRequiresRestartState(java.lang.String,com.atlassian.plugin.PluginRestartState)>
VIRTUAL edge: virtualinvoke $r3.<com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)>($r4) in <com.atlassian.plugin.manager.DefaultPluginManager: void addPlugins(com.atlassian.plugin.loaders.PluginLoader,java.util.Collection)> ==> <com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)>
INTERFACE edge: r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.String validatePlugin(com.atlassian.plugin.PluginArtifact)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.String validatePlugin(com.atlassian.plugin.PluginArtifact)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z1 = interfaceinvoke r13.<com.atlassian.plugin.loaders.PluginLoader: boolean isDynamicPluginLoader()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.String validatePlugin(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.loaders.ForwardingPluginLoader: boolean isDynamicPluginLoader()>
INTERFACE edge: $z1 = interfaceinvoke r13.<com.atlassian.plugin.loaders.PluginLoader: boolean isDynamicPluginLoader()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.String validatePlugin(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.loaders.ScanningPluginLoader: boolean isDynamicPluginLoader()>
INTERFACE edge: $z1 = interfaceinvoke r13.<com.atlassian.plugin.loaders.PluginLoader: boolean isDynamicPluginLoader()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.String validatePlugin(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.loaders.SinglePluginLoader: boolean isDynamicPluginLoader()>
INTERFACE edge: $z1 = interfaceinvoke r13.<com.atlassian.plugin.loaders.PluginLoader: boolean isDynamicPluginLoader()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.String validatePlugin(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.loaders.ClassPathPluginLoader: boolean isDynamicPluginLoader()>
INTERFACE edge: r15 = interfaceinvoke $r14.<com.atlassian.plugin.loaders.DynamicPluginLoader: java.lang.String canLoad(com.atlassian.plugin.PluginArtifact)>(r6) in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.String validatePlugin(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.loaders.ForwardingPluginLoader: java.lang.String canLoad(com.atlassian.plugin.PluginArtifact)>
INTERFACE edge: r15 = interfaceinvoke $r14.<com.atlassian.plugin.loaders.DynamicPluginLoader: java.lang.String canLoad(com.atlassian.plugin.PluginArtifact)>(r6) in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.String validatePlugin(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.loaders.ScanningPluginLoader: java.lang.String canLoad(com.atlassian.plugin.PluginArtifact)>
SPECIAL edge: specialinvoke $r16.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Should be at least one DynamicPluginLoader in the plugin loader list") in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.String validatePlugin(com.atlassian.plugin.PluginArtifact)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r17.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.String validatePlugin(com.atlassian.plugin.PluginArtifact)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r5 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Jar ") in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.String validatePlugin(com.atlassian.plugin.PluginArtifact)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
INTERFACE edge: $r7 = interfaceinvoke r6.<com.atlassian.plugin.PluginArtifact: java.lang.String getName()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.String validatePlugin(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.JarPluginArtifact: java.lang.String getName()>
INTERFACE edge: $r7 = interfaceinvoke r6.<com.atlassian.plugin.PluginArtifact: java.lang.String getName()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.String validatePlugin(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.XmlPluginArtifact: java.lang.String getName()>
VIRTUAL edge: $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.String validatePlugin(com.atlassian.plugin.PluginArtifact)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a valid plugin!") in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.String validatePlugin(com.atlassian.plugin.PluginArtifact)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.String validatePlugin(com.atlassian.plugin.PluginArtifact)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r18.<com.atlassian.plugin.PluginParseException: void <init>(java.lang.String)>($r10) in <com.atlassian.plugin.manager.DefaultPluginManager: java.lang.String validatePlugin(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.PluginParseException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)>($r3) in <com.atlassian.plugin.manager.DefaultPluginManager: void disablePluginModules(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)>
VIRTUAL edge: r1 = virtualinvoke r0.<com.atlassian.plugin.manager.StateTracker: com.atlassian.plugin.manager.StateTracker$State get()>() in <com.atlassian.plugin.manager.StateTracker: com.atlassian.plugin.manager.StateTracker setState(com.atlassian.plugin.manager.StateTracker$State)> ==> <com.atlassian.plugin.manager.StateTracker: com.atlassian.plugin.manager.StateTracker$State get()>
VIRTUAL edge: virtualinvoke r1.<com.atlassian.plugin.manager.StateTracker$State: void check(com.atlassian.plugin.manager.StateTracker$State)>(r2) in <com.atlassian.plugin.manager.StateTracker: com.atlassian.plugin.manager.StateTracker setState(com.atlassian.plugin.manager.StateTracker$State)> ==> <com.atlassian.plugin.manager.StateTracker$State$3: void check(com.atlassian.plugin.manager.StateTracker$State)>
VIRTUAL edge: virtualinvoke r1.<com.atlassian.plugin.manager.StateTracker$State: void check(com.atlassian.plugin.manager.StateTracker$State)>(r2) in <com.atlassian.plugin.manager.StateTracker: com.atlassian.plugin.manager.StateTracker setState(com.atlassian.plugin.manager.StateTracker$State)> ==> <com.atlassian.plugin.manager.StateTracker$State$4: void check(com.atlassian.plugin.manager.StateTracker$State)>
VIRTUAL edge: virtualinvoke r1.<com.atlassian.plugin.manager.StateTracker$State: void check(com.atlassian.plugin.manager.StateTracker$State)>(r2) in <com.atlassian.plugin.manager.StateTracker: com.atlassian.plugin.manager.StateTracker setState(com.atlassian.plugin.manager.StateTracker$State)> ==> <com.atlassian.plugin.manager.StateTracker$State$1: void check(com.atlassian.plugin.manager.StateTracker$State)>
VIRTUAL edge: virtualinvoke r1.<com.atlassian.plugin.manager.StateTracker$State: void check(com.atlassian.plugin.manager.StateTracker$State)>(r2) in <com.atlassian.plugin.manager.StateTracker: com.atlassian.plugin.manager.StateTracker setState(com.atlassian.plugin.manager.StateTracker$State)> ==> <com.atlassian.plugin.manager.StateTracker$State$2: void check(com.atlassian.plugin.manager.StateTracker$State)>
VIRTUAL edge: virtualinvoke r1.<com.atlassian.plugin.manager.StateTracker$State: void check(com.atlassian.plugin.manager.StateTracker$State)>(r2) in <com.atlassian.plugin.manager.StateTracker: com.atlassian.plugin.manager.StateTracker setState(com.atlassian.plugin.manager.StateTracker$State)> ==> <com.atlassian.plugin.manager.StateTracker$State: void check(com.atlassian.plugin.manager.StateTracker$State)>
VIRTUAL edge: virtualinvoke r1.<com.atlassian.plugin.manager.StateTracker$State: void check(com.atlassian.plugin.manager.StateTracker$State)>(r2) in <com.atlassian.plugin.manager.StateTracker: com.atlassian.plugin.manager.StateTracker setState(com.atlassian.plugin.manager.StateTracker$State)> ==> <com.atlassian.plugin.manager.StateTracker$State$5: void check(com.atlassian.plugin.manager.StateTracker$State)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(r1, r2) in <com.atlassian.plugin.manager.StateTracker: com.atlassian.plugin.manager.StateTracker setState(com.atlassian.plugin.manager.StateTracker$State)> ==> <java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>
VIRTUAL edge: r1 = virtualinvoke r0.<com.atlassian.plugin.instrumentation.Timer: java.util.Optional getOpTimer()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void logTime(com.atlassian.plugin.instrumentation.Timer,java.lang.String)> ==> <com.atlassian.plugin.instrumentation.Timer: java.util.Optional getOpTimer()>
INTERFACE edge: interfaceinvoke $r8.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("{} in {}s", r2, $r9) in <com.atlassian.plugin.manager.DefaultPluginManager: void logTime(com.atlassian.plugin.instrumentation.Timer,java.lang.String)> ==> <org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<org.slf4j.Logger: void info(java.lang.String)>(r2) in <com.atlassian.plugin.manager.DefaultPluginManager: void logTime(com.atlassian.plugin.instrumentation.Timer,java.lang.String)> ==> <org.slf4j.Logger: void info(java.lang.String)>
SPECIAL edge: specialinvoke $r12.<com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void validateRequiredPlugins()> ==> <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: void <init>()>
SPECIAL edge: specialinvoke $r13.<com.atlassian.plugin.metadata.DefaultRequiredPluginValidator: void <init>(com.atlassian.plugin.PluginAccessor,com.atlassian.plugin.metadata.RequiredPluginProvider)>(r1, $r12) in <com.atlassian.plugin.manager.DefaultPluginManager: void validateRequiredPlugins()> ==> <com.atlassian.plugin.metadata.DefaultRequiredPluginValidator: void <init>(com.atlassian.plugin.PluginAccessor,com.atlassian.plugin.metadata.RequiredPluginProvider)>
INTERFACE edge: r4 = interfaceinvoke $r13.<com.atlassian.plugin.metadata.RequiredPluginValidator: java.util.Collection validate()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void validateRequiredPlugins()> ==> <com.atlassian.plugin.metadata.DefaultRequiredPluginValidator: java.util.Collection validate()>
INTERFACE edge: $i0 = interfaceinvoke r4.<java.util.Collection: int size()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void validateRequiredPlugins()> ==> <java.util.HashSet: int size()>
INTERFACE edge: $i0 = interfaceinvoke r4.<java.util.Collection: int size()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void validateRequiredPlugins()> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i0 = interfaceinvoke r4.<java.util.Collection: int size()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void validateRequiredPlugins()> ==> <java.util.ArrayDeque: int size()>
INTERFACE edge: $i0 = interfaceinvoke r4.<java.util.Collection: int size()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void validateRequiredPlugins()> ==> <java.util.concurrent.CopyOnWriteArraySet: int size()>
INTERFACE edge: $i0 = interfaceinvoke r4.<java.util.Collection: int size()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void validateRequiredPlugins()> ==> <java.util.TreeSet: int size()>
INTERFACE edge: $i0 = interfaceinvoke r4.<java.util.Collection: int size()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void validateRequiredPlugins()> ==> <java.util.ArrayList: int size()>
INTERFACE edge: r7 = interfaceinvoke r4.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void validateRequiredPlugins()> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r7 = interfaceinvoke r4.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void validateRequiredPlugins()> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r7 = interfaceinvoke r4.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void validateRequiredPlugins()> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r7 = interfaceinvoke r4.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void validateRequiredPlugins()> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r7 = interfaceinvoke r4.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void validateRequiredPlugins()> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: r7 = interfaceinvoke r4.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void validateRequiredPlugins()> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: interfaceinvoke $r11.<org.slf4j.Logger: void error(java.lang.String,java.lang.Object)>("\t{}", r10) in <com.atlassian.plugin.manager.DefaultPluginManager: void validateRequiredPlugins()> ==> <org.slf4j.Logger: void error(java.lang.String,java.lang.Object)>
VIRTUAL edge: virtualinvoke r1.<com.atlassian.plugin.manager.DefaultPluginManager: void shutdown()>() in <com.atlassian.plugin.manager.DefaultPluginManager: void validateRequiredPlugins()> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void shutdown()>
SPECIAL edge: specialinvoke $r14.<com.atlassian.plugin.PluginException: void <init>(java.lang.String)>("Unable to validate required plugins or modules") in <com.atlassian.plugin.manager.DefaultPluginManager: void validateRequiredPlugins()> ==> <com.atlassian.plugin.PluginException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.ClassLoader: void <init>(java.lang.ClassLoader)>(r1) in <com.atlassian.plugin.classloader.AbstractClassLoader: void <init>(java.lang.ClassLoader)> ==> <java.lang.ClassLoader: void <init>(java.lang.ClassLoader)>
INTERFACE edge: interfaceinvoke $r1.<java.util.Set: void clear()>() in <com.atlassian.plugin.classloader.PluginsClassLoader: void flushMissesCaches()> ==> <java.util.HashSet: void clear()>
INTERFACE edge: interfaceinvoke $r1.<java.util.Set: void clear()>() in <com.atlassian.plugin.classloader.PluginsClassLoader: void flushMissesCaches()> ==> <java.util.concurrent.CopyOnWriteArraySet: void clear()>
INTERFACE edge: interfaceinvoke $r1.<java.util.Set: void clear()>() in <com.atlassian.plugin.classloader.PluginsClassLoader: void flushMissesCaches()> ==> <java.util.TreeSet: void clear()>
INTERFACE edge: interfaceinvoke $r2.<java.util.Set: void clear()>() in <com.atlassian.plugin.classloader.PluginsClassLoader: void flushMissesCaches()> ==> <java.util.HashSet: void clear()>
INTERFACE edge: interfaceinvoke $r2.<java.util.Set: void clear()>() in <com.atlassian.plugin.classloader.PluginsClassLoader: void flushMissesCaches()> ==> <java.util.concurrent.CopyOnWriteArraySet: void clear()>
INTERFACE edge: interfaceinvoke $r2.<java.util.Set: void clear()>() in <com.atlassian.plugin.classloader.PluginsClassLoader: void flushMissesCaches()> ==> <java.util.TreeSet: void clear()>
INTERFACE edge: $r3 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.classloader.PluginsClassLoader: boolean isPluginEnabled(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r3 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.classloader.PluginsClassLoader: boolean isPluginEnabled(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
INTERFACE edge: $z0 = interfaceinvoke $r2.<com.atlassian.plugin.PluginAccessor: boolean isPluginEnabled(java.lang.String)>($r3) in <com.atlassian.plugin.classloader.PluginsClassLoader: boolean isPluginEnabled(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.ProductPluginAccessor: boolean isPluginEnabled(java.lang.String)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<com.atlassian.plugin.PluginAccessor: boolean isPluginEnabled(java.lang.String)>($r3) in <com.atlassian.plugin.classloader.PluginsClassLoader: boolean isPluginEnabled(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase: boolean isPluginEnabled(java.lang.String)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<com.atlassian.plugin.PluginAccessor: boolean isPluginEnabled(java.lang.String)>($r3) in <com.atlassian.plugin.classloader.PluginsClassLoader: boolean isPluginEnabled(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: boolean isPluginEnabled(java.lang.String)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<com.atlassian.plugin.PluginAccessor: boolean isPluginEnabled(java.lang.String)>($r3) in <com.atlassian.plugin.classloader.PluginsClassLoader: boolean isPluginEnabled(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: boolean isPluginEnabled(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() in <com.atlassian.plugin.classloader.PluginsClassLoader: boolean isSystemClass(java.lang.String)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>() in <com.atlassian.plugin.classloader.PluginsClassLoader: boolean isSystemClass(java.lang.String)> ==> <java.lang.Class: java.lang.ClassLoader getClassLoader()>
VIRTUAL edge: virtualinvoke $r2.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r3) in <com.atlassian.plugin.classloader.PluginsClassLoader: boolean isSystemClass(java.lang.String)> ==> <java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r3) in <com.atlassian.plugin.classloader.PluginsClassLoader: boolean isSystemClass(java.lang.String)> ==> <com.atlassian.plugin.util.ChainingClassLoader: java.lang.Class loadClass(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r3) in <com.atlassian.plugin.classloader.PluginsClassLoader: boolean isSystemClass(java.lang.String)> ==> <com.atlassian.plugin.classloader.DelegationClassLoader: java.lang.Class loadClass(java.lang.String)>
VIRTUAL edge: virtualinvoke $r10.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r3) in <com.atlassian.plugin.classloader.PluginsClassLoader: boolean isSystemClass(java.lang.String)> ==> <java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>
VIRTUAL edge: virtualinvoke $r10.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r3) in <com.atlassian.plugin.classloader.PluginsClassLoader: boolean isSystemClass(java.lang.String)> ==> <com.atlassian.plugin.util.ChainingClassLoader: java.lang.Class loadClass(java.lang.String)>
VIRTUAL edge: virtualinvoke $r10.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r3) in <com.atlassian.plugin.classloader.PluginsClassLoader: boolean isSystemClass(java.lang.String)> ==> <com.atlassian.plugin.classloader.DelegationClassLoader: java.lang.Class loadClass(java.lang.String)>
INTERFACE edge: z0 = interfaceinvoke $r3.<java.util.Set: boolean contains(java.lang.Object)>(r2) in <com.atlassian.plugin.classloader.PluginsClassLoader: java.lang.Class loadClassFromPlugins(java.lang.String)> ==> <java.util.HashSet: boolean contains(java.lang.Object)>
INTERFACE edge: z0 = interfaceinvoke $r3.<java.util.Set: boolean contains(java.lang.Object)>(r2) in <com.atlassian.plugin.classloader.PluginsClassLoader: java.lang.Class loadClassFromPlugins(java.lang.String)> ==> <java.util.concurrent.CopyOnWriteArraySet: boolean contains(java.lang.Object)>
INTERFACE edge: z0 = interfaceinvoke $r3.<java.util.Set: boolean contains(java.lang.Object)>(r2) in <com.atlassian.plugin.classloader.PluginsClassLoader: java.lang.Class loadClassFromPlugins(java.lang.String)> ==> <java.util.TreeSet: boolean contains(java.lang.Object)>
INTERFACE edge: r33 = interfaceinvoke $r4.<com.atlassian.plugin.PluginAccessor: java.util.Collection getEnabledPlugins()>() in <com.atlassian.plugin.classloader.PluginsClassLoader: java.lang.Class loadClassFromPlugins(java.lang.String)> ==> <com.atlassian.plugin.manager.ProductPluginAccessor: java.util.Collection getEnabledPlugins()>
INTERFACE edge: r33 = interfaceinvoke $r4.<com.atlassian.plugin.PluginAccessor: java.util.Collection getEnabledPlugins()>() in <com.atlassian.plugin.classloader.PluginsClassLoader: java.lang.Class loadClassFromPlugins(java.lang.String)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.Collection getEnabledPlugins()>
INTERFACE edge: r33 = interfaceinvoke $r4.<com.atlassian.plugin.PluginAccessor: java.util.Collection getEnabledPlugins()>() in <com.atlassian.plugin.classloader.PluginsClassLoader: java.lang.Class loadClassFromPlugins(java.lang.String)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: java.util.Collection getEnabledPlugins()>
INTERFACE edge: r33 = interfaceinvoke $r4.<com.atlassian.plugin.PluginAccessor: java.util.Collection getEnabledPlugins()>() in <com.atlassian.plugin.classloader.PluginsClassLoader: java.lang.Class loadClassFromPlugins(java.lang.String)> ==> <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: java.util.Collection getEnabledPlugins()>
INTERFACE edge: $z1 = interfaceinvoke $r5.<org.slf4j.Logger: boolean isDebugEnabled()>() in <com.atlassian.plugin.classloader.PluginsClassLoader: java.lang.Class loadClassFromPlugins(java.lang.String)> ==> <org.slf4j.Logger: boolean isDebugEnabled()>
INTERFACE edge: interfaceinvoke $r24.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("loadClassFromPlugins ({}) looping through plugins...", r2) in <com.atlassian.plugin.classloader.PluginsClassLoader: java.lang.Class loadClassFromPlugins(java.lang.String)> ==> <org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>
INTERFACE edge: r34 = interfaceinvoke r33.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.classloader.PluginsClassLoader: java.lang.Class loadClassFromPlugins(java.lang.String)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r34 = interfaceinvoke r33.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.classloader.PluginsClassLoader: java.lang.Class loadClassFromPlugins(java.lang.String)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r34 = interfaceinvoke r33.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.classloader.PluginsClassLoader: java.lang.Class loadClassFromPlugins(java.lang.String)> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r34 = interfaceinvoke r33.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.classloader.PluginsClassLoader: java.lang.Class loadClassFromPlugins(java.lang.String)> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r34 = interfaceinvoke r33.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.classloader.PluginsClassLoader: java.lang.Class loadClassFromPlugins(java.lang.String)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: r34 = interfaceinvoke r33.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.classloader.PluginsClassLoader: java.lang.Class loadClassFromPlugins(java.lang.String)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z4 = interfaceinvoke $r12.<org.slf4j.Logger: boolean isDebugEnabled()>() in <com.atlassian.plugin.classloader.PluginsClassLoader: java.lang.Class loadClassFromPlugins(java.lang.String)> ==> <org.slf4j.Logger: boolean isDebugEnabled()>
INTERFACE edge: $r23 = interfaceinvoke r11.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.classloader.PluginsClassLoader: java.lang.Class loadClassFromPlugins(java.lang.String)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r23 = interfaceinvoke r11.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.classloader.PluginsClassLoader: java.lang.Class loadClassFromPlugins(java.lang.String)> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
INTERFACE edge: $r13 = interfaceinvoke r11.<com.atlassian.plugin.Plugin: java.lang.ClassLoader getClassLoader()>() in <com.atlassian.plugin.classloader.PluginsClassLoader: java.lang.Class loadClassFromPlugins(java.lang.String)> ==> <com.atlassian.plugin.impl.DefaultDynamicPlugin: java.lang.ClassLoader getClassLoader()>
INTERFACE edge: $r13 = interfaceinvoke r11.<com.atlassian.plugin.Plugin: java.lang.ClassLoader getClassLoader()>() in <com.atlassian.plugin.classloader.PluginsClassLoader: java.lang.Class loadClassFromPlugins(java.lang.String)> ==> <com.atlassian.plugin.impl.XmlDynamicPlugin: java.lang.ClassLoader getClassLoader()>
INTERFACE edge: $r13 = interfaceinvoke r11.<com.atlassian.plugin.Plugin: java.lang.ClassLoader getClassLoader()>() in <com.atlassian.plugin.classloader.PluginsClassLoader: java.lang.Class loadClassFromPlugins(java.lang.String)> ==> <com.atlassian.plugin.impl.StaticPlugin: java.lang.ClassLoader getClassLoader()>
INTERFACE edge: $r13 = interfaceinvoke r11.<com.atlassian.plugin.Plugin: java.lang.ClassLoader getClassLoader()>() in <com.atlassian.plugin.classloader.PluginsClassLoader: java.lang.Class loadClassFromPlugins(java.lang.String)> ==> <com.atlassian.plugin.Plugin: java.lang.ClassLoader getClassLoader()>
INTERFACE edge: $r20 = interfaceinvoke r11.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.classloader.PluginsClassLoader: java.lang.Class loadClassFromPlugins(java.lang.String)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r20 = interfaceinvoke r11.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.classloader.PluginsClassLoader: java.lang.Class loadClassFromPlugins(java.lang.String)> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
INTERFACE edge: interfaceinvoke $r22.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("loadClassFromPlugins ({}) looking in plugin \'{}\'.", r2, $r23) in <com.atlassian.plugin.classloader.PluginsClassLoader: java.lang.Class loadClassFromPlugins(java.lang.String)> ==> <org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>
VIRTUAL edge: r35 = virtualinvoke $r13.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r2) in <com.atlassian.plugin.classloader.PluginsClassLoader: java.lang.Class loadClassFromPlugins(java.lang.String)> ==> <java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>
VIRTUAL edge: r35 = virtualinvoke $r13.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r2) in <com.atlassian.plugin.classloader.PluginsClassLoader: java.lang.Class loadClassFromPlugins(java.lang.String)> ==> <com.atlassian.plugin.util.ChainingClassLoader: java.lang.Class loadClass(java.lang.String)>
VIRTUAL edge: r35 = virtualinvoke $r13.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r2) in <com.atlassian.plugin.classloader.PluginsClassLoader: java.lang.Class loadClassFromPlugins(java.lang.String)> ==> <com.atlassian.plugin.classloader.DelegationClassLoader: java.lang.Class loadClass(java.lang.String)>
INTERFACE edge: interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r11) in <com.atlassian.plugin.classloader.PluginsClassLoader: java.lang.Class loadClassFromPlugins(java.lang.String)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r11) in <com.atlassian.plugin.classloader.PluginsClassLoader: java.lang.Class loadClassFromPlugins(java.lang.String)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r11) in <com.atlassian.plugin.classloader.PluginsClassLoader: java.lang.Class loadClassFromPlugins(java.lang.String)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r11) in <com.atlassian.plugin.classloader.PluginsClassLoader: java.lang.Class loadClassFromPlugins(java.lang.String)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: $z5 = interfaceinvoke $r18.<org.slf4j.Logger: boolean isDebugEnabled()>() in <com.atlassian.plugin.classloader.PluginsClassLoader: java.lang.Class loadClassFromPlugins(java.lang.String)> ==> <org.slf4j.Logger: boolean isDebugEnabled()>
INTERFACE edge: interfaceinvoke $r19.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("loadClassFromPlugins ({}) found in plugin \'{}\'.", r2, $r20) in <com.atlassian.plugin.classloader.PluginsClassLoader: java.lang.Class loadClassFromPlugins(java.lang.String)> ==> <org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>
INTERFACE edge: $z2 = interfaceinvoke $r6.<org.slf4j.Logger: boolean isDebugEnabled()>() in <com.atlassian.plugin.classloader.PluginsClassLoader: java.lang.Class loadClassFromPlugins(java.lang.String)> ==> <org.slf4j.Logger: boolean isDebugEnabled()>
INTERFACE edge: interfaceinvoke $r9.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("loadClassFromPlugins ({}) not found - caching the miss.", r2) in <com.atlassian.plugin.classloader.PluginsClassLoader: java.lang.Class loadClassFromPlugins(java.lang.String)> ==> <org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<java.util.Set: boolean add(java.lang.Object)>(r2) in <com.atlassian.plugin.classloader.PluginsClassLoader: java.lang.Class loadClassFromPlugins(java.lang.String)> ==> <java.util.HashSet: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<java.util.Set: boolean add(java.lang.Object)>(r2) in <com.atlassian.plugin.classloader.PluginsClassLoader: java.lang.Class loadClassFromPlugins(java.lang.String)> ==> <java.util.concurrent.CopyOnWriteArraySet: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<java.util.Set: boolean add(java.lang.Object)>(r2) in <com.atlassian.plugin.classloader.PluginsClassLoader: java.lang.Class loadClassFromPlugins(java.lang.String)> ==> <java.util.TreeSet: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge$1: void <init>(com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge,com.atlassian.plugin.Plugin)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.ThreadLocal: java.lang.Object get()>() in <com.atlassian.plugin.manager.PluginTransactionContext: void start()> ==> <java.lang.ThreadLocal: java.lang.Object get()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>() in <com.atlassian.plugin.manager.PluginTransactionContext: void start()> ==> <java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>
SPECIAL edge: specialinvoke $r6.<java.lang.Throwable: void <init>()>() in <com.atlassian.plugin.manager.PluginTransactionContext: void start()> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r5.<com.atlassian.plugin.event.events.PluginTransactionStartEvent: void <init>()>() in <com.atlassian.plugin.manager.PluginTransactionContext: void start()> ==> <com.atlassian.plugin.event.events.PluginTransactionStartEvent: void <init>()>
SPECIAL edge: specialinvoke r4.<com.atlassian.plugin.manager.PluginTransactionContext: void broadcastIgnoreError(java.lang.Object)>($r5) in <com.atlassian.plugin.manager.PluginTransactionContext: void start()> ==> <com.atlassian.plugin.manager.PluginTransactionContext: void broadcastIgnoreError(java.lang.Object)>
CLINIT edge: $r6 = <com.atlassian.plugin.manager.PluginTransactionContext: org.slf4j.Logger log> in <com.atlassian.plugin.manager.PluginTransactionContext: void broadcastIgnoreError(java.lang.Object)> ==> <com.atlassian.plugin.manager.PluginTransactionContext: void <clinit>()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.ThreadLocal: java.lang.Object get()>() in <com.atlassian.plugin.manager.PluginTransactionContext: void stop()> ==> <java.lang.ThreadLocal: java.lang.Object get()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>() in <com.atlassian.plugin.manager.PluginTransactionContext: void stop()> ==> <java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>
SPECIAL edge: specialinvoke $r10.<java.lang.Throwable: void <init>()>() in <com.atlassian.plugin.manager.PluginTransactionContext: void stop()> ==> <java.lang.Throwable: void <init>()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.ThreadLocal: java.lang.Object get()>() in <com.atlassian.plugin.manager.PluginTransactionContext: void stop()> ==> <java.lang.ThreadLocal: java.lang.Object get()>
VIRTUAL edge: virtualinvoke $r7.<java.lang.ThreadLocal: void remove()>() in <com.atlassian.plugin.manager.PluginTransactionContext: void stop()> ==> <java.lang.ThreadLocal: void remove()>
SPECIAL edge: specialinvoke $r9.<com.atlassian.plugin.event.events.PluginTransactionEndEvent: void <init>(java.util.List)>(r6) in <com.atlassian.plugin.manager.PluginTransactionContext: void stop()> ==> <com.atlassian.plugin.event.events.PluginTransactionEndEvent: void <init>(java.util.List)>
SPECIAL edge: specialinvoke r8.<com.atlassian.plugin.manager.PluginTransactionContext: void broadcastIgnoreError(java.lang.Object)>($r9) in <com.atlassian.plugin.manager.PluginTransactionContext: void stop()> ==> <com.atlassian.plugin.manager.PluginTransactionContext: void broadcastIgnoreError(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.instrumentation.Timer: void <init>(java.util.Optional)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.instrumentation.Timer: void <init>(java.util.Optional)>(r1) in <com.atlassian.plugin.instrumentation.SingleTimer: void <init>(java.util.Optional,java.lang.String)> ==> <com.atlassian.plugin.instrumentation.Timer: void <init>(java.util.Optional)>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.Set: boolean add(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.PluginsInEnableOrder: void sortPluginForEnable(com.atlassian.plugin.Plugin,java.util.Set,java.util.Collection,com.atlassian.plugin.PluginRegistry$ReadOnly)> ==> <java.util.HashSet: boolean add(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.Set: boolean add(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.PluginsInEnableOrder: void sortPluginForEnable(com.atlassian.plugin.Plugin,java.util.Set,java.util.Collection,com.atlassian.plugin.PluginRegistry$ReadOnly)> ==> <java.util.concurrent.CopyOnWriteArraySet: boolean add(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.Set: boolean add(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.PluginsInEnableOrder: void sortPluginForEnable(com.atlassian.plugin.Plugin,java.util.Set,java.util.Collection,com.atlassian.plugin.PluginRegistry$ReadOnly)> ==> <java.util.TreeSet: boolean add(java.lang.Object)>
INTERFACE edge: $r2 = interfaceinvoke r1.<com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginDependencies getDependencies()>() in <com.atlassian.plugin.manager.PluginsInEnableOrder: void sortPluginForEnable(com.atlassian.plugin.Plugin,java.util.Set,java.util.Collection,com.atlassian.plugin.PluginRegistry$ReadOnly)> ==> <com.atlassian.plugin.impl.AbstractPlugin: com.atlassian.plugin.PluginDependencies getDependencies()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.PluginsInEnableOrder: void sortPluginForEnable(com.atlassian.plugin.Plugin,java.util.Set,java.util.Collection,com.atlassian.plugin.PluginRegistry$ReadOnly)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.PluginsInEnableOrder: void sortPluginForEnable(com.atlassian.plugin.Plugin,java.util.Set,java.util.Collection,com.atlassian.plugin.PluginRegistry$ReadOnly)> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.PluginsInEnableOrder: void sortPluginForEnable(com.atlassian.plugin.Plugin,java.util.Set,java.util.Collection,com.atlassian.plugin.PluginRegistry$ReadOnly)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke r6.<com.atlassian.plugin.manager.PluginsInEnableOrder: void sortPluginForEnable(com.atlassian.plugin.Plugin,java.util.Set,java.util.Collection,com.atlassian.plugin.PluginRegistry$ReadOnly)>(r11, r0, r5, r10) in <com.atlassian.plugin.manager.PluginsInEnableOrder: void sortPluginForEnable(com.atlassian.plugin.Plugin,java.util.Set,java.util.Collection,com.atlassian.plugin.PluginRegistry$ReadOnly)> ==> <com.atlassian.plugin.manager.PluginsInEnableOrder: void sortPluginForEnable(com.atlassian.plugin.Plugin,java.util.Set,java.util.Collection,com.atlassian.plugin.PluginRegistry$ReadOnly)>
INTERFACE edge: $z2 = interfaceinvoke r5.<java.util.Collection: boolean contains(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.PluginsInEnableOrder: void sortPluginForEnable(com.atlassian.plugin.Plugin,java.util.Set,java.util.Collection,com.atlassian.plugin.PluginRegistry$ReadOnly)> ==> <java.util.HashSet: boolean contains(java.lang.Object)>
INTERFACE edge: $z2 = interfaceinvoke r5.<java.util.Collection: boolean contains(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.PluginsInEnableOrder: void sortPluginForEnable(com.atlassian.plugin.Plugin,java.util.Set,java.util.Collection,com.atlassian.plugin.PluginRegistry$ReadOnly)> ==> <java.util.LinkedList: boolean contains(java.lang.Object)>
INTERFACE edge: $z2 = interfaceinvoke r5.<java.util.Collection: boolean contains(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.PluginsInEnableOrder: void sortPluginForEnable(com.atlassian.plugin.Plugin,java.util.Set,java.util.Collection,com.atlassian.plugin.PluginRegistry$ReadOnly)> ==> <java.util.ArrayDeque: boolean contains(java.lang.Object)>
INTERFACE edge: $z2 = interfaceinvoke r5.<java.util.Collection: boolean contains(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.PluginsInEnableOrder: void sortPluginForEnable(com.atlassian.plugin.Plugin,java.util.Set,java.util.Collection,com.atlassian.plugin.PluginRegistry$ReadOnly)> ==> <java.util.concurrent.CopyOnWriteArraySet: boolean contains(java.lang.Object)>
INTERFACE edge: $z2 = interfaceinvoke r5.<java.util.Collection: boolean contains(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.PluginsInEnableOrder: void sortPluginForEnable(com.atlassian.plugin.Plugin,java.util.Set,java.util.Collection,com.atlassian.plugin.PluginRegistry$ReadOnly)> ==> <java.util.TreeSet: boolean contains(java.lang.Object)>
INTERFACE edge: $z2 = interfaceinvoke r5.<java.util.Collection: boolean contains(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.PluginsInEnableOrder: void sortPluginForEnable(com.atlassian.plugin.Plugin,java.util.Set,java.util.Collection,com.atlassian.plugin.PluginRegistry$ReadOnly)> ==> <java.util.ArrayList: boolean contains(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.PluginsInEnableOrder: void sortPluginForEnable(com.atlassian.plugin.Plugin,java.util.Set,java.util.Collection,com.atlassian.plugin.PluginRegistry$ReadOnly)> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.PluginsInEnableOrder: void sortPluginForEnable(com.atlassian.plugin.Plugin,java.util.Set,java.util.Collection,com.atlassian.plugin.PluginRegistry$ReadOnly)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: void <init>(java.lang.ClassLoader)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: $r2 = specialinvoke r0.<com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: java.util.Set getStringsFromFile(java.lang.String)>("application-provided-plugins.txt") in <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: void <init>(java.lang.ClassLoader)> ==> <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: java.util.Set getStringsFromFile(java.lang.String)>
SPECIAL edge: $r3 = specialinvoke r0.<com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: java.util.Set getStringsFromFile(java.lang.String)>("application-required-plugins.txt") in <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: void <init>(java.lang.ClassLoader)> ==> <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: java.util.Set getStringsFromFile(java.lang.String)>
SPECIAL edge: $r4 = specialinvoke r0.<com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: java.util.Set getStringsFromFile(java.lang.String)>("application-required-modules.txt") in <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: void <init>(java.lang.ClassLoader)> ==> <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: java.util.Set getStringsFromFile(java.lang.String)>
STATIC edge: r0 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet$Builder builder()>() in <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: java.util.Set getStringsFromFile(java.lang.String)> ==> <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet$Builder builder()>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r17) in <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: java.util.Set getStringsFromFile(java.lang.String)> ==> <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r25) in <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: java.util.Set getStringsFromFile(java.lang.String)> ==> <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>
STATIC edge: r22 = staticinvoke <org.apache.commons.io.IOUtils: java.util.List readLines(java.io.InputStream)>(r21) in <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: java.util.Set getStringsFromFile(java.lang.String)> ==> <org.apache.commons.io.IOUtils: java.util.List readLines(java.io.InputStream)>
VIRTUAL edge: $r3 = virtualinvoke r1.<com.atlassian.plugin.jmx.AbstractJmxBridge: java.lang.Object getMXBean()>() in <com.atlassian.plugin.jmx.AbstractJmxBridge: com.atlassian.plugin.jmx.AbstractJmxBridge$WeakMXBeanInvocationHandler registerInternal()> ==> <com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge: java.lang.Object getMXBean()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.jmx.AbstractJmxBridge$WeakMXBeanInvocationHandler: void <init>(javax.management.ObjectName,java.lang.Object)>($r2, $r3) in <com.atlassian.plugin.jmx.AbstractJmxBridge: com.atlassian.plugin.jmx.AbstractJmxBridge$WeakMXBeanInvocationHandler registerInternal()> ==> <com.atlassian.plugin.jmx.AbstractJmxBridge$WeakMXBeanInvocationHandler: void <init>(javax.management.ObjectName,java.lang.Object)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.ClassLoader getClassLoader()>() in <com.atlassian.plugin.jmx.AbstractJmxBridge: com.atlassian.plugin.jmx.AbstractJmxBridge$WeakMXBeanInvocationHandler registerInternal()> ==> <java.lang.Class: java.lang.ClassLoader getClassLoader()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() in <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler: java.util.List getValidMethods(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: r3 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method[] getMethods()>() in <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler: java.util.List getValidMethods(java.lang.Object)> ==> <java.lang.Class: java.lang.reflect.Method[] getMethods()>
SPECIAL edge: $z0 = specialinvoke r5.<com.atlassian.plugin.event.impl.MethodSelectorListenerHandler: boolean isValidMethod(java.lang.reflect.Method)>(r4) in <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler: java.util.List getValidMethods(java.lang.Object)> ==> <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler: boolean isValidMethod(java.lang.reflect.Method)>
INTERFACE edge: interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>(r4) in <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler: java.util.List getValidMethods(java.lang.Object)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler$1: void <init>(com.atlassian.plugin.event.impl.MethodSelectorListenerHandler,java.lang.reflect.Method,java.lang.Object)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<io.atlassian.util.concurrent.LazyReference: void <init>()>() in <com.atlassian.plugin.parsers.DefaultSafeModeCommandLineArgumentsFactory$1: void <init>(com.atlassian.plugin.parsers.DefaultSafeModeCommandLineArgumentsFactory)> ==> <io.atlassian.util.concurrent.LazyReference: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.metadata.DefaultPluginMetadataManager: void <init>(com.atlassian.plugin.metadata.PluginMetadata)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke $r2.<com.atlassian.plugin.metadata.PluginMetadata: boolean required(com.atlassian.plugin.Plugin)>(r1) in <com.atlassian.plugin.metadata.DefaultPluginMetadataManager: boolean optionalAccordingToHostApplication(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: boolean required(com.atlassian.plugin.Plugin)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<com.atlassian.plugin.metadata.PluginMetadata: boolean required(com.atlassian.plugin.ModuleDescriptor)>(r1) in <com.atlassian.plugin.metadata.DefaultPluginMetadataManager: boolean optionalAccordingToHostApplication(com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: boolean required(com.atlassian.plugin.ModuleDescriptor)>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() in <com.atlassian.plugin.metadata.DefaultPluginMetadataManager: boolean optionalAccordingToModuleDescriptorType(com.atlassian.plugin.ModuleDescriptor)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Class: boolean isAnnotationPresent(java.lang.Class)>(class "Lcom/atlassian/plugin/descriptors/CannotDisable;") in <com.atlassian.plugin.metadata.DefaultPluginMetadataManager: boolean optionalAccordingToModuleDescriptorType(com.atlassian.plugin.ModuleDescriptor)> ==> <java.lang.Class: boolean isAnnotationPresent(java.lang.Class)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.factories.AbstractPluginFactory: void <init>(com.atlassian.plugin.parsers.DescriptorParserFactory,java.util.Set)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.impl.DefaultDynamicPlugin: void <init>(com.atlassian.plugin.PluginArtifact,com.atlassian.plugin.classloader.PluginClassLoader)>(r1, r2) in <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: com.atlassian.plugin.Plugin createPlugin(com.atlassian.plugin.PluginArtifact,com.atlassian.plugin.classloader.PluginClassLoader)> ==> <com.atlassian.plugin.impl.DefaultDynamicPlugin: void <init>(com.atlassian.plugin.PluginArtifact,com.atlassian.plugin.classloader.PluginClassLoader)>
VIRTUAL edge: r10 = virtualinvoke r0.<com.atlassian.plugin.factories.AbstractPluginFactory: java.io.InputStream getDescriptorInputStream(com.atlassian.plugin.PluginArtifact)>(r1) in <com.atlassian.plugin.factories.AbstractPluginFactory: java.lang.String getPluginKeyFromDescriptor(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.factories.XmlDynamicPluginFactory: java.io.InputStream getDescriptorInputStream(com.atlassian.plugin.PluginArtifact)>
VIRTUAL edge: r10 = virtualinvoke r0.<com.atlassian.plugin.factories.AbstractPluginFactory: java.io.InputStream getDescriptorInputStream(com.atlassian.plugin.PluginArtifact)>(r1) in <com.atlassian.plugin.factories.AbstractPluginFactory: java.lang.String getPluginKeyFromDescriptor(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: java.io.InputStream getDescriptorInputStream(com.atlassian.plugin.PluginArtifact)>
VIRTUAL edge: $r5 = virtualinvoke r0.<com.atlassian.plugin.factories.AbstractPluginFactory: java.util.function.Predicate isValidPluginsVersion()>() in <com.atlassian.plugin.factories.AbstractPluginFactory: java.lang.String getPluginKeyFromDescriptor(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.factories.XmlDynamicPluginFactory: java.util.function.Predicate isValidPluginsVersion()>
VIRTUAL edge: $r5 = virtualinvoke r0.<com.atlassian.plugin.factories.AbstractPluginFactory: java.util.function.Predicate isValidPluginsVersion()>() in <com.atlassian.plugin.factories.AbstractPluginFactory: java.lang.String getPluginKeyFromDescriptor(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: java.util.function.Predicate isValidPluginsVersion()>
INTERFACE edge: r4 = interfaceinvoke $r3.<com.atlassian.plugin.parsers.DescriptorParserFactory: com.atlassian.plugin.parsers.DescriptorParser getInstance(java.io.InputStream,java.util.Set)>(r10, $r2) in <com.atlassian.plugin.factories.AbstractPluginFactory: java.lang.String getPluginKeyFromDescriptor(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.parsers.XmlDescriptorParserFactory: com.atlassian.plugin.parsers.DescriptorParser getInstance(java.io.InputStream,java.util.Set)>
INTERFACE edge: $i0 = interfaceinvoke r4.<com.atlassian.plugin.parsers.DescriptorParser: int getPluginsVersion()>() in <com.atlassian.plugin.factories.AbstractPluginFactory: java.lang.String getPluginKeyFromDescriptor(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.parsers.XmlDescriptorParser: int getPluginsVersion()>
INTERFACE edge: r9 = interfaceinvoke r4.<com.atlassian.plugin.parsers.DescriptorParser: java.lang.String getKey()>() in <com.atlassian.plugin.factories.AbstractPluginFactory: java.lang.String getPluginKeyFromDescriptor(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.parsers.XmlDescriptorParser: java.lang.String getKey()>
INTERFACE edge: $z0 = interfaceinvoke $r5.<java.util.function.Predicate: boolean test(java.lang.Object)>($r6) in <com.atlassian.plugin.factories.AbstractPluginFactory: java.lang.String getPluginKeyFromDescriptor(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.parsers.PluginDescriptorReader$lambda_getModules_2__127: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r5.<java.util.function.Predicate: boolean test(java.lang.Object)>($r6) in <com.atlassian.plugin.factories.AbstractPluginFactory: java.lang.String getPluginKeyFromDescriptor(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.manager.DependentPlugins$lambda_getPluginsByTypes_6__120: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r5.<java.util.function.Predicate: boolean test(java.lang.Object)>($r6) in <com.atlassian.plugin.factories.AbstractPluginFactory: java.lang.String getPluginKeyFromDescriptor(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getParamElements_12__168: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r5.<java.util.function.Predicate: boolean test(java.lang.Object)>($r6) in <com.atlassian.plugin.factories.AbstractPluginFactory: java.lang.String getPluginKeyFromDescriptor(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase$lambda_getEnabledPlugins_0__141: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r5.<java.util.function.Predicate: boolean test(java.lang.Object)>($r6) in <com.atlassian.plugin.factories.AbstractPluginFactory: java.lang.String getPluginKeyFromDescriptor(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.predicate.ModuleOfClassPredicate: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r5.<java.util.function.Predicate: boolean test(java.lang.Object)>($r6) in <com.atlassian.plugin.factories.AbstractPluginFactory: java.lang.String getPluginKeyFromDescriptor(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_findDelayedPlugin_38__75: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r5.<java.util.function.Predicate: boolean test(java.lang.Object)>($r6) in <com.atlassian.plugin.factories.AbstractPluginFactory: java.lang.String getPluginKeyFromDescriptor(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.manager.DependentPlugins$lambda_getInDependencyOrder_0__113: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r5.<java.util.function.Predicate: boolean test(java.lang.Object)>($r6) in <com.atlassian.plugin.factories.AbstractPluginFactory: java.lang.String getPluginKeyFromDescriptor(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.JarPluginArtifact$isSpringContext__3: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r5.<java.util.function.Predicate: boolean test(java.lang.Object)>($r6) in <com.atlassian.plugin.factories.AbstractPluginFactory: java.lang.String getPluginKeyFromDescriptor(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$lambda_isPluginEnabledInSafeMode_23__53: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r5.<java.util.function.Predicate: boolean test(java.lang.Object)>($r6) in <com.atlassian.plugin.factories.AbstractPluginFactory: java.lang.String getPluginKeyFromDescriptor(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.factories.XmlDynamicPluginFactory$lambda_static_0__111: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r5.<java.util.function.Predicate: boolean test(java.lang.Object)>($r6) in <com.atlassian.plugin.factories.AbstractPluginFactory: java.lang.String getPluginKeyFromDescriptor(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.manager.DependentPlugins$lambda_toStringList_3__117: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r5.<java.util.function.Predicate: boolean test(java.lang.Object)>($r6) in <com.atlassian.plugin.factories.AbstractPluginFactory: java.lang.String getPluginKeyFromDescriptor(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.parsers.PluginDescriptorReader$lambda_getPluginInformation_0__126: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r5.<java.util.function.Predicate: boolean test(java.lang.Object)>($r6) in <com.atlassian.plugin.factories.AbstractPluginFactory: java.lang.String getPluginKeyFromDescriptor(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.manager.DependentPlugins$lambda_toStringList_2__116: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r5.<java.util.function.Predicate: boolean test(java.lang.Object)>($r6) in <com.atlassian.plugin.factories.AbstractPluginFactory: java.lang.String getPluginKeyFromDescriptor(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$Builder$lambda_new_0__183: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r5.<java.util.function.Predicate: boolean test(java.lang.Object)>($r6) in <com.atlassian.plugin.factories.AbstractPluginFactory: java.lang.String getPluginKeyFromDescriptor(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.parsers.PluginInformationReader$ElementWithForApplicationsPredicate: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r5.<java.util.function.Predicate: boolean test(java.lang.Object)>($r6) in <com.atlassian.plugin.factories.AbstractPluginFactory: java.lang.String getPluginKeyFromDescriptor(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.util.ChainingClassLoader$nonNull__176: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r5.<java.util.function.Predicate: boolean test(java.lang.Object)>($r6) in <com.atlassian.plugin.factories.AbstractPluginFactory: java.lang.String getPluginKeyFromDescriptor(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.factories.LegacyDynamicPluginFactory$lambda_static_0__21: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r5.<java.util.function.Predicate: boolean test(java.lang.Object)>($r6) in <com.atlassian.plugin.factories.AbstractPluginFactory: java.lang.String getPluginKeyFromDescriptor(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.parsers.PluginInformationReader$lambda_getPermissionElements_11__172: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r5.<java.util.function.Predicate: boolean test(java.lang.Object)>($r6) in <com.atlassian.plugin.factories.AbstractPluginFactory: java.lang.String getPluginKeyFromDescriptor(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.predicate.ModuleDescriptorOfClassPredicate: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r5.<java.util.function.Predicate: boolean test(java.lang.Object)>($r6) in <com.atlassian.plugin.factories.AbstractPluginFactory: java.lang.String getPluginKeyFromDescriptor(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.manager.DefaultPluginPersistentState$lambda_getPluginEnabledStateMap_0__128: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r5.<java.util.function.Predicate: boolean test(java.lang.Object)>($r6) in <com.atlassian.plugin.factories.AbstractPluginFactory: java.lang.String getPluginKeyFromDescriptor(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.manager.DependentPlugins$lambda_getPluginsByTypes_5__118: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r5.<java.util.function.Predicate: boolean test(java.lang.Object)>($r6) in <com.atlassian.plugin.factories.AbstractPluginFactory: java.lang.String getPluginKeyFromDescriptor(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.JarPluginArtifact$lambda_extraModuleDescriptorFiles_1__4: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r5.<java.util.function.Predicate: boolean test(java.lang.Object)>($r6) in <com.atlassian.plugin.factories.AbstractPluginFactory: java.lang.String getPluginKeyFromDescriptor(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.predicate.PluginKeyPatternsPredicate: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r5.<java.util.function.Predicate: boolean test(java.lang.Object)>($r6) in <com.atlassian.plugin.factories.AbstractPluginFactory: java.lang.String getPluginKeyFromDescriptor(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.predicate.EnabledModulePredicate: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r5.<java.util.function.Predicate: boolean test(java.lang.Object)>($r6) in <com.atlassian.plugin.factories.AbstractPluginFactory: java.lang.String getPluginKeyFromDescriptor(com.atlassian.plugin.PluginArtifact)> ==> <java.util.function.Predicate: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r5.<java.util.function.Predicate: boolean test(java.lang.Object)>($r6) in <com.atlassian.plugin.factories.AbstractPluginFactory: java.lang.String getPluginKeyFromDescriptor(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.impl.AbstractPlugin$lambda_getPermissionsForCurrentInstallationMode_0__136: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r5.<java.util.function.Predicate: boolean test(java.lang.Object)>($r6) in <com.atlassian.plugin.factories.AbstractPluginFactory: java.lang.String getPluginKeyFromDescriptor(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$isInstance__77: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r5.<java.util.function.Predicate: boolean test(java.lang.Object)>($r6) in <com.atlassian.plugin.factories.AbstractPluginFactory: java.lang.String getPluginKeyFromDescriptor(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$nonNull__65: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r5.<java.util.function.Predicate: boolean test(java.lang.Object)>($r6) in <com.atlassian.plugin.factories.AbstractPluginFactory: java.lang.String getPluginKeyFromDescriptor(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler$1$lambda_getScope_0__161: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r5.<java.util.function.Predicate: boolean test(java.lang.Object)>($r6) in <com.atlassian.plugin.factories.AbstractPluginFactory: java.lang.String getPluginKeyFromDescriptor(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$nonNull__61: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r5.<java.util.function.Predicate: boolean test(java.lang.Object)>($r6) in <com.atlassian.plugin.factories.AbstractPluginFactory: java.lang.String getPluginKeyFromDescriptor(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.parsers.PluginDescriptorReader$nonNull__122: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r5.<java.util.function.Predicate: boolean test(java.lang.Object)>($r6) in <com.atlassian.plugin.factories.AbstractPluginFactory: java.lang.String getPluginKeyFromDescriptor(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.predicate.EnabledPluginPredicate: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r5.<java.util.function.Predicate: boolean test(java.lang.Object)>($r6) in <com.atlassian.plugin.factories.AbstractPluginFactory: java.lang.String getPluginKeyFromDescriptor(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.parsers.PluginInformationReader$ElementWithForApplicationsPredicate$lambda_test_0__31: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r5.<java.util.function.Predicate: boolean test(java.lang.Object)>($r6) in <com.atlassian.plugin.factories.AbstractPluginFactory: java.lang.String getPluginKeyFromDescriptor(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.parsers.PluginDescriptorReader$lambda_getModules_1__123: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r5.<java.util.function.Predicate: boolean test(java.lang.Object)>($r6) in <com.atlassian.plugin.factories.AbstractPluginFactory: java.lang.String getPluginKeyFromDescriptor(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.JarPluginArtifact$lambda_containsJavaExecutableCode_0__2: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r5.<java.util.function.Predicate: boolean test(java.lang.Object)>($r6) in <com.atlassian.plugin.factories.AbstractPluginFactory: java.lang.String getPluginKeyFromDescriptor(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase$nonNull__145: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r5.<java.util.function.Predicate: boolean test(java.lang.Object)>($r6) in <com.atlassian.plugin.factories.AbstractPluginFactory: java.lang.String getPluginKeyFromDescriptor(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$doesPluginRequireRestart__92: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r5.<java.util.function.Predicate: boolean test(java.lang.Object)>($r6) in <com.atlassian.plugin.factories.AbstractPluginFactory: java.lang.String getPluginKeyFromDescriptor(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase$isInstance__147: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r5.<java.util.function.Predicate: boolean test(java.lang.Object)>($r6) in <com.atlassian.plugin.factories.AbstractPluginFactory: java.lang.String getPluginKeyFromDescriptor(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase$nonNull__140: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r5.<java.util.function.Predicate: boolean test(java.lang.Object)>($r6) in <com.atlassian.plugin.factories.AbstractPluginFactory: java.lang.String getPluginKeyFromDescriptor(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$1: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r5.<java.util.function.Predicate: boolean test(java.lang.Object)>($r6) in <com.atlassian.plugin.factories.AbstractPluginFactory: java.lang.String getPluginKeyFromDescriptor(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.predicate.ModuleDescriptorOfClassPredicate$lambda_test_0__20: boolean test(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r5.<java.util.function.Predicate: boolean test(java.lang.Object)>($r6) in <com.atlassian.plugin.factories.AbstractPluginFactory: java.lang.String getPluginKeyFromDescriptor(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.manager.SafeModuleExtractor$nonNull__182: boolean test(java.lang.Object)>
CLINIT edge: $r0 = <com.atlassian.plugin.factories.XmlDynamicPluginFactory: java.util.function.Predicate ALWAYS_TRUE> in <com.atlassian.plugin.factories.XmlDynamicPluginFactory: java.util.function.Predicate isValidPluginsVersion()> ==> <com.atlassian.plugin.factories.XmlDynamicPluginFactory: void <clinit>()>
CLINIT edge: $r0 = <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: java.util.function.Predicate IS_PLUGIN_1> in <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: java.util.function.Predicate isValidPluginsVersion()> ==> <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<java.util.jar.JarFile: void <init>(java.io.File)>(r1) in <com.atlassian.plugin.classloader.PluginClassLoader: void initialiseOuterJar(java.io.File)> ==> <java.util.jar.JarFile: void <init>(java.io.File)>
VIRTUAL edge: r3 = virtualinvoke $r0.<java.util.jar.JarFile: java.util.Enumeration entries()>() in <com.atlassian.plugin.classloader.PluginClassLoader: void initialiseOuterJar(java.io.File)> ==> <java.util.jar.JarFile: java.util.Enumeration entries()>
VIRTUAL edge: virtualinvoke $r0.<java.util.jar.JarFile: void close()>() in <com.atlassian.plugin.classloader.PluginClassLoader: void initialiseOuterJar(java.io.File)> ==> <java.util.jar.JarFile: void close()>
VIRTUAL edge: virtualinvoke $r0.<java.util.jar.JarFile: void close()>() in <com.atlassian.plugin.classloader.PluginClassLoader: void initialiseOuterJar(java.io.File)> ==> <java.util.jar.JarFile: void close()>
INTERFACE edge: $z0 = interfaceinvoke r3.<java.util.Enumeration: boolean hasMoreElements()>() in <com.atlassian.plugin.classloader.PluginClassLoader: void initialiseOuterJar(java.io.File)> ==> <java.util.StringTokenizer: boolean hasMoreElements()>
INTERFACE edge: $z0 = interfaceinvoke r3.<java.util.Enumeration: boolean hasMoreElements()>() in <com.atlassian.plugin.classloader.PluginClassLoader: void initialiseOuterJar(java.io.File)> ==> <com.atlassian.plugin.util.ChainingClassLoader$ResourcesEnumeration: boolean hasMoreElements()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Enumeration: java.lang.Object nextElement()>() in <com.atlassian.plugin.classloader.PluginClassLoader: void initialiseOuterJar(java.io.File)> ==> <java.util.StringTokenizer: java.lang.Object nextElement()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Enumeration: java.lang.Object nextElement()>() in <com.atlassian.plugin.classloader.PluginClassLoader: void initialiseOuterJar(java.io.File)> ==> <com.atlassian.plugin.util.ChainingClassLoader$ResourcesEnumeration: java.lang.Object nextElement()>
VIRTUAL edge: $r7 = virtualinvoke r5.<java.util.jar.JarEntry: java.lang.String getName()>() in <com.atlassian.plugin.classloader.PluginClassLoader: void initialiseOuterJar(java.io.File)> ==> <java.util.jar.JarEntry: java.lang.String getName()>
SPECIAL edge: $z1 = specialinvoke r6.<com.atlassian.plugin.classloader.PluginClassLoader: boolean isInnerJarPath(java.lang.String)>($r7) in <com.atlassian.plugin.classloader.PluginClassLoader: void initialiseOuterJar(java.io.File)> ==> <com.atlassian.plugin.classloader.PluginClassLoader: boolean isInnerJarPath(java.lang.String)>
SPECIAL edge: specialinvoke r6.<com.atlassian.plugin.classloader.PluginClassLoader: void initialiseInnerJar(java.util.jar.JarFile,java.util.jar.JarEntry)>($r0, r5) in <com.atlassian.plugin.classloader.PluginClassLoader: void initialiseOuterJar(java.io.File)> ==> <com.atlassian.plugin.classloader.PluginClassLoader: void initialiseInnerJar(java.util.jar.JarFile,java.util.jar.JarEntry)>
SPECIAL edge: specialinvoke r6.<com.atlassian.plugin.classloader.PluginClassLoader: void addEntryMapping(java.util.jar.JarEntry,java.io.File,boolean)>(r5, r1, 1) in <com.atlassian.plugin.classloader.PluginClassLoader: void initialiseOuterJar(java.io.File)> ==> <com.atlassian.plugin.classloader.PluginClassLoader: void addEntryMapping(java.util.jar.JarEntry,java.io.File,boolean)>
CLINIT edge: r2 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)>("atlassian-plugins-innerjar", ".jar", $r1) in <com.atlassian.plugin.classloader.PluginClassLoader: void initialiseInnerJar(java.util.jar.JarFile,java.util.jar.JarEntry)> ==> <java.io.File: void <clinit>()>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: int copy(java.io.InputStream,java.io.OutputStream)>(r5, $r6) in <com.atlassian.plugin.classloader.PluginClassLoader: void initialiseInnerJar(java.util.jar.JarFile,java.util.jar.JarEntry)> ==> <org.apache.commons.io.IOUtils: int copy(java.io.InputStream,java.io.OutputStream)>
STATIC edge: r2 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)>("atlassian-plugins-innerjar", ".jar", $r1) in <com.atlassian.plugin.classloader.PluginClassLoader: void initialiseInnerJar(java.util.jar.JarFile,java.util.jar.JarEntry)> ==> <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1) in <com.atlassian.plugin.classloader.PluginClassLoader: boolean isEntryInPlugin(java.lang.String)> ==> <java.util.HashMap: boolean containsKey(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1) in <com.atlassian.plugin.classloader.PluginClassLoader: boolean isEntryInPlugin(java.lang.String)> ==> <java.util.Hashtable: boolean containsKey(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1) in <com.atlassian.plugin.classloader.PluginClassLoader: boolean isEntryInPlugin(java.lang.String)> ==> <java.util.TreeMap: boolean containsKey(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1) in <com.atlassian.plugin.classloader.PluginClassLoader: boolean isEntryInPlugin(java.lang.String)> ==> <java.util.jar.Attributes: boolean containsKey(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r3.<java.util.List: boolean isEmpty()>() in <com.atlassian.plugin.DefaultModuleDescriptorFactory: boolean shouldSkipModuleOfType(java.lang.String)> ==> <java.util.AbstractCollection: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke $r3.<java.util.List: boolean isEmpty()>() in <com.atlassian.plugin.DefaultModuleDescriptorFactory: boolean shouldSkipModuleOfType(java.lang.String)> ==> <java.util.ArrayList: boolean isEmpty()>
INTERFACE edge: $z1 = interfaceinvoke $r5.<java.util.List: boolean contains(java.lang.Object)>(r4) in <com.atlassian.plugin.DefaultModuleDescriptorFactory: boolean shouldSkipModuleOfType(java.lang.String)> ==> <java.util.LinkedList: boolean contains(java.lang.Object)>
INTERFACE edge: $z1 = interfaceinvoke $r5.<java.util.List: boolean contains(java.lang.Object)>(r4) in <com.atlassian.plugin.DefaultModuleDescriptorFactory: boolean shouldSkipModuleOfType(java.lang.String)> ==> <java.util.ArrayList: boolean contains(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.atlassian.plugin.DefaultModuleDescriptorFactory: boolean shouldSkipModuleOfType(java.lang.String)>($r3) in <com.atlassian.plugin.DefaultModuleDescriptorFactory: java.lang.Class getClassFromEntry(java.util.Map$Entry)> ==> <com.atlassian.plugin.DefaultModuleDescriptorFactory: boolean shouldSkipModuleOfType(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() in <com.atlassian.plugin.DefaultModuleDescriptorFactory: java.lang.Class getClassFromEntry(java.util.Map$Entry)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $z1 = virtualinvoke $r7.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r14) in <com.atlassian.plugin.DefaultModuleDescriptorFactory: java.lang.Class getClassFromEntry(java.util.Map$Entry)> ==> <java.lang.Class: boolean isAssignableFrom(java.lang.Class)>
INTERFACE edge: interfaceinvoke $r8.<org.slf4j.Logger: void error(java.lang.String,java.lang.Object)>("Configured plugin module descriptor class {} does not inherit from ModuleDescriptor", $r9) in <com.atlassian.plugin.DefaultModuleDescriptorFactory: java.lang.Class getClassFromEntry(java.util.Map$Entry)> ==> <org.slf4j.Logger: void error(java.lang.String,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.ForwardingPluginAccessor: void <init>(com.atlassian.plugin.PluginAccessor)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor$ByModuleDescriptorClassCacheLoader: void <init>(com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor)>(r1) in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor$ByModuleDescriptorClassCacheLoader: void <init>(com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor,com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor$1)> ==> <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor$ByModuleDescriptorClassCacheLoader: void <init>(com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor$ByModuleClassCacheLoader: void <init>(com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor)>(r1) in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor$ByModuleClassCacheLoader: void <init>(com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor,com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor$1)> ==> <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor$ByModuleClassCacheLoader: void <init>(com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor)>
SPECIAL edge: specialinvoke r0.<io.atlassian.util.concurrent.LazyReference: void <init>()>() in <com.atlassian.plugin.eventlistener.descriptors.EventListenerModuleDescriptor$1: void <init>(com.atlassian.plugin.eventlistener.descriptors.EventListenerModuleDescriptor)> ==> <io.atlassian.util.concurrent.LazyReference: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.atlassian.plugin.Plugin: boolean hasAllPermissions()>() in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void checkPermissions()> ==> <com.atlassian.plugin.impl.AbstractPlugin: boolean hasAllPermissions()>
VIRTUAL edge: $z1 = virtualinvoke r0.<com.atlassian.plugin.descriptors.AbstractModuleDescriptor: boolean isSystemModule()>() in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void checkPermissions()> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: boolean isSystemModule()>
SPECIAL edge: $r3 = specialinvoke r0.<com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.util.Set getAllRequiredPermissions()>() in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void checkPermissions()> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.util.Set getAllRequiredPermissions()>
VIRTUAL edge: $r8 = virtualinvoke r0.<com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.String getCompleteKey()>() in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void checkPermissions()> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.String getCompleteKey()>
SPECIAL edge: specialinvoke $r9.<java.util.HashSet: void <init>(java.util.Collection)>($r3) in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void checkPermissions()> ==> <java.util.HashSet: void <init>(java.util.Collection)>
INTERFACE edge: interfaceinvoke $r9.<java.util.Set: boolean removeAll(java.util.Collection)>($r6) in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void checkPermissions()> ==> <java.util.AbstractSet: boolean removeAll(java.util.Collection)>
INTERFACE edge: $z3 = interfaceinvoke $r9.<java.util.Set: boolean isEmpty()>() in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void checkPermissions()> ==> <java.util.HashSet: boolean isEmpty()>
INTERFACE edge: $r6 = interfaceinvoke $r5.<com.atlassian.plugin.Plugin: java.util.Set getActivePermissions()>() in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void checkPermissions()> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.util.Set getActivePermissions()>
SPECIAL edge: specialinvoke $r10.<com.atlassian.plugin.ModulePermissionException: void <init>(java.lang.String,java.util.Set)>($r8, $r9) in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void checkPermissions()> ==> <com.atlassian.plugin.ModulePermissionException: void <init>(java.lang.String,java.util.Set)>
CLINIT edge: $r6 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r0) in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.util.Set getAllRequiredPermissions()> ==> <java.util.Collections: void <clinit>()>
STATIC edge: $r6 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r0) in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.util.Set getAllRequiredPermissions()> ==> <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>
STATIC edge: $r4 = staticinvoke <com.atlassian.plugin.Permissions: java.util.Set getRequiredPermissions(java.lang.Class)>($r3) in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.util.Set getAllRequiredPermissions()> ==> <com.atlassian.plugin.Permissions: java.util.Set getRequiredPermissions(java.lang.Class)>
SPECIAL edge: specialinvoke $r2.<java.io.FileInputStream: void <init>(java.io.File)>($r4) in <com.atlassian.plugin.util.zip.FileUnzipper: com.atlassian.plugin.util.zip.StreamUnzipper getStreamUnzipper()> ==> <java.io.FileInputStream: void <init>(java.io.File)>
SPECIAL edge: specialinvoke $r1.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r2) in <com.atlassian.plugin.util.zip.FileUnzipper: com.atlassian.plugin.util.zip.StreamUnzipper getStreamUnzipper()> ==> <java.io.BufferedInputStream: void <init>(java.io.InputStream)>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.util.zip.StreamUnzipper: void <init>(java.io.InputStream,java.io.File)>($r1, $r5) in <com.atlassian.plugin.util.zip.FileUnzipper: com.atlassian.plugin.util.zip.StreamUnzipper getStreamUnzipper()> ==> <com.atlassian.plugin.util.zip.StreamUnzipper: void <init>(java.io.InputStream,java.io.File)>
SPECIAL edge: specialinvoke $r30.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: com.atlassian.plugin.Plugin deployPluginFromUnit(com.atlassian.plugin.loaders.classloading.DeploymentUnit,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No plugin factories found for plugin file ") in <com.atlassian.plugin.loaders.ScanningPluginLoader: com.atlassian.plugin.Plugin deployPluginFromUnit(com.atlassian.plugin.loaders.classloading.DeploymentUnit,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2) in <com.atlassian.plugin.loaders.ScanningPluginLoader: com.atlassian.plugin.Plugin deployPluginFromUnit(com.atlassian.plugin.loaders.classloading.DeploymentUnit,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: r26 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: com.atlassian.plugin.Plugin deployPluginFromUnit(com.atlassian.plugin.loaders.classloading.DeploymentUnit,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: com.atlassian.plugin.Plugin deployPluginFromUnit(com.atlassian.plugin.loaders.classloading.DeploymentUnit,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: com.atlassian.plugin.Plugin deployPluginFromUnit(com.atlassian.plugin.loaders.classloading.DeploymentUnit,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
VIRTUAL edge: $r16 = virtualinvoke r2.<com.atlassian.plugin.loaders.classloading.DeploymentUnit: java.io.File getPath()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: com.atlassian.plugin.Plugin deployPluginFromUnit(com.atlassian.plugin.loaders.classloading.DeploymentUnit,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.classloading.DeploymentUnit: java.io.File getPath()>
VIRTUAL edge: $r10 = virtualinvoke r2.<com.atlassian.plugin.loaders.classloading.DeploymentUnit: java.io.File getPath()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: com.atlassian.plugin.Plugin deployPluginFromUnit(com.atlassian.plugin.loaders.classloading.DeploymentUnit,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.classloading.DeploymentUnit: java.io.File getPath()>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.io.File: java.net.URI toURI()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: com.atlassian.plugin.Plugin deployPluginFromUnit(com.atlassian.plugin.loaders.classloading.DeploymentUnit,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.io.File: java.net.URI toURI()>
INTERFACE edge: r28 = interfaceinvoke $r15.<com.atlassian.plugin.PluginArtifactFactory: com.atlassian.plugin.PluginArtifact create(java.net.URI)>($r17) in <com.atlassian.plugin.loaders.ScanningPluginLoader: com.atlassian.plugin.Plugin deployPluginFromUnit(com.atlassian.plugin.loaders.classloading.DeploymentUnit,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.DefaultPluginArtifactFactory: com.atlassian.plugin.PluginArtifact create(java.net.URI)>
INTERFACE edge: r27 = interfaceinvoke r14.<com.atlassian.plugin.factories.PluginFactory: java.lang.String canCreate(com.atlassian.plugin.PluginArtifact)>(r28) in <com.atlassian.plugin.loaders.ScanningPluginLoader: com.atlassian.plugin.Plugin deployPluginFromUnit(com.atlassian.plugin.loaders.classloading.DeploymentUnit,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.factories.PluginFactory: java.lang.String canCreate(com.atlassian.plugin.PluginArtifact)>
INTERFACE edge: r27 = interfaceinvoke r14.<com.atlassian.plugin.factories.PluginFactory: java.lang.String canCreate(com.atlassian.plugin.PluginArtifact)>(r28) in <com.atlassian.plugin.loaders.ScanningPluginLoader: com.atlassian.plugin.Plugin deployPluginFromUnit(com.atlassian.plugin.loaders.classloading.DeploymentUnit,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.factories.XmlDynamicPluginFactory: java.lang.String canCreate(com.atlassian.plugin.PluginArtifact)>
INTERFACE edge: r27 = interfaceinvoke r14.<com.atlassian.plugin.factories.PluginFactory: java.lang.String canCreate(com.atlassian.plugin.PluginArtifact)>(r28) in <com.atlassian.plugin.loaders.ScanningPluginLoader: com.atlassian.plugin.Plugin deployPluginFromUnit(com.atlassian.plugin.loaders.classloading.DeploymentUnit,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.factories.AbstractPluginFactory: java.lang.String canCreate(com.atlassian.plugin.PluginArtifact)>
INTERFACE edge: r25 = interfaceinvoke r14.<com.atlassian.plugin.factories.PluginFactory: com.atlassian.plugin.Plugin create(com.atlassian.plugin.PluginArtifact,com.atlassian.plugin.ModuleDescriptorFactory)>(r28, r18) in <com.atlassian.plugin.loaders.ScanningPluginLoader: com.atlassian.plugin.Plugin deployPluginFromUnit(com.atlassian.plugin.loaders.classloading.DeploymentUnit,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.factories.PluginFactory: com.atlassian.plugin.Plugin create(com.atlassian.plugin.PluginArtifact,com.atlassian.plugin.ModuleDescriptorFactory)>
INTERFACE edge: r25 = interfaceinvoke r14.<com.atlassian.plugin.factories.PluginFactory: com.atlassian.plugin.Plugin create(com.atlassian.plugin.PluginArtifact,com.atlassian.plugin.ModuleDescriptorFactory)>(r28, r18) in <com.atlassian.plugin.loaders.ScanningPluginLoader: com.atlassian.plugin.Plugin deployPluginFromUnit(com.atlassian.plugin.loaders.classloading.DeploymentUnit,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.factories.XmlDynamicPluginFactory: com.atlassian.plugin.Plugin create(com.atlassian.plugin.PluginArtifact,com.atlassian.plugin.ModuleDescriptorFactory)>
INTERFACE edge: r25 = interfaceinvoke r14.<com.atlassian.plugin.factories.PluginFactory: com.atlassian.plugin.Plugin create(com.atlassian.plugin.PluginArtifact,com.atlassian.plugin.ModuleDescriptorFactory)>(r28, r18) in <com.atlassian.plugin.loaders.ScanningPluginLoader: com.atlassian.plugin.Plugin deployPluginFromUnit(com.atlassian.plugin.loaders.classloading.DeploymentUnit,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: com.atlassian.plugin.Plugin create(com.atlassian.plugin.PluginArtifact,com.atlassian.plugin.ModuleDescriptorFactory)>
VIRTUAL edge: $r20 = virtualinvoke r14.<java.lang.Object: java.lang.Class getClass()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: com.atlassian.plugin.Plugin deployPluginFromUnit(com.atlassian.plugin.loaders.classloading.DeploymentUnit,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r21 = virtualinvoke $r20.<java.lang.Class: java.lang.String getName()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: com.atlassian.plugin.Plugin deployPluginFromUnit(com.atlassian.plugin.loaders.classloading.DeploymentUnit,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.lang.Class: java.lang.String getName()>
INTERFACE edge: interfaceinvoke $r19.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Plugin factory \'{}\' created plugin \'{}\'.", $r21, r27) in <com.atlassian.plugin.loaders.ScanningPluginLoader: com.atlassian.plugin.Plugin deployPluginFromUnit(com.atlassian.plugin.loaders.classloading.DeploymentUnit,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r24.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Because of the following exception:", $r22) in <com.atlassian.plugin.loaders.ScanningPluginLoader: com.atlassian.plugin.Plugin deployPluginFromUnit(com.atlassian.plugin.loaders.classloading.DeploymentUnit,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>
VIRTUAL edge: r26 = virtualinvoke $r22.<java.lang.Throwable: java.lang.String getMessage()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: com.atlassian.plugin.Plugin deployPluginFromUnit(com.atlassian.plugin.loaders.classloading.DeploymentUnit,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.lang.Throwable: java.lang.String getMessage()>
VIRTUAL edge: r26 = virtualinvoke $r22.<java.lang.Throwable: java.lang.String getMessage()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: com.atlassian.plugin.Plugin deployPluginFromUnit(com.atlassian.plugin.loaders.classloading.DeploymentUnit,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <org.xml.sax.SAXException: java.lang.String getMessage()>
VIRTUAL edge: r26 = virtualinvoke $r22.<java.lang.Throwable: java.lang.String getMessage()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: com.atlassian.plugin.Plugin deployPluginFromUnit(com.atlassian.plugin.loaders.classloading.DeploymentUnit,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.nio.charset.MalformedInputException: java.lang.String getMessage()>
VIRTUAL edge: r26 = virtualinvoke $r22.<java.lang.Throwable: java.lang.String getMessage()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: com.atlassian.plugin.Plugin deployPluginFromUnit(com.atlassian.plugin.loaders.classloading.DeploymentUnit,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.net.URISyntaxException: java.lang.String getMessage()>
VIRTUAL edge: r26 = virtualinvoke $r22.<java.lang.Throwable: java.lang.String getMessage()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: com.atlassian.plugin.Plugin deployPluginFromUnit(com.atlassian.plugin.loaders.classloading.DeploymentUnit,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.regex.PatternSyntaxException: java.lang.String getMessage()>
VIRTUAL edge: r26 = virtualinvoke $r22.<java.lang.Throwable: java.lang.String getMessage()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: com.atlassian.plugin.Plugin deployPluginFromUnit(com.atlassian.plugin.loaders.classloading.DeploymentUnit,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
SPECIAL edge: specialinvoke $r31.<com.atlassian.plugin.impl.UnloadablePlugin: void <init>(java.lang.String)>(r26) in <com.atlassian.plugin.loaders.ScanningPluginLoader: com.atlassian.plugin.Plugin deployPluginFromUnit(com.atlassian.plugin.loaders.classloading.DeploymentUnit,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.impl.UnloadablePlugin: void <init>(java.lang.String)>
INTERFACE edge: interfaceinvoke $r32.<com.atlassian.plugin.Plugin: void setKey(java.lang.String)>(r27) in <com.atlassian.plugin.loaders.ScanningPluginLoader: com.atlassian.plugin.Plugin deployPluginFromUnit(com.atlassian.plugin.loaders.classloading.DeploymentUnit,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.impl.AbstractPlugin: void setKey(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.io.File: java.lang.String getName()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: com.atlassian.plugin.Plugin deployPluginFromUnit(com.atlassian.plugin.loaders.classloading.DeploymentUnit,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.io.File: java.lang.String getName()>
INTERFACE edge: interfaceinvoke $r33.<com.atlassian.plugin.Plugin: void setKey(java.lang.String)>($r11) in <com.atlassian.plugin.loaders.ScanningPluginLoader: com.atlassian.plugin.Plugin deployPluginFromUnit(com.atlassian.plugin.loaders.classloading.DeploymentUnit,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.impl.AbstractPlugin: void setKey(java.lang.String)>
INTERFACE edge: interfaceinvoke $r12.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Could not find a suitable factory for plugin \'{}\' of \'{}\'", r27, r2) in <com.atlassian.plugin.loaders.ScanningPluginLoader: com.atlassian.plugin.Plugin deployPluginFromUnit(com.atlassian.plugin.loaders.classloading.DeploymentUnit,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>
INTERFACE edge: $r8 = interfaceinvoke $r34.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: com.atlassian.plugin.Plugin deployPluginFromUnit(com.atlassian.plugin.loaders.classloading.DeploymentUnit,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r8 = interfaceinvoke $r34.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: com.atlassian.plugin.Plugin deployPluginFromUnit(com.atlassian.plugin.loaders.classloading.DeploymentUnit,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
INTERFACE edge: interfaceinvoke $r7.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Plugin \'{}\' created from \'{}\'", $r8, r2) in <com.atlassian.plugin.loaders.ScanningPluginLoader: com.atlassian.plugin.Plugin deployPluginFromUnit(com.atlassian.plugin.loaders.classloading.DeploymentUnit,com.atlassian.plugin.ModuleDescriptorFactory)> ==> <org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<com.atlassian.plugin.PluginInternal: void setBundledPlugin(boolean)>(1) in <com.atlassian.plugin.loaders.BundledPluginLoader: com.atlassian.plugin.Plugin postProcess(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: void setBundledPlugin(boolean)>
VIRTUAL edge: $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() in <com.atlassian.plugin.loaders.BundledPluginLoader: com.atlassian.plugin.Plugin postProcess(com.atlassian.plugin.Plugin)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getCanonicalName()>() in <com.atlassian.plugin.loaders.BundledPluginLoader: com.atlassian.plugin.Plugin postProcess(com.atlassian.plugin.Plugin)> ==> <java.lang.Class: java.lang.String getCanonicalName()>
INTERFACE edge: interfaceinvoke $r1.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>("unable to set bundled attribute on plugin \'{}\' as it is of class {}", r0, $r3) in <com.atlassian.plugin.loaders.BundledPluginLoader: com.atlassian.plugin.Plugin postProcess(com.atlassian.plugin.Plugin)> ==> <org.slf4j.Logger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: com.atlassian.plugin.loaders.classloading.DeploymentUnit findMatchingDeploymentUnit(com.atlassian.plugin.Plugin)> ==> <java.util.HashMap: java.util.Set entrySet()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: com.atlassian.plugin.loaders.classloading.DeploymentUnit findMatchingDeploymentUnit(com.atlassian.plugin.Plugin)> ==> <java.util.Hashtable: java.util.Set entrySet()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: com.atlassian.plugin.loaders.classloading.DeploymentUnit findMatchingDeploymentUnit(com.atlassian.plugin.Plugin)> ==> <java.util.TreeMap: java.util.Set entrySet()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: com.atlassian.plugin.loaders.classloading.DeploymentUnit findMatchingDeploymentUnit(com.atlassian.plugin.Plugin)> ==> <java.util.jar.Attributes: java.util.Set entrySet()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: com.atlassian.plugin.loaders.classloading.DeploymentUnit findMatchingDeploymentUnit(com.atlassian.plugin.Plugin)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: com.atlassian.plugin.loaders.classloading.DeploymentUnit findMatchingDeploymentUnit(com.atlassian.plugin.Plugin)> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: com.atlassian.plugin.loaders.classloading.DeploymentUnit findMatchingDeploymentUnit(com.atlassian.plugin.Plugin)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke $r17.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: com.atlassian.plugin.loaders.classloading.DeploymentUnit findMatchingDeploymentUnit(com.atlassian.plugin.Plugin)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("This pluginLoader has no memory of deploying the plugin you are trying remove: [") in <com.atlassian.plugin.loaders.ScanningPluginLoader: com.atlassian.plugin.loaders.classloading.DeploymentUnit findMatchingDeploymentUnit(com.atlassian.plugin.Plugin)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
INTERFACE edge: $r8 = interfaceinvoke r7.<com.atlassian.plugin.Plugin: java.lang.String getName()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: com.atlassian.plugin.loaders.classloading.DeploymentUnit findMatchingDeploymentUnit(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getName()>
VIRTUAL edge: $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8) in <com.atlassian.plugin.loaders.ScanningPluginLoader: com.atlassian.plugin.loaders.classloading.DeploymentUnit findMatchingDeploymentUnit(com.atlassian.plugin.Plugin)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]") in <com.atlassian.plugin.loaders.ScanningPluginLoader: com.atlassian.plugin.loaders.classloading.DeploymentUnit findMatchingDeploymentUnit(com.atlassian.plugin.Plugin)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: com.atlassian.plugin.loaders.classloading.DeploymentUnit findMatchingDeploymentUnit(com.atlassian.plugin.Plugin)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r18.<com.atlassian.plugin.PluginException: void <init>(java.lang.String)>($r11) in <com.atlassian.plugin.loaders.ScanningPluginLoader: com.atlassian.plugin.loaders.classloading.DeploymentUnit findMatchingDeploymentUnit(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.PluginException: void <init>(java.lang.String)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: void deleteDeploymentUnit(com.atlassian.plugin.loaders.classloading.DeploymentUnit)> ==> <java.util.HashMap: java.util.Set keySet()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: void deleteDeploymentUnit(com.atlassian.plugin.loaders.classloading.DeploymentUnit)> ==> <java.util.Hashtable: java.util.Set keySet()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: void deleteDeploymentUnit(com.atlassian.plugin.loaders.classloading.DeploymentUnit)> ==> <java.util.TreeMap: java.util.Set keySet()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: void deleteDeploymentUnit(com.atlassian.plugin.loaders.classloading.DeploymentUnit)> ==> <java.util.jar.Attributes: java.util.Set keySet()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: void deleteDeploymentUnit(com.atlassian.plugin.loaders.classloading.DeploymentUnit)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: void deleteDeploymentUnit(com.atlassian.plugin.loaders.classloading.DeploymentUnit)> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: void deleteDeploymentUnit(com.atlassian.plugin.loaders.classloading.DeploymentUnit)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
VIRTUAL edge: $r8 = virtualinvoke r7.<com.atlassian.plugin.loaders.classloading.DeploymentUnit: java.io.File getPath()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: void deleteDeploymentUnit(com.atlassian.plugin.loaders.classloading.DeploymentUnit)> ==> <com.atlassian.plugin.loaders.classloading.DeploymentUnit: java.io.File getPath()>
VIRTUAL edge: $z2 = virtualinvoke r7.<com.atlassian.plugin.loaders.classloading.DeploymentUnit: boolean equals(com.atlassian.plugin.loaders.classloading.DeploymentUnit)>(r4) in <com.atlassian.plugin.loaders.ScanningPluginLoader: void deleteDeploymentUnit(com.atlassian.plugin.loaders.classloading.DeploymentUnit)> ==> <com.atlassian.plugin.loaders.classloading.DeploymentUnit: boolean equals(com.atlassian.plugin.loaders.classloading.DeploymentUnit)>
VIRTUAL edge: $r9 = virtualinvoke r4.<com.atlassian.plugin.loaders.classloading.DeploymentUnit: java.io.File getPath()>() in <com.atlassian.plugin.loaders.ScanningPluginLoader: void deleteDeploymentUnit(com.atlassian.plugin.loaders.classloading.DeploymentUnit)> ==> <com.atlassian.plugin.loaders.classloading.DeploymentUnit: java.io.File getPath()>
VIRTUAL edge: $z1 = virtualinvoke $r8.<java.io.File: boolean equals(java.lang.Object)>($r9) in <com.atlassian.plugin.loaders.ScanningPluginLoader: void deleteDeploymentUnit(com.atlassian.plugin.loaders.classloading.DeploymentUnit)> ==> <java.io.File: boolean equals(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<com.atlassian.plugin.loaders.classloading.Scanner: void remove(com.atlassian.plugin.loaders.classloading.DeploymentUnit)>(r4) in <com.atlassian.plugin.loaders.ScanningPluginLoader: void deleteDeploymentUnit(com.atlassian.plugin.loaders.classloading.DeploymentUnit)> ==> <com.atlassian.plugin.loaders.DirectoryScanner: void remove(com.atlassian.plugin.loaders.classloading.DeploymentUnit)>
INTERFACE edge: interfaceinvoke $r5.<com.atlassian.plugin.loaders.classloading.Scanner: void remove(com.atlassian.plugin.loaders.classloading.DeploymentUnit)>(r4) in <com.atlassian.plugin.loaders.ScanningPluginLoader: void deleteDeploymentUnit(com.atlassian.plugin.loaders.classloading.DeploymentUnit)> ==> <com.atlassian.plugin.loaders.classloading.EmptyScanner: void remove(com.atlassian.plugin.loaders.classloading.DeploymentUnit)>
INTERFACE edge: interfaceinvoke $r5.<com.atlassian.plugin.loaders.classloading.Scanner: void remove(com.atlassian.plugin.loaders.classloading.DeploymentUnit)>(r4) in <com.atlassian.plugin.loaders.ScanningPluginLoader: void deleteDeploymentUnit(com.atlassian.plugin.loaders.classloading.DeploymentUnit)> ==> <com.atlassian.plugin.loaders.RosterFileScanner: void remove(com.atlassian.plugin.loaders.classloading.DeploymentUnit)>
INTERFACE edge: interfaceinvoke $r5.<com.atlassian.plugin.loaders.classloading.Scanner: void remove(com.atlassian.plugin.loaders.classloading.DeploymentUnit)>(r4) in <com.atlassian.plugin.loaders.ScanningPluginLoader: void deleteDeploymentUnit(com.atlassian.plugin.loaders.classloading.DeploymentUnit)> ==> <com.atlassian.plugin.loaders.classloading.ForwardingScanner: void remove(com.atlassian.plugin.loaders.classloading.DeploymentUnit)>
INTERFACE edge: interfaceinvoke $r5.<com.atlassian.plugin.loaders.classloading.Scanner: void remove(com.atlassian.plugin.loaders.classloading.DeploymentUnit)>(r4) in <com.atlassian.plugin.loaders.ScanningPluginLoader: void deleteDeploymentUnit(com.atlassian.plugin.loaders.classloading.DeploymentUnit)> ==> <com.atlassian.plugin.loaders.FileListScanner: void remove(com.atlassian.plugin.loaders.classloading.DeploymentUnit)>
INTERFACE edge: interfaceinvoke $r5.<com.atlassian.plugin.loaders.classloading.Scanner: void remove(com.atlassian.plugin.loaders.classloading.DeploymentUnit)>(r4) in <com.atlassian.plugin.loaders.ScanningPluginLoader: void deleteDeploymentUnit(com.atlassian.plugin.loaders.classloading.DeploymentUnit)> ==> <com.atlassian.plugin.loaders.BundledPluginLoader$NonRemovingScanner: void remove(com.atlassian.plugin.loaders.classloading.DeploymentUnit)>
SPECIAL edge: specialinvoke $r13.<com.atlassian.plugin.PluginException: void <init>(java.lang.Throwable)>($r10) in <com.atlassian.plugin.loaders.ScanningPluginLoader: void deleteDeploymentUnit(com.atlassian.plugin.loaders.classloading.DeploymentUnit)> ==> <com.atlassian.plugin.PluginException: void <init>(java.lang.Throwable)>
SPECIAL edge: specialinvoke $r0.<java.util.TreeSet: void <init>(java.util.Comparator)>($r1) in <com.atlassian.plugin.hostcontainer.SimpleConstructorHostContainer: java.util.Collection findConstructorsLargestFirst(java.lang.Class)> ==> <java.util.TreeSet: void <init>(java.util.Comparator)>
INTERFACE edge: interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>(r5) in <com.atlassian.plugin.hostcontainer.SimpleConstructorHostContainer: java.util.Collection findConstructorsLargestFirst(java.lang.Class)> ==> <java.util.TreeSet: boolean add(java.lang.Object)>
VIRTUAL edge: r4 = virtualinvoke r3.<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()>() in <com.atlassian.plugin.hostcontainer.SimpleConstructorHostContainer: java.util.Collection findConstructorsLargestFirst(java.lang.Class)> ==> <java.lang.Class: java.lang.reflect.Constructor[] getConstructors()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.loaders.DirectoryScanner: void clear(java.util.List)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.loaders.DirectoryScanner: void clear(java.util.List)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
VIRTUAL edge: virtualinvoke r4.<com.atlassian.plugin.loaders.DirectoryScanner: void clear(java.io.File)>(r3) in <com.atlassian.plugin.loaders.DirectoryScanner: void clear(java.util.List)> ==> <com.atlassian.plugin.loaders.DirectoryScanner: void clear(java.io.File)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.atlassian.plugin.loaders.DirectoryScanner: com.atlassian.plugin.loaders.classloading.DeploymentUnit locateDeploymentUnit(java.io.File)>(r1) in <com.atlassian.plugin.loaders.DirectoryScanner: boolean isScanned(java.io.File)> ==> <com.atlassian.plugin.loaders.DirectoryScanner: com.atlassian.plugin.loaders.classloading.DeploymentUnit locateDeploymentUnit(java.io.File)>
VIRTUAL edge: r2 = virtualinvoke r0.<com.atlassian.plugin.loaders.DirectoryScanner: com.atlassian.plugin.loaders.classloading.DeploymentUnit locateDeploymentUnit(java.io.File)>(r1) in <com.atlassian.plugin.loaders.DirectoryScanner: boolean isModified(java.io.File)> ==> <com.atlassian.plugin.loaders.DirectoryScanner: com.atlassian.plugin.loaders.classloading.DeploymentUnit locateDeploymentUnit(java.io.File)>
VIRTUAL edge: $l0 = virtualinvoke r1.<java.io.File: long lastModified()>() in <com.atlassian.plugin.loaders.DirectoryScanner: boolean isModified(java.io.File)> ==> <java.io.File: long lastModified()>
SPECIAL edge: $z0 = specialinvoke r0.<com.atlassian.plugin.loaders.DirectoryScanner: boolean isScanned(java.io.File)>(r1) in <com.atlassian.plugin.loaders.DirectoryScanner: com.atlassian.plugin.loaders.classloading.DeploymentUnit createAndStoreDeploymentUnit(java.io.File)> ==> <com.atlassian.plugin.loaders.DirectoryScanner: boolean isScanned(java.io.File)>
SPECIAL edge: specialinvoke $r2.<com.atlassian.plugin.loaders.classloading.DeploymentUnit: void <init>(java.io.File)>(r1) in <com.atlassian.plugin.loaders.DirectoryScanner: com.atlassian.plugin.loaders.classloading.DeploymentUnit createAndStoreDeploymentUnit(java.io.File)> ==> <com.atlassian.plugin.loaders.classloading.DeploymentUnit: void <init>(java.io.File)>
VIRTUAL edge: $r5 = virtualinvoke r1.<java.io.File: java.lang.String getAbsolutePath()>() in <com.atlassian.plugin.loaders.DirectoryScanner: com.atlassian.plugin.loaders.classloading.DeploymentUnit createAndStoreDeploymentUnit(java.io.File)> ==> <java.io.File: java.lang.String getAbsolutePath()>
INTERFACE edge: interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r2) in <com.atlassian.plugin.loaders.DirectoryScanner: com.atlassian.plugin.loaders.classloading.DeploymentUnit createAndStoreDeploymentUnit(java.io.File)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r2) in <com.atlassian.plugin.loaders.DirectoryScanner: com.atlassian.plugin.loaders.classloading.DeploymentUnit createAndStoreDeploymentUnit(java.io.File)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r2) in <com.atlassian.plugin.loaders.DirectoryScanner: com.atlassian.plugin.loaders.classloading.DeploymentUnit createAndStoreDeploymentUnit(java.io.File)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r2) in <com.atlassian.plugin.loaders.DirectoryScanner: com.atlassian.plugin.loaders.classloading.DeploymentUnit createAndStoreDeploymentUnit(java.io.File)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.tracker.DefaultPluginModuleTracker$NoOpPluginModuleTrackerCustomizer: void <init>()>() in <com.atlassian.plugin.tracker.DefaultPluginModuleTracker$NoOpPluginModuleTrackerCustomizer: void <init>(com.atlassian.plugin.tracker.DefaultPluginModuleTracker$1)> ==> <com.atlassian.plugin.tracker.DefaultPluginModuleTracker$NoOpPluginModuleTrackerCustomizer: void <init>()>
SPECIAL edge: $r2 = specialinvoke r0.<com.atlassian.plugin.tracker.DefaultPluginModuleTracker: java.lang.Iterable filtered(java.lang.Iterable)>(r1) in <com.atlassian.plugin.tracker.DefaultPluginModuleTracker: void addDescriptors(java.lang.Iterable)> ==> <com.atlassian.plugin.tracker.DefaultPluginModuleTracker: java.lang.Iterable filtered(java.lang.Iterable)>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.atlassian.plugin.tracker.DefaultPluginModuleTracker: void addDescriptors(java.lang.Iterable)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.atlassian.plugin.tracker.DefaultPluginModuleTracker: void addDescriptors(java.lang.Iterable)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.atlassian.plugin.tracker.DefaultPluginModuleTracker: void addDescriptors(java.lang.Iterable)> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.atlassian.plugin.tracker.DefaultPluginModuleTracker: void addDescriptors(java.lang.Iterable)> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.atlassian.plugin.tracker.DefaultPluginModuleTracker: void addDescriptors(java.lang.Iterable)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.atlassian.plugin.tracker.DefaultPluginModuleTracker: void addDescriptors(java.lang.Iterable)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: r7 = interfaceinvoke $r6.<com.atlassian.plugin.tracker.PluginModuleTracker$Customizer: com.atlassian.plugin.ModuleDescriptor adding(com.atlassian.plugin.ModuleDescriptor)>(r5) in <com.atlassian.plugin.tracker.DefaultPluginModuleTracker: void addDescriptors(java.lang.Iterable)> ==> <com.atlassian.plugin.tracker.DefaultPluginModuleTracker$NoOpPluginModuleTrackerCustomizer: com.atlassian.plugin.ModuleDescriptor adding(com.atlassian.plugin.ModuleDescriptor)>
VIRTUAL edge: virtualinvoke $r8.<java.util.concurrent.CopyOnWriteArraySet: boolean add(java.lang.Object)>(r7) in <com.atlassian.plugin.tracker.DefaultPluginModuleTracker: void addDescriptors(java.lang.Iterable)> ==> <java.util.concurrent.CopyOnWriteArraySet: boolean add(java.lang.Object)>
STATIC edge: $r3 = staticinvoke <com.google.common.collect.Iterables: java.lang.Iterable filter(java.lang.Iterable,java.lang.Class)>(r0, $r2) in <com.atlassian.plugin.tracker.DefaultPluginModuleTracker: java.lang.Iterable filtered(java.lang.Iterable)> ==> <com.google.common.collect.Iterables: java.lang.Iterable filter(java.lang.Iterable,java.lang.Class)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.tracker.DefaultPluginModuleTracker$ModuleTransformer: void <init>()>() in <com.atlassian.plugin.tracker.DefaultPluginModuleTracker$ModuleTransformer: void <init>(com.atlassian.plugin.tracker.DefaultPluginModuleTracker$1)> ==> <com.atlassian.plugin.tracker.DefaultPluginModuleTracker$ModuleTransformer: void <init>()>
SPECIAL edge: $r2 = specialinvoke r0.<com.atlassian.plugin.tracker.DefaultPluginModuleTracker: java.lang.Iterable filtered(java.lang.Iterable)>(r1) in <com.atlassian.plugin.tracker.DefaultPluginModuleTracker: void removeDescriptors(java.lang.Iterable)> ==> <com.atlassian.plugin.tracker.DefaultPluginModuleTracker: java.lang.Iterable filtered(java.lang.Iterable)>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.atlassian.plugin.tracker.DefaultPluginModuleTracker: void removeDescriptors(java.lang.Iterable)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.atlassian.plugin.tracker.DefaultPluginModuleTracker: void removeDescriptors(java.lang.Iterable)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.atlassian.plugin.tracker.DefaultPluginModuleTracker: void removeDescriptors(java.lang.Iterable)> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.atlassian.plugin.tracker.DefaultPluginModuleTracker: void removeDescriptors(java.lang.Iterable)> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.atlassian.plugin.tracker.DefaultPluginModuleTracker: void removeDescriptors(java.lang.Iterable)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.atlassian.plugin.tracker.DefaultPluginModuleTracker: void removeDescriptors(java.lang.Iterable)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
VIRTUAL edge: $z1 = virtualinvoke $r6.<java.util.concurrent.CopyOnWriteArraySet: boolean remove(java.lang.Object)>(r5) in <com.atlassian.plugin.tracker.DefaultPluginModuleTracker: void removeDescriptors(java.lang.Iterable)> ==> <java.util.concurrent.CopyOnWriteArraySet: boolean remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r7.<com.atlassian.plugin.tracker.PluginModuleTracker$Customizer: void removed(com.atlassian.plugin.ModuleDescriptor)>(r5) in <com.atlassian.plugin.tracker.DefaultPluginModuleTracker: void removeDescriptors(java.lang.Iterable)> ==> <com.atlassian.plugin.tracker.DefaultPluginModuleTracker$NoOpPluginModuleTrackerCustomizer: void removed(com.atlassian.plugin.ModuleDescriptor)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultSafeModeManager: void <init>(com.atlassian.plugin.metadata.PluginMetadataManager,com.atlassian.plugin.manager.ApplicationDefinedPluginsProvider,com.atlassian.plugin.manager.ClusterEnvironmentProvider,com.atlassian.plugin.parsers.SafeModeCommandLineArgumentsFactory,com.atlassian.plugin.manager.PluginPersistentStateStore)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.manager.DefaultSafeModeManager$1: void <init>(com.atlassian.plugin.manager.DefaultSafeModeManager)>(r0) in <com.atlassian.plugin.manager.DefaultSafeModeManager: void <init>(com.atlassian.plugin.metadata.PluginMetadataManager,com.atlassian.plugin.manager.ApplicationDefinedPluginsProvider,com.atlassian.plugin.manager.ClusterEnvironmentProvider,com.atlassian.plugin.parsers.SafeModeCommandLineArgumentsFactory,com.atlassian.plugin.manager.PluginPersistentStateStore)> ==> <com.atlassian.plugin.manager.DefaultSafeModeManager$1: void <init>(com.atlassian.plugin.manager.DefaultSafeModeManager)>
INTERFACE edge: $r5 = interfaceinvoke r4.<com.atlassian.plugin.parsers.SafeModeCommandLineArgumentsFactory: com.atlassian.plugin.parsers.SafeModeCommandLineArguments get()>() in <com.atlassian.plugin.manager.DefaultSafeModeManager: void <init>(com.atlassian.plugin.metadata.PluginMetadataManager,com.atlassian.plugin.manager.ApplicationDefinedPluginsProvider,com.atlassian.plugin.manager.ClusterEnvironmentProvider,com.atlassian.plugin.parsers.SafeModeCommandLineArgumentsFactory,com.atlassian.plugin.manager.PluginPersistentStateStore)> ==> <com.atlassian.plugin.parsers.DefaultSafeModeCommandLineArgumentsFactory: com.atlassian.plugin.parsers.SafeModeCommandLineArguments get()>
INTERFACE edge: $z0 = interfaceinvoke r7.<com.atlassian.plugin.manager.ClusterEnvironmentProvider: boolean isInCluster()>() in <com.atlassian.plugin.manager.DefaultSafeModeManager: void <init>(com.atlassian.plugin.metadata.PluginMetadataManager,com.atlassian.plugin.manager.ApplicationDefinedPluginsProvider,com.atlassian.plugin.manager.ClusterEnvironmentProvider,com.atlassian.plugin.parsers.SafeModeCommandLineArgumentsFactory,com.atlassian.plugin.manager.PluginPersistentStateStore)> ==> <com.atlassian.plugin.manager.ClusterEnvironmentProvider$lambda_static_0__27: boolean isInCluster()>
INTERFACE edge: $z5 = interfaceinvoke r7.<com.atlassian.plugin.manager.ClusterEnvironmentProvider: boolean isInCluster()>() in <com.atlassian.plugin.manager.DefaultSafeModeManager: void <init>(com.atlassian.plugin.metadata.PluginMetadataManager,com.atlassian.plugin.manager.ApplicationDefinedPluginsProvider,com.atlassian.plugin.manager.ClusterEnvironmentProvider,com.atlassian.plugin.parsers.SafeModeCommandLineArgumentsFactory,com.atlassian.plugin.manager.PluginPersistentStateStore)> ==> <com.atlassian.plugin.manager.ClusterEnvironmentProvider$lambda_static_0__27: boolean isInCluster()>
VIRTUAL edge: $z3 = virtualinvoke $r18.<com.atlassian.plugin.parsers.SafeModeCommandLineArguments: boolean isSafeMode()>() in <com.atlassian.plugin.manager.DefaultSafeModeManager: void <init>(com.atlassian.plugin.metadata.PluginMetadataManager,com.atlassian.plugin.manager.ApplicationDefinedPluginsProvider,com.atlassian.plugin.manager.ClusterEnvironmentProvider,com.atlassian.plugin.parsers.SafeModeCommandLineArgumentsFactory,com.atlassian.plugin.manager.PluginPersistentStateStore)> ==> <com.atlassian.plugin.parsers.SafeModeCommandLineArguments: boolean isSafeMode()>
VIRTUAL edge: $z1 = virtualinvoke $r9.<com.atlassian.plugin.parsers.SafeModeCommandLineArguments: boolean isSafeMode()>() in <com.atlassian.plugin.manager.DefaultSafeModeManager: void <init>(com.atlassian.plugin.metadata.PluginMetadataManager,com.atlassian.plugin.manager.ApplicationDefinedPluginsProvider,com.atlassian.plugin.manager.ClusterEnvironmentProvider,com.atlassian.plugin.parsers.SafeModeCommandLineArgumentsFactory,com.atlassian.plugin.manager.PluginPersistentStateStore)> ==> <com.atlassian.plugin.parsers.SafeModeCommandLineArguments: boolean isSafeMode()>
VIRTUAL edge: $r14 = virtualinvoke $r13.<com.atlassian.plugin.parsers.SafeModeCommandLineArguments: java.util.Optional getDisabledPlugins()>() in <com.atlassian.plugin.manager.DefaultSafeModeManager: void <init>(com.atlassian.plugin.metadata.PluginMetadataManager,com.atlassian.plugin.manager.ApplicationDefinedPluginsProvider,com.atlassian.plugin.manager.ClusterEnvironmentProvider,com.atlassian.plugin.parsers.SafeModeCommandLineArgumentsFactory,com.atlassian.plugin.manager.PluginPersistentStateStore)> ==> <com.atlassian.plugin.parsers.SafeModeCommandLineArguments: java.util.Optional getDisabledPlugins()>
INTERFACE edge: $z2 = interfaceinvoke $r17.<java.util.List: boolean isEmpty()>() in <com.atlassian.plugin.manager.DefaultSafeModeManager: void <init>(com.atlassian.plugin.metadata.PluginMetadataManager,com.atlassian.plugin.manager.ApplicationDefinedPluginsProvider,com.atlassian.plugin.manager.ClusterEnvironmentProvider,com.atlassian.plugin.parsers.SafeModeCommandLineArgumentsFactory,com.atlassian.plugin.manager.PluginPersistentStateStore)> ==> <java.util.AbstractCollection: boolean isEmpty()>
INTERFACE edge: $z2 = interfaceinvoke $r17.<java.util.List: boolean isEmpty()>() in <com.atlassian.plugin.manager.DefaultSafeModeManager: void <init>(com.atlassian.plugin.metadata.PluginMetadataManager,com.atlassian.plugin.manager.ApplicationDefinedPluginsProvider,com.atlassian.plugin.manager.ClusterEnvironmentProvider,com.atlassian.plugin.parsers.SafeModeCommandLineArgumentsFactory,com.atlassian.plugin.manager.PluginPersistentStateStore)> ==> <java.util.ArrayList: boolean isEmpty()>
VIRTUAL edge: $r12 = virtualinvoke $r10.<com.atlassian.plugin.parsers.SafeModeCommandLineArguments: java.lang.String getSafeModeArguments()>() in <com.atlassian.plugin.manager.DefaultSafeModeManager: void <init>(com.atlassian.plugin.metadata.PluginMetadataManager,com.atlassian.plugin.manager.ApplicationDefinedPluginsProvider,com.atlassian.plugin.manager.ClusterEnvironmentProvider,com.atlassian.plugin.parsers.SafeModeCommandLineArgumentsFactory,com.atlassian.plugin.manager.PluginPersistentStateStore)> ==> <com.atlassian.plugin.parsers.SafeModeCommandLineArguments: java.lang.String getSafeModeArguments()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<com.atlassian.plugin.parsers.SafeModeCommandLineArguments: boolean shouldLastEnabledBeDisabled()>() in <com.atlassian.plugin.manager.DefaultSafeModeManager: boolean isPluginDisabledByDisableLastEnabled(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.parsers.SafeModeCommandLineArguments: boolean shouldLastEnabledBeDisabled()>
INTERFACE edge: $r3 = interfaceinvoke r2.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultSafeModeManager: boolean isPluginDisabledByDisableLastEnabled(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r3 = interfaceinvoke r2.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultSafeModeManager: boolean isPluginDisabledByDisableLastEnabled(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
INTERFACE edge: $r5 = interfaceinvoke $r4.<com.google.common.base.Supplier: java.lang.Object get()>() in <com.atlassian.plugin.manager.DefaultSafeModeManager: boolean isPluginDisabledByDisableLastEnabled(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.DefaultSafeModeManager$1: java.lang.Object get()>
INTERFACE edge: $r5 = interfaceinvoke $r4.<com.google.common.base.Supplier: java.lang.Object get()>() in <com.atlassian.plugin.manager.DefaultSafeModeManager: boolean isPluginDisabledByDisableLastEnabled(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin$getPermissionsInternal__135: java.lang.Object get()>
VIRTUAL edge: $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r7) in <com.atlassian.plugin.manager.DefaultSafeModeManager: boolean isPluginDisabledByDisableLastEnabled(com.atlassian.plugin.Plugin)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<com.atlassian.plugin.parsers.SafeModeCommandLineArguments: boolean isSafeMode()>() in <com.atlassian.plugin.manager.DefaultSafeModeManager: boolean isPluginDisabledBySafeMode(com.atlassian.plugin.Plugin,java.lang.Iterable)> ==> <com.atlassian.plugin.parsers.SafeModeCommandLineArguments: boolean isSafeMode()>
SPECIAL edge: $z1 = specialinvoke r0.<com.atlassian.plugin.manager.DefaultSafeModeManager: boolean isSystemPlugin(com.atlassian.plugin.Plugin,java.lang.Iterable)>(r2, r3) in <com.atlassian.plugin.manager.DefaultSafeModeManager: boolean isPluginDisabledBySafeMode(com.atlassian.plugin.Plugin,java.lang.Iterable)> ==> <com.atlassian.plugin.manager.DefaultSafeModeManager: boolean isSystemPlugin(com.atlassian.plugin.Plugin,java.lang.Iterable)>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.loaders.BundledPluginLoader$NonRemovingScanner: void <init>(com.atlassian.plugin.loaders.classloading.Scanner)>(r2) in <com.atlassian.plugin.loaders.BundledPluginLoader: void <init>(com.atlassian.plugin.loaders.classloading.Scanner,java.util.List,com.atlassian.plugin.event.PluginEventManager)> ==> <com.atlassian.plugin.loaders.BundledPluginLoader$NonRemovingScanner: void <init>(com.atlassian.plugin.loaders.classloading.Scanner)>
SPECIAL edge: specialinvoke $r4.<com.atlassian.plugin.DefaultPluginArtifactFactory: void <init>(com.atlassian.plugin.ReferenceMode)>($r5) in <com.atlassian.plugin.loaders.BundledPluginLoader: void <init>(com.atlassian.plugin.loaders.classloading.Scanner,java.util.List,com.atlassian.plugin.event.PluginEventManager)> ==> <com.atlassian.plugin.DefaultPluginArtifactFactory: void <init>(com.atlassian.plugin.ReferenceMode)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.loaders.ScanningPluginLoader: void <init>(com.atlassian.plugin.loaders.classloading.Scanner,java.util.List,com.atlassian.plugin.PluginArtifactFactory,com.atlassian.plugin.event.PluginEventManager)>($r1, r3, $r4, r6) in <com.atlassian.plugin.loaders.BundledPluginLoader: void <init>(com.atlassian.plugin.loaders.classloading.Scanner,java.util.List,com.atlassian.plugin.event.PluginEventManager)> ==> <com.atlassian.plugin.loaders.ScanningPluginLoader: void <init>(com.atlassian.plugin.loaders.classloading.Scanner,java.util.List,com.atlassian.plugin.PluginArtifactFactory,com.atlassian.plugin.event.PluginEventManager)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.loaders.PermissionCheckingPluginLoader$CheckPluginPermissionFunction: void <init>(com.atlassian.plugin.loaders.PermissionCheckingPluginLoader)>(r1) in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader$CheckPluginPermissionFunction: void <init>(com.atlassian.plugin.loaders.PermissionCheckingPluginLoader,com.atlassian.plugin.loaders.PermissionCheckingPluginLoader$1)> ==> <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader$CheckPluginPermissionFunction: void <init>(com.atlassian.plugin.loaders.PermissionCheckingPluginLoader)>
INTERFACE edge: r1 = interfaceinvoke r0.<com.atlassian.plugin.PluginInternal: com.atlassian.plugin.PluginArtifact getPluginArtifact()>() in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader$CheckPluginPermissionFunction: com.atlassian.plugin.Plugin checkPlugin(com.atlassian.plugin.PluginInternal)> ==> <com.atlassian.plugin.impl.AbstractPlugin: com.atlassian.plugin.PluginArtifact getPluginArtifact()>
INTERFACE edge: $r12 = interfaceinvoke r0.<com.atlassian.plugin.PluginInternal: java.util.Set getActivePermissions()>() in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader$CheckPluginPermissionFunction: com.atlassian.plugin.Plugin checkPlugin(com.atlassian.plugin.PluginInternal)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.util.Set getActivePermissions()>
INTERFACE edge: $r14 = interfaceinvoke r0.<com.atlassian.plugin.PluginInternal: java.lang.String getKey()>() in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader$CheckPluginPermissionFunction: com.atlassian.plugin.Plugin checkPlugin(com.atlassian.plugin.PluginInternal)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r15 = interfaceinvoke r0.<com.atlassian.plugin.PluginInternal: java.lang.String getName()>() in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader$CheckPluginPermissionFunction: com.atlassian.plugin.Plugin checkPlugin(com.atlassian.plugin.PluginInternal)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getName()>
INTERFACE edge: $r18 = interfaceinvoke r0.<com.atlassian.plugin.PluginInternal: java.lang.String getKey()>() in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader$CheckPluginPermissionFunction: com.atlassian.plugin.Plugin checkPlugin(com.atlassian.plugin.PluginInternal)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r19 = interfaceinvoke r0.<com.atlassian.plugin.PluginInternal: java.util.Set getActivePermissions()>() in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader$CheckPluginPermissionFunction: com.atlassian.plugin.Plugin checkPlugin(com.atlassian.plugin.PluginInternal)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.util.Set getActivePermissions()>
INTERFACE edge: $r3 = interfaceinvoke r0.<com.atlassian.plugin.PluginInternal: java.util.Set getActivePermissions()>() in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader$CheckPluginPermissionFunction: com.atlassian.plugin.Plugin checkPlugin(com.atlassian.plugin.PluginInternal)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.util.Set getActivePermissions()>
INTERFACE edge: $r5 = interfaceinvoke r0.<com.atlassian.plugin.PluginInternal: java.lang.String getKey()>() in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader$CheckPluginPermissionFunction: com.atlassian.plugin.Plugin checkPlugin(com.atlassian.plugin.PluginInternal)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r6 = interfaceinvoke r0.<com.atlassian.plugin.PluginInternal: java.lang.String getName()>() in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader$CheckPluginPermissionFunction: com.atlassian.plugin.Plugin checkPlugin(com.atlassian.plugin.PluginInternal)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getName()>
INTERFACE edge: $r9 = interfaceinvoke r0.<com.atlassian.plugin.PluginInternal: java.lang.String getKey()>() in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader$CheckPluginPermissionFunction: com.atlassian.plugin.Plugin checkPlugin(com.atlassian.plugin.PluginInternal)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r10 = interfaceinvoke r0.<com.atlassian.plugin.PluginInternal: java.util.Set getActivePermissions()>() in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader$CheckPluginPermissionFunction: com.atlassian.plugin.Plugin checkPlugin(com.atlassian.plugin.PluginInternal)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.util.Set getActivePermissions()>
INTERFACE edge: $z0 = interfaceinvoke r1.<com.atlassian.plugin.PluginArtifact: boolean containsJavaExecutableCode()>() in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader$CheckPluginPermissionFunction: com.atlassian.plugin.Plugin checkPlugin(com.atlassian.plugin.PluginInternal)> ==> <com.atlassian.plugin.JarPluginArtifact: boolean containsJavaExecutableCode()>
INTERFACE edge: $z0 = interfaceinvoke r1.<com.atlassian.plugin.PluginArtifact: boolean containsJavaExecutableCode()>() in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader$CheckPluginPermissionFunction: com.atlassian.plugin.Plugin checkPlugin(com.atlassian.plugin.PluginInternal)> ==> <com.atlassian.plugin.XmlPluginArtifact: boolean containsJavaExecutableCode()>
INTERFACE edge: $z3 = interfaceinvoke $r12.<java.util.Set: boolean contains(java.lang.Object)>("execute_java") in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader$CheckPluginPermissionFunction: com.atlassian.plugin.Plugin checkPlugin(com.atlassian.plugin.PluginInternal)> ==> <java.util.HashSet: boolean contains(java.lang.Object)>
INTERFACE edge: $z3 = interfaceinvoke $r12.<java.util.Set: boolean contains(java.lang.Object)>("execute_java") in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader$CheckPluginPermissionFunction: com.atlassian.plugin.Plugin checkPlugin(com.atlassian.plugin.PluginInternal)> ==> <java.util.concurrent.CopyOnWriteArraySet: boolean contains(java.lang.Object)>
INTERFACE edge: $z3 = interfaceinvoke $r12.<java.util.Set: boolean contains(java.lang.Object)>("execute_java") in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader$CheckPluginPermissionFunction: com.atlassian.plugin.Plugin checkPlugin(com.atlassian.plugin.PluginInternal)> ==> <java.util.TreeSet: boolean contains(java.lang.Object)>
SPECIAL edge: specialinvoke $r13.<com.atlassian.plugin.impl.UnloadablePlugin: void <init>(java.lang.String)>("Plugin doesn\'t require \'execute_java\' permission yet references some java executable code. This could be either embedded java classes, embedded java libraries, spring context files or bundle activator.") in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader$CheckPluginPermissionFunction: com.atlassian.plugin.Plugin checkPlugin(com.atlassian.plugin.PluginInternal)> ==> <com.atlassian.plugin.impl.UnloadablePlugin: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r13.<com.atlassian.plugin.impl.UnloadablePlugin: void setKey(java.lang.String)>($r14) in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader$CheckPluginPermissionFunction: com.atlassian.plugin.Plugin checkPlugin(com.atlassian.plugin.PluginInternal)> ==> <com.atlassian.plugin.impl.AbstractPlugin: void setKey(java.lang.String)>
VIRTUAL edge: virtualinvoke $r13.<com.atlassian.plugin.impl.UnloadablePlugin: void setName(java.lang.String)>($r15) in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader$CheckPluginPermissionFunction: com.atlassian.plugin.Plugin checkPlugin(com.atlassian.plugin.PluginInternal)> ==> <com.atlassian.plugin.impl.AbstractPlugin: void setName(java.lang.String)>
VIRTUAL edge: virtualinvoke $r20.<com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: void discardPlugin(com.atlassian.plugin.Plugin)>(r0) in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader$CheckPluginPermissionFunction: com.atlassian.plugin.Plugin checkPlugin(com.atlassian.plugin.PluginInternal)> ==> <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: void discardPlugin(com.atlassian.plugin.Plugin)>
SPECIAL edge: $z1 = specialinvoke r2.<com.atlassian.plugin.loaders.PermissionCheckingPluginLoader$CheckPluginPermissionFunction: boolean hasSystemModules(com.atlassian.plugin.Plugin)>(r0) in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader$CheckPluginPermissionFunction: com.atlassian.plugin.Plugin checkPlugin(com.atlassian.plugin.PluginInternal)> ==> <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader$CheckPluginPermissionFunction: boolean hasSystemModules(com.atlassian.plugin.Plugin)>
INTERFACE edge: $z2 = interfaceinvoke $r3.<java.util.Set: boolean contains(java.lang.Object)>("create_system_modules") in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader$CheckPluginPermissionFunction: com.atlassian.plugin.Plugin checkPlugin(com.atlassian.plugin.PluginInternal)> ==> <java.util.HashSet: boolean contains(java.lang.Object)>
INTERFACE edge: $z2 = interfaceinvoke $r3.<java.util.Set: boolean contains(java.lang.Object)>("create_system_modules") in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader$CheckPluginPermissionFunction: com.atlassian.plugin.Plugin checkPlugin(com.atlassian.plugin.PluginInternal)> ==> <java.util.concurrent.CopyOnWriteArraySet: boolean contains(java.lang.Object)>
INTERFACE edge: $z2 = interfaceinvoke $r3.<java.util.Set: boolean contains(java.lang.Object)>("create_system_modules") in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader$CheckPluginPermissionFunction: com.atlassian.plugin.Plugin checkPlugin(com.atlassian.plugin.PluginInternal)> ==> <java.util.TreeSet: boolean contains(java.lang.Object)>
SPECIAL edge: specialinvoke $r4.<com.atlassian.plugin.impl.UnloadablePlugin: void <init>(java.lang.String)>("Plugin doesn\'t require \'create_system_modules\' permission yet declared modules use the \'system\' attribute. ") in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader$CheckPluginPermissionFunction: com.atlassian.plugin.Plugin checkPlugin(com.atlassian.plugin.PluginInternal)> ==> <com.atlassian.plugin.impl.UnloadablePlugin: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r4.<com.atlassian.plugin.impl.UnloadablePlugin: void setKey(java.lang.String)>($r5) in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader$CheckPluginPermissionFunction: com.atlassian.plugin.Plugin checkPlugin(com.atlassian.plugin.PluginInternal)> ==> <com.atlassian.plugin.impl.AbstractPlugin: void setKey(java.lang.String)>
VIRTUAL edge: virtualinvoke $r4.<com.atlassian.plugin.impl.UnloadablePlugin: void setName(java.lang.String)>($r6) in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader$CheckPluginPermissionFunction: com.atlassian.plugin.Plugin checkPlugin(com.atlassian.plugin.PluginInternal)> ==> <com.atlassian.plugin.impl.AbstractPlugin: void setName(java.lang.String)>
VIRTUAL edge: virtualinvoke $r11.<com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: void discardPlugin(com.atlassian.plugin.Plugin)>(r0) in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader$CheckPluginPermissionFunction: com.atlassian.plugin.Plugin checkPlugin(com.atlassian.plugin.PluginInternal)> ==> <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader: void discardPlugin(com.atlassian.plugin.Plugin)>
INTERFACE edge: $r5 = interfaceinvoke $r3.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r4) in <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.stream.Stream getModuleDescriptors(java.util.Collection,java.util.function.Predicate)> ==> <java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>
INTERFACE edge: $r7 = interfaceinvoke $r5.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>(r6) in <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.stream.Stream getModuleDescriptors(java.util.Collection,java.util.function.Predicate)> ==> <java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>
INTERFACE edge: $r2 = interfaceinvoke r0.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($r1) in <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.stream.Stream getModules(java.util.stream.Stream)> ==> <java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>
INTERFACE edge: $r4 = interfaceinvoke $r2.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r3) in <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.stream.Stream getModules(java.util.stream.Stream)> ==> <java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>
INTERFACE edge: $r6 = interfaceinvoke $r4.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($r5) in <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.stream.Stream getModules(java.util.stream.Stream)> ==> <java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>
VIRTUAL edge: r3 = virtualinvoke r0.<com.atlassian.plugin.manager.ProductPluginAccessorBase: com.atlassian.plugin.Plugin getPlugin(java.lang.String)>($r2) in <com.atlassian.plugin.manager.ProductPluginAccessorBase: com.atlassian.plugin.ModuleDescriptor getPluginModule(com.atlassian.plugin.ModuleCompleteKey)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase: com.atlassian.plugin.Plugin getPlugin(java.lang.String)>
INTERFACE edge: $r5 = interfaceinvoke r3.<com.atlassian.plugin.Plugin: com.atlassian.plugin.ModuleDescriptor getModuleDescriptor(java.lang.String)>($r4) in <com.atlassian.plugin.manager.ProductPluginAccessorBase: com.atlassian.plugin.ModuleDescriptor getPluginModule(com.atlassian.plugin.ModuleCompleteKey)> ==> <com.atlassian.plugin.impl.AbstractPlugin: com.atlassian.plugin.ModuleDescriptor getModuleDescriptor(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.atlassian.plugin.manager.ProductPluginAccessorBase: boolean isPluginEnabled(java.lang.String)>($r2) in <com.atlassian.plugin.manager.ProductPluginAccessorBase: boolean isPluginModuleEnabled(com.atlassian.plugin.ModuleCompleteKey)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase: boolean isPluginEnabled(java.lang.String)>
SPECIAL edge: r3 = specialinvoke r0.<com.atlassian.plugin.manager.ProductPluginAccessorBase: com.atlassian.plugin.ModuleDescriptor getPluginModule(com.atlassian.plugin.ModuleCompleteKey)>(r1) in <com.atlassian.plugin.manager.ProductPluginAccessorBase: boolean isPluginModuleEnabled(com.atlassian.plugin.ModuleCompleteKey)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase: com.atlassian.plugin.ModuleDescriptor getPluginModule(com.atlassian.plugin.ModuleCompleteKey)>
INTERFACE edge: $z1 = interfaceinvoke r3.<com.atlassian.plugin.ModuleDescriptor: boolean isEnabled()>() in <com.atlassian.plugin.manager.ProductPluginAccessorBase: boolean isPluginModuleEnabled(com.atlassian.plugin.ModuleCompleteKey)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: boolean isEnabled()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.predicate.ModuleOfClassPredicate: void <init>(java.lang.Class)>(r1) in <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.stream.Stream getEnabledModuleDescriptorsByModuleClass(java.lang.Class)> ==> <com.atlassian.plugin.predicate.ModuleOfClassPredicate: void <init>(java.lang.Class)>
SPECIAL edge: specialinvoke $r3.<com.atlassian.plugin.predicate.EnabledModulePredicate: void <init>()>() in <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.stream.Stream getEnabledModuleDescriptorsByModuleClass(java.lang.Class)> ==> <com.atlassian.plugin.predicate.EnabledModulePredicate: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke r5.<com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.Collection getEnabledPlugins()>() in <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.stream.Stream getEnabledModuleDescriptorsByModuleClass(java.lang.Class)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.Collection getEnabledPlugins()>
SPECIAL edge: $r8 = specialinvoke r5.<com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.stream.Stream getModuleDescriptors(java.util.Collection,java.util.function.Predicate)>($r6, $r7) in <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.stream.Stream getEnabledModuleDescriptorsByModuleClass(java.lang.Class)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.stream.Stream getModuleDescriptors(java.util.Collection,java.util.function.Predicate)>
VIRTUAL edge: r1 = virtualinvoke r0.<com.atlassian.plugin.loaders.SinglePluginLoader: java.io.InputStream getSource()>() in <com.atlassian.plugin.loaders.SinglePluginLoader: com.atlassian.plugin.Plugin loadPlugin(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.SinglePluginLoader: java.io.InputStream getSource()>
VIRTUAL edge: $r5 = virtualinvoke r0.<com.atlassian.plugin.loaders.SinglePluginLoader: com.atlassian.plugin.impl.StaticPlugin getNewPlugin()>() in <com.atlassian.plugin.loaders.SinglePluginLoader: com.atlassian.plugin.Plugin loadPlugin(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.SinglePluginLoader: com.atlassian.plugin.impl.StaticPlugin getNewPlugin()>
SPECIAL edge: specialinvoke $r32.<com.atlassian.plugin.PluginParseException: void <init>(java.lang.String)>("Invalid resource or inputstream specified to load plugins from.") in <com.atlassian.plugin.loaders.SinglePluginLoader: com.atlassian.plugin.Plugin loadPlugin(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.PluginParseException: void <init>(java.lang.String)>
INTERFACE edge: r29 = interfaceinvoke $r2.<com.atlassian.plugin.parsers.DescriptorParserFactory: com.atlassian.plugin.parsers.DescriptorParser getInstance(java.io.InputStream,java.util.Set)>(r1, $r37) in <com.atlassian.plugin.loaders.SinglePluginLoader: com.atlassian.plugin.Plugin loadPlugin(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.parsers.XmlDescriptorParserFactory: com.atlassian.plugin.parsers.DescriptorParser getInstance(java.io.InputStream,java.util.Set)>
INTERFACE edge: r30 = interfaceinvoke r29.<com.atlassian.plugin.parsers.DescriptorParser: com.atlassian.plugin.Plugin configurePlugin(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin)>(r4, $r5) in <com.atlassian.plugin.loaders.SinglePluginLoader: com.atlassian.plugin.Plugin loadPlugin(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.parsers.XmlDescriptorParser: com.atlassian.plugin.Plugin configurePlugin(com.atlassian.plugin.ModuleDescriptorFactory,com.atlassian.plugin.Plugin)>
INTERFACE edge: $i0 = interfaceinvoke $r38.<com.atlassian.plugin.Plugin: int getPluginsVersion()>() in <com.atlassian.plugin.loaders.SinglePluginLoader: com.atlassian.plugin.Plugin loadPlugin(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.impl.AbstractPlugin: int getPluginsVersion()>
INTERFACE edge: $i0 = interfaceinvoke $r38.<com.atlassian.plugin.Plugin: int getPluginsVersion()>() in <com.atlassian.plugin.loaders.SinglePluginLoader: com.atlassian.plugin.Plugin loadPlugin(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.Plugin: int getPluginsVersion()>
SPECIAL edge: specialinvoke $r33.<java.lang.StringBuilder: void <init>(java.lang.String)>("OSGi plugins cannot be deployed via the classpath, which is usually WEB-INF/lib.") in <com.atlassian.plugin.loaders.SinglePluginLoader: com.atlassian.plugin.Plugin loadPlugin(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n Resource is: ") in <com.atlassian.plugin.loaders.SinglePluginLoader: com.atlassian.plugin.Plugin loadPlugin(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n URL is: ") in <com.atlassian.plugin.loaders.SinglePluginLoader: com.atlassian.plugin.Plugin loadPlugin(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.loaders.SinglePluginLoader: com.atlassian.plugin.Plugin loadPlugin(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16) in <com.atlassian.plugin.loaders.SinglePluginLoader: com.atlassian.plugin.Plugin loadPlugin(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13) in <com.atlassian.plugin.loaders.SinglePluginLoader: com.atlassian.plugin.Plugin loadPlugin(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: virtualinvoke r6.<com.atlassian.plugin.impl.UnloadablePlugin: void setErrorText(java.lang.String)>($r11) in <com.atlassian.plugin.loaders.SinglePluginLoader: com.atlassian.plugin.Plugin loadPlugin(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.impl.UnloadablePlugin: void setErrorText(java.lang.String)>
SPECIAL edge: specialinvoke $r34.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.loaders.SinglePluginLoader: com.atlassian.plugin.Plugin loadPlugin(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r22 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to load plugin resource: ") in <com.atlassian.plugin.loaders.SinglePluginLoader: com.atlassian.plugin.Plugin loadPlugin(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23) in <com.atlassian.plugin.loaders.SinglePluginLoader: com.atlassian.plugin.Plugin loadPlugin(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - ") in <com.atlassian.plugin.loaders.SinglePluginLoader: com.atlassian.plugin.Plugin loadPlugin(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26) in <com.atlassian.plugin.loaders.SinglePluginLoader: com.atlassian.plugin.Plugin loadPlugin(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.loaders.SinglePluginLoader: com.atlassian.plugin.Plugin loadPlugin(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r35.<com.atlassian.plugin.PluginParseException: void <init>(java.lang.String,java.lang.Throwable)>($r28, $r19) in <com.atlassian.plugin.loaders.SinglePluginLoader: com.atlassian.plugin.Plugin loadPlugin(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.PluginParseException: void <init>(java.lang.String,java.lang.Throwable)>
STATIC edge: $r9 = staticinvoke <com.atlassian.plugin.util.ClassLoaderUtils: java.io.InputStream getResourceAsStream(java.lang.String,java.lang.Class)>($r7, $r8) in <com.atlassian.plugin.loaders.SinglePluginLoader: java.io.InputStream getSource()> ==> <com.atlassian.plugin.util.ClassLoaderUtils: java.io.InputStream getResourceAsStream(java.lang.String,java.lang.Class)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.net.URL: java.lang.String getPath()>() in <com.atlassian.plugin.loaders.SinglePluginLoader: java.lang.String getIdentifier()> ==> <java.net.URL: java.lang.String getPath()>
VIRTUAL edge: $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() in <com.atlassian.plugin.loaders.ClassPathPluginLoader: void loadClassPathPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.lang.Object: java.lang.Class getClass()>
SPECIAL edge: specialinvoke $r16.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.loaders.ClassPathPluginLoader: void loadClassPathPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not load classpath plugins: ") in <com.atlassian.plugin.loaders.ClassPathPluginLoader: void loadClassPathPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15) in <com.atlassian.plugin.loaders.ClassPathPluginLoader: void loadClassPathPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.loaders.ClassPathPluginLoader: void loadClassPathPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r17.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>($r20, $r15) in <com.atlassian.plugin.loaders.ClassPathPluginLoader: void loadClassPathPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r4.<java.util.LinkedHashMap: void <init>()>() in <com.atlassian.plugin.loaders.ClassPathPluginLoader: void loadClassPathPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.LinkedHashMap: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke r3.<java.util.Enumeration: boolean hasMoreElements()>() in <com.atlassian.plugin.loaders.ClassPathPluginLoader: void loadClassPathPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.StringTokenizer: boolean hasMoreElements()>
INTERFACE edge: $z0 = interfaceinvoke r3.<java.util.Enumeration: boolean hasMoreElements()>() in <com.atlassian.plugin.loaders.ClassPathPluginLoader: void loadClassPathPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.util.ChainingClassLoader$ResourcesEnumeration: boolean hasMoreElements()>
INTERFACE edge: $r5 = interfaceinvoke r3.<java.util.Enumeration: java.lang.Object nextElement()>() in <com.atlassian.plugin.loaders.ClassPathPluginLoader: void loadClassPathPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.StringTokenizer: java.lang.Object nextElement()>
INTERFACE edge: $r5 = interfaceinvoke r3.<java.util.Enumeration: java.lang.Object nextElement()>() in <com.atlassian.plugin.loaders.ClassPathPluginLoader: void loadClassPathPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.util.ChainingClassLoader$ResourcesEnumeration: java.lang.Object nextElement()>
SPECIAL edge: specialinvoke $r6.<com.atlassian.plugin.loaders.SinglePluginLoader: void <init>(java.net.URL)>(r22) in <com.atlassian.plugin.loaders.ClassPathPluginLoader: void loadClassPathPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.SinglePluginLoader: void <init>(java.net.URL)>
VIRTUAL edge: $r9 = virtualinvoke $r6.<com.atlassian.plugin.loaders.SinglePluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)>(r8) in <com.atlassian.plugin.loaders.ClassPathPluginLoader: void loadClassPathPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <com.atlassian.plugin.loaders.SinglePluginLoader: java.lang.Iterable loadAllPlugins(com.atlassian.plugin.ModuleDescriptorFactory)>
INTERFACE edge: r10 = interfaceinvoke $r9.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.atlassian.plugin.loaders.ClassPathPluginLoader: void loadClassPathPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r10 = interfaceinvoke $r9.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.atlassian.plugin.loaders.ClassPathPluginLoader: void loadClassPathPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r10 = interfaceinvoke $r9.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.atlassian.plugin.loaders.ClassPathPluginLoader: void loadClassPathPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r10 = interfaceinvoke $r9.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.atlassian.plugin.loaders.ClassPathPluginLoader: void loadClassPathPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r10 = interfaceinvoke $r9.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.atlassian.plugin.loaders.ClassPathPluginLoader: void loadClassPathPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: r10 = interfaceinvoke $r9.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.atlassian.plugin.loaders.ClassPathPluginLoader: void loadClassPathPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r12, $r6) in <com.atlassian.plugin.loaders.ClassPathPluginLoader: void loadClassPathPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r12, $r6) in <com.atlassian.plugin.loaders.ClassPathPluginLoader: void loadClassPathPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r12, $r6) in <com.atlassian.plugin.loaders.ClassPathPluginLoader: void loadClassPathPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r12, $r6) in <com.atlassian.plugin.loaders.ClassPathPluginLoader: void loadClassPathPlugins(com.atlassian.plugin.ModuleDescriptorFactory)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r2) in <com.atlassian.plugin.util.resource.AlternativeDirectoryResourceLoader: java.util.List getPluginResourceDirs()> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r4.<java.util.ArrayList: void <init>()>() in <com.atlassian.plugin.util.resource.AlternativeDirectoryResourceLoader: java.util.List getPluginResourceDirs()> ==> <java.util.ArrayList: void <init>()>
INTERFACE edge: interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r11) in <com.atlassian.plugin.util.resource.AlternativeDirectoryResourceLoader: java.util.List getPluginResourceDirs()> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: r8 = interfaceinvoke $r7.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.atlassian.plugin.util.resource.AlternativeDirectoryResourceLoader: java.util.List getPluginResourceDirs()> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r8 = interfaceinvoke $r7.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.atlassian.plugin.util.resource.AlternativeDirectoryResourceLoader: java.util.List getPluginResourceDirs()> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r8 = interfaceinvoke $r7.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.atlassian.plugin.util.resource.AlternativeDirectoryResourceLoader: java.util.List getPluginResourceDirs()> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r8 = interfaceinvoke $r7.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.atlassian.plugin.util.resource.AlternativeDirectoryResourceLoader: java.util.List getPluginResourceDirs()> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r8 = interfaceinvoke $r7.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.atlassian.plugin.util.resource.AlternativeDirectoryResourceLoader: java.util.List getPluginResourceDirs()> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: r8 = interfaceinvoke $r7.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.atlassian.plugin.util.resource.AlternativeDirectoryResourceLoader: java.util.List getPluginResourceDirs()> ==> <java.util.ArrayList: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke $r11.<java.io.File: void <init>(java.lang.String)>(r10) in <com.atlassian.plugin.util.resource.AlternativeDirectoryResourceLoader: java.util.List getPluginResourceDirs()> ==> <java.io.File: void <init>(java.lang.String)>
VIRTUAL edge: $z2 = virtualinvoke $r11.<java.io.File: boolean exists()>() in <com.atlassian.plugin.util.resource.AlternativeDirectoryResourceLoader: java.util.List getPluginResourceDirs()> ==> <java.io.File: boolean exists()>
VIRTUAL edge: $r14 = virtualinvoke $r11.<java.io.File: java.lang.String getAbsolutePath()>() in <com.atlassian.plugin.util.resource.AlternativeDirectoryResourceLoader: java.util.List getPluginResourceDirs()> ==> <java.io.File: java.lang.String getAbsolutePath()>
INTERFACE edge: interfaceinvoke $r15.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Found alternative resource directory {}", r10) in <com.atlassian.plugin.util.resource.AlternativeDirectoryResourceLoader: java.util.List getPluginResourceDirs()> ==> <org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r13.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>("Resource directory {}, which resolves to {} does not exist", r10, $r14) in <com.atlassian.plugin.util.resource.AlternativeDirectoryResourceLoader: java.util.List getPluginResourceDirs()> ==> <org.slf4j.Logger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.util.ModuleRestricts$ModuleRestrict: void <init>(java.lang.String,com.atlassian.plugin.InstallationMode)>(r1, null) in <com.atlassian.plugin.util.ModuleRestricts$ModuleRestrict: void <init>(java.lang.String)> ==> <com.atlassian.plugin.util.ModuleRestricts$ModuleRestrict: void <init>(java.lang.String,com.atlassian.plugin.InstallationMode)>
CLINIT edge: $r3 = staticinvoke <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange all()>() in <com.atlassian.plugin.util.ModuleRestricts$ModuleRestrict: void <init>(java.lang.String,com.atlassian.plugin.InstallationMode)> ==> <com.atlassian.plugin.util.VersionRange: void <clinit>()>
STATIC edge: $r3 = staticinvoke <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange all()>() in <com.atlassian.plugin.util.ModuleRestricts$ModuleRestrict: void <init>(java.lang.String,com.atlassian.plugin.InstallationMode)> ==> <com.atlassian.plugin.util.VersionRange: com.atlassian.plugin.util.VersionRange all()>
INTERFACE edge: $z0 = interfaceinvoke r0.<com.atlassian.plugin.ModuleDescriptor: boolean isBroken()>() in <com.atlassian.plugin.manager.SafeModuleExtractor: java.lang.Object getModule(com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: boolean isBroken()>
INTERFACE edge: $r1 = interfaceinvoke r0.<com.atlassian.plugin.ModuleDescriptor: java.lang.Object getModule()>() in <com.atlassian.plugin.manager.SafeModuleExtractor: java.lang.Object getModule(com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.ModuleDescriptor: java.lang.Object getModule()>
INTERFACE edge: $r1 = interfaceinvoke r0.<com.atlassian.plugin.ModuleDescriptor: java.lang.Object getModule()>() in <com.atlassian.plugin.manager.SafeModuleExtractor: java.lang.Object getModule(com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.descriptors.AbstractNoOpModuleDescriptor: java.lang.Object getModule()>
INTERFACE edge: $r1 = interfaceinvoke r0.<com.atlassian.plugin.ModuleDescriptor: java.lang.Object getModule()>() in <com.atlassian.plugin.manager.SafeModuleExtractor: java.lang.Object getModule(com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.eventlistener.descriptors.EventListenerModuleDescriptor: java.lang.Object getModule()>
INTERFACE edge: $r4 = interfaceinvoke r0.<com.atlassian.plugin.ModuleDescriptor: com.atlassian.plugin.Plugin getPlugin()>() in <com.atlassian.plugin.manager.SafeModuleExtractor: java.lang.Object getModule(com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.ModuleDescriptor: com.atlassian.plugin.Plugin getPlugin()>
INTERFACE edge: $r4 = interfaceinvoke r0.<com.atlassian.plugin.ModuleDescriptor: com.atlassian.plugin.Plugin getPlugin()>() in <com.atlassian.plugin.manager.SafeModuleExtractor: java.lang.Object getModule(com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: com.atlassian.plugin.Plugin getPlugin()>
INTERFACE edge: $r8 = interfaceinvoke r0.<com.atlassian.plugin.ModuleDescriptor: java.lang.String getCompleteKey()>() in <com.atlassian.plugin.manager.SafeModuleExtractor: java.lang.Object getModule(com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.String getCompleteKey()>
INTERFACE edge: interfaceinvoke r0.<com.atlassian.plugin.ModuleDescriptor: void setBroken()>() in <com.atlassian.plugin.manager.SafeModuleExtractor: java.lang.Object getModule(com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void setBroken()>
INTERFACE edge: r5 = interfaceinvoke $r4.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.SafeModuleExtractor: java.lang.Object getModule(com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: r5 = interfaceinvoke $r4.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.SafeModuleExtractor: java.lang.Object getModule(com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
INTERFACE edge: interfaceinvoke $r10.<com.atlassian.plugin.PluginController: void disablePluginWithoutPersisting(java.lang.String)>(r5) in <com.atlassian.plugin.manager.SafeModuleExtractor: java.lang.Object getModule(com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.manager.ProductPluginAccessor$1: void disablePluginWithoutPersisting(java.lang.String)>
INTERFACE edge: interfaceinvoke $r10.<com.atlassian.plugin.PluginController: void disablePluginWithoutPersisting(java.lang.String)>(r5) in <com.atlassian.plugin.manager.SafeModuleExtractor: java.lang.Object getModule(com.atlassian.plugin.ModuleDescriptor)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void disablePluginWithoutPersisting(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode: void <init>(java.lang.String,int,com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$1)>(r1, i0, null) in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode$1: void <init>(java.lang.String,int)> ==> <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode: void <init>(java.lang.String,int,com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$1)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode: void <init>(java.lang.String,int,com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$1)>(r1, i0, null) in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode$2: void <init>(java.lang.String,int)> ==> <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode: void <init>(java.lang.String,int,com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$1)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode: void <init>(java.lang.String,int,com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$1)>(r1, i0, null) in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode$3: void <init>(java.lang.String,int)> ==> <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode: void <init>(java.lang.String,int,com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$1)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode: void <init>(java.lang.String,int,com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$1)>(r1, i0, null) in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode$4: void <init>(java.lang.String,int)> ==> <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode: void <init>(java.lang.String,int,com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$1)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode: void <init>(java.lang.String,int,com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$1)>(r1, i0, null) in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode$5: void <init>(java.lang.String,int)> ==> <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode: void <init>(java.lang.String,int,com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$1)>
INTERFACE edge: $i0 = interfaceinvoke r3.<java.util.List: int size()>() in <com.atlassian.plugin.util.validation.ValidationPattern$Rule: void evaluate(org.dom4j.Node,java.util.List)> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i0 = interfaceinvoke r3.<java.util.List: int size()>() in <com.atlassian.plugin.util.validation.ValidationPattern$Rule: void evaluate(org.dom4j.Node,java.util.List)> ==> <java.util.ArrayList: int size()>
INTERFACE edge: r4 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.util.validation.ValidationPattern$Rule: void evaluate(org.dom4j.Node,java.util.List)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.util.validation.ValidationPattern$Rule: void evaluate(org.dom4j.Node,java.util.List)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.util.validation.ValidationPattern$RuleTest: void evaluate(org.dom4j.Node,java.util.List)>(r1, r2) in <com.atlassian.plugin.util.validation.ValidationPattern$RuleTest: void access$300(com.atlassian.plugin.util.validation.ValidationPattern$RuleTest,org.dom4j.Node,java.util.List)> ==> <com.atlassian.plugin.util.validation.ValidationPattern$RuleTest: void evaluate(org.dom4j.Node,java.util.List)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.parsers.XmlDescriptorParser$NoopErrorHandler: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.util.ModuleRestricts: void <init>(java.lang.Iterable)>($r2) in <com.atlassian.plugin.util.ModuleRestricts: void <init>()> ==> <com.atlassian.plugin.util.ModuleRestricts: void <init>(java.lang.Iterable)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.manager.StateTracker$State: void <init>(java.lang.String,int,com.atlassian.plugin.manager.StateTracker$1)>(r1, i0, null) in <com.atlassian.plugin.manager.StateTracker$State$1: void <init>(java.lang.String,int)> ==> <com.atlassian.plugin.manager.StateTracker$State: void <init>(java.lang.String,int,com.atlassian.plugin.manager.StateTracker$1)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0) in <com.atlassian.plugin.manager.StateTracker$State: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
FINALIZE edge: null in <java.lang.Enum: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void finalize()>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.manager.StateTracker$State: void <init>(java.lang.String,int,com.atlassian.plugin.manager.StateTracker$1)>(r1, i0, null) in <com.atlassian.plugin.manager.StateTracker$State$2: void <init>(java.lang.String,int)> ==> <com.atlassian.plugin.manager.StateTracker$State: void <init>(java.lang.String,int,com.atlassian.plugin.manager.StateTracker$1)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.manager.StateTracker$State: void <init>(java.lang.String,int,com.atlassian.plugin.manager.StateTracker$1)>(r1, i0, null) in <com.atlassian.plugin.manager.StateTracker$State$3: void <init>(java.lang.String,int)> ==> <com.atlassian.plugin.manager.StateTracker$State: void <init>(java.lang.String,int,com.atlassian.plugin.manager.StateTracker$1)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.manager.StateTracker$State: void <init>(java.lang.String,int,com.atlassian.plugin.manager.StateTracker$1)>(r1, i0, null) in <com.atlassian.plugin.manager.StateTracker$State$4: void <init>(java.lang.String,int)> ==> <com.atlassian.plugin.manager.StateTracker$State: void <init>(java.lang.String,int,com.atlassian.plugin.manager.StateTracker$1)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.manager.StateTracker$State: void <init>(java.lang.String,int,com.atlassian.plugin.manager.StateTracker$1)>(r1, i0, null) in <com.atlassian.plugin.manager.StateTracker$State$5: void <init>(java.lang.String,int)> ==> <com.atlassian.plugin.manager.StateTracker$State: void <init>(java.lang.String,int,com.atlassian.plugin.manager.StateTracker$1)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.exception.NoOpPluginExceptionInterception: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.SafeModeManager$1: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z2 = virtualinvoke r11.<java.lang.Boolean: boolean booleanValue()>() in <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: void <init>()> ==> <java.lang.Boolean: boolean booleanValue()>
VIRTUAL edge: $z1 = virtualinvoke r11.<java.lang.Boolean: boolean booleanValue()>() in <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: void <init>()> ==> <java.lang.Boolean: boolean booleanValue()>
INTERFACE edge: interfaceinvoke $r4.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Plugin System instrumentation ENABLED via system property \'{}\'", $r5) in <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: void <init>()> ==> <org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>
SPECIAL edge: specialinvoke $r6.<com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$InstrumentRegistryProxy: void <init>(com.atlassian.plugin.instrumentation.PluginSystemInstrumentation,com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$1)>(r0, null) in <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation: void <init>()> ==> <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$InstrumentRegistryProxy: void <init>(com.atlassian.plugin.instrumentation.PluginSystemInstrumentation,com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$1)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$MatchType: void <init>(java.lang.String,int,com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$1)>(r1, i0, null) in <com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$MatchType$1: void <init>(java.lang.String,int)> ==> <com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$MatchType: void <init>(java.lang.String,int,com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$1)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$MatchType: void <init>(java.lang.String,int,com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$1)>(r1, i0, null) in <com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$MatchType$2: void <init>(java.lang.String,int)> ==> <com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$MatchType: void <init>(java.lang.String,int,com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$1)>
SPECIAL edge: specialinvoke r0.<io.atlassian.util.concurrent.LazyReference: void <init>()>() in <com.atlassian.plugin.util.PluginFrameworkUtils$1: void <init>()> ==> <io.atlassian.util.concurrent.LazyReference: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.predicate.ModuleOfClassPredicate: void <init>(java.lang.Class)>(r1) in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: java.util.List getEnabledModuleDescriptorsByModuleClass(java.lang.Class)> ==> <com.atlassian.plugin.predicate.ModuleOfClassPredicate: void <init>(java.lang.Class)>
SPECIAL edge: specialinvoke $r3.<com.atlassian.plugin.predicate.EnabledModulePredicate: void <init>()>() in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: java.util.List getEnabledModuleDescriptorsByModuleClass(java.lang.Class)> ==> <com.atlassian.plugin.predicate.EnabledModulePredicate: void <init>()>
INTERFACE edge: $r7 = interfaceinvoke $r6.<com.atlassian.plugin.PluginAccessor: java.util.Collection getEnabledPlugins()>() in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: java.util.List getEnabledModuleDescriptorsByModuleClass(java.lang.Class)> ==> <com.atlassian.plugin.manager.ProductPluginAccessor: java.util.Collection getEnabledPlugins()>
INTERFACE edge: $r7 = interfaceinvoke $r6.<com.atlassian.plugin.PluginAccessor: java.util.Collection getEnabledPlugins()>() in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: java.util.List getEnabledModuleDescriptorsByModuleClass(java.lang.Class)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase: java.util.Collection getEnabledPlugins()>
INTERFACE edge: $r7 = interfaceinvoke $r6.<com.atlassian.plugin.PluginAccessor: java.util.Collection getEnabledPlugins()>() in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: java.util.List getEnabledModuleDescriptorsByModuleClass(java.lang.Class)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: java.util.Collection getEnabledPlugins()>
INTERFACE edge: $r7 = interfaceinvoke $r6.<com.atlassian.plugin.PluginAccessor: java.util.Collection getEnabledPlugins()>() in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: java.util.List getEnabledModuleDescriptorsByModuleClass(java.lang.Class)> ==> <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: java.util.Collection getEnabledPlugins()>
SPECIAL edge: $r9 = specialinvoke r5.<com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: java.util.List getModuleDescriptors(java.util.Collection,java.util.function.Predicate)>($r7, $r8) in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: java.util.List getEnabledModuleDescriptorsByModuleClass(java.lang.Class)> ==> <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: java.util.List getModuleDescriptors(java.util.Collection,java.util.function.Predicate)>
STATIC edge: $r2 = staticinvoke <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor$lambda_getModuleDescriptors_0__184: java.util.function.Function bootstrap$()>() in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: java.util.List getModuleDescriptors(java.util.Collection,java.util.function.Predicate)> ==> <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor$lambda_getModuleDescriptors_0__184: java.util.function.Function bootstrap$()>
STATIC edge: $r8 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>() in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: java.util.List getModuleDescriptors(java.util.Collection,java.util.function.Predicate)> ==> <java.util.stream.Collectors: java.util.stream.Collector toList()>
STATIC edge: $r4 = staticinvoke <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor$lambda_getModuleDescriptors_1__185: java.util.function.Function bootstrap$()>() in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: java.util.List getModuleDescriptors(java.util.Collection,java.util.function.Predicate)> ==> <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor$lambda_getModuleDescriptors_1__185: java.util.function.Function bootstrap$()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.ProductPluginAccessor$1: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.util.ModuleRestricts$IsNotBlankPredicate: void <init>()>() in <com.atlassian.plugin.util.ModuleRestricts$IsNotBlankPredicate: void <init>(com.atlassian.plugin.util.ModuleRestricts$1)> ==> <com.atlassian.plugin.util.ModuleRestricts$IsNotBlankPredicate: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.util.ModuleRestricts: void <init>(java.lang.Iterable)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.io.InputStream: void <init>()>() in <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: void <init>(org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection,java.io.InputStream,java.util.jar.JarFile)> ==> <java.io.InputStream: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.io.File: boolean exists()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: com.atlassian.plugin.repositories.FilePluginInstaller$BackupRepresentation getBackupRepresentation(java.lang.String,java.io.File)> ==> <java.io.File: boolean exists()>
VIRTUAL edge: $r4 = virtualinvoke r0.<java.io.File: java.lang.String getParent()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: com.atlassian.plugin.repositories.FilePluginInstaller$BackupRepresentation getBackupRepresentation(java.lang.String,java.io.File)> ==> <java.io.File: java.lang.String getParent()>
VIRTUAL edge: $r7 = virtualinvoke r0.<java.io.File: java.lang.String getName()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: com.atlassian.plugin.repositories.FilePluginInstaller$BackupRepresentation getBackupRepresentation(java.lang.String,java.io.File)> ==> <java.io.File: java.lang.String getName()>
VIRTUAL edge: $r12 = virtualinvoke r0.<java.io.File: java.lang.String getName()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: com.atlassian.plugin.repositories.FilePluginInstaller$BackupRepresentation getBackupRepresentation(java.lang.String,java.io.File)> ==> <java.io.File: java.lang.String getName()>
VIRTUAL edge: $r2 = virtualinvoke r0.<java.io.File: java.lang.String getName()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: com.atlassian.plugin.repositories.FilePluginInstaller$BackupRepresentation getBackupRepresentation(java.lang.String,java.io.File)> ==> <java.io.File: java.lang.String getName()>
SPECIAL edge: specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: com.atlassian.plugin.repositories.FilePluginInstaller$BackupRepresentation getBackupRepresentation(java.lang.String,java.io.File)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".original-") in <com.atlassian.plugin.repositories.FilePluginInstaller: com.atlassian.plugin.repositories.FilePluginInstaller$BackupRepresentation getBackupRepresentation(java.lang.String,java.io.File)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) in <com.atlassian.plugin.repositories.FilePluginInstaller: com.atlassian.plugin.repositories.FilePluginInstaller$BackupRepresentation getBackupRepresentation(java.lang.String,java.io.File)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: com.atlassian.plugin.repositories.FilePluginInstaller$BackupRepresentation getBackupRepresentation(java.lang.String,java.io.File)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r3.<java.io.File: void <init>(java.lang.String,java.lang.String)>($r4, $r9) in <com.atlassian.plugin.repositories.FilePluginInstaller: com.atlassian.plugin.repositories.FilePluginInstaller$BackupRepresentation getBackupRepresentation(java.lang.String,java.io.File)> ==> <java.io.File: void <init>(java.lang.String,java.lang.String)>
VIRTUAL edge: $z1 = virtualinvoke $r3.<java.io.File: boolean exists()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: com.atlassian.plugin.repositories.FilePluginInstaller$BackupRepresentation getBackupRepresentation(java.lang.String,java.io.File)> ==> <java.io.File: boolean exists()>
SPECIAL edge: specialinvoke $r14.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: com.atlassian.plugin.repositories.FilePluginInstaller$BackupRepresentation getBackupRepresentation(java.lang.String,java.io.File)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Existing backup found for plugin ") in <com.atlassian.plugin.repositories.FilePluginInstaller: com.atlassian.plugin.repositories.FilePluginInstaller$BackupRepresentation getBackupRepresentation(java.lang.String,java.io.File)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r16) in <com.atlassian.plugin.repositories.FilePluginInstaller: com.atlassian.plugin.repositories.FilePluginInstaller$BackupRepresentation getBackupRepresentation(java.lang.String,java.io.File)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Cannot install.") in <com.atlassian.plugin.repositories.FilePluginInstaller: com.atlassian.plugin.repositories.FilePluginInstaller$BackupRepresentation getBackupRepresentation(java.lang.String,java.io.File)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.repositories.FilePluginInstaller: com.atlassian.plugin.repositories.FilePluginInstaller$BackupRepresentation getBackupRepresentation(java.lang.String,java.io.File)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r13.<java.io.IOException: void <init>(java.lang.String)>($r19) in <com.atlassian.plugin.repositories.FilePluginInstaller: com.atlassian.plugin.repositories.FilePluginInstaller$BackupRepresentation getBackupRepresentation(java.lang.String,java.io.File)> ==> <java.io.IOException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r11.<com.atlassian.plugin.repositories.FilePluginInstaller$BackupRepresentation: void <init>(java.io.File,java.lang.String)>($r3, $r12) in <com.atlassian.plugin.repositories.FilePluginInstaller: com.atlassian.plugin.repositories.FilePluginInstaller$BackupRepresentation getBackupRepresentation(java.lang.String,java.io.File)> ==> <com.atlassian.plugin.repositories.FilePluginInstaller$BackupRepresentation: void <init>(java.io.File,java.lang.String)>
SPECIAL edge: specialinvoke $r1.<com.atlassian.plugin.repositories.FilePluginInstaller$BackupRepresentation: void <init>(java.io.File,java.lang.String)>(r0, $r2) in <com.atlassian.plugin.repositories.FilePluginInstaller: com.atlassian.plugin.repositories.FilePluginInstaller$BackupRepresentation getBackupRepresentation(java.lang.String,java.io.File)> ==> <com.atlassian.plugin.repositories.FilePluginInstaller$BackupRepresentation: void <init>(java.io.File,java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.repositories.FilePluginInstaller$BackupNameFilter: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.util.VersionStringComparator$VersionStringComponentComparator: void <init>(com.atlassian.plugin.util.VersionStringComparator)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$NoOpLock: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<org.dom4j.VisitorSupport: void <init>()>() in <com.atlassian.plugin.parsers.XmlDescriptorParserUtils$NamespaceCleaner: void <init>()> ==> <org.dom4j.VisitorSupport: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.descriptors.AbstractNoOpModuleDescriptor$1: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<com.atlassian.plugin.util.validation.ValidationPattern$RuleTest: com.atlassian.plugin.util.validation.ValidationPattern$RuleTest withError(java.lang.String)>("The key is required") in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void provideValidationRules(com.atlassian.plugin.util.validation.ValidationPattern)> ==> <com.atlassian.plugin.util.validation.ValidationPattern$RuleTest: com.atlassian.plugin.util.validation.ValidationPattern$RuleTest withError(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.util.validation.ValidationPattern: com.atlassian.plugin.util.validation.ValidationPattern rule(com.atlassian.plugin.util.validation.ValidationPattern$RuleTest[])>($r1) in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: void provideValidationRules(com.atlassian.plugin.util.validation.ValidationPattern)> ==> <com.atlassian.plugin.util.validation.ValidationPattern: com.atlassian.plugin.util.validation.ValidationPattern rule(com.atlassian.plugin.util.validation.ValidationPattern$RuleTest[])>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.Class getModuleTypeClass()> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r8 = virtualinvoke r0.<com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.Class getModuleReturnClass()>() in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.Class getModuleTypeClass()> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.Class getModuleReturnClass()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(0) in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.Class getModuleTypeClass()> ==> <java.util.LinkedList: java.lang.Object get(int)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(0) in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.Class getModuleTypeClass()> ==> <java.util.ArrayList: java.lang.Object get(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.util.validation.ValidationPattern$Rule: void <init>(java.lang.String,com.atlassian.plugin.util.validation.ValidationPattern$RuleTest[])> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.util.validation.ValidationPattern$RuleTest: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.module.PrefixDelegatingModuleFactory$ModuleReference: void <init>(java.lang.String,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.module.ClassPrefixModuleFactory: java.lang.String createErrorMsg(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t load the class \'") in <com.atlassian.plugin.module.ClassPrefixModuleFactory: java.lang.String createErrorMsg(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) in <com.atlassian.plugin.module.ClassPrefixModuleFactory: java.lang.String createErrorMsg(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'. This could mean that you misspelled the name of the class (double check) or that you\'re using a class in your plugin that you haven\'t provided bundle instructions for. See https://developer.atlassian.com/x/mQAN for more details on how to fix this.") in <com.atlassian.plugin.module.ClassPrefixModuleFactory: java.lang.String createErrorMsg(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.module.ClassPrefixModuleFactory: java.lang.String createErrorMsg(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.util.VersionRange: void <init>(com.atlassian.plugin.util.VersionRange$1)>(null) in <com.atlassian.plugin.util.VersionRange$OrVersionRange: void <init>(com.atlassian.plugin.util.VersionRange,com.atlassian.plugin.util.VersionRange)> ==> <com.atlassian.plugin.util.VersionRange: void <init>(com.atlassian.plugin.util.VersionRange$1)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.util.VersionRange: void <init>(com.atlassian.plugin.util.VersionRange$1)>(null) in <com.atlassian.plugin.util.VersionRange$EmptyVersionRange: void <init>()> ==> <com.atlassian.plugin.util.VersionRange: void <init>(com.atlassian.plugin.util.VersionRange$1)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.util.VersionRange: void <init>(com.atlassian.plugin.util.VersionRange$1)>(null) in <com.atlassian.plugin.util.VersionRange$AllVersionRange: void <init>()> ==> <com.atlassian.plugin.util.VersionRange: void <init>(com.atlassian.plugin.util.VersionRange$1)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.util.VersionRange: void <init>(com.atlassian.plugin.util.VersionRange$1)>(null) in <com.atlassian.plugin.util.VersionRange$SingleVersionRange: void <init>(java.lang.String)> ==> <com.atlassian.plugin.util.VersionRange: void <init>(com.atlassian.plugin.util.VersionRange$1)>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.util.VersionRange$ActualVersionRange: void <init>(boolean,java.lang.String,boolean,java.lang.String,com.atlassian.plugin.util.VersionRange$1)>($z1, $r3, z0, r2, null) in <com.atlassian.plugin.util.VersionRange$ActualVersionRangeBuilder: com.atlassian.plugin.util.VersionRange$ActualVersionRange newActualRange(java.lang.String,boolean)> ==> <com.atlassian.plugin.util.VersionRange$ActualVersionRange: void <init>(boolean,java.lang.String,boolean,java.lang.String,com.atlassian.plugin.util.VersionRange$1)>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.util.VersionRange$LeftUnboundedVersionRange: void <init>(boolean,java.lang.String,com.atlassian.plugin.util.VersionRange$1)>(z0, r1, null) in <com.atlassian.plugin.util.VersionRange$ActualVersionRangeBuilder: com.atlassian.plugin.util.VersionRange$LeftUnboundedVersionRange newLeftUnboundedRange(java.lang.String,boolean)> ==> <com.atlassian.plugin.util.VersionRange$LeftUnboundedVersionRange: void <init>(boolean,java.lang.String,com.atlassian.plugin.util.VersionRange$1)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.util.VersionRange: void <init>(com.atlassian.plugin.util.VersionRange$1)>(null) in <com.atlassian.plugin.util.VersionRange$RightUnboundedVersionRange: void <init>(boolean,java.lang.String)> ==> <com.atlassian.plugin.util.VersionRange: void <init>(com.atlassian.plugin.util.VersionRange$1)>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.util.jar.Manifest: java.util.jar.Attributes getMainAttributes()>() in <com.atlassian.plugin.JarPluginArtifact: boolean hasManifestEntry(java.util.jar.Manifest,java.lang.String)> ==> <java.util.jar.Manifest: java.util.jar.Attributes getMainAttributes()>
VIRTUAL edge: $r2 = virtualinvoke r0.<java.util.jar.Manifest: java.util.jar.Attributes getMainAttributes()>() in <com.atlassian.plugin.JarPluginArtifact: boolean hasManifestEntry(java.util.jar.Manifest,java.lang.String)> ==> <java.util.jar.Manifest: java.util.jar.Attributes getMainAttributes()>
VIRTUAL edge: $r4 = virtualinvoke $r2.<java.util.jar.Attributes: java.lang.String getValue(java.lang.String)>(r3) in <com.atlassian.plugin.JarPluginArtifact: boolean hasManifestEntry(java.util.jar.Manifest,java.lang.String)> ==> <java.util.jar.Attributes: java.lang.String getValue(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.parsers.PluginInformationReader$GetAttributeFunction: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.parsers.PluginInformationReader$ParseAttributeValueAsFloatFunction: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.parsers.PluginInformationReader$ElementWithForApplicationsPredicate: void <init>(java.util.Set)>(r1) in <com.atlassian.plugin.parsers.PluginInformationReader$ElementWithForApplicationsPredicate: void <init>(java.util.Set,com.atlassian.plugin.parsers.PluginInformationReader$1)> ==> <com.atlassian.plugin.parsers.PluginInformationReader$ElementWithForApplicationsPredicate: void <init>(java.util.Set)>
STATIC edge: $r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1) in <com.atlassian.plugin.parsers.PluginInformationReader$ElementWithForApplicationsPredicate: void <init>(java.util.Set)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.util.Date: void <init>()>() in <com.atlassian.plugin.impl.AbstractPlugin: void updateEnableTimes(com.atlassian.plugin.PluginState)> ==> <java.util.Date: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.util.jar.JarInputStream: void <init>(java.io.InputStream)>(r1) in <com.atlassian.plugin.url.InnerJarURLConnection: java.io.InputStream getSegmentInputStream(java.io.InputStream,java.lang.String)> ==> <java.util.jar.JarInputStream: void <init>(java.io.InputStream)>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.util.jar.JarInputStream: int available()>() in <com.atlassian.plugin.url.InnerJarURLConnection: java.io.InputStream getSegmentInputStream(java.io.InputStream,java.lang.String)> ==> <java.util.zip.ZipInputStream: int available()>
VIRTUAL edge: r9 = virtualinvoke $r0.<java.util.jar.JarInputStream: java.util.jar.JarEntry getNextJarEntry()>() in <com.atlassian.plugin.url.InnerJarURLConnection: java.io.InputStream getSegmentInputStream(java.io.InputStream,java.lang.String)> ==> <java.util.jar.JarInputStream: java.util.jar.JarEntry getNextJarEntry()>
SPECIAL edge: specialinvoke $r10.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.url.InnerJarURLConnection: java.io.InputStream getSegmentInputStream(java.io.InputStream,java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/") in <com.atlassian.plugin.url.InnerJarURLConnection: java.io.InputStream getSegmentInputStream(java.io.InputStream,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke r9.<java.util.jar.JarEntry: java.lang.String getName()>() in <com.atlassian.plugin.url.InnerJarURLConnection: java.io.InputStream getSegmentInputStream(java.io.InputStream,java.lang.String)> ==> <java.util.jar.JarEntry: java.lang.String getName()>
VIRTUAL edge: $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12) in <com.atlassian.plugin.url.InnerJarURLConnection: java.io.InputStream getSegmentInputStream(java.io.InputStream,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.url.InnerJarURLConnection: java.io.InputStream getSegmentInputStream(java.io.InputStream,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $z0 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>(r6) in <com.atlassian.plugin.url.InnerJarURLConnection: java.io.InputStream getSegmentInputStream(java.io.InputStream,java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r4.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.url.InnerJarURLConnection: java.io.InputStream getSegmentInputStream(java.io.InputStream,java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unable to locate segment: ") in <com.atlassian.plugin.url.InnerJarURLConnection: java.io.InputStream getSegmentInputStream(java.io.InputStream,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6) in <com.atlassian.plugin.url.InnerJarURLConnection: java.io.InputStream getSegmentInputStream(java.io.InputStream,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.url.InnerJarURLConnection: java.io.InputStream getSegmentInputStream(java.io.InputStream,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>($r8) in <com.atlassian.plugin.url.InnerJarURLConnection: java.io.InputStream getSegmentInputStream(java.io.InputStream,java.lang.String)> ==> <java.io.IOException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DependentPlugins$DependentPlugin: void <init>(com.atlassian.plugin.Plugin,com.atlassian.plugin.PluginDependencies$Type,boolean)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.manager.DependentPlugins$DependencyQueue: void <init>()>() in <com.atlassian.plugin.manager.DependentPlugins$DependencyQueue: void <init>(com.atlassian.plugin.manager.DependentPlugins$1)> ==> <com.atlassian.plugin.manager.DependentPlugins$DependencyQueue: void <init>()>
INTERFACE edge: r2 = interfaceinvoke $r1.<java.util.Deque: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DependentPlugins$DependencyQueue: void addLast(com.atlassian.plugin.manager.DependentPlugins$CappedDep)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r2 = interfaceinvoke $r1.<java.util.Deque: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DependentPlugins$DependencyQueue: void addLast(com.atlassian.plugin.manager.DependentPlugins$CappedDep)> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
VIRTUAL edge: $z1 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r7) in <com.atlassian.plugin.manager.DependentPlugins$DependencyQueue: void addLast(com.atlassian.plugin.manager.DependentPlugins$CappedDep)> ==> <java.lang.String: boolean equals(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<java.util.Deque: void addLast(java.lang.Object)>(r3) in <com.atlassian.plugin.manager.DependentPlugins$DependencyQueue: void addLast(com.atlassian.plugin.manager.DependentPlugins$CappedDep)> ==> <java.util.LinkedList: void addLast(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<java.util.Deque: void addLast(java.lang.Object)>(r3) in <com.atlassian.plugin.manager.DependentPlugins$DependencyQueue: void addLast(com.atlassian.plugin.manager.DependentPlugins$CappedDep)> ==> <java.util.ArrayDeque: void addLast(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Deque: boolean isEmpty()>() in <com.atlassian.plugin.manager.DependentPlugins$DependencyQueue: boolean isEmpty()> ==> <java.util.AbstractCollection: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Deque: boolean isEmpty()>() in <com.atlassian.plugin.manager.DependentPlugins$DependencyQueue: boolean isEmpty()> ==> <java.util.ArrayDeque: boolean isEmpty()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Deque: java.lang.Object removeFirst()>() in <com.atlassian.plugin.manager.DependentPlugins$DependencyQueue: com.atlassian.plugin.manager.DependentPlugins$CappedDep removeFirst()> ==> <java.util.LinkedList: java.lang.Object removeFirst()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Deque: java.lang.Object removeFirst()>() in <com.atlassian.plugin.manager.DependentPlugins$DependencyQueue: com.atlassian.plugin.manager.DependentPlugins$CappedDep removeFirst()> ==> <java.util.ArrayDeque: java.lang.Object removeFirst()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DependentPlugins$CappedDep: void <init>(java.lang.String,com.atlassian.plugin.PluginDependencies$Type)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.util.HashSet: void <init>()>() in <com.atlassian.plugin.manager.DependentPlugins: java.lang.String findPluginToCutTheCycle(java.util.Map)> ==> <java.util.HashSet: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>(r13) in <com.atlassian.plugin.manager.DependentPlugins: java.lang.String findPluginToCutTheCycle(java.util.Map)> ==> <java.util.HashSet: boolean add(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke r2.<java.util.Map: java.util.Set keySet()>() in <com.atlassian.plugin.manager.DependentPlugins: java.lang.String findPluginToCutTheCycle(java.util.Map)> ==> <java.util.HashMap: java.util.Set keySet()>
INTERFACE edge: $r3 = interfaceinvoke r2.<java.util.Map: java.util.Set keySet()>() in <com.atlassian.plugin.manager.DependentPlugins: java.lang.String findPluginToCutTheCycle(java.util.Map)> ==> <java.util.Hashtable: java.util.Set keySet()>
INTERFACE edge: $r3 = interfaceinvoke r2.<java.util.Map: java.util.Set keySet()>() in <com.atlassian.plugin.manager.DependentPlugins: java.lang.String findPluginToCutTheCycle(java.util.Map)> ==> <java.util.TreeMap: java.util.Set keySet()>
INTERFACE edge: $r3 = interfaceinvoke r2.<java.util.Map: java.util.Set keySet()>() in <com.atlassian.plugin.manager.DependentPlugins: java.lang.String findPluginToCutTheCycle(java.util.Map)> ==> <java.util.jar.Attributes: java.util.Set keySet()>
INTERFACE edge: $r6 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r13) in <com.atlassian.plugin.manager.DependentPlugins: java.lang.String findPluginToCutTheCycle(java.util.Map)> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r6 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r13) in <com.atlassian.plugin.manager.DependentPlugins: java.lang.String findPluginToCutTheCycle(java.util.Map)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r6 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r13) in <com.atlassian.plugin.manager.DependentPlugins: java.lang.String findPluginToCutTheCycle(java.util.Map)> ==> <java.util.TreeMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r6 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r13) in <com.atlassian.plugin.manager.DependentPlugins: java.lang.String findPluginToCutTheCycle(java.util.Map)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r6 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r13) in <com.atlassian.plugin.manager.DependentPlugins: java.lang.String findPluginToCutTheCycle(java.util.Map)> ==> <java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DependentPlugins: java.lang.String findPluginToCutTheCycle(java.util.Map)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DependentPlugins: java.lang.String findPluginToCutTheCycle(java.util.Map)> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DependentPlugins: java.lang.String findPluginToCutTheCycle(java.util.Map)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DependentPlugins: void removeFromWorkmap(java.util.Map,java.lang.String)> ==> <java.util.HashMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DependentPlugins: void removeFromWorkmap(java.util.Map,java.lang.String)> ==> <java.util.Hashtable: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DependentPlugins: void removeFromWorkmap(java.util.Map,java.lang.String)> ==> <java.util.TreeMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DependentPlugins: void removeFromWorkmap(java.util.Map,java.lang.String)> ==> <java.util.jar.Attributes: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke r0.<java.util.Map: java.util.Collection values()>() in <com.atlassian.plugin.manager.DependentPlugins: void removeFromWorkmap(java.util.Map,java.lang.String)> ==> <java.util.HashMap: java.util.Collection values()>
INTERFACE edge: $r3 = interfaceinvoke r0.<java.util.Map: java.util.Collection values()>() in <com.atlassian.plugin.manager.DependentPlugins: void removeFromWorkmap(java.util.Map,java.lang.String)> ==> <java.util.Hashtable: java.util.Collection values()>
INTERFACE edge: $r3 = interfaceinvoke r0.<java.util.Map: java.util.Collection values()>() in <com.atlassian.plugin.manager.DependentPlugins: void removeFromWorkmap(java.util.Map,java.lang.String)> ==> <java.util.AbstractMap: java.util.Collection values()>
INTERFACE edge: $r3 = interfaceinvoke r0.<java.util.Map: java.util.Collection values()>() in <com.atlassian.plugin.manager.DependentPlugins: void removeFromWorkmap(java.util.Map,java.lang.String)> ==> <java.util.jar.Attributes: java.util.Collection values()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DependentPlugins: void removeFromWorkmap(java.util.Map,java.lang.String)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DependentPlugins: void removeFromWorkmap(java.util.Map,java.lang.String)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DependentPlugins: void removeFromWorkmap(java.util.Map,java.lang.String)> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DependentPlugins: void removeFromWorkmap(java.util.Map,java.lang.String)> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DependentPlugins: void removeFromWorkmap(java.util.Map,java.lang.String)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.DependentPlugins: void removeFromWorkmap(java.util.Map,java.lang.String)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: interfaceinvoke r6.<java.util.Set: boolean remove(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DependentPlugins: void removeFromWorkmap(java.util.Map,java.lang.String)> ==> <java.util.HashSet: boolean remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke r6.<java.util.Set: boolean remove(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DependentPlugins: void removeFromWorkmap(java.util.Map,java.lang.String)> ==> <java.util.concurrent.CopyOnWriteArraySet: boolean remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke r6.<java.util.Set: boolean remove(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.DependentPlugins: void removeFromWorkmap(java.util.Map,java.lang.String)> ==> <java.util.TreeSet: boolean remove(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r1.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r2) in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.List toPermissionCheckingPluginLoaders(java.util.List)> ==> <java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>
INTERFACE edge: $r5 = interfaceinvoke $r3.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r4) in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.List toPermissionCheckingPluginLoaders(java.util.List)> ==> <java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>
SPECIAL edge: r2 = specialinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManager: java.util.Map parseFileNamedByPropertyAsMap(java.lang.String)>($r1) in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.function.Predicate wrapDelayPredicateWithOverrides(java.util.function.Predicate)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: java.util.Map parseFileNamedByPropertyAsMap(java.lang.String)>
SPECIAL edge: specialinvoke $r3.<com.atlassian.plugin.manager.DefaultPluginManager$1: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,java.util.Map,java.util.function.Predicate)>(r0, r2, r4) in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.function.Predicate wrapDelayPredicateWithOverrides(java.util.function.Predicate)> ==> <com.atlassian.plugin.manager.DefaultPluginManager$1: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,java.util.Map,java.util.function.Predicate)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.StateTracker: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>($r2) in <com.atlassian.plugin.manager.StateTracker: void <init>()> ==> <java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.UnsupportedPluginInstaller: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.jmx.AbstractJmxBridge: void <init>(javax.management.ObjectName,java.lang.Class)>($r2, class "Lcom/atlassian/plugin/jmx/PluginManagerMXBean;") in <com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge: void <init>(com.atlassian.plugin.manager.DefaultPluginManager)> ==> <com.atlassian.plugin.jmx.AbstractJmxBridge: void <init>(javax.management.ObjectName,java.lang.Class)>
VIRTUAL edge: virtualinvoke $r2.<com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)>($r3) in <com.atlassian.plugin.manager.DefaultPluginManager: void publishModuleDisabledEvents(com.atlassian.plugin.ModuleDescriptor,boolean)> ==> <com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)>
VIRTUAL edge: $r3 = virtualinvoke r2.<com.atlassian.plugin.manager.DefaultPluginManager: java.util.Collection getEnabledPlugins()>() in <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.manager.DependentPlugins disablePlugins(java.util.Collection,java.util.Set,boolean)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: java.util.Collection getEnabledPlugins()>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.manager.DependentPlugins: void <init>(java.util.Collection,java.lang.Iterable,java.util.Set)>(r1, $r3, r4) in <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.manager.DependentPlugins disablePlugins(java.util.Collection,java.util.Set,boolean)> ==> <com.atlassian.plugin.manager.DependentPlugins: void <init>(java.util.Collection,java.lang.Iterable,java.util.Set)>
VIRTUAL edge: virtualinvoke $r6.<com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)>($r7) in <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.manager.DependentPlugins disablePlugins(java.util.Collection,java.util.Set,boolean)> ==> <com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)>
INTERFACE edge: $r2 = interfaceinvoke r1.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.PluginEnabler: void scanDependencies(com.atlassian.plugin.Plugin,java.util.Set)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r2 = interfaceinvoke r1.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.PluginEnabler: void scanDependencies(com.atlassian.plugin.Plugin,java.util.Set)> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
INTERFACE edge: r3 = interfaceinvoke r1.<com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginDependencies getDependencies()>() in <com.atlassian.plugin.manager.PluginEnabler: void scanDependencies(com.atlassian.plugin.Plugin,java.util.Set)> ==> <com.atlassian.plugin.impl.AbstractPlugin: com.atlassian.plugin.PluginDependencies getDependencies()>
INTERFACE edge: interfaceinvoke r0.<java.util.Set: boolean add(java.lang.Object)>($r2) in <com.atlassian.plugin.manager.PluginEnabler: void scanDependencies(com.atlassian.plugin.Plugin,java.util.Set)> ==> <java.util.HashSet: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Set: boolean add(java.lang.Object)>($r2) in <com.atlassian.plugin.manager.PluginEnabler: void scanDependencies(com.atlassian.plugin.Plugin,java.util.Set)> ==> <java.util.concurrent.CopyOnWriteArraySet: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Set: boolean add(java.lang.Object)>($r2) in <com.atlassian.plugin.manager.PluginEnabler: void scanDependencies(com.atlassian.plugin.Plugin,java.util.Set)> ==> <java.util.TreeSet: boolean add(java.lang.Object)>
INTERFACE edge: $z2 = interfaceinvoke r0.<java.util.Set: boolean contains(java.lang.Object)>(r9) in <com.atlassian.plugin.manager.PluginEnabler: void scanDependencies(com.atlassian.plugin.Plugin,java.util.Set)> ==> <java.util.HashSet: boolean contains(java.lang.Object)>
INTERFACE edge: $z2 = interfaceinvoke r0.<java.util.Set: boolean contains(java.lang.Object)>(r9) in <com.atlassian.plugin.manager.PluginEnabler: void scanDependencies(com.atlassian.plugin.Plugin,java.util.Set)> ==> <java.util.concurrent.CopyOnWriteArraySet: boolean contains(java.lang.Object)>
INTERFACE edge: $z2 = interfaceinvoke r0.<java.util.Set: boolean contains(java.lang.Object)>(r9) in <com.atlassian.plugin.manager.PluginEnabler: void scanDependencies(com.atlassian.plugin.Plugin,java.util.Set)> ==> <java.util.TreeSet: boolean contains(java.lang.Object)>
SPECIAL edge: specialinvoke $r4.<java.util.HashSet: void <init>(java.util.Collection)>($r5) in <com.atlassian.plugin.manager.PluginEnabler: void scanDependencies(com.atlassian.plugin.Plugin,java.util.Set)> ==> <java.util.HashSet: void <init>(java.util.Collection)>
INTERFACE edge: r7 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.PluginEnabler: void scanDependencies(com.atlassian.plugin.Plugin,java.util.Set)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: $r12 = interfaceinvoke $r11.<com.atlassian.plugin.PluginAccessor: com.atlassian.plugin.Plugin getPlugin(java.lang.String)>(r9) in <com.atlassian.plugin.manager.PluginEnabler: void scanDependencies(com.atlassian.plugin.Plugin,java.util.Set)> ==> <com.atlassian.plugin.manager.ProductPluginAccessor: com.atlassian.plugin.Plugin getPlugin(java.lang.String)>
INTERFACE edge: $r12 = interfaceinvoke $r11.<com.atlassian.plugin.PluginAccessor: com.atlassian.plugin.Plugin getPlugin(java.lang.String)>(r9) in <com.atlassian.plugin.manager.PluginEnabler: void scanDependencies(com.atlassian.plugin.Plugin,java.util.Set)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase: com.atlassian.plugin.Plugin getPlugin(java.lang.String)>
INTERFACE edge: $r12 = interfaceinvoke $r11.<com.atlassian.plugin.PluginAccessor: com.atlassian.plugin.Plugin getPlugin(java.lang.String)>(r9) in <com.atlassian.plugin.manager.PluginEnabler: void scanDependencies(com.atlassian.plugin.Plugin,java.util.Set)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.Plugin getPlugin(java.lang.String)>
INTERFACE edge: $r12 = interfaceinvoke $r11.<com.atlassian.plugin.PluginAccessor: com.atlassian.plugin.Plugin getPlugin(java.lang.String)>(r9) in <com.atlassian.plugin.manager.PluginEnabler: void scanDependencies(com.atlassian.plugin.Plugin,java.util.Set)> ==> <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: com.atlassian.plugin.Plugin getPlugin(java.lang.String)>
INTERFACE edge: $z3 = interfaceinvoke $r13.<com.atlassian.plugin.PluginAccessor: boolean isPluginEnabled(java.lang.String)>(r9) in <com.atlassian.plugin.manager.PluginEnabler: void scanDependencies(com.atlassian.plugin.Plugin,java.util.Set)> ==> <com.atlassian.plugin.manager.ProductPluginAccessor: boolean isPluginEnabled(java.lang.String)>
INTERFACE edge: $z3 = interfaceinvoke $r13.<com.atlassian.plugin.PluginAccessor: boolean isPluginEnabled(java.lang.String)>(r9) in <com.atlassian.plugin.manager.PluginEnabler: void scanDependencies(com.atlassian.plugin.Plugin,java.util.Set)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase: boolean isPluginEnabled(java.lang.String)>
INTERFACE edge: $z3 = interfaceinvoke $r13.<com.atlassian.plugin.PluginAccessor: boolean isPluginEnabled(java.lang.String)>(r9) in <com.atlassian.plugin.manager.PluginEnabler: void scanDependencies(com.atlassian.plugin.Plugin,java.util.Set)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: boolean isPluginEnabled(java.lang.String)>
INTERFACE edge: $z3 = interfaceinvoke $r13.<com.atlassian.plugin.PluginAccessor: boolean isPluginEnabled(java.lang.String)>(r9) in <com.atlassian.plugin.manager.PluginEnabler: void scanDependencies(com.atlassian.plugin.Plugin,java.util.Set)> ==> <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: boolean isPluginEnabled(java.lang.String)>
INTERFACE edge: $r15 = interfaceinvoke $r14.<com.atlassian.plugin.PluginAccessor: com.atlassian.plugin.Plugin getPlugin(java.lang.String)>(r9) in <com.atlassian.plugin.manager.PluginEnabler: void scanDependencies(com.atlassian.plugin.Plugin,java.util.Set)> ==> <com.atlassian.plugin.manager.ProductPluginAccessor: com.atlassian.plugin.Plugin getPlugin(java.lang.String)>
INTERFACE edge: $r15 = interfaceinvoke $r14.<com.atlassian.plugin.PluginAccessor: com.atlassian.plugin.Plugin getPlugin(java.lang.String)>(r9) in <com.atlassian.plugin.manager.PluginEnabler: void scanDependencies(com.atlassian.plugin.Plugin,java.util.Set)> ==> <com.atlassian.plugin.manager.ProductPluginAccessorBase: com.atlassian.plugin.Plugin getPlugin(java.lang.String)>
INTERFACE edge: $r15 = interfaceinvoke $r14.<com.atlassian.plugin.PluginAccessor: com.atlassian.plugin.Plugin getPlugin(java.lang.String)>(r9) in <com.atlassian.plugin.manager.PluginEnabler: void scanDependencies(com.atlassian.plugin.Plugin,java.util.Set)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: com.atlassian.plugin.Plugin getPlugin(java.lang.String)>
INTERFACE edge: $r15 = interfaceinvoke $r14.<com.atlassian.plugin.PluginAccessor: com.atlassian.plugin.Plugin getPlugin(java.lang.String)>(r9) in <com.atlassian.plugin.manager.PluginEnabler: void scanDependencies(com.atlassian.plugin.Plugin,java.util.Set)> ==> <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: com.atlassian.plugin.Plugin getPlugin(java.lang.String)>
SPECIAL edge: specialinvoke r10.<com.atlassian.plugin.manager.PluginEnabler: void scanDependencies(com.atlassian.plugin.Plugin,java.util.Set)>($r15, r0) in <com.atlassian.plugin.manager.PluginEnabler: void scanDependencies(com.atlassian.plugin.Plugin,java.util.Set)> ==> <com.atlassian.plugin.manager.PluginEnabler: void scanDependencies(com.atlassian.plugin.Plugin,java.util.Set)>
VIRTUAL edge: virtualinvoke $r2.<com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)>($r3) in <com.atlassian.plugin.manager.DefaultPluginManager: void unloadPlugin(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.manager.PluginTransactionContext: void wrap(java.lang.Runnable)>
INTERFACE edge: $i0 = interfaceinvoke r0.<java.util.Collection: int size()>() in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <java.util.HashSet: int size()>
INTERFACE edge: $i0 = interfaceinvoke r0.<java.util.Collection: int size()>() in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i0 = interfaceinvoke r0.<java.util.Collection: int size()>() in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <java.util.ArrayDeque: int size()>
INTERFACE edge: $i0 = interfaceinvoke r0.<java.util.Collection: int size()>() in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <java.util.concurrent.CopyOnWriteArraySet: int size()>
INTERFACE edge: $i0 = interfaceinvoke r0.<java.util.Collection: int size()>() in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <java.util.TreeSet: int size()>
INTERFACE edge: $i0 = interfaceinvoke r0.<java.util.Collection: int size()>() in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <java.util.ArrayList: int size()>
INTERFACE edge: r42 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r42 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r42 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r42 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r42 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: r42 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $i1 = interfaceinvoke r0.<java.util.Collection: int size()>() in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <java.util.HashSet: int size()>
INTERFACE edge: $i1 = interfaceinvoke r0.<java.util.Collection: int size()>() in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i1 = interfaceinvoke r0.<java.util.Collection: int size()>() in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <java.util.ArrayDeque: int size()>
INTERFACE edge: $i1 = interfaceinvoke r0.<java.util.Collection: int size()>() in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <java.util.concurrent.CopyOnWriteArraySet: int size()>
INTERFACE edge: $i1 = interfaceinvoke r0.<java.util.Collection: int size()>() in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <java.util.TreeSet: int size()>
INTERFACE edge: $i1 = interfaceinvoke r0.<java.util.Collection: int size()>() in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <java.util.ArrayList: int size()>
INTERFACE edge: r45 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r45 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r45 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r45 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r45 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: r45 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: interfaceinvoke $r1.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Resolving {} plugins", $r2) in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<java.util.HashSet: void <init>()>() in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <java.util.HashSet: void <init>()>
INTERFACE edge: interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>(r46) in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <java.util.HashSet: boolean add(java.lang.Object)>
INTERFACE edge: $z2 = interfaceinvoke $r3.<java.util.Set: boolean isEmpty()>() in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <java.util.HashSet: boolean isEmpty()>
INTERFACE edge: $i2 = interfaceinvoke $r3.<java.util.Set: int size()>() in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <java.util.HashSet: int size()>
INTERFACE edge: $z4 = interfaceinvoke $r3.<java.util.Set: boolean isEmpty()>() in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <java.util.HashSet: boolean isEmpty()>
INTERFACE edge: r50 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>() in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: interfaceinvoke r43.<com.atlassian.plugin.Plugin: void resolve()>() in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <com.atlassian.plugin.impl.AbstractPlugin: void resolve()>
INTERFACE edge: interfaceinvoke r43.<com.atlassian.plugin.Plugin: void resolve()>() in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <com.atlassian.plugin.Plugin: void resolve()>
INTERFACE edge: $r38 = interfaceinvoke r43.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r38 = interfaceinvoke r43.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
SPECIAL edge: specialinvoke $r35.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot resolve plugin \'") in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r39 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r38) in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'") in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r36.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>($r41, $r34) in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>
INTERFACE edge: interfaceinvoke $r5.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Enabling {} plugins: {}", $r6, r0) in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r46.<com.atlassian.plugin.Plugin: void enable()>() in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <com.atlassian.plugin.impl.AbstractPlugin: void enable()>
INTERFACE edge: interfaceinvoke r46.<com.atlassian.plugin.Plugin: void enable()>() in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <com.atlassian.plugin.Plugin: void enable()>
INTERFACE edge: r47 = interfaceinvoke r46.<com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginState getPluginState()>() in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <com.atlassian.plugin.impl.AbstractPlugin: com.atlassian.plugin.PluginState getPluginState()>
INTERFACE edge: r47 = interfaceinvoke r46.<com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginState getPluginState()>() in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <com.atlassian.plugin.Plugin: com.atlassian.plugin.PluginState getPluginState()>
INTERFACE edge: $r24 = interfaceinvoke r46.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r24 = interfaceinvoke r46.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
INTERFACE edge: $r31 = interfaceinvoke r46.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r31 = interfaceinvoke r46.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
INTERFACE edge: interfaceinvoke $r23.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Plugin \'{}\' immediately {}", $r24, r47) in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>
INTERFACE edge: z7 = interfaceinvoke $r27.<com.atlassian.plugin.exception.PluginExceptionInterception: boolean onEnableException(com.atlassian.plugin.Plugin,java.lang.Exception)>(r46, $r26) in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <com.atlassian.plugin.exception.NoOpPluginExceptionInterception: boolean onEnableException(com.atlassian.plugin.Plugin,java.lang.Exception)>
SPECIAL edge: specialinvoke $r28.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to enable plugin ") in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31) in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r29.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>($r33, $r26) in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>
INTERFACE edge: interfaceinvoke $r7.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Waiting for {} plugins to finish ENABLING: {}", $r8, $r3) in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r9.<com.atlassian.plugin.manager.PluginEnabler$1: void <init>(com.atlassian.plugin.manager.PluginEnabler,java.util.Set)>(r10, $r3) in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <com.atlassian.plugin.manager.PluginEnabler$1: void <init>(com.atlassian.plugin.manager.PluginEnabler,java.util.Set)>
SPECIAL edge: specialinvoke $r12.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r17 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16) in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i4 = virtualinvoke $r12.<java.lang.StringBuilder: int length()>() in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <java.lang.StringBuilder: int length()>
VIRTUAL edge: virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder deleteCharAt(int)>($i5) in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <java.lang.StringBuilder: java.lang.StringBuilder deleteCharAt(int)>
INTERFACE edge: $r16 = interfaceinvoke r51.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r16 = interfaceinvoke r51.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
INTERFACE edge: $r20 = interfaceinvoke r51.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r20 = interfaceinvoke r51.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
VIRTUAL edge: virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44) in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
INTERFACE edge: interfaceinvoke $r19.<com.atlassian.plugin.PluginController: void disablePluginWithoutPersisting(java.lang.String)>($r20) in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <com.atlassian.plugin.manager.DefaultPluginManager: void disablePluginWithoutPersisting(java.lang.String)>
INTERFACE edge: interfaceinvoke $r19.<com.atlassian.plugin.PluginController: void disablePluginWithoutPersisting(java.lang.String)>($r20) in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <com.atlassian.plugin.manager.ProductPluginAccessor$1: void disablePluginWithoutPersisting(java.lang.String)>
INTERFACE edge: interfaceinvoke $r14.<org.slf4j.Logger: void error(java.lang.String,java.lang.Object)>("Unable to start the following plugins due to timeout while waiting for plugin to enable: {}", $r12) in <com.atlassian.plugin.manager.PluginEnabler: void actualEnable(java.util.Collection)> ==> <org.slf4j.Logger: void error(java.lang.String,java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.util.HashMap: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager: java.util.Map propertiesToMap(java.util.Properties)> ==> <java.util.HashMap: void <init>()>
VIRTUAL edge: virtualinvoke r3.<com.atlassian.plugin.manager.StateTracker$State$3: void illegalState(com.atlassian.plugin.manager.StateTracker$State)>(r0) in <com.atlassian.plugin.manager.StateTracker$State$3: void check(com.atlassian.plugin.manager.StateTracker$State)> ==> <com.atlassian.plugin.manager.StateTracker$State: void illegalState(com.atlassian.plugin.manager.StateTracker$State)>
VIRTUAL edge: virtualinvoke r2.<com.atlassian.plugin.manager.StateTracker$State$4: void illegalState(com.atlassian.plugin.manager.StateTracker$State)>(r0) in <com.atlassian.plugin.manager.StateTracker$State$4: void check(com.atlassian.plugin.manager.StateTracker$State)> ==> <com.atlassian.plugin.manager.StateTracker$State: void illegalState(com.atlassian.plugin.manager.StateTracker$State)>
VIRTUAL edge: virtualinvoke r3.<com.atlassian.plugin.manager.StateTracker$State$1: void illegalState(com.atlassian.plugin.manager.StateTracker$State)>(r0) in <com.atlassian.plugin.manager.StateTracker$State$1: void check(com.atlassian.plugin.manager.StateTracker$State)> ==> <com.atlassian.plugin.manager.StateTracker$State: void illegalState(com.atlassian.plugin.manager.StateTracker$State)>
VIRTUAL edge: virtualinvoke r3.<com.atlassian.plugin.manager.StateTracker$State$2: void illegalState(com.atlassian.plugin.manager.StateTracker$State)>(r0) in <com.atlassian.plugin.manager.StateTracker$State$2: void check(com.atlassian.plugin.manager.StateTracker$State)> ==> <com.atlassian.plugin.manager.StateTracker$State: void illegalState(com.atlassian.plugin.manager.StateTracker$State)>
VIRTUAL edge: $i0 = virtualinvoke r0.<com.atlassian.plugin.manager.StateTracker$State: int ordinal()>() in <com.atlassian.plugin.manager.StateTracker$State: void check(com.atlassian.plugin.manager.StateTracker$State)> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: virtualinvoke r0.<com.atlassian.plugin.manager.StateTracker$State: void illegalState(com.atlassian.plugin.manager.StateTracker$State)>(r1) in <com.atlassian.plugin.manager.StateTracker$State: void check(com.atlassian.plugin.manager.StateTracker$State)> ==> <com.atlassian.plugin.manager.StateTracker$State: void illegalState(com.atlassian.plugin.manager.StateTracker$State)>
VIRTUAL edge: $i2 = virtualinvoke r1.<com.atlassian.plugin.manager.StateTracker$State: int ordinal()>() in <com.atlassian.plugin.manager.StateTracker$State: void check(com.atlassian.plugin.manager.StateTracker$State)> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: virtualinvoke r2.<com.atlassian.plugin.manager.StateTracker$State$5: void illegalState(com.atlassian.plugin.manager.StateTracker$State)>(r0) in <com.atlassian.plugin.manager.StateTracker$State$5: void check(com.atlassian.plugin.manager.StateTracker$State)> ==> <com.atlassian.plugin.manager.StateTracker$State: void illegalState(com.atlassian.plugin.manager.StateTracker$State)>
INTERFACE edge: interfaceinvoke $r2.<com.atlassian.plugin.event.PluginEventManager: void broadcast(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.PluginTransactionContext: void broadcastIgnoreError(java.lang.Object)> ==> <com.atlassian.plugin.event.PluginEventManager: void broadcast(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<com.atlassian.plugin.event.PluginEventManager: void broadcast(java.lang.Object)>(r1) in <com.atlassian.plugin.manager.PluginTransactionContext: void broadcastIgnoreError(java.lang.Object)> ==> <com.atlassian.plugin.event.impl.DefaultPluginEventManager: void broadcast(java.lang.Object)>
VIRTUAL edge: r3 = virtualinvoke r1.<com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: java.util.Collection getInputStreamsForFilename(java.lang.String)>(r2) in <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: java.util.Set getStringsFromFile(java.lang.String)> ==> <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: java.util.Collection getInputStreamsForFilename(java.lang.String)>
SPECIAL edge: r10 = specialinvoke r1.<com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: java.lang.String processedLine(java.lang.String)>(r9) in <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: java.util.Set getStringsFromFile(java.lang.String)> ==> <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: java.lang.String processedLine(java.lang.String)>
INTERFACE edge: r20 = interfaceinvoke r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: java.util.Set getStringsFromFile(java.lang.String)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r20 = interfaceinvoke r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: java.util.Set getStringsFromFile(java.lang.String)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r20 = interfaceinvoke r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: java.util.Set getStringsFromFile(java.lang.String)> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r20 = interfaceinvoke r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: java.util.Set getStringsFromFile(java.lang.String)> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r20 = interfaceinvoke r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: java.util.Set getStringsFromFile(java.lang.String)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: r20 = interfaceinvoke r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: java.util.Set getStringsFromFile(java.lang.String)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: r24 = interfaceinvoke r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: java.util.Set getStringsFromFile(java.lang.String)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r24 = interfaceinvoke r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: java.util.Set getStringsFromFile(java.lang.String)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r24 = interfaceinvoke r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: java.util.Set getStringsFromFile(java.lang.String)> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r24 = interfaceinvoke r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: java.util.Set getStringsFromFile(java.lang.String)> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r24 = interfaceinvoke r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: java.util.Set getStringsFromFile(java.lang.String)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: r24 = interfaceinvoke r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: java.util.Set getStringsFromFile(java.lang.String)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: r15 = interfaceinvoke r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: java.util.Set getStringsFromFile(java.lang.String)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r15 = interfaceinvoke r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: java.util.Set getStringsFromFile(java.lang.String)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r15 = interfaceinvoke r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: java.util.Set getStringsFromFile(java.lang.String)> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r15 = interfaceinvoke r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: java.util.Set getStringsFromFile(java.lang.String)> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r15 = interfaceinvoke r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: java.util.Set getStringsFromFile(java.lang.String)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: r15 = interfaceinvoke r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: java.util.Set getStringsFromFile(java.lang.String)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: r7 = interfaceinvoke r22.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: java.util.Set getStringsFromFile(java.lang.String)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r7 = interfaceinvoke r22.<java.util.List: java.util.Iterator iterator()>() in <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: java.util.Set getStringsFromFile(java.lang.String)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
VIRTUAL edge: $r11 = virtualinvoke r10.<java.lang.String: java.lang.String intern()>() in <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: java.util.Set getStringsFromFile(java.lang.String)> ==> <java.lang.String: java.lang.String intern()>
VIRTUAL edge: virtualinvoke r0.<com.google.common.collect.ImmutableSet$Builder: com.google.common.collect.ImmutableSet$Builder add(java.lang.Object)>($r11) in <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: java.util.Set getStringsFromFile(java.lang.String)> ==> <com.google.common.collect.ImmutableSet$Builder: com.google.common.collect.ImmutableSet$Builder add(java.lang.Object)>
SPECIAL edge: specialinvoke $r26.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r18) in <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: java.util.Set getStringsFromFile(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
STATIC edge: staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r21) in <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: java.util.Collection getInputStreamsForFilename(java.lang.String)> ==> <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>
STATIC edge: $z0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isBlank(java.lang.CharSequence)>(r1) in <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: java.lang.String processedLine(java.lang.String)> ==> <org.apache.commons.lang3.StringUtils: boolean isBlank(java.lang.CharSequence)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge: com.atlassian.plugin.jmx.PluginManagerMXBean getMXBean()>() in <com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge: java.lang.Object getMXBean()> ==> <com.atlassian.plugin.manager.DefaultPluginManagerJmxBridge: com.atlassian.plugin.jmx.PluginManagerMXBean getMXBean()>
INTERFACE edge: $z0 = interfaceinvoke $r2.<com.atlassian.plugin.event.impl.ListenerMethodSelector: boolean isListenerMethod(java.lang.reflect.Method)>(r1) in <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler: boolean isValidMethod(java.lang.reflect.Method)> ==> <com.atlassian.plugin.event.impl.MethodNameListenerMethodSelector: boolean isListenerMethod(java.lang.reflect.Method)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<com.atlassian.plugin.event.impl.ListenerMethodSelector: boolean isListenerMethod(java.lang.reflect.Method)>(r1) in <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler: boolean isValidMethod(java.lang.reflect.Method)> ==> <com.atlassian.plugin.event.impl.AnnotationListenerMethodSelector: boolean isListenerMethod(java.lang.reflect.Method)>
SPECIAL edge: $z1 = specialinvoke r0.<com.atlassian.plugin.event.impl.MethodSelectorListenerHandler: boolean hasOneAndOnlyOneParameter(java.lang.reflect.Method)>(r1) in <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler: boolean isValidMethod(java.lang.reflect.Method)> ==> <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler: boolean hasOneAndOnlyOneParameter(java.lang.reflect.Method)>
SPECIAL edge: specialinvoke $r4.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler: boolean isValidMethod(java.lang.reflect.Method)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Method <") in <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler: boolean isValidMethod(java.lang.reflect.Method)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1) in <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler: boolean isValidMethod(java.lang.reflect.Method)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> of class <") in <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler: boolean isValidMethod(java.lang.reflect.Method)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>() in <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler: boolean isValidMethod(java.lang.reflect.Method)> ==> <java.lang.reflect.Method: java.lang.Class getDeclaringClass()>
VIRTUAL edge: $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8) in <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler: boolean isValidMethod(java.lang.reflect.Method)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> is being registered as a listener but has 0 or more than 1 parameters! Listener methods MUST have 1 and only 1 parameter.") in <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler: boolean isValidMethod(java.lang.reflect.Method)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler: boolean isValidMethod(java.lang.reflect.Method)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>($r11) in <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler: boolean isValidMethod(java.lang.reflect.Method)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
INTERFACE edge: $r1 = interfaceinvoke r0.<com.atlassian.plugin.PluginArtifact: java.io.InputStream getInputStream()>() in <com.atlassian.plugin.factories.XmlDynamicPluginFactory: java.io.InputStream getDescriptorInputStream(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.PluginArtifact: java.io.InputStream getInputStream()>
INTERFACE edge: $r1 = interfaceinvoke r0.<com.atlassian.plugin.PluginArtifact: java.io.InputStream getInputStream()>() in <com.atlassian.plugin.factories.XmlDynamicPluginFactory: java.io.InputStream getDescriptorInputStream(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.JarPluginArtifact: java.io.InputStream getInputStream()>
INTERFACE edge: $r1 = interfaceinvoke r0.<com.atlassian.plugin.PluginArtifact: java.io.InputStream getInputStream()>() in <com.atlassian.plugin.factories.XmlDynamicPluginFactory: java.io.InputStream getDescriptorInputStream(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.XmlPluginArtifact: java.io.InputStream getInputStream()>
INTERFACE edge: $r3 = interfaceinvoke r0.<com.atlassian.plugin.PluginArtifact: java.io.InputStream getResourceAsStream(java.lang.String)>($r2) in <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: java.io.InputStream getDescriptorInputStream(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.PluginArtifact: java.io.InputStream getResourceAsStream(java.lang.String)>
INTERFACE edge: $r3 = interfaceinvoke r0.<com.atlassian.plugin.PluginArtifact: java.io.InputStream getResourceAsStream(java.lang.String)>($r2) in <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: java.io.InputStream getDescriptorInputStream(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.JarPluginArtifact: java.io.InputStream getResourceAsStream(java.lang.String)>
INTERFACE edge: $r3 = interfaceinvoke r0.<com.atlassian.plugin.PluginArtifact: java.io.InputStream getResourceAsStream(java.lang.String)>($r2) in <com.atlassian.plugin.factories.LegacyDynamicPluginFactory: java.io.InputStream getDescriptorInputStream(com.atlassian.plugin.PluginArtifact)> ==> <com.atlassian.plugin.XmlPluginArtifact: java.io.InputStream getResourceAsStream(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("META-INF/lib/") in <com.atlassian.plugin.classloader.PluginClassLoader: boolean isInnerJarPath(java.lang.String)> ==> <java.lang.String: boolean startsWith(java.lang.String)>
VIRTUAL edge: $z1 = virtualinvoke r0.<java.lang.String: boolean endsWith(java.lang.String)>(".jar") in <com.atlassian.plugin.classloader.PluginClassLoader: boolean isInnerJarPath(java.lang.String)> ==> <java.lang.String: boolean endsWith(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r3.<java.util.jar.JarFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)>(r4) in <com.atlassian.plugin.classloader.PluginClassLoader: void initialiseInnerJar(java.util.jar.JarFile,java.util.jar.JarEntry)> ==> <java.util.jar.JarFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)>
SPECIAL edge: specialinvoke $r6.<java.io.FileOutputStream: void <init>(java.io.File)>(r2) in <com.atlassian.plugin.classloader.PluginClassLoader: void initialiseInnerJar(java.util.jar.JarFile,java.util.jar.JarEntry)> ==> <java.io.FileOutputStream: void <init>(java.io.File)>
VIRTUAL edge: virtualinvoke $r6.<java.io.FileOutputStream: void close()>() in <com.atlassian.plugin.classloader.PluginClassLoader: void initialiseInnerJar(java.util.jar.JarFile,java.util.jar.JarEntry)> ==> <java.io.FileOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r6.<java.io.FileOutputStream: void close()>() in <com.atlassian.plugin.classloader.PluginClassLoader: void initialiseInnerJar(java.util.jar.JarFile,java.util.jar.JarEntry)> ==> <java.io.FileOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r6.<java.io.FileOutputStream: void close()>() in <com.atlassian.plugin.classloader.PluginClassLoader: void initialiseInnerJar(java.util.jar.JarFile,java.util.jar.JarEntry)> ==> <java.io.FileOutputStream: void close()>
SPECIAL edge: specialinvoke $r7.<java.util.jar.JarFile: void <init>(java.io.File)>(r2) in <com.atlassian.plugin.classloader.PluginClassLoader: void initialiseInnerJar(java.util.jar.JarFile,java.util.jar.JarEntry)> ==> <java.util.jar.JarFile: void <init>(java.io.File)>
VIRTUAL edge: r30 = virtualinvoke $r7.<java.util.jar.JarFile: java.util.Enumeration entries()>() in <com.atlassian.plugin.classloader.PluginClassLoader: void initialiseInnerJar(java.util.jar.JarFile,java.util.jar.JarEntry)> ==> <java.util.jar.JarFile: java.util.Enumeration entries()>
VIRTUAL edge: virtualinvoke $r7.<java.util.jar.JarFile: void close()>() in <com.atlassian.plugin.classloader.PluginClassLoader: void initialiseInnerJar(java.util.jar.JarFile,java.util.jar.JarEntry)> ==> <java.util.jar.JarFile: void close()>
VIRTUAL edge: virtualinvoke $r7.<java.util.jar.JarFile: void close()>() in <com.atlassian.plugin.classloader.PluginClassLoader: void initialiseInnerJar(java.util.jar.JarFile,java.util.jar.JarEntry)> ==> <java.util.jar.JarFile: void close()>
VIRTUAL edge: virtualinvoke $r7.<java.util.jar.JarFile: void close()>() in <com.atlassian.plugin.classloader.PluginClassLoader: void initialiseInnerJar(java.util.jar.JarFile,java.util.jar.JarEntry)> ==> <java.util.jar.JarFile: void close()>
INTERFACE edge: $z0 = interfaceinvoke r30.<java.util.Enumeration: boolean hasMoreElements()>() in <com.atlassian.plugin.classloader.PluginClassLoader: void initialiseInnerJar(java.util.jar.JarFile,java.util.jar.JarEntry)> ==> <java.util.StringTokenizer: boolean hasMoreElements()>
INTERFACE edge: $z0 = interfaceinvoke r30.<java.util.Enumeration: boolean hasMoreElements()>() in <com.atlassian.plugin.classloader.PluginClassLoader: void initialiseInnerJar(java.util.jar.JarFile,java.util.jar.JarEntry)> ==> <com.atlassian.plugin.util.ChainingClassLoader$ResourcesEnumeration: boolean hasMoreElements()>
INTERFACE edge: $r8 = interfaceinvoke r30.<java.util.Enumeration: java.lang.Object nextElement()>() in <com.atlassian.plugin.classloader.PluginClassLoader: void initialiseInnerJar(java.util.jar.JarFile,java.util.jar.JarEntry)> ==> <java.util.StringTokenizer: java.lang.Object nextElement()>
INTERFACE edge: $r8 = interfaceinvoke r30.<java.util.Enumeration: java.lang.Object nextElement()>() in <com.atlassian.plugin.classloader.PluginClassLoader: void initialiseInnerJar(java.util.jar.JarFile,java.util.jar.JarEntry)> ==> <com.atlassian.plugin.util.ChainingClassLoader$ResourcesEnumeration: java.lang.Object nextElement()>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.classloader.PluginClassLoader: void addEntryMapping(java.util.jar.JarEntry,java.io.File,boolean)>(r9, r2, 0) in <com.atlassian.plugin.classloader.PluginClassLoader: void initialiseInnerJar(java.util.jar.JarFile,java.util.jar.JarEntry)> ==> <com.atlassian.plugin.classloader.PluginClassLoader: void addEntryMapping(java.util.jar.JarEntry,java.io.File,boolean)>
VIRTUAL edge: virtualinvoke $r26.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r22) in <com.atlassian.plugin.classloader.PluginClassLoader: void initialiseInnerJar(java.util.jar.JarFile,java.util.jar.JarEntry)> ==> <java.lang.Throwable: void addSuppressed(java.lang.Throwable)>
INTERFACE edge: interfaceinvoke $r33.<java.util.List: boolean add(java.lang.Object)>(r2) in <com.atlassian.plugin.classloader.PluginClassLoader: void initialiseInnerJar(java.util.jar.JarFile,java.util.jar.JarEntry)> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r33.<java.util.List: boolean add(java.lang.Object)>(r2) in <com.atlassian.plugin.classloader.PluginClassLoader: void initialiseInnerJar(java.util.jar.JarFile,java.util.jar.JarEntry)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r20.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r16) in <com.atlassian.plugin.classloader.PluginClassLoader: void initialiseInnerJar(java.util.jar.JarFile,java.util.jar.JarEntry)> ==> <java.lang.Throwable: void addSuppressed(java.lang.Throwable)>
VIRTUAL edge: virtualinvoke r5.<java.io.InputStream: void close()>() in <com.atlassian.plugin.classloader.PluginClassLoader: void initialiseInnerJar(java.util.jar.JarFile,java.util.jar.JarEntry)> ==> <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: void close()>
VIRTUAL edge: virtualinvoke r5.<java.io.InputStream: void close()>() in <com.atlassian.plugin.classloader.PluginClassLoader: void initialiseInnerJar(java.util.jar.JarFile,java.util.jar.JarEntry)> ==> <java.io.FilterInputStream: void close()>
VIRTUAL edge: virtualinvoke r5.<java.io.InputStream: void close()>() in <com.atlassian.plugin.classloader.PluginClassLoader: void initialiseInnerJar(java.util.jar.JarFile,java.util.jar.JarEntry)> ==> <java.io.BufferedInputStream: void close()>
VIRTUAL edge: virtualinvoke r5.<java.io.InputStream: void close()>() in <com.atlassian.plugin.classloader.PluginClassLoader: void initialiseInnerJar(java.util.jar.JarFile,java.util.jar.JarEntry)> ==> <java.util.zip.ZipInputStream: void close()>
VIRTUAL edge: virtualinvoke r5.<java.io.InputStream: void close()>() in <com.atlassian.plugin.classloader.PluginClassLoader: void initialiseInnerJar(java.util.jar.JarFile,java.util.jar.JarEntry)> ==> <java.io.ByteArrayInputStream: void close()>
VIRTUAL edge: virtualinvoke r5.<java.io.InputStream: void close()>() in <com.atlassian.plugin.classloader.PluginClassLoader: void initialiseInnerJar(java.util.jar.JarFile,java.util.jar.JarEntry)> ==> <java.util.zip.InflaterInputStream: void close()>
VIRTUAL edge: virtualinvoke r5.<java.io.InputStream: void close()>() in <com.atlassian.plugin.classloader.PluginClassLoader: void initialiseInnerJar(java.util.jar.JarFile,java.util.jar.JarEntry)> ==> <com.atlassian.plugin.JarPluginArtifact$1: void close()>
VIRTUAL edge: virtualinvoke r5.<java.io.InputStream: void close()>() in <com.atlassian.plugin.classloader.PluginClassLoader: void initialiseInnerJar(java.util.jar.JarFile,java.util.jar.JarEntry)> ==> <java.io.FileInputStream: void close()>
VIRTUAL edge: virtualinvoke r5.<java.io.InputStream: void close()>() in <com.atlassian.plugin.classloader.PluginClassLoader: void initialiseInnerJar(java.util.jar.JarFile,java.util.jar.JarEntry)> ==> <java.io.InputStream: void close()>
VIRTUAL edge: virtualinvoke r5.<java.io.InputStream: void close()>() in <com.atlassian.plugin.classloader.PluginClassLoader: void initialiseInnerJar(java.util.jar.JarFile,java.util.jar.JarEntry)> ==> <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: void close()>
VIRTUAL edge: virtualinvoke r5.<java.io.InputStream: void close()>() in <com.atlassian.plugin.classloader.PluginClassLoader: void initialiseInnerJar(java.util.jar.JarFile,java.util.jar.JarEntry)> ==> <java.io.FilterInputStream: void close()>
VIRTUAL edge: virtualinvoke r5.<java.io.InputStream: void close()>() in <com.atlassian.plugin.classloader.PluginClassLoader: void initialiseInnerJar(java.util.jar.JarFile,java.util.jar.JarEntry)> ==> <java.io.BufferedInputStream: void close()>
VIRTUAL edge: virtualinvoke r5.<java.io.InputStream: void close()>() in <com.atlassian.plugin.classloader.PluginClassLoader: void initialiseInnerJar(java.util.jar.JarFile,java.util.jar.JarEntry)> ==> <java.util.zip.ZipInputStream: void close()>
VIRTUAL edge: virtualinvoke r5.<java.io.InputStream: void close()>() in <com.atlassian.plugin.classloader.PluginClassLoader: void initialiseInnerJar(java.util.jar.JarFile,java.util.jar.JarEntry)> ==> <java.io.ByteArrayInputStream: void close()>
VIRTUAL edge: virtualinvoke r5.<java.io.InputStream: void close()>() in <com.atlassian.plugin.classloader.PluginClassLoader: void initialiseInnerJar(java.util.jar.JarFile,java.util.jar.JarEntry)> ==> <java.util.zip.InflaterInputStream: void close()>
VIRTUAL edge: virtualinvoke r5.<java.io.InputStream: void close()>() in <com.atlassian.plugin.classloader.PluginClassLoader: void initialiseInnerJar(java.util.jar.JarFile,java.util.jar.JarEntry)> ==> <com.atlassian.plugin.JarPluginArtifact$1: void close()>
VIRTUAL edge: virtualinvoke r5.<java.io.InputStream: void close()>() in <com.atlassian.plugin.classloader.PluginClassLoader: void initialiseInnerJar(java.util.jar.JarFile,java.util.jar.JarEntry)> ==> <java.io.FileInputStream: void close()>
VIRTUAL edge: virtualinvoke r5.<java.io.InputStream: void close()>() in <com.atlassian.plugin.classloader.PluginClassLoader: void initialiseInnerJar(java.util.jar.JarFile,java.util.jar.JarEntry)> ==> <java.io.InputStream: void close()>
VIRTUAL edge: virtualinvoke r5.<java.io.InputStream: void close()>() in <com.atlassian.plugin.classloader.PluginClassLoader: void initialiseInnerJar(java.util.jar.JarFile,java.util.jar.JarEntry)> ==> <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection$1: void close()>
VIRTUAL edge: virtualinvoke r5.<java.io.InputStream: void close()>() in <com.atlassian.plugin.classloader.PluginClassLoader: void initialiseInnerJar(java.util.jar.JarFile,java.util.jar.JarEntry)> ==> <java.io.FilterInputStream: void close()>
VIRTUAL edge: virtualinvoke r5.<java.io.InputStream: void close()>() in <com.atlassian.plugin.classloader.PluginClassLoader: void initialiseInnerJar(java.util.jar.JarFile,java.util.jar.JarEntry)> ==> <java.io.BufferedInputStream: void close()>
VIRTUAL edge: virtualinvoke r5.<java.io.InputStream: void close()>() in <com.atlassian.plugin.classloader.PluginClassLoader: void initialiseInnerJar(java.util.jar.JarFile,java.util.jar.JarEntry)> ==> <java.util.zip.ZipInputStream: void close()>
VIRTUAL edge: virtualinvoke r5.<java.io.InputStream: void close()>() in <com.atlassian.plugin.classloader.PluginClassLoader: void initialiseInnerJar(java.util.jar.JarFile,java.util.jar.JarEntry)> ==> <java.io.ByteArrayInputStream: void close()>
VIRTUAL edge: virtualinvoke r5.<java.io.InputStream: void close()>() in <com.atlassian.plugin.classloader.PluginClassLoader: void initialiseInnerJar(java.util.jar.JarFile,java.util.jar.JarEntry)> ==> <java.util.zip.InflaterInputStream: void close()>
VIRTUAL edge: virtualinvoke r5.<java.io.InputStream: void close()>() in <com.atlassian.plugin.classloader.PluginClassLoader: void initialiseInnerJar(java.util.jar.JarFile,java.util.jar.JarEntry)> ==> <com.atlassian.plugin.JarPluginArtifact$1: void close()>
VIRTUAL edge: virtualinvoke r5.<java.io.InputStream: void close()>() in <com.atlassian.plugin.classloader.PluginClassLoader: void initialiseInnerJar(java.util.jar.JarFile,java.util.jar.JarEntry)> ==> <java.io.FileInputStream: void close()>
VIRTUAL edge: virtualinvoke r5.<java.io.InputStream: void close()>() in <com.atlassian.plugin.classloader.PluginClassLoader: void initialiseInnerJar(java.util.jar.JarFile,java.util.jar.JarEntry)> ==> <java.io.InputStream: void close()>
VIRTUAL edge: virtualinvoke $r14.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r10) in <com.atlassian.plugin.classloader.PluginClassLoader: void initialiseInnerJar(java.util.jar.JarFile,java.util.jar.JarEntry)> ==> <java.lang.Throwable: void addSuppressed(java.lang.Throwable)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.classloader.PluginClassLoader: void addEntryUrl(java.util.jar.JarEntry,java.io.File)>(r1, r4) in <com.atlassian.plugin.classloader.PluginClassLoader: void addEntryMapping(java.util.jar.JarEntry,java.io.File,boolean)> ==> <com.atlassian.plugin.classloader.PluginClassLoader: void addEntryUrl(java.util.jar.JarEntry,java.io.File)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.classloader.PluginClassLoader: void addEntryUrl(java.util.jar.JarEntry,java.io.File)>(r1, r4) in <com.atlassian.plugin.classloader.PluginClassLoader: void addEntryMapping(java.util.jar.JarEntry,java.io.File,boolean)> ==> <com.atlassian.plugin.classloader.PluginClassLoader: void addEntryUrl(java.util.jar.JarEntry,java.io.File)>
VIRTUAL edge: $r3 = virtualinvoke r1.<java.util.jar.JarEntry: java.lang.String getName()>() in <com.atlassian.plugin.classloader.PluginClassLoader: void addEntryMapping(java.util.jar.JarEntry,java.io.File,boolean)> ==> <java.util.jar.JarEntry: java.lang.String getName()>
INTERFACE edge: $z1 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r3) in <com.atlassian.plugin.classloader.PluginClassLoader: void addEntryMapping(java.util.jar.JarEntry,java.io.File,boolean)> ==> <java.util.HashMap: boolean containsKey(java.lang.Object)>
INTERFACE edge: $z1 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r3) in <com.atlassian.plugin.classloader.PluginClassLoader: void addEntryMapping(java.util.jar.JarEntry,java.io.File,boolean)> ==> <java.util.Hashtable: boolean containsKey(java.lang.Object)>
INTERFACE edge: $z1 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r3) in <com.atlassian.plugin.classloader.PluginClassLoader: void addEntryMapping(java.util.jar.JarEntry,java.io.File,boolean)> ==> <java.util.TreeMap: boolean containsKey(java.lang.Object)>
INTERFACE edge: $z1 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r3) in <com.atlassian.plugin.classloader.PluginClassLoader: void addEntryMapping(java.util.jar.JarEntry,java.io.File,boolean)> ==> <java.util.jar.Attributes: boolean containsKey(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<com.google.common.cache.CacheLoader: void <init>()>() in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor$ByModuleDescriptorClassCacheLoader: void <init>(com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor)> ==> <com.google.common.cache.CacheLoader: void <init>()>
SPECIAL edge: specialinvoke r0.<com.google.common.cache.CacheLoader: void <init>()>() in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor$ByModuleClassCacheLoader: void <init>(com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor)> ==> <com.google.common.cache.CacheLoader: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.util.HashSet: void <init>()>() in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.util.Set getAllRequiredPermissions()> ==> <java.util.HashSet: void <init>()>
INTERFACE edge: interfaceinvoke $r0.<java.util.Set: boolean addAll(java.util.Collection)>($r4) in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.util.Set getAllRequiredPermissions()> ==> <java.util.AbstractCollection: boolean addAll(java.util.Collection)>
INTERFACE edge: interfaceinvoke $r0.<java.util.Set: boolean addAll(java.util.Collection)>($r5) in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.util.Set getAllRequiredPermissions()> ==> <java.util.AbstractCollection: boolean addAll(java.util.Collection)>
VIRTUAL edge: $r3 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>() in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.util.Set getAllRequiredPermissions()> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r5 = virtualinvoke r2.<com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.util.Set getRequiredPermissions()>() in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.util.Set getAllRequiredPermissions()> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.util.Set getRequiredPermissions()>
CLINIT edge: $r0 = staticinvoke <java.util.Collections: java.util.Set emptySet()>() in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.util.Set getRequiredPermissions()> ==> <java.util.Collections: void <clinit>()>
STATIC edge: $r0 = staticinvoke <java.util.Collections: java.util.Set emptySet()>() in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.util.Set getRequiredPermissions()> ==> <java.util.Collections: java.util.Set emptySet()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.tracker.DefaultPluginModuleTracker$NoOpPluginModuleTrackerCustomizer: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.tracker.DefaultPluginModuleTracker$ModuleTransformer: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultSafeModeManager$1: void <init>(com.atlassian.plugin.manager.DefaultSafeModeManager)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke $r2.<com.atlassian.plugin.metadata.PluginMetadataManager: boolean isSystemProvided(com.atlassian.plugin.Plugin)>(r1) in <com.atlassian.plugin.manager.DefaultSafeModeManager: boolean isSystemPlugin(com.atlassian.plugin.Plugin,java.lang.Iterable)> ==> <com.atlassian.plugin.metadata.DefaultPluginMetadataManager: boolean isSystemProvided(com.atlassian.plugin.Plugin)>
INTERFACE edge: $z1 = interfaceinvoke $r3.<com.atlassian.plugin.metadata.PluginMetadataManager: boolean isOptional(com.atlassian.plugin.Plugin)>(r1) in <com.atlassian.plugin.manager.DefaultSafeModeManager: boolean isSystemPlugin(com.atlassian.plugin.Plugin,java.lang.Iterable)> ==> <com.atlassian.plugin.metadata.DefaultPluginMetadataManager: boolean isOptional(com.atlassian.plugin.Plugin)>
INTERFACE edge: $r6 = interfaceinvoke $r5.<com.atlassian.plugin.manager.ApplicationDefinedPluginsProvider: java.util.Set getPluginKeys(java.lang.Iterable)>(r4) in <com.atlassian.plugin.manager.DefaultSafeModeManager: boolean isSystemPlugin(com.atlassian.plugin.Plugin,java.lang.Iterable)> ==> <com.atlassian.plugin.manager.ApplicationDefinedPluginsProvider$lambda_static_0__16: java.util.Set getPluginKeys(java.lang.Iterable)>
INTERFACE edge: $r7 = interfaceinvoke r1.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultSafeModeManager: boolean isSystemPlugin(com.atlassian.plugin.Plugin,java.lang.Iterable)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.lang.String getKey()>
INTERFACE edge: $r7 = interfaceinvoke r1.<com.atlassian.plugin.Plugin: java.lang.String getKey()>() in <com.atlassian.plugin.manager.DefaultSafeModeManager: boolean isSystemPlugin(com.atlassian.plugin.Plugin,java.lang.Iterable)> ==> <com.atlassian.plugin.Plugin: java.lang.String getKey()>
INTERFACE edge: $z2 = interfaceinvoke $r6.<java.util.Set: boolean contains(java.lang.Object)>($r7) in <com.atlassian.plugin.manager.DefaultSafeModeManager: boolean isSystemPlugin(com.atlassian.plugin.Plugin,java.lang.Iterable)> ==> <java.util.HashSet: boolean contains(java.lang.Object)>
INTERFACE edge: $z2 = interfaceinvoke $r6.<java.util.Set: boolean contains(java.lang.Object)>($r7) in <com.atlassian.plugin.manager.DefaultSafeModeManager: boolean isSystemPlugin(com.atlassian.plugin.Plugin,java.lang.Iterable)> ==> <java.util.concurrent.CopyOnWriteArraySet: boolean contains(java.lang.Object)>
INTERFACE edge: $z2 = interfaceinvoke $r6.<java.util.Set: boolean contains(java.lang.Object)>($r7) in <com.atlassian.plugin.manager.DefaultSafeModeManager: boolean isSystemPlugin(com.atlassian.plugin.Plugin,java.lang.Iterable)> ==> <java.util.TreeSet: boolean contains(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.loaders.classloading.ForwardingScanner: void <init>(com.atlassian.plugin.loaders.classloading.Scanner)>(r1) in <com.atlassian.plugin.loaders.BundledPluginLoader$NonRemovingScanner: void <init>(com.atlassian.plugin.loaders.classloading.Scanner)> ==> <com.atlassian.plugin.loaders.classloading.ForwardingScanner: void <init>(com.atlassian.plugin.loaders.classloading.Scanner)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader$CheckPluginPermissionFunction: void <init>(com.atlassian.plugin.loaders.PermissionCheckingPluginLoader)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $r1 = interfaceinvoke r0.<com.atlassian.plugin.Plugin: java.util.Collection getModuleDescriptors()>() in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader$CheckPluginPermissionFunction: boolean hasSystemModules(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.impl.AbstractPlugin: java.util.Collection getModuleDescriptors()>
INTERFACE edge: r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader$CheckPluginPermissionFunction: boolean hasSystemModules(com.atlassian.plugin.Plugin)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader$CheckPluginPermissionFunction: boolean hasSystemModules(com.atlassian.plugin.Plugin)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader$CheckPluginPermissionFunction: boolean hasSystemModules(com.atlassian.plugin.Plugin)> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader$CheckPluginPermissionFunction: boolean hasSystemModules(com.atlassian.plugin.Plugin)> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader$CheckPluginPermissionFunction: boolean hasSystemModules(com.atlassian.plugin.Plugin)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader$CheckPluginPermissionFunction: boolean hasSystemModules(com.atlassian.plugin.Plugin)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z1 = interfaceinvoke r4.<com.atlassian.plugin.ModuleDescriptor: boolean isSystemModule()>() in <com.atlassian.plugin.loaders.PermissionCheckingPluginLoader$CheckPluginPermissionFunction: boolean hasSystemModules(com.atlassian.plugin.Plugin)> ==> <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: boolean isSystemModule()>
VIRTUAL edge: $r8 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() in <com.atlassian.plugin.loaders.SinglePluginLoader: java.io.InputStream getSource()> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.net.URL: java.net.URLConnection openConnection()>() in <com.atlassian.plugin.loaders.SinglePluginLoader: java.io.InputStream getSource()> ==> <java.net.URL: java.net.URLConnection openConnection()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.net.URLConnection: java.io.InputStream getInputStream()>() in <com.atlassian.plugin.loaders.SinglePluginLoader: java.io.InputStream getSource()> ==> <com.atlassian.plugin.classloader.url.BytesUrlConnection: java.io.InputStream getInputStream()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.net.URLConnection: java.io.InputStream getInputStream()>() in <com.atlassian.plugin.loaders.SinglePluginLoader: java.io.InputStream getSource()> ==> <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarUrlConnection: java.io.InputStream getInputStream()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.net.URLConnection: java.io.InputStream getInputStream()>() in <com.atlassian.plugin.loaders.SinglePluginLoader: java.io.InputStream getSource()> ==> <com.atlassian.plugin.url.InnerJarURLConnection: java.io.InputStream getInputStream()>
SPECIAL edge: specialinvoke $r13.<com.atlassian.plugin.PluginParseException: void <init>(java.lang.Throwable)>($r10) in <com.atlassian.plugin.loaders.SinglePluginLoader: java.io.InputStream getSource()> ==> <com.atlassian.plugin.PluginParseException: void <init>(java.lang.Throwable)>
SPECIAL edge: specialinvoke $r14.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No defined method for getting an input stream.") in <com.atlassian.plugin.loaders.SinglePluginLoader: java.io.InputStream getSource()> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<com.atlassian.plugin.impl.StaticPlugin: void <init>()>() in <com.atlassian.plugin.loaders.SinglePluginLoader: com.atlassian.plugin.impl.StaticPlugin getNewPlugin()> ==> <com.atlassian.plugin.impl.StaticPlugin: void <init>()>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.util.ModuleRestricts$ModuleRestrict: void <init>(java.lang.String,com.atlassian.plugin.InstallationMode,com.atlassian.plugin.util.VersionRange)>(r1, r2, $r3) in <com.atlassian.plugin.util.ModuleRestricts$ModuleRestrict: void <init>(java.lang.String,com.atlassian.plugin.InstallationMode)> ==> <com.atlassian.plugin.util.ModuleRestricts$ModuleRestrict: void <init>(java.lang.String,com.atlassian.plugin.InstallationMode,com.atlassian.plugin.util.VersionRange)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode: void <init>(java.lang.String,int)>(r1, i0) in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode: void <init>(java.lang.String,int,com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$1)> ==> <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r21.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.util.validation.ValidationPattern$RuleTest: void evaluate(org.dom4j.Node,java.util.List)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22) in <com.atlassian.plugin.util.validation.ValidationPattern$RuleTest: void evaluate(org.dom4j.Node,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ") in <com.atlassian.plugin.util.validation.ValidationPattern$RuleTest: void evaluate(org.dom4j.Node,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25) in <com.atlassian.plugin.util.validation.ValidationPattern$RuleTest: void evaluate(org.dom4j.Node,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.util.validation.ValidationPattern$RuleTest: void evaluate(org.dom4j.Node,java.util.List)> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>($r27) in <com.atlassian.plugin.util.validation.ValidationPattern$RuleTest: void evaluate(org.dom4j.Node,java.util.List)> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>($r27) in <com.atlassian.plugin.util.validation.ValidationPattern$RuleTest: void evaluate(org.dom4j.Node,java.util.List)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>($r20) in <com.atlassian.plugin.util.validation.ValidationPattern$RuleTest: void evaluate(org.dom4j.Node,java.util.List)> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>($r20) in <com.atlassian.plugin.util.validation.ValidationPattern$RuleTest: void evaluate(org.dom4j.Node,java.util.List)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>($r12) in <com.atlassian.plugin.util.validation.ValidationPattern$RuleTest: void evaluate(org.dom4j.Node,java.util.List)> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>($r12) in <com.atlassian.plugin.util.validation.ValidationPattern$RuleTest: void evaluate(org.dom4j.Node,java.util.List)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: $z4 = virtualinvoke $r13.<java.lang.Boolean: boolean booleanValue()>() in <com.atlassian.plugin.util.validation.ValidationPattern$RuleTest: void evaluate(org.dom4j.Node,java.util.List)> ==> <java.lang.Boolean: boolean booleanValue()>
SPECIAL edge: specialinvoke $r14.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.util.validation.ValidationPattern$RuleTest: void evaluate(org.dom4j.Node,java.util.List)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15) in <com.atlassian.plugin.util.validation.ValidationPattern$RuleTest: void evaluate(org.dom4j.Node,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ") in <com.atlassian.plugin.util.validation.ValidationPattern$RuleTest: void evaluate(org.dom4j.Node,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) in <com.atlassian.plugin.util.validation.ValidationPattern$RuleTest: void evaluate(org.dom4j.Node,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.util.validation.ValidationPattern$RuleTest: void evaluate(org.dom4j.Node,java.util.List)> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: $z2 = interfaceinvoke $r4.<java.util.List: boolean isEmpty()>() in <com.atlassian.plugin.util.validation.ValidationPattern$RuleTest: void evaluate(org.dom4j.Node,java.util.List)> ==> <java.util.AbstractCollection: boolean isEmpty()>
INTERFACE edge: $z2 = interfaceinvoke $r4.<java.util.List: boolean isEmpty()>() in <com.atlassian.plugin.util.validation.ValidationPattern$RuleTest: void evaluate(org.dom4j.Node,java.util.List)> ==> <java.util.ArrayList: boolean isEmpty()>
SPECIAL edge: specialinvoke $r6.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.util.validation.ValidationPattern$RuleTest: void evaluate(org.dom4j.Node,java.util.List)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) in <com.atlassian.plugin.util.validation.ValidationPattern$RuleTest: void evaluate(org.dom4j.Node,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ") in <com.atlassian.plugin.util.validation.ValidationPattern$RuleTest: void evaluate(org.dom4j.Node,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10) in <com.atlassian.plugin.util.validation.ValidationPattern$RuleTest: void evaluate(org.dom4j.Node,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.util.validation.ValidationPattern$RuleTest: void evaluate(org.dom4j.Node,java.util.List)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.manager.StateTracker$State: void <init>(java.lang.String,int)>(r1, i0) in <com.atlassian.plugin.manager.StateTracker$State: void <init>(java.lang.String,int,com.atlassian.plugin.manager.StateTracker$1)> ==> <com.atlassian.plugin.manager.StateTracker$State: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Enum: void <init>(java.lang.String,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: void <init>(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: void finalize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$InstrumentRegistryProxy: void <init>(com.atlassian.plugin.instrumentation.PluginSystemInstrumentation)>(r1) in <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$InstrumentRegistryProxy: void <init>(com.atlassian.plugin.instrumentation.PluginSystemInstrumentation,com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$1)> ==> <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$InstrumentRegistryProxy: void <init>(com.atlassian.plugin.instrumentation.PluginSystemInstrumentation)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$MatchType: void <init>(java.lang.String,int)>(r1, i0) in <com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$MatchType: void <init>(java.lang.String,int,com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$1)> ==> <com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$MatchType: void <init>(java.lang.String,int)>
INTERFACE edge: $r5 = interfaceinvoke $r3.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r4) in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: java.util.List getModuleDescriptors(java.util.Collection,java.util.function.Predicate)> ==> <java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>
INTERFACE edge: $r7 = interfaceinvoke $r5.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>(r6) in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: java.util.List getModuleDescriptors(java.util.Collection,java.util.function.Predicate)> ==> <java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>
INTERFACE edge: $r9 = interfaceinvoke $r7.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r8) in <com.atlassian.plugin.manager.EnabledModuleCachingPluginAccessor: java.util.List getModuleDescriptors(java.util.Collection,java.util.function.Predicate)> ==> <java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.util.ModuleRestricts$IsNotBlankPredicate: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.Class getModuleReturnClass()> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r10 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.Class getModuleReturnClass()> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r3 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getModule", $r2) in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.Class getModuleReturnClass()> ==> <java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Class getReturnType()>() in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.Class getModuleReturnClass()> ==> <java.lang.reflect.Method: java.lang.Class getReturnType()>
SPECIAL edge: specialinvoke $r8.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.Class getModuleReturnClass()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The getModule() method is missing (!) on ") in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.Class getModuleReturnClass()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10) in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.Class getModuleReturnClass()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.Class getModuleReturnClass()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r12) in <com.atlassian.plugin.descriptors.AbstractModuleDescriptor: java.lang.Class getModuleReturnClass()> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.util.VersionRange: void <init>()>() in <com.atlassian.plugin.util.VersionRange: void <init>(com.atlassian.plugin.util.VersionRange$1)> ==> <com.atlassian.plugin.util.VersionRange: void <init>()>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.util.VersionRange$ActualVersionRange: void <init>(boolean,java.lang.String,boolean,java.lang.String)>(z0, r1, z1, r2) in <com.atlassian.plugin.util.VersionRange$ActualVersionRange: void <init>(boolean,java.lang.String,boolean,java.lang.String,com.atlassian.plugin.util.VersionRange$1)> ==> <com.atlassian.plugin.util.VersionRange$ActualVersionRange: void <init>(boolean,java.lang.String,boolean,java.lang.String)>
STATIC edge: $r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1) in <com.atlassian.plugin.util.VersionRange$ActualVersionRange: void <init>(boolean,java.lang.String,boolean,java.lang.String)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
STATIC edge: $r5 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r4) in <com.atlassian.plugin.util.VersionRange$ActualVersionRange: void <init>(boolean,java.lang.String,boolean,java.lang.String)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.util.VersionRange$LeftUnboundedVersionRange: void <init>(boolean,java.lang.String)>(z0, r1) in <com.atlassian.plugin.util.VersionRange$LeftUnboundedVersionRange: void <init>(boolean,java.lang.String,com.atlassian.plugin.util.VersionRange$1)> ==> <com.atlassian.plugin.util.VersionRange$LeftUnboundedVersionRange: void <init>(boolean,java.lang.String)>
STATIC edge: $r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1) in <com.atlassian.plugin.util.VersionRange$LeftUnboundedVersionRange: void <init>(boolean,java.lang.String)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.parsers.PluginInformationReader$ElementWithForApplicationsPredicate: void <init>(java.util.Set)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DependentPlugins$DependencyQueue: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.ArrayDeque: void <init>()>() in <com.atlassian.plugin.manager.DependentPlugins$DependencyQueue: void <init>()> ==> <java.util.ArrayDeque: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.DefaultPluginManager$1: void <init>(com.atlassian.plugin.manager.DefaultPluginManager,java.util.Map,java.util.function.Predicate)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.manager.PluginEnabler$1: void <init>(com.atlassian.plugin.manager.PluginEnabler,java.util.Set)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.manager.StateTracker$State: void illegalState(com.atlassian.plugin.manager.StateTracker$State)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot go from State: ") in <com.atlassian.plugin.manager.StateTracker$State: void illegalState(com.atlassian.plugin.manager.StateTracker$State)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3) in <com.atlassian.plugin.manager.StateTracker$State: void illegalState(com.atlassian.plugin.manager.StateTracker$State)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to: ") in <com.atlassian.plugin.manager.StateTracker$State: void illegalState(com.atlassian.plugin.manager.StateTracker$State)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6) in <com.atlassian.plugin.manager.StateTracker$State: void illegalState(com.atlassian.plugin.manager.StateTracker$State)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.manager.StateTracker$State: void illegalState(com.atlassian.plugin.manager.StateTracker$State)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r8) in <com.atlassian.plugin.manager.StateTracker$State: void illegalState(com.atlassian.plugin.manager.StateTracker$State)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.util.ArrayList: void <init>()>() in <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: java.util.Collection getInputStreamsForFilename(java.lang.String)> ==> <java.util.ArrayList: void <init>()>
INTERFACE edge: interfaceinvoke $r0.<java.util.Collection: boolean add(java.lang.Object)>($r16) in <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: java.util.Collection getInputStreamsForFilename(java.lang.String)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: r18 = interfaceinvoke $r0.<java.util.Collection: java.util.Iterator iterator()>() in <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: java.util.Collection getInputStreamsForFilename(java.lang.String)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: java.util.Collection getInputStreamsForFilename(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) in <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: java.util.Collection getInputStreamsForFilename(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke r2.<java.lang.Class: java.lang.Package getPackage()>() in <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: java.util.Collection getInputStreamsForFilename(java.lang.String)> ==> <java.lang.Class: java.lang.Package getPackage()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.Package: java.lang.String getName()>() in <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: java.util.Collection getInputStreamsForFilename(java.lang.String)> ==> <java.lang.Package: java.lang.String getName()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(".", "/") in <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: java.util.Collection getInputStreamsForFilename(java.lang.String)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/") in <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: java.util.Collection getInputStreamsForFilename(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9) in <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: java.util.Collection getInputStreamsForFilename(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: java.util.Collection getInputStreamsForFilename(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r22 = virtualinvoke $r13.<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>(r11) in <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: java.util.Collection getInputStreamsForFilename(java.lang.String)> ==> <java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>
VIRTUAL edge: r22 = virtualinvoke $r13.<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>(r11) in <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: java.util.Collection getInputStreamsForFilename(java.lang.String)> ==> <com.atlassian.plugin.util.ChainingClassLoader: java.util.Enumeration getResources(java.lang.String)>
VIRTUAL edge: r22 = virtualinvoke $r13.<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>(r11) in <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: java.util.Collection getInputStreamsForFilename(java.lang.String)> ==> <com.atlassian.plugin.classloader.DelegationClassLoader: java.util.Enumeration getResources(java.lang.String)>
INTERFACE edge: $z0 = interfaceinvoke r22.<java.util.Enumeration: boolean hasMoreElements()>() in <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: java.util.Collection getInputStreamsForFilename(java.lang.String)> ==> <java.util.StringTokenizer: boolean hasMoreElements()>
INTERFACE edge: $z0 = interfaceinvoke r22.<java.util.Enumeration: boolean hasMoreElements()>() in <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: java.util.Collection getInputStreamsForFilename(java.lang.String)> ==> <com.atlassian.plugin.util.ChainingClassLoader$ResourcesEnumeration: boolean hasMoreElements()>
INTERFACE edge: $r14 = interfaceinvoke r22.<java.util.Enumeration: java.lang.Object nextElement()>() in <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: java.util.Collection getInputStreamsForFilename(java.lang.String)> ==> <java.util.StringTokenizer: java.lang.Object nextElement()>
INTERFACE edge: $r14 = interfaceinvoke r22.<java.util.Enumeration: java.lang.Object nextElement()>() in <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: java.util.Collection getInputStreamsForFilename(java.lang.String)> ==> <com.atlassian.plugin.util.ChainingClassLoader$ResourcesEnumeration: java.lang.Object nextElement()>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.net.URL: java.io.InputStream openStream()>() in <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: java.util.Collection getInputStreamsForFilename(java.lang.String)> ==> <java.net.URL: java.io.InputStream openStream()>
SPECIAL edge: specialinvoke $r19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r17) in <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: java.util.Collection getInputStreamsForFilename(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
VIRTUAL edge: r1 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>() in <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: java.lang.String processedLine(java.lang.String)> ==> <java.lang.String: java.lang.String trim()>
VIRTUAL edge: $z1 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("#") in <com.atlassian.plugin.metadata.ClasspathFilePluginMetadata: java.lang.String processedLine(java.lang.String)> ==> <java.lang.String: boolean startsWith(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>() in <com.atlassian.plugin.event.impl.MethodSelectorListenerHandler: boolean hasOneAndOnlyOneParameter(java.lang.reflect.Method)> ==> <java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>
VIRTUAL edge: $r3 = virtualinvoke r1.<java.util.jar.JarEntry: java.lang.String getName()>() in <com.atlassian.plugin.classloader.PluginClassLoader: void addEntryUrl(java.util.jar.JarEntry,java.io.File)> ==> <java.util.jar.JarEntry: java.lang.String getName()>
VIRTUAL edge: $r4 = virtualinvoke r1.<java.util.jar.JarEntry: java.lang.String getName()>() in <com.atlassian.plugin.classloader.PluginClassLoader: void addEntryUrl(java.util.jar.JarEntry,java.io.File)> ==> <java.util.jar.JarEntry: java.lang.String getName()>
SPECIAL edge: $r6 = specialinvoke r0.<com.atlassian.plugin.classloader.PluginClassLoader: java.net.URL getUrlOfResourceInJar(java.lang.String,java.io.File)>($r4, r5) in <com.atlassian.plugin.classloader.PluginClassLoader: void addEntryUrl(java.util.jar.JarEntry,java.io.File)> ==> <com.atlassian.plugin.classloader.PluginClassLoader: java.net.URL getUrlOfResourceInJar(java.lang.String,java.io.File)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r6) in <com.atlassian.plugin.classloader.PluginClassLoader: void addEntryUrl(java.util.jar.JarEntry,java.io.File)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r6) in <com.atlassian.plugin.classloader.PluginClassLoader: void addEntryUrl(java.util.jar.JarEntry,java.io.File)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r6) in <com.atlassian.plugin.classloader.PluginClassLoader: void addEntryUrl(java.util.jar.JarEntry,java.io.File)> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r6) in <com.atlassian.plugin.classloader.PluginClassLoader: void addEntryUrl(java.util.jar.JarEntry,java.io.File)> ==> <java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>
CLINIT edge: $r10 = staticinvoke <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarHandler: org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarHandler getInstance()>() in <com.atlassian.plugin.classloader.PluginClassLoader: java.net.URL getUrlOfResourceInJar(java.lang.String,java.io.File)> ==> <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarHandler: void <clinit>()>
STATIC edge: $r10 = staticinvoke <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarHandler: org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarHandler getInstance()>() in <com.atlassian.plugin.classloader.PluginClassLoader: java.net.URL getUrlOfResourceInJar(java.lang.String,java.io.File)> ==> <org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarHandler: org.codehaus.classworlds.uberjar.protocol.jar.NonLockingJarHandler getInstance()>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0) in <com.atlassian.plugin.manager.store.SynchronizedPluginPersistentStateStore$LockMode: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$InstrumentRegistryProxy: void <init>(com.atlassian.plugin.instrumentation.PluginSystemInstrumentation)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r5.<com.atlassian.instrumentation.operations.SimpleOpTimerFactory: void <init>()>() in <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$InstrumentRegistryProxy: void <init>(com.atlassian.plugin.instrumentation.PluginSystemInstrumentation)> ==> <com.atlassian.instrumentation.operations.SimpleOpTimerFactory: void <init>()>
SPECIAL edge: specialinvoke $r6.<com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$InstrumentRegistryProxy$1: void <init>(com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$InstrumentRegistryProxy)>(r0) in <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$InstrumentRegistryProxy: void <init>(com.atlassian.plugin.instrumentation.PluginSystemInstrumentation)> ==> <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$InstrumentRegistryProxy$1: void <init>(com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$InstrumentRegistryProxy)>
SPECIAL edge: specialinvoke $r7.<com.atlassian.instrumentation.DefaultInstrumentRegistry: void <init>(com.atlassian.instrumentation.operations.OpTimerFactory,com.atlassian.instrumentation.RegistryConfiguration)>($r8, $r6) in <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$InstrumentRegistryProxy: void <init>(com.atlassian.plugin.instrumentation.PluginSystemInstrumentation)> ==> <com.atlassian.instrumentation.DefaultInstrumentRegistry: void <init>(com.atlassian.instrumentation.operations.OpTimerFactory,com.atlassian.instrumentation.RegistryConfiguration)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0) in <com.atlassian.plugin.predicate.PluginKeyPatternsPredicate$MatchType: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.util.VersionRange: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.util.VersionRange: void <init>(com.atlassian.plugin.util.VersionRange$1)>(null) in <com.atlassian.plugin.util.VersionRange$ActualVersionRange: void <init>(boolean,java.lang.String,boolean,java.lang.String)> ==> <com.atlassian.plugin.util.VersionRange: void <init>(com.atlassian.plugin.util.VersionRange$1)>
SPECIAL edge: specialinvoke r0.<com.atlassian.plugin.util.VersionRange: void <init>(com.atlassian.plugin.util.VersionRange$1)>(null) in <com.atlassian.plugin.util.VersionRange$LeftUnboundedVersionRange: void <init>(boolean,java.lang.String)> ==> <com.atlassian.plugin.util.VersionRange: void <init>(com.atlassian.plugin.util.VersionRange$1)>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() in <com.atlassian.plugin.classloader.PluginClassLoader: java.net.URL getUrlOfResourceInJar(java.lang.String,java.io.File)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("jar:file:") in <com.atlassian.plugin.classloader.PluginClassLoader: java.net.URL getUrlOfResourceInJar(java.lang.String,java.io.File)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.io.File: java.lang.String getAbsolutePath()>() in <com.atlassian.plugin.classloader.PluginClassLoader: java.net.URL getUrlOfResourceInJar(java.lang.String,java.io.File)> ==> <java.io.File: java.lang.String getAbsolutePath()>
VIRTUAL edge: $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5) in <com.atlassian.plugin.classloader.PluginClassLoader: java.net.URL getUrlOfResourceInJar(java.lang.String,java.io.File)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!/") in <com.atlassian.plugin.classloader.PluginClassLoader: java.net.URL getUrlOfResourceInJar(java.lang.String,java.io.File)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() in <com.atlassian.plugin.classloader.PluginClassLoader: java.net.URL getUrlOfResourceInJar(java.lang.String,java.io.File)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r1.<java.net.URL: void <init>(java.lang.String)>($r8) in <com.atlassian.plugin.classloader.PluginClassLoader: java.net.URL getUrlOfResourceInJar(java.lang.String,java.io.File)> ==> <java.net.URL: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>($r1, r9, $r10) in <com.atlassian.plugin.classloader.PluginClassLoader: java.net.URL getUrlOfResourceInJar(java.lang.String,java.io.File)> ==> <java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>
SPECIAL edge: specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r11) in <com.atlassian.plugin.classloader.PluginClassLoader: java.net.URL getUrlOfResourceInJar(java.lang.String,java.io.File)> ==> <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$InstrumentRegistryProxy$1: void <init>(com.atlassian.plugin.instrumentation.PluginSystemInstrumentation$InstrumentRegistryProxy)> ==> <java.lang.Object: void <init>()>
