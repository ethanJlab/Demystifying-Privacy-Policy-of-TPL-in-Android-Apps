FINALIZE edge: null in <java.lang.Object: void <init>()> ==> <java.lang.Object: void finalize()>
STATIC edge: staticinvoke <com.github.houbb.heaven.util.common.ArgUtil: void notNull(java.lang.Object,java.lang.String)>(r0, "segmentData") in <com.github.houbb.segment.bs.SegmentBs: com.github.houbb.segment.bs.SegmentBs segmentData(com.github.houbb.segment.support.data.ISegmentData)> ==> <com.github.houbb.heaven.util.common.ArgUtil: void notNull(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <com.github.houbb.heaven.util.common.ArgUtil: void notNull(java.lang.Object,java.lang.String)>(r0, "segmentMode") in <com.github.houbb.segment.bs.SegmentBs: com.github.houbb.segment.bs.SegmentBs segmentMode(com.github.houbb.segment.support.segment.mode.ISegmentMode)> ==> <com.github.houbb.heaven.util.common.ArgUtil: void notNull(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <com.github.houbb.heaven.util.common.ArgUtil: void notNull(java.lang.Object,java.lang.String)>(r0, "segmentFormat") in <com.github.houbb.segment.bs.SegmentBs: com.github.houbb.segment.bs.SegmentBs segmentFormat(com.github.houbb.segment.support.format.ISegmentFormat)> ==> <com.github.houbb.heaven.util.common.ArgUtil: void notNull(java.lang.Object,java.lang.String)>
STATIC edge: $r2 = staticinvoke <com.github.houbb.segment.support.segment.result.impl.SegmentResultHandlers: com.github.houbb.segment.support.segment.result.ISegmentResultHandler common()>() in <com.github.houbb.segment.bs.SegmentBs: java.util.List segment(java.lang.String)> ==> <com.github.houbb.segment.support.segment.result.impl.SegmentResultHandlers: com.github.houbb.segment.support.segment.result.ISegmentResultHandler common()>
STATIC edge: $r0 = staticinvoke <com.github.houbb.heaven.support.instance.impl.Instances: java.lang.Object singleton(java.lang.Class)>(class "Lcom/github/houbb/segment/support/tagging/pos/data/impl/SegmentPosDataSystem;") in <com.github.houbb.segment.support.tagging.pos.data.impl.SegmentPosDatas: com.github.houbb.segment.support.tagging.pos.data.ISegmentPosData system()> ==> <com.github.houbb.heaven.support.instance.impl.Instances: java.lang.Object singleton(java.lang.Class)>
STATIC edge: $r0 = staticinvoke <com.github.houbb.heaven.support.instance.impl.Instances: java.lang.Object singleton(java.lang.Class)>(class "Lcom/github/houbb/segment/support/tagging/pos/data/impl/SegmentPosDataDefine;") in <com.github.houbb.segment.support.tagging.pos.data.impl.SegmentPosDatas: com.github.houbb.segment.support.tagging.pos.data.ISegmentPosData define()> ==> <com.github.houbb.heaven.support.instance.impl.Instances: java.lang.Object singleton(java.lang.Class)>
STATIC edge: $r0 = staticinvoke <com.github.houbb.heaven.support.instance.impl.Instances: java.lang.Object singleton(java.lang.Class)>(class "Lcom/github/houbb/segment/support/tagging/pos/data/impl/SegmentPosDataMixed;") in <com.github.houbb.segment.support.tagging.pos.data.impl.SegmentPosDatas: com.github.houbb.segment.support.tagging.pos.data.ISegmentPosData mixed()> ==> <com.github.houbb.heaven.support.instance.impl.Instances: java.lang.Object singleton(java.lang.Class)>
STATIC edge: $r0 = staticinvoke <com.github.houbb.heaven.support.instance.impl.Instances: java.lang.Object singleton(java.lang.Class)>(class "Lcom/github/houbb/segment/support/segment/mode/impl/precise/SearchSegmentMode;") in <com.github.houbb.segment.support.segment.mode.impl.SegmentModes: com.github.houbb.segment.support.segment.mode.ISegmentMode search()> ==> <com.github.houbb.heaven.support.instance.impl.Instances: java.lang.Object singleton(java.lang.Class)>
STATIC edge: $r0 = staticinvoke <com.github.houbb.heaven.support.instance.impl.Instances: java.lang.Object singleton(java.lang.Class)>(class "Lcom/github/houbb/segment/support/segment/mode/impl/IndexSegmentMode;") in <com.github.houbb.segment.support.segment.mode.impl.SegmentModes: com.github.houbb.segment.support.segment.mode.ISegmentMode index()> ==> <com.github.houbb.heaven.support.instance.impl.Instances: java.lang.Object singleton(java.lang.Class)>
STATIC edge: $r0 = staticinvoke <com.github.houbb.heaven.support.instance.impl.Instances: java.lang.Object singleton(java.lang.Class)>(class "Lcom/github/houbb/segment/support/segment/mode/impl/GreedyLengthSegmentMode;") in <com.github.houbb.segment.support.segment.mode.impl.SegmentModes: com.github.houbb.segment.support.segment.mode.ISegmentMode greedyLength()> ==> <com.github.houbb.heaven.support.instance.impl.Instances: java.lang.Object singleton(java.lang.Class)>
STATIC edge: $r0 = staticinvoke <com.github.houbb.heaven.support.instance.impl.Instances: java.lang.Object singleton(java.lang.Class)>(class "Lcom/github/houbb/segment/support/segment/mode/impl/precise/DictSegmentMode;") in <com.github.houbb.segment.support.segment.mode.impl.SegmentModes: com.github.houbb.segment.support.segment.mode.ISegmentMode dict()> ==> <com.github.houbb.heaven.support.instance.impl.Instances: java.lang.Object singleton(java.lang.Class)>
STATIC edge: $r0 = staticinvoke <com.github.houbb.heaven.support.instance.impl.Instances: java.lang.Object singleton(java.lang.Class)>(class "Lcom/github/houbb/segment/support/segment/mode/impl/precise/HmmSegmentMode;") in <com.github.houbb.segment.support.segment.mode.impl.SegmentModes: com.github.houbb.segment.support.segment.mode.ISegmentMode hmm()> ==> <com.github.houbb.heaven.support.instance.impl.Instances: java.lang.Object singleton(java.lang.Class)>
STATIC edge: $r0 = staticinvoke <com.github.houbb.heaven.support.instance.impl.Instances: java.lang.Object singleton(java.lang.Class)>(class "Lcom/github/houbb/segment/support/segment/mode/impl/GreedyFrequencySegmentMode;") in <com.github.houbb.segment.support.segment.mode.impl.SegmentModes: com.github.houbb.segment.support.segment.mode.ISegmentMode greedyFrequency()> ==> <com.github.houbb.heaven.support.instance.impl.Instances: java.lang.Object singleton(java.lang.Class)>
STATIC edge: $r0 = staticinvoke <com.github.houbb.heaven.support.instance.impl.Instances: java.lang.Object singleton(java.lang.Class)>(class "Lcom/github/houbb/segment/support/segment/mode/impl/SingleSegmentMode;") in <com.github.houbb.segment.support.segment.mode.impl.SegmentModes: com.github.houbb.segment.support.segment.mode.ISegmentMode single()> ==> <com.github.houbb.heaven.support.instance.impl.Instances: java.lang.Object singleton(java.lang.Class)>
STATIC edge: $r0 = staticinvoke <com.github.houbb.heaven.support.instance.impl.Instances: java.lang.Object singleton(java.lang.Class)>(class "Lcom/github/houbb/segment/support/segment/mode/impl/AllSegmentMode;") in <com.github.houbb.segment.support.segment.mode.impl.SegmentModes: com.github.houbb.segment.support.segment.mode.ISegmentMode all()> ==> <com.github.houbb.heaven.support.instance.impl.Instances: java.lang.Object singleton(java.lang.Class)>
STATIC edge: $r0 = staticinvoke <com.github.houbb.heaven.support.instance.impl.Instances: java.lang.Object singleton(java.lang.Class)>(class "Lcom/github/houbb/segment/support/segment/result/impl/SegmentResultHandler;") in <com.github.houbb.segment.support.segment.result.impl.SegmentResultHandlers: com.github.houbb.segment.support.segment.result.ISegmentResultHandler common()> ==> <com.github.houbb.heaven.support.instance.impl.Instances: java.lang.Object singleton(java.lang.Class)>
STATIC edge: $r0 = staticinvoke <com.github.houbb.heaven.support.instance.impl.Instances: java.lang.Object singleton(java.lang.Class)>(class "Lcom/github/houbb/segment/support/segment/result/impl/SegmentResultHandlerWord;") in <com.github.houbb.segment.support.segment.result.impl.SegmentResultHandlers: com.github.houbb.segment.support.segment.result.ISegmentResultHandler word()> ==> <com.github.houbb.heaven.support.instance.impl.Instances: java.lang.Object singleton(java.lang.Class)>
STATIC edge: $r0 = staticinvoke <com.github.houbb.heaven.support.instance.impl.Instances: java.lang.Object singleton(java.lang.Class)>(class "Lcom/github/houbb/segment/support/segment/result/impl/SegmentResultHandlerWordCount;") in <com.github.houbb.segment.support.segment.result.impl.SegmentResultHandlers: com.github.houbb.segment.support.segment.result.ISegmentResultHandler wordCount()> ==> <com.github.houbb.heaven.support.instance.impl.Instances: java.lang.Object singleton(java.lang.Class)>
STATIC edge: $r0 = staticinvoke <com.github.houbb.heaven.support.instance.impl.Instances: java.lang.Object singleton(java.lang.Class)>(class "Lcom/github/houbb/segment/support/segment/impl/Segment;") in <com.github.houbb.segment.support.segment.impl.Segments: com.github.houbb.segment.api.ISegment defaults()> ==> <com.github.houbb.heaven.support.instance.impl.Instances: java.lang.Object singleton(java.lang.Class)>
STATIC edge: $r0 = staticinvoke <com.github.houbb.heaven.support.instance.impl.Instances: java.lang.Object singleton(java.lang.Class)>(class "Lcom/github/houbb/segment/support/segment/impl/FastSegment;") in <com.github.houbb.segment.support.segment.impl.Segments: com.github.houbb.segment.api.ISegment fast()> ==> <com.github.houbb.heaven.support.instance.impl.Instances: java.lang.Object singleton(java.lang.Class)>
STATIC edge: $r0 = staticinvoke <com.github.houbb.heaven.support.instance.impl.Instances: java.lang.Object singleton(java.lang.Class)>(class "Lcom/github/houbb/segment/support/segment/impl/PreciseSegment;") in <com.github.houbb.segment.support.segment.impl.Segments: com.github.houbb.segment.api.ISegment precise()> ==> <com.github.houbb.heaven.support.instance.impl.Instances: java.lang.Object singleton(java.lang.Class)>
STATIC edge: $r0 = staticinvoke <com.github.houbb.heaven.support.instance.impl.Instances: java.lang.Object singleton(java.lang.Class)>(class "Lcom/github/houbb/segment/support/tagging/pos/tag/impl/NoneSegmentPosTagging;") in <com.github.houbb.segment.support.tagging.pos.tag.impl.SegmentPosTaggings: com.github.houbb.segment.support.tagging.pos.tag.ISegmentPosTagging none()> ==> <com.github.houbb.heaven.support.instance.impl.Instances: java.lang.Object singleton(java.lang.Class)>
STATIC edge: $r0 = staticinvoke <com.github.houbb.heaven.support.instance.impl.Instances: java.lang.Object singleton(java.lang.Class)>(class "Lcom/github/houbb/segment/support/tagging/pos/tag/impl/SimpleSegmentPosTagging;") in <com.github.houbb.segment.support.tagging.pos.tag.impl.SegmentPosTaggings: com.github.houbb.segment.support.tagging.pos.tag.ISegmentPosTagging simple()> ==> <com.github.houbb.heaven.support.instance.impl.Instances: java.lang.Object singleton(java.lang.Class)>
STATIC edge: $r0 = staticinvoke <com.github.houbb.heaven.support.instance.impl.Instances: java.lang.Object singleton(java.lang.Class)>(class "Lcom/github/houbb/segment/support/data/impl/SegmentSystemData;") in <com.github.houbb.segment.support.data.impl.SegmentDatas: com.github.houbb.segment.support.data.ISegmentData system()> ==> <com.github.houbb.heaven.support.instance.impl.Instances: java.lang.Object singleton(java.lang.Class)>
STATIC edge: $r0 = staticinvoke <com.github.houbb.heaven.support.instance.impl.Instances: java.lang.Object singleton(java.lang.Class)>(class "Lcom/github/houbb/segment/support/data/impl/SegmentDefineData;") in <com.github.houbb.segment.support.data.impl.SegmentDatas: com.github.houbb.segment.support.data.ISegmentData define()> ==> <com.github.houbb.heaven.support.instance.impl.Instances: java.lang.Object singleton(java.lang.Class)>
STATIC edge: $r0 = staticinvoke <com.github.houbb.heaven.support.instance.impl.Instances: java.lang.Object singleton(java.lang.Class)>(class "Lcom/github/houbb/segment/support/data/impl/SegmentMixedData;") in <com.github.houbb.segment.support.data.impl.SegmentDatas: com.github.houbb.segment.support.data.ISegmentData mixed()> ==> <com.github.houbb.heaven.support.instance.impl.Instances: java.lang.Object singleton(java.lang.Class)>
STATIC edge: $r1 = staticinvoke <com.github.houbb.segment.support.format.impl.SegmentFormats: com.github.houbb.segment.support.format.ISegmentFormat halfWidth()>() in <com.github.houbb.segment.support.format.impl.SegmentFormats: com.github.houbb.segment.support.format.ISegmentFormat defaults()> ==> <com.github.houbb.segment.support.format.impl.SegmentFormats: com.github.houbb.segment.support.format.ISegmentFormat halfWidth()>
STATIC edge: $r3 = staticinvoke <com.github.houbb.segment.support.format.impl.SegmentFormats: com.github.houbb.segment.support.format.ISegmentFormat chains(com.github.houbb.segment.support.format.ISegmentFormat[])>($r0) in <com.github.houbb.segment.support.format.impl.SegmentFormats: com.github.houbb.segment.support.format.ISegmentFormat defaults()> ==> <com.github.houbb.segment.support.format.impl.SegmentFormats: com.github.houbb.segment.support.format.ISegmentFormat chains(com.github.houbb.segment.support.format.ISegmentFormat[])>
STATIC edge: $r2 = staticinvoke <com.github.houbb.segment.support.format.impl.SegmentFormats: com.github.houbb.segment.support.format.ISegmentFormat lowerCase()>() in <com.github.houbb.segment.support.format.impl.SegmentFormats: com.github.houbb.segment.support.format.ISegmentFormat defaults()> ==> <com.github.houbb.segment.support.format.impl.SegmentFormats: com.github.houbb.segment.support.format.ISegmentFormat lowerCase()>
STATIC edge: $r0 = staticinvoke <com.github.houbb.heaven.support.instance.impl.Instances: java.lang.Object singleton(java.lang.Class)>(class "Lcom/github/houbb/segment/support/format/impl/HalfWidthSegmentFormat;") in <com.github.houbb.segment.support.format.impl.SegmentFormats: com.github.houbb.segment.support.format.ISegmentFormat halfWidth()> ==> <com.github.houbb.heaven.support.instance.impl.Instances: java.lang.Object singleton(java.lang.Class)>
STATIC edge: $r0 = staticinvoke <com.github.houbb.heaven.support.instance.impl.Instances: java.lang.Object singleton(java.lang.Class)>(class "Lcom/github/houbb/segment/support/format/impl/LowerCaseSegmentFormat;") in <com.github.houbb.segment.support.format.impl.SegmentFormats: com.github.houbb.segment.support.format.ISegmentFormat lowerCase()> ==> <com.github.houbb.heaven.support.instance.impl.Instances: java.lang.Object singleton(java.lang.Class)>
STATIC edge: $r0 = staticinvoke <com.github.houbb.heaven.support.instance.impl.Instances: java.lang.Object singleton(java.lang.Class)>(class "Lcom/github/houbb/segment/support/format/impl/ChineseTsSegmentFormat;") in <com.github.houbb.segment.support.format.impl.SegmentFormats: com.github.houbb.segment.support.format.ISegmentFormat chineseSimple()> ==> <com.github.houbb.heaven.support.instance.impl.Instances: java.lang.Object singleton(java.lang.Class)>
STATIC edge: $r0 = staticinvoke <com.github.houbb.heaven.support.instance.impl.Instances: java.lang.Object singleton(java.lang.Class)>(class "Lcom/github/houbb/segment/support/format/impl/NoneSegmentFormat;") in <com.github.houbb.segment.support.format.impl.SegmentFormats: com.github.houbb.segment.support.format.ISegmentFormat none()> ==> <com.github.houbb.heaven.support.instance.impl.Instances: java.lang.Object singleton(java.lang.Class)>
STATIC edge: $z0 = staticinvoke <com.github.houbb.heaven.util.util.ArrayUtil: boolean isEmpty(java.lang.Object[])>(r0) in <com.github.houbb.segment.support.format.impl.SegmentFormats: com.github.houbb.segment.support.format.ISegmentFormat chains(com.github.houbb.segment.support.format.ISegmentFormat[])> ==> <com.github.houbb.heaven.util.util.ArrayUtil: boolean isEmpty(java.lang.Object[])>
STATIC edge: $r2 = staticinvoke <com.github.houbb.segment.support.format.impl.SegmentFormats: com.github.houbb.segment.support.format.ISegmentFormat none()>() in <com.github.houbb.segment.support.format.impl.SegmentFormats: com.github.houbb.segment.support.format.ISegmentFormat chains(com.github.houbb.segment.support.format.ISegmentFormat[])> ==> <com.github.houbb.segment.support.format.impl.SegmentFormats: com.github.houbb.segment.support.format.ISegmentFormat none()>
CLINIT edge: $r0 = <com.github.houbb.segment.constant.enums.HmmStateEnum: com.github.houbb.segment.constant.enums.HmmStateEnum[] $VALUES> in <com.github.houbb.segment.constant.enums.HmmStateEnum: com.github.houbb.segment.constant.enums.HmmStateEnum[] values()> ==> <com.github.houbb.segment.constant.enums.HmmStateEnum: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lcom/github/houbb/segment/constant/enums/HmmStateEnum;", r0) in <com.github.houbb.segment.constant.enums.HmmStateEnum: com.github.houbb.segment.constant.enums.HmmStateEnum valueOf(java.lang.String)> ==> <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
CLINIT edge: $r0 = <com.github.houbb.segment.constant.enums.SegmentPosEnum: com.github.houbb.segment.constant.enums.SegmentPosEnum[] $VALUES> in <com.github.houbb.segment.constant.enums.SegmentPosEnum: com.github.houbb.segment.constant.enums.SegmentPosEnum[] values()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lcom/github/houbb/segment/constant/enums/SegmentPosEnum;", r0) in <com.github.houbb.segment.constant.enums.SegmentPosEnum: com.github.houbb.segment.constant.enums.SegmentPosEnum valueOf(java.lang.String)> ==> <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
CLINIT edge: r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0) in <com.github.houbb.segment.support.data.impl.AbstractSegmentData: java.lang.Double getFreq(java.lang.String)> ==> <java.lang.Double: void <clinit>()>
STATIC edge: r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0) in <com.github.houbb.segment.support.data.impl.AbstractSegmentData: java.lang.Double getFreq(java.lang.String)> ==> <java.lang.Double: java.lang.Double valueOf(double)>
STATIC edge: $z0 = staticinvoke <com.github.houbb.heaven.util.lang.ObjectUtil: boolean isNull(java.lang.Object)>(r5) in <com.github.houbb.segment.support.data.impl.AbstractSegmentData: java.lang.Double getFreq(java.lang.String)> ==> <com.github.houbb.heaven.util.lang.ObjectUtil: boolean isNull(java.lang.Object)>
CLINIT edge: $r0 = <com.github.houbb.segment.support.format.impl.ChineseTsSegmentFormat: java.util.Map TS_CHAR_MAP> in <com.github.houbb.segment.support.format.impl.ChineseTsSegmentFormat: char format(char,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.format.impl.ChineseTsSegmentFormat: void <clinit>()>
STATIC edge: $z0 = staticinvoke <com.github.houbb.heaven.util.lang.ObjectUtil: boolean isNull(java.lang.Object)>(r3) in <com.github.houbb.segment.support.format.impl.ChineseTsSegmentFormat: char format(char,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.heaven.util.lang.ObjectUtil: boolean isNull(java.lang.Object)>
STATIC edge: $r1 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c0) in <com.github.houbb.segment.support.format.impl.ChineseTsSegmentFormat: char format(char,com.github.houbb.segment.api.ISegmentContext)> ==> <java.lang.Character: java.lang.Character valueOf(char)>
CLINIT edge: $r1 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c0) in <com.github.houbb.segment.support.format.impl.ChineseTsSegmentFormat: char format(char,com.github.houbb.segment.api.ISegmentContext)> ==> <java.lang.Character: void <clinit>()>
STATIC edge: $c1 = staticinvoke <com.github.houbb.heaven.util.lang.CharUtil: char toHalfWidth(char)>(c0) in <com.github.houbb.segment.support.format.impl.HalfWidthSegmentFormat: char format(char,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.heaven.util.lang.CharUtil: char toHalfWidth(char)>
CLINIT edge: $c1 = staticinvoke <java.lang.Character: char toLowerCase(char)>(c0) in <com.github.houbb.segment.support.format.impl.LowerCaseSegmentFormat: char format(char,com.github.houbb.segment.api.ISegmentContext)> ==> <java.lang.Character: void <clinit>()>
STATIC edge: $c1 = staticinvoke <java.lang.Character: char toLowerCase(char)>(c0) in <com.github.houbb.segment.support.format.impl.LowerCaseSegmentFormat: char format(char,com.github.houbb.segment.api.ISegmentContext)> ==> <java.lang.Character: char toLowerCase(char)>
CLINIT edge: $r10 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d6) in <com.github.houbb.segment.support.normalization.impl.LogNormalization: com.github.houbb.segment.support.normalization.NormalizationResult normalization(java.util.List)> ==> <java.lang.Double: void <clinit>()>
STATIC edge: $r10 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d6) in <com.github.houbb.segment.support.normalization.impl.LogNormalization: com.github.houbb.segment.support.normalization.NormalizationResult normalization(java.util.List)> ==> <java.lang.Double: java.lang.Double valueOf(double)>
STATIC edge: $d5 = staticinvoke <java.lang.Math: double log(double)>($d4) in <com.github.houbb.segment.support.normalization.impl.LogNormalization: com.github.houbb.segment.support.normalization.NormalizationResult normalization(java.util.List)> ==> <java.lang.Math: double log(double)>
STATIC edge: $d2 = staticinvoke <java.lang.Math: double log(double)>($d1) in <com.github.houbb.segment.support.normalization.impl.LogNormalization: com.github.houbb.segment.support.normalization.NormalizationResult normalization(java.util.List)> ==> <java.lang.Math: double log(double)>
STATIC edge: r16 = staticinvoke <com.github.houbb.heaven.util.guava.Guavas: java.util.Map newHashMap(int)>($i0) in <com.github.houbb.segment.support.normalization.impl.LogNormalization: com.github.houbb.segment.support.normalization.NormalizationResult normalization(java.util.List)> ==> <com.github.houbb.heaven.util.guava.Guavas: java.util.Map newHashMap(int)>
STATIC edge: $z0 = staticinvoke <com.github.houbb.heaven.util.util.CollectionUtil: boolean isEmpty(java.util.Collection)>(r2) in <com.github.houbb.segment.support.normalization.impl.LogNormalization: com.github.houbb.segment.support.normalization.NormalizationResult normalization(java.util.List)> ==> <com.github.houbb.heaven.util.util.CollectionUtil: boolean isEmpty(java.util.Collection)>
STATIC edge: r0 = staticinvoke <com.github.houbb.heaven.util.guava.Guavas: java.util.List newArrayList()>() in <com.github.houbb.segment.support.segment.impl.FastSegment: java.util.List segment(java.lang.String,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.heaven.util.guava.Guavas: java.util.List newArrayList()>
STATIC edge: $r5 = staticinvoke <com.github.houbb.segment.support.segment.mode.SegmentModeContext: com.github.houbb.segment.support.segment.mode.SegmentModeContext newInstance()>() in <com.github.houbb.segment.support.segment.impl.FastSegment: java.util.List segment(java.lang.String,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.mode.SegmentModeContext: com.github.houbb.segment.support.segment.mode.SegmentModeContext newInstance()>
STATIC edge: r1 = staticinvoke <com.github.houbb.segment.support.segment.strategy.impl.SegmentStrategies: com.github.houbb.segment.support.segment.strategy.ISegmentStrategy tireTree()>() in <com.github.houbb.segment.support.segment.impl.FastSegment: java.util.List segment(java.lang.String,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.strategy.impl.SegmentStrategies: com.github.houbb.segment.support.segment.strategy.ISegmentStrategy tireTree()>
STATIC edge: $r0 = staticinvoke <com.github.houbb.heaven.support.instance.impl.Instances: java.lang.Object singleton(java.lang.Class)>(class "Lcom/github/houbb/segment/support/segment/strategy/impl/TireTreeSegmentStrategy;") in <com.github.houbb.segment.support.segment.strategy.impl.SegmentStrategies: com.github.houbb.segment.support.segment.strategy.ISegmentStrategy tireTree()> ==> <com.github.houbb.heaven.support.instance.impl.Instances: java.lang.Object singleton(java.lang.Class)>
STATIC edge: $r0 = staticinvoke <com.github.houbb.heaven.support.instance.impl.Instances: java.lang.Object singleton(java.lang.Class)>(class "Lcom/github/houbb/segment/support/segment/strategy/impl/hmm/HmmSegmentStrategy;") in <com.github.houbb.segment.support.segment.strategy.impl.SegmentStrategies: com.github.houbb.segment.support.segment.strategy.ISegmentStrategy hmm()> ==> <com.github.houbb.heaven.support.instance.impl.Instances: java.lang.Object singleton(java.lang.Class)>
STATIC edge: $r0 = staticinvoke <com.github.houbb.heaven.support.instance.impl.Instances: java.lang.Object singleton(java.lang.Class)>(class "Lcom/github/houbb/segment/support/segment/strategy/impl/SimpleSegmentStrategy;") in <com.github.houbb.segment.support.segment.strategy.impl.SegmentStrategies: com.github.houbb.segment.support.segment.strategy.ISegmentStrategy simple()> ==> <com.github.houbb.heaven.support.instance.impl.Instances: java.lang.Object singleton(java.lang.Class)>
CLINIT edge: $z1 = staticinvoke <com.github.houbb.segment.util.CharUtils: boolean isConsequent(char)>(c4) in <com.github.houbb.segment.support.segment.impl.PreciseSegment: java.util.List segment(java.lang.String,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.util.CharUtils: void <clinit>()>
STATIC edge: $z1 = staticinvoke <com.github.houbb.segment.util.CharUtils: boolean isConsequent(char)>(c4) in <com.github.houbb.segment.support.segment.impl.PreciseSegment: java.util.List segment(java.lang.String,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.util.CharUtils: boolean isConsequent(char)>
STATIC edge: r0 = staticinvoke <com.github.houbb.heaven.util.guava.Guavas: java.util.List newArrayList()>() in <com.github.houbb.segment.support.segment.impl.PreciseSegment: java.util.List segment(java.lang.String,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.heaven.util.guava.Guavas: java.util.List newArrayList()>
CLINIT edge: $z3 = staticinvoke <com.github.houbb.segment.util.CharUtils: boolean isConnectorChars(char)>(c0) in <com.github.houbb.segment.util.CharUtils: boolean isConsequent(char)> ==> <com.github.houbb.segment.util.CharUtils: void <clinit>()>
STATIC edge: $z3 = staticinvoke <com.github.houbb.segment.util.CharUtils: boolean isConnectorChars(char)>(c0) in <com.github.houbb.segment.util.CharUtils: boolean isConsequent(char)> ==> <com.github.houbb.segment.util.CharUtils: boolean isConnectorChars(char)>
STATIC edge: $z2 = staticinvoke <com.github.houbb.heaven.util.lang.CharUtil: boolean isDigit(char)>(c0) in <com.github.houbb.segment.util.CharUtils: boolean isConsequent(char)> ==> <com.github.houbb.heaven.util.lang.CharUtil: boolean isDigit(char)>
STATIC edge: $z1 = staticinvoke <com.github.houbb.heaven.util.lang.CharUtil: boolean isDigitOrLetter(char)>(c0) in <com.github.houbb.segment.util.CharUtils: boolean isConsequent(char)> ==> <com.github.houbb.heaven.util.lang.CharUtil: boolean isDigitOrLetter(char)>
STATIC edge: $z0 = staticinvoke <com.github.houbb.heaven.util.lang.CharUtil: boolean isChinese(char)>(c0) in <com.github.houbb.segment.util.CharUtils: boolean isConsequent(char)> ==> <com.github.houbb.heaven.util.lang.CharUtil: boolean isChinese(char)>
CLINIT edge: $r0 = <com.github.houbb.segment.util.CharUtils: char[] CONNECTOR_CHARS> in <com.github.houbb.segment.util.CharUtils: boolean isConnectorChars(char)> ==> <com.github.houbb.segment.util.CharUtils: void <clinit>()>
STATIC edge: $z0 = staticinvoke <com.github.houbb.heaven.util.util.ArrayPrimitiveUtil: boolean contains(char[],char)>($r0, c0) in <com.github.houbb.segment.util.CharUtils: boolean isConnectorChars(char)> ==> <com.github.houbb.heaven.util.util.ArrayPrimitiveUtil: boolean contains(char[],char)>
STATIC edge: $z0 = staticinvoke <com.github.houbb.heaven.util.lang.CharUtil: boolean isEnglish(char)>(c0) in <com.github.houbb.segment.util.CharUtils: boolean isLetterOrConnector(char)> ==> <com.github.houbb.heaven.util.lang.CharUtil: boolean isEnglish(char)>
STATIC edge: r5 = staticinvoke <com.github.houbb.heaven.util.guava.Guavas: java.util.List newArrayList()>() in <com.github.houbb.segment.support.segment.impl.Segment: java.util.List segment(java.lang.String,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.heaven.util.guava.Guavas: java.util.List newArrayList()>
STATIC edge: $z0 = staticinvoke <com.github.houbb.heaven.util.lang.StringUtil: boolean isEmpty(java.lang.String)>(r0) in <com.github.houbb.segment.support.segment.impl.Segment: java.util.List segment(java.lang.String,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.heaven.util.lang.StringUtil: boolean isEmpty(java.lang.String)>
CLINIT edge: $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <com.github.houbb.segment.support.segment.impl.SegmentResult: int hashCode()> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $i2 = staticinvoke <java.util.Objects: int hash(java.lang.Object[])>($r0) in <com.github.houbb.segment.support.segment.impl.SegmentResult: int hashCode()> ==> <java.util.Objects: int hash(java.lang.Object[])>
STATIC edge: $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1) in <com.github.houbb.segment.support.segment.impl.SegmentResult: int hashCode()> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <com.github.houbb.segment.support.segment.impl.SegmentResult: int hashCode()> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $z0 = staticinvoke <com.github.houbb.heaven.util.lang.StringUtil: boolean isEmpty(java.lang.String)>($r1) in <com.github.houbb.segment.support.segment.impl.SegmentResult: java.lang.String toString()> ==> <com.github.houbb.heaven.util.lang.StringUtil: boolean isEmpty(java.lang.String)>
STATIC edge: $z0 = staticinvoke <com.github.houbb.heaven.util.util.CollectionUtil: boolean isEmpty(java.util.Collection)>(r1) in <com.github.houbb.segment.support.segment.mode.impl.AbstractSegmentMode: java.util.List select(com.github.houbb.segment.support.segment.mode.SegmentModeContext)> ==> <com.github.houbb.heaven.util.util.CollectionUtil: boolean isEmpty(java.util.Collection)>
STATIC edge: $r4 = staticinvoke <com.github.houbb.segment.support.segment.mode.impl.SegmentModes: com.github.houbb.segment.support.segment.mode.ISegmentMode single()>() in <com.github.houbb.segment.support.segment.mode.impl.AbstractSegmentMode: java.util.List select(com.github.houbb.segment.support.segment.mode.SegmentModeContext)> ==> <com.github.houbb.segment.support.segment.mode.impl.SegmentModes: com.github.houbb.segment.support.segment.mode.ISegmentMode single()>
STATIC edge: r5 = staticinvoke <com.github.houbb.heaven.util.guava.Guavas: java.util.List newArrayList()>() in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.List select(com.github.houbb.segment.support.segment.mode.SegmentModeContext)> ==> <com.github.houbb.heaven.util.guava.Guavas: java.util.List newArrayList()>
CLINIT edge: $r7 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(r6) in <com.github.houbb.segment.support.segment.mode.impl.SingleSegmentMode: java.util.List select(com.github.houbb.segment.support.segment.mode.SegmentModeContext)> ==> <java.util.Collections: void <clinit>()>
STATIC edge: $r7 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(r6) in <com.github.houbb.segment.support.segment.mode.impl.SingleSegmentMode: java.util.List select(com.github.houbb.segment.support.segment.mode.SegmentModeContext)> ==> <java.util.Collections: java.util.List singletonList(java.lang.Object)>
STATIC edge: $r3 = staticinvoke <com.github.houbb.segment.support.segment.impl.SegmentResult: com.github.houbb.segment.support.segment.impl.SegmentResult newInstance()>() in <com.github.houbb.segment.support.segment.mode.impl.SingleSegmentMode: java.util.List select(com.github.houbb.segment.support.segment.mode.SegmentModeContext)> ==> <com.github.houbb.segment.support.segment.impl.SegmentResult: com.github.houbb.segment.support.segment.impl.SegmentResult newInstance()>
STATIC edge: $r3 = staticinvoke <com.github.houbb.heaven.util.util.CollectionUtil: java.util.List toList(java.lang.Iterable,com.github.houbb.heaven.support.handler.IHandler)>(r0, $r1) in <com.github.houbb.segment.support.segment.result.impl.SegmentResultHandlerWord: java.util.List handler(java.util.List)> ==> <com.github.houbb.heaven.util.util.CollectionUtil: java.util.List toList(java.lang.Iterable,com.github.houbb.heaven.support.handler.IHandler)>
CLINIT edge: $r11 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>() in <com.github.houbb.segment.support.segment.result.impl.SegmentResultHandlerWordCount: java.util.Map handler(java.util.List)> ==> <java.util.Collections: void <clinit>()>
STATIC edge: $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1) in <com.github.houbb.segment.support.segment.result.impl.SegmentResultHandlerWordCount: java.util.Map handler(java.util.List)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0) in <com.github.houbb.segment.support.segment.result.impl.SegmentResultHandlerWordCount: java.util.Map handler(java.util.List)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $z2 = staticinvoke <com.github.houbb.heaven.util.lang.ObjectUtil: boolean isNull(java.lang.Object)>(r13) in <com.github.houbb.segment.support.segment.result.impl.SegmentResultHandlerWordCount: java.util.Map handler(java.util.List)> ==> <com.github.houbb.heaven.util.lang.ObjectUtil: boolean isNull(java.lang.Object)>
STATIC edge: r1 = staticinvoke <com.github.houbb.heaven.util.guava.Guavas: java.util.Map newHashMap()>() in <com.github.houbb.segment.support.segment.result.impl.SegmentResultHandlerWordCount: java.util.Map handler(java.util.List)> ==> <com.github.houbb.heaven.util.guava.Guavas: java.util.Map newHashMap()>
STATIC edge: $r11 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>() in <com.github.houbb.segment.support.segment.result.impl.SegmentResultHandlerWordCount: java.util.Map handler(java.util.List)> ==> <java.util.Collections: java.util.Map emptyMap()>
STATIC edge: $z0 = staticinvoke <com.github.houbb.heaven.util.util.CollectionUtil: boolean isEmpty(java.util.Collection)>(r0) in <com.github.houbb.segment.support.segment.result.impl.SegmentResultHandlerWordCount: java.util.Map handler(java.util.List)> ==> <com.github.houbb.heaven.util.util.CollectionUtil: boolean isEmpty(java.util.Collection)>
CLINIT edge: $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1) in <com.github.houbb.segment.support.segment.result.impl.SegmentResultHandlerWordCount: java.util.Map handler(java.util.List)> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0) in <com.github.houbb.segment.support.segment.result.impl.SegmentResultHandlerWordCount: java.util.Map handler(java.util.List)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: r0 = staticinvoke <com.github.houbb.heaven.util.guava.Guavas: java.util.List newArrayList()>() in <com.github.houbb.segment.support.segment.strategy.impl.SimpleSegmentStrategy: java.util.List segment(java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.heaven.util.guava.Guavas: java.util.List newArrayList()>
STATIC edge: $r10 = staticinvoke <com.github.houbb.segment.support.segment.impl.SegmentResult: com.github.houbb.segment.support.segment.impl.SegmentResult newInstance()>() in <com.github.houbb.segment.support.segment.strategy.impl.SimpleSegmentStrategy: java.util.List segment(java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.impl.SegmentResult: com.github.houbb.segment.support.segment.impl.SegmentResult newInstance()>
STATIC edge: r17 = staticinvoke <com.github.houbb.heaven.util.guava.Guavas: java.util.List newArrayList(int)>($i0) in <com.github.houbb.segment.support.segment.strategy.impl.SimpleSegmentStrategy: java.util.List segment(java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.heaven.util.guava.Guavas: java.util.List newArrayList(int)>
STATIC edge: $z2 = staticinvoke <com.github.houbb.heaven.util.lang.CharUtil: boolean isChinese(char)>(c7) in <com.github.houbb.segment.support.segment.strategy.impl.SimpleSegmentStrategy: java.util.List segment(java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.heaven.util.lang.CharUtil: boolean isChinese(char)>
CLINIT edge: $r6 = <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: int[] STATE_INDEX> in <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: java.util.List segment(java.lang.String,java.lang.String)> ==> <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: void <clinit>()>
STATIC edge: r7 = staticinvoke <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: int[] compute(char[],int[],double[],double[][])>(r3, $r6, $r5, $r4) in <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: java.util.List segment(java.lang.String,java.lang.String)> ==> <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: int[] compute(char[],int[],double[],double[][])>
STATIC edge: r0 = staticinvoke <com.github.houbb.heaven.util.guava.Guavas: java.util.List newArrayList()>() in <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: java.util.List segment(java.lang.String,java.lang.String)> ==> <com.github.houbb.heaven.util.guava.Guavas: java.util.List newArrayList()>
CLINIT edge: $r11 = <com.github.houbb.segment.constant.enums.HmmStateEnum: com.github.houbb.segment.constant.enums.HmmStateEnum SINGLE> in <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: java.util.List segment(java.lang.String,java.lang.String)> ==> <com.github.houbb.segment.constant.enums.HmmStateEnum: void <clinit>()>
CLINIT edge: $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2) in <com.github.houbb.segment.support.segment.strategy.impl.TireTreeSegmentStrategy: java.util.List doSegment(java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2) in <com.github.houbb.segment.support.segment.strategy.impl.TireTreeSegmentStrategy: java.util.List doSegment(java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: z1 = staticinvoke <com.github.houbb.segment.support.segment.strategy.impl.TireTreeSegmentStrategy: boolean isEnd(java.util.Map)>(r7) in <com.github.houbb.segment.support.segment.strategy.impl.TireTreeSegmentStrategy: java.util.List doSegment(java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.strategy.impl.TireTreeSegmentStrategy: boolean isEnd(java.util.Map)>
STATIC edge: $z0 = staticinvoke <com.github.houbb.heaven.util.lang.ObjectUtil: boolean isNotNull(java.lang.Object)>(r7) in <com.github.houbb.segment.support.segment.strategy.impl.TireTreeSegmentStrategy: java.util.List doSegment(java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.heaven.util.lang.ObjectUtil: boolean isNotNull(java.lang.Object)>
STATIC edge: r3 = staticinvoke <com.github.houbb.heaven.util.guava.Guavas: java.util.List newArrayList()>() in <com.github.houbb.segment.support.segment.strategy.impl.TireTreeSegmentStrategy: java.util.List doSegment(java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.heaven.util.guava.Guavas: java.util.List newArrayList()>
STATIC edge: $r0 = staticinvoke <com.github.houbb.heaven.support.instance.impl.Instances: java.lang.Object singleton(java.lang.Class)>(class "Lcom/github/houbb/segment/support/trie/impl/SegmentTrieTree;") in <com.github.houbb.segment.support.segment.strategy.impl.TireTreeSegmentStrategy: java.util.List doSegment(java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.heaven.support.instance.impl.Instances: java.lang.Object singleton(java.lang.Class)>
STATIC edge: $z0 = staticinvoke <com.github.houbb.heaven.util.lang.ObjectUtil: boolean isNotNull(java.lang.Object)>($r0) in <com.github.houbb.segment.support.trie.impl.SegmentTrieTree: java.util.Map getTrieTree(com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.heaven.util.lang.ObjectUtil: boolean isNotNull(java.lang.Object)>
CLINIT edge: $r5 = staticinvoke <java.util.Collections: java.util.List emptyList()>() in <com.github.houbb.segment.support.tagging.pos.data.impl.AbstractSegmentPosData: java.util.List posList(java.lang.String)> ==> <java.util.Collections: void <clinit>()>
STATIC edge: $r5 = staticinvoke <java.util.Collections: java.util.List emptyList()>() in <com.github.houbb.segment.support.tagging.pos.data.impl.AbstractSegmentPosData: java.util.List posList(java.lang.String)> ==> <java.util.Collections: java.util.List emptyList()>
STATIC edge: $z0 = staticinvoke <com.github.houbb.heaven.util.lang.StringUtil: boolean isEmptyTrim(java.lang.String)>(r0) in <com.github.houbb.segment.support.tagging.pos.data.impl.AbstractSegmentPosData: java.util.List posList(java.lang.String)> ==> <com.github.houbb.heaven.util.lang.StringUtil: boolean isEmptyTrim(java.lang.String)>
CLINIT edge: $r8 = <com.github.houbb.segment.constant.enums.SegmentPosEnum: com.github.houbb.segment.constant.enums.SegmentPosEnum UN> in <com.github.houbb.segment.support.tagging.pos.tag.impl.SimpleSegmentPosTagging: void posTagging(java.util.List,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()>
STATIC edge: $z1 = staticinvoke <com.github.houbb.heaven.util.util.CollectionUtil: boolean isNotEmpty(java.util.Collection)>(r7) in <com.github.houbb.segment.support.tagging.pos.tag.impl.SimpleSegmentPosTagging: void posTagging(java.util.List,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.heaven.util.util.CollectionUtil: boolean isNotEmpty(java.util.Collection)>
STATIC edge: $r1 = staticinvoke <com.github.houbb.segment.support.segment.mode.impl.SegmentModes: com.github.houbb.segment.support.segment.mode.ISegmentMode search()>() in <com.github.houbb.segment.util.SegmentHelper: java.util.List segment(java.lang.String)> ==> <com.github.houbb.segment.support.segment.mode.impl.SegmentModes: com.github.houbb.segment.support.segment.mode.ISegmentMode search()>
STATIC edge: $r2 = staticinvoke <com.github.houbb.segment.util.SegmentHelper: java.util.List segment(java.lang.String,com.github.houbb.segment.support.segment.mode.ISegmentMode)>(r0, $r1) in <com.github.houbb.segment.util.SegmentHelper: java.util.List segment(java.lang.String)> ==> <com.github.houbb.segment.util.SegmentHelper: java.util.List segment(java.lang.String,com.github.houbb.segment.support.segment.mode.ISegmentMode)>
STATIC edge: $r1 = staticinvoke <com.github.houbb.segment.support.segment.mode.impl.SegmentModes: com.github.houbb.segment.support.segment.mode.ISegmentMode search()>() in <com.github.houbb.segment.util.SegmentHelper: java.lang.Object segment(java.lang.String,com.github.houbb.segment.support.segment.result.ISegmentResultHandler)> ==> <com.github.houbb.segment.support.segment.mode.impl.SegmentModes: com.github.houbb.segment.support.segment.mode.ISegmentMode search()>
STATIC edge: $r3 = staticinvoke <com.github.houbb.segment.util.SegmentHelper: java.lang.Object segment(java.lang.String,com.github.houbb.segment.support.segment.mode.ISegmentMode,com.github.houbb.segment.support.segment.result.ISegmentResultHandler)>(r0, $r1, r2) in <com.github.houbb.segment.util.SegmentHelper: java.lang.Object segment(java.lang.String,com.github.houbb.segment.support.segment.result.ISegmentResultHandler)> ==> <com.github.houbb.segment.util.SegmentHelper: java.lang.Object segment(java.lang.String,com.github.houbb.segment.support.segment.mode.ISegmentMode,com.github.houbb.segment.support.segment.result.ISegmentResultHandler)>
STATIC edge: $r2 = staticinvoke <com.github.houbb.segment.support.segment.result.impl.SegmentResultHandlers: com.github.houbb.segment.support.segment.result.ISegmentResultHandler common()>() in <com.github.houbb.segment.util.SegmentHelper: java.util.List segment(java.lang.String,com.github.houbb.segment.support.segment.mode.ISegmentMode)> ==> <com.github.houbb.segment.support.segment.result.impl.SegmentResultHandlers: com.github.houbb.segment.support.segment.result.ISegmentResultHandler common()>
STATIC edge: $r3 = staticinvoke <com.github.houbb.segment.util.SegmentHelper: java.lang.Object segment(java.lang.String,com.github.houbb.segment.support.segment.mode.ISegmentMode,com.github.houbb.segment.support.segment.result.ISegmentResultHandler)>(r0, r1, $r2) in <com.github.houbb.segment.util.SegmentHelper: java.util.List segment(java.lang.String,com.github.houbb.segment.support.segment.mode.ISegmentMode)> ==> <com.github.houbb.segment.util.SegmentHelper: java.lang.Object segment(java.lang.String,com.github.houbb.segment.support.segment.mode.ISegmentMode,com.github.houbb.segment.support.segment.result.ISegmentResultHandler)>
STATIC edge: $r0 = staticinvoke <com.github.houbb.segment.bs.SegmentBs: com.github.houbb.segment.bs.SegmentBs newInstance()>() in <com.github.houbb.segment.util.SegmentHelper: java.lang.Object segment(java.lang.String,com.github.houbb.segment.support.segment.mode.ISegmentMode,com.github.houbb.segment.support.segment.result.ISegmentResultHandler)> ==> <com.github.houbb.segment.bs.SegmentBs: com.github.houbb.segment.bs.SegmentBs newInstance()>
CLINIT edge: $r0 = new com.github.houbb.segment.constant.enums.HmmStateEnum in <com.github.houbb.segment.constant.enums.HmmStateEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.HmmStateEnum: void <clinit>()>
CLINIT edge: $r0 = new com.github.houbb.segment.constant.enums.SegmentPosEnum in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()>
CLINIT edge: <java.lang.Double: java.lang.Class TYPE> = null in <java.lang.Double: void <clinit>()> ==> <java.lang.Double: void <clinit>()>
CLINIT edge: <com.github.houbb.segment.support.format.impl.ChineseTsSegmentFormat: java.util.Map TS_CHAR_MAP> = $r0 in <com.github.houbb.segment.support.format.impl.ChineseTsSegmentFormat: void <clinit>()> ==> <com.github.houbb.segment.support.format.impl.ChineseTsSegmentFormat: void <clinit>()>
STATIC edge: $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <com.github.houbb.segment.support.format.impl.ChineseTsSegmentFormat: void <clinit>()> ==> <java.lang.System: long currentTimeMillis()>
STATIC edge: $r15 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c3) in <com.github.houbb.segment.support.format.impl.ChineseTsSegmentFormat: void <clinit>()> ==> <java.lang.Character: java.lang.Character valueOf(char)>
STATIC edge: $r14 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c2) in <com.github.houbb.segment.support.format.impl.ChineseTsSegmentFormat: void <clinit>()> ==> <java.lang.Character: java.lang.Character valueOf(char)>
STATIC edge: r1 = staticinvoke <com.github.houbb.heaven.util.io.StreamUtil: java.util.List readAllLines(java.lang.String)>("/segment_chinese_ts_char.txt") in <com.github.houbb.segment.support.format.impl.ChineseTsSegmentFormat: void <clinit>()> ==> <com.github.houbb.heaven.util.io.StreamUtil: java.util.List readAllLines(java.lang.String)>
STATIC edge: l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <com.github.houbb.segment.support.format.impl.ChineseTsSegmentFormat: void <clinit>()> ==> <java.lang.System: long currentTimeMillis()>
STATIC edge: $r0 = staticinvoke <com.github.houbb.heaven.util.guava.Guavas: java.util.Map newHashMap()>() in <com.github.houbb.segment.support.format.impl.ChineseTsSegmentFormat: void <clinit>()> ==> <com.github.houbb.heaven.util.guava.Guavas: java.util.Map newHashMap()>
CLINIT edge: $r14 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c2) in <com.github.houbb.segment.support.format.impl.ChineseTsSegmentFormat: void <clinit>()> ==> <java.lang.Character: void <clinit>()>
CLINIT edge: l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <com.github.houbb.segment.support.format.impl.ChineseTsSegmentFormat: void <clinit>()> ==> <java.lang.System: void <clinit>()>
CLINIT edge: <java.lang.Character: java.lang.Class TYPE> = null in <java.lang.Character: void <clinit>()> ==> <java.lang.Character: void <clinit>()>
CLINIT edge: <com.github.houbb.segment.util.CharUtils: char[] CONNECTOR_CHARS> = $r1 in <com.github.houbb.segment.util.CharUtils: void <clinit>()> ==> <com.github.houbb.segment.util.CharUtils: void <clinit>()>
CLINIT edge: <java.lang.Integer: java.lang.Class TYPE> = null in <java.lang.Integer: void <clinit>()> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: int[] STATE_INDEX> = $r0 in <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: void <clinit>()> ==> <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: void <clinit>()>
CLINIT edge: d8 = staticinvoke <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: double getEmitProb(int,char)>(i21, $c18) in <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: int[] compute(char[],int[],double[],double[][])> ==> <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: void <clinit>()>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r14, 0, $r13, 0, i22) in <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: int[] compute(char[],int[],double[],double[][])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: d1 = staticinvoke <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: double getEmitProb(int,char)>(i25, $c14) in <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: int[] compute(char[],int[],double[],double[][])> ==> <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: double getEmitProb(int,char)>
STATIC edge: d8 = staticinvoke <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: double getEmitProb(int,char)>(i21, $c18) in <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: int[] compute(char[],int[],double[],double[][])> ==> <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: double getEmitProb(int,char)>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r14, 0, $r13, 0, i22) in <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: int[] compute(char[],int[],double[],double[][])> ==> <java.lang.System: void <clinit>()>
CLINIT edge: $r6 = <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: int[][] PREV_STATUS> in <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: int[] compute(char[],int[],double[],double[][])> ==> <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: void <clinit>()>
STATIC edge: $z0 = staticinvoke <com.github.houbb.heaven.util.lang.ObjectUtil: boolean isNull(java.lang.Object)>(r0) in <com.github.houbb.segment.support.segment.strategy.impl.TireTreeSegmentStrategy: boolean isEnd(java.util.Map)> ==> <com.github.houbb.heaven.util.lang.ObjectUtil: boolean isNull(java.lang.Object)>
STATIC edge: $z1 = staticinvoke <com.github.houbb.heaven.util.lang.ObjectUtil: boolean isNull(java.lang.Object)>(r1) in <com.github.houbb.segment.support.segment.strategy.impl.TireTreeSegmentStrategy: boolean isEnd(java.util.Map)> ==> <com.github.houbb.heaven.util.lang.ObjectUtil: boolean isNull(java.lang.Object)>
CLINIT edge: $r0 = staticinvoke <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: java.util.Map getEmitPropMap()>() in <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: double getEmitProb(int,char)> ==> <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: void <clinit>()>
STATIC edge: $z0 = staticinvoke <com.github.houbb.heaven.util.lang.ObjectUtil: boolean isNotNull(java.lang.Object)>(r7) in <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: double getEmitProb(int,char)> ==> <com.github.houbb.heaven.util.lang.ObjectUtil: boolean isNotNull(java.lang.Object)>
STATIC edge: $r5 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c1) in <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: double getEmitProb(int,char)> ==> <java.lang.Character: java.lang.Character valueOf(char)>
STATIC edge: $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) in <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: double getEmitProb(int,char)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r0 = staticinvoke <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: java.util.Map getEmitPropMap()>() in <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: double getEmitProb(int,char)> ==> <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: java.util.Map getEmitPropMap()>
CLINIT edge: $r5 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c1) in <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: double getEmitProb(int,char)> ==> <java.lang.Character: void <clinit>()>
CLINIT edge: $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) in <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: double getEmitProb(int,char)> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: $r0 = <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: java.util.Map emitPropMap> in <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: java.util.Map getEmitPropMap()> ==> <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: void <clinit>()>
STATIC edge: r31 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>($r30) in <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: java.util.Map getEmitPropMap()> ==> <java.lang.Double: java.lang.Double valueOf(java.lang.String)>
STATIC edge: r29 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c0) in <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: java.util.Map getEmitPropMap()> ==> <java.lang.Character: java.lang.Character valueOf(char)>
STATIC edge: r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r26) in <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: java.util.Map getEmitPropMap()> ==> <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>
STATIC edge: r21 = staticinvoke <com.github.houbb.heaven.util.io.StreamUtil: java.util.List readAllLines(java.lang.String)>("/segment_emit_prob.txt") in <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: java.util.Map getEmitPropMap()> ==> <com.github.houbb.heaven.util.io.StreamUtil: java.util.List readAllLines(java.lang.String)>
STATIC edge: $r19 = staticinvoke <com.github.houbb.heaven.util.guava.Guavas: java.util.Map newHashMap()>() in <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: java.util.Map getEmitPropMap()> ==> <com.github.houbb.heaven.util.guava.Guavas: java.util.Map newHashMap()>
STATIC edge: $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3) in <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: java.util.Map getEmitPropMap()> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r15 = staticinvoke <com.github.houbb.heaven.util.guava.Guavas: java.util.Map newHashMap()>() in <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: java.util.Map getEmitPropMap()> ==> <com.github.houbb.heaven.util.guava.Guavas: java.util.Map newHashMap()>
STATIC edge: $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2) in <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: java.util.Map getEmitPropMap()> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r11 = staticinvoke <com.github.houbb.heaven.util.guava.Guavas: java.util.Map newHashMap()>() in <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: java.util.Map getEmitPropMap()> ==> <com.github.houbb.heaven.util.guava.Guavas: java.util.Map newHashMap()>
STATIC edge: $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1) in <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: java.util.Map getEmitPropMap()> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r7 = staticinvoke <com.github.houbb.heaven.util.guava.Guavas: java.util.Map newHashMap()>() in <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: java.util.Map getEmitPropMap()> ==> <com.github.houbb.heaven.util.guava.Guavas: java.util.Map newHashMap()>
STATIC edge: $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0) in <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: java.util.Map getEmitPropMap()> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r4 = staticinvoke <com.github.houbb.heaven.util.guava.Guavas: java.util.Map newHashMap(int)>(4) in <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: java.util.Map getEmitPropMap()> ==> <com.github.houbb.heaven.util.guava.Guavas: java.util.Map newHashMap(int)>
STATIC edge: $z1 = staticinvoke <com.github.houbb.heaven.util.lang.ObjectUtil: boolean isNull(java.lang.Object)>($r2) in <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: java.util.Map getEmitPropMap()> ==> <com.github.houbb.heaven.util.lang.ObjectUtil: boolean isNull(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <com.github.houbb.heaven.util.lang.ObjectUtil: boolean isNotNull(java.lang.Object)>($r0) in <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: java.util.Map getEmitPropMap()> ==> <com.github.houbb.heaven.util.lang.ObjectUtil: boolean isNotNull(java.lang.Object)>
CLINIT edge: r31 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>($r30) in <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: java.util.Map getEmitPropMap()> ==> <java.lang.Double: void <clinit>()>
CLINIT edge: r29 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c0) in <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: java.util.Map getEmitPropMap()> ==> <java.lang.Character: void <clinit>()>
CLINIT edge: $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0) in <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: java.util.Map getEmitPropMap()> ==> <java.lang.Integer: void <clinit>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Throwable: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Throwable: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Throwable: void <init>(java.lang.Throwable)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.Throwable fillInStackTrace()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.String getMessage()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.String getLocalizedMessage()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void printStackTrace()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void printStackTrace(java.io.PrintStream)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void printStackTrace(java.io.PrintWriter)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.Throwable getCause()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: void wait()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: void wait(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[])> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],int,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],int,int,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],int,int,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],int,int,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],int,int,java.nio.charset.Charset)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],int,int,java.nio.charset.Charset)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],java.nio.charset.Charset)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],java.nio.charset.Charset)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(char[])> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(char[],int,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(java.lang.StringBuffer)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(java.lang.StringBuffer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(int[],int,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(int[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(java.lang.StringBuilder)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(java.lang.StringBuilder)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int compareToIgnoreCase(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String concat(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String copyValueOf(char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String copyValueOf(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean endsWith(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean equalsIgnoreCase(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void getBytes(int,int,byte[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: byte[] getBytes()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: byte[] getBytes(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: byte[] getBytes(java.nio.charset.Charset)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void getChars(int,int,char[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int indexOf(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int indexOf(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int indexOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int indexOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int lastIndexOf(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int lastIndexOf(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int lastIndexOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int lastIndexOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean regionMatches(int,java.lang.String,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String replace(char,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean startsWith(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean startsWith(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String substring(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String substring(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: char[] toCharArray()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toLowerCase()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toLowerCase(java.util.Locale)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toUpperCase()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toUpperCase(java.util.Locale)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String trim()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean contentEquals(java.lang.StringBuffer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean contentEquals(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean matches(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String[] split(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String[] split(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.CharSequence subSequence(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int codePointAt(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int codePointBefore(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int codePointCount(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean contains(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int offsetByCodePoints(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.String: int compareTo(java.lang.String)>($r2) in <java.lang.String: int compareTo(java.lang.Object)> ==> <java.lang.String: int compareTo(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>()> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>(java.lang.String)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>(java.lang.Throwable)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class forName(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class[] getClasses()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.'annotation'.Annotation[] getAnnotations()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.String getCanonicalName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.ClassLoader getClassLoader()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Constructor[] getConstructors()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class[] getDeclaredClasses()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Object[] getEnumConstants()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Field getField(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Field[] getFields()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Type[] getGenericInterfaces()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Type getGenericSuperclass()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Method[] getMethods()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: int getModifiers()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.String getName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.String getSimpleName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.security.ProtectionDomain getProtectionDomain()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.net.URL getResource(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Object[] getSigners()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isAnnotation()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isAnnotationPresent(java.lang.Class)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isArray()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isEnum()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isLocalClass()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isMemberClass()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isSynthetic()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Object newInstance()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Package getPackage()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class asSubclass(java.lang.Class)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Object cast(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Exception: void <init>()> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Exception: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Exception: void <init>(java.lang.String)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Exception: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Exception: void <init>(java.lang.Throwable)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Exception: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.AbstractStringBuilder: void <init>()>() in <java.lang.StringBuffer: void <init>()> ==> <java.lang.AbstractStringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.AbstractStringBuilder: void <init>()>() in <java.lang.StringBuffer: void <init>(int)> ==> <java.lang.AbstractStringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.AbstractStringBuilder: void <init>()>() in <java.lang.StringBuffer: void <init>(java.lang.String)> ==> <java.lang.AbstractStringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.AbstractStringBuilder: void <init>()>() in <java.lang.StringBuffer: void <init>(java.lang.CharSequence)> ==> <java.lang.AbstractStringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void <init>(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.StringBuffer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer appendCodePoint(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: char charAt(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int codePointAt(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int codePointBefore(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int codePointCount(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer delete(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer deleteCharAt(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void ensureCapacity(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void getChars(int,int,char[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int indexOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.CharSequence,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int lastIndexOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int offsetByCodePoints(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer replace(int,int,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer reverse()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void setCharAt(int,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void setLength(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.CharSequence subSequence(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.String substring(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.String substring(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void trimToSize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: $i0 = specialinvoke r0.<java.lang.AbstractStringBuilder: int lastIndexOf(java.lang.String)>(r1) in <java.lang.StringBuffer: int lastIndexOf(java.lang.String)> ==> <java.lang.AbstractStringBuilder: int lastIndexOf(java.lang.String)>
SPECIAL edge: $i0 = specialinvoke r0.<java.lang.AbstractStringBuilder: int indexOf(java.lang.String)>(r1) in <java.lang.StringBuffer: int indexOf(java.lang.String)> ==> <java.lang.AbstractStringBuilder: int indexOf(java.lang.String)>
SPECIAL edge: $i0 = specialinvoke r0.<java.lang.AbstractStringBuilder: int length()>() in <java.lang.StringBuffer: int length()> ==> <java.lang.AbstractStringBuilder: int length()>
SPECIAL edge: $i0 = specialinvoke r0.<java.lang.AbstractStringBuilder: int capacity()>() in <java.lang.StringBuffer: int capacity()> ==> <java.lang.AbstractStringBuilder: int capacity()>
VIRTUAL edge: $r2 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence,int,int)>(r1, i0, i1) in <java.lang.StringBuffer: java.lang.Appendable append(java.lang.CharSequence,int,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence,int,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>(r1) in <java.lang.StringBuffer: java.lang.Appendable append(java.lang.CharSequence)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c0) in <java.lang.StringBuffer: java.lang.Appendable append(char)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(char)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.ClassNotFoundException: void <init>()> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassNotFoundException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.ClassNotFoundException: void <init>(java.lang.String)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassNotFoundException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.ClassNotFoundException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassNotFoundException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassNotFoundException: java.lang.Throwable getException()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassNotFoundException: java.lang.Throwable getCause()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ClassFormatError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassFormatError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ClassFormatError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassFormatError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.LinkageError: void <init>()> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.LinkageError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.LinkageError: void <init>(java.lang.String)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.LinkageError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: java.lang.String name()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: int ordinal()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: int compareTo(java.lang.Enum)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: java.lang.Class getDeclaringClass()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Enum: int compareTo(java.lang.Enum)>($r2) in <java.lang.Enum: int compareTo(java.lang.Object)> ==> <java.lang.Enum: int compareTo(java.lang.Enum)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Error: void <init>()> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Error: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Error: void <init>(java.lang.String)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Error: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Error: void <init>(java.lang.Throwable)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Error: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Float: void <init>(float)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: void <init>(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Float: void <init>(double)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: void <init>(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Float: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: int compareTo(java.lang.Float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: boolean isInfinite()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: boolean isInfinite(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: boolean isNaN()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: boolean isNaN(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: float parseFloat(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: java.lang.String toString(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: java.lang.Float valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: int compare(float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: java.lang.Float valueOf(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: java.lang.String toHexString(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Float: int compareTo(java.lang.Float)>($r2) in <java.lang.Float: int compareTo(java.lang.Object)> ==> <java.lang.Float: int compareTo(java.lang.Float)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Double: void <init>(double)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: void <init>(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Double: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: int compareTo(java.lang.Double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: boolean isInfinite()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: boolean isInfinite(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: boolean isNaN()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: boolean isNaN(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: double parseDouble(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: java.lang.String toString(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: java.lang.Double valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: int compare(double,double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: java.lang.Double valueOf(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: java.lang.String toHexString(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Double: int compareTo(java.lang.Double)>($r2) in <java.lang.Double: int compareTo(java.lang.Object)> ==> <java.lang.Double: int compareTo(java.lang.Double)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>()> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(java.lang.Object)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(boolean)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(char)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(int)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(long)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(float)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(double)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Integer: void <init>(int)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Integer: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int compareTo(java.lang.Integer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer decode(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer getInteger(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer getInteger(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer getInteger(java.lang.String,java.lang.Integer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int parseInt(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int parseInt(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toBinaryString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toHexString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toOctalString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toString(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int highestOneBit(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int lowestOneBit(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int numberOfLeadingZeros(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int numberOfTrailingZeros(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int bitCount(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int rotateLeft(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int rotateRight(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int reverseBytes(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int reverse(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int signum(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer valueOf(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Integer: int compareTo(java.lang.Integer)>($r2) in <java.lang.Integer: int compareTo(java.lang.Object)> ==> <java.lang.Integer: int compareTo(java.lang.Integer)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.NullPointerException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NullPointerException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.NullPointerException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NullPointerException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Character: void <init>(char)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: void <init>(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char charValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int compareTo(java.lang.Character)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: java.lang.Character valueOf(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isValidCodePoint(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isSupplementaryCodePoint(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isHighSurrogate(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLowSurrogate(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isSurrogatePair(char,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int charCount(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int toCodePoint(char,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointAt(java.lang.CharSequence,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointAt(char[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointAt(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointBefore(java.lang.CharSequence,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointBefore(char[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointBefore(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int toChars(int,char[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char[] toChars(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointCount(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int offsetByCodePoints(java.lang.CharSequence,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int offsetByCodePoints(char[],int,int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int digit(char,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int digit(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char forDigit(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int getNumericValue(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int getNumericValue(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int getType(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int getType(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: byte getDirectionality(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: byte getDirectionality(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isMirrored(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isMirrored(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isDefined(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isDefined(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isDigit(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isDigit(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isIdentifierIgnorable(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isIdentifierIgnorable(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isISOControl(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isISOControl(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaIdentifierPart(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaIdentifierPart(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaIdentifierStart(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaIdentifierStart(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaLetter(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaLetterOrDigit(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLetter(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLetter(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLetterOrDigit(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLetterOrDigit(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLowerCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLowerCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isSpace(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isSpaceChar(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isSpaceChar(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isTitleCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isTitleCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUnicodeIdentifierPart(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUnicodeIdentifierPart(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUnicodeIdentifierStart(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUnicodeIdentifierStart(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUpperCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUpperCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isWhitespace(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isWhitespace(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char reverseBytes(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char toLowerCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int toLowerCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: java.lang.String toString(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char toTitleCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int toTitleCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char toUpperCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int toUpperCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Character: int compareTo(java.lang.Character)>($r2) in <java.lang.Character: int compareTo(java.lang.Object)> ==> <java.lang.Character: int compareTo(java.lang.Character)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Long: void <init>(long)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: void <init>(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Long: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int compareTo(java.lang.Long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long decode(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long getLong(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long getLong(java.lang.String,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long getLong(java.lang.String,java.lang.Long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long parseLong(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long parseLong(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toBinaryString(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toHexString(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toOctalString(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toString(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toString(long,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long valueOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long highestOneBit(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long lowestOneBit(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int numberOfLeadingZeros(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int numberOfTrailingZeros(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int bitCount(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long rotateLeft(long,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long rotateRight(long,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long reverseBytes(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long reverse(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int signum(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long valueOf(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Long: int compareTo(java.lang.Long)>($r2) in <java.lang.Long: int compareTo(java.lang.Object)> ==> <java.lang.Long: int compareTo(java.lang.Long)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Short: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Short: void <init>(short)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: void <init>(short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: int compareTo(java.lang.Short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.Short decode(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: short parseShort(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: short parseShort(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.String toString(short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.Short valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.Short valueOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: short reverseBytes(short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.Short valueOf(short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Short: int compareTo(java.lang.Short)>($r2) in <java.lang.Short: int compareTo(java.lang.Object)> ==> <java.lang.Short: int compareTo(java.lang.Short)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Boolean: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Boolean: void <init>(boolean)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: void <init>(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: boolean booleanValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: int compareTo(java.lang.Boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: boolean getBoolean(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: boolean parseBoolean(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: java.lang.String toString(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: java.lang.Boolean valueOf(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Boolean: int compareTo(java.lang.Boolean)>($r2) in <java.lang.Boolean: int compareTo(java.lang.Object)> ==> <java.lang.Boolean: int compareTo(java.lang.Boolean)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Byte: void <init>(byte)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: void <init>(byte)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Byte: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: int compareTo(java.lang.Byte)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.Byte decode(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: byte parseByte(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: byte parseByte(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.String toString(byte)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.Byte valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.Byte valueOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.Byte valueOf(byte)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Byte: int compareTo(java.lang.Byte)>($r2) in <java.lang.Byte: int compareTo(java.lang.Object)> ==> <java.lang.Byte: int compareTo(java.lang.Byte)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.NoClassDefFoundError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoClassDefFoundError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.NoClassDefFoundError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoClassDefFoundError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.IndexOutOfBoundsException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IndexOutOfBoundsException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.StackOverflowError: void <init>()> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StackOverflowError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.StackOverflowError: void <init>(java.lang.String)> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StackOverflowError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.AbstractMethodError: void <init>()> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AbstractMethodError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.AbstractMethodError: void <init>(java.lang.String)> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AbstractMethodError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.IncompatibleClassChangeError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IncompatibleClassChangeError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.IncompatibleClassChangeError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IncompatibleClassChangeError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ClassCastException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassCastException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ClassCastException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassCastException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.VerifyError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.VerifyError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.VerifyError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.VerifyError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.NoSuchFieldError: void <init>()> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoSuchFieldError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.NoSuchFieldError: void <init>(java.lang.String)> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoSuchFieldError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.IllegalMonitorStateException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IllegalMonitorStateException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.IllegalMonitorStateException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IllegalMonitorStateException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.Runnable)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.Runnable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: int activeCount()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void checkAccess()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: int countStackFrames()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.Thread currentThread()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void destroy()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void dumpStack()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: int enumerate(java.lang.Thread[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.util.Map getAllStackTraces()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.ClassLoader getContextClassLoader()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getDefaultUncaughtExceptionHandler()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: long getId()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.String getName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: int getPriority()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.StackTraceElement[] getStackTrace()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.Thread$State getState()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.ThreadGroup getThreadGroup()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getUncaughtExceptionHandler()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void interrupt()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: boolean interrupted()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: boolean isAlive()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: boolean isDaemon()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: boolean isInterrupted()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void join()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void join(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void join(long,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void resume()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void run()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setDaemon(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setDefaultUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setName(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setPriority(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void sleep(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void sleep(long,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void start()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void stop()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void stop(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void suspend()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void yield()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: boolean holdsLock(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.UnknownError: void <init>()> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.UnknownError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.UnknownError: void <init>(java.lang.String)> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.UnknownError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.InternalError: void <init>()> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.InternalError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.InternalError: void <init>(java.lang.String)> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.InternalError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ArithmeticException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArithmeticException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ArithmeticException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArithmeticException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.NegativeArraySizeException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NegativeArraySizeException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.NegativeArraySizeException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NegativeArraySizeException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ClassCircularityError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassCircularityError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ClassCircularityError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassCircularityError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.NoSuchMethodError: void <init>()> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoSuchMethodError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.NoSuchMethodError: void <init>(java.lang.String)> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoSuchMethodError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IndexOutOfBoundsException: void <init>()>() in <java.lang.ArrayIndexOutOfBoundsException: void <init>()> ==> <java.lang.IndexOutOfBoundsException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArrayIndexOutOfBoundsException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IndexOutOfBoundsException: void <init>()>() in <java.lang.ArrayIndexOutOfBoundsException: void <init>(int)> ==> <java.lang.IndexOutOfBoundsException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArrayIndexOutOfBoundsException: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IndexOutOfBoundsException: void <init>()>() in <java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)> ==> <java.lang.IndexOutOfBoundsException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.ThreadDeath: void <init>()> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ThreadDeath: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.InstantiationError: void <init>()> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.InstantiationError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.InstantiationError: void <init>(java.lang.String)> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.InstantiationError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.IllegalAccessError: void <init>()> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IllegalAccessError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.IllegalAccessError: void <init>(java.lang.String)> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IllegalAccessError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.UnsatisfiedLinkError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.UnsatisfiedLinkError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.UnsatisfiedLinkError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.UnsatisfiedLinkError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ArrayStoreException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArrayStoreException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ArrayStoreException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArrayStoreException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ExceptionInInitializerError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ExceptionInInitializerError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ExceptionInInitializerError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ExceptionInInitializerError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ExceptionInInitializerError: void <init>(java.lang.Throwable)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ExceptionInInitializerError: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ExceptionInInitializerError: java.lang.Throwable getException()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ExceptionInInitializerError: java.lang.Throwable getCause()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.OutOfMemoryError: void <init>()> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.OutOfMemoryError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.OutOfMemoryError: void <init>(java.lang.String)> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.OutOfMemoryError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.github.houbb.segment.support.segment.mode.SegmentModeContext: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.github.houbb.segment.support.segment.mode.SegmentModeContext: void <init>()>() in <com.github.houbb.segment.support.segment.mode.SegmentModeContext: com.github.houbb.segment.support.segment.mode.SegmentModeContext newInstance()> ==> <com.github.houbb.segment.support.segment.mode.SegmentModeContext: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <com.github.houbb.segment.support.segment.mode.SegmentModeContext: java.lang.String toString()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SegmentModeContext{string=\'") in <com.github.houbb.segment.support.segment.mode.SegmentModeContext: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3) in <com.github.houbb.segment.support.segment.mode.SegmentModeContext: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39) in <com.github.houbb.segment.support.segment.mode.SegmentModeContext: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", startIndex=") in <com.github.houbb.segment.support.segment.mode.SegmentModeContext: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <com.github.houbb.segment.support.segment.mode.SegmentModeContext: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", resultList=") in <com.github.houbb.segment.support.segment.mode.SegmentModeContext: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9) in <com.github.houbb.segment.support.segment.mode.SegmentModeContext: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", segmentContext=") in <com.github.houbb.segment.support.segment.mode.SegmentModeContext: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12) in <com.github.houbb.segment.support.segment.mode.SegmentModeContext: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", routeMap=") in <com.github.houbb.segment.support.segment.mode.SegmentModeContext: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15) in <com.github.houbb.segment.support.segment.mode.SegmentModeContext: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125) in <com.github.houbb.segment.support.segment.mode.SegmentModeContext: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>() in <com.github.houbb.segment.support.segment.mode.SegmentModeContext: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<com.github.houbb.segment.bs.SegmentBs: void <init>()>() in <com.github.houbb.segment.bs.SegmentBs: com.github.houbb.segment.bs.SegmentBs newInstance()> ==> <com.github.houbb.segment.bs.SegmentBs: void <init>()>
STATIC edge: $r1 = staticinvoke <com.github.houbb.segment.support.segment.impl.Segments: com.github.houbb.segment.api.ISegment defaults()>() in <com.github.houbb.segment.bs.SegmentBs: void <init>()> ==> <com.github.houbb.segment.support.segment.impl.Segments: com.github.houbb.segment.api.ISegment defaults()>
STATIC edge: $r6 = staticinvoke <com.github.houbb.segment.support.tagging.pos.data.impl.SegmentPosDatas: com.github.houbb.segment.support.tagging.pos.data.ISegmentPosData mixed()>() in <com.github.houbb.segment.bs.SegmentBs: void <init>()> ==> <com.github.houbb.segment.support.tagging.pos.data.impl.SegmentPosDatas: com.github.houbb.segment.support.tagging.pos.data.ISegmentPosData mixed()>
STATIC edge: $r5 = staticinvoke <com.github.houbb.segment.support.tagging.pos.tag.impl.SegmentPosTaggings: com.github.houbb.segment.support.tagging.pos.tag.ISegmentPosTagging none()>() in <com.github.houbb.segment.bs.SegmentBs: void <init>()> ==> <com.github.houbb.segment.support.tagging.pos.tag.impl.SegmentPosTaggings: com.github.houbb.segment.support.tagging.pos.tag.ISegmentPosTagging none()>
STATIC edge: $r4 = staticinvoke <com.github.houbb.segment.support.format.impl.SegmentFormats: com.github.houbb.segment.support.format.ISegmentFormat defaults()>() in <com.github.houbb.segment.bs.SegmentBs: void <init>()> ==> <com.github.houbb.segment.support.format.impl.SegmentFormats: com.github.houbb.segment.support.format.ISegmentFormat defaults()>
STATIC edge: $r3 = staticinvoke <com.github.houbb.segment.support.segment.mode.impl.SegmentModes: com.github.houbb.segment.support.segment.mode.ISegmentMode search()>() in <com.github.houbb.segment.bs.SegmentBs: void <init>()> ==> <com.github.houbb.segment.support.segment.mode.impl.SegmentModes: com.github.houbb.segment.support.segment.mode.ISegmentMode search()>
STATIC edge: $r2 = staticinvoke <com.github.houbb.segment.support.data.impl.SegmentDatas: com.github.houbb.segment.support.data.ISegmentData mixed()>() in <com.github.houbb.segment.bs.SegmentBs: void <init>()> ==> <com.github.houbb.segment.support.data.impl.SegmentDatas: com.github.houbb.segment.support.data.ISegmentData mixed()>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.github.houbb.segment.bs.SegmentBs: java.lang.Object segment(java.lang.String,com.github.houbb.segment.support.segment.result.ISegmentResultHandler)>(r1, $r2) in <com.github.houbb.segment.bs.SegmentBs: java.util.List segment(java.lang.String)> ==> <com.github.houbb.segment.bs.SegmentBs: java.lang.Object segment(java.lang.String,com.github.houbb.segment.support.segment.result.ISegmentResultHandler)>
SPECIAL edge: r1 = specialinvoke r0.<com.github.houbb.segment.bs.SegmentBs: com.github.houbb.segment.api.ISegmentContext buildContext()>() in <com.github.houbb.segment.bs.SegmentBs: java.lang.Object segment(java.lang.String,com.github.houbb.segment.support.segment.result.ISegmentResultHandler)> ==> <com.github.houbb.segment.bs.SegmentBs: com.github.houbb.segment.api.ISegmentContext buildContext()>
INTERFACE edge: r4 = interfaceinvoke $r3.<com.github.houbb.segment.api.ISegment: java.util.List segment(java.lang.String,com.github.houbb.segment.api.ISegmentContext)>(r2, r1) in <com.github.houbb.segment.bs.SegmentBs: java.lang.Object segment(java.lang.String,com.github.houbb.segment.support.segment.result.ISegmentResultHandler)> ==> <com.github.houbb.segment.support.segment.impl.PreciseSegment: java.util.List segment(java.lang.String,com.github.houbb.segment.api.ISegmentContext)>
INTERFACE edge: r4 = interfaceinvoke $r3.<com.github.houbb.segment.api.ISegment: java.util.List segment(java.lang.String,com.github.houbb.segment.api.ISegmentContext)>(r2, r1) in <com.github.houbb.segment.bs.SegmentBs: java.lang.Object segment(java.lang.String,com.github.houbb.segment.support.segment.result.ISegmentResultHandler)> ==> <com.github.houbb.segment.support.segment.impl.FastSegment: java.util.List segment(java.lang.String,com.github.houbb.segment.api.ISegmentContext)>
INTERFACE edge: r4 = interfaceinvoke $r3.<com.github.houbb.segment.api.ISegment: java.util.List segment(java.lang.String,com.github.houbb.segment.api.ISegmentContext)>(r2, r1) in <com.github.houbb.segment.bs.SegmentBs: java.lang.Object segment(java.lang.String,com.github.houbb.segment.support.segment.result.ISegmentResultHandler)> ==> <com.github.houbb.segment.support.segment.impl.Segment: java.util.List segment(java.lang.String,com.github.houbb.segment.api.ISegmentContext)>
INTERFACE edge: $r6 = interfaceinvoke r5.<com.github.houbb.segment.support.segment.result.ISegmentResultHandler: java.lang.Object handler(java.util.List)>(r4) in <com.github.houbb.segment.bs.SegmentBs: java.lang.Object segment(java.lang.String,com.github.houbb.segment.support.segment.result.ISegmentResultHandler)> ==> <com.github.houbb.segment.support.segment.result.impl.SegmentResultHandlerWordCount: java.lang.Object handler(java.util.List)>
INTERFACE edge: $r6 = interfaceinvoke r5.<com.github.houbb.segment.support.segment.result.ISegmentResultHandler: java.lang.Object handler(java.util.List)>(r4) in <com.github.houbb.segment.bs.SegmentBs: java.lang.Object segment(java.lang.String,com.github.houbb.segment.support.segment.result.ISegmentResultHandler)> ==> <com.github.houbb.segment.support.segment.result.impl.SegmentResultHandlerWord: java.lang.Object handler(java.util.List)>
INTERFACE edge: $r6 = interfaceinvoke r5.<com.github.houbb.segment.support.segment.result.ISegmentResultHandler: java.lang.Object handler(java.util.List)>(r4) in <com.github.houbb.segment.bs.SegmentBs: java.lang.Object segment(java.lang.String,com.github.houbb.segment.support.segment.result.ISegmentResultHandler)> ==> <com.github.houbb.segment.support.segment.result.impl.SegmentResultHandler: java.lang.Object handler(java.util.List)>
STATIC edge: $r0 = staticinvoke <com.github.houbb.segment.support.segment.impl.SegmentContext: com.github.houbb.segment.support.segment.impl.SegmentContext newInstance()>() in <com.github.houbb.segment.bs.SegmentBs: com.github.houbb.segment.api.ISegmentContext buildContext()> ==> <com.github.houbb.segment.support.segment.impl.SegmentContext: com.github.houbb.segment.support.segment.impl.SegmentContext newInstance()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.github.houbb.segment.support.segment.impl.SegmentContext: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.github.houbb.segment.support.segment.impl.SegmentContext: void <init>()>() in <com.github.houbb.segment.support.segment.impl.SegmentContext: com.github.houbb.segment.support.segment.impl.SegmentContext newInstance()> ==> <com.github.houbb.segment.support.segment.impl.SegmentContext: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.github.houbb.segment.support.format.impl.SegmentFormats$1: void <init>(com.github.houbb.segment.support.format.ISegmentFormat[])>(r0) in <com.github.houbb.segment.support.format.impl.SegmentFormats: com.github.houbb.segment.support.format.ISegmentFormat chains(com.github.houbb.segment.support.format.ISegmentFormat[])> ==> <com.github.houbb.segment.support.format.impl.SegmentFormats$1: void <init>(com.github.houbb.segment.support.format.ISegmentFormat[])>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.github.houbb.segment.support.format.impl.AbstractSegmentFormatInit: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r8.<com.github.houbb.heaven.support.pipeline.impl.DefaultPipeline: void <init>()>() in <com.github.houbb.segment.support.format.impl.AbstractSegmentFormatInit: char format(char,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.heaven.support.pipeline.impl.DefaultPipeline: void <init>()>
VIRTUAL edge: virtualinvoke r2.<com.github.houbb.segment.support.format.impl.AbstractSegmentFormatInit: void init(com.github.houbb.heaven.support.pipeline.Pipeline)>($r9) in <com.github.houbb.segment.support.format.impl.AbstractSegmentFormatInit: char format(char,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.format.impl.SegmentFormats$1: void init(com.github.houbb.heaven.support.pipeline.Pipeline)>
INTERFACE edge: r4 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>() in <com.github.houbb.segment.support.format.impl.AbstractSegmentFormatInit: char format(char,com.github.houbb.segment.api.ISegmentContext)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: c1 = interfaceinvoke r6.<com.github.houbb.segment.support.format.ISegmentFormat: char format(char,com.github.houbb.segment.api.ISegmentContext)>(c1, r7) in <com.github.houbb.segment.support.format.impl.AbstractSegmentFormatInit: char format(char,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.format.impl.NoneSegmentFormat: char format(char,com.github.houbb.segment.api.ISegmentContext)>
INTERFACE edge: c1 = interfaceinvoke r6.<com.github.houbb.segment.support.format.ISegmentFormat: char format(char,com.github.houbb.segment.api.ISegmentContext)>(c1, r7) in <com.github.houbb.segment.support.format.impl.AbstractSegmentFormatInit: char format(char,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.format.impl.ChineseTsSegmentFormat: char format(char,com.github.houbb.segment.api.ISegmentContext)>
INTERFACE edge: c1 = interfaceinvoke r6.<com.github.houbb.segment.support.format.ISegmentFormat: char format(char,com.github.houbb.segment.api.ISegmentContext)>(c1, r7) in <com.github.houbb.segment.support.format.impl.AbstractSegmentFormatInit: char format(char,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.format.impl.HalfWidthSegmentFormat: char format(char,com.github.houbb.segment.api.ISegmentContext)>
INTERFACE edge: c1 = interfaceinvoke r6.<com.github.houbb.segment.support.format.ISegmentFormat: char format(char,com.github.houbb.segment.api.ISegmentContext)>(c1, r7) in <com.github.houbb.segment.support.format.impl.AbstractSegmentFormatInit: char format(char,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.format.impl.LowerCaseSegmentFormat: char format(char,com.github.houbb.segment.api.ISegmentContext)>
INTERFACE edge: c1 = interfaceinvoke r6.<com.github.houbb.segment.support.format.ISegmentFormat: char format(char,com.github.houbb.segment.api.ISegmentContext)>(c1, r7) in <com.github.houbb.segment.support.format.impl.AbstractSegmentFormatInit: char format(char,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.format.impl.AbstractSegmentFormatInit: char format(char,com.github.houbb.segment.api.ISegmentContext)>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.github.houbb.segment.constant.enums.HmmStateEnum: com.github.houbb.segment.constant.enums.HmmStateEnum[] values()> ==> <java.lang.Object: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.github.houbb.segment.constant.enums.HmmStateEnum: com.github.houbb.segment.constant.enums.HmmStateEnum[] values()> ==> <java.util.Locale: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.github.houbb.segment.constant.enums.HmmStateEnum: com.github.houbb.segment.constant.enums.HmmStateEnum[] values()> ==> <java.util.Date: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.github.houbb.segment.constant.enums.HmmStateEnum: com.github.houbb.segment.constant.enums.HmmStateEnum[] values()> ==> <java.util.Hashtable: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.github.houbb.segment.constant.enums.HmmStateEnum: com.github.houbb.segment.constant.enums.HmmStateEnum[] values()> ==> <java.lang.Enum: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.github.houbb.segment.constant.enums.HmmStateEnum: com.github.houbb.segment.constant.enums.HmmStateEnum[] values()> ==> <java.util.HashMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.github.houbb.segment.constant.enums.HmmStateEnum: com.github.houbb.segment.constant.enums.HmmStateEnum[] values()> ==> <java.util.ArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.github.houbb.segment.constant.enums.SegmentPosEnum: com.github.houbb.segment.constant.enums.SegmentPosEnum[] values()> ==> <java.lang.Object: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.github.houbb.segment.constant.enums.SegmentPosEnum: com.github.houbb.segment.constant.enums.SegmentPosEnum[] values()> ==> <java.lang.Enum: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.github.houbb.segment.constant.enums.SegmentPosEnum: com.github.houbb.segment.constant.enums.SegmentPosEnum[] values()> ==> <java.util.ArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.github.houbb.segment.constant.enums.SegmentPosEnum: com.github.houbb.segment.constant.enums.SegmentPosEnum[] values()> ==> <java.util.Hashtable: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.github.houbb.segment.constant.enums.SegmentPosEnum: com.github.houbb.segment.constant.enums.SegmentPosEnum[] values()> ==> <java.util.Date: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.github.houbb.segment.constant.enums.SegmentPosEnum: com.github.houbb.segment.constant.enums.SegmentPosEnum[] values()> ==> <java.util.Locale: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.github.houbb.segment.constant.enums.SegmentPosEnum: com.github.houbb.segment.constant.enums.SegmentPosEnum[] values()> ==> <java.util.HashMap: java.lang.Object clone()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <com.github.houbb.segment.constant.enums.SegmentPosEnum: java.lang.String toString()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SegmentPosEnum{code=\'") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3) in <com.github.houbb.segment.constant.enums.SegmentPosEnum: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39) in <com.github.houbb.segment.constant.enums.SegmentPosEnum: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", desc=\'") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) in <com.github.houbb.segment.constant.enums.SegmentPosEnum: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39) in <com.github.houbb.segment.constant.enums.SegmentPosEnum: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125) in <com.github.houbb.segment.constant.enums.SegmentPosEnum: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() in <com.github.houbb.segment.constant.enums.SegmentPosEnum: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <com.github.houbb.segment.exception.SegmentException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>(java.lang.String)>(r1) in <com.github.houbb.segment.exception.SegmentException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(r1, r2) in <com.github.houbb.segment.exception.SegmentException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1) in <com.github.houbb.segment.exception.SegmentException: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable,boolean,boolean)>(r1, r2, z0, z1) in <com.github.houbb.segment.exception.SegmentException: void <init>(java.lang.String,java.lang.Throwable,boolean,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable,boolean,boolean)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.github.houbb.segment.model.SegmentPos: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.github.houbb.segment.model.SegmentPos: void <init>()>() in <com.github.houbb.segment.model.SegmentPos: com.github.houbb.segment.model.SegmentPos of(java.lang.String,long)> ==> <com.github.houbb.segment.model.SegmentPos: void <init>()>
VIRTUAL edge: virtualinvoke $r0.<com.github.houbb.segment.model.SegmentPos: com.github.houbb.segment.model.SegmentPos count(long)>(l0) in <com.github.houbb.segment.model.SegmentPos: com.github.houbb.segment.model.SegmentPos of(java.lang.String,long)> ==> <com.github.houbb.segment.model.SegmentPos: com.github.houbb.segment.model.SegmentPos count(long)>
VIRTUAL edge: virtualinvoke $r0.<com.github.houbb.segment.model.SegmentPos: com.github.houbb.segment.model.SegmentPos pos(java.lang.String)>(r3) in <com.github.houbb.segment.model.SegmentPos: com.github.houbb.segment.model.SegmentPos of(java.lang.String,long)> ==> <com.github.houbb.segment.model.SegmentPos: com.github.houbb.segment.model.SegmentPos pos(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <com.github.houbb.segment.model.SegmentPos: java.lang.String toString()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SegmentPos{count=") in <com.github.houbb.segment.model.SegmentPos: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0) in <com.github.houbb.segment.model.SegmentPos: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(long)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", pos=\'") in <com.github.houbb.segment.model.SegmentPos: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5) in <com.github.houbb.segment.model.SegmentPos: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39) in <com.github.houbb.segment.model.SegmentPos: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125) in <com.github.houbb.segment.model.SegmentPos: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() in <com.github.houbb.segment.model.SegmentPos: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.github.houbb.segment.model.SegmentWordEntry: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.github.houbb.segment.model.SegmentWordEntry: void <init>()>() in <com.github.houbb.segment.model.SegmentWordEntry: com.github.houbb.segment.model.SegmentWordEntry newInstance()> ==> <com.github.houbb.segment.model.SegmentWordEntry: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <com.github.houbb.segment.model.SegmentWordEntry: java.lang.String toString()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WordEntry{word=\'") in <com.github.houbb.segment.model.SegmentWordEntry: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3) in <com.github.houbb.segment.model.SegmentWordEntry: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39) in <com.github.houbb.segment.model.SegmentWordEntry: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", count=") in <com.github.houbb.segment.model.SegmentWordEntry: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0) in <com.github.houbb.segment.model.SegmentWordEntry: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(long)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", type=\'") in <com.github.houbb.segment.model.SegmentWordEntry: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9) in <com.github.houbb.segment.model.SegmentWordEntry: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39) in <com.github.houbb.segment.model.SegmentWordEntry: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125) in <com.github.houbb.segment.model.SegmentWordEntry: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>() in <com.github.houbb.segment.model.SegmentWordEntry: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.github.houbb.segment.support.data.impl.AbstractSegmentData: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: $r1 = specialinvoke r0.<com.github.houbb.segment.support.data.impl.AbstractSegmentData: java.util.Map getFreqMap()>() in <com.github.houbb.segment.support.data.impl.AbstractSegmentData: java.util.Set getWordSet()> ==> <com.github.houbb.segment.support.data.impl.AbstractSegmentData: java.util.Map getFreqMap()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>() in <com.github.houbb.segment.support.data.impl.AbstractSegmentData: java.util.Set getWordSet()> ==> <java.util.Hashtable: java.util.Set keySet()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>() in <com.github.houbb.segment.support.data.impl.AbstractSegmentData: java.util.Set getWordSet()> ==> <java.util.HashMap: java.util.Set keySet()>
SPECIAL edge: r1 = specialinvoke r0.<com.github.houbb.segment.support.data.impl.AbstractSegmentData: java.util.Map getFreqMap()>() in <com.github.houbb.segment.support.data.impl.AbstractSegmentData: java.lang.Double getFreq(java.lang.String)> ==> <com.github.houbb.segment.support.data.impl.AbstractSegmentData: java.util.Map getFreqMap()>
INTERFACE edge: $r3 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) in <com.github.houbb.segment.support.data.impl.AbstractSegmentData: java.lang.Double getFreq(java.lang.String)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) in <com.github.houbb.segment.support.data.impl.AbstractSegmentData: java.lang.Double getFreq(java.lang.String)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $d0 = virtualinvoke $r4.<com.github.houbb.segment.support.normalization.NormalizationResult: double minFreq()>() in <com.github.houbb.segment.support.data.impl.AbstractSegmentData: java.lang.Double getFreq(java.lang.String)> ==> <com.github.houbb.segment.support.normalization.NormalizationResult: double minFreq()>
SPECIAL edge: r1 = specialinvoke r0.<com.github.houbb.segment.support.data.impl.AbstractSegmentData: com.github.houbb.segment.support.normalization.NormalizationResult normalization()>() in <com.github.houbb.segment.support.data.impl.AbstractSegmentData: double getMinFreq()> ==> <com.github.houbb.segment.support.data.impl.AbstractSegmentData: com.github.houbb.segment.support.normalization.NormalizationResult normalization()>
VIRTUAL edge: $d0 = virtualinvoke r1.<com.github.houbb.segment.support.normalization.NormalizationResult: double minFreq()>() in <com.github.houbb.segment.support.data.impl.AbstractSegmentData: double getMinFreq()> ==> <com.github.houbb.segment.support.normalization.NormalizationResult: double minFreq()>
STATIC edge: $z0 = staticinvoke <com.github.houbb.heaven.util.lang.ObjectUtil: boolean isNotNull(java.lang.Object)>($r0) in <com.github.houbb.segment.support.data.impl.AbstractSegmentData: com.github.houbb.segment.support.normalization.NormalizationResult normalization()> ==> <com.github.houbb.heaven.util.lang.ObjectUtil: boolean isNotNull(java.lang.Object)>
STATIC edge: $z1 = staticinvoke <com.github.houbb.heaven.util.lang.ObjectUtil: boolean isNull(java.lang.Object)>($r2) in <com.github.houbb.segment.support.data.impl.AbstractSegmentData: com.github.houbb.segment.support.normalization.NormalizationResult normalization()> ==> <com.github.houbb.heaven.util.lang.ObjectUtil: boolean isNull(java.lang.Object)>
SPECIAL edge: r1 = specialinvoke r0.<com.github.houbb.segment.support.data.impl.AbstractSegmentData: com.github.houbb.segment.support.normalization.NormalizationResult normalization()>() in <com.github.houbb.segment.support.data.impl.AbstractSegmentData: boolean contains(java.lang.String)> ==> <com.github.houbb.segment.support.data.impl.AbstractSegmentData: com.github.houbb.segment.support.normalization.NormalizationResult normalization()>
VIRTUAL edge: $r2 = virtualinvoke r1.<com.github.houbb.segment.support.normalization.NormalizationResult: java.util.Map freqMap()>() in <com.github.houbb.segment.support.data.impl.AbstractSegmentData: boolean contains(java.lang.String)> ==> <com.github.houbb.segment.support.normalization.NormalizationResult: java.util.Map freqMap()>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r3) in <com.github.houbb.segment.support.data.impl.AbstractSegmentData: boolean contains(java.lang.String)> ==> <java.util.HashMap: boolean containsKey(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r3) in <com.github.houbb.segment.support.data.impl.AbstractSegmentData: boolean contains(java.lang.String)> ==> <java.util.Hashtable: boolean containsKey(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.github.houbb.segment.support.normalization.NormalizationResult: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <com.github.houbb.segment.support.normalization.NormalizationResult: java.lang.String toString()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NormalizationResult{minCount=") in <com.github.houbb.segment.support.normalization.NormalizationResult: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0) in <com.github.houbb.segment.support.normalization.NormalizationResult: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(long)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", maxCount=") in <com.github.houbb.segment.support.normalization.NormalizationResult: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1) in <com.github.houbb.segment.support.normalization.NormalizationResult: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(long)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", minFreq=") in <com.github.houbb.segment.support.normalization.NormalizationResult: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0) in <com.github.houbb.segment.support.normalization.NormalizationResult: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(double)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", maxFreq=") in <com.github.houbb.segment.support.normalization.NormalizationResult: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d1) in <com.github.houbb.segment.support.normalization.NormalizationResult: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(double)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", freqMap=") in <com.github.houbb.segment.support.normalization.NormalizationResult: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11) in <com.github.houbb.segment.support.normalization.NormalizationResult: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125) in <com.github.houbb.segment.support.normalization.NormalizationResult: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>() in <com.github.houbb.segment.support.normalization.NormalizationResult: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.github.houbb.segment.support.data.impl.AbstractSegmentData: void <init>()>() in <com.github.houbb.segment.support.data.impl.SegmentDefineData: void <init>()> ==> <com.github.houbb.segment.support.data.impl.AbstractSegmentData: void <init>()>
SPECIAL edge: specialinvoke r0.<com.github.houbb.segment.support.data.impl.AbstractSegmentData: void <init>()>() in <com.github.houbb.segment.support.data.impl.SegmentMixedData: void <init>()> ==> <com.github.houbb.segment.support.data.impl.AbstractSegmentData: void <init>()>
SPECIAL edge: specialinvoke r0.<com.github.houbb.segment.support.data.impl.AbstractSegmentData: void <init>()>() in <com.github.houbb.segment.support.data.impl.SegmentSystemData: void <init>()> ==> <com.github.houbb.segment.support.data.impl.AbstractSegmentData: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.github.houbb.segment.support.format.impl.ChineseTsSegmentFormat: void <init>()> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $r2 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1) in <com.github.houbb.segment.support.format.impl.ChineseTsSegmentFormat: char format(char,com.github.houbb.segment.api.ISegmentContext)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r2 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1) in <com.github.houbb.segment.support.format.impl.ChineseTsSegmentFormat: char format(char,com.github.houbb.segment.api.ISegmentContext)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $c1 = virtualinvoke r3.<java.lang.Character: char charValue()>() in <com.github.houbb.segment.support.format.impl.ChineseTsSegmentFormat: char format(char,com.github.houbb.segment.api.ISegmentContext)> ==> <java.lang.Character: char charValue()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.github.houbb.segment.support.format.impl.HalfWidthSegmentFormat: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.github.houbb.segment.support.format.impl.LowerCaseSegmentFormat: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.github.houbb.segment.support.format.impl.NoneSegmentFormat: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.github.houbb.segment.support.normalization.impl.LogNormalization: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.github.houbb.segment.support.normalization.NormalizationResult: void <init>()>() in <com.github.houbb.segment.support.normalization.impl.LogNormalization: com.github.houbb.segment.support.normalization.NormalizationResult normalization(java.util.List)> ==> <com.github.houbb.segment.support.normalization.NormalizationResult: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r0.<com.github.houbb.segment.support.normalization.NormalizationResult: com.github.houbb.segment.support.normalization.NormalizationResult minCount(long)>(l6) in <com.github.houbb.segment.support.normalization.impl.LogNormalization: com.github.houbb.segment.support.normalization.NormalizationResult normalization(java.util.List)> ==> <com.github.houbb.segment.support.normalization.NormalizationResult: com.github.houbb.segment.support.normalization.NormalizationResult minCount(long)>
INTERFACE edge: r14 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>() in <com.github.houbb.segment.support.normalization.impl.LogNormalization: com.github.houbb.segment.support.normalization.NormalizationResult normalization(java.util.List)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $i0 = interfaceinvoke r2.<java.util.List: int size()>() in <com.github.houbb.segment.support.normalization.impl.LogNormalization: com.github.houbb.segment.support.normalization.NormalizationResult normalization(java.util.List)> ==> <java.util.ArrayList: int size()>
INTERFACE edge: r17 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>() in <com.github.houbb.segment.support.normalization.impl.LogNormalization: com.github.houbb.segment.support.normalization.NormalizationResult normalization(java.util.List)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
VIRTUAL edge: l8 = virtualinvoke r15.<com.github.houbb.segment.model.SegmentWordEntry: long count()>() in <com.github.houbb.segment.support.normalization.impl.LogNormalization: com.github.houbb.segment.support.normalization.NormalizationResult normalization(java.util.List)> ==> <com.github.houbb.segment.model.SegmentWordEntry: long count()>
VIRTUAL edge: $l1 = virtualinvoke r18.<com.github.houbb.segment.model.SegmentWordEntry: long count()>() in <com.github.houbb.segment.support.normalization.impl.LogNormalization: com.github.houbb.segment.support.normalization.NormalizationResult normalization(java.util.List)> ==> <com.github.houbb.segment.model.SegmentWordEntry: long count()>
VIRTUAL edge: $r9 = virtualinvoke r18.<com.github.houbb.segment.model.SegmentWordEntry: java.lang.String word()>() in <com.github.houbb.segment.support.normalization.impl.LogNormalization: com.github.houbb.segment.support.normalization.NormalizationResult normalization(java.util.List)> ==> <com.github.houbb.segment.model.SegmentWordEntry: java.lang.String word()>
INTERFACE edge: interfaceinvoke r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r10) in <com.github.houbb.segment.support.normalization.impl.LogNormalization: com.github.houbb.segment.support.normalization.NormalizationResult normalization(java.util.List)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r10) in <com.github.houbb.segment.support.normalization.impl.LogNormalization: com.github.houbb.segment.support.normalization.NormalizationResult normalization(java.util.List)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<com.github.houbb.segment.support.normalization.NormalizationResult: com.github.houbb.segment.support.normalization.NormalizationResult maxCount(long)>(l7) in <com.github.houbb.segment.support.normalization.impl.LogNormalization: com.github.houbb.segment.support.normalization.NormalizationResult normalization(java.util.List)> ==> <com.github.houbb.segment.support.normalization.NormalizationResult: com.github.houbb.segment.support.normalization.NormalizationResult maxCount(long)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<com.github.houbb.segment.support.normalization.NormalizationResult: com.github.houbb.segment.support.normalization.NormalizationResult minFreq(double)>(d7) in <com.github.houbb.segment.support.normalization.impl.LogNormalization: com.github.houbb.segment.support.normalization.NormalizationResult normalization(java.util.List)> ==> <com.github.houbb.segment.support.normalization.NormalizationResult: com.github.houbb.segment.support.normalization.NormalizationResult minFreq(double)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<com.github.houbb.segment.support.normalization.NormalizationResult: com.github.houbb.segment.support.normalization.NormalizationResult maxFreq(double)>(d8) in <com.github.houbb.segment.support.normalization.impl.LogNormalization: com.github.houbb.segment.support.normalization.NormalizationResult normalization(java.util.List)> ==> <com.github.houbb.segment.support.normalization.NormalizationResult: com.github.houbb.segment.support.normalization.NormalizationResult maxFreq(double)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<com.github.houbb.segment.support.normalization.NormalizationResult: com.github.houbb.segment.support.normalization.NormalizationResult freqMap(java.util.Map)>(r16) in <com.github.houbb.segment.support.normalization.impl.LogNormalization: com.github.houbb.segment.support.normalization.NormalizationResult normalization(java.util.List)> ==> <com.github.houbb.segment.support.normalization.NormalizationResult: com.github.houbb.segment.support.normalization.NormalizationResult freqMap(java.util.Map)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.github.houbb.segment.support.segment.impl.FastSegment: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.lang.String: int length()>() in <com.github.houbb.segment.support.segment.impl.FastSegment: java.util.List segment(java.lang.String,com.github.houbb.segment.api.ISegmentContext)> ==> <java.lang.String: int length()>
INTERFACE edge: r4 = interfaceinvoke r1.<com.github.houbb.segment.support.segment.strategy.ISegmentStrategy: java.util.List segment(java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)>(r2, i5, r3) in <com.github.houbb.segment.support.segment.impl.FastSegment: java.util.List segment(java.lang.String,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.strategy.impl.SimpleSegmentStrategy: java.util.List segment(java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)>
INTERFACE edge: r4 = interfaceinvoke r1.<com.github.houbb.segment.support.segment.strategy.ISegmentStrategy: java.util.List segment(java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)>(r2, i5, r3) in <com.github.houbb.segment.support.segment.impl.FastSegment: java.util.List segment(java.lang.String,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.strategy.impl.AbstractSegmentStrategy: java.util.List segment(java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<com.github.houbb.segment.support.segment.mode.SegmentModeContext: com.github.houbb.segment.support.segment.mode.SegmentModeContext segmentContext(com.github.houbb.segment.api.ISegmentContext)>(r3) in <com.github.houbb.segment.support.segment.impl.FastSegment: java.util.List segment(java.lang.String,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.mode.SegmentModeContext: com.github.houbb.segment.support.segment.mode.SegmentModeContext segmentContext(com.github.houbb.segment.api.ISegmentContext)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<com.github.houbb.segment.support.segment.mode.SegmentModeContext: com.github.houbb.segment.support.segment.mode.SegmentModeContext string(java.lang.String)>(r2) in <com.github.houbb.segment.support.segment.impl.FastSegment: java.util.List segment(java.lang.String,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.mode.SegmentModeContext: com.github.houbb.segment.support.segment.mode.SegmentModeContext string(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<com.github.houbb.segment.support.segment.mode.SegmentModeContext: com.github.houbb.segment.support.segment.mode.SegmentModeContext startIndex(int)>(i5) in <com.github.houbb.segment.support.segment.impl.FastSegment: java.util.List segment(java.lang.String,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.mode.SegmentModeContext: com.github.houbb.segment.support.segment.mode.SegmentModeContext startIndex(int)>
VIRTUAL edge: r9 = virtualinvoke $r8.<com.github.houbb.segment.support.segment.mode.SegmentModeContext: com.github.houbb.segment.support.segment.mode.SegmentModeContext resultList(java.util.List)>(r4) in <com.github.houbb.segment.support.segment.impl.FastSegment: java.util.List segment(java.lang.String,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.mode.SegmentModeContext: com.github.houbb.segment.support.segment.mode.SegmentModeContext resultList(java.util.List)>
INTERFACE edge: $r10 = interfaceinvoke r3.<com.github.houbb.segment.api.ISegmentContext: com.github.houbb.segment.support.segment.mode.ISegmentMode mode()>() in <com.github.houbb.segment.support.segment.impl.FastSegment: java.util.List segment(java.lang.String,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.impl.SegmentContext: com.github.houbb.segment.support.segment.mode.ISegmentMode mode()>
INTERFACE edge: r11 = interfaceinvoke $r10.<com.github.houbb.segment.support.segment.mode.ISegmentMode: java.util.List select(com.github.houbb.segment.support.segment.mode.SegmentModeContext)>(r9) in <com.github.houbb.segment.support.segment.impl.FastSegment: java.util.List segment(java.lang.String,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.mode.impl.SingleSegmentMode: java.util.List select(com.github.houbb.segment.support.segment.mode.SegmentModeContext)>
INTERFACE edge: r11 = interfaceinvoke $r10.<com.github.houbb.segment.support.segment.mode.ISegmentMode: java.util.List select(com.github.houbb.segment.support.segment.mode.SegmentModeContext)>(r9) in <com.github.houbb.segment.support.segment.impl.FastSegment: java.util.List segment(java.lang.String,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.mode.impl.AbstractSegmentMode: java.util.List select(com.github.houbb.segment.support.segment.mode.SegmentModeContext)>
INTERFACE edge: r11 = interfaceinvoke $r10.<com.github.houbb.segment.support.segment.mode.ISegmentMode: java.util.List select(com.github.houbb.segment.support.segment.mode.SegmentModeContext)>(r9) in <com.github.houbb.segment.support.segment.impl.FastSegment: java.util.List segment(java.lang.String,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.List select(com.github.houbb.segment.support.segment.mode.SegmentModeContext)>
INTERFACE edge: interfaceinvoke r0.<java.util.List: boolean addAll(java.util.Collection)>(r11) in <com.github.houbb.segment.support.segment.impl.FastSegment: java.util.List segment(java.lang.String,com.github.houbb.segment.api.ISegmentContext)> ==> <java.util.ArrayList: boolean addAll(java.util.Collection)>
INTERFACE edge: $i2 = interfaceinvoke r11.<java.util.List: int size()>() in <com.github.houbb.segment.support.segment.impl.FastSegment: java.util.List segment(java.lang.String,com.github.houbb.segment.api.ISegmentContext)> ==> <java.util.ArrayList: int size()>
INTERFACE edge: $r12 = interfaceinvoke r11.<java.util.List: java.lang.Object get(int)>($i3) in <com.github.houbb.segment.support.segment.impl.FastSegment: java.util.List segment(java.lang.String,com.github.houbb.segment.api.ISegmentContext)> ==> <java.util.ArrayList: java.lang.Object get(int)>
INTERFACE edge: $i4 = interfaceinvoke r13.<com.github.houbb.segment.api.ISegmentResult: int endIndex()>() in <com.github.houbb.segment.support.segment.impl.FastSegment: java.util.List segment(java.lang.String,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.impl.SegmentResult: int endIndex()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.github.houbb.segment.support.segment.impl.PreciseSegment: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: i0 = virtualinvoke r1.<java.lang.String: int length()>() in <com.github.houbb.segment.support.segment.impl.PreciseSegment: java.util.List segment(java.lang.String,com.github.houbb.segment.api.ISegmentContext)> ==> <java.lang.String: int length()>
VIRTUAL edge: c4 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i3) in <com.github.houbb.segment.support.segment.impl.PreciseSegment: java.util.List segment(java.lang.String,com.github.houbb.segment.api.ISegmentContext)> ==> <java.lang.String: char charAt(int)>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() in <com.github.houbb.segment.support.segment.impl.PreciseSegment: java.util.List segment(java.lang.String,com.github.houbb.segment.api.ISegmentContext)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c4) in <com.github.houbb.segment.support.segment.impl.PreciseSegment: java.util.List segment(java.lang.String,com.github.houbb.segment.api.ISegmentContext)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: i1 = virtualinvoke $r2.<java.lang.StringBuilder: int length()>() in <com.github.houbb.segment.support.segment.impl.PreciseSegment: java.util.List segment(java.lang.String,com.github.houbb.segment.api.ISegmentContext)> ==> <java.lang.StringBuilder: int length()>
VIRTUAL edge: i5 = virtualinvoke $r2.<java.lang.StringBuilder: int length()>() in <com.github.houbb.segment.support.segment.impl.PreciseSegment: java.util.List segment(java.lang.String,com.github.houbb.segment.api.ISegmentContext)> ==> <java.lang.StringBuilder: int length()>
SPECIAL edge: $r8 = specialinvoke r4.<com.github.houbb.segment.support.segment.impl.PreciseSegment: java.util.List getSegmentResultList(java.lang.StringBuilder,int,com.github.houbb.segment.api.ISegmentContext)>($r2, i2, r5) in <com.github.houbb.segment.support.segment.impl.PreciseSegment: java.util.List segment(java.lang.String,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.impl.PreciseSegment: java.util.List getSegmentResultList(java.lang.StringBuilder,int,com.github.houbb.segment.api.ISegmentContext)>
SPECIAL edge: $r7 = specialinvoke r4.<com.github.houbb.segment.support.segment.impl.PreciseSegment: java.util.List singleCharSegment(java.lang.String,int)>(r1, i3) in <com.github.houbb.segment.support.segment.impl.PreciseSegment: java.util.List segment(java.lang.String,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.impl.PreciseSegment: java.util.List singleCharSegment(java.lang.String,int)>
SPECIAL edge: $r6 = specialinvoke r4.<com.github.houbb.segment.support.segment.impl.PreciseSegment: java.util.List getSegmentResultList(java.lang.StringBuilder,int,com.github.houbb.segment.api.ISegmentContext)>($r2, i6, r5) in <com.github.houbb.segment.support.segment.impl.PreciseSegment: java.util.List segment(java.lang.String,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.impl.PreciseSegment: java.util.List getSegmentResultList(java.lang.StringBuilder,int,com.github.houbb.segment.api.ISegmentContext)>
INTERFACE edge: interfaceinvoke r0.<java.util.List: boolean addAll(java.util.Collection)>($r8) in <com.github.houbb.segment.support.segment.impl.PreciseSegment: java.util.List segment(java.lang.String,com.github.houbb.segment.api.ISegmentContext)> ==> <java.util.ArrayList: boolean addAll(java.util.Collection)>
INTERFACE edge: interfaceinvoke r0.<java.util.List: boolean addAll(java.util.Collection)>($r7) in <com.github.houbb.segment.support.segment.impl.PreciseSegment: java.util.List segment(java.lang.String,com.github.houbb.segment.api.ISegmentContext)> ==> <java.util.ArrayList: boolean addAll(java.util.Collection)>
INTERFACE edge: interfaceinvoke r0.<java.util.List: boolean addAll(java.util.Collection)>($r6) in <com.github.houbb.segment.support.segment.impl.PreciseSegment: java.util.List segment(java.lang.String,com.github.houbb.segment.api.ISegmentContext)> ==> <java.util.ArrayList: boolean addAll(java.util.Collection)>
STATIC edge: $r4 = staticinvoke <com.github.houbb.segment.support.segment.mode.SegmentModeContext: com.github.houbb.segment.support.segment.mode.SegmentModeContext newInstance()>() in <com.github.houbb.segment.support.segment.impl.PreciseSegment: java.util.List getSegmentResultList(java.lang.StringBuilder,int,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.mode.SegmentModeContext: com.github.houbb.segment.support.segment.mode.SegmentModeContext newInstance()>
STATIC edge: $r0 = staticinvoke <com.github.houbb.segment.support.segment.mode.SegmentModeContext: com.github.houbb.segment.support.segment.mode.SegmentModeContext newInstance()>() in <com.github.houbb.segment.support.segment.impl.PreciseSegment: java.util.List singleCharSegment(java.lang.String,int)> ==> <com.github.houbb.segment.support.segment.mode.SegmentModeContext: com.github.houbb.segment.support.segment.mode.SegmentModeContext newInstance()>
STATIC edge: $r4 = staticinvoke <com.github.houbb.segment.support.segment.mode.impl.SegmentModes: com.github.houbb.segment.support.segment.mode.ISegmentMode single()>() in <com.github.houbb.segment.support.segment.impl.PreciseSegment: java.util.List singleCharSegment(java.lang.String,int)> ==> <com.github.houbb.segment.support.segment.mode.impl.SegmentModes: com.github.houbb.segment.support.segment.mode.ISegmentMode single()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.github.houbb.segment.support.segment.impl.Segment: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: r3 = specialinvoke r1.<com.github.houbb.segment.support.segment.impl.Segment: com.github.houbb.segment.api.ISegment getSegment(com.github.houbb.segment.api.ISegmentContext)>(r2) in <com.github.houbb.segment.support.segment.impl.Segment: java.util.List segment(java.lang.String,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.impl.Segment: com.github.houbb.segment.api.ISegment getSegment(com.github.houbb.segment.api.ISegmentContext)>
INTERFACE edge: r6 = interfaceinvoke r3.<com.github.houbb.segment.api.ISegment: java.util.List segment(java.lang.String,com.github.houbb.segment.api.ISegmentContext)>(r0, r2) in <com.github.houbb.segment.support.segment.impl.Segment: java.util.List segment(java.lang.String,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.impl.Segment: java.util.List segment(java.lang.String,com.github.houbb.segment.api.ISegmentContext)>
INTERFACE edge: r6 = interfaceinvoke r3.<com.github.houbb.segment.api.ISegment: java.util.List segment(java.lang.String,com.github.houbb.segment.api.ISegmentContext)>(r0, r2) in <com.github.houbb.segment.support.segment.impl.Segment: java.util.List segment(java.lang.String,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.impl.PreciseSegment: java.util.List segment(java.lang.String,com.github.houbb.segment.api.ISegmentContext)>
INTERFACE edge: r6 = interfaceinvoke r3.<com.github.houbb.segment.api.ISegment: java.util.List segment(java.lang.String,com.github.houbb.segment.api.ISegmentContext)>(r0, r2) in <com.github.houbb.segment.support.segment.impl.Segment: java.util.List segment(java.lang.String,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.impl.FastSegment: java.util.List segment(java.lang.String,com.github.houbb.segment.api.ISegmentContext)>
INTERFACE edge: r4 = interfaceinvoke r2.<com.github.houbb.segment.api.ISegmentContext: com.github.houbb.segment.support.tagging.pos.tag.ISegmentPosTagging posTagging()>() in <com.github.houbb.segment.support.segment.impl.Segment: java.util.List segment(java.lang.String,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.impl.SegmentContext: com.github.houbb.segment.support.tagging.pos.tag.ISegmentPosTagging posTagging()>
INTERFACE edge: interfaceinvoke r4.<com.github.houbb.segment.support.tagging.pos.tag.ISegmentPosTagging: void posTagging(java.util.List,com.github.houbb.segment.api.ISegmentContext)>(r6, r2) in <com.github.houbb.segment.support.segment.impl.Segment: java.util.List segment(java.lang.String,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.tagging.pos.tag.impl.SimpleSegmentPosTagging: void posTagging(java.util.List,com.github.houbb.segment.api.ISegmentContext)>
INTERFACE edge: interfaceinvoke r4.<com.github.houbb.segment.support.tagging.pos.tag.ISegmentPosTagging: void posTagging(java.util.List,com.github.houbb.segment.api.ISegmentContext)>(r6, r2) in <com.github.houbb.segment.support.segment.impl.Segment: java.util.List segment(java.lang.String,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.tagging.pos.tag.impl.NoneSegmentPosTagging: void posTagging(java.util.List,com.github.houbb.segment.api.ISegmentContext)>
STATIC edge: $r3 = staticinvoke <com.github.houbb.segment.support.segment.impl.Segments: com.github.houbb.segment.api.ISegment fast()>() in <com.github.houbb.segment.support.segment.impl.Segment: com.github.houbb.segment.api.ISegment getSegment(com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.impl.Segments: com.github.houbb.segment.api.ISegment fast()>
STATIC edge: $r2 = staticinvoke <com.github.houbb.segment.support.segment.impl.Segments: com.github.houbb.segment.api.ISegment precise()>() in <com.github.houbb.segment.support.segment.impl.Segment: com.github.houbb.segment.api.ISegment getSegment(com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.impl.Segments: com.github.houbb.segment.api.ISegment precise()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.github.houbb.segment.support.segment.impl.SegmentResult: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.github.houbb.segment.support.segment.impl.SegmentResult: void <init>()>() in <com.github.houbb.segment.support.segment.impl.SegmentResult: com.github.houbb.segment.support.segment.impl.SegmentResult newInstance()> ==> <com.github.houbb.segment.support.segment.impl.SegmentResult: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() in <com.github.houbb.segment.support.segment.impl.SegmentResult: boolean equals(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() in <com.github.houbb.segment.support.segment.impl.SegmentResult: boolean equals(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
SPECIAL edge: specialinvoke $r13.<java.lang.StringBuilder: void <init>()>() in <com.github.houbb.segment.support.segment.impl.SegmentResult: java.lang.String toString()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14) in <com.github.houbb.segment.support.segment.impl.SegmentResult: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[") in <com.github.houbb.segment.support.segment.impl.SegmentResult: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2) in <com.github.houbb.segment.support.segment.impl.SegmentResult: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",") in <com.github.houbb.segment.support.segment.impl.SegmentResult: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3) in <com.github.houbb.segment.support.segment.impl.SegmentResult: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")") in <com.github.houbb.segment.support.segment.impl.SegmentResult: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>() in <com.github.houbb.segment.support.segment.impl.SegmentResult: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() in <com.github.houbb.segment.support.segment.impl.SegmentResult: java.lang.String toString()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3) in <com.github.houbb.segment.support.segment.impl.SegmentResult: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[") in <com.github.houbb.segment.support.segment.impl.SegmentResult: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <com.github.houbb.segment.support.segment.impl.SegmentResult: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",") in <com.github.houbb.segment.support.segment.impl.SegmentResult: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1) in <com.github.houbb.segment.support.segment.impl.SegmentResult: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")/") in <com.github.houbb.segment.support.segment.impl.SegmentResult: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10) in <com.github.houbb.segment.support.segment.impl.SegmentResult: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>() in <com.github.houbb.segment.support.segment.impl.SegmentResult: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.github.houbb.segment.support.segment.impl.SegmentResult: com.github.houbb.segment.support.segment.impl.SegmentResult pos(java.lang.String)>(r1) in <com.github.houbb.segment.support.segment.impl.SegmentResult: com.github.houbb.segment.api.ISegmentResult pos(java.lang.String)> ==> <com.github.houbb.segment.support.segment.impl.SegmentResult: com.github.houbb.segment.support.segment.impl.SegmentResult pos(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.github.houbb.segment.support.segment.impl.SegmentResult: com.github.houbb.segment.support.segment.impl.SegmentResult endIndex(int)>(i0) in <com.github.houbb.segment.support.segment.impl.SegmentResult: com.github.houbb.segment.api.ISegmentResult endIndex(int)> ==> <com.github.houbb.segment.support.segment.impl.SegmentResult: com.github.houbb.segment.support.segment.impl.SegmentResult endIndex(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.github.houbb.segment.support.segment.impl.SegmentResult: com.github.houbb.segment.support.segment.impl.SegmentResult startIndex(int)>(i0) in <com.github.houbb.segment.support.segment.impl.SegmentResult: com.github.houbb.segment.api.ISegmentResult startIndex(int)> ==> <com.github.houbb.segment.support.segment.impl.SegmentResult: com.github.houbb.segment.support.segment.impl.SegmentResult startIndex(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.github.houbb.segment.support.segment.impl.SegmentResult: com.github.houbb.segment.support.segment.impl.SegmentResult word(java.lang.String)>(r1) in <com.github.houbb.segment.support.segment.impl.SegmentResult: com.github.houbb.segment.api.ISegmentResult word(java.lang.String)> ==> <com.github.houbb.segment.support.segment.impl.SegmentResult: com.github.houbb.segment.support.segment.impl.SegmentResult word(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.github.houbb.segment.support.segment.mode.impl.AbstractSegmentMode: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.github.houbb.segment.support.segment.mode.SegmentModeContext: java.util.List resultList()>() in <com.github.houbb.segment.support.segment.mode.impl.AbstractSegmentMode: java.util.List select(com.github.houbb.segment.support.segment.mode.SegmentModeContext)> ==> <com.github.houbb.segment.support.segment.mode.SegmentModeContext: java.util.List resultList()>
INTERFACE edge: $r5 = interfaceinvoke $r4.<com.github.houbb.segment.support.segment.mode.ISegmentMode: java.util.List select(com.github.houbb.segment.support.segment.mode.SegmentModeContext)>(r0) in <com.github.houbb.segment.support.segment.mode.impl.AbstractSegmentMode: java.util.List select(com.github.houbb.segment.support.segment.mode.SegmentModeContext)> ==> <com.github.houbb.segment.support.segment.mode.impl.AbstractSegmentMode: java.util.List select(com.github.houbb.segment.support.segment.mode.SegmentModeContext)>
INTERFACE edge: $r5 = interfaceinvoke $r4.<com.github.houbb.segment.support.segment.mode.ISegmentMode: java.util.List select(com.github.houbb.segment.support.segment.mode.SegmentModeContext)>(r0) in <com.github.houbb.segment.support.segment.mode.impl.AbstractSegmentMode: java.util.List select(com.github.houbb.segment.support.segment.mode.SegmentModeContext)> ==> <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.List select(com.github.houbb.segment.support.segment.mode.SegmentModeContext)>
INTERFACE edge: $r5 = interfaceinvoke $r4.<com.github.houbb.segment.support.segment.mode.ISegmentMode: java.util.List select(com.github.houbb.segment.support.segment.mode.SegmentModeContext)>(r0) in <com.github.houbb.segment.support.segment.mode.impl.AbstractSegmentMode: java.util.List select(com.github.houbb.segment.support.segment.mode.SegmentModeContext)> ==> <com.github.houbb.segment.support.segment.mode.impl.SingleSegmentMode: java.util.List select(com.github.houbb.segment.support.segment.mode.SegmentModeContext)>
INTERFACE edge: i0 = interfaceinvoke r1.<java.util.List: int size()>() in <com.github.houbb.segment.support.segment.mode.impl.AbstractSegmentMode: java.util.List select(com.github.houbb.segment.support.segment.mode.SegmentModeContext)> ==> <java.util.ArrayList: int size()>
VIRTUAL edge: $r3 = virtualinvoke r2.<com.github.houbb.segment.support.segment.mode.impl.AbstractSegmentMode: java.util.List doSelect(com.github.houbb.segment.support.segment.mode.SegmentModeContext)>(r0) in <com.github.houbb.segment.support.segment.mode.impl.AbstractSegmentMode: java.util.List select(com.github.houbb.segment.support.segment.mode.SegmentModeContext)> ==> <com.github.houbb.segment.support.segment.mode.impl.IndexSegmentMode: java.util.List doSelect(com.github.houbb.segment.support.segment.mode.SegmentModeContext)>
VIRTUAL edge: $r3 = virtualinvoke r2.<com.github.houbb.segment.support.segment.mode.impl.AbstractSegmentMode: java.util.List doSelect(com.github.houbb.segment.support.segment.mode.SegmentModeContext)>(r0) in <com.github.houbb.segment.support.segment.mode.impl.AbstractSegmentMode: java.util.List select(com.github.houbb.segment.support.segment.mode.SegmentModeContext)> ==> <com.github.houbb.segment.support.segment.mode.impl.GreedyLengthSegmentMode: java.util.List doSelect(com.github.houbb.segment.support.segment.mode.SegmentModeContext)>
VIRTUAL edge: $r3 = virtualinvoke r2.<com.github.houbb.segment.support.segment.mode.impl.AbstractSegmentMode: java.util.List doSelect(com.github.houbb.segment.support.segment.mode.SegmentModeContext)>(r0) in <com.github.houbb.segment.support.segment.mode.impl.AbstractSegmentMode: java.util.List select(com.github.houbb.segment.support.segment.mode.SegmentModeContext)> ==> <com.github.houbb.segment.support.segment.mode.impl.GreedyFrequencySegmentMode: java.util.List doSelect(com.github.houbb.segment.support.segment.mode.SegmentModeContext)>
VIRTUAL edge: $r3 = virtualinvoke r2.<com.github.houbb.segment.support.segment.mode.impl.AbstractSegmentMode: java.util.List doSelect(com.github.houbb.segment.support.segment.mode.SegmentModeContext)>(r0) in <com.github.houbb.segment.support.segment.mode.impl.AbstractSegmentMode: java.util.List select(com.github.houbb.segment.support.segment.mode.SegmentModeContext)> ==> <com.github.houbb.segment.support.segment.mode.impl.AllSegmentMode: java.util.List doSelect(com.github.houbb.segment.support.segment.mode.SegmentModeContext)>
STATIC edge: r0 = staticinvoke <com.github.houbb.heaven.util.guava.Guavas: java.util.List newArrayList()>() in <com.github.houbb.segment.support.segment.mode.impl.IndexSegmentMode: java.util.List doSelect(com.github.houbb.segment.support.segment.mode.SegmentModeContext)> ==> <com.github.houbb.heaven.util.guava.Guavas: java.util.List newArrayList()>
CLINIT edge: staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(r1, $r2) in <com.github.houbb.segment.support.segment.mode.impl.GreedyLengthSegmentMode: java.util.List doSelect(com.github.houbb.segment.support.segment.mode.SegmentModeContext)> ==> <java.util.Collections: void <clinit>()>
STATIC edge: $r6 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(r5) in <com.github.houbb.segment.support.segment.mode.impl.GreedyLengthSegmentMode: java.util.List doSelect(com.github.houbb.segment.support.segment.mode.SegmentModeContext)> ==> <java.util.Collections: java.util.List singletonList(java.lang.Object)>
STATIC edge: staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(r1, $r2) in <com.github.houbb.segment.support.segment.mode.impl.GreedyLengthSegmentMode: java.util.List doSelect(com.github.houbb.segment.support.segment.mode.SegmentModeContext)> ==> <java.util.Collections: void sort(java.util.List,java.util.Comparator)>
CLINIT edge: staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(r4, $r5) in <com.github.houbb.segment.support.segment.mode.impl.GreedyFrequencySegmentMode: java.util.List doSelect(com.github.houbb.segment.support.segment.mode.SegmentModeContext)> ==> <java.util.Collections: void <clinit>()>
STATIC edge: $r9 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(r8) in <com.github.houbb.segment.support.segment.mode.impl.GreedyFrequencySegmentMode: java.util.List doSelect(com.github.houbb.segment.support.segment.mode.SegmentModeContext)> ==> <java.util.Collections: java.util.List singletonList(java.lang.Object)>
STATIC edge: staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(r4, $r5) in <com.github.houbb.segment.support.segment.mode.impl.GreedyFrequencySegmentMode: java.util.List doSelect(com.github.houbb.segment.support.segment.mode.SegmentModeContext)> ==> <java.util.Collections: void sort(java.util.List,java.util.Comparator)>
STATIC edge: r3 = staticinvoke <com.github.houbb.segment.support.segment.mode.impl.SegmentModes: com.github.houbb.segment.support.segment.mode.ISegmentMode index()>() in <com.github.houbb.segment.support.segment.mode.impl.GreedyFrequencySegmentMode: java.util.List doSelect(com.github.houbb.segment.support.segment.mode.SegmentModeContext)> ==> <com.github.houbb.segment.support.segment.mode.impl.SegmentModes: com.github.houbb.segment.support.segment.mode.ISegmentMode index()>
SPECIAL edge: specialinvoke r0.<com.github.houbb.segment.support.segment.mode.impl.AbstractSegmentMode: void <init>()>() in <com.github.houbb.segment.support.segment.mode.impl.AllSegmentMode: void <init>()> ==> <com.github.houbb.segment.support.segment.mode.impl.AbstractSegmentMode: void <init>()>
INTERFACE edge: $r3 = interfaceinvoke r1.<com.github.houbb.segment.api.ISegmentResult: java.lang.String word()>() in <com.github.houbb.segment.support.segment.mode.impl.GreedyFrequencySegmentMode$1: int compare(com.github.houbb.segment.api.ISegmentResult,com.github.houbb.segment.api.ISegmentResult)> ==> <com.github.houbb.segment.support.segment.impl.SegmentResult: java.lang.String word()>
INTERFACE edge: r4 = interfaceinvoke $r2.<com.github.houbb.segment.support.data.ISegmentData: java.lang.Double getFreq(java.lang.String)>($r3) in <com.github.houbb.segment.support.segment.mode.impl.GreedyFrequencySegmentMode$1: int compare(com.github.houbb.segment.api.ISegmentResult,com.github.houbb.segment.api.ISegmentResult)> ==> <com.github.houbb.segment.support.data.impl.AbstractSegmentData: java.lang.Double getFreq(java.lang.String)>
INTERFACE edge: $r7 = interfaceinvoke r5.<com.github.houbb.segment.api.ISegmentResult: java.lang.String word()>() in <com.github.houbb.segment.support.segment.mode.impl.GreedyFrequencySegmentMode$1: int compare(com.github.houbb.segment.api.ISegmentResult,com.github.houbb.segment.api.ISegmentResult)> ==> <com.github.houbb.segment.support.segment.impl.SegmentResult: java.lang.String word()>
INTERFACE edge: r8 = interfaceinvoke $r6.<com.github.houbb.segment.support.data.ISegmentData: java.lang.Double getFreq(java.lang.String)>($r7) in <com.github.houbb.segment.support.segment.mode.impl.GreedyFrequencySegmentMode$1: int compare(com.github.houbb.segment.api.ISegmentResult,com.github.houbb.segment.api.ISegmentResult)> ==> <com.github.houbb.segment.support.data.impl.AbstractSegmentData: java.lang.Double getFreq(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r4.<java.lang.Double: int compareTo(java.lang.Double)>(r8) in <com.github.houbb.segment.support.segment.mode.impl.GreedyFrequencySegmentMode$1: int compare(com.github.houbb.segment.api.ISegmentResult,com.github.houbb.segment.api.ISegmentResult)> ==> <java.lang.Double: int compareTo(java.lang.Double)>
VIRTUAL edge: $i0 = virtualinvoke r0.<com.github.houbb.segment.support.segment.mode.impl.GreedyFrequencySegmentMode$1: int compare(com.github.houbb.segment.api.ISegmentResult,com.github.houbb.segment.api.ISegmentResult)>($r4, $r3) in <com.github.houbb.segment.support.segment.mode.impl.GreedyFrequencySegmentMode$1: int compare(java.lang.Object,java.lang.Object)> ==> <com.github.houbb.segment.support.segment.mode.impl.GreedyFrequencySegmentMode$1: int compare(com.github.houbb.segment.api.ISegmentResult,com.github.houbb.segment.api.ISegmentResult)>
SPECIAL edge: specialinvoke r0.<com.github.houbb.segment.support.segment.mode.impl.AbstractSegmentMode: void <init>()>() in <com.github.houbb.segment.support.segment.mode.impl.GreedyFrequencySegmentMode: void <init>()> ==> <com.github.houbb.segment.support.segment.mode.impl.AbstractSegmentMode: void <init>()>
INTERFACE edge: $i0 = interfaceinvoke r0.<com.github.houbb.segment.api.ISegmentResult: int endIndex()>() in <com.github.houbb.segment.support.segment.mode.impl.GreedyLengthSegmentMode$1: int compare(com.github.houbb.segment.api.ISegmentResult,com.github.houbb.segment.api.ISegmentResult)> ==> <com.github.houbb.segment.support.segment.impl.SegmentResult: int endIndex()>
INTERFACE edge: $i1 = interfaceinvoke r1.<com.github.houbb.segment.api.ISegmentResult: int endIndex()>() in <com.github.houbb.segment.support.segment.mode.impl.GreedyLengthSegmentMode$1: int compare(com.github.houbb.segment.api.ISegmentResult,com.github.houbb.segment.api.ISegmentResult)> ==> <com.github.houbb.segment.support.segment.impl.SegmentResult: int endIndex()>
VIRTUAL edge: $i0 = virtualinvoke r0.<com.github.houbb.segment.support.segment.mode.impl.GreedyLengthSegmentMode$1: int compare(com.github.houbb.segment.api.ISegmentResult,com.github.houbb.segment.api.ISegmentResult)>($r4, $r3) in <com.github.houbb.segment.support.segment.mode.impl.GreedyLengthSegmentMode$1: int compare(java.lang.Object,java.lang.Object)> ==> <com.github.houbb.segment.support.segment.mode.impl.GreedyLengthSegmentMode$1: int compare(com.github.houbb.segment.api.ISegmentResult,com.github.houbb.segment.api.ISegmentResult)>
SPECIAL edge: specialinvoke r0.<com.github.houbb.segment.support.segment.mode.impl.AbstractSegmentMode: void <init>()>() in <com.github.houbb.segment.support.segment.mode.impl.GreedyLengthSegmentMode: void <init>()> ==> <com.github.houbb.segment.support.segment.mode.impl.AbstractSegmentMode: void <init>()>
SPECIAL edge: specialinvoke r0.<com.github.houbb.segment.support.segment.mode.impl.AbstractSegmentMode: void <init>()>() in <com.github.houbb.segment.support.segment.mode.impl.IndexSegmentMode: void <init>()> ==> <com.github.houbb.segment.support.segment.mode.impl.AbstractSegmentMode: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.github.houbb.segment.support.segment.mode.impl.precise.AbstractPreciseSegmentMode: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<com.github.houbb.segment.support.segment.mode.impl.precise.AbstractPreciseSegmentMode: void <init>()>() in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: void <init>()> ==> <com.github.houbb.segment.support.segment.mode.impl.precise.AbstractPreciseSegmentMode: void <init>()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.github.houbb.segment.support.segment.mode.SegmentModeContext: com.github.houbb.segment.api.ISegmentContext segmentContext()>() in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.List select(com.github.houbb.segment.support.segment.mode.SegmentModeContext)> ==> <com.github.houbb.segment.support.segment.mode.SegmentModeContext: com.github.houbb.segment.api.ISegmentContext segmentContext()>
VIRTUAL edge: r2 = virtualinvoke r0.<com.github.houbb.segment.support.segment.mode.SegmentModeContext: java.lang.String string()>() in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.List select(com.github.houbb.segment.support.segment.mode.SegmentModeContext)> ==> <com.github.houbb.segment.support.segment.mode.SegmentModeContext: java.lang.String string()>
VIRTUAL edge: i0 = virtualinvoke r0.<com.github.houbb.segment.support.segment.mode.SegmentModeContext: int startIndex()>() in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.List select(com.github.houbb.segment.support.segment.mode.SegmentModeContext)> ==> <com.github.houbb.segment.support.segment.mode.SegmentModeContext: int startIndex()>
VIRTUAL edge: r4 = virtualinvoke r3.<com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.Map buildRouteMap(java.lang.String,com.github.houbb.segment.api.ISegmentContext)>(r2, r1) in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.List select(com.github.houbb.segment.support.segment.mode.SegmentModeContext)> ==> <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.Map buildRouteMap(java.lang.String,com.github.houbb.segment.api.ISegmentContext)>
VIRTUAL edge: r4 = virtualinvoke r3.<com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.Map buildRouteMap(java.lang.String,com.github.houbb.segment.api.ISegmentContext)>(r2, r1) in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.List select(com.github.houbb.segment.support.segment.mode.SegmentModeContext)> ==> <com.github.houbb.segment.support.segment.mode.impl.precise.HmmSegmentMode: java.util.Map buildRouteMap(java.lang.String,com.github.houbb.segment.api.ISegmentContext)>
SPECIAL edge: i4 = specialinvoke r3.<com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: int getRouteIndex(java.util.Map,int)>(r4, i8) in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.List select(com.github.houbb.segment.support.segment.mode.SegmentModeContext)> ==> <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: int getRouteIndex(java.util.Map,int)>
SPECIAL edge: specialinvoke r3.<com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: void bufferToResultList(int,java.lang.StringBuilder,java.util.List,com.github.houbb.segment.api.ISegmentContext)>(i6, $r6, r5, r1) in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.List select(com.github.houbb.segment.support.segment.mode.SegmentModeContext)> ==> <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: void bufferToResultList(int,java.lang.StringBuilder,java.util.List,com.github.houbb.segment.api.ISegmentContext)>
VIRTUAL edge: r9 = virtualinvoke r3.<com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: com.github.houbb.segment.api.ISegmentResult buildSegmentResult(java.lang.String,int)>(r8, i7) in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.List select(com.github.houbb.segment.support.segment.mode.SegmentModeContext)> ==> <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: com.github.houbb.segment.api.ISegmentResult buildSegmentResult(java.lang.String,int)>
SPECIAL edge: specialinvoke r3.<com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: void bufferToResultList(int,java.lang.StringBuilder,java.util.List,com.github.houbb.segment.api.ISegmentContext)>(i10, $r6, r5, r1) in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.List select(com.github.houbb.segment.support.segment.mode.SegmentModeContext)> ==> <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: void bufferToResultList(int,java.lang.StringBuilder,java.util.List,com.github.houbb.segment.api.ISegmentContext)>
SPECIAL edge: specialinvoke $r6.<java.lang.StringBuilder: void <init>()>() in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.List select(com.github.houbb.segment.support.segment.mode.SegmentModeContext)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8) in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.List select(com.github.houbb.segment.support.segment.mode.SegmentModeContext)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i2 = virtualinvoke $r6.<java.lang.StringBuilder: int length()>() in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.List select(com.github.houbb.segment.support.segment.mode.SegmentModeContext)> ==> <java.lang.StringBuilder: int length()>
VIRTUAL edge: $i1 = virtualinvoke r2.<java.lang.String: int length()>() in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.List select(com.github.houbb.segment.support.segment.mode.SegmentModeContext)> ==> <java.lang.String: int length()>
VIRTUAL edge: r8 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(i8, i4) in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.List select(com.github.houbb.segment.support.segment.mode.SegmentModeContext)> ==> <java.lang.String: java.lang.String substring(int,int)>
VIRTUAL edge: $i3 = virtualinvoke r2.<java.lang.String: int length()>() in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.List select(com.github.houbb.segment.support.segment.mode.SegmentModeContext)> ==> <java.lang.String: int length()>
INTERFACE edge: interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>(r9) in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.List select(com.github.houbb.segment.support.segment.mode.SegmentModeContext)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
STATIC edge: $r0 = staticinvoke <com.github.houbb.heaven.util.guava.Guavas: java.util.Map newHashMap()>() in <com.github.houbb.segment.support.segment.mode.impl.precise.HmmSegmentMode: java.util.Map buildRouteMap(java.lang.String,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.heaven.util.guava.Guavas: java.util.Map newHashMap()>
CLINIT edge: $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: int getRouteIndex(java.util.Map,int)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $z0 = staticinvoke <com.github.houbb.heaven.util.lang.ObjectUtil: boolean isNotNull(java.lang.Object)>(r3) in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: int getRouteIndex(java.util.Map,int)> ==> <com.github.houbb.heaven.util.lang.ObjectUtil: boolean isNotNull(java.lang.Object)>
STATIC edge: $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: int getRouteIndex(java.util.Map,int)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r0 = staticinvoke <com.github.houbb.segment.support.segment.impl.SegmentResult: com.github.houbb.segment.support.segment.impl.SegmentResult newInstance()>() in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: com.github.houbb.segment.api.ISegmentResult buildSegmentResult(java.lang.String,int)> ==> <com.github.houbb.segment.support.segment.impl.SegmentResult: com.github.houbb.segment.support.segment.impl.SegmentResult newInstance()>
SPECIAL edge: specialinvoke r0.<com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: void <init>()>() in <com.github.houbb.segment.support.segment.mode.impl.precise.HmmSegmentMode: void <init>()> ==> <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: void <init>()>
SPECIAL edge: specialinvoke r0.<com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: void <init>()>() in <com.github.houbb.segment.support.segment.mode.impl.precise.SearchSegmentMode: void <init>()> ==> <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.github.houbb.segment.support.segment.mode.impl.SingleSegmentMode: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.github.houbb.segment.support.segment.mode.SegmentModeContext: java.lang.String string()>() in <com.github.houbb.segment.support.segment.mode.impl.SingleSegmentMode: java.util.List select(com.github.houbb.segment.support.segment.mode.SegmentModeContext)> ==> <com.github.houbb.segment.support.segment.mode.SegmentModeContext: java.lang.String string()>
VIRTUAL edge: i0 = virtualinvoke r0.<com.github.houbb.segment.support.segment.mode.SegmentModeContext: int startIndex()>() in <com.github.houbb.segment.support.segment.mode.impl.SingleSegmentMode: java.util.List select(com.github.houbb.segment.support.segment.mode.SegmentModeContext)> ==> <com.github.houbb.segment.support.segment.mode.SegmentModeContext: int startIndex()>
VIRTUAL edge: r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i0, $i1) in <com.github.houbb.segment.support.segment.mode.impl.SingleSegmentMode: java.util.List select(com.github.houbb.segment.support.segment.mode.SegmentModeContext)> ==> <java.lang.String: java.lang.String substring(int,int)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<com.github.houbb.segment.support.segment.impl.SegmentResult: com.github.houbb.segment.support.segment.impl.SegmentResult word(java.lang.String)>(r2) in <com.github.houbb.segment.support.segment.mode.impl.SingleSegmentMode: java.util.List select(com.github.houbb.segment.support.segment.mode.SegmentModeContext)> ==> <com.github.houbb.segment.support.segment.impl.SegmentResult: com.github.houbb.segment.support.segment.impl.SegmentResult word(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<com.github.houbb.segment.support.segment.impl.SegmentResult: com.github.houbb.segment.support.segment.impl.SegmentResult startIndex(int)>(i0) in <com.github.houbb.segment.support.segment.mode.impl.SingleSegmentMode: java.util.List select(com.github.houbb.segment.support.segment.mode.SegmentModeContext)> ==> <com.github.houbb.segment.support.segment.impl.SegmentResult: com.github.houbb.segment.support.segment.impl.SegmentResult startIndex(int)>
VIRTUAL edge: r6 = virtualinvoke $r5.<com.github.houbb.segment.support.segment.impl.SegmentResult: com.github.houbb.segment.support.segment.impl.SegmentResult endIndex(int)>($i2) in <com.github.houbb.segment.support.segment.mode.impl.SingleSegmentMode: java.util.List select(com.github.houbb.segment.support.segment.mode.SegmentModeContext)> ==> <com.github.houbb.segment.support.segment.impl.SegmentResult: com.github.houbb.segment.support.segment.impl.SegmentResult endIndex(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.github.houbb.segment.support.segment.result.impl.SegmentResultHandler: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.github.houbb.segment.support.segment.result.impl.SegmentResultHandler: java.util.List handler(java.util.List)>(r1) in <com.github.houbb.segment.support.segment.result.impl.SegmentResultHandler: java.lang.Object handler(java.util.List)> ==> <com.github.houbb.segment.support.segment.result.impl.SegmentResultHandler: java.util.List handler(java.util.List)>
INTERFACE edge: $r1 = interfaceinvoke r0.<com.github.houbb.segment.api.ISegmentResult: java.lang.String word()>() in <com.github.houbb.segment.support.segment.result.impl.SegmentResultHandlerWord$1: java.lang.String handle(com.github.houbb.segment.api.ISegmentResult)> ==> <com.github.houbb.segment.support.segment.impl.SegmentResult: java.lang.String word()>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.github.houbb.segment.support.segment.result.impl.SegmentResultHandlerWord$1: java.lang.String handle(com.github.houbb.segment.api.ISegmentResult)>($r2) in <com.github.houbb.segment.support.segment.result.impl.SegmentResultHandlerWord$1: java.lang.Object handle(java.lang.Object)> ==> <com.github.houbb.segment.support.segment.result.impl.SegmentResultHandlerWord$1: java.lang.String handle(com.github.houbb.segment.api.ISegmentResult)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.github.houbb.segment.support.segment.result.impl.SegmentResultHandlerWord: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.github.houbb.segment.support.segment.result.impl.SegmentResultHandlerWord$1: void <init>(com.github.houbb.segment.support.segment.result.impl.SegmentResultHandlerWord)>(r2) in <com.github.houbb.segment.support.segment.result.impl.SegmentResultHandlerWord: java.util.List handler(java.util.List)> ==> <com.github.houbb.segment.support.segment.result.impl.SegmentResultHandlerWord$1: void <init>(com.github.houbb.segment.support.segment.result.impl.SegmentResultHandlerWord)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.github.houbb.segment.support.segment.result.impl.SegmentResultHandlerWord: java.util.List handler(java.util.List)>(r1) in <com.github.houbb.segment.support.segment.result.impl.SegmentResultHandlerWord: java.lang.Object handler(java.util.List)> ==> <com.github.houbb.segment.support.segment.result.impl.SegmentResultHandlerWord: java.util.List handler(java.util.List)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.github.houbb.segment.support.segment.result.impl.SegmentResultHandlerWordCount: void <init>()> ==> <java.lang.Object: void <init>()>
INTERFACE edge: r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>() in <com.github.houbb.segment.support.segment.result.impl.SegmentResultHandlerWordCount: java.util.Map handler(java.util.List)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: r5 = interfaceinvoke r4.<com.github.houbb.segment.api.ISegmentResult: java.lang.String word()>() in <com.github.houbb.segment.support.segment.result.impl.SegmentResultHandlerWordCount: java.util.Map handler(java.util.List)> ==> <com.github.houbb.segment.support.segment.impl.SegmentResult: java.lang.String word()>
INTERFACE edge: $r6 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5) in <com.github.houbb.segment.support.segment.result.impl.SegmentResultHandlerWordCount: java.util.Map handler(java.util.List)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r6 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5) in <com.github.houbb.segment.support.segment.result.impl.SegmentResultHandlerWordCount: java.util.Map handler(java.util.List)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, $r8) in <com.github.houbb.segment.support.segment.result.impl.SegmentResultHandlerWordCount: java.util.Map handler(java.util.List)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, $r8) in <com.github.houbb.segment.support.segment.result.impl.SegmentResultHandlerWordCount: java.util.Map handler(java.util.List)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke r13.<java.lang.Integer: int intValue()>() in <com.github.houbb.segment.support.segment.result.impl.SegmentResultHandlerWordCount: java.util.Map handler(java.util.List)> ==> <java.lang.Integer: int intValue()>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.github.houbb.segment.support.segment.result.impl.SegmentResultHandlerWordCount: java.util.Map handler(java.util.List)>(r1) in <com.github.houbb.segment.support.segment.result.impl.SegmentResultHandlerWordCount: java.lang.Object handler(java.util.List)> ==> <com.github.houbb.segment.support.segment.result.impl.SegmentResultHandlerWordCount: java.util.Map handler(java.util.List)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.github.houbb.segment.support.segment.strategy.impl.AbstractSegmentStrategy: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: r3 = virtualinvoke r0.<com.github.houbb.segment.support.segment.strategy.impl.AbstractSegmentStrategy: java.util.List doSegment(java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)>(r1, i0, r2) in <com.github.houbb.segment.support.segment.strategy.impl.AbstractSegmentStrategy: java.util.List segment(java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.strategy.impl.TireTreeSegmentStrategy: java.util.List doSegment(java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)>
SPECIAL edge: $r4 = specialinvoke r0.<com.github.houbb.segment.support.segment.strategy.impl.AbstractSegmentStrategy: java.util.List buildSegmentResultList(java.lang.String,int,java.util.List)>(r1, i0, r3) in <com.github.houbb.segment.support.segment.strategy.impl.AbstractSegmentStrategy: java.util.List segment(java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.strategy.impl.AbstractSegmentStrategy: java.util.List buildSegmentResultList(java.lang.String,int,java.util.List)>
STATIC edge: r1 = staticinvoke <com.github.houbb.heaven.util.guava.Guavas: java.util.List newArrayList(int)>($i0) in <com.github.houbb.segment.support.segment.strategy.impl.AbstractSegmentStrategy: java.util.List buildSegmentResultList(java.lang.String,int,java.util.List)> ==> <com.github.houbb.heaven.util.guava.Guavas: java.util.List newArrayList(int)>
STATIC edge: $r7 = staticinvoke <com.github.houbb.segment.support.segment.impl.SegmentResult: com.github.houbb.segment.support.segment.impl.SegmentResult newInstance()>() in <com.github.houbb.segment.support.segment.strategy.impl.AbstractSegmentStrategy: java.util.List buildSegmentResultList(java.lang.String,int,java.util.List)> ==> <com.github.houbb.segment.support.segment.impl.SegmentResult: com.github.houbb.segment.support.segment.impl.SegmentResult newInstance()>
SPECIAL edge: specialinvoke r0.<com.github.houbb.segment.support.segment.strategy.impl.SimpleSegmentStrategy: void <init>()>() in <com.github.houbb.segment.support.segment.strategy.impl.hmm.HmmSegmentStrategy: void <init>()> ==> <com.github.houbb.segment.support.segment.strategy.impl.SimpleSegmentStrategy: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.github.houbb.segment.support.segment.strategy.impl.SimpleSegmentStrategy: void <init>()> ==> <java.lang.Object: void <init>()>
INTERFACE edge: interfaceinvoke r1.<com.github.houbb.segment.api.ISegmentContext: com.github.houbb.segment.support.format.ISegmentFormat format()>() in <com.github.houbb.segment.support.segment.strategy.impl.SimpleSegmentStrategy: java.util.List segment(java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.impl.SegmentContext: com.github.houbb.segment.support.format.ISegmentFormat format()>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() in <com.github.houbb.segment.support.segment.strategy.impl.SimpleSegmentStrategy: java.util.List segment(java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c7) in <com.github.houbb.segment.support.segment.strategy.impl.SimpleSegmentStrategy: java.util.List segment(java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
SPECIAL edge: specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() in <com.github.houbb.segment.support.segment.strategy.impl.SimpleSegmentStrategy: java.util.List segment(java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c7) in <com.github.houbb.segment.support.segment.strategy.impl.SimpleSegmentStrategy: java.util.List segment(java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: r16 = virtualinvoke r7.<java.lang.String: char[] toCharArray()>() in <com.github.houbb.segment.support.segment.strategy.impl.SimpleSegmentStrategy: java.util.List segment(java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)> ==> <java.lang.String: char[] toCharArray()>
SPECIAL edge: specialinvoke r8.<com.github.houbb.segment.support.segment.strategy.impl.SimpleSegmentStrategy: void processOtherChars(java.lang.StringBuilder,java.util.List)>($r5, r0) in <com.github.houbb.segment.support.segment.strategy.impl.SimpleSegmentStrategy: java.util.List segment(java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.strategy.impl.SimpleSegmentStrategy: void processOtherChars(java.lang.StringBuilder,java.util.List)>
SPECIAL edge: specialinvoke r8.<com.github.houbb.segment.support.segment.strategy.impl.SimpleSegmentStrategy: void processChineseChars(java.lang.StringBuilder,java.util.List,com.github.houbb.segment.api.ISegmentContext)>($r3, r0, r1) in <com.github.houbb.segment.support.segment.strategy.impl.SimpleSegmentStrategy: java.util.List segment(java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.strategy.impl.SimpleSegmentStrategy: void processChineseChars(java.lang.StringBuilder,java.util.List,com.github.houbb.segment.api.ISegmentContext)>
SPECIAL edge: specialinvoke r8.<com.github.houbb.segment.support.segment.strategy.impl.SimpleSegmentStrategy: void processChineseChars(java.lang.StringBuilder,java.util.List,com.github.houbb.segment.api.ISegmentContext)>($r3, r0, r1) in <com.github.houbb.segment.support.segment.strategy.impl.SimpleSegmentStrategy: java.util.List segment(java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.strategy.impl.SimpleSegmentStrategy: void processChineseChars(java.lang.StringBuilder,java.util.List,com.github.houbb.segment.api.ISegmentContext)>
SPECIAL edge: specialinvoke r8.<com.github.houbb.segment.support.segment.strategy.impl.SimpleSegmentStrategy: void processOtherChars(java.lang.StringBuilder,java.util.List)>($r5, r0) in <com.github.houbb.segment.support.segment.strategy.impl.SimpleSegmentStrategy: java.util.List segment(java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.strategy.impl.SimpleSegmentStrategy: void processOtherChars(java.lang.StringBuilder,java.util.List)>
INTERFACE edge: $i0 = interfaceinvoke r0.<java.util.List: int size()>() in <com.github.houbb.segment.support.segment.strategy.impl.SimpleSegmentStrategy: java.util.List segment(java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)> ==> <java.util.ArrayList: int size()>
INTERFACE edge: r18 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>() in <com.github.houbb.segment.support.segment.strategy.impl.SimpleSegmentStrategy: java.util.List segment(java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
VIRTUAL edge: $r11 = virtualinvoke $r10.<com.github.houbb.segment.support.segment.impl.SegmentResult: com.github.houbb.segment.support.segment.impl.SegmentResult word(java.lang.String)>(r19) in <com.github.houbb.segment.support.segment.strategy.impl.SimpleSegmentStrategy: java.util.List segment(java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.impl.SegmentResult: com.github.houbb.segment.support.segment.impl.SegmentResult word(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<com.github.houbb.segment.support.segment.impl.SegmentResult: com.github.houbb.segment.support.segment.impl.SegmentResult startIndex(int)>(i8) in <com.github.houbb.segment.support.segment.strategy.impl.SimpleSegmentStrategy: java.util.List segment(java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.impl.SegmentResult: com.github.houbb.segment.support.segment.impl.SegmentResult startIndex(int)>
VIRTUAL edge: $i2 = virtualinvoke r19.<java.lang.String: int length()>() in <com.github.houbb.segment.support.segment.strategy.impl.SimpleSegmentStrategy: java.util.List segment(java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)> ==> <java.lang.String: int length()>
VIRTUAL edge: $i4 = virtualinvoke r19.<java.lang.String: int length()>() in <com.github.houbb.segment.support.segment.strategy.impl.SimpleSegmentStrategy: java.util.List segment(java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)> ==> <java.lang.String: int length()>
VIRTUAL edge: r13 = virtualinvoke $r12.<com.github.houbb.segment.support.segment.impl.SegmentResult: com.github.houbb.segment.support.segment.impl.SegmentResult endIndex(int)>($i3) in <com.github.houbb.segment.support.segment.strategy.impl.SimpleSegmentStrategy: java.util.List segment(java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.impl.SegmentResult: com.github.houbb.segment.support.segment.impl.SegmentResult endIndex(int)>
INTERFACE edge: interfaceinvoke r17.<java.util.List: boolean add(java.lang.Object)>(r13) in <com.github.houbb.segment.support.segment.strategy.impl.SimpleSegmentStrategy: java.util.List segment(java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
CLINIT edge: $z2 = staticinvoke <com.github.houbb.segment.util.CharUtils: boolean isLetterOrConnector(char)>(c3) in <com.github.houbb.segment.support.segment.strategy.impl.SimpleSegmentStrategy: void processOtherChars(java.lang.StringBuilder,java.util.List)> ==> <com.github.houbb.segment.util.CharUtils: void <clinit>()>
STATIC edge: $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(c3) in <com.github.houbb.segment.support.segment.strategy.impl.SimpleSegmentStrategy: void processOtherChars(java.lang.StringBuilder,java.util.List)> ==> <java.lang.String: java.lang.String valueOf(char)>
STATIC edge: $z2 = staticinvoke <com.github.houbb.segment.util.CharUtils: boolean isLetterOrConnector(char)>(c3) in <com.github.houbb.segment.support.segment.strategy.impl.SimpleSegmentStrategy: void processOtherChars(java.lang.StringBuilder,java.util.List)> ==> <com.github.houbb.segment.util.CharUtils: boolean isLetterOrConnector(char)>
STATIC edge: $z1 = staticinvoke <com.github.houbb.heaven.util.lang.CharUtil: boolean isDigitOrLetter(char)>(c3) in <com.github.houbb.segment.support.segment.strategy.impl.SimpleSegmentStrategy: void processOtherChars(java.lang.StringBuilder,java.util.List)> ==> <com.github.houbb.heaven.util.lang.CharUtil: boolean isDigitOrLetter(char)>
CLINIT edge: $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(c3) in <com.github.houbb.segment.support.segment.strategy.impl.SimpleSegmentStrategy: void processOtherChars(java.lang.StringBuilder,java.util.List)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: <java.lang.String: java.util.Comparator CASE_INSENSITIVE_ORDER> = null in <java.lang.String: void <clinit>()> ==> <java.lang.String: void <clinit>()>
VIRTUAL edge: $i0 = virtualinvoke r1.<java.lang.String: int length()>() in <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: java.util.List segment(java.lang.String,java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: $i1 = virtualinvoke r1.<java.lang.String: int length()>() in <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: java.util.List segment(java.lang.String,java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: $c4 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i7) in <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: java.util.List segment(java.lang.String,java.lang.String)> ==> <java.lang.String: char charAt(int)>
INTERFACE edge: interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>(r1) in <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: java.util.List segment(java.lang.String,java.lang.String)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>(r12) in <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: java.util.List segment(java.lang.String,java.lang.String)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>(r14) in <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: java.util.List segment(java.lang.String,java.lang.String)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: r3 = virtualinvoke r2.<java.lang.String: char[] toCharArray()>() in <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: java.util.List segment(java.lang.String,java.lang.String)> ==> <java.lang.String: char[] toCharArray()>
SPECIAL edge: specialinvoke $r8.<java.lang.StringBuilder: void <init>()>() in <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: java.util.List segment(java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4) in <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: java.util.List segment(java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() in <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: java.util.List segment(java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r8.<java.lang.StringBuilder: void setLength(int)>(0) in <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: java.util.List segment(java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: void setLength(int)>
VIRTUAL edge: $i2 = virtualinvoke $r8.<java.lang.StringBuilder: int length()>() in <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: java.util.List segment(java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: int length()>
VIRTUAL edge: r14 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() in <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: java.util.List segment(java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r8.<java.lang.StringBuilder: void setLength(int)>(0) in <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: java.util.List segment(java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: void setLength(int)>
VIRTUAL edge: $i5 = virtualinvoke $r11.<com.github.houbb.segment.constant.enums.HmmStateEnum: int index()>() in <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: java.util.List segment(java.lang.String,java.lang.String)> ==> <com.github.houbb.segment.constant.enums.HmmStateEnum: int index()>
VIRTUAL edge: $i6 = virtualinvoke $r13.<com.github.houbb.segment.constant.enums.HmmStateEnum: int index()>() in <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: java.util.List segment(java.lang.String,java.lang.String)> ==> <com.github.houbb.segment.constant.enums.HmmStateEnum: int index()>
SPECIAL edge: specialinvoke r0.<com.github.houbb.segment.support.segment.strategy.impl.AbstractSegmentStrategy: void <init>()>() in <com.github.houbb.segment.support.segment.strategy.impl.TireTreeSegmentStrategy: void <init>()> ==> <com.github.houbb.segment.support.segment.strategy.impl.AbstractSegmentStrategy: void <init>()>
VIRTUAL edge: r7 = virtualinvoke $r2.<com.github.houbb.segment.support.trie.impl.SegmentTrieTree: java.util.Map getTrieTree(com.github.houbb.segment.api.ISegmentContext)>(r1) in <com.github.houbb.segment.support.segment.strategy.impl.TireTreeSegmentStrategy: java.util.List doSegment(java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.trie.impl.SegmentTrieTree: java.util.Map getTrieTree(com.github.houbb.segment.api.ISegmentContext)>
VIRTUAL edge: $i1 = virtualinvoke r4.<java.lang.String: int length()>() in <com.github.houbb.segment.support.segment.strategy.impl.TireTreeSegmentStrategy: java.util.List doSegment(java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)> ==> <java.lang.String: int length()>
SPECIAL edge: r7 = specialinvoke r5.<com.github.houbb.segment.support.segment.strategy.impl.TireTreeSegmentStrategy: java.util.Map getCurrentMap(java.util.Map,java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)>(r7, r4, i3, r1) in <com.github.houbb.segment.support.segment.strategy.impl.TireTreeSegmentStrategy: java.util.List doSegment(java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.strategy.impl.TireTreeSegmentStrategy: java.util.Map getCurrentMap(java.util.Map,java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)>
INTERFACE edge: interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r6) in <com.github.houbb.segment.support.segment.strategy.impl.TireTreeSegmentStrategy: java.util.List doSegment(java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
CLINIT edge: $r4 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c2) in <com.github.houbb.segment.support.segment.strategy.impl.TireTreeSegmentStrategy: java.util.Map getCurrentMap(java.util.Map,java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)> ==> <java.lang.Character: void <clinit>()>
STATIC edge: $r4 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c2) in <com.github.houbb.segment.support.segment.strategy.impl.TireTreeSegmentStrategy: java.util.Map getCurrentMap(java.util.Map,java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)> ==> <java.lang.Character: java.lang.Character valueOf(char)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.github.houbb.segment.support.trie.impl.SegmentTrieTree: void <init>()> ==> <java.lang.Object: void <init>()>
INTERFACE edge: r3 = interfaceinvoke r2.<com.github.houbb.segment.api.ISegmentContext: com.github.houbb.segment.support.data.ISegmentData data()>() in <com.github.houbb.segment.support.trie.impl.SegmentTrieTree: java.util.Map getTrieTree(com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.impl.SegmentContext: com.github.houbb.segment.support.data.ISegmentData data()>
SPECIAL edge: specialinvoke r4.<com.github.houbb.segment.support.trie.impl.SegmentTrieTree: void initInnerWordMap(com.github.houbb.segment.support.data.ISegmentData)>(r3) in <com.github.houbb.segment.support.trie.impl.SegmentTrieTree: java.util.Map getTrieTree(com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.trie.impl.SegmentTrieTree: void initInnerWordMap(com.github.houbb.segment.support.data.ISegmentData)>
CLINIT edge: $r7 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c1) in <com.github.houbb.segment.support.trie.impl.SegmentTrieTree: void initInnerWordMap(com.github.houbb.segment.support.data.ISegmentData)> ==> <java.lang.Character: void <clinit>()>
STATIC edge: $r15 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1) in <com.github.houbb.segment.support.trie.impl.SegmentTrieTree: void initInnerWordMap(com.github.houbb.segment.support.data.ISegmentData)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
STATIC edge: $r13 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c1) in <com.github.houbb.segment.support.trie.impl.SegmentTrieTree: void initInnerWordMap(com.github.houbb.segment.support.data.ISegmentData)> ==> <java.lang.Character: java.lang.Character valueOf(char)>
STATIC edge: $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0) in <com.github.houbb.segment.support.trie.impl.SegmentTrieTree: void initInnerWordMap(com.github.houbb.segment.support.data.ISegmentData)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
STATIC edge: $z1 = staticinvoke <com.github.houbb.heaven.util.lang.ObjectUtil: boolean isNotNull(java.lang.Object)>(r8) in <com.github.houbb.segment.support.trie.impl.SegmentTrieTree: void initInnerWordMap(com.github.houbb.segment.support.data.ISegmentData)> ==> <com.github.houbb.heaven.util.lang.ObjectUtil: boolean isNotNull(java.lang.Object)>
STATIC edge: $r7 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c1) in <com.github.houbb.segment.support.trie.impl.SegmentTrieTree: void initInnerWordMap(com.github.houbb.segment.support.data.ISegmentData)> ==> <java.lang.Character: java.lang.Character valueOf(char)>
STATIC edge: $r0 = staticinvoke <com.github.houbb.heaven.util.guava.Guavas: java.util.Map newHashMap()>() in <com.github.houbb.segment.support.trie.impl.SegmentTrieTree: void initInnerWordMap(com.github.houbb.segment.support.data.ISegmentData)> ==> <com.github.houbb.heaven.util.guava.Guavas: java.util.Map newHashMap()>
CLINIT edge: $r15 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1) in <com.github.houbb.segment.support.trie.impl.SegmentTrieTree: void initInnerWordMap(com.github.houbb.segment.support.data.ISegmentData)> ==> <java.lang.Boolean: void <clinit>()>
CLINIT edge: $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0) in <com.github.houbb.segment.support.trie.impl.SegmentTrieTree: void initInnerWordMap(com.github.houbb.segment.support.data.ISegmentData)> ==> <java.lang.Boolean: void <clinit>()>
CLINIT edge: <java.lang.Boolean: java.lang.Class TYPE> = null in <java.lang.Boolean: void <clinit>()> ==> <java.lang.Boolean: void <clinit>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.github.houbb.segment.support.tagging.pos.data.impl.AbstractSegmentPosData: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: r2 = specialinvoke r1.<com.github.houbb.segment.support.tagging.pos.data.impl.AbstractSegmentPosData: java.util.Map getPosMap()>() in <com.github.houbb.segment.support.tagging.pos.data.impl.AbstractSegmentPosData: java.util.List posList(java.lang.String)> ==> <com.github.houbb.segment.support.tagging.pos.data.impl.AbstractSegmentPosData: java.util.Map getPosMap()>
INTERFACE edge: $r3 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0) in <com.github.houbb.segment.support.tagging.pos.data.impl.AbstractSegmentPosData: java.util.List posList(java.lang.String)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0) in <com.github.houbb.segment.support.tagging.pos.data.impl.AbstractSegmentPosData: java.util.List posList(java.lang.String)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
CLINIT edge: l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <com.github.houbb.segment.support.tagging.pos.data.impl.AbstractSegmentPosData: java.util.Map getPosMap()> ==> <java.lang.System: void <clinit>()>
STATIC edge: l4 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <com.github.houbb.segment.support.tagging.pos.data.impl.AbstractSegmentPosData: java.util.Map getPosMap()> ==> <java.lang.System: long currentTimeMillis()>
STATIC edge: $r24 = staticinvoke <com.github.houbb.segment.model.SegmentPos: com.github.houbb.segment.model.SegmentPos of(java.lang.String,long)>(r22, l3) in <com.github.houbb.segment.support.tagging.pos.data.impl.AbstractSegmentPosData: java.util.Map getPosMap()> ==> <com.github.houbb.segment.model.SegmentPos: com.github.houbb.segment.model.SegmentPos of(java.lang.String,long)>
STATIC edge: l3 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r23) in <com.github.houbb.segment.support.tagging.pos.data.impl.AbstractSegmentPosData: java.util.Map getPosMap()> ==> <java.lang.Long: long parseLong(java.lang.String)>
STATIC edge: r16 = staticinvoke <com.github.houbb.heaven.util.guava.Guavas: java.util.List newArrayList(int)>($i2) in <com.github.houbb.segment.support.tagging.pos.data.impl.AbstractSegmentPosData: java.util.Map getPosMap()> ==> <com.github.houbb.heaven.util.guava.Guavas: java.util.List newArrayList(int)>
STATIC edge: r15 = staticinvoke <com.github.houbb.heaven.util.lang.StringUtil: java.util.List splitToList(java.lang.String,java.lang.String)>($r14, ",") in <com.github.houbb.segment.support.tagging.pos.data.impl.AbstractSegmentPosData: java.util.Map getPosMap()> ==> <com.github.houbb.heaven.util.lang.StringUtil: java.util.List splitToList(java.lang.String,java.lang.String)>
STATIC edge: $z2 = staticinvoke <com.github.houbb.heaven.util.lang.StringUtil: boolean isEmptyTrim(java.lang.String)>(r11) in <com.github.houbb.segment.support.tagging.pos.data.impl.AbstractSegmentPosData: java.util.Map getPosMap()> ==> <com.github.houbb.heaven.util.lang.StringUtil: boolean isEmptyTrim(java.lang.String)>
STATIC edge: $z1 = staticinvoke <com.github.houbb.heaven.util.util.MapUtil: boolean isEmpty(java.util.Map)>(r1) in <com.github.houbb.segment.support.tagging.pos.data.impl.AbstractSegmentPosData: java.util.Map getPosMap()> ==> <com.github.houbb.heaven.util.util.MapUtil: boolean isEmpty(java.util.Map)>
STATIC edge: l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <com.github.houbb.segment.support.tagging.pos.data.impl.AbstractSegmentPosData: java.util.Map getPosMap()> ==> <java.lang.System: long currentTimeMillis()>
STATIC edge: $z0 = staticinvoke <com.github.houbb.heaven.util.util.MapUtil: boolean isNotEmpty(java.util.Map)>(r1) in <com.github.houbb.segment.support.tagging.pos.data.impl.AbstractSegmentPosData: java.util.Map getPosMap()> ==> <com.github.houbb.heaven.util.util.MapUtil: boolean isNotEmpty(java.util.Map)>
CLINIT edge: l3 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r23) in <com.github.houbb.segment.support.tagging.pos.data.impl.AbstractSegmentPosData: java.util.Map getPosMap()> ==> <java.lang.Long: void <clinit>()>
CLINIT edge: <java.lang.Long: java.lang.Class TYPE> = null in <java.lang.Long: void <clinit>()> ==> <java.lang.Long: void <clinit>()>
SPECIAL edge: specialinvoke r0.<com.github.houbb.segment.support.tagging.pos.data.impl.AbstractSegmentPosData: void <init>()>() in <com.github.houbb.segment.support.tagging.pos.data.impl.SegmentPosDataDefine: void <init>()> ==> <com.github.houbb.segment.support.tagging.pos.data.impl.AbstractSegmentPosData: void <init>()>
SPECIAL edge: specialinvoke r0.<com.github.houbb.segment.support.tagging.pos.data.impl.AbstractSegmentPosData: void <init>()>() in <com.github.houbb.segment.support.tagging.pos.data.impl.SegmentPosDataMixed: void <init>()> ==> <com.github.houbb.segment.support.tagging.pos.data.impl.AbstractSegmentPosData: void <init>()>
SPECIAL edge: specialinvoke r0.<com.github.houbb.segment.support.tagging.pos.data.impl.AbstractSegmentPosData: void <init>()>() in <com.github.houbb.segment.support.tagging.pos.data.impl.SegmentPosDataSystem: void <init>()> ==> <com.github.houbb.segment.support.tagging.pos.data.impl.AbstractSegmentPosData: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.github.houbb.segment.support.tagging.pos.tag.impl.NoneSegmentPosTagging: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.github.houbb.segment.support.tagging.pos.tag.impl.SimpleSegmentPosTagging: void <init>()> ==> <java.lang.Object: void <init>()>
INTERFACE edge: r1 = interfaceinvoke r0.<com.github.houbb.segment.api.ISegmentContext: com.github.houbb.segment.support.tagging.pos.data.ISegmentPosData posData()>() in <com.github.houbb.segment.support.tagging.pos.tag.impl.SimpleSegmentPosTagging: void posTagging(java.util.List,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.impl.SegmentContext: com.github.houbb.segment.support.tagging.pos.data.ISegmentPosData posData()>
INTERFACE edge: r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>() in <com.github.houbb.segment.support.tagging.pos.tag.impl.SimpleSegmentPosTagging: void posTagging(java.util.List,com.github.houbb.segment.api.ISegmentContext)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $r6 = interfaceinvoke r5.<com.github.houbb.segment.api.ISegmentResult: java.lang.String word()>() in <com.github.houbb.segment.support.tagging.pos.tag.impl.SimpleSegmentPosTagging: void posTagging(java.util.List,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.impl.SegmentResult: java.lang.String word()>
INTERFACE edge: interfaceinvoke r5.<com.github.houbb.segment.api.ISegmentResult: com.github.houbb.segment.api.ISegmentResult pos(java.lang.String)>($r13) in <com.github.houbb.segment.support.tagging.pos.tag.impl.SimpleSegmentPosTagging: void posTagging(java.util.List,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.impl.SegmentResult: com.github.houbb.segment.api.ISegmentResult pos(java.lang.String)>
INTERFACE edge: interfaceinvoke r5.<com.github.houbb.segment.api.ISegmentResult: com.github.houbb.segment.api.ISegmentResult pos(java.lang.String)>($r9) in <com.github.houbb.segment.support.tagging.pos.tag.impl.SimpleSegmentPosTagging: void posTagging(java.util.List,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.impl.SegmentResult: com.github.houbb.segment.api.ISegmentResult pos(java.lang.String)>
INTERFACE edge: r7 = interfaceinvoke r1.<com.github.houbb.segment.support.tagging.pos.data.ISegmentPosData: java.util.List posList(java.lang.String)>($r6) in <com.github.houbb.segment.support.tagging.pos.tag.impl.SimpleSegmentPosTagging: void posTagging(java.util.List,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.tagging.pos.data.impl.AbstractSegmentPosData: java.util.List posList(java.lang.String)>
INTERFACE edge: $r11 = interfaceinvoke r7.<java.util.List: java.lang.Object get(int)>(0) in <com.github.houbb.segment.support.tagging.pos.tag.impl.SimpleSegmentPosTagging: void posTagging(java.util.List,com.github.houbb.segment.api.ISegmentContext)> ==> <java.util.ArrayList: java.lang.Object get(int)>
VIRTUAL edge: $r13 = virtualinvoke r12.<com.github.houbb.segment.model.SegmentPos: java.lang.String pos()>() in <com.github.houbb.segment.support.tagging.pos.tag.impl.SimpleSegmentPosTagging: void posTagging(java.util.List,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.model.SegmentPos: java.lang.String pos()>
VIRTUAL edge: $r9 = virtualinvoke $r8.<com.github.houbb.segment.constant.enums.SegmentPosEnum: java.lang.String code()>() in <com.github.houbb.segment.support.tagging.pos.tag.impl.SimpleSegmentPosTagging: void posTagging(java.util.List,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: java.lang.String code()>
VIRTUAL edge: $r2 = virtualinvoke $r0.<com.github.houbb.segment.bs.SegmentBs: com.github.houbb.segment.bs.SegmentBs segmentMode(com.github.houbb.segment.support.segment.mode.ISegmentMode)>(r1) in <com.github.houbb.segment.util.SegmentHelper: java.lang.Object segment(java.lang.String,com.github.houbb.segment.support.segment.mode.ISegmentMode,com.github.houbb.segment.support.segment.result.ISegmentResultHandler)> ==> <com.github.houbb.segment.bs.SegmentBs: com.github.houbb.segment.bs.SegmentBs segmentMode(com.github.houbb.segment.support.segment.mode.ISegmentMode)>
VIRTUAL edge: $r5 = virtualinvoke $r2.<com.github.houbb.segment.bs.SegmentBs: java.lang.Object segment(java.lang.String,com.github.houbb.segment.support.segment.result.ISegmentResultHandler)>(r3, r4) in <com.github.houbb.segment.util.SegmentHelper: java.lang.Object segment(java.lang.String,com.github.houbb.segment.support.segment.mode.ISegmentMode,com.github.houbb.segment.support.segment.result.ISegmentResultHandler)> ==> <com.github.houbb.segment.bs.SegmentBs: java.lang.Object segment(java.lang.String,com.github.houbb.segment.support.segment.result.ISegmentResultHandler)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: void finalize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<com.github.houbb.segment.constant.enums.HmmStateEnum: void <init>(java.lang.String,int,int,char)>("BEGIN", 0, 0, 66) in <com.github.houbb.segment.constant.enums.HmmStateEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.HmmStateEnum: void <init>(java.lang.String,int,int,char)>
SPECIAL edge: specialinvoke $r1.<com.github.houbb.segment.constant.enums.HmmStateEnum: void <init>(java.lang.String,int,int,char)>("MIDDLE", 1, 1, 77) in <com.github.houbb.segment.constant.enums.HmmStateEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.HmmStateEnum: void <init>(java.lang.String,int,int,char)>
SPECIAL edge: specialinvoke $r2.<com.github.houbb.segment.constant.enums.HmmStateEnum: void <init>(java.lang.String,int,int,char)>("END", 2, 2, 69) in <com.github.houbb.segment.constant.enums.HmmStateEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.HmmStateEnum: void <init>(java.lang.String,int,int,char)>
SPECIAL edge: specialinvoke $r3.<com.github.houbb.segment.constant.enums.HmmStateEnum: void <init>(java.lang.String,int,int,char)>("SINGLE", 3, 3, 83) in <com.github.houbb.segment.constant.enums.HmmStateEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.HmmStateEnum: void <init>(java.lang.String,int,int,char)>
SPECIAL edge: specialinvoke $r0.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("N", 0, "n", "\u540d\u8bcd") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r1.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("NR", 1, "nr", "\u4eba\u540d") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r2.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("NR1", 2, "nr1", "\u6c49\u8bed\u59d3\u6c0f") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r3.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("NR2", 3, "nr2", "\u6c49\u8bed\u540d\u5b57") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r4.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("NRJ", 4, "nrj", "\u65e5\u8bed\u4eba\u540d") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r5.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("NRF", 5, "nrf", "\u97f3\u8bd1\u4eba\u540d") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r6.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("NS", 6, "ns", "\u5730\u540d") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r7.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("NSF", 7, "nsf", "\u97f3\u8bd1\u5730\u540d") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r8.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("NT", 8, "nt", "\u673a\u6784\u56e2\u4f53\u540d") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r9.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("NZ", 9, "nz", "\u5176\u5b83\u4e13\u540d") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r10.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("NL", 10, "nl", "\u540d\u8bcd\u6027\u60ef\u7528\u8bed") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r11.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("NG", 11, "ng", "\u540d\u8bcd\u6027\u8bed\u7d20") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r12.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("NW", 12, "nw", "\u65b0\u8bcd") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r13.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("T", 13, "t", "\u65f6\u95f4\u8bcd") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r14.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("TG", 14, "tg", "\u65f6\u95f4\u8bcd\u6027\u8bed\u7d20") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r15.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("S", 15, "s", "\u5904\u6240\u8bcd") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r16.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("F", 16, "f", "\u65b9\u4f4d\u8bcd") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r17.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("V", 17, "v", "\u52a8\u8bcd") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r18.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("VD", 18, "vd", "\u526f\u52a8\u8bcd") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r19.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("VN", 19, "vn", "\u540d\u52a8\u8bcd") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r20.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("VSHI", 20, "vshi", "\u52a8\u8bcd\u201c\u662f\u201d") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r21.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("VYOU", 21, "vyou", "\u52a8\u8bcd\u201c\u6709\u201d") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r22.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("VF", 22, "vf", "\u8d8b\u5411\u52a8\u8bcd") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r23.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("VX", 23, "vx", "\u5f62\u5f0f\u52a8\u8bcd") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r24.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("VI", 24, "vi", "\u4e0d\u53ca\u7269\u52a8\u8bcd\uff08\u5185\u52a8\u8bcd\uff09") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r25.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("VL", 25, "vl", "\u52a8\u8bcd\u6027\u60ef\u7528\u8bed") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r26.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("VG", 26, "vg", "\u52a8\u8bcd\u6027\u8bed\u7d20") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r27.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("A", 27, "a", "\u5f62\u5bb9\u8bcd") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r28.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("AD", 28, "ad", "\u526f\u5f62\u8bcd") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r29.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("AN", 29, "an", "\u540d\u5f62\u8bcd") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r30.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("AG", 30, "ag", "\u5f62\u5bb9\u8bcd\u6027\u8bed\u7d20") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r31.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("AL", 31, "al", "\u5f62\u5bb9\u8bcd\u6027\u60ef\u7528\u8bed") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r32.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("B", 32, "b", "\u533a\u522b\u8bcd") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r33.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("BL", 33, "bl", "\u533a\u522b\u8bcd\u6027\u60ef\u7528\u8bed") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r34.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("Z", 34, "z", "\u72b6\u6001\u8bcd") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r35.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("R", 35, "r", "\u4ee3\u8bcd") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r36.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("RR", 36, "rr", "\u4eba\u79f0\u4ee3\u8bcd") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r37.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("RZ", 37, "rz", "\u6307\u793a\u4ee3\u8bcd") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r38.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("RZT", 38, "rzt", "\u65f6\u95f4\u6307\u793a\u4ee3\u8bcd") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r39.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("RZS", 39, "rzs", "\u5904\u6240\u6307\u793a\u4ee3\u8bcd") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r40.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("RZV", 40, "rzv", "\u8c13\u8bcd\u6027\u6307\u793a\u4ee3\u8bcd") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r41.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("RY", 41, "ry", "\u7591\u95ee\u4ee3\u8bcd") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r42.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("RYT", 42, "ryt", "\u65f6\u95f4\u7591\u95ee\u4ee3\u8bcd") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r43.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("RYS", 43, "rys", "\u5904\u6240\u7591\u95ee\u4ee3\u8bcd") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r44.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("RYV", 44, "ryv", "\u8c13\u8bcd\u6027\u7591\u95ee\u4ee3\u8bcd") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r45.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("RG", 45, "rg", "\u4ee3\u8bcd\u6027\u8bed\u7d20") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r46.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("M", 46, "m", "\u6570\u8bcd") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r47.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("MQ", 47, "mq", "\u6570\u91cf\u8bcd") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r48.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("Q", 48, "q", "\u91cf\u8bcd") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r49.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("QV", 49, "qv", "\u52a8\u91cf\u8bcd") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r50.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("QT", 50, "qt", "\u65f6\u91cf\u8bcd") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r51.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("D", 51, "d", "\u526f\u8bcd") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r52.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("P", 52, "p", "\u4ecb\u8bcd") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r53.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("PBA", 53, "pba", "\u4ecb\u8bcd\u201c\u628a\u201d") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r54.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("PBEI", 54, "pbei", "\u4ecb\u8bcd\u201c\u88ab\u201d") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r55.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("C", 55, "c", "\u8fde\u8bcd") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r56.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("CC", 56, "cc", "\u5e76\u5217\u8fde\u8bcd") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r57.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("U", 57, "u", "\u52a9\u8bcd") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r58.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("UZHE", 58, "uzhe", "\u7740") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r59.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("ULE", 59, "ule", "\u4e86") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r60.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("UGUO", 60, "uguo", "\u8fc7") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r61.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("UDE1", 61, "ude1", "\u7684") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r62.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("UDE2", 62, "ude2", "\u5730") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r63.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("UDE3", 63, "ude3", "\u5f97") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r64.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("USUO", 64, "usuo", "\u6240") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r65.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("UDENG", 65, "udeng", "\u7b49") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r66.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("UYY", 66, "uyy", "\u4e00\u6837") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r67.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("UDH", 67, "udh", "\u7684\u8bdd") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r68.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("ULS", 68, "uls", "\u6765\u8bb2") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r69.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("UZHI", 69, "uzhi", "\u4e4b") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r70.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("ULIAN", 70, "ulian", "\u8fde") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r71.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("E", 71, "e", "\u53f9\u8bcd") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r72.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("Y", 72, "y", "\u8bed\u6c14\u8bcd(delete") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r73.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("O", 73, "o", "\u62df\u58f0\u8bcd") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r74.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("H", 74, "h", "\u524d\u7f00") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r75.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("K", 75, "k", "\u540e\u7f00") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r76.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("X", 76, "x", "\u5b57\u7b26\u4e32") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r77.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("XX", 77, "xx", "\u975e\u8bed\u7d20\u5b57") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r78.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("XU", 78, "xu", "\u7f51\u5740URL") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r79.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("W", 79, "w", "\u6807\u70b9\u7b26\u53f7") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r80.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("WKZ", 80, "wkz", "\u5de6\u62ec\u53f7\uff0c\u5168\u89d2\uff1a\uff08") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r81.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("WKY", 81, "wky", "\u53f3\u62ec\u53f7\uff0c\u5168\u89d2\uff1a\uff09") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r82.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("WYZ", 82, "wyz", "\u5de6\u5f15\u53f7\uff0c\u5168\u89d2\uff1a\u201c") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r83.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("WYY", 83, "wyy", "\u53f3\u5f15\u53f7\uff0c\u5168\u89d2\uff1a\u201d") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r84.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("WJ", 84, "wj", "\u53e5\u53f7\uff0c\u5168\u89d2\uff1a\u3002") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r85.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("WW", 85, "ww", "\u95ee\u53f7\uff0c\u5168\u89d2\uff1a\uff1f") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r86.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("WT", 86, "wt", "\u53f9\u53f7\uff0c\u5168\u89d2\uff1a\uff01") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r87.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("WD", 87, "wd", "\u9017\u53f7\uff0c\u5168\u89d2\uff1a\uff0c") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r88.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("WF", 88, "wf", "\u5206\u53f7\uff0c\u5168\u89d2\uff1a\uff1b") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r89.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("WN", 89, "wn", "\u987f\u53f7\uff0c\u5168\u89d2\uff1a\u3001") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r90.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("WM", 90, "wm", "\u5192\u53f7\uff0c\u5168\u89d2\uff1a\uff1a") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r91.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("WS", 91, "ws", "\u7701\u7565\u53f7\uff0c\u5168\u89d2\uff1a\u2026\u2026") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r92.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("WP", 92, "wp", "\u7834\u6298\u53f7\uff0c\u5168\u89d2\uff1a\u2014\u2014") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r93.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("WB", 93, "wb", "\u767e\u5206\u53f7\u5343\u5206\u53f7\uff0c\u5168\u89d2\uff1a\uff05") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r94.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("WH", 94, "wh", "\u5355\u4f4d\u7b26\u53f7\uff0c\u5168\u89d2\uff1a\uffe5") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r95.<com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("UN", 95, "un", "\u672a\u77e5") in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <clinit>()> ==> <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
INTERFACE edge: r17 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>() in <com.github.houbb.segment.support.format.impl.ChineseTsSegmentFormat: void <clinit>()> ==> <java.util.ArrayList: java.util.Iterator iterator()>
VIRTUAL edge: r10 = virtualinvoke r9.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ") in <com.github.houbb.segment.support.format.impl.ChineseTsSegmentFormat: void <clinit>()> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
VIRTUAL edge: c2 = virtualinvoke $r11.<java.lang.String: char charAt(int)>(0) in <com.github.houbb.segment.support.format.impl.ChineseTsSegmentFormat: void <clinit>()> ==> <java.lang.String: char charAt(int)>
VIRTUAL edge: c3 = virtualinvoke $r12.<java.lang.String: char charAt(int)>(0) in <com.github.houbb.segment.support.format.impl.ChineseTsSegmentFormat: void <clinit>()> ==> <java.lang.String: char charAt(int)>
INTERFACE edge: interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, $r15) in <com.github.houbb.segment.support.format.impl.ChineseTsSegmentFormat: void <clinit>()> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, $r15) in <com.github.houbb.segment.support.format.impl.ChineseTsSegmentFormat: void <clinit>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() in <com.github.houbb.segment.support.format.impl.ChineseTsSegmentFormat: void <clinit>()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[Segment Format] chinese traditional-simple load finished, cost ") in <com.github.houbb.segment.support.format.impl.ChineseTsSegmentFormat: void <clinit>()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l4) in <com.github.houbb.segment.support.format.impl.ChineseTsSegmentFormat: void <clinit>()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(long)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ms") in <com.github.houbb.segment.support.format.impl.ChineseTsSegmentFormat: void <clinit>()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>() in <com.github.houbb.segment.support.format.impl.ChineseTsSegmentFormat: void <clinit>()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r7) in <com.github.houbb.segment.support.format.impl.ChineseTsSegmentFormat: void <clinit>()> ==> <java.io.PrintStream: void println(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.String: char[] toCharArray()>() in <com.github.houbb.segment.util.CharUtils: void <clinit>()> ==> <java.lang.String: char[] toCharArray()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("ED") in <com.github.houbb.segment.support.segment.strategy.impl.TireTreeSegmentStrategy: boolean isEnd(java.util.Map)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: r1 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("ED") in <com.github.houbb.segment.support.segment.strategy.impl.TireTreeSegmentStrategy: boolean isEnd(java.util.Map)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r2.<java.lang.Boolean: boolean booleanValue()>() in <com.github.houbb.segment.support.segment.strategy.impl.TireTreeSegmentStrategy: boolean isEnd(java.util.Map)> ==> <java.lang.Boolean: boolean booleanValue()>
INTERFACE edge: $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2) in <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: double getEmitProb(int,char)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2) in <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: double getEmitProb(int,char)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r6 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5) in <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: double getEmitProb(int,char)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r6 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5) in <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: double getEmitProb(int,char)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $d0 = virtualinvoke r7.<java.lang.Double: double doubleValue()>() in <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: double getEmitProb(int,char)> ==> <java.lang.Double: double doubleValue()>
INTERFACE edge: interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r7) in <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: java.util.Map getEmitPropMap()> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r7) in <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: java.util.Map getEmitPropMap()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, $r11) in <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: java.util.Map getEmitPropMap()> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, $r11) in <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: java.util.Map getEmitPropMap()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, $r15) in <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: java.util.Map getEmitPropMap()> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, $r15) in <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: java.util.Map getEmitPropMap()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r17.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r18, $r19) in <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: java.util.Map getEmitPropMap()> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r17.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r18, $r19) in <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: java.util.Map getEmitPropMap()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: r22 = interfaceinvoke r21.<java.util.List: java.util.Iterator iterator()>() in <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: java.util.Map getEmitPropMap()> ==> <java.util.ArrayList: java.util.Iterator iterator()>
VIRTUAL edge: r25 = virtualinvoke r24.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ") in <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: java.util.Map getEmitPropMap()> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
VIRTUAL edge: $c0 = virtualinvoke $r28.<java.lang.String: char charAt(int)>(0) in <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: java.util.Map getEmitPropMap()> ==> <java.lang.String: char charAt(int)>
INTERFACE edge: $r33 = interfaceinvoke $r32.<java.util.Map: java.lang.Object get(java.lang.Object)>(r27) in <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: java.util.Map getEmitPropMap()> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r33 = interfaceinvoke $r32.<java.util.Map: java.lang.Object get(java.lang.Object)>(r27) in <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: java.util.Map getEmitPropMap()> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r34.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r29, r31) in <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: java.util.Map getEmitPropMap()> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r34.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r29, r31) in <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: java.util.Map getEmitPropMap()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.github.houbb.segment.bs.SegmentBs: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r0.<com.github.houbb.segment.support.segment.impl.SegmentContext: com.github.houbb.segment.support.segment.impl.SegmentContext data(com.github.houbb.segment.support.data.ISegmentData)>($r2) in <com.github.houbb.segment.bs.SegmentBs: com.github.houbb.segment.api.ISegmentContext buildContext()> ==> <com.github.houbb.segment.support.segment.impl.SegmentContext: com.github.houbb.segment.support.segment.impl.SegmentContext data(com.github.houbb.segment.support.data.ISegmentData)>
VIRTUAL edge: $r5 = virtualinvoke $r3.<com.github.houbb.segment.support.segment.impl.SegmentContext: com.github.houbb.segment.support.segment.impl.SegmentContext mode(com.github.houbb.segment.support.segment.mode.ISegmentMode)>($r4) in <com.github.houbb.segment.bs.SegmentBs: com.github.houbb.segment.api.ISegmentContext buildContext()> ==> <com.github.houbb.segment.support.segment.impl.SegmentContext: com.github.houbb.segment.support.segment.impl.SegmentContext mode(com.github.houbb.segment.support.segment.mode.ISegmentMode)>
VIRTUAL edge: $r7 = virtualinvoke $r5.<com.github.houbb.segment.support.segment.impl.SegmentContext: com.github.houbb.segment.support.segment.impl.SegmentContext format(com.github.houbb.segment.support.format.ISegmentFormat)>($r6) in <com.github.houbb.segment.bs.SegmentBs: com.github.houbb.segment.api.ISegmentContext buildContext()> ==> <com.github.houbb.segment.support.segment.impl.SegmentContext: com.github.houbb.segment.support.segment.impl.SegmentContext format(com.github.houbb.segment.support.format.ISegmentFormat)>
VIRTUAL edge: $r9 = virtualinvoke $r7.<com.github.houbb.segment.support.segment.impl.SegmentContext: com.github.houbb.segment.support.segment.impl.SegmentContext posTagging(com.github.houbb.segment.support.tagging.pos.tag.ISegmentPosTagging)>($r8) in <com.github.houbb.segment.bs.SegmentBs: com.github.houbb.segment.api.ISegmentContext buildContext()> ==> <com.github.houbb.segment.support.segment.impl.SegmentContext: com.github.houbb.segment.support.segment.impl.SegmentContext posTagging(com.github.houbb.segment.support.tagging.pos.tag.ISegmentPosTagging)>
VIRTUAL edge: $r11 = virtualinvoke $r9.<com.github.houbb.segment.support.segment.impl.SegmentContext: com.github.houbb.segment.support.segment.impl.SegmentContext posData(com.github.houbb.segment.support.tagging.pos.data.ISegmentPosData)>($r10) in <com.github.houbb.segment.bs.SegmentBs: com.github.houbb.segment.api.ISegmentContext buildContext()> ==> <com.github.houbb.segment.support.segment.impl.SegmentContext: com.github.houbb.segment.support.segment.impl.SegmentContext posData(com.github.houbb.segment.support.tagging.pos.data.ISegmentPosData)>
SPECIAL edge: specialinvoke r0.<com.github.houbb.segment.support.format.impl.AbstractSegmentFormatInit: void <init>()>() in <com.github.houbb.segment.support.format.impl.SegmentFormats$1: void <init>(com.github.houbb.segment.support.format.ISegmentFormat[])> ==> <com.github.houbb.segment.support.format.impl.AbstractSegmentFormatInit: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: java.lang.Object clone()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: java.lang.Object clone()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: r1 = specialinvoke r0.<com.github.houbb.segment.support.data.impl.AbstractSegmentData: com.github.houbb.segment.support.normalization.NormalizationResult normalization()>() in <com.github.houbb.segment.support.data.impl.AbstractSegmentData: java.util.Map getFreqMap()> ==> <com.github.houbb.segment.support.data.impl.AbstractSegmentData: com.github.houbb.segment.support.normalization.NormalizationResult normalization()>
VIRTUAL edge: $r2 = virtualinvoke r1.<com.github.houbb.segment.support.normalization.NormalizationResult: java.util.Map freqMap()>() in <com.github.houbb.segment.support.data.impl.AbstractSegmentData: java.util.Map getFreqMap()> ==> <com.github.houbb.segment.support.normalization.NormalizationResult: java.util.Map freqMap()>
SPECIAL edge: specialinvoke r4.<com.github.houbb.segment.support.data.impl.AbstractSegmentData: void initNormalizationResult()>() in <com.github.houbb.segment.support.data.impl.AbstractSegmentData: com.github.houbb.segment.support.normalization.NormalizationResult normalization()> ==> <com.github.houbb.segment.support.data.impl.AbstractSegmentData: void initNormalizationResult()>
CLINIT edge: l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <com.github.houbb.segment.support.data.impl.AbstractSegmentData: void initNormalizationResult()> ==> <java.lang.System: void <clinit>()>
STATIC edge: $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <com.github.houbb.segment.support.data.impl.AbstractSegmentData: void initNormalizationResult()> ==> <java.lang.System: long currentTimeMillis()>
STATIC edge: $r2 = staticinvoke <com.github.houbb.heaven.support.instance.impl.Instances: java.lang.Object singleton(java.lang.Class)>(class "Lcom/github/houbb/segment/support/normalization/impl/LogNormalization;") in <com.github.houbb.segment.support.data.impl.AbstractSegmentData: void initNormalizationResult()> ==> <com.github.houbb.heaven.support.instance.impl.Instances: java.lang.Object singleton(java.lang.Class)>
STATIC edge: l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <com.github.houbb.segment.support.data.impl.AbstractSegmentData: void initNormalizationResult()> ==> <java.lang.System: long currentTimeMillis()>
VIRTUAL edge: r1 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.String toString()>() in <com.github.houbb.segment.support.segment.impl.PreciseSegment: java.util.List getSegmentResultList(java.lang.StringBuilder,int,com.github.houbb.segment.api.ISegmentContext)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke r0.<java.lang.StringBuilder: void setLength(int)>(0) in <com.github.houbb.segment.support.segment.impl.PreciseSegment: java.util.List getSegmentResultList(java.lang.StringBuilder,int,com.github.houbb.segment.api.ISegmentContext)> ==> <java.lang.StringBuilder: void setLength(int)>
INTERFACE edge: r3 = interfaceinvoke r2.<com.github.houbb.segment.api.ISegmentContext: com.github.houbb.segment.support.segment.mode.ISegmentMode mode()>() in <com.github.houbb.segment.support.segment.impl.PreciseSegment: java.util.List getSegmentResultList(java.lang.StringBuilder,int,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.impl.SegmentContext: com.github.houbb.segment.support.segment.mode.ISegmentMode mode()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<com.github.houbb.segment.support.segment.mode.SegmentModeContext: com.github.houbb.segment.support.segment.mode.SegmentModeContext string(java.lang.String)>(r1) in <com.github.houbb.segment.support.segment.impl.PreciseSegment: java.util.List getSegmentResultList(java.lang.StringBuilder,int,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.mode.SegmentModeContext: com.github.houbb.segment.support.segment.mode.SegmentModeContext string(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<com.github.houbb.segment.support.segment.mode.SegmentModeContext: com.github.houbb.segment.support.segment.mode.SegmentModeContext startIndex(int)>(i0) in <com.github.houbb.segment.support.segment.impl.PreciseSegment: java.util.List getSegmentResultList(java.lang.StringBuilder,int,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.mode.SegmentModeContext: com.github.houbb.segment.support.segment.mode.SegmentModeContext startIndex(int)>
VIRTUAL edge: r7 = virtualinvoke $r6.<com.github.houbb.segment.support.segment.mode.SegmentModeContext: com.github.houbb.segment.support.segment.mode.SegmentModeContext segmentContext(com.github.houbb.segment.api.ISegmentContext)>(r2) in <com.github.houbb.segment.support.segment.impl.PreciseSegment: java.util.List getSegmentResultList(java.lang.StringBuilder,int,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.mode.SegmentModeContext: com.github.houbb.segment.support.segment.mode.SegmentModeContext segmentContext(com.github.houbb.segment.api.ISegmentContext)>
INTERFACE edge: $r8 = interfaceinvoke r3.<com.github.houbb.segment.support.segment.mode.ISegmentMode: java.util.List select(com.github.houbb.segment.support.segment.mode.SegmentModeContext)>(r7) in <com.github.houbb.segment.support.segment.impl.PreciseSegment: java.util.List getSegmentResultList(java.lang.StringBuilder,int,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.mode.impl.AbstractSegmentMode: java.util.List select(com.github.houbb.segment.support.segment.mode.SegmentModeContext)>
INTERFACE edge: $r8 = interfaceinvoke r3.<com.github.houbb.segment.support.segment.mode.ISegmentMode: java.util.List select(com.github.houbb.segment.support.segment.mode.SegmentModeContext)>(r7) in <com.github.houbb.segment.support.segment.impl.PreciseSegment: java.util.List getSegmentResultList(java.lang.StringBuilder,int,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.List select(com.github.houbb.segment.support.segment.mode.SegmentModeContext)>
INTERFACE edge: $r8 = interfaceinvoke r3.<com.github.houbb.segment.support.segment.mode.ISegmentMode: java.util.List select(com.github.houbb.segment.support.segment.mode.SegmentModeContext)>(r7) in <com.github.houbb.segment.support.segment.impl.PreciseSegment: java.util.List getSegmentResultList(java.lang.StringBuilder,int,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.mode.impl.SingleSegmentMode: java.util.List select(com.github.houbb.segment.support.segment.mode.SegmentModeContext)>
VIRTUAL edge: $r2 = virtualinvoke $r0.<com.github.houbb.segment.support.segment.mode.SegmentModeContext: com.github.houbb.segment.support.segment.mode.SegmentModeContext string(java.lang.String)>(r1) in <com.github.houbb.segment.support.segment.impl.PreciseSegment: java.util.List singleCharSegment(java.lang.String,int)> ==> <com.github.houbb.segment.support.segment.mode.SegmentModeContext: com.github.houbb.segment.support.segment.mode.SegmentModeContext string(java.lang.String)>
VIRTUAL edge: r3 = virtualinvoke $r2.<com.github.houbb.segment.support.segment.mode.SegmentModeContext: com.github.houbb.segment.support.segment.mode.SegmentModeContext startIndex(int)>(i0) in <com.github.houbb.segment.support.segment.impl.PreciseSegment: java.util.List singleCharSegment(java.lang.String,int)> ==> <com.github.houbb.segment.support.segment.mode.SegmentModeContext: com.github.houbb.segment.support.segment.mode.SegmentModeContext startIndex(int)>
INTERFACE edge: $r5 = interfaceinvoke $r4.<com.github.houbb.segment.support.segment.mode.ISegmentMode: java.util.List select(com.github.houbb.segment.support.segment.mode.SegmentModeContext)>(r3) in <com.github.houbb.segment.support.segment.impl.PreciseSegment: java.util.List singleCharSegment(java.lang.String,int)> ==> <com.github.houbb.segment.support.segment.mode.impl.AbstractSegmentMode: java.util.List select(com.github.houbb.segment.support.segment.mode.SegmentModeContext)>
INTERFACE edge: $r5 = interfaceinvoke $r4.<com.github.houbb.segment.support.segment.mode.ISegmentMode: java.util.List select(com.github.houbb.segment.support.segment.mode.SegmentModeContext)>(r3) in <com.github.houbb.segment.support.segment.impl.PreciseSegment: java.util.List singleCharSegment(java.lang.String,int)> ==> <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.List select(com.github.houbb.segment.support.segment.mode.SegmentModeContext)>
INTERFACE edge: $r5 = interfaceinvoke $r4.<com.github.houbb.segment.support.segment.mode.ISegmentMode: java.util.List select(com.github.houbb.segment.support.segment.mode.SegmentModeContext)>(r3) in <com.github.houbb.segment.support.segment.impl.PreciseSegment: java.util.List singleCharSegment(java.lang.String,int)> ==> <com.github.houbb.segment.support.segment.mode.impl.SingleSegmentMode: java.util.List select(com.github.houbb.segment.support.segment.mode.SegmentModeContext)>
INTERFACE edge: r1 = interfaceinvoke r0.<com.github.houbb.segment.api.ISegmentContext: com.github.houbb.segment.support.segment.mode.ISegmentMode mode()>() in <com.github.houbb.segment.support.segment.impl.Segment: com.github.houbb.segment.api.ISegment getSegment(com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.impl.SegmentContext: com.github.houbb.segment.support.segment.mode.ISegmentMode mode()>
INTERFACE edge: $z0 = interfaceinvoke r1.<com.github.houbb.segment.support.segment.mode.ISegmentMode: boolean isFastMode()>() in <com.github.houbb.segment.support.segment.impl.Segment: com.github.houbb.segment.api.ISegment getSegment(com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.mode.impl.AbstractSegmentMode: boolean isFastMode()>
INTERFACE edge: $z0 = interfaceinvoke r1.<com.github.houbb.segment.support.segment.mode.ISegmentMode: boolean isFastMode()>() in <com.github.houbb.segment.support.segment.impl.Segment: com.github.houbb.segment.api.ISegment getSegment(com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.mode.impl.precise.AbstractPreciseSegmentMode: boolean isFastMode()>
INTERFACE edge: $z0 = interfaceinvoke r1.<com.github.houbb.segment.support.segment.mode.ISegmentMode: boolean isFastMode()>() in <com.github.houbb.segment.support.segment.impl.Segment: com.github.houbb.segment.api.ISegment getSegment(com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.mode.impl.SingleSegmentMode: boolean isFastMode()>
VIRTUAL edge: $r2 = virtualinvoke r1.<com.github.houbb.segment.support.segment.mode.SegmentModeContext: java.util.List resultList()>() in <com.github.houbb.segment.support.segment.mode.impl.IndexSegmentMode: java.util.List doSelect(com.github.houbb.segment.support.segment.mode.SegmentModeContext)> ==> <com.github.houbb.segment.support.segment.mode.SegmentModeContext: java.util.List resultList()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>() in <com.github.houbb.segment.support.segment.mode.impl.IndexSegmentMode: java.util.List doSelect(com.github.houbb.segment.support.segment.mode.SegmentModeContext)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: r6 = interfaceinvoke r5.<com.github.houbb.segment.api.ISegmentResult: java.lang.String word()>() in <com.github.houbb.segment.support.segment.mode.impl.IndexSegmentMode: java.util.List doSelect(com.github.houbb.segment.support.segment.mode.SegmentModeContext)> ==> <com.github.houbb.segment.support.segment.impl.SegmentResult: java.lang.String word()>
VIRTUAL edge: $i0 = virtualinvoke r6.<java.lang.String: int length()>() in <com.github.houbb.segment.support.segment.mode.impl.IndexSegmentMode: java.util.List doSelect(com.github.houbb.segment.support.segment.mode.SegmentModeContext)> ==> <java.lang.String: int length()>
INTERFACE edge: interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>(r5) in <com.github.houbb.segment.support.segment.mode.impl.IndexSegmentMode: java.util.List doSelect(com.github.houbb.segment.support.segment.mode.SegmentModeContext)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: r1 = virtualinvoke r0.<com.github.houbb.segment.support.segment.mode.SegmentModeContext: java.util.List resultList()>() in <com.github.houbb.segment.support.segment.mode.impl.GreedyLengthSegmentMode: java.util.List doSelect(com.github.houbb.segment.support.segment.mode.SegmentModeContext)> ==> <com.github.houbb.segment.support.segment.mode.SegmentModeContext: java.util.List resultList()>
SPECIAL edge: specialinvoke $r2.<com.github.houbb.segment.support.segment.mode.impl.GreedyLengthSegmentMode$1: void <init>(com.github.houbb.segment.support.segment.mode.impl.GreedyLengthSegmentMode)>(r3) in <com.github.houbb.segment.support.segment.mode.impl.GreedyLengthSegmentMode: java.util.List doSelect(com.github.houbb.segment.support.segment.mode.SegmentModeContext)> ==> <com.github.houbb.segment.support.segment.mode.impl.GreedyLengthSegmentMode$1: void <init>(com.github.houbb.segment.support.segment.mode.impl.GreedyLengthSegmentMode)>
INTERFACE edge: $i0 = interfaceinvoke r1.<java.util.List: int size()>() in <com.github.houbb.segment.support.segment.mode.impl.GreedyLengthSegmentMode: java.util.List doSelect(com.github.houbb.segment.support.segment.mode.SegmentModeContext)> ==> <java.util.ArrayList: int size()>
INTERFACE edge: $r4 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>($i1) in <com.github.houbb.segment.support.segment.mode.impl.GreedyLengthSegmentMode: java.util.List doSelect(com.github.houbb.segment.support.segment.mode.SegmentModeContext)> ==> <java.util.ArrayList: java.lang.Object get(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.github.houbb.segment.support.segment.mode.SegmentModeContext: com.github.houbb.segment.api.ISegmentContext segmentContext()>() in <com.github.houbb.segment.support.segment.mode.impl.GreedyFrequencySegmentMode: java.util.List doSelect(com.github.houbb.segment.support.segment.mode.SegmentModeContext)> ==> <com.github.houbb.segment.support.segment.mode.SegmentModeContext: com.github.houbb.segment.api.ISegmentContext segmentContext()>
INTERFACE edge: r2 = interfaceinvoke $r1.<com.github.houbb.segment.api.ISegmentContext: com.github.houbb.segment.support.data.ISegmentData data()>() in <com.github.houbb.segment.support.segment.mode.impl.GreedyFrequencySegmentMode: java.util.List doSelect(com.github.houbb.segment.support.segment.mode.SegmentModeContext)> ==> <com.github.houbb.segment.support.segment.impl.SegmentContext: com.github.houbb.segment.support.data.ISegmentData data()>
INTERFACE edge: r4 = interfaceinvoke r3.<com.github.houbb.segment.support.segment.mode.ISegmentMode: java.util.List select(com.github.houbb.segment.support.segment.mode.SegmentModeContext)>(r0) in <com.github.houbb.segment.support.segment.mode.impl.GreedyFrequencySegmentMode: java.util.List doSelect(com.github.houbb.segment.support.segment.mode.SegmentModeContext)> ==> <com.github.houbb.segment.support.segment.mode.impl.AbstractSegmentMode: java.util.List select(com.github.houbb.segment.support.segment.mode.SegmentModeContext)>
INTERFACE edge: r4 = interfaceinvoke r3.<com.github.houbb.segment.support.segment.mode.ISegmentMode: java.util.List select(com.github.houbb.segment.support.segment.mode.SegmentModeContext)>(r0) in <com.github.houbb.segment.support.segment.mode.impl.GreedyFrequencySegmentMode: java.util.List doSelect(com.github.houbb.segment.support.segment.mode.SegmentModeContext)> ==> <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.List select(com.github.houbb.segment.support.segment.mode.SegmentModeContext)>
INTERFACE edge: r4 = interfaceinvoke r3.<com.github.houbb.segment.support.segment.mode.ISegmentMode: java.util.List select(com.github.houbb.segment.support.segment.mode.SegmentModeContext)>(r0) in <com.github.houbb.segment.support.segment.mode.impl.GreedyFrequencySegmentMode: java.util.List doSelect(com.github.houbb.segment.support.segment.mode.SegmentModeContext)> ==> <com.github.houbb.segment.support.segment.mode.impl.SingleSegmentMode: java.util.List select(com.github.houbb.segment.support.segment.mode.SegmentModeContext)>
SPECIAL edge: specialinvoke $r5.<com.github.houbb.segment.support.segment.mode.impl.GreedyFrequencySegmentMode$1: void <init>(com.github.houbb.segment.support.segment.mode.impl.GreedyFrequencySegmentMode,com.github.houbb.segment.support.data.ISegmentData)>(r6, r2) in <com.github.houbb.segment.support.segment.mode.impl.GreedyFrequencySegmentMode: java.util.List doSelect(com.github.houbb.segment.support.segment.mode.SegmentModeContext)> ==> <com.github.houbb.segment.support.segment.mode.impl.GreedyFrequencySegmentMode$1: void <init>(com.github.houbb.segment.support.segment.mode.impl.GreedyFrequencySegmentMode,com.github.houbb.segment.support.data.ISegmentData)>
INTERFACE edge: $i0 = interfaceinvoke r4.<java.util.List: int size()>() in <com.github.houbb.segment.support.segment.mode.impl.GreedyFrequencySegmentMode: java.util.List doSelect(com.github.houbb.segment.support.segment.mode.SegmentModeContext)> ==> <java.util.ArrayList: int size()>
INTERFACE edge: $r7 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>($i1) in <com.github.houbb.segment.support.segment.mode.impl.GreedyFrequencySegmentMode: java.util.List doSelect(com.github.houbb.segment.support.segment.mode.SegmentModeContext)> ==> <java.util.ArrayList: java.lang.Object get(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.github.houbb.segment.support.segment.mode.SegmentModeContext: java.util.List resultList()>() in <com.github.houbb.segment.support.segment.mode.impl.AllSegmentMode: java.util.List doSelect(com.github.houbb.segment.support.segment.mode.SegmentModeContext)> ==> <com.github.houbb.segment.support.segment.mode.SegmentModeContext: java.util.List resultList()>
SPECIAL edge: r3 = specialinvoke r0.<com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.Map getSegmentMap(java.lang.String,com.github.houbb.segment.api.ISegmentContext)>(r1, r2) in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.Map buildRouteMap(java.lang.String,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.Map getSegmentMap(java.lang.String,com.github.houbb.segment.api.ISegmentContext)>
SPECIAL edge: $r4 = specialinvoke r0.<com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.Map calcRouteMap(java.util.Map,com.github.houbb.segment.api.ISegmentContext)>(r3, r2) in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.Map buildRouteMap(java.lang.String,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.Map calcRouteMap(java.util.Map,com.github.houbb.segment.api.ISegmentContext)>
CLINIT edge: $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1) in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.Map getSegmentMap(java.lang.String,com.github.houbb.segment.api.ISegmentContext)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1) in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.Map getSegmentMap(java.lang.String,com.github.houbb.segment.api.ISegmentContext)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: r2 = staticinvoke <com.github.houbb.segment.support.segment.strategy.impl.SegmentStrategies: com.github.houbb.segment.support.segment.strategy.ISegmentStrategy tireTree()>() in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.Map getSegmentMap(java.lang.String,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.strategy.impl.SegmentStrategies: com.github.houbb.segment.support.segment.strategy.ISegmentStrategy tireTree()>
STATIC edge: r1 = staticinvoke <com.github.houbb.heaven.util.guava.Guavas: java.util.Map newLinkedHashMap(int)>(i0) in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.Map getSegmentMap(java.lang.String,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.heaven.util.guava.Guavas: java.util.Map newLinkedHashMap(int)>
CLINIT edge: $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-1) in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.Map calcRouteMap(java.util.Map,com.github.houbb.segment.api.ISegmentContext)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: r30 = staticinvoke <com.github.houbb.heaven.support.tuple.impl.Pair: com.github.houbb.heaven.support.tuple.impl.Pair of(java.lang.Object,java.lang.Object)>($r26, $r27) in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.Map calcRouteMap(java.util.Map,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.heaven.support.tuple.impl.Pair: com.github.houbb.heaven.support.tuple.impl.Pair of(java.lang.Object,java.lang.Object)>
STATIC edge: $r27 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d3) in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.Map calcRouteMap(java.util.Map,com.github.houbb.segment.api.ISegmentContext)> ==> <java.lang.Double: java.lang.Double valueOf(double)>
STATIC edge: $r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.Map calcRouteMap(java.util.Map,com.github.houbb.segment.api.ISegmentContext)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: r30 = staticinvoke <com.github.houbb.heaven.support.tuple.impl.Pair: com.github.houbb.heaven.support.tuple.impl.Pair of(java.lang.Object,java.lang.Object)>($r28, $r29) in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.Map calcRouteMap(java.util.Map,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.heaven.support.tuple.impl.Pair: com.github.houbb.heaven.support.tuple.impl.Pair of(java.lang.Object,java.lang.Object)>
STATIC edge: $r29 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d3) in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.Map calcRouteMap(java.util.Map,com.github.houbb.segment.api.ISegmentContext)> ==> <java.lang.Double: java.lang.Double valueOf(double)>
STATIC edge: $r28 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.Map calcRouteMap(java.util.Map,com.github.houbb.segment.api.ISegmentContext)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $z2 = staticinvoke <com.github.houbb.heaven.util.lang.ObjectUtil: boolean isNull(java.lang.Object)>(r30) in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.Map calcRouteMap(java.util.Map,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.heaven.util.lang.ObjectUtil: boolean isNull(java.lang.Object)>
STATIC edge: $r6 = staticinvoke <com.github.houbb.heaven.support.tuple.impl.Pair: com.github.houbb.heaven.support.tuple.impl.Pair of(java.lang.Object,java.lang.Object)>($r4, $r5) in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.Map calcRouteMap(java.util.Map,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.heaven.support.tuple.impl.Pair: com.github.houbb.heaven.support.tuple.impl.Pair of(java.lang.Object,java.lang.Object)>
STATIC edge: $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0) in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.Map calcRouteMap(java.util.Map,com.github.houbb.segment.api.ISegmentContext)> ==> <java.lang.Double: java.lang.Double valueOf(double)>
STATIC edge: $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0) in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.Map calcRouteMap(java.util.Map,com.github.houbb.segment.api.ISegmentContext)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-1) in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.Map calcRouteMap(java.util.Map,com.github.houbb.segment.api.ISegmentContext)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: r2 = staticinvoke <com.github.houbb.heaven.util.guava.Guavas: java.util.Map newLinkedHashMap()>() in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.Map calcRouteMap(java.util.Map,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.heaven.util.guava.Guavas: java.util.Map newLinkedHashMap()>
CLINIT edge: $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0) in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.Map calcRouteMap(java.util.Map,com.github.houbb.segment.api.ISegmentContext)> ==> <java.lang.Double: void <clinit>()>
INTERFACE edge: $r2 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1) in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: int getRouteIndex(java.util.Map,int)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r2 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1) in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: int getRouteIndex(java.util.Map,int)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $i2 = virtualinvoke $r5.<java.lang.Integer: int intValue()>() in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: int getRouteIndex(java.util.Map,int)> ==> <java.lang.Integer: int intValue()>
VIRTUAL edge: i0 = virtualinvoke r0.<java.lang.StringBuilder: int length()>() in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: void bufferToResultList(int,java.lang.StringBuilder,java.util.List,com.github.houbb.segment.api.ISegmentContext)> ==> <java.lang.StringBuilder: int length()>
VIRTUAL edge: r1 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.String toString()>() in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: void bufferToResultList(int,java.lang.StringBuilder,java.util.List,com.github.houbb.segment.api.ISegmentContext)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke r0.<java.lang.StringBuilder: void setLength(int)>(0) in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: void bufferToResultList(int,java.lang.StringBuilder,java.util.List,com.github.houbb.segment.api.ISegmentContext)> ==> <java.lang.StringBuilder: void setLength(int)>
VIRTUAL edge: $i3 = virtualinvoke r1.<java.lang.String: int length()>() in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: void bufferToResultList(int,java.lang.StringBuilder,java.util.List,com.github.houbb.segment.api.ISegmentContext)> ==> <java.lang.String: int length()>
VIRTUAL edge: $r7 = virtualinvoke r2.<com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: com.github.houbb.segment.api.ISegmentResult buildSegmentResult(java.lang.String,int)>(r1, i2) in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: void bufferToResultList(int,java.lang.StringBuilder,java.util.List,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: com.github.houbb.segment.api.ISegmentResult buildSegmentResult(java.lang.String,int)>
VIRTUAL edge: z0 = virtualinvoke r2.<com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: boolean dictContainsWord(java.lang.String,com.github.houbb.segment.api.ISegmentContext)>(r1, r3) in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: void bufferToResultList(int,java.lang.StringBuilder,java.util.List,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: boolean dictContainsWord(java.lang.String,com.github.houbb.segment.api.ISegmentContext)>
VIRTUAL edge: z0 = virtualinvoke r2.<com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: boolean dictContainsWord(java.lang.String,com.github.houbb.segment.api.ISegmentContext)>(r1, r3) in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: void bufferToResultList(int,java.lang.StringBuilder,java.util.List,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.mode.impl.precise.HmmSegmentMode: boolean dictContainsWord(java.lang.String,com.github.houbb.segment.api.ISegmentContext)>
VIRTUAL edge: $r6 = virtualinvoke r2.<com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: com.github.houbb.segment.api.ISegmentResult buildSegmentResult(java.lang.String,int)>(r1, i2) in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: void bufferToResultList(int,java.lang.StringBuilder,java.util.List,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: com.github.houbb.segment.api.ISegmentResult buildSegmentResult(java.lang.String,int)>
VIRTUAL edge: r4 = virtualinvoke r2.<com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.List buildChineseSegments(java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)>(r1, i2, r3) in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: void bufferToResultList(int,java.lang.StringBuilder,java.util.List,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.mode.impl.precise.SearchSegmentMode: java.util.List buildChineseSegments(java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)>
VIRTUAL edge: r4 = virtualinvoke r2.<com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.List buildChineseSegments(java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)>(r1, i2, r3) in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: void bufferToResultList(int,java.lang.StringBuilder,java.util.List,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.List buildChineseSegments(java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)>
VIRTUAL edge: r4 = virtualinvoke r2.<com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.List buildChineseSegments(java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)>(r1, i2, r3) in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: void bufferToResultList(int,java.lang.StringBuilder,java.util.List,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.mode.impl.precise.HmmSegmentMode: java.util.List buildChineseSegments(java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)>
INTERFACE edge: interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>($r7) in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: void bufferToResultList(int,java.lang.StringBuilder,java.util.List,com.github.houbb.segment.api.ISegmentContext)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>($r6) in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: void bufferToResultList(int,java.lang.StringBuilder,java.util.List,com.github.houbb.segment.api.ISegmentContext)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke r5.<java.util.List: boolean addAll(java.util.Collection)>(r4) in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: void bufferToResultList(int,java.lang.StringBuilder,java.util.List,com.github.houbb.segment.api.ISegmentContext)> ==> <java.util.ArrayList: boolean addAll(java.util.Collection)>
STATIC edge: r0 = staticinvoke <com.github.houbb.segment.support.segment.strategy.impl.SegmentStrategies: com.github.houbb.segment.support.segment.strategy.ISegmentStrategy hmm()>() in <com.github.houbb.segment.support.segment.mode.impl.precise.SearchSegmentMode: java.util.List buildChineseSegments(java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.strategy.impl.SegmentStrategies: com.github.houbb.segment.support.segment.strategy.ISegmentStrategy hmm()>
STATIC edge: r0 = staticinvoke <com.github.houbb.segment.support.segment.strategy.impl.SegmentStrategies: com.github.houbb.segment.support.segment.strategy.ISegmentStrategy simple()>() in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.List buildChineseSegments(java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.strategy.impl.SegmentStrategies: com.github.houbb.segment.support.segment.strategy.ISegmentStrategy simple()>
STATIC edge: r0 = staticinvoke <com.github.houbb.segment.support.segment.strategy.impl.SegmentStrategies: com.github.houbb.segment.support.segment.strategy.ISegmentStrategy hmm()>() in <com.github.houbb.segment.support.segment.mode.impl.precise.HmmSegmentMode: java.util.List buildChineseSegments(java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.strategy.impl.SegmentStrategies: com.github.houbb.segment.support.segment.strategy.ISegmentStrategy hmm()>
VIRTUAL edge: $r2 = virtualinvoke $r0.<com.github.houbb.segment.support.segment.impl.SegmentResult: com.github.houbb.segment.support.segment.impl.SegmentResult word(java.lang.String)>(r1) in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: com.github.houbb.segment.api.ISegmentResult buildSegmentResult(java.lang.String,int)> ==> <com.github.houbb.segment.support.segment.impl.SegmentResult: com.github.houbb.segment.support.segment.impl.SegmentResult word(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<com.github.houbb.segment.support.segment.impl.SegmentResult: com.github.houbb.segment.support.segment.impl.SegmentResult startIndex(int)>(i0) in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: com.github.houbb.segment.api.ISegmentResult buildSegmentResult(java.lang.String,int)> ==> <com.github.houbb.segment.support.segment.impl.SegmentResult: com.github.houbb.segment.support.segment.impl.SegmentResult startIndex(int)>
VIRTUAL edge: $i1 = virtualinvoke r1.<java.lang.String: int length()>() in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: com.github.houbb.segment.api.ISegmentResult buildSegmentResult(java.lang.String,int)> ==> <java.lang.String: int length()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<com.github.houbb.segment.support.segment.impl.SegmentResult: com.github.houbb.segment.support.segment.impl.SegmentResult endIndex(int)>($i2) in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: com.github.houbb.segment.api.ISegmentResult buildSegmentResult(java.lang.String,int)> ==> <com.github.houbb.segment.support.segment.impl.SegmentResult: com.github.houbb.segment.support.segment.impl.SegmentResult endIndex(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.github.houbb.segment.support.segment.result.impl.SegmentResultHandlerWord$1: void <init>(com.github.houbb.segment.support.segment.result.impl.SegmentResultHandlerWord)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $i0 = interfaceinvoke r0.<java.util.List: int size()>() in <com.github.houbb.segment.support.segment.strategy.impl.AbstractSegmentStrategy: java.util.List buildSegmentResultList(java.lang.String,int,java.util.List)> ==> <java.util.ArrayList: int size()>
INTERFACE edge: r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>() in <com.github.houbb.segment.support.segment.strategy.impl.AbstractSegmentStrategy: java.util.List buildSegmentResultList(java.lang.String,int,java.util.List)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
VIRTUAL edge: i1 = virtualinvoke $r4.<java.lang.Integer: int intValue()>() in <com.github.houbb.segment.support.segment.strategy.impl.AbstractSegmentStrategy: java.util.List buildSegmentResultList(java.lang.String,int,java.util.List)> ==> <java.lang.Integer: int intValue()>
VIRTUAL edge: r6 = virtualinvoke r5.<java.lang.String: java.lang.String substring(int,int)>(i2, i1) in <com.github.houbb.segment.support.segment.strategy.impl.AbstractSegmentStrategy: java.util.List buildSegmentResultList(java.lang.String,int,java.util.List)> ==> <java.lang.String: java.lang.String substring(int,int)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<com.github.houbb.segment.support.segment.impl.SegmentResult: com.github.houbb.segment.support.segment.impl.SegmentResult startIndex(int)>(i2) in <com.github.houbb.segment.support.segment.strategy.impl.AbstractSegmentStrategy: java.util.List buildSegmentResultList(java.lang.String,int,java.util.List)> ==> <com.github.houbb.segment.support.segment.impl.SegmentResult: com.github.houbb.segment.support.segment.impl.SegmentResult startIndex(int)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<com.github.houbb.segment.support.segment.impl.SegmentResult: com.github.houbb.segment.support.segment.impl.SegmentResult endIndex(int)>(i1) in <com.github.houbb.segment.support.segment.strategy.impl.AbstractSegmentStrategy: java.util.List buildSegmentResultList(java.lang.String,int,java.util.List)> ==> <com.github.houbb.segment.support.segment.impl.SegmentResult: com.github.houbb.segment.support.segment.impl.SegmentResult endIndex(int)>
VIRTUAL edge: r10 = virtualinvoke $r9.<com.github.houbb.segment.support.segment.impl.SegmentResult: com.github.houbb.segment.support.segment.impl.SegmentResult word(java.lang.String)>(r6) in <com.github.houbb.segment.support.segment.strategy.impl.AbstractSegmentStrategy: java.util.List buildSegmentResultList(java.lang.String,int,java.util.List)> ==> <com.github.houbb.segment.support.segment.impl.SegmentResult: com.github.houbb.segment.support.segment.impl.SegmentResult word(java.lang.String)>
INTERFACE edge: interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r10) in <com.github.houbb.segment.support.segment.strategy.impl.AbstractSegmentStrategy: java.util.List buildSegmentResultList(java.lang.String,int,java.util.List)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: i0 = virtualinvoke r0.<java.lang.StringBuilder: int length()>() in <com.github.houbb.segment.support.segment.strategy.impl.SimpleSegmentStrategy: void processOtherChars(java.lang.StringBuilder,java.util.List)> ==> <java.lang.StringBuilder: int length()>
VIRTUAL edge: $r8 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.String toString()>() in <com.github.houbb.segment.support.segment.strategy.impl.SimpleSegmentStrategy: void processOtherChars(java.lang.StringBuilder,java.util.List)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $i1 = virtualinvoke r0.<java.lang.StringBuilder: int length()>() in <com.github.houbb.segment.support.segment.strategy.impl.SimpleSegmentStrategy: void processOtherChars(java.lang.StringBuilder,java.util.List)> ==> <java.lang.StringBuilder: int length()>
VIRTUAL edge: c3 = virtualinvoke r0.<java.lang.StringBuilder: char charAt(int)>(i5) in <com.github.houbb.segment.support.segment.strategy.impl.SimpleSegmentStrategy: void processOtherChars(java.lang.StringBuilder,java.util.List)> ==> <java.lang.StringBuilder: char charAt(int)>
VIRTUAL edge: virtualinvoke r0.<java.lang.StringBuilder: void setLength(int)>(0) in <com.github.houbb.segment.support.segment.strategy.impl.SimpleSegmentStrategy: void processOtherChars(java.lang.StringBuilder,java.util.List)> ==> <java.lang.StringBuilder: void setLength(int)>
INTERFACE edge: interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r8) in <com.github.houbb.segment.support.segment.strategy.impl.SimpleSegmentStrategy: void processOtherChars(java.lang.StringBuilder,java.util.List)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r7) in <com.github.houbb.segment.support.segment.strategy.impl.SimpleSegmentStrategy: void processOtherChars(java.lang.StringBuilder,java.util.List)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r6) in <com.github.houbb.segment.support.segment.strategy.impl.SimpleSegmentStrategy: void processOtherChars(java.lang.StringBuilder,java.util.List)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r4) in <com.github.houbb.segment.support.segment.strategy.impl.SimpleSegmentStrategy: void processOtherChars(java.lang.StringBuilder,java.util.List)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() in <com.github.houbb.segment.support.segment.strategy.impl.SimpleSegmentStrategy: void processOtherChars(java.lang.StringBuilder,java.util.List)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c3) in <com.github.houbb.segment.support.segment.strategy.impl.SimpleSegmentStrategy: void processOtherChars(java.lang.StringBuilder,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $i4 = virtualinvoke $r1.<java.lang.StringBuilder: int length()>() in <com.github.houbb.segment.support.segment.strategy.impl.SimpleSegmentStrategy: void processOtherChars(java.lang.StringBuilder,java.util.List)> ==> <java.lang.StringBuilder: int length()>
VIRTUAL edge: $r7 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>() in <com.github.houbb.segment.support.segment.strategy.impl.SimpleSegmentStrategy: void processOtherChars(java.lang.StringBuilder,java.util.List)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: void setLength(int)>(0) in <com.github.houbb.segment.support.segment.strategy.impl.SimpleSegmentStrategy: void processOtherChars(java.lang.StringBuilder,java.util.List)> ==> <java.lang.StringBuilder: void setLength(int)>
VIRTUAL edge: $i2 = virtualinvoke $r1.<java.lang.StringBuilder: int length()>() in <com.github.houbb.segment.support.segment.strategy.impl.SimpleSegmentStrategy: void processOtherChars(java.lang.StringBuilder,java.util.List)> ==> <java.lang.StringBuilder: int length()>
VIRTUAL edge: $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>() in <com.github.houbb.segment.support.segment.strategy.impl.SimpleSegmentStrategy: void processOtherChars(java.lang.StringBuilder,java.util.List)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: void setLength(int)>(0) in <com.github.houbb.segment.support.segment.strategy.impl.SimpleSegmentStrategy: void processOtherChars(java.lang.StringBuilder,java.util.List)> ==> <java.lang.StringBuilder: void setLength(int)>
VIRTUAL edge: i0 = virtualinvoke r0.<java.lang.StringBuilder: int length()>() in <com.github.houbb.segment.support.segment.strategy.impl.SimpleSegmentStrategy: void processChineseChars(java.lang.StringBuilder,java.util.List,com.github.houbb.segment.api.ISegmentContext)> ==> <java.lang.StringBuilder: int length()>
VIRTUAL edge: r1 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.String toString()>() in <com.github.houbb.segment.support.segment.strategy.impl.SimpleSegmentStrategy: void processChineseChars(java.lang.StringBuilder,java.util.List,com.github.houbb.segment.api.ISegmentContext)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke r0.<java.lang.StringBuilder: void setLength(int)>(0) in <com.github.houbb.segment.support.segment.strategy.impl.SimpleSegmentStrategy: void processChineseChars(java.lang.StringBuilder,java.util.List,com.github.houbb.segment.api.ISegmentContext)> ==> <java.lang.StringBuilder: void setLength(int)>
VIRTUAL edge: r4 = virtualinvoke r2.<com.github.houbb.segment.support.segment.strategy.impl.SimpleSegmentStrategy: java.util.List getChineseSegments(java.lang.String,com.github.houbb.segment.api.ISegmentContext)>(r1, r3) in <com.github.houbb.segment.support.segment.strategy.impl.SimpleSegmentStrategy: void processChineseChars(java.lang.StringBuilder,java.util.List,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.strategy.impl.SimpleSegmentStrategy: java.util.List getChineseSegments(java.lang.String,com.github.houbb.segment.api.ISegmentContext)>
VIRTUAL edge: r4 = virtualinvoke r2.<com.github.houbb.segment.support.segment.strategy.impl.SimpleSegmentStrategy: java.util.List getChineseSegments(java.lang.String,com.github.houbb.segment.api.ISegmentContext)>(r1, r3) in <com.github.houbb.segment.support.segment.strategy.impl.SimpleSegmentStrategy: void processChineseChars(java.lang.StringBuilder,java.util.List,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.strategy.impl.hmm.HmmSegmentStrategy: java.util.List getChineseSegments(java.lang.String,com.github.houbb.segment.api.ISegmentContext)>
INTERFACE edge: interfaceinvoke r5.<java.util.List: boolean addAll(java.util.Collection)>(r4) in <com.github.houbb.segment.support.segment.strategy.impl.SimpleSegmentStrategy: void processChineseChars(java.lang.StringBuilder,java.util.List,com.github.houbb.segment.api.ISegmentContext)> ==> <java.util.ArrayList: boolean addAll(java.util.Collection)>
STATIC edge: $r1 = staticinvoke <com.github.houbb.heaven.util.lang.StringUtil: java.util.List toCharStringList(java.lang.String)>(r0) in <com.github.houbb.segment.support.segment.strategy.impl.SimpleSegmentStrategy: java.util.List getChineseSegments(java.lang.String,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.heaven.util.lang.StringUtil: java.util.List toCharStringList(java.lang.String)>
CLINIT edge: $r4 = staticinvoke <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: java.util.List segment(java.lang.String,java.lang.String)>(r1, r3) in <com.github.houbb.segment.support.segment.strategy.impl.hmm.HmmSegmentStrategy: java.util.List getChineseSegments(java.lang.String,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: void <clinit>()>
STATIC edge: $r4 = staticinvoke <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: java.util.List segment(java.lang.String,java.lang.String)>(r1, r3) in <com.github.houbb.segment.support.segment.strategy.impl.hmm.HmmSegmentStrategy: java.util.List getChineseSegments(java.lang.String,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.strategy.impl.hmm.Viterbi: java.util.List segment(java.lang.String,java.lang.String)>
VIRTUAL edge: c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i0) in <com.github.houbb.segment.support.segment.strategy.impl.TireTreeSegmentStrategy: java.util.Map getCurrentMap(java.util.Map,java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)> ==> <java.lang.String: char charAt(int)>
INTERFACE edge: $r2 = interfaceinvoke r1.<com.github.houbb.segment.api.ISegmentContext: com.github.houbb.segment.support.format.ISegmentFormat format()>() in <com.github.houbb.segment.support.segment.strategy.impl.TireTreeSegmentStrategy: java.util.Map getCurrentMap(java.util.Map,java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.impl.SegmentContext: com.github.houbb.segment.support.format.ISegmentFormat format()>
INTERFACE edge: c2 = interfaceinvoke $r2.<com.github.houbb.segment.support.format.ISegmentFormat: char format(char,com.github.houbb.segment.api.ISegmentContext)>(c1, r1) in <com.github.houbb.segment.support.segment.strategy.impl.TireTreeSegmentStrategy: java.util.Map getCurrentMap(java.util.Map,java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.format.impl.ChineseTsSegmentFormat: char format(char,com.github.houbb.segment.api.ISegmentContext)>
INTERFACE edge: c2 = interfaceinvoke $r2.<com.github.houbb.segment.support.format.ISegmentFormat: char format(char,com.github.houbb.segment.api.ISegmentContext)>(c1, r1) in <com.github.houbb.segment.support.segment.strategy.impl.TireTreeSegmentStrategy: java.util.Map getCurrentMap(java.util.Map,java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.format.impl.LowerCaseSegmentFormat: char format(char,com.github.houbb.segment.api.ISegmentContext)>
INTERFACE edge: c2 = interfaceinvoke $r2.<com.github.houbb.segment.support.format.ISegmentFormat: char format(char,com.github.houbb.segment.api.ISegmentContext)>(c1, r1) in <com.github.houbb.segment.support.segment.strategy.impl.TireTreeSegmentStrategy: java.util.Map getCurrentMap(java.util.Map,java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.format.impl.NoneSegmentFormat: char format(char,com.github.houbb.segment.api.ISegmentContext)>
INTERFACE edge: c2 = interfaceinvoke $r2.<com.github.houbb.segment.support.format.ISegmentFormat: char format(char,com.github.houbb.segment.api.ISegmentContext)>(c1, r1) in <com.github.houbb.segment.support.segment.strategy.impl.TireTreeSegmentStrategy: java.util.Map getCurrentMap(java.util.Map,java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.format.impl.HalfWidthSegmentFormat: char format(char,com.github.houbb.segment.api.ISegmentContext)>
INTERFACE edge: c2 = interfaceinvoke $r2.<com.github.houbb.segment.support.format.ISegmentFormat: char format(char,com.github.houbb.segment.api.ISegmentContext)>(c1, r1) in <com.github.houbb.segment.support.segment.strategy.impl.TireTreeSegmentStrategy: java.util.Map getCurrentMap(java.util.Map,java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.format.impl.AbstractSegmentFormatInit: char format(char,com.github.houbb.segment.api.ISegmentContext)>
INTERFACE edge: $r5 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4) in <com.github.houbb.segment.support.segment.strategy.impl.TireTreeSegmentStrategy: java.util.Map getCurrentMap(java.util.Map,java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r5 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4) in <com.github.houbb.segment.support.segment.strategy.impl.TireTreeSegmentStrategy: java.util.Map getCurrentMap(java.util.Map,java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: r2 = interfaceinvoke r1.<com.github.houbb.segment.support.data.ISegmentData: java.util.Set getWordSet()>() in <com.github.houbb.segment.support.trie.impl.SegmentTrieTree: void initInnerWordMap(com.github.houbb.segment.support.data.ISegmentData)> ==> <com.github.houbb.segment.support.data.impl.AbstractSegmentData: java.util.Set getWordSet()>
VIRTUAL edge: r6 = virtualinvoke r5.<java.lang.String: char[] toCharArray()>() in <com.github.houbb.segment.support.trie.impl.SegmentTrieTree: void initInnerWordMap(com.github.houbb.segment.support.data.ISegmentData)> ==> <java.lang.String: char[] toCharArray()>
INTERFACE edge: r8 = interfaceinvoke $r20.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7) in <com.github.houbb.segment.support.trie.impl.SegmentTrieTree: void initInnerWordMap(com.github.houbb.segment.support.data.ISegmentData)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: r8 = interfaceinvoke $r20.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7) in <com.github.houbb.segment.support.trie.impl.SegmentTrieTree: void initInnerWordMap(com.github.houbb.segment.support.data.ISegmentData)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
SPECIAL edge: specialinvoke $r19.<java.util.HashMap: void <init>(int)>(8) in <com.github.houbb.segment.support.trie.impl.SegmentTrieTree: void initInnerWordMap(com.github.houbb.segment.support.data.ISegmentData)> ==> <java.util.HashMap: void <init>(int)>
INTERFACE edge: interfaceinvoke $r19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ED", $r11) in <com.github.houbb.segment.support.trie.impl.SegmentTrieTree: void initInnerWordMap(com.github.houbb.segment.support.data.ISegmentData)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r21.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, $r19) in <com.github.houbb.segment.support.trie.impl.SegmentTrieTree: void initInnerWordMap(com.github.houbb.segment.support.data.ISegmentData)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r21.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, $r19) in <com.github.houbb.segment.support.trie.impl.SegmentTrieTree: void initInnerWordMap(com.github.houbb.segment.support.data.ISegmentData)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r22.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ED", $r15) in <com.github.houbb.segment.support.trie.impl.SegmentTrieTree: void initInnerWordMap(com.github.houbb.segment.support.data.ISegmentData)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r22.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ED", $r15) in <com.github.houbb.segment.support.trie.impl.SegmentTrieTree: void initInnerWordMap(com.github.houbb.segment.support.data.ISegmentData)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: r1 = virtualinvoke r0.<com.github.houbb.segment.support.tagging.pos.data.impl.AbstractSegmentPosData: java.util.Map getStaticVolatilePosMap()>() in <com.github.houbb.segment.support.tagging.pos.data.impl.AbstractSegmentPosData: java.util.Map getPosMap()> ==> <com.github.houbb.segment.support.tagging.pos.data.impl.SegmentPosDataSystem: java.util.Map getStaticVolatilePosMap()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.github.houbb.segment.support.tagging.pos.data.impl.AbstractSegmentPosData: java.util.Map getStaticVolatilePosMap()>() in <com.github.houbb.segment.support.tagging.pos.data.impl.AbstractSegmentPosData: java.util.Map getPosMap()> ==> <com.github.houbb.segment.support.tagging.pos.data.impl.SegmentPosDataMixed: java.util.Map getStaticVolatilePosMap()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.github.houbb.segment.support.tagging.pos.data.impl.AbstractSegmentPosData: java.util.Map getStaticVolatilePosMap()>() in <com.github.houbb.segment.support.tagging.pos.data.impl.AbstractSegmentPosData: java.util.Map getPosMap()> ==> <com.github.houbb.segment.support.tagging.pos.data.impl.SegmentPosDataDefine: java.util.Map getStaticVolatilePosMap()>
VIRTUAL edge: r8 = virtualinvoke r0.<com.github.houbb.segment.support.tagging.pos.data.impl.AbstractSegmentPosData: java.util.List readDictLines()>() in <com.github.houbb.segment.support.tagging.pos.data.impl.AbstractSegmentPosData: java.util.Map getPosMap()> ==> <com.github.houbb.segment.support.tagging.pos.data.impl.SegmentPosDataDefine: java.util.List readDictLines()>
VIRTUAL edge: r8 = virtualinvoke r0.<com.github.houbb.segment.support.tagging.pos.data.impl.AbstractSegmentPosData: java.util.List readDictLines()>() in <com.github.houbb.segment.support.tagging.pos.data.impl.AbstractSegmentPosData: java.util.Map getPosMap()> ==> <com.github.houbb.segment.support.tagging.pos.data.impl.SegmentPosDataSystem: java.util.List readDictLines()>
VIRTUAL edge: r8 = virtualinvoke r0.<com.github.houbb.segment.support.tagging.pos.data.impl.AbstractSegmentPosData: java.util.List readDictLines()>() in <com.github.houbb.segment.support.tagging.pos.data.impl.AbstractSegmentPosData: java.util.Map getPosMap()> ==> <com.github.houbb.segment.support.tagging.pos.data.impl.SegmentPosDataMixed: java.util.List readDictLines()>
INTERFACE edge: r9 = interfaceinvoke r8.<java.util.List: java.util.Iterator iterator()>() in <com.github.houbb.segment.support.tagging.pos.data.impl.AbstractSegmentPosData: java.util.Map getPosMap()> ==> <java.util.ArrayList: java.util.Iterator iterator()>
VIRTUAL edge: r12 = virtualinvoke r11.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ") in <com.github.houbb.segment.support.tagging.pos.data.impl.AbstractSegmentPosData: java.util.Map getPosMap()> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
INTERFACE edge: $i2 = interfaceinvoke r15.<java.util.List: int size()>() in <com.github.houbb.segment.support.tagging.pos.data.impl.AbstractSegmentPosData: java.util.Map getPosMap()> ==> <java.util.ArrayList: int size()>
INTERFACE edge: r17 = interfaceinvoke r15.<java.util.List: java.util.Iterator iterator()>() in <com.github.houbb.segment.support.tagging.pos.data.impl.AbstractSegmentPosData: java.util.Map getPosMap()> ==> <java.util.ArrayList: java.util.Iterator iterator()>
VIRTUAL edge: r21 = virtualinvoke r20.<java.lang.String: java.lang.String[] split(java.lang.String)>(":") in <com.github.houbb.segment.support.tagging.pos.data.impl.AbstractSegmentPosData: java.util.Map getPosMap()> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
INTERFACE edge: interfaceinvoke r16.<java.util.List: boolean add(java.lang.Object)>($r24) in <com.github.houbb.segment.support.tagging.pos.data.impl.AbstractSegmentPosData: java.util.Map getPosMap()> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r13, r16) in <com.github.houbb.segment.support.tagging.pos.data.impl.AbstractSegmentPosData: java.util.Map getPosMap()> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r13, r16) in <com.github.houbb.segment.support.tagging.pos.data.impl.AbstractSegmentPosData: java.util.Map getPosMap()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() in <com.github.houbb.segment.support.tagging.pos.data.impl.AbstractSegmentPosData: java.util.Map getPosMap()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[Segment Pos] segment pos dict init finish, cost ") in <com.github.houbb.segment.support.tagging.pos.data.impl.AbstractSegmentPosData: java.util.Map getPosMap()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1) in <com.github.houbb.segment.support.tagging.pos.data.impl.AbstractSegmentPosData: java.util.Map getPosMap()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(long)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ms!") in <com.github.houbb.segment.support.tagging.pos.data.impl.AbstractSegmentPosData: java.util.Map getPosMap()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>() in <com.github.houbb.segment.support.tagging.pos.data.impl.AbstractSegmentPosData: java.util.Map getPosMap()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r7) in <com.github.houbb.segment.support.tagging.pos.data.impl.AbstractSegmentPosData: java.util.Map getPosMap()> ==> <java.io.PrintStream: void println(java.lang.String)>
CLINIT edge: $r0 = <com.github.houbb.segment.support.tagging.pos.data.impl.SegmentPosDataSystem: java.util.Map POS_MAP> in <com.github.houbb.segment.support.tagging.pos.data.impl.SegmentPosDataSystem: java.util.Map getStaticVolatilePosMap()> ==> <com.github.houbb.segment.support.tagging.pos.data.impl.SegmentPosDataSystem: void <clinit>()>
CLINIT edge: $r0 = <com.github.houbb.segment.support.tagging.pos.data.impl.SegmentPosDataMixed: java.util.Map POS_MAP> in <com.github.houbb.segment.support.tagging.pos.data.impl.SegmentPosDataMixed: java.util.Map getStaticVolatilePosMap()> ==> <com.github.houbb.segment.support.tagging.pos.data.impl.SegmentPosDataMixed: void <clinit>()>
CLINIT edge: $r0 = <com.github.houbb.segment.support.tagging.pos.data.impl.SegmentPosDataDefine: java.util.Map POS_MAP> in <com.github.houbb.segment.support.tagging.pos.data.impl.SegmentPosDataDefine: java.util.Map getStaticVolatilePosMap()> ==> <com.github.houbb.segment.support.tagging.pos.data.impl.SegmentPosDataDefine: void <clinit>()>
STATIC edge: $r0 = staticinvoke <com.github.houbb.heaven.util.io.StreamUtil: java.util.List readAllLines(java.lang.String)>("/segment_pos_tagging_define.txt") in <com.github.houbb.segment.support.tagging.pos.data.impl.SegmentPosDataDefine: java.util.List readDictLines()> ==> <com.github.houbb.heaven.util.io.StreamUtil: java.util.List readAllLines(java.lang.String)>
STATIC edge: $r0 = staticinvoke <com.github.houbb.heaven.util.io.StreamUtil: java.util.List readAllLines(java.lang.String)>("/segment_pos_tagging_system.txt") in <com.github.houbb.segment.support.tagging.pos.data.impl.SegmentPosDataSystem: java.util.List readDictLines()> ==> <com.github.houbb.heaven.util.io.StreamUtil: java.util.List readAllLines(java.lang.String)>
STATIC edge: r0 = staticinvoke <com.github.houbb.heaven.util.io.StreamUtil: java.util.List readAllLines(java.lang.String)>("/segment_pos_tagging_system.txt") in <com.github.houbb.segment.support.tagging.pos.data.impl.SegmentPosDataMixed: java.util.List readDictLines()> ==> <com.github.houbb.heaven.util.io.StreamUtil: java.util.List readAllLines(java.lang.String)>
STATIC edge: $r1 = staticinvoke <com.github.houbb.heaven.util.io.StreamUtil: java.util.List readAllLines(java.lang.String)>("/segment_pos_tagging_define.txt") in <com.github.houbb.segment.support.tagging.pos.data.impl.SegmentPosDataMixed: java.util.List readDictLines()> ==> <com.github.houbb.heaven.util.io.StreamUtil: java.util.List readAllLines(java.lang.String)>
CLINIT edge: <com.github.houbb.segment.support.tagging.pos.data.impl.SegmentPosDataSystem: java.util.Map POS_MAP> = $r0 in <com.github.houbb.segment.support.tagging.pos.data.impl.SegmentPosDataSystem: void <clinit>()> ==> <com.github.houbb.segment.support.tagging.pos.data.impl.SegmentPosDataSystem: void <clinit>()>
STATIC edge: $r0 = staticinvoke <com.github.houbb.heaven.util.guava.Guavas: java.util.Map newHashMap()>() in <com.github.houbb.segment.support.tagging.pos.data.impl.SegmentPosDataSystem: void <clinit>()> ==> <com.github.houbb.heaven.util.guava.Guavas: java.util.Map newHashMap()>
CLINIT edge: <com.github.houbb.segment.support.tagging.pos.data.impl.SegmentPosDataMixed: java.util.Map POS_MAP> = $r0 in <com.github.houbb.segment.support.tagging.pos.data.impl.SegmentPosDataMixed: void <clinit>()> ==> <com.github.houbb.segment.support.tagging.pos.data.impl.SegmentPosDataMixed: void <clinit>()>
STATIC edge: $r0 = staticinvoke <com.github.houbb.heaven.util.guava.Guavas: java.util.Map newHashMap()>() in <com.github.houbb.segment.support.tagging.pos.data.impl.SegmentPosDataMixed: void <clinit>()> ==> <com.github.houbb.heaven.util.guava.Guavas: java.util.Map newHashMap()>
CLINIT edge: <com.github.houbb.segment.support.tagging.pos.data.impl.SegmentPosDataDefine: java.util.Map POS_MAP> = $r0 in <com.github.houbb.segment.support.tagging.pos.data.impl.SegmentPosDataDefine: void <clinit>()> ==> <com.github.houbb.segment.support.tagging.pos.data.impl.SegmentPosDataDefine: void <clinit>()>
STATIC edge: $r0 = staticinvoke <com.github.houbb.heaven.util.guava.Guavas: java.util.Map newHashMap()>() in <com.github.houbb.segment.support.tagging.pos.data.impl.SegmentPosDataDefine: void <clinit>()> ==> <com.github.houbb.heaven.util.guava.Guavas: java.util.Map newHashMap()>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0) in <com.github.houbb.segment.constant.enums.HmmStateEnum: void <init>(java.lang.String,int,int,char)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
FINALIZE edge: null in <java.lang.Enum: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void finalize()>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0) in <com.github.houbb.segment.constant.enums.SegmentPosEnum: void <init>(java.lang.String,int,java.lang.String,java.lang.String)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
SPECIAL edge: r1 = specialinvoke r0.<com.github.houbb.segment.support.data.impl.AbstractSegmentData: java.util.List getWordEntryList()>() in <com.github.houbb.segment.support.data.impl.AbstractSegmentData: void initNormalizationResult()> ==> <com.github.houbb.segment.support.data.impl.AbstractSegmentData: java.util.List getWordEntryList()>
INTERFACE edge: $r4 = interfaceinvoke r3.<com.github.houbb.segment.support.normalization.INormalization: com.github.houbb.segment.support.normalization.NormalizationResult normalization(java.util.List)>(r1) in <com.github.houbb.segment.support.data.impl.AbstractSegmentData: void initNormalizationResult()> ==> <com.github.houbb.segment.support.normalization.impl.LogNormalization: com.github.houbb.segment.support.normalization.NormalizationResult normalization(java.util.List)>
INTERFACE edge: interfaceinvoke r1.<java.util.List: void clear()>() in <com.github.houbb.segment.support.data.impl.AbstractSegmentData: void initNormalizationResult()> ==> <java.util.ArrayList: void clear()>
SPECIAL edge: specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() in <com.github.houbb.segment.support.data.impl.AbstractSegmentData: void initNormalizationResult()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Normalization init finished, cost time : ") in <com.github.houbb.segment.support.data.impl.AbstractSegmentData: void initNormalizationResult()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l2) in <com.github.houbb.segment.support.data.impl.AbstractSegmentData: void initNormalizationResult()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(long)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ms!") in <com.github.houbb.segment.support.data.impl.AbstractSegmentData: void initNormalizationResult()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <com.github.houbb.segment.support.data.impl.AbstractSegmentData: void initNormalizationResult()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r10) in <com.github.houbb.segment.support.data.impl.AbstractSegmentData: void initNormalizationResult()> ==> <java.io.PrintStream: void println(java.lang.String)>
STATIC edge: $z0 = staticinvoke <com.github.houbb.heaven.util.util.CollectionUtil: boolean isNotEmpty(java.util.Collection)>(r1) in <com.github.houbb.segment.support.data.impl.AbstractSegmentData: java.util.List getWordEntryList()> ==> <com.github.houbb.heaven.util.util.CollectionUtil: boolean isNotEmpty(java.util.Collection)>
STATIC edge: $z1 = staticinvoke <com.github.houbb.heaven.util.util.CollectionUtil: boolean isEmpty(java.util.Collection)>(r1) in <com.github.houbb.segment.support.data.impl.AbstractSegmentData: java.util.List getWordEntryList()> ==> <com.github.houbb.heaven.util.util.CollectionUtil: boolean isEmpty(java.util.Collection)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.github.houbb.segment.support.segment.mode.impl.GreedyLengthSegmentMode$1: void <init>(com.github.houbb.segment.support.segment.mode.impl.GreedyLengthSegmentMode)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.github.houbb.segment.support.segment.mode.impl.GreedyFrequencySegmentMode$1: void <init>(com.github.houbb.segment.support.segment.mode.impl.GreedyFrequencySegmentMode,com.github.houbb.segment.support.data.ISegmentData)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: i0 = virtualinvoke r0.<java.lang.String: int length()>() in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.Map getSegmentMap(java.lang.String,com.github.houbb.segment.api.ISegmentContext)> ==> <java.lang.String: int length()>
INTERFACE edge: r4 = interfaceinvoke r2.<com.github.houbb.segment.support.segment.strategy.ISegmentStrategy: java.util.List segment(java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)>(r0, i1, r3) in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.Map getSegmentMap(java.lang.String,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.strategy.impl.SimpleSegmentStrategy: java.util.List segment(java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)>
INTERFACE edge: r4 = interfaceinvoke r2.<com.github.houbb.segment.support.segment.strategy.ISegmentStrategy: java.util.List segment(java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)>(r0, i1, r3) in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.Map getSegmentMap(java.lang.String,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.strategy.impl.AbstractSegmentStrategy: java.util.List segment(java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)>
INTERFACE edge: interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, r4) in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.Map getSegmentMap(java.lang.String,com.github.houbb.segment.api.ISegmentContext)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, r4) in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.Map getSegmentMap(java.lang.String,com.github.houbb.segment.api.ISegmentContext)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: r1 = interfaceinvoke r0.<com.github.houbb.segment.api.ISegmentContext: com.github.houbb.segment.support.data.ISegmentData data()>() in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.Map calcRouteMap(java.util.Map,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.impl.SegmentContext: com.github.houbb.segment.support.data.ISegmentData data()>
INTERFACE edge: d0 = interfaceinvoke r1.<com.github.houbb.segment.support.data.ISegmentData: double getMinFreq()>() in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.Map calcRouteMap(java.util.Map,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.data.impl.AbstractSegmentData: double getMinFreq()>
INTERFACE edge: $r22 = interfaceinvoke r1.<com.github.houbb.segment.support.data.ISegmentData: java.lang.Double getFreq(java.lang.String)>($r21) in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.Map calcRouteMap(java.util.Map,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.data.impl.AbstractSegmentData: java.lang.Double getFreq(java.lang.String)>
INTERFACE edge: interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r6) in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.Map calcRouteMap(java.util.Map,com.github.houbb.segment.api.ISegmentContext)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r6) in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.Map calcRouteMap(java.util.Map,com.github.houbb.segment.api.ISegmentContext)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: $r23 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r12) in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.Map calcRouteMap(java.util.Map,com.github.houbb.segment.api.ISegmentContext)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r23 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r12) in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.Map calcRouteMap(java.util.Map,com.github.houbb.segment.api.ISegmentContext)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r12, r30) in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.Map calcRouteMap(java.util.Map,com.github.houbb.segment.api.ISegmentContext)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r12, r30) in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.Map calcRouteMap(java.util.Map,com.github.houbb.segment.api.ISegmentContext)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: $r9 = interfaceinvoke r8.<java.util.Map: java.util.Set keySet()>() in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.Map calcRouteMap(java.util.Map,com.github.houbb.segment.api.ISegmentContext)> ==> <java.util.HashMap: java.util.Set keySet()>
INTERFACE edge: $r9 = interfaceinvoke r8.<java.util.Map: java.util.Set keySet()>() in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.Map calcRouteMap(java.util.Map,com.github.houbb.segment.api.ISegmentContext)> ==> <java.util.Hashtable: java.util.Set keySet()>
INTERFACE edge: $r13 = interfaceinvoke r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r12) in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.Map calcRouteMap(java.util.Map,com.github.houbb.segment.api.ISegmentContext)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r13 = interfaceinvoke r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r12) in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.Map calcRouteMap(java.util.Map,com.github.houbb.segment.api.ISegmentContext)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: r15 = interfaceinvoke r14.<java.util.List: java.util.Iterator iterator()>() in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.Map calcRouteMap(java.util.Map,com.github.houbb.segment.api.ISegmentContext)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: i0 = interfaceinvoke r18.<com.github.houbb.segment.api.ISegmentResult: int endIndex()>() in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.Map calcRouteMap(java.util.Map,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.impl.SegmentResult: int endIndex()>
INTERFACE edge: $r21 = interfaceinvoke r18.<com.github.houbb.segment.api.ISegmentResult: java.lang.String word()>() in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.Map calcRouteMap(java.util.Map,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.impl.SegmentResult: java.lang.String word()>
VIRTUAL edge: $i1 = virtualinvoke r12.<java.lang.Integer: int intValue()>() in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.Map calcRouteMap(java.util.Map,com.github.houbb.segment.api.ISegmentContext)> ==> <java.lang.Integer: int intValue()>
SPECIAL edge: $r20 = specialinvoke r19.<com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.lang.Double getRouteFreq(java.util.Map,int,double)>(r2, $i2, d0) in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.Map calcRouteMap(java.util.Map,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.lang.Double getRouteFreq(java.util.Map,int,double)>
VIRTUAL edge: d1 = virtualinvoke $r20.<java.lang.Double: double doubleValue()>() in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.Map calcRouteMap(java.util.Map,com.github.houbb.segment.api.ISegmentContext)> ==> <java.lang.Double: double doubleValue()>
VIRTUAL edge: $d2 = virtualinvoke $r22.<java.lang.Double: double doubleValue()>() in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.Map calcRouteMap(java.util.Map,com.github.houbb.segment.api.ISegmentContext)> ==> <java.lang.Double: double doubleValue()>
VIRTUAL edge: $d4 = virtualinvoke $r25.<java.lang.Double: double doubleValue()>() in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.Map calcRouteMap(java.util.Map,com.github.houbb.segment.api.ISegmentContext)> ==> <java.lang.Double: double doubleValue()>
CLINIT edge: $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.lang.Double getRouteFreq(java.util.Map,int,double)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0) in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.lang.Double getRouteFreq(java.util.Map,int,double)> ==> <java.lang.Double: java.lang.Double valueOf(double)>
STATIC edge: $z0 = staticinvoke <com.github.houbb.heaven.util.lang.ObjectUtil: boolean isNotNull(java.lang.Object)>(r3) in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.lang.Double getRouteFreq(java.util.Map,int,double)> ==> <com.github.houbb.heaven.util.lang.ObjectUtil: boolean isNotNull(java.lang.Object)>
STATIC edge: $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.lang.Double getRouteFreq(java.util.Map,int,double)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
CLINIT edge: $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0) in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.lang.Double getRouteFreq(java.util.Map,int,double)> ==> <java.lang.Double: void <clinit>()>
INTERFACE edge: r1 = interfaceinvoke r0.<com.github.houbb.segment.api.ISegmentContext: com.github.houbb.segment.support.data.ISegmentData data()>() in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: boolean dictContainsWord(java.lang.String,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.impl.SegmentContext: com.github.houbb.segment.support.data.ISegmentData data()>
INTERFACE edge: $z0 = interfaceinvoke r1.<com.github.houbb.segment.support.data.ISegmentData: boolean contains(java.lang.String)>(r2) in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: boolean dictContainsWord(java.lang.String,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.data.impl.AbstractSegmentData: boolean contains(java.lang.String)>
INTERFACE edge: $r3 = interfaceinvoke r0.<com.github.houbb.segment.support.segment.strategy.ISegmentStrategy: java.util.List segment(java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)>(r1, i0, r2) in <com.github.houbb.segment.support.segment.mode.impl.precise.SearchSegmentMode: java.util.List buildChineseSegments(java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.strategy.impl.SimpleSegmentStrategy: java.util.List segment(java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)>
INTERFACE edge: $r3 = interfaceinvoke r0.<com.github.houbb.segment.support.segment.strategy.ISegmentStrategy: java.util.List segment(java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)>(r1, i0, r2) in <com.github.houbb.segment.support.segment.mode.impl.precise.SearchSegmentMode: java.util.List buildChineseSegments(java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.strategy.impl.AbstractSegmentStrategy: java.util.List segment(java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)>
INTERFACE edge: $r3 = interfaceinvoke r0.<com.github.houbb.segment.support.segment.strategy.ISegmentStrategy: java.util.List segment(java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)>(r1, i0, r2) in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.List buildChineseSegments(java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.strategy.impl.SimpleSegmentStrategy: java.util.List segment(java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)>
INTERFACE edge: $r3 = interfaceinvoke r0.<com.github.houbb.segment.support.segment.strategy.ISegmentStrategy: java.util.List segment(java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)>(r1, i0, r2) in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.util.List buildChineseSegments(java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.strategy.impl.AbstractSegmentStrategy: java.util.List segment(java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)>
INTERFACE edge: $r3 = interfaceinvoke r0.<com.github.houbb.segment.support.segment.strategy.ISegmentStrategy: java.util.List segment(java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)>(r1, i0, r2) in <com.github.houbb.segment.support.segment.mode.impl.precise.HmmSegmentMode: java.util.List buildChineseSegments(java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.strategy.impl.SimpleSegmentStrategy: java.util.List segment(java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)>
INTERFACE edge: $r3 = interfaceinvoke r0.<com.github.houbb.segment.support.segment.strategy.ISegmentStrategy: java.util.List segment(java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)>(r1, i0, r2) in <com.github.houbb.segment.support.segment.mode.impl.precise.HmmSegmentMode: java.util.List buildChineseSegments(java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.strategy.impl.AbstractSegmentStrategy: java.util.List segment(java.lang.String,int,com.github.houbb.segment.api.ISegmentContext)>
SPECIAL edge: r3 = specialinvoke r0.<com.github.houbb.segment.support.segment.strategy.impl.hmm.HmmSegmentStrategy: java.lang.String formatText(java.lang.String,com.github.houbb.segment.api.ISegmentContext)>(r1, r2) in <com.github.houbb.segment.support.segment.strategy.impl.hmm.HmmSegmentStrategy: java.util.List getChineseSegments(java.lang.String,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.strategy.impl.hmm.HmmSegmentStrategy: java.lang.String formatText(java.lang.String,com.github.houbb.segment.api.ISegmentContext)>
STATIC edge: $z0 = staticinvoke <com.github.houbb.heaven.util.lang.StringUtil: boolean isEmpty(java.lang.String)>(r0) in <com.github.houbb.segment.support.segment.strategy.impl.hmm.HmmSegmentStrategy: java.lang.String formatText(java.lang.String,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.heaven.util.lang.StringUtil: boolean isEmpty(java.lang.String)>
INTERFACE edge: interfaceinvoke r0.<java.util.List: boolean addAll(java.util.Collection)>($r1) in <com.github.houbb.segment.support.tagging.pos.data.impl.SegmentPosDataMixed: java.util.List readDictLines()> ==> <java.util.ArrayList: boolean addAll(java.util.Collection)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Enum: void <init>(java.lang.String,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: void <init>(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: void finalize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: r1 = virtualinvoke r0.<com.github.houbb.segment.support.data.impl.AbstractSegmentData: java.util.List getStaticVolatileWordEntryList()>() in <com.github.houbb.segment.support.data.impl.AbstractSegmentData: java.util.List getWordEntryList()> ==> <com.github.houbb.segment.support.data.impl.SegmentSystemData: java.util.List getStaticVolatileWordEntryList()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.github.houbb.segment.support.data.impl.AbstractSegmentData: java.util.List getStaticVolatileWordEntryList()>() in <com.github.houbb.segment.support.data.impl.AbstractSegmentData: java.util.List getWordEntryList()> ==> <com.github.houbb.segment.support.data.impl.SegmentMixedData: java.util.List getStaticVolatileWordEntryList()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.github.houbb.segment.support.data.impl.AbstractSegmentData: java.util.List getStaticVolatileWordEntryList()>() in <com.github.houbb.segment.support.data.impl.AbstractSegmentData: java.util.List getWordEntryList()> ==> <com.github.houbb.segment.support.data.impl.SegmentDefineData: java.util.List getStaticVolatileWordEntryList()>
SPECIAL edge: specialinvoke r0.<com.github.houbb.segment.support.data.impl.AbstractSegmentData: void initWordEntryList(java.util.List)>(r1) in <com.github.houbb.segment.support.data.impl.AbstractSegmentData: java.util.List getWordEntryList()> ==> <com.github.houbb.segment.support.data.impl.AbstractSegmentData: void initWordEntryList(java.util.List)>
CLINIT edge: $r0 = <com.github.houbb.segment.support.data.impl.SegmentSystemData: java.util.List segmentWordEntryList> in <com.github.houbb.segment.support.data.impl.SegmentSystemData: java.util.List getStaticVolatileWordEntryList()> ==> <com.github.houbb.segment.support.data.impl.SegmentSystemData: void <clinit>()>
CLINIT edge: $r0 = <com.github.houbb.segment.support.data.impl.SegmentMixedData: java.util.List segmentWordEntryList> in <com.github.houbb.segment.support.data.impl.SegmentMixedData: java.util.List getStaticVolatileWordEntryList()> ==> <com.github.houbb.segment.support.data.impl.SegmentMixedData: void <clinit>()>
CLINIT edge: $r0 = <com.github.houbb.segment.support.data.impl.SegmentDefineData: java.util.List segmentWordEntryList> in <com.github.houbb.segment.support.data.impl.SegmentDefineData: java.util.List getStaticVolatileWordEntryList()> ==> <com.github.houbb.segment.support.data.impl.SegmentDefineData: void <clinit>()>
CLINIT edge: l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <com.github.houbb.segment.support.data.impl.AbstractSegmentData: void initWordEntryList(java.util.List)> ==> <java.lang.System: void <clinit>()>
STATIC edge: $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <com.github.houbb.segment.support.data.impl.AbstractSegmentData: void initWordEntryList(java.util.List)> ==> <java.lang.System: long currentTimeMillis()>
STATIC edge: $r13 = staticinvoke <com.github.houbb.segment.model.SegmentWordEntry: com.github.houbb.segment.model.SegmentWordEntry newInstance()>() in <com.github.houbb.segment.support.data.impl.AbstractSegmentData: void initWordEntryList(java.util.List)> ==> <com.github.houbb.segment.model.SegmentWordEntry: com.github.houbb.segment.model.SegmentWordEntry newInstance()>
STATIC edge: l4 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r20) in <com.github.houbb.segment.support.data.impl.AbstractSegmentData: void initWordEntryList(java.util.List)> ==> <java.lang.Long: long parseLong(java.lang.String)>
STATIC edge: r10 = staticinvoke <com.github.houbb.heaven.util.lang.StringUtil: java.util.List splitToList(java.lang.String,java.lang.String)>(r9, " ") in <com.github.houbb.segment.support.data.impl.AbstractSegmentData: void initWordEntryList(java.util.List)> ==> <com.github.houbb.heaven.util.lang.StringUtil: java.util.List splitToList(java.lang.String,java.lang.String)>
STATIC edge: $z0 = staticinvoke <com.github.houbb.heaven.util.lang.StringUtil: boolean isEmptyTrim(java.lang.String)>(r9) in <com.github.houbb.segment.support.data.impl.AbstractSegmentData: void initWordEntryList(java.util.List)> ==> <com.github.houbb.heaven.util.lang.StringUtil: boolean isEmptyTrim(java.lang.String)>
STATIC edge: l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <com.github.houbb.segment.support.data.impl.AbstractSegmentData: void initWordEntryList(java.util.List)> ==> <java.lang.System: long currentTimeMillis()>
CLINIT edge: l4 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r20) in <com.github.houbb.segment.support.data.impl.AbstractSegmentData: void initWordEntryList(java.util.List)> ==> <java.lang.Long: void <clinit>()>
CLINIT edge: <com.github.houbb.segment.support.data.impl.SegmentSystemData: java.util.List segmentWordEntryList> = $r0 in <com.github.houbb.segment.support.data.impl.SegmentSystemData: void <clinit>()> ==> <com.github.houbb.segment.support.data.impl.SegmentSystemData: void <clinit>()>
STATIC edge: $r0 = staticinvoke <com.github.houbb.heaven.util.guava.Guavas: java.util.List newArrayList()>() in <com.github.houbb.segment.support.data.impl.SegmentSystemData: void <clinit>()> ==> <com.github.houbb.heaven.util.guava.Guavas: java.util.List newArrayList()>
CLINIT edge: <com.github.houbb.segment.support.data.impl.SegmentMixedData: java.util.List segmentWordEntryList> = $r0 in <com.github.houbb.segment.support.data.impl.SegmentMixedData: void <clinit>()> ==> <com.github.houbb.segment.support.data.impl.SegmentMixedData: void <clinit>()>
STATIC edge: $r0 = staticinvoke <com.github.houbb.heaven.util.guava.Guavas: java.util.List newArrayList()>() in <com.github.houbb.segment.support.data.impl.SegmentMixedData: void <clinit>()> ==> <com.github.houbb.heaven.util.guava.Guavas: java.util.List newArrayList()>
CLINIT edge: <com.github.houbb.segment.support.data.impl.SegmentDefineData: java.util.List segmentWordEntryList> = $r0 in <com.github.houbb.segment.support.data.impl.SegmentDefineData: void <clinit>()> ==> <com.github.houbb.segment.support.data.impl.SegmentDefineData: void <clinit>()>
STATIC edge: $r0 = staticinvoke <com.github.houbb.heaven.util.guava.Guavas: java.util.List newArrayList()>() in <com.github.houbb.segment.support.data.impl.SegmentDefineData: void <clinit>()> ==> <com.github.houbb.heaven.util.guava.Guavas: java.util.List newArrayList()>
INTERFACE edge: $r2 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1) in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.lang.Double getRouteFreq(java.util.Map,int,double)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r2 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1) in <com.github.houbb.segment.support.segment.mode.impl.precise.DictSegmentMode: java.lang.Double getRouteFreq(java.util.Map,int,double)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.String: int length()>() in <com.github.houbb.segment.support.segment.strategy.impl.hmm.HmmSegmentStrategy: java.lang.String formatText(java.lang.String,com.github.houbb.segment.api.ISegmentContext)> ==> <java.lang.String: int length()>
VIRTUAL edge: $i1 = virtualinvoke r0.<java.lang.String: int length()>() in <com.github.houbb.segment.support.segment.strategy.impl.hmm.HmmSegmentStrategy: java.lang.String formatText(java.lang.String,com.github.houbb.segment.api.ISegmentContext)> ==> <java.lang.String: int length()>
VIRTUAL edge: r5 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>() in <com.github.houbb.segment.support.segment.strategy.impl.hmm.HmmSegmentStrategy: java.lang.String formatText(java.lang.String,com.github.houbb.segment.api.ISegmentContext)> ==> <java.lang.String: char[] toCharArray()>
SPECIAL edge: specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>($i1) in <com.github.houbb.segment.support.segment.strategy.impl.hmm.HmmSegmentStrategy: java.lang.String formatText(java.lang.String,com.github.houbb.segment.api.ISegmentContext)> ==> <java.lang.StringBuilder: void <init>(int)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c4) in <com.github.houbb.segment.support.segment.strategy.impl.hmm.HmmSegmentStrategy: java.lang.String formatText(java.lang.String,com.github.houbb.segment.api.ISegmentContext)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>() in <com.github.houbb.segment.support.segment.strategy.impl.hmm.HmmSegmentStrategy: java.lang.String formatText(java.lang.String,com.github.houbb.segment.api.ISegmentContext)> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: r4 = interfaceinvoke r3.<com.github.houbb.segment.api.ISegmentContext: com.github.houbb.segment.support.format.ISegmentFormat format()>() in <com.github.houbb.segment.support.segment.strategy.impl.hmm.HmmSegmentStrategy: java.lang.String formatText(java.lang.String,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.segment.impl.SegmentContext: com.github.houbb.segment.support.format.ISegmentFormat format()>
INTERFACE edge: c4 = interfaceinvoke r4.<com.github.houbb.segment.support.format.ISegmentFormat: char format(char,com.github.houbb.segment.api.ISegmentContext)>(c3, r3) in <com.github.houbb.segment.support.segment.strategy.impl.hmm.HmmSegmentStrategy: java.lang.String formatText(java.lang.String,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.format.impl.ChineseTsSegmentFormat: char format(char,com.github.houbb.segment.api.ISegmentContext)>
INTERFACE edge: c4 = interfaceinvoke r4.<com.github.houbb.segment.support.format.ISegmentFormat: char format(char,com.github.houbb.segment.api.ISegmentContext)>(c3, r3) in <com.github.houbb.segment.support.segment.strategy.impl.hmm.HmmSegmentStrategy: java.lang.String formatText(java.lang.String,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.format.impl.LowerCaseSegmentFormat: char format(char,com.github.houbb.segment.api.ISegmentContext)>
INTERFACE edge: c4 = interfaceinvoke r4.<com.github.houbb.segment.support.format.ISegmentFormat: char format(char,com.github.houbb.segment.api.ISegmentContext)>(c3, r3) in <com.github.houbb.segment.support.segment.strategy.impl.hmm.HmmSegmentStrategy: java.lang.String formatText(java.lang.String,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.format.impl.NoneSegmentFormat: char format(char,com.github.houbb.segment.api.ISegmentContext)>
INTERFACE edge: c4 = interfaceinvoke r4.<com.github.houbb.segment.support.format.ISegmentFormat: char format(char,com.github.houbb.segment.api.ISegmentContext)>(c3, r3) in <com.github.houbb.segment.support.segment.strategy.impl.hmm.HmmSegmentStrategy: java.lang.String formatText(java.lang.String,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.format.impl.HalfWidthSegmentFormat: char format(char,com.github.houbb.segment.api.ISegmentContext)>
INTERFACE edge: c4 = interfaceinvoke r4.<com.github.houbb.segment.support.format.ISegmentFormat: char format(char,com.github.houbb.segment.api.ISegmentContext)>(c3, r3) in <com.github.houbb.segment.support.segment.strategy.impl.hmm.HmmSegmentStrategy: java.lang.String formatText(java.lang.String,com.github.houbb.segment.api.ISegmentContext)> ==> <com.github.houbb.segment.support.format.impl.AbstractSegmentFormatInit: char format(char,com.github.houbb.segment.api.ISegmentContext)>
VIRTUAL edge: r1 = virtualinvoke r0.<com.github.houbb.segment.support.data.impl.AbstractSegmentData: java.util.List readDictLines()>() in <com.github.houbb.segment.support.data.impl.AbstractSegmentData: void initWordEntryList(java.util.List)> ==> <com.github.houbb.segment.support.data.impl.SegmentDefineData: java.util.List readDictLines()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.github.houbb.segment.support.data.impl.AbstractSegmentData: java.util.List readDictLines()>() in <com.github.houbb.segment.support.data.impl.AbstractSegmentData: void initWordEntryList(java.util.List)> ==> <com.github.houbb.segment.support.data.impl.SegmentMixedData: java.util.List readDictLines()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.github.houbb.segment.support.data.impl.AbstractSegmentData: java.util.List readDictLines()>() in <com.github.houbb.segment.support.data.impl.AbstractSegmentData: void initWordEntryList(java.util.List)> ==> <com.github.houbb.segment.support.data.impl.SegmentSystemData: java.util.List readDictLines()>
INTERFACE edge: r21 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>() in <com.github.houbb.segment.support.data.impl.AbstractSegmentData: void initWordEntryList(java.util.List)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $r11 = interfaceinvoke r10.<java.util.List: java.lang.Object get(int)>(0) in <com.github.houbb.segment.support.data.impl.AbstractSegmentData: void initWordEntryList(java.util.List)> ==> <java.util.ArrayList: java.lang.Object get(int)>
INTERFACE edge: $i2 = interfaceinvoke r10.<java.util.List: int size()>() in <com.github.houbb.segment.support.data.impl.AbstractSegmentData: void initWordEntryList(java.util.List)> ==> <java.util.ArrayList: int size()>
INTERFACE edge: $r19 = interfaceinvoke r10.<java.util.List: java.lang.Object get(int)>(1) in <com.github.houbb.segment.support.data.impl.AbstractSegmentData: void initWordEntryList(java.util.List)> ==> <java.util.ArrayList: java.lang.Object get(int)>
INTERFACE edge: $i3 = interfaceinvoke r10.<java.util.List: int size()>() in <com.github.houbb.segment.support.data.impl.AbstractSegmentData: void initWordEntryList(java.util.List)> ==> <java.util.ArrayList: int size()>
INTERFACE edge: $r18 = interfaceinvoke r10.<java.util.List: java.lang.Object get(int)>(2) in <com.github.houbb.segment.support.data.impl.AbstractSegmentData: void initWordEntryList(java.util.List)> ==> <java.util.ArrayList: java.lang.Object get(int)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<com.github.houbb.segment.model.SegmentWordEntry: com.github.houbb.segment.model.SegmentWordEntry word(java.lang.String)>(r12) in <com.github.houbb.segment.support.data.impl.AbstractSegmentData: void initWordEntryList(java.util.List)> ==> <com.github.houbb.segment.model.SegmentWordEntry: com.github.houbb.segment.model.SegmentWordEntry word(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<com.github.houbb.segment.model.SegmentWordEntry: com.github.houbb.segment.model.SegmentWordEntry count(long)>(l4) in <com.github.houbb.segment.support.data.impl.AbstractSegmentData: void initWordEntryList(java.util.List)> ==> <com.github.houbb.segment.model.SegmentWordEntry: com.github.houbb.segment.model.SegmentWordEntry count(long)>
VIRTUAL edge: r16 = virtualinvoke $r15.<com.github.houbb.segment.model.SegmentWordEntry: com.github.houbb.segment.model.SegmentWordEntry type(java.lang.String)>(r22) in <com.github.houbb.segment.support.data.impl.AbstractSegmentData: void initWordEntryList(java.util.List)> ==> <com.github.houbb.segment.model.SegmentWordEntry: com.github.houbb.segment.model.SegmentWordEntry type(java.lang.String)>
INTERFACE edge: interfaceinvoke r17.<java.util.List: boolean add(java.lang.Object)>(r16) in <com.github.houbb.segment.support.data.impl.AbstractSegmentData: void initWordEntryList(java.util.List)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() in <com.github.houbb.segment.support.data.impl.AbstractSegmentData: void initWordEntryList(java.util.List)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[Segment] dict init word-list finish, cost time : ") in <com.github.houbb.segment.support.data.impl.AbstractSegmentData: void initWordEntryList(java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l5) in <com.github.houbb.segment.support.data.impl.AbstractSegmentData: void initWordEntryList(java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(long)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ms!") in <com.github.houbb.segment.support.data.impl.AbstractSegmentData: void initWordEntryList(java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>() in <com.github.houbb.segment.support.data.impl.AbstractSegmentData: void initWordEntryList(java.util.List)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r7) in <com.github.houbb.segment.support.data.impl.AbstractSegmentData: void initWordEntryList(java.util.List)> ==> <java.io.PrintStream: void println(java.lang.String)>
STATIC edge: $r0 = staticinvoke <com.github.houbb.heaven.util.io.StreamUtil: java.util.List readAllLines(java.lang.String)>("/segment_define_dict.txt") in <com.github.houbb.segment.support.data.impl.SegmentDefineData: java.util.List readDictLines()> ==> <com.github.houbb.heaven.util.io.StreamUtil: java.util.List readAllLines(java.lang.String)>
STATIC edge: r0 = staticinvoke <com.github.houbb.heaven.util.io.StreamUtil: java.util.List readAllLines(java.lang.String)>("/segment_dict.txt") in <com.github.houbb.segment.support.data.impl.SegmentMixedData: java.util.List readDictLines()> ==> <com.github.houbb.heaven.util.io.StreamUtil: java.util.List readAllLines(java.lang.String)>
STATIC edge: r1 = staticinvoke <com.github.houbb.heaven.util.io.StreamUtil: java.util.List readAllLines(java.lang.String)>("/segment_define_dict.txt") in <com.github.houbb.segment.support.data.impl.SegmentMixedData: java.util.List readDictLines()> ==> <com.github.houbb.heaven.util.io.StreamUtil: java.util.List readAllLines(java.lang.String)>
STATIC edge: $r0 = staticinvoke <com.github.houbb.heaven.util.io.StreamUtil: java.util.List readAllLines(java.lang.String)>("/segment_dict.txt") in <com.github.houbb.segment.support.data.impl.SegmentSystemData: java.util.List readDictLines()> ==> <com.github.houbb.heaven.util.io.StreamUtil: java.util.List readAllLines(java.lang.String)>
INTERFACE edge: interfaceinvoke r0.<java.util.List: boolean addAll(java.util.Collection)>(r1) in <com.github.houbb.segment.support.data.impl.SegmentMixedData: java.util.List readDictLines()> ==> <java.util.ArrayList: boolean addAll(java.util.Collection)>
