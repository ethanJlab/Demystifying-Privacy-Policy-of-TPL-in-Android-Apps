FINALIZE edge: null in <java.lang.Object: void <init>()> ==> <java.lang.Object: void finalize()>
CLINIT edge: $r0 = <io.micrometer.newrelic.ClientProviderType: io.micrometer.newrelic.ClientProviderType[] $VALUES> in <io.micrometer.newrelic.ClientProviderType: io.micrometer.newrelic.ClientProviderType[] values()> ==> <io.micrometer.newrelic.ClientProviderType: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lio/micrometer/newrelic/ClientProviderType;", r0) in <io.micrometer.newrelic.ClientProviderType: io.micrometer.newrelic.ClientProviderType valueOf(java.lang.String)> ==> <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
CLINIT edge: $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0) in <io.micrometer.newrelic.NewRelicConfig: boolean meterNameEventTypeEnabled()> ==> <java.lang.Boolean: void <clinit>()>
STATIC edge: $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0) in <io.micrometer.newrelic.NewRelicConfig: boolean meterNameEventTypeEnabled()> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
STATIC edge: $r1 = staticinvoke <io.micrometer.core.instrument.config.validate.PropertyValidator: io.micrometer.core.instrument.config.validate.Validated getBoolean(io.micrometer.core.instrument.config.MeterRegistryConfig,java.lang.String)>($r5, "meterNameEventTypeEnabled") in <io.micrometer.newrelic.NewRelicConfig: boolean meterNameEventTypeEnabled()> ==> <io.micrometer.core.instrument.config.validate.PropertyValidator: io.micrometer.core.instrument.config.validate.Validated getBoolean(io.micrometer.core.instrument.config.MeterRegistryConfig,java.lang.String)>
STATIC edge: $r1 = staticinvoke <io.micrometer.core.instrument.config.validate.PropertyValidator: io.micrometer.core.instrument.config.validate.Validated getString(io.micrometer.core.instrument.config.MeterRegistryConfig,java.lang.String)>($r4, "eventType") in <io.micrometer.newrelic.NewRelicConfig: java.lang.String eventType()> ==> <io.micrometer.core.instrument.config.validate.PropertyValidator: io.micrometer.core.instrument.config.validate.Validated getString(io.micrometer.core.instrument.config.MeterRegistryConfig,java.lang.String)>
CLINIT edge: $r2 = <io.micrometer.newrelic.ClientProviderType: io.micrometer.newrelic.ClientProviderType INSIGHTS_API> in <io.micrometer.newrelic.NewRelicConfig: io.micrometer.newrelic.ClientProviderType clientProviderType()> ==> <io.micrometer.newrelic.ClientProviderType: void <clinit>()>
STATIC edge: $r1 = staticinvoke <io.micrometer.core.instrument.config.validate.PropertyValidator: io.micrometer.core.instrument.config.validate.Validated getEnum(io.micrometer.core.instrument.config.MeterRegistryConfig,java.lang.Class,java.lang.String)>($r5, class "Lio/micrometer/newrelic/ClientProviderType;", "clientProviderType") in <io.micrometer.newrelic.NewRelicConfig: io.micrometer.newrelic.ClientProviderType clientProviderType()> ==> <io.micrometer.core.instrument.config.validate.PropertyValidator: io.micrometer.core.instrument.config.validate.Validated getEnum(io.micrometer.core.instrument.config.MeterRegistryConfig,java.lang.Class,java.lang.String)>
STATIC edge: $r1 = staticinvoke <io.micrometer.core.instrument.config.validate.PropertyValidator: io.micrometer.core.instrument.config.validate.Validated getSecret(io.micrometer.core.instrument.config.MeterRegistryConfig,java.lang.String)>($r7, "apiKey") in <io.micrometer.newrelic.NewRelicConfig: java.lang.String apiKey()> ==> <io.micrometer.core.instrument.config.validate.PropertyValidator: io.micrometer.core.instrument.config.validate.Validated getSecret(io.micrometer.core.instrument.config.MeterRegistryConfig,java.lang.String)>
STATIC edge: $r2 = staticinvoke <io.micrometer.newrelic.NewRelicConfig$lambda_apiKey_0__1: java.util.function.Predicate bootstrap$(io.micrometer.newrelic.NewRelicConfig)>(r0) in <io.micrometer.newrelic.NewRelicConfig: java.lang.String apiKey()> ==> <io.micrometer.newrelic.NewRelicConfig$lambda_apiKey_0__1: java.util.function.Predicate bootstrap$(io.micrometer.newrelic.NewRelicConfig)>
STATIC edge: $r1 = staticinvoke <io.micrometer.core.instrument.config.validate.PropertyValidator: io.micrometer.core.instrument.config.validate.Validated getSecret(io.micrometer.core.instrument.config.MeterRegistryConfig,java.lang.String)>($r7, "accountId") in <io.micrometer.newrelic.NewRelicConfig: java.lang.String accountId()> ==> <io.micrometer.core.instrument.config.validate.PropertyValidator: io.micrometer.core.instrument.config.validate.Validated getSecret(io.micrometer.core.instrument.config.MeterRegistryConfig,java.lang.String)>
STATIC edge: $r2 = staticinvoke <io.micrometer.newrelic.NewRelicConfig$lambda_accountId_1__2: java.util.function.Predicate bootstrap$(io.micrometer.newrelic.NewRelicConfig)>(r0) in <io.micrometer.newrelic.NewRelicConfig: java.lang.String accountId()> ==> <io.micrometer.newrelic.NewRelicConfig$lambda_accountId_1__2: java.util.function.Predicate bootstrap$(io.micrometer.newrelic.NewRelicConfig)>
STATIC edge: $r1 = staticinvoke <io.micrometer.core.instrument.config.validate.PropertyValidator: io.micrometer.core.instrument.config.validate.Validated getUrlString(io.micrometer.core.instrument.config.MeterRegistryConfig,java.lang.String)>($r4, "uri") in <io.micrometer.newrelic.NewRelicConfig: java.lang.String uri()> ==> <io.micrometer.core.instrument.config.validate.PropertyValidator: io.micrometer.core.instrument.config.validate.Validated getUrlString(io.micrometer.core.instrument.config.MeterRegistryConfig,java.lang.String)>
STATIC edge: $r2 = staticinvoke <io.micrometer.newrelic.NewRelicConfig$lambda_validate_2__3: java.util.function.Function bootstrap$()>() in <io.micrometer.newrelic.NewRelicConfig: io.micrometer.core.instrument.config.validate.Validated validate()> ==> <io.micrometer.newrelic.NewRelicConfig$lambda_validate_2__3: java.util.function.Function bootstrap$()>
STATIC edge: $r9 = staticinvoke <io.micrometer.core.instrument.config.MeterRegistryConfigValidator: io.micrometer.core.instrument.config.validate.Validated checkAll(io.micrometer.core.instrument.config.MeterRegistryConfig,java.util.function.Function[])>($r10, $r1) in <io.micrometer.newrelic.NewRelicConfig: io.micrometer.core.instrument.config.validate.Validated validate()> ==> <io.micrometer.core.instrument.config.MeterRegistryConfigValidator: io.micrometer.core.instrument.config.validate.Validated checkAll(io.micrometer.core.instrument.config.MeterRegistryConfig,java.util.function.Function[])>
STATIC edge: $r8 = staticinvoke <io.micrometer.core.instrument.config.MeterRegistryConfigValidator: java.util.function.Function checkRequired(java.lang.String,java.util.function.Function)>("clientProviderType", $r7) in <io.micrometer.newrelic.NewRelicConfig: io.micrometer.core.instrument.config.validate.Validated validate()> ==> <io.micrometer.core.instrument.config.MeterRegistryConfigValidator: java.util.function.Function checkRequired(java.lang.String,java.util.function.Function)>
STATIC edge: $r7 = staticinvoke <io.micrometer.newrelic.NewRelicConfig$clientProviderType__16: java.util.function.Function bootstrap$()>() in <io.micrometer.newrelic.NewRelicConfig: io.micrometer.core.instrument.config.validate.Validated validate()> ==> <io.micrometer.newrelic.NewRelicConfig$clientProviderType__16: java.util.function.Function bootstrap$()>
STATIC edge: $r5 = staticinvoke <io.micrometer.newrelic.NewRelicConfig$lambda_validate_4__12: java.util.function.Function bootstrap$(io.micrometer.newrelic.NewRelicConfig)>(r0) in <io.micrometer.newrelic.NewRelicConfig: io.micrometer.core.instrument.config.validate.Validated validate()> ==> <io.micrometer.newrelic.NewRelicConfig$lambda_validate_4__12: java.util.function.Function bootstrap$(io.micrometer.newrelic.NewRelicConfig)>
STATIC edge: $r4 = staticinvoke <io.micrometer.core.instrument.config.MeterRegistryConfigValidator: java.util.function.Function check(java.lang.String,java.util.function.Function)>("eventType", $r3) in <io.micrometer.newrelic.NewRelicConfig: io.micrometer.core.instrument.config.validate.Validated validate()> ==> <io.micrometer.core.instrument.config.MeterRegistryConfigValidator: java.util.function.Function check(java.lang.String,java.util.function.Function)>
STATIC edge: $r3 = staticinvoke <io.micrometer.newrelic.NewRelicConfig$eventType__8: java.util.function.Function bootstrap$()>() in <io.micrometer.newrelic.NewRelicConfig: io.micrometer.core.instrument.config.validate.Validated validate()> ==> <io.micrometer.newrelic.NewRelicConfig$eventType__8: java.util.function.Function bootstrap$()>
STATIC edge: $r2 = staticinvoke <io.micrometer.newrelic.NewRelicConfig$lambda_validateForInsightsApi_5__4: java.util.function.Function bootstrap$(io.micrometer.newrelic.NewRelicConfig)>(r0) in <io.micrometer.newrelic.NewRelicConfig: io.micrometer.core.instrument.config.validate.Validated validateForInsightsApi()> ==> <io.micrometer.newrelic.NewRelicConfig$lambda_validateForInsightsApi_5__4: java.util.function.Function bootstrap$(io.micrometer.newrelic.NewRelicConfig)>
STATIC edge: $r15 = staticinvoke <io.micrometer.core.instrument.config.MeterRegistryConfigValidator: io.micrometer.core.instrument.config.validate.Validated checkAll(io.micrometer.core.instrument.config.MeterRegistryConfig,java.util.function.Function[])>($r16, $r1) in <io.micrometer.newrelic.NewRelicConfig: io.micrometer.core.instrument.config.validate.Validated validateForInsightsApi()> ==> <io.micrometer.core.instrument.config.MeterRegistryConfigValidator: io.micrometer.core.instrument.config.validate.Validated checkAll(io.micrometer.core.instrument.config.MeterRegistryConfig,java.util.function.Function[])>
STATIC edge: $r13 = staticinvoke <io.micrometer.newrelic.NewRelicConfig$lambda_validateForInsightsApi_8__22: java.util.function.Function bootstrap$()>() in <io.micrometer.newrelic.NewRelicConfig: io.micrometer.core.instrument.config.validate.Validated validateForInsightsApi()> ==> <io.micrometer.newrelic.NewRelicConfig$lambda_validateForInsightsApi_8__22: java.util.function.Function bootstrap$()>
STATIC edge: $r12 = staticinvoke <io.micrometer.core.instrument.config.MeterRegistryConfigValidator: java.util.function.Function check(java.lang.String,java.util.function.Function)>("accountId", $r11) in <io.micrometer.newrelic.NewRelicConfig: io.micrometer.core.instrument.config.validate.Validated validateForInsightsApi()> ==> <io.micrometer.core.instrument.config.MeterRegistryConfigValidator: java.util.function.Function check(java.lang.String,java.util.function.Function)>
STATIC edge: $r11 = staticinvoke <io.micrometer.newrelic.NewRelicConfig$accountId__19: java.util.function.Function bootstrap$()>() in <io.micrometer.newrelic.NewRelicConfig: io.micrometer.core.instrument.config.validate.Validated validateForInsightsApi()> ==> <io.micrometer.newrelic.NewRelicConfig$accountId__19: java.util.function.Function bootstrap$()>
STATIC edge: $r9 = staticinvoke <io.micrometer.newrelic.NewRelicConfig$lambda_validateForInsightsApi_7__17: java.util.function.Function bootstrap$()>() in <io.micrometer.newrelic.NewRelicConfig: io.micrometer.core.instrument.config.validate.Validated validateForInsightsApi()> ==> <io.micrometer.newrelic.NewRelicConfig$lambda_validateForInsightsApi_7__17: java.util.function.Function bootstrap$()>
STATIC edge: $r8 = staticinvoke <io.micrometer.core.instrument.config.MeterRegistryConfigValidator: java.util.function.Function check(java.lang.String,java.util.function.Function)>("apiKey", $r7) in <io.micrometer.newrelic.NewRelicConfig: io.micrometer.core.instrument.config.validate.Validated validateForInsightsApi()> ==> <io.micrometer.core.instrument.config.MeterRegistryConfigValidator: java.util.function.Function check(java.lang.String,java.util.function.Function)>
STATIC edge: $r7 = staticinvoke <io.micrometer.newrelic.NewRelicConfig$apiKey__14: java.util.function.Function bootstrap$()>() in <io.micrometer.newrelic.NewRelicConfig: io.micrometer.core.instrument.config.validate.Validated validateForInsightsApi()> ==> <io.micrometer.newrelic.NewRelicConfig$apiKey__14: java.util.function.Function bootstrap$()>
STATIC edge: $r5 = staticinvoke <io.micrometer.newrelic.NewRelicConfig$lambda_validateForInsightsApi_6__11: java.util.function.Function bootstrap$()>() in <io.micrometer.newrelic.NewRelicConfig: io.micrometer.core.instrument.config.validate.Validated validateForInsightsApi()> ==> <io.micrometer.newrelic.NewRelicConfig$lambda_validateForInsightsApi_6__11: java.util.function.Function bootstrap$()>
STATIC edge: $r4 = staticinvoke <io.micrometer.core.instrument.config.MeterRegistryConfigValidator: java.util.function.Function check(java.lang.String,java.util.function.Function)>("uri", $r3) in <io.micrometer.newrelic.NewRelicConfig: io.micrometer.core.instrument.config.validate.Validated validateForInsightsApi()> ==> <io.micrometer.core.instrument.config.MeterRegistryConfigValidator: java.util.function.Function check(java.lang.String,java.util.function.Function)>
STATIC edge: $r3 = staticinvoke <io.micrometer.newrelic.NewRelicConfig$uri__10: java.util.function.Function bootstrap$()>() in <io.micrometer.newrelic.NewRelicConfig: io.micrometer.core.instrument.config.validate.Validated validateForInsightsApi()> ==> <io.micrometer.newrelic.NewRelicConfig$uri__10: java.util.function.Function bootstrap$()>
STATIC edge: $r1 = staticinvoke <io.micrometer.newrelic.NewRelicConfig$isBlank__5: java.util.function.Predicate bootstrap$()>() in <io.micrometer.newrelic.NewRelicConfig: io.micrometer.core.instrument.config.validate.Validated lambda$validateForInsightsApi$8(io.micrometer.core.instrument.config.validate.Validated)> ==> <io.micrometer.newrelic.NewRelicConfig$isBlank__5: java.util.function.Predicate bootstrap$()>
STATIC edge: $r1 = staticinvoke <io.micrometer.newrelic.NewRelicConfig$isBlank__7: java.util.function.Predicate bootstrap$()>() in <io.micrometer.newrelic.NewRelicConfig: io.micrometer.core.instrument.config.validate.Validated lambda$validateForInsightsApi$7(io.micrometer.core.instrument.config.validate.Validated)> ==> <io.micrometer.newrelic.NewRelicConfig$isBlank__7: java.util.function.Predicate bootstrap$()>
STATIC edge: $r1 = staticinvoke <io.micrometer.newrelic.NewRelicConfig$isBlank__6: java.util.function.Predicate bootstrap$()>() in <io.micrometer.newrelic.NewRelicConfig: io.micrometer.core.instrument.config.validate.Validated lambda$validateForInsightsApi$6(io.micrometer.core.instrument.config.validate.Validated)> ==> <io.micrometer.newrelic.NewRelicConfig$isBlank__6: java.util.function.Predicate bootstrap$()>
STATIC edge: $r2 = staticinvoke <io.micrometer.newrelic.NewRelicConfig$lambda_validate_3__9: java.util.function.Predicate bootstrap$(io.micrometer.newrelic.NewRelicConfig)>(r1) in <io.micrometer.newrelic.NewRelicConfig: io.micrometer.core.instrument.config.validate.Validated lambda$validate$4(io.micrometer.core.instrument.config.validate.Validated)> ==> <io.micrometer.newrelic.NewRelicConfig$lambda_validate_3__9: java.util.function.Predicate bootstrap$(io.micrometer.newrelic.NewRelicConfig)>
STATIC edge: $z0 = staticinvoke <io.micrometer.core.instrument.util.StringUtils: boolean isBlank(java.lang.String)>(r0) in <io.micrometer.newrelic.NewRelicConfig: boolean lambda$validate$3(java.lang.String)> ==> <io.micrometer.core.instrument.util.StringUtils: boolean isBlank(java.lang.String)>
STATIC edge: $r1 = staticinvoke <io.micrometer.core.instrument.step.StepRegistryConfig: io.micrometer.core.instrument.config.validate.Validated validate(io.micrometer.core.instrument.step.StepRegistryConfig)>(r0) in <io.micrometer.newrelic.NewRelicConfig: io.micrometer.core.instrument.config.validate.Validated lambda$validate$2(io.micrometer.newrelic.NewRelicConfig)> ==> <io.micrometer.core.instrument.step.StepRegistryConfig: io.micrometer.core.instrument.config.validate.Validated validate(io.micrometer.core.instrument.step.StepRegistryConfig)>
CLINIT edge: $r2 = <io.micrometer.newrelic.ClientProviderType: io.micrometer.newrelic.ClientProviderType INSIGHTS_API> in <io.micrometer.newrelic.NewRelicConfig: boolean lambda$accountId$1(java.lang.String)> ==> <io.micrometer.newrelic.ClientProviderType: void <clinit>()>
STATIC edge: $z0 = staticinvoke <io.micrometer.core.instrument.util.StringUtils: boolean isBlank(java.lang.String)>(r0) in <io.micrometer.newrelic.NewRelicConfig: boolean lambda$accountId$1(java.lang.String)> ==> <io.micrometer.core.instrument.util.StringUtils: boolean isBlank(java.lang.String)>
CLINIT edge: $r2 = <io.micrometer.newrelic.ClientProviderType: io.micrometer.newrelic.ClientProviderType INSIGHTS_API> in <io.micrometer.newrelic.NewRelicConfig: boolean lambda$apiKey$0(java.lang.String)> ==> <io.micrometer.newrelic.ClientProviderType: void <clinit>()>
STATIC edge: $z0 = staticinvoke <io.micrometer.core.instrument.util.StringUtils: boolean isBlank(java.lang.String)>(r0) in <io.micrometer.newrelic.NewRelicConfig: boolean lambda$apiKey$0(java.lang.String)> ==> <io.micrometer.core.instrument.util.StringUtils: boolean isBlank(java.lang.String)>
CLINIT edge: $r3 = new io.micrometer.newrelic.NewRelicNamingConvention in <io.micrometer.newrelic.NewRelicMeterRegistry: void <init>(io.micrometer.newrelic.NewRelicConfig,io.micrometer.newrelic.NewRelicClientProvider,io.micrometer.core.instrument.Clock)> ==> <io.micrometer.newrelic.NewRelicNamingConvention: void <clinit>()>
CLINIT edge: $r5 = <io.micrometer.newrelic.NewRelicMeterRegistry: java.util.concurrent.ThreadFactory DEFAULT_THREAD_FACTORY> in <io.micrometer.newrelic.NewRelicMeterRegistry: void <init>(io.micrometer.newrelic.NewRelicConfig,io.micrometer.newrelic.NewRelicClientProvider,io.micrometer.core.instrument.Clock)> ==> <io.micrometer.newrelic.NewRelicMeterRegistry: void <clinit>()>
CLINIT edge: $r2 = new io.micrometer.newrelic.NewRelicMeterRegistry in <io.micrometer.newrelic.NewRelicMeterRegistry$Builder: io.micrometer.newrelic.NewRelicMeterRegistry build()> ==> <io.micrometer.newrelic.NewRelicMeterRegistry: void <clinit>()>
CLINIT edge: $r7 = new io.micrometer.newrelic.NewRelicNamingConvention in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: void <init>(io.micrometer.newrelic.NewRelicConfig)> ==> <io.micrometer.newrelic.NewRelicNamingConvention: void <clinit>()>
CLINIT edge: $r11 = new java.net.Proxy in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: void <init>(io.micrometer.newrelic.NewRelicConfig,java.lang.String,int)> ==> <java.net.Proxy: void <clinit>()>
CLINIT edge: $r13 = new io.micrometer.newrelic.NewRelicNamingConvention in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: void <init>(io.micrometer.newrelic.NewRelicConfig,java.lang.String,int)> ==> <io.micrometer.newrelic.NewRelicNamingConvention: void <clinit>()>
CLINIT edge: $r8 = <java.net.Proxy$Type: java.net.Proxy$Type HTTP> in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: void <init>(io.micrometer.newrelic.NewRelicConfig,java.lang.String,int)> ==> <java.net.Proxy$Type: void <clinit>()>
CLINIT edge: $r3 = new io.micrometer.newrelic.NewRelicNamingConvention in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: void <init>(io.micrometer.newrelic.NewRelicConfig,io.micrometer.core.ipc.http.HttpSender)> ==> <io.micrometer.newrelic.NewRelicNamingConvention: void <clinit>()>
STATIC edge: $i1 = staticinvoke <java.lang.Math: int min(int,int)>($i0, 1000) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: void publish(io.micrometer.newrelic.NewRelicMeterRegistry)> ==> <java.lang.Math: int min(int,int)>
STATIC edge: $r8 = staticinvoke <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$lambda_publish_0__23: java.util.function.Function bootstrap$(io.micrometer.newrelic.NewRelicInsightsApiClientProvider)>(r1) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: void publish(io.micrometer.newrelic.NewRelicMeterRegistry)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$lambda_publish_0__23: java.util.function.Function bootstrap$(io.micrometer.newrelic.NewRelicInsightsApiClientProvider)>
STATIC edge: $r3 = staticinvoke <io.micrometer.core.instrument.util.MeterPartition: java.util.List partition(io.micrometer.core.instrument.MeterRegistry,int)>($r10, $i1) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: void publish(io.micrometer.newrelic.NewRelicMeterRegistry)> ==> <io.micrometer.core.instrument.util.MeterPartition: java.util.List partition(io.micrometer.core.instrument.MeterRegistry,int)>
CLINIT edge: $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeLongTaskTimer(io.micrometer.core.instrument.LongTaskTimer)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $r13 = staticinvoke <java.util.stream.Stream: java.util.stream.Stream of(java.lang.Object)>($r12) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeLongTaskTimer(io.micrometer.core.instrument.LongTaskTimer)> ==> <java.util.stream.Stream: java.util.stream.Stream of(java.lang.Object)>
STATIC edge: $r8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeLongTaskTimer(io.micrometer.core.instrument.LongTaskTimer)> ==> <java.lang.Double: java.lang.Double valueOf(double)>
STATIC edge: $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeLongTaskTimer(io.micrometer.core.instrument.LongTaskTimer)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
CLINIT edge: $r8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeLongTaskTimer(io.micrometer.core.instrument.LongTaskTimer)> ==> <java.lang.Double: void <clinit>()>
CLINIT edge: $z0 = staticinvoke <java.lang.Double: boolean isFinite(double)>(d0) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeFunctionCounter(io.micrometer.core.instrument.FunctionCounter)> ==> <java.lang.Double: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.util.stream.Stream: java.util.stream.Stream empty()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeFunctionCounter(io.micrometer.core.instrument.FunctionCounter)> ==> <java.util.stream.Stream: java.util.stream.Stream empty()>
STATIC edge: $r8 = staticinvoke <java.util.stream.Stream: java.util.stream.Stream of(java.lang.Object)>($r7) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeFunctionCounter(io.micrometer.core.instrument.FunctionCounter)> ==> <java.util.stream.Stream: java.util.stream.Stream of(java.lang.Object)>
STATIC edge: $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeFunctionCounter(io.micrometer.core.instrument.FunctionCounter)> ==> <java.lang.Double: java.lang.Double valueOf(double)>
STATIC edge: $z0 = staticinvoke <java.lang.Double: boolean isFinite(double)>(d0) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeFunctionCounter(io.micrometer.core.instrument.FunctionCounter)> ==> <java.lang.Number: boolean isFinite(double)>
CLINIT edge: $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeCounter(io.micrometer.core.instrument.Counter)> ==> <java.lang.Double: void <clinit>()>
STATIC edge: $r7 = staticinvoke <java.util.stream.Stream: java.util.stream.Stream of(java.lang.Object)>($r6) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeCounter(io.micrometer.core.instrument.Counter)> ==> <java.util.stream.Stream: java.util.stream.Stream of(java.lang.Object)>
STATIC edge: $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeCounter(io.micrometer.core.instrument.Counter)> ==> <java.lang.Double: java.lang.Double valueOf(double)>
CLINIT edge: $z0 = staticinvoke <java.lang.Double: boolean isFinite(double)>(d0) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeGauge(io.micrometer.core.instrument.Gauge)> ==> <java.lang.Double: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.util.stream.Stream: java.util.stream.Stream empty()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeGauge(io.micrometer.core.instrument.Gauge)> ==> <java.util.stream.Stream: java.util.stream.Stream empty()>
STATIC edge: $r8 = staticinvoke <java.util.stream.Stream: java.util.stream.Stream of(java.lang.Object)>($r7) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeGauge(io.micrometer.core.instrument.Gauge)> ==> <java.util.stream.Stream: java.util.stream.Stream of(java.lang.Object)>
STATIC edge: $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeGauge(io.micrometer.core.instrument.Gauge)> ==> <java.lang.Double: java.lang.Double valueOf(double)>
STATIC edge: $z0 = staticinvoke <java.lang.Double: boolean isFinite(double)>(d0) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeGauge(io.micrometer.core.instrument.Gauge)> ==> <java.lang.Number: boolean isFinite(double)>
CLINIT edge: $z0 = staticinvoke <java.lang.Double: boolean isFinite(double)>(d0) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeTimeGauge(io.micrometer.core.instrument.TimeGauge)> ==> <java.lang.Double: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.util.stream.Stream: java.util.stream.Stream empty()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeTimeGauge(io.micrometer.core.instrument.TimeGauge)> ==> <java.util.stream.Stream: java.util.stream.Stream empty()>
STATIC edge: $r12 = staticinvoke <java.util.stream.Stream: java.util.stream.Stream of(java.lang.Object)>($r11) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeTimeGauge(io.micrometer.core.instrument.TimeGauge)> ==> <java.util.stream.Stream: java.util.stream.Stream of(java.lang.Object)>
STATIC edge: $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeTimeGauge(io.micrometer.core.instrument.TimeGauge)> ==> <java.lang.Double: java.lang.Double valueOf(double)>
STATIC edge: $z0 = staticinvoke <java.lang.Double: boolean isFinite(double)>(d0) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeTimeGauge(io.micrometer.core.instrument.TimeGauge)> ==> <java.lang.Number: boolean isFinite(double)>
CLINIT edge: $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeSummary(io.micrometer.core.instrument.DistributionSummary)> ==> <java.lang.Long: void <clinit>()>
STATIC edge: $r13 = staticinvoke <java.util.stream.Stream: java.util.stream.Stream of(java.lang.Object)>($r12) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeSummary(io.micrometer.core.instrument.DistributionSummary)> ==> <java.util.stream.Stream: java.util.stream.Stream of(java.lang.Object)>
STATIC edge: $r11 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d2) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeSummary(io.micrometer.core.instrument.DistributionSummary)> ==> <java.lang.Double: java.lang.Double valueOf(double)>
STATIC edge: $r9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeSummary(io.micrometer.core.instrument.DistributionSummary)> ==> <java.lang.Double: java.lang.Double valueOf(double)>
STATIC edge: $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeSummary(io.micrometer.core.instrument.DistributionSummary)> ==> <java.lang.Double: java.lang.Double valueOf(double)>
STATIC edge: $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeSummary(io.micrometer.core.instrument.DistributionSummary)> ==> <java.lang.Long: java.lang.Long valueOf(long)>
CLINIT edge: $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeSummary(io.micrometer.core.instrument.DistributionSummary)> ==> <java.lang.Double: void <clinit>()>
CLINIT edge: $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeTimer(io.micrometer.core.instrument.Timer)> ==> <java.lang.Long: void <clinit>()>
STATIC edge: $r17 = staticinvoke <java.util.stream.Stream: java.util.stream.Stream of(java.lang.Object)>($r16) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeTimer(io.micrometer.core.instrument.Timer)> ==> <java.util.stream.Stream: java.util.stream.Stream of(java.lang.Object)>
STATIC edge: $r12 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d2) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeTimer(io.micrometer.core.instrument.Timer)> ==> <java.lang.Double: java.lang.Double valueOf(double)>
STATIC edge: $r10 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeTimer(io.micrometer.core.instrument.Timer)> ==> <java.lang.Double: java.lang.Double valueOf(double)>
STATIC edge: $r8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeTimer(io.micrometer.core.instrument.Timer)> ==> <java.lang.Double: java.lang.Double valueOf(double)>
STATIC edge: $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeTimer(io.micrometer.core.instrument.Timer)> ==> <java.lang.Long: java.lang.Long valueOf(long)>
CLINIT edge: $r8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeTimer(io.micrometer.core.instrument.Timer)> ==> <java.lang.Double: void <clinit>()>
CLINIT edge: $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeFunctionTimer(io.micrometer.core.instrument.FunctionTimer)> ==> <java.lang.Double: void <clinit>()>
STATIC edge: $r15 = staticinvoke <java.util.stream.Stream: java.util.stream.Stream of(java.lang.Object)>($r14) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeFunctionTimer(io.micrometer.core.instrument.FunctionTimer)> ==> <java.util.stream.Stream: java.util.stream.Stream of(java.lang.Object)>
STATIC edge: $r10 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d2) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeFunctionTimer(io.micrometer.core.instrument.FunctionTimer)> ==> <java.lang.Double: java.lang.Double valueOf(double)>
STATIC edge: $r8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeFunctionTimer(io.micrometer.core.instrument.FunctionTimer)> ==> <java.lang.Double: java.lang.Double valueOf(double)>
STATIC edge: $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeFunctionTimer(io.micrometer.core.instrument.FunctionTimer)> ==> <java.lang.Double: java.lang.Double valueOf(double)>
CLINIT edge: $z1 = staticinvoke <java.lang.Double: boolean isFinite(double)>(d0) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeMeter(io.micrometer.core.instrument.Meter)> ==> <java.lang.Double: void <clinit>()>
STATIC edge: $r12 = staticinvoke <java.util.stream.Stream: java.util.stream.Stream of(java.lang.Object)>($r11) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeMeter(io.micrometer.core.instrument.Meter)> ==> <java.util.stream.Stream: java.util.stream.Stream of(java.lang.Object)>
STATIC edge: $r13 = staticinvoke <java.util.stream.Stream: java.util.stream.Stream empty()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeMeter(io.micrometer.core.instrument.Meter)> ==> <java.util.stream.Stream: java.util.stream.Stream empty()>
STATIC edge: $r19 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeMeter(io.micrometer.core.instrument.Meter)> ==> <java.lang.Double: java.lang.Double valueOf(double)>
STATIC edge: $z1 = staticinvoke <java.lang.Double: boolean isFinite(double)>(d0) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeMeter(io.micrometer.core.instrument.Meter)> ==> <java.lang.Number: boolean isFinite(double)>
CLINIT edge: $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: void lambda$sendEvents$4(io.micrometer.core.ipc.http.HttpSender$Response)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: void lambda$sendEvents$4(io.micrometer.core.ipc.http.HttpSender$Response)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r21 = staticinvoke <io.micrometer.core.instrument.util.DoubleFormat: java.lang.String wholeOrDecimal(double)>($d0) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String lambda$event$1(io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute)> ==> <io.micrometer.core.instrument.util.DoubleFormat: java.lang.String wholeOrDecimal(double)>
STATIC edge: $r2 = staticinvoke <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$writeGauge__31: java.util.function.Function bootstrap$(io.micrometer.newrelic.NewRelicInsightsApiClientProvider)>(r1) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream lambda$publish$0(io.micrometer.core.instrument.Meter)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$writeGauge__31: java.util.function.Function bootstrap$(io.micrometer.newrelic.NewRelicInsightsApiClientProvider)>
STATIC edge: $r10 = staticinvoke <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$writeMeter__40: java.util.function.Function bootstrap$(io.micrometer.newrelic.NewRelicInsightsApiClientProvider)>(r1) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream lambda$publish$0(io.micrometer.core.instrument.Meter)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$writeMeter__40: java.util.function.Function bootstrap$(io.micrometer.newrelic.NewRelicInsightsApiClientProvider)>
STATIC edge: $r9 = staticinvoke <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$writeFunctionTimer__39: java.util.function.Function bootstrap$(io.micrometer.newrelic.NewRelicInsightsApiClientProvider)>(r1) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream lambda$publish$0(io.micrometer.core.instrument.Meter)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$writeFunctionTimer__39: java.util.function.Function bootstrap$(io.micrometer.newrelic.NewRelicInsightsApiClientProvider)>
STATIC edge: $r8 = staticinvoke <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$writeFunctionCounter__38: java.util.function.Function bootstrap$(io.micrometer.newrelic.NewRelicInsightsApiClientProvider)>(r1) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream lambda$publish$0(io.micrometer.core.instrument.Meter)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$writeFunctionCounter__38: java.util.function.Function bootstrap$(io.micrometer.newrelic.NewRelicInsightsApiClientProvider)>
STATIC edge: $r7 = staticinvoke <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$writeTimeGauge__37: java.util.function.Function bootstrap$(io.micrometer.newrelic.NewRelicInsightsApiClientProvider)>(r1) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream lambda$publish$0(io.micrometer.core.instrument.Meter)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$writeTimeGauge__37: java.util.function.Function bootstrap$(io.micrometer.newrelic.NewRelicInsightsApiClientProvider)>
STATIC edge: $r6 = staticinvoke <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$writeLongTaskTimer__36: java.util.function.Function bootstrap$(io.micrometer.newrelic.NewRelicInsightsApiClientProvider)>(r1) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream lambda$publish$0(io.micrometer.core.instrument.Meter)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$writeLongTaskTimer__36: java.util.function.Function bootstrap$(io.micrometer.newrelic.NewRelicInsightsApiClientProvider)>
STATIC edge: $r5 = staticinvoke <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$writeSummary__35: java.util.function.Function bootstrap$(io.micrometer.newrelic.NewRelicInsightsApiClientProvider)>(r1) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream lambda$publish$0(io.micrometer.core.instrument.Meter)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$writeSummary__35: java.util.function.Function bootstrap$(io.micrometer.newrelic.NewRelicInsightsApiClientProvider)>
STATIC edge: $r4 = staticinvoke <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$writeTimer__33: java.util.function.Function bootstrap$(io.micrometer.newrelic.NewRelicInsightsApiClientProvider)>(r1) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream lambda$publish$0(io.micrometer.core.instrument.Meter)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$writeTimer__33: java.util.function.Function bootstrap$(io.micrometer.newrelic.NewRelicInsightsApiClientProvider)>
STATIC edge: $r3 = staticinvoke <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$writeCounter__32: java.util.function.Function bootstrap$(io.micrometer.newrelic.NewRelicInsightsApiClientProvider)>(r1) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream lambda$publish$0(io.micrometer.core.instrument.Meter)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$writeCounter__32: java.util.function.Function bootstrap$(io.micrometer.newrelic.NewRelicInsightsApiClientProvider)>
CLINIT edge: $r3 = new io.micrometer.newrelic.NewRelicNamingConvention in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void <init>(io.micrometer.newrelic.NewRelicConfig)> ==> <io.micrometer.newrelic.NewRelicNamingConvention: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.newrelic.api.agent.NewRelic: com.newrelic.api.agent.Agent getAgent()>() in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void <init>(io.micrometer.newrelic.NewRelicConfig)> ==> <com.newrelic.api.agent.NewRelic: com.newrelic.api.agent.Agent getAgent()>
CLINIT edge: $r3 = new io.micrometer.newrelic.NewRelicNamingConvention in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void <init>(io.micrometer.newrelic.NewRelicConfig,com.newrelic.api.agent.Agent)> ==> <io.micrometer.newrelic.NewRelicNamingConvention: void <clinit>()>
STATIC edge: $r7 = staticinvoke <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider$writeGauge__13: java.util.function.Function bootstrap$(io.micrometer.newrelic.NewRelicInsightsAgentClientProvider)>(r5) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void publish(io.micrometer.newrelic.NewRelicMeterRegistry)> ==> <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider$writeGauge__13: java.util.function.Function bootstrap$(io.micrometer.newrelic.NewRelicInsightsAgentClientProvider)>
STATIC edge: $r15 = staticinvoke <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider$writeMeter__30: java.util.function.Function bootstrap$(io.micrometer.newrelic.NewRelicInsightsAgentClientProvider)>(r5) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void publish(io.micrometer.newrelic.NewRelicMeterRegistry)> ==> <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider$writeMeter__30: java.util.function.Function bootstrap$(io.micrometer.newrelic.NewRelicInsightsAgentClientProvider)>
STATIC edge: $r14 = staticinvoke <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider$writeFunctionTimer__26: java.util.function.Function bootstrap$(io.micrometer.newrelic.NewRelicInsightsAgentClientProvider)>(r5) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void publish(io.micrometer.newrelic.NewRelicMeterRegistry)> ==> <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider$writeFunctionTimer__26: java.util.function.Function bootstrap$(io.micrometer.newrelic.NewRelicInsightsAgentClientProvider)>
STATIC edge: $r13 = staticinvoke <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider$writeFunctionCounter__25: java.util.function.Function bootstrap$(io.micrometer.newrelic.NewRelicInsightsAgentClientProvider)>(r5) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void publish(io.micrometer.newrelic.NewRelicMeterRegistry)> ==> <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider$writeFunctionCounter__25: java.util.function.Function bootstrap$(io.micrometer.newrelic.NewRelicInsightsAgentClientProvider)>
STATIC edge: $r12 = staticinvoke <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider$writeTimeGauge__24: java.util.function.Function bootstrap$(io.micrometer.newrelic.NewRelicInsightsAgentClientProvider)>(r5) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void publish(io.micrometer.newrelic.NewRelicMeterRegistry)> ==> <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider$writeTimeGauge__24: java.util.function.Function bootstrap$(io.micrometer.newrelic.NewRelicInsightsAgentClientProvider)>
STATIC edge: $r11 = staticinvoke <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider$writeLongTaskTimer__21: java.util.function.Function bootstrap$(io.micrometer.newrelic.NewRelicInsightsAgentClientProvider)>(r5) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void publish(io.micrometer.newrelic.NewRelicMeterRegistry)> ==> <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider$writeLongTaskTimer__21: java.util.function.Function bootstrap$(io.micrometer.newrelic.NewRelicInsightsAgentClientProvider)>
STATIC edge: $r10 = staticinvoke <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider$writeSummary__20: java.util.function.Function bootstrap$(io.micrometer.newrelic.NewRelicInsightsAgentClientProvider)>(r5) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void publish(io.micrometer.newrelic.NewRelicMeterRegistry)> ==> <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider$writeSummary__20: java.util.function.Function bootstrap$(io.micrometer.newrelic.NewRelicInsightsAgentClientProvider)>
STATIC edge: $r9 = staticinvoke <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider$writeTimer__18: java.util.function.Function bootstrap$(io.micrometer.newrelic.NewRelicInsightsAgentClientProvider)>(r5) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void publish(io.micrometer.newrelic.NewRelicMeterRegistry)> ==> <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider$writeTimer__18: java.util.function.Function bootstrap$(io.micrometer.newrelic.NewRelicInsightsAgentClientProvider)>
STATIC edge: $r8 = staticinvoke <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider$writeCounter__15: java.util.function.Function bootstrap$(io.micrometer.newrelic.NewRelicInsightsAgentClientProvider)>(r5) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void publish(io.micrometer.newrelic.NewRelicMeterRegistry)> ==> <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider$writeCounter__15: java.util.function.Function bootstrap$(io.micrometer.newrelic.NewRelicInsightsAgentClientProvider)>
CLINIT edge: $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeLongTaskTimer(io.micrometer.core.instrument.LongTaskTimer)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeLongTaskTimer(io.micrometer.core.instrument.LongTaskTimer)> ==> <java.lang.Double: java.lang.Double valueOf(double)>
STATIC edge: $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeLongTaskTimer(io.micrometer.core.instrument.LongTaskTimer)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
CLINIT edge: $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeLongTaskTimer(io.micrometer.core.instrument.LongTaskTimer)> ==> <java.lang.Double: void <clinit>()>
CLINIT edge: $z0 = staticinvoke <java.lang.Double: boolean isFinite(double)>(d0) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeGauge(io.micrometer.core.instrument.Gauge)> ==> <java.lang.Double: void <clinit>()>
STATIC edge: $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeGauge(io.micrometer.core.instrument.Gauge)> ==> <java.lang.Double: java.lang.Double valueOf(double)>
STATIC edge: $r6 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>() in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeGauge(io.micrometer.core.instrument.Gauge)> ==> <java.util.Collections: java.util.Map emptyMap()>
STATIC edge: $z0 = staticinvoke <java.lang.Double: boolean isFinite(double)>(d0) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeGauge(io.micrometer.core.instrument.Gauge)> ==> <java.lang.Number: boolean isFinite(double)>
CLINIT edge: $r6 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>() in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeGauge(io.micrometer.core.instrument.Gauge)> ==> <java.util.Collections: void <clinit>()>
CLINIT edge: $z0 = staticinvoke <java.lang.Double: boolean isFinite(double)>(d0) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeTimeGauge(io.micrometer.core.instrument.TimeGauge)> ==> <java.lang.Double: void <clinit>()>
STATIC edge: $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeTimeGauge(io.micrometer.core.instrument.TimeGauge)> ==> <java.lang.Double: java.lang.Double valueOf(double)>
STATIC edge: $r9 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>() in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeTimeGauge(io.micrometer.core.instrument.TimeGauge)> ==> <java.util.Collections: java.util.Map emptyMap()>
STATIC edge: $z0 = staticinvoke <java.lang.Double: boolean isFinite(double)>(d0) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeTimeGauge(io.micrometer.core.instrument.TimeGauge)> ==> <java.lang.Number: boolean isFinite(double)>
CLINIT edge: $r9 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>() in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeTimeGauge(io.micrometer.core.instrument.TimeGauge)> ==> <java.util.Collections: void <clinit>()>
CLINIT edge: $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeSummary(io.micrometer.core.instrument.DistributionSummary)> ==> <java.lang.Long: void <clinit>()>
STATIC edge: $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d2) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeSummary(io.micrometer.core.instrument.DistributionSummary)> ==> <java.lang.Double: java.lang.Double valueOf(double)>
STATIC edge: $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeSummary(io.micrometer.core.instrument.DistributionSummary)> ==> <java.lang.Double: java.lang.Double valueOf(double)>
STATIC edge: $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeSummary(io.micrometer.core.instrument.DistributionSummary)> ==> <java.lang.Double: java.lang.Double valueOf(double)>
STATIC edge: $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeSummary(io.micrometer.core.instrument.DistributionSummary)> ==> <java.lang.Long: java.lang.Long valueOf(long)>
CLINIT edge: $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeSummary(io.micrometer.core.instrument.DistributionSummary)> ==> <java.lang.Double: void <clinit>()>
CLINIT edge: $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeTimer(io.micrometer.core.instrument.Timer)> ==> <java.lang.Long: void <clinit>()>
STATIC edge: $r8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d2) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeTimer(io.micrometer.core.instrument.Timer)> ==> <java.lang.Double: java.lang.Double valueOf(double)>
STATIC edge: $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeTimer(io.micrometer.core.instrument.Timer)> ==> <java.lang.Double: java.lang.Double valueOf(double)>
STATIC edge: $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeTimer(io.micrometer.core.instrument.Timer)> ==> <java.lang.Double: java.lang.Double valueOf(double)>
STATIC edge: $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeTimer(io.micrometer.core.instrument.Timer)> ==> <java.lang.Long: java.lang.Long valueOf(long)>
CLINIT edge: $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeTimer(io.micrometer.core.instrument.Timer)> ==> <java.lang.Double: void <clinit>()>
CLINIT edge: $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeFunctionTimer(io.micrometer.core.instrument.FunctionTimer)> ==> <java.lang.Double: void <clinit>()>
STATIC edge: $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d2) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeFunctionTimer(io.micrometer.core.instrument.FunctionTimer)> ==> <java.lang.Double: java.lang.Double valueOf(double)>
STATIC edge: $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeFunctionTimer(io.micrometer.core.instrument.FunctionTimer)> ==> <java.lang.Double: java.lang.Double valueOf(double)>
STATIC edge: $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeFunctionTimer(io.micrometer.core.instrument.FunctionTimer)> ==> <java.lang.Double: java.lang.Double valueOf(double)>
CLINIT edge: $z1 = staticinvoke <java.lang.Double: boolean isFinite(double)>(d0) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeMeter(io.micrometer.core.instrument.Meter)> ==> <java.lang.Double: void <clinit>()>
STATIC edge: $r11 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeMeter(io.micrometer.core.instrument.Meter)> ==> <java.lang.Double: java.lang.Double valueOf(double)>
STATIC edge: $z1 = staticinvoke <java.lang.Double: boolean isFinite(double)>(d0) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeMeter(io.micrometer.core.instrument.Meter)> ==> <java.lang.Number: boolean isFinite(double)>
CLINIT edge: $r6 = staticinvoke <io.micrometer.newrelic.NewRelicNamingConvention: java.lang.String toValidNewRelicString(java.lang.String)>($r5) in <io.micrometer.newrelic.NewRelicNamingConvention: java.lang.String name(java.lang.String,io.micrometer.core.instrument.Meter$Type,java.lang.String)> ==> <io.micrometer.newrelic.NewRelicNamingConvention: void <clinit>()>
STATIC edge: $r7 = staticinvoke <io.micrometer.core.instrument.util.StringEscapeUtils: java.lang.String escapeJson(java.lang.String)>($r6) in <io.micrometer.newrelic.NewRelicNamingConvention: java.lang.String name(java.lang.String,io.micrometer.core.instrument.Meter$Type,java.lang.String)> ==> <io.micrometer.core.instrument.util.StringEscapeUtils: java.lang.String escapeJson(java.lang.String)>
STATIC edge: $r6 = staticinvoke <io.micrometer.newrelic.NewRelicNamingConvention: java.lang.String toValidNewRelicString(java.lang.String)>($r5) in <io.micrometer.newrelic.NewRelicNamingConvention: java.lang.String name(java.lang.String,io.micrometer.core.instrument.Meter$Type,java.lang.String)> ==> <io.micrometer.newrelic.NewRelicNamingConvention: java.lang.String toValidNewRelicString(java.lang.String)>
CLINIT edge: $r4 = staticinvoke <io.micrometer.newrelic.NewRelicNamingConvention: java.lang.String toValidNewRelicString(java.lang.String)>($r3) in <io.micrometer.newrelic.NewRelicNamingConvention: java.lang.String tagKey(java.lang.String)> ==> <io.micrometer.newrelic.NewRelicNamingConvention: void <clinit>()>
STATIC edge: $r5 = staticinvoke <io.micrometer.core.instrument.util.StringEscapeUtils: java.lang.String escapeJson(java.lang.String)>($r4) in <io.micrometer.newrelic.NewRelicNamingConvention: java.lang.String tagKey(java.lang.String)> ==> <io.micrometer.core.instrument.util.StringEscapeUtils: java.lang.String escapeJson(java.lang.String)>
STATIC edge: $r4 = staticinvoke <io.micrometer.newrelic.NewRelicNamingConvention: java.lang.String toValidNewRelicString(java.lang.String)>($r3) in <io.micrometer.newrelic.NewRelicNamingConvention: java.lang.String tagKey(java.lang.String)> ==> <io.micrometer.newrelic.NewRelicNamingConvention: java.lang.String toValidNewRelicString(java.lang.String)>
STATIC edge: $r4 = staticinvoke <io.micrometer.core.instrument.util.StringEscapeUtils: java.lang.String escapeJson(java.lang.String)>($r3) in <io.micrometer.newrelic.NewRelicNamingConvention: java.lang.String tagValue(java.lang.String)> ==> <io.micrometer.core.instrument.util.StringEscapeUtils: java.lang.String escapeJson(java.lang.String)>
STATIC edge: $r3 = staticinvoke <io.micrometer.newrelic.NewRelicConfig: io.micrometer.core.instrument.config.validate.Validated lambda$validate$2(io.micrometer.newrelic.NewRelicConfig)>($r2) in <io.micrometer.newrelic.NewRelicConfig$lambda_validate_2__3: java.lang.Object apply(java.lang.Object)> ==> <io.micrometer.newrelic.NewRelicConfig: io.micrometer.core.instrument.config.validate.Validated lambda$validate$2(io.micrometer.newrelic.NewRelicConfig)>
STATIC edge: $z0 = staticinvoke <io.micrometer.core.instrument.util.StringUtils: boolean isBlank(java.lang.String)>($r2) in <io.micrometer.newrelic.NewRelicConfig$isBlank__5: boolean test(java.lang.Object)> ==> <io.micrometer.core.instrument.util.StringUtils: boolean isBlank(java.lang.String)>
STATIC edge: $z0 = staticinvoke <io.micrometer.core.instrument.util.StringUtils: boolean isBlank(java.lang.String)>($r2) in <io.micrometer.newrelic.NewRelicConfig$isBlank__6: boolean test(java.lang.Object)> ==> <io.micrometer.core.instrument.util.StringUtils: boolean isBlank(java.lang.String)>
STATIC edge: $z0 = staticinvoke <io.micrometer.core.instrument.util.StringUtils: boolean isBlank(java.lang.String)>($r2) in <io.micrometer.newrelic.NewRelicConfig$isBlank__7: boolean test(java.lang.Object)> ==> <io.micrometer.core.instrument.util.StringUtils: boolean isBlank(java.lang.String)>
STATIC edge: $r3 = staticinvoke <io.micrometer.newrelic.NewRelicConfig: io.micrometer.core.instrument.config.validate.Validated lambda$validateForInsightsApi$6(io.micrometer.core.instrument.config.validate.Validated)>($r2) in <io.micrometer.newrelic.NewRelicConfig$lambda_validateForInsightsApi_6__11: java.lang.Object apply(java.lang.Object)> ==> <io.micrometer.newrelic.NewRelicConfig: io.micrometer.core.instrument.config.validate.Validated lambda$validateForInsightsApi$6(io.micrometer.core.instrument.config.validate.Validated)>
STATIC edge: $r3 = staticinvoke <io.micrometer.newrelic.NewRelicConfig: io.micrometer.core.instrument.config.validate.Validated lambda$validateForInsightsApi$7(io.micrometer.core.instrument.config.validate.Validated)>($r2) in <io.micrometer.newrelic.NewRelicConfig$lambda_validateForInsightsApi_7__17: java.lang.Object apply(java.lang.Object)> ==> <io.micrometer.newrelic.NewRelicConfig: io.micrometer.core.instrument.config.validate.Validated lambda$validateForInsightsApi$7(io.micrometer.core.instrument.config.validate.Validated)>
STATIC edge: $r3 = staticinvoke <io.micrometer.newrelic.NewRelicConfig: io.micrometer.core.instrument.config.validate.Validated lambda$validateForInsightsApi$8(io.micrometer.core.instrument.config.validate.Validated)>($r2) in <io.micrometer.newrelic.NewRelicConfig$lambda_validateForInsightsApi_8__22: java.lang.Object apply(java.lang.Object)> ==> <io.micrometer.newrelic.NewRelicConfig: io.micrometer.core.instrument.config.validate.Validated lambda$validateForInsightsApi$8(io.micrometer.core.instrument.config.validate.Validated)>
STATIC edge: staticinvoke <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: void lambda$sendEvents$2(java.util.concurrent.atomic.AtomicInteger,java.lang.String)>($r3, $r2) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$lambda_sendEvents_2__28: void accept(java.lang.Object)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: void lambda$sendEvents$2(java.util.concurrent.atomic.AtomicInteger,java.lang.String)>
CLINIT edge: $r0 = new io.micrometer.newrelic.ClientProviderType in <io.micrometer.newrelic.ClientProviderType: void <clinit>()> ==> <io.micrometer.newrelic.ClientProviderType: void <clinit>()>
STATIC edge: $r2 = staticinvoke <io.micrometer.newrelic.ClientProviderType: io.micrometer.newrelic.ClientProviderType[] $values()>() in <io.micrometer.newrelic.ClientProviderType: void <clinit>()> ==> <io.micrometer.newrelic.ClientProviderType: io.micrometer.newrelic.ClientProviderType[] $values()>
CLINIT edge: <java.lang.Boolean: java.lang.Class TYPE> = null in <java.lang.Boolean: void <clinit>()> ==> <java.lang.Boolean: void <clinit>()>
CLINIT edge: <io.micrometer.newrelic.NewRelicNamingConvention: java.util.regex.Pattern INVALID_CHARACTERS_PATTERN> = $r0 in <io.micrometer.newrelic.NewRelicNamingConvention: void <clinit>()> ==> <io.micrometer.newrelic.NewRelicNamingConvention: void <clinit>()>
STATIC edge: $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[^\\w:]") in <io.micrometer.newrelic.NewRelicNamingConvention: void <clinit>()> ==> <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
CLINIT edge: <io.micrometer.newrelic.NewRelicMeterRegistry: java.util.concurrent.ThreadFactory DEFAULT_THREAD_FACTORY> = $r2 in <io.micrometer.newrelic.NewRelicMeterRegistry: void <clinit>()> ==> <io.micrometer.newrelic.NewRelicMeterRegistry: void <clinit>()>
CLINIT edge: <java.lang.Integer: java.lang.Class TYPE> = null in <java.lang.Integer: void <clinit>()> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: <java.lang.Double: java.lang.Class TYPE> = null in <java.lang.Double: void <clinit>()> ==> <java.lang.Double: void <clinit>()>
CLINIT edge: <java.lang.Long: java.lang.Class TYPE> = null in <java.lang.Long: void <clinit>()> ==> <java.lang.Long: void <clinit>()>
CLINIT edge: $r1 = <io.micrometer.newrelic.NewRelicNamingConvention: java.util.regex.Pattern INVALID_CHARACTERS_PATTERN> in <io.micrometer.newrelic.NewRelicNamingConvention: java.lang.String toValidNewRelicString(java.lang.String)> ==> <io.micrometer.newrelic.NewRelicNamingConvention: void <clinit>()>
CLINIT edge: $r0 = newarray (io.micrometer.newrelic.ClientProviderType)[2] in <io.micrometer.newrelic.ClientProviderType: io.micrometer.newrelic.ClientProviderType[] $values()> ==> <io.micrometer.newrelic.ClientProviderType: void <clinit>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Throwable: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Throwable: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Throwable: void <init>(java.lang.Throwable)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.Throwable fillInStackTrace()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.String getMessage()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.String getLocalizedMessage()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void printStackTrace()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void printStackTrace(java.io.PrintStream)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void printStackTrace(java.io.PrintWriter)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.Throwable getCause()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: void wait()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: void wait(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[])> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],int,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],int,int,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],int,int,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],int,int,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],int,int,java.nio.charset.Charset)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],int,int,java.nio.charset.Charset)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],java.nio.charset.Charset)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],java.nio.charset.Charset)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(char[])> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(char[],int,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(java.lang.StringBuffer)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(java.lang.StringBuffer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(int[],int,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(int[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(java.lang.StringBuilder)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(java.lang.StringBuilder)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int compareToIgnoreCase(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String concat(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String copyValueOf(char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String copyValueOf(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean endsWith(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean equalsIgnoreCase(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void getBytes(int,int,byte[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: byte[] getBytes()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: byte[] getBytes(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: byte[] getBytes(java.nio.charset.Charset)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void getChars(int,int,char[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int indexOf(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int indexOf(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int indexOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int indexOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int lastIndexOf(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int lastIndexOf(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int lastIndexOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int lastIndexOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean regionMatches(int,java.lang.String,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String replace(char,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean startsWith(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean startsWith(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String substring(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String substring(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: char[] toCharArray()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toLowerCase()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toLowerCase(java.util.Locale)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toUpperCase()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toUpperCase(java.util.Locale)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String trim()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean contentEquals(java.lang.StringBuffer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean contentEquals(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean matches(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String[] split(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String[] split(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.CharSequence subSequence(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int codePointAt(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int codePointBefore(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int codePointCount(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean contains(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int offsetByCodePoints(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.String: int compareTo(java.lang.String)>($r2) in <java.lang.String: int compareTo(java.lang.Object)> ==> <java.lang.String: int compareTo(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>()> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>(java.lang.String)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>(java.lang.Throwable)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class forName(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class[] getClasses()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.'annotation'.Annotation[] getAnnotations()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.String getCanonicalName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.ClassLoader getClassLoader()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Constructor[] getConstructors()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class[] getDeclaredClasses()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Object[] getEnumConstants()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Field getField(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Field[] getFields()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Type[] getGenericInterfaces()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Type getGenericSuperclass()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Method[] getMethods()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: int getModifiers()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.String getName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.String getSimpleName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.security.ProtectionDomain getProtectionDomain()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.net.URL getResource(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Object[] getSigners()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isAnnotation()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isAnnotationPresent(java.lang.Class)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isArray()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isEnum()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isLocalClass()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isMemberClass()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isSynthetic()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Object newInstance()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Package getPackage()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class asSubclass(java.lang.Class)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Object cast(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Exception: void <init>()> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Exception: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Exception: void <init>(java.lang.String)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Exception: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Exception: void <init>(java.lang.Throwable)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Exception: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.AbstractStringBuilder: void <init>()>() in <java.lang.StringBuffer: void <init>()> ==> <java.lang.AbstractStringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.AbstractStringBuilder: void <init>()>() in <java.lang.StringBuffer: void <init>(int)> ==> <java.lang.AbstractStringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.AbstractStringBuilder: void <init>()>() in <java.lang.StringBuffer: void <init>(java.lang.String)> ==> <java.lang.AbstractStringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.AbstractStringBuilder: void <init>()>() in <java.lang.StringBuffer: void <init>(java.lang.CharSequence)> ==> <java.lang.AbstractStringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void <init>(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.StringBuffer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer appendCodePoint(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: char charAt(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int codePointAt(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int codePointBefore(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int codePointCount(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer delete(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer deleteCharAt(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void ensureCapacity(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void getChars(int,int,char[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int indexOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.CharSequence,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int lastIndexOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int offsetByCodePoints(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer replace(int,int,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer reverse()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void setCharAt(int,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void setLength(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.CharSequence subSequence(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.String substring(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.String substring(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void trimToSize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: $i0 = specialinvoke r0.<java.lang.AbstractStringBuilder: int lastIndexOf(java.lang.String)>(r1) in <java.lang.StringBuffer: int lastIndexOf(java.lang.String)> ==> <java.lang.AbstractStringBuilder: int lastIndexOf(java.lang.String)>
SPECIAL edge: $i0 = specialinvoke r0.<java.lang.AbstractStringBuilder: int indexOf(java.lang.String)>(r1) in <java.lang.StringBuffer: int indexOf(java.lang.String)> ==> <java.lang.AbstractStringBuilder: int indexOf(java.lang.String)>
SPECIAL edge: $i0 = specialinvoke r0.<java.lang.AbstractStringBuilder: int length()>() in <java.lang.StringBuffer: int length()> ==> <java.lang.AbstractStringBuilder: int length()>
SPECIAL edge: $i0 = specialinvoke r0.<java.lang.AbstractStringBuilder: int capacity()>() in <java.lang.StringBuffer: int capacity()> ==> <java.lang.AbstractStringBuilder: int capacity()>
VIRTUAL edge: $r2 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence,int,int)>(r1, i0, i1) in <java.lang.StringBuffer: java.lang.Appendable append(java.lang.CharSequence,int,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence,int,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>(r1) in <java.lang.StringBuffer: java.lang.Appendable append(java.lang.CharSequence)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c0) in <java.lang.StringBuffer: java.lang.Appendable append(char)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(char)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.ClassNotFoundException: void <init>()> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassNotFoundException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.ClassNotFoundException: void <init>(java.lang.String)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassNotFoundException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.ClassNotFoundException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassNotFoundException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassNotFoundException: java.lang.Throwable getException()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassNotFoundException: java.lang.Throwable getCause()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ClassFormatError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassFormatError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ClassFormatError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassFormatError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.LinkageError: void <init>()> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.LinkageError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.LinkageError: void <init>(java.lang.String)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.LinkageError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: java.lang.String name()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: int ordinal()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: int compareTo(java.lang.Enum)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: java.lang.Class getDeclaringClass()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Enum: int compareTo(java.lang.Enum)>($r2) in <java.lang.Enum: int compareTo(java.lang.Object)> ==> <java.lang.Enum: int compareTo(java.lang.Enum)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Error: void <init>()> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Error: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Error: void <init>(java.lang.String)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Error: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Error: void <init>(java.lang.Throwable)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Error: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Float: void <init>(float)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: void <init>(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Float: void <init>(double)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: void <init>(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Float: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: int compareTo(java.lang.Float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: boolean isInfinite()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: boolean isInfinite(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: boolean isNaN()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: boolean isNaN(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: float parseFloat(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: java.lang.String toString(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: java.lang.Float valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: int compare(float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: java.lang.Float valueOf(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: java.lang.String toHexString(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Float: int compareTo(java.lang.Float)>($r2) in <java.lang.Float: int compareTo(java.lang.Object)> ==> <java.lang.Float: int compareTo(java.lang.Float)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Double: void <init>(double)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: void <init>(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Double: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: int compareTo(java.lang.Double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: boolean isInfinite()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: boolean isInfinite(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: boolean isNaN()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: boolean isNaN(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: double parseDouble(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: java.lang.String toString(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: java.lang.Double valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: int compare(double,double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: java.lang.Double valueOf(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: java.lang.String toHexString(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Double: int compareTo(java.lang.Double)>($r2) in <java.lang.Double: int compareTo(java.lang.Object)> ==> <java.lang.Double: int compareTo(java.lang.Double)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>()> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(java.lang.Object)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(boolean)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(char)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(int)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(long)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(float)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(double)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Integer: void <init>(int)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Integer: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int compareTo(java.lang.Integer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer decode(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer getInteger(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer getInteger(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer getInteger(java.lang.String,java.lang.Integer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int parseInt(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int parseInt(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toBinaryString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toHexString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toOctalString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toString(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int highestOneBit(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int lowestOneBit(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int numberOfLeadingZeros(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int numberOfTrailingZeros(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int bitCount(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int rotateLeft(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int rotateRight(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int reverseBytes(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int reverse(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int signum(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer valueOf(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Integer: int compareTo(java.lang.Integer)>($r2) in <java.lang.Integer: int compareTo(java.lang.Object)> ==> <java.lang.Integer: int compareTo(java.lang.Integer)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.NullPointerException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NullPointerException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.NullPointerException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NullPointerException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Character: void <init>(char)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: void <init>(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char charValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int compareTo(java.lang.Character)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: java.lang.Character valueOf(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isValidCodePoint(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isSupplementaryCodePoint(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isHighSurrogate(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLowSurrogate(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isSurrogatePair(char,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int charCount(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int toCodePoint(char,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointAt(java.lang.CharSequence,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointAt(char[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointAt(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointBefore(java.lang.CharSequence,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointBefore(char[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointBefore(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int toChars(int,char[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char[] toChars(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointCount(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int offsetByCodePoints(java.lang.CharSequence,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int offsetByCodePoints(char[],int,int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int digit(char,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int digit(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char forDigit(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int getNumericValue(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int getNumericValue(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int getType(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int getType(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: byte getDirectionality(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: byte getDirectionality(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isMirrored(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isMirrored(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isDefined(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isDefined(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isDigit(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isDigit(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isIdentifierIgnorable(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isIdentifierIgnorable(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isISOControl(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isISOControl(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaIdentifierPart(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaIdentifierPart(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaIdentifierStart(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaIdentifierStart(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaLetter(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaLetterOrDigit(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLetter(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLetter(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLetterOrDigit(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLetterOrDigit(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLowerCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLowerCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isSpace(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isSpaceChar(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isSpaceChar(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isTitleCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isTitleCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUnicodeIdentifierPart(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUnicodeIdentifierPart(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUnicodeIdentifierStart(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUnicodeIdentifierStart(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUpperCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUpperCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isWhitespace(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isWhitespace(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char reverseBytes(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char toLowerCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int toLowerCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: java.lang.String toString(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char toTitleCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int toTitleCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char toUpperCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int toUpperCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Character: int compareTo(java.lang.Character)>($r2) in <java.lang.Character: int compareTo(java.lang.Object)> ==> <java.lang.Character: int compareTo(java.lang.Character)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Long: void <init>(long)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: void <init>(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Long: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int compareTo(java.lang.Long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long decode(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long getLong(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long getLong(java.lang.String,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long getLong(java.lang.String,java.lang.Long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long parseLong(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long parseLong(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toBinaryString(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toHexString(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toOctalString(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toString(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toString(long,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long valueOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long highestOneBit(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long lowestOneBit(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int numberOfLeadingZeros(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int numberOfTrailingZeros(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int bitCount(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long rotateLeft(long,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long rotateRight(long,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long reverseBytes(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long reverse(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int signum(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long valueOf(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Long: int compareTo(java.lang.Long)>($r2) in <java.lang.Long: int compareTo(java.lang.Object)> ==> <java.lang.Long: int compareTo(java.lang.Long)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Short: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Short: void <init>(short)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: void <init>(short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: int compareTo(java.lang.Short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.Short decode(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: short parseShort(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: short parseShort(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.String toString(short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.Short valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.Short valueOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: short reverseBytes(short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.Short valueOf(short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Short: int compareTo(java.lang.Short)>($r2) in <java.lang.Short: int compareTo(java.lang.Object)> ==> <java.lang.Short: int compareTo(java.lang.Short)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Boolean: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Boolean: void <init>(boolean)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: void <init>(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: boolean booleanValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: int compareTo(java.lang.Boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: boolean getBoolean(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: boolean parseBoolean(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: java.lang.String toString(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: java.lang.Boolean valueOf(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Boolean: int compareTo(java.lang.Boolean)>($r2) in <java.lang.Boolean: int compareTo(java.lang.Object)> ==> <java.lang.Boolean: int compareTo(java.lang.Boolean)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Byte: void <init>(byte)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: void <init>(byte)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Byte: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: int compareTo(java.lang.Byte)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.Byte decode(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: byte parseByte(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: byte parseByte(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.String toString(byte)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.Byte valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.Byte valueOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.Byte valueOf(byte)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Byte: int compareTo(java.lang.Byte)>($r2) in <java.lang.Byte: int compareTo(java.lang.Object)> ==> <java.lang.Byte: int compareTo(java.lang.Byte)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.NoClassDefFoundError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoClassDefFoundError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.NoClassDefFoundError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoClassDefFoundError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.IndexOutOfBoundsException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IndexOutOfBoundsException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.StackOverflowError: void <init>()> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StackOverflowError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.StackOverflowError: void <init>(java.lang.String)> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StackOverflowError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.AbstractMethodError: void <init>()> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AbstractMethodError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.AbstractMethodError: void <init>(java.lang.String)> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AbstractMethodError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.IncompatibleClassChangeError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IncompatibleClassChangeError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.IncompatibleClassChangeError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IncompatibleClassChangeError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ClassCastException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassCastException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ClassCastException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassCastException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.VerifyError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.VerifyError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.VerifyError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.VerifyError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.NoSuchFieldError: void <init>()> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoSuchFieldError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.NoSuchFieldError: void <init>(java.lang.String)> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoSuchFieldError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.IllegalMonitorStateException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IllegalMonitorStateException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.IllegalMonitorStateException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IllegalMonitorStateException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.Runnable)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.Runnable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: int activeCount()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void checkAccess()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: int countStackFrames()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.Thread currentThread()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void destroy()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void dumpStack()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: int enumerate(java.lang.Thread[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.util.Map getAllStackTraces()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.ClassLoader getContextClassLoader()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getDefaultUncaughtExceptionHandler()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: long getId()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.String getName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: int getPriority()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.StackTraceElement[] getStackTrace()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.Thread$State getState()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.ThreadGroup getThreadGroup()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getUncaughtExceptionHandler()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void interrupt()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: boolean interrupted()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: boolean isAlive()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: boolean isDaemon()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: boolean isInterrupted()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void join()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void join(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void join(long,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void resume()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void run()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setDaemon(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setDefaultUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setName(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setPriority(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void sleep(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void sleep(long,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void start()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void stop()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void stop(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void suspend()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void yield()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: boolean holdsLock(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.UnknownError: void <init>()> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.UnknownError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.UnknownError: void <init>(java.lang.String)> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.UnknownError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.InternalError: void <init>()> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.InternalError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.InternalError: void <init>(java.lang.String)> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.InternalError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ArithmeticException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArithmeticException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ArithmeticException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArithmeticException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.NegativeArraySizeException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NegativeArraySizeException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.NegativeArraySizeException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NegativeArraySizeException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ClassCircularityError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassCircularityError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ClassCircularityError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassCircularityError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.NoSuchMethodError: void <init>()> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoSuchMethodError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.NoSuchMethodError: void <init>(java.lang.String)> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoSuchMethodError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IndexOutOfBoundsException: void <init>()>() in <java.lang.ArrayIndexOutOfBoundsException: void <init>()> ==> <java.lang.IndexOutOfBoundsException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArrayIndexOutOfBoundsException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IndexOutOfBoundsException: void <init>()>() in <java.lang.ArrayIndexOutOfBoundsException: void <init>(int)> ==> <java.lang.IndexOutOfBoundsException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArrayIndexOutOfBoundsException: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IndexOutOfBoundsException: void <init>()>() in <java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)> ==> <java.lang.IndexOutOfBoundsException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.ThreadDeath: void <init>()> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ThreadDeath: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.InstantiationError: void <init>()> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.InstantiationError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.InstantiationError: void <init>(java.lang.String)> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.InstantiationError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.IllegalAccessError: void <init>()> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IllegalAccessError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.IllegalAccessError: void <init>(java.lang.String)> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IllegalAccessError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.UnsatisfiedLinkError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.UnsatisfiedLinkError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.UnsatisfiedLinkError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.UnsatisfiedLinkError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ArrayStoreException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArrayStoreException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ArrayStoreException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArrayStoreException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ExceptionInInitializerError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ExceptionInInitializerError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ExceptionInInitializerError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ExceptionInInitializerError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ExceptionInInitializerError: void <init>(java.lang.Throwable)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ExceptionInInitializerError: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ExceptionInInitializerError: java.lang.Throwable getException()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ExceptionInInitializerError: java.lang.Throwable getCause()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.OutOfMemoryError: void <init>()> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.OutOfMemoryError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.OutOfMemoryError: void <init>(java.lang.String)> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.OutOfMemoryError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.micrometer.newrelic.ClientProviderType: io.micrometer.newrelic.ClientProviderType[] values()> ==> <java.lang.Object: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.micrometer.newrelic.ClientProviderType: io.micrometer.newrelic.ClientProviderType[] values()> ==> <java.util.Locale: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.micrometer.newrelic.ClientProviderType: io.micrometer.newrelic.ClientProviderType[] values()> ==> <java.util.Date: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.micrometer.newrelic.ClientProviderType: io.micrometer.newrelic.ClientProviderType[] values()> ==> <java.util.HashMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.micrometer.newrelic.ClientProviderType: io.micrometer.newrelic.ClientProviderType[] values()> ==> <java.lang.Enum: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <io.micrometer.newrelic.ClientProviderType: io.micrometer.newrelic.ClientProviderType[] values()> ==> <java.util.ArrayList: java.lang.Object clone()>
VIRTUAL edge: $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>() in <io.micrometer.newrelic.NewRelicConfig: boolean meterNameEventTypeEnabled()> ==> <java.lang.Boolean: boolean booleanValue()>
VIRTUAL edge: $z1 = virtualinvoke $r2.<io.micrometer.newrelic.ClientProviderType: boolean equals(java.lang.Object)>($r3) in <io.micrometer.newrelic.NewRelicConfig: boolean lambda$accountId$1(java.lang.String)> ==> <java.lang.Enum: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<io.micrometer.newrelic.ClientProviderType: boolean equals(java.lang.Object)>($r3) in <io.micrometer.newrelic.NewRelicConfig: boolean lambda$apiKey$0(java.lang.String)> ==> <java.lang.Enum: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<io.micrometer.newrelic.NewRelicMeterRegistry: void <init>(io.micrometer.newrelic.NewRelicConfig,io.micrometer.newrelic.NewRelicClientProvider,io.micrometer.core.instrument.Clock)>(r1, null, r2) in <io.micrometer.newrelic.NewRelicMeterRegistry: void <init>(io.micrometer.newrelic.NewRelicConfig,io.micrometer.core.instrument.Clock)> ==> <io.micrometer.newrelic.NewRelicMeterRegistry: void <init>(io.micrometer.newrelic.NewRelicConfig,io.micrometer.newrelic.NewRelicClientProvider,io.micrometer.core.instrument.Clock)>
SPECIAL edge: specialinvoke $r3.<io.micrometer.newrelic.NewRelicNamingConvention: void <init>()>() in <io.micrometer.newrelic.NewRelicMeterRegistry: void <init>(io.micrometer.newrelic.NewRelicConfig,io.micrometer.newrelic.NewRelicClientProvider,io.micrometer.core.instrument.Clock)> ==> <io.micrometer.newrelic.NewRelicNamingConvention: void <init>()>
SPECIAL edge: specialinvoke r0.<io.micrometer.newrelic.NewRelicMeterRegistry: void <init>(io.micrometer.newrelic.NewRelicConfig,io.micrometer.newrelic.NewRelicClientProvider,io.micrometer.core.instrument.config.NamingConvention,io.micrometer.core.instrument.Clock,java.util.concurrent.ThreadFactory)>(r1, r2, $r3, r4, $r5) in <io.micrometer.newrelic.NewRelicMeterRegistry: void <init>(io.micrometer.newrelic.NewRelicConfig,io.micrometer.newrelic.NewRelicClientProvider,io.micrometer.core.instrument.Clock)> ==> <io.micrometer.newrelic.NewRelicMeterRegistry: void <init>(io.micrometer.newrelic.NewRelicConfig,io.micrometer.newrelic.NewRelicClientProvider,io.micrometer.core.instrument.config.NamingConvention,io.micrometer.core.instrument.Clock,java.util.concurrent.ThreadFactory)>
CLINIT edge: $r7 = <io.micrometer.newrelic.ClientProviderType: io.micrometer.newrelic.ClientProviderType INSIGHTS_AGENT> in <io.micrometer.newrelic.NewRelicMeterRegistry: void <init>(io.micrometer.newrelic.NewRelicConfig,io.micrometer.newrelic.NewRelicClientProvider,io.micrometer.core.instrument.config.NamingConvention,io.micrometer.core.instrument.Clock,java.util.concurrent.ThreadFactory)> ==> <io.micrometer.newrelic.ClientProviderType: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<io.micrometer.newrelic.NewRelicMeterRegistry$Builder: void <init>(io.micrometer.newrelic.NewRelicConfig)>(r1) in <io.micrometer.newrelic.NewRelicMeterRegistry: io.micrometer.newrelic.NewRelicMeterRegistry$Builder builder(io.micrometer.newrelic.NewRelicConfig)> ==> <io.micrometer.newrelic.NewRelicMeterRegistry$Builder: void <init>(io.micrometer.newrelic.NewRelicConfig)>
CLINIT edge: $r1 = new io.micrometer.newrelic.NewRelicNamingConvention in <io.micrometer.newrelic.NewRelicMeterRegistry$Builder: void <init>(io.micrometer.newrelic.NewRelicConfig)> ==> <io.micrometer.newrelic.NewRelicNamingConvention: void <clinit>()>
STATIC edge: $r3 = staticinvoke <io.micrometer.newrelic.NewRelicMeterRegistry: java.util.concurrent.ThreadFactory access$000()>() in <io.micrometer.newrelic.NewRelicMeterRegistry$Builder: void <init>(io.micrometer.newrelic.NewRelicConfig)> ==> <io.micrometer.newrelic.NewRelicMeterRegistry: java.util.concurrent.ThreadFactory access$000()>
CLINIT edge: $r3 = staticinvoke <io.micrometer.newrelic.NewRelicMeterRegistry: java.util.concurrent.ThreadFactory access$000()>() in <io.micrometer.newrelic.NewRelicMeterRegistry$Builder: void <init>(io.micrometer.newrelic.NewRelicConfig)> ==> <io.micrometer.newrelic.NewRelicMeterRegistry: void <clinit>()>
CLINIT edge: $r0 = <io.micrometer.newrelic.NewRelicMeterRegistry: java.util.concurrent.ThreadFactory DEFAULT_THREAD_FACTORY> in <io.micrometer.newrelic.NewRelicMeterRegistry: java.util.concurrent.ThreadFactory access$000()> ==> <io.micrometer.newrelic.NewRelicMeterRegistry: void <clinit>()>
SPECIAL edge: specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Please remove httpClient() configuration as it has been deprecated in favour of clientProvider().") in <io.micrometer.newrelic.NewRelicMeterRegistry$Builder: io.micrometer.newrelic.NewRelicMeterRegistry build()> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r9.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider: void <init>(io.micrometer.newrelic.NewRelicConfig,io.micrometer.core.ipc.http.HttpSender,io.micrometer.core.instrument.config.NamingConvention)>($r12, $r11, $r10) in <io.micrometer.newrelic.NewRelicMeterRegistry$Builder: io.micrometer.newrelic.NewRelicMeterRegistry build()> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: void <init>(io.micrometer.newrelic.NewRelicConfig,io.micrometer.core.ipc.http.HttpSender,io.micrometer.core.instrument.config.NamingConvention)>
SPECIAL edge: specialinvoke $r2.<io.micrometer.newrelic.NewRelicMeterRegistry: void <init>(io.micrometer.newrelic.NewRelicConfig,io.micrometer.newrelic.NewRelicClientProvider,io.micrometer.core.instrument.config.NamingConvention,io.micrometer.core.instrument.Clock,java.util.concurrent.ThreadFactory)>($r7, $r6, $r5, $r4, $r3) in <io.micrometer.newrelic.NewRelicMeterRegistry$Builder: io.micrometer.newrelic.NewRelicMeterRegistry build()> ==> <io.micrometer.newrelic.NewRelicMeterRegistry: void <init>(io.micrometer.newrelic.NewRelicConfig,io.micrometer.newrelic.NewRelicClientProvider,io.micrometer.core.instrument.config.NamingConvention,io.micrometer.core.instrument.Clock,java.util.concurrent.ThreadFactory)>
STATIC edge: $r1 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lio/micrometer/newrelic/NewRelicInsightsApiClientProvider;") in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: void <init>(io.micrometer.newrelic.NewRelicConfig,io.micrometer.core.ipc.http.HttpSender,io.micrometer.core.instrument.config.NamingConvention)> ==> <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
INTERFACE edge: interfaceinvoke $r3.<io.micrometer.newrelic.NewRelicClientProvider: void setNamingConvention(io.micrometer.core.instrument.config.NamingConvention)>(r2) in <io.micrometer.newrelic.NewRelicMeterRegistry$1: io.micrometer.core.instrument.MeterRegistry$Config namingConvention(io.micrometer.core.instrument.config.NamingConvention)> ==> <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void setNamingConvention(io.micrometer.core.instrument.config.NamingConvention)>
INTERFACE edge: interfaceinvoke $r3.<io.micrometer.newrelic.NewRelicClientProvider: void setNamingConvention(io.micrometer.core.instrument.config.NamingConvention)>(r2) in <io.micrometer.newrelic.NewRelicMeterRegistry$1: io.micrometer.core.instrument.MeterRegistry$Config namingConvention(io.micrometer.core.instrument.config.NamingConvention)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: void setNamingConvention(io.micrometer.core.instrument.config.NamingConvention)>
SPECIAL edge: $r4 = specialinvoke r0.<io.micrometer.core.instrument.MeterRegistry$Config: io.micrometer.core.instrument.MeterRegistry$Config namingConvention(io.micrometer.core.instrument.config.NamingConvention)>(r2) in <io.micrometer.newrelic.NewRelicMeterRegistry$1: io.micrometer.core.instrument.MeterRegistry$Config namingConvention(io.micrometer.core.instrument.config.NamingConvention)> ==> <io.micrometer.core.instrument.MeterRegistry$Config: io.micrometer.core.instrument.MeterRegistry$Config namingConvention(io.micrometer.core.instrument.config.NamingConvention)>
SPECIAL edge: specialinvoke $r6.<io.micrometer.core.ipc.http.HttpUrlConnectionSender: void <init>(java.time.Duration,java.time.Duration)>($r3, $r4) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: void <init>(io.micrometer.newrelic.NewRelicConfig)> ==> <io.micrometer.core.ipc.http.HttpUrlConnectionSender: void <init>(java.time.Duration,java.time.Duration)>
SPECIAL edge: specialinvoke $r7.<io.micrometer.newrelic.NewRelicNamingConvention: void <init>()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: void <init>(io.micrometer.newrelic.NewRelicConfig)> ==> <io.micrometer.newrelic.NewRelicNamingConvention: void <init>()>
SPECIAL edge: specialinvoke r0.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider: void <init>(io.micrometer.newrelic.NewRelicConfig,io.micrometer.core.ipc.http.HttpSender,io.micrometer.core.instrument.config.NamingConvention)>(r1, $r8, $r7) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: void <init>(io.micrometer.newrelic.NewRelicConfig)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: void <init>(io.micrometer.newrelic.NewRelicConfig,io.micrometer.core.ipc.http.HttpSender,io.micrometer.core.instrument.config.NamingConvention)>
SPECIAL edge: specialinvoke $r10.<java.net.InetSocketAddress: void <init>(java.lang.String,int)>(r7, i0) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: void <init>(io.micrometer.newrelic.NewRelicConfig,java.lang.String,int)> ==> <java.net.InetSocketAddress: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r11.<java.net.Proxy: void <init>(java.net.Proxy$Type,java.net.SocketAddress)>($r8, $r10) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: void <init>(io.micrometer.newrelic.NewRelicConfig,java.lang.String,int)> ==> <java.net.Proxy: void <init>(java.net.Proxy$Type,java.net.SocketAddress)>
SPECIAL edge: specialinvoke $r12.<io.micrometer.core.ipc.http.HttpUrlConnectionSender: void <init>(java.time.Duration,java.time.Duration,java.net.Proxy)>($r3, $r4, $r11) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: void <init>(io.micrometer.newrelic.NewRelicConfig,java.lang.String,int)> ==> <io.micrometer.core.ipc.http.HttpUrlConnectionSender: void <init>(java.time.Duration,java.time.Duration,java.net.Proxy)>
SPECIAL edge: specialinvoke $r13.<io.micrometer.newrelic.NewRelicNamingConvention: void <init>()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: void <init>(io.micrometer.newrelic.NewRelicConfig,java.lang.String,int)> ==> <io.micrometer.newrelic.NewRelicNamingConvention: void <init>()>
SPECIAL edge: specialinvoke r0.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider: void <init>(io.micrometer.newrelic.NewRelicConfig,io.micrometer.core.ipc.http.HttpSender,io.micrometer.core.instrument.config.NamingConvention)>(r1, $r14, $r13) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: void <init>(io.micrometer.newrelic.NewRelicConfig,java.lang.String,int)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: void <init>(io.micrometer.newrelic.NewRelicConfig,io.micrometer.core.ipc.http.HttpSender,io.micrometer.core.instrument.config.NamingConvention)>
SPECIAL edge: specialinvoke $r3.<io.micrometer.newrelic.NewRelicNamingConvention: void <init>()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: void <init>(io.micrometer.newrelic.NewRelicConfig,io.micrometer.core.ipc.http.HttpSender)> ==> <io.micrometer.newrelic.NewRelicNamingConvention: void <init>()>
SPECIAL edge: specialinvoke r0.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider: void <init>(io.micrometer.newrelic.NewRelicConfig,io.micrometer.core.ipc.http.HttpSender,io.micrometer.core.instrument.config.NamingConvention)>(r1, r2, $r3) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: void <init>(io.micrometer.newrelic.NewRelicConfig,io.micrometer.core.ipc.http.HttpSender)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: void <init>(io.micrometer.newrelic.NewRelicConfig,io.micrometer.core.ipc.http.HttpSender,io.micrometer.core.instrument.config.NamingConvention)>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: void publish(io.micrometer.newrelic.NewRelicMeterRegistry)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
VIRTUAL edge: virtualinvoke r1.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider: void sendEvents(java.util.stream.Stream)>($r9) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: void publish(io.micrometer.newrelic.NewRelicMeterRegistry)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: void sendEvents(java.util.stream.Stream)>
STATIC edge: $r9 = staticinvoke <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$lambda_sendEvents_2__28: java.util.function.Consumer bootstrap$(java.util.concurrent.atomic.AtomicInteger)>($r0) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: void sendEvents(java.util.stream.Stream)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$lambda_sendEvents_2__28: java.util.function.Consumer bootstrap$(java.util.concurrent.atomic.AtomicInteger)>
STATIC edge: $r18 = staticinvoke <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$lambda_sendEvents_4__34: java.util.function.Consumer bootstrap$(io.micrometer.newrelic.NewRelicInsightsApiClientProvider)>(r1) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: void sendEvents(java.util.stream.Stream)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$lambda_sendEvents_4__34: java.util.function.Consumer bootstrap$(io.micrometer.newrelic.NewRelicInsightsApiClientProvider)>
STATIC edge: $r16 = staticinvoke <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$lambda_sendEvents_3__29: java.util.function.Consumer bootstrap$(io.micrometer.newrelic.NewRelicInsightsApiClientProvider,java.util.concurrent.atomic.AtomicInteger)>(r1, $r0) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: void sendEvents(java.util.stream.Stream)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$lambda_sendEvents_3__29: java.util.function.Consumer bootstrap$(io.micrometer.newrelic.NewRelicInsightsApiClientProvider,java.util.concurrent.atomic.AtomicInteger)>
STATIC edge: $r11 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector joining(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>(",", "[", "]") in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: void sendEvents(java.util.stream.Stream)> ==> <java.util.stream.Collectors: java.util.stream.Collector joining(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>
SPECIAL edge: specialinvoke $r5.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider,java.lang.String,java.lang.Object,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$1)>(r2, "activeTasks", $r6, null) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeLongTaskTimer(io.micrometer.core.instrument.LongTaskTimer)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider,java.lang.String,java.lang.Object,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$1)>
SPECIAL edge: specialinvoke $r7.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider,java.lang.String,java.lang.Object,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$1)>(r2, "duration", $r8, null) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeLongTaskTimer(io.micrometer.core.instrument.LongTaskTimer)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider,java.lang.String,java.lang.Object,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$1)>
VIRTUAL edge: $r10 = virtualinvoke r1.<java.util.concurrent.TimeUnit: java.lang.String name()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeLongTaskTimer(io.micrometer.core.instrument.LongTaskTimer)> ==> <java.lang.Enum: java.lang.String name()>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.String: java.lang.String toLowerCase()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeLongTaskTimer(io.micrometer.core.instrument.LongTaskTimer)> ==> <java.lang.String: java.lang.String toLowerCase()>
SPECIAL edge: specialinvoke $r9.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider,java.lang.String,java.lang.Object,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$1)>(r2, "timeUnit", $r11, null) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeLongTaskTimer(io.micrometer.core.instrument.LongTaskTimer)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider,java.lang.String,java.lang.Object,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$1)>
SPECIAL edge: $r12 = specialinvoke r2.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String event(io.micrometer.core.instrument.Meter$Id,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute[])>($r3, $r4) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeLongTaskTimer(io.micrometer.core.instrument.LongTaskTimer)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String event(io.micrometer.core.instrument.Meter$Id,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute[])>
STATIC edge: $r6 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r4, $i1) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String event(io.micrometer.core.instrument.Meter$Id,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute[])> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
STATIC edge: $r3 = staticinvoke <io.micrometer.core.instrument.Tags: io.micrometer.core.instrument.Tags empty()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String event(io.micrometer.core.instrument.Meter$Id,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute[])> ==> <io.micrometer.core.instrument.Tags: io.micrometer.core.instrument.Tags empty()>
STATIC edge: $r14 = staticinvoke <io.micrometer.core.instrument.Tags: io.micrometer.core.instrument.Tags empty()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String event(io.micrometer.core.instrument.Meter$Id,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute[])> ==> <io.micrometer.core.instrument.Tags: io.micrometer.core.instrument.Tags empty()>
SPECIAL edge: specialinvoke $r5.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider,java.lang.String,java.lang.Object,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$1)>(r2, "throughput", $r6, null) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeFunctionCounter(io.micrometer.core.instrument.FunctionCounter)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider,java.lang.String,java.lang.Object,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$1)>
SPECIAL edge: $r7 = specialinvoke r2.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String event(io.micrometer.core.instrument.Meter$Id,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute[])>($r3, $r4) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeFunctionCounter(io.micrometer.core.instrument.FunctionCounter)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String event(io.micrometer.core.instrument.Meter$Id,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute[])>
SPECIAL edge: specialinvoke $r4.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider,java.lang.String,java.lang.Object,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$1)>(r0, "throughput", $r5, null) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeCounter(io.micrometer.core.instrument.Counter)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider,java.lang.String,java.lang.Object,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$1)>
SPECIAL edge: $r6 = specialinvoke r0.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String event(io.micrometer.core.instrument.Meter$Id,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute[])>($r2, $r3) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeCounter(io.micrometer.core.instrument.Counter)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String event(io.micrometer.core.instrument.Meter$Id,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute[])>
SPECIAL edge: specialinvoke $r5.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider,java.lang.String,java.lang.Object,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$1)>(r2, "value", $r6, null) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeGauge(io.micrometer.core.instrument.Gauge)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider,java.lang.String,java.lang.Object,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$1)>
SPECIAL edge: $r7 = specialinvoke r2.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String event(io.micrometer.core.instrument.Meter$Id,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute[])>($r3, $r4) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeGauge(io.micrometer.core.instrument.Gauge)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String event(io.micrometer.core.instrument.Meter$Id,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute[])>
SPECIAL edge: specialinvoke $r5.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider,java.lang.String,java.lang.Object,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$1)>(r2, "value", $r6, null) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeTimeGauge(io.micrometer.core.instrument.TimeGauge)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider,java.lang.String,java.lang.Object,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$1)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.util.concurrent.TimeUnit: java.lang.String name()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeTimeGauge(io.micrometer.core.instrument.TimeGauge)> ==> <java.lang.Enum: java.lang.String name()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.String: java.lang.String toLowerCase()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeTimeGauge(io.micrometer.core.instrument.TimeGauge)> ==> <java.lang.String: java.lang.String toLowerCase()>
SPECIAL edge: specialinvoke $r7.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider,java.lang.String,java.lang.Object,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$1)>(r2, "timeUnit", $r10, null) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeTimeGauge(io.micrometer.core.instrument.TimeGauge)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider,java.lang.String,java.lang.Object,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$1)>
SPECIAL edge: $r11 = specialinvoke r2.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String event(io.micrometer.core.instrument.Meter$Id,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute[])>($r3, $r4) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeTimeGauge(io.micrometer.core.instrument.TimeGauge)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String event(io.micrometer.core.instrument.Meter$Id,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute[])>
SPECIAL edge: specialinvoke $r4.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider,java.lang.String,java.lang.Object,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$1)>(r0, "count", $r5, null) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeSummary(io.micrometer.core.instrument.DistributionSummary)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider,java.lang.String,java.lang.Object,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$1)>
SPECIAL edge: specialinvoke $r6.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider,java.lang.String,java.lang.Object,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$1)>(r0, "avg", $r7, null) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeSummary(io.micrometer.core.instrument.DistributionSummary)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider,java.lang.String,java.lang.Object,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$1)>
SPECIAL edge: specialinvoke $r8.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider,java.lang.String,java.lang.Object,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$1)>(r0, "total", $r9, null) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeSummary(io.micrometer.core.instrument.DistributionSummary)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider,java.lang.String,java.lang.Object,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$1)>
SPECIAL edge: specialinvoke $r10.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider,java.lang.String,java.lang.Object,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$1)>(r0, "max", $r11, null) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeSummary(io.micrometer.core.instrument.DistributionSummary)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider,java.lang.String,java.lang.Object,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$1)>
SPECIAL edge: $r12 = specialinvoke r0.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String event(io.micrometer.core.instrument.Meter$Id,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute[])>($r2, $r3) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeSummary(io.micrometer.core.instrument.DistributionSummary)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String event(io.micrometer.core.instrument.Meter$Id,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute[])>
SPECIAL edge: specialinvoke $r5.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider,java.lang.String,java.lang.Object,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$1)>(r2, "count", $r6, null) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeTimer(io.micrometer.core.instrument.Timer)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider,java.lang.String,java.lang.Object,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$1)>
SPECIAL edge: specialinvoke $r7.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider,java.lang.String,java.lang.Object,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$1)>(r2, "avg", $r8, null) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeTimer(io.micrometer.core.instrument.Timer)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider,java.lang.String,java.lang.Object,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$1)>
SPECIAL edge: specialinvoke $r9.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider,java.lang.String,java.lang.Object,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$1)>(r2, "totalTime", $r10, null) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeTimer(io.micrometer.core.instrument.Timer)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider,java.lang.String,java.lang.Object,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$1)>
SPECIAL edge: specialinvoke $r11.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider,java.lang.String,java.lang.Object,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$1)>(r2, "max", $r12, null) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeTimer(io.micrometer.core.instrument.Timer)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider,java.lang.String,java.lang.Object,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$1)>
VIRTUAL edge: $r14 = virtualinvoke r1.<java.util.concurrent.TimeUnit: java.lang.String name()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeTimer(io.micrometer.core.instrument.Timer)> ==> <java.lang.Enum: java.lang.String name()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.String: java.lang.String toLowerCase()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeTimer(io.micrometer.core.instrument.Timer)> ==> <java.lang.String: java.lang.String toLowerCase()>
SPECIAL edge: specialinvoke $r13.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider,java.lang.String,java.lang.Object,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$1)>(r2, "timeUnit", $r15, null) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeTimer(io.micrometer.core.instrument.Timer)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider,java.lang.String,java.lang.Object,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$1)>
SPECIAL edge: $r16 = specialinvoke r2.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String event(io.micrometer.core.instrument.Meter$Id,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute[])>($r3, $r4) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeTimer(io.micrometer.core.instrument.Timer)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String event(io.micrometer.core.instrument.Meter$Id,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute[])>
SPECIAL edge: specialinvoke $r5.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider,java.lang.String,java.lang.Object,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$1)>(r2, "count", $r6, null) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeFunctionTimer(io.micrometer.core.instrument.FunctionTimer)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider,java.lang.String,java.lang.Object,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$1)>
SPECIAL edge: specialinvoke $r7.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider,java.lang.String,java.lang.Object,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$1)>(r2, "avg", $r8, null) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeFunctionTimer(io.micrometer.core.instrument.FunctionTimer)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider,java.lang.String,java.lang.Object,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$1)>
SPECIAL edge: specialinvoke $r9.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider,java.lang.String,java.lang.Object,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$1)>(r2, "totalTime", $r10, null) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeFunctionTimer(io.micrometer.core.instrument.FunctionTimer)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider,java.lang.String,java.lang.Object,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$1)>
VIRTUAL edge: $r12 = virtualinvoke r1.<java.util.concurrent.TimeUnit: java.lang.String name()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeFunctionTimer(io.micrometer.core.instrument.FunctionTimer)> ==> <java.lang.Enum: java.lang.String name()>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.String: java.lang.String toLowerCase()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeFunctionTimer(io.micrometer.core.instrument.FunctionTimer)> ==> <java.lang.String: java.lang.String toLowerCase()>
SPECIAL edge: specialinvoke $r11.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider,java.lang.String,java.lang.Object,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$1)>(r2, "timeUnit", $r13, null) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeFunctionTimer(io.micrometer.core.instrument.FunctionTimer)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider,java.lang.String,java.lang.Object,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$1)>
SPECIAL edge: $r14 = specialinvoke r2.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String event(io.micrometer.core.instrument.Meter$Id,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute[])>($r3, $r4) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeFunctionTimer(io.micrometer.core.instrument.FunctionTimer)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String event(io.micrometer.core.instrument.Meter$Id,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute[])>
SPECIAL edge: specialinvoke $r0.<java.util.HashMap: void <init>()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeMeter(io.micrometer.core.instrument.Meter)> ==> <java.util.HashMap: void <init>()>
INTERFACE edge: interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r17, $r18) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeMeter(io.micrometer.core.instrument.Meter)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r0.<java.util.Map: boolean isEmpty()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeMeter(io.micrometer.core.instrument.Meter)> ==> <java.util.HashMap: boolean isEmpty()>
INTERFACE edge: $r7 = interfaceinvoke $r0.<java.util.Map: java.util.Collection values()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeMeter(io.micrometer.core.instrument.Meter)> ==> <java.util.HashMap: java.util.Collection values()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeMeter(io.micrometer.core.instrument.Meter)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke $r18.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider,java.lang.String,java.lang.Object,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$1)>(r5, r17, $r19, null) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeMeter(io.micrometer.core.instrument.Meter)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider,java.lang.String,java.lang.Object,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$1)>
INTERFACE edge: $r9 = interfaceinvoke $r7.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r8) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeMeter(io.micrometer.core.instrument.Meter)> ==> <java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>
SPECIAL edge: $r11 = specialinvoke r5.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String event(io.micrometer.core.instrument.Meter$Id,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute[])>($r6, $r10) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeMeter(io.micrometer.core.instrument.Meter)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String event(io.micrometer.core.instrument.Meter$Id,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute[])>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeMeter(io.micrometer.core.instrument.Meter)>(r1) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.Object writeMeter(io.micrometer.core.instrument.Meter)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeMeter(io.micrometer.core.instrument.Meter)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeFunctionCounter(io.micrometer.core.instrument.FunctionCounter)>(r1) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.Object writeFunctionCounter(io.micrometer.core.instrument.FunctionCounter)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeFunctionCounter(io.micrometer.core.instrument.FunctionCounter)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeCounter(io.micrometer.core.instrument.Counter)>(r1) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.Object writeCounter(io.micrometer.core.instrument.Counter)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeCounter(io.micrometer.core.instrument.Counter)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeGauge(io.micrometer.core.instrument.Gauge)>(r1) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.Object writeGauge(io.micrometer.core.instrument.Gauge)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeGauge(io.micrometer.core.instrument.Gauge)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeTimeGauge(io.micrometer.core.instrument.TimeGauge)>(r1) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.Object writeTimeGauge(io.micrometer.core.instrument.TimeGauge)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeTimeGauge(io.micrometer.core.instrument.TimeGauge)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeLongTaskTimer(io.micrometer.core.instrument.LongTaskTimer)>(r1) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.Object writeLongTaskTimer(io.micrometer.core.instrument.LongTaskTimer)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeLongTaskTimer(io.micrometer.core.instrument.LongTaskTimer)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeSummary(io.micrometer.core.instrument.DistributionSummary)>(r1) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.Object writeSummary(io.micrometer.core.instrument.DistributionSummary)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeSummary(io.micrometer.core.instrument.DistributionSummary)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeTimer(io.micrometer.core.instrument.Timer)>(r1) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.Object writeTimer(io.micrometer.core.instrument.Timer)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeTimer(io.micrometer.core.instrument.Timer)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeFunctionTimer(io.micrometer.core.instrument.FunctionTimer)>(r1) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.Object writeFunctionTimer(io.micrometer.core.instrument.FunctionTimer)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeFunctionTimer(io.micrometer.core.instrument.FunctionTimer)>
VIRTUAL edge: virtualinvoke r0.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: void lambda$sendEvents$2(java.util.concurrent.atomic.AtomicInteger,java.lang.String)> ==> <java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>
VIRTUAL edge: $r1 = virtualinvoke r0.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute: java.lang.Object getValue()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String lambda$event$1(io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute: java.lang.Object getValue()>
VIRTUAL edge: $r16 = virtualinvoke r0.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute: java.lang.String getName()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String lambda$event$1(io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute: java.lang.String getName()>
VIRTUAL edge: $r19 = virtualinvoke r0.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute: java.lang.Object getValue()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String lambda$event$1(io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute: java.lang.Object getValue()>
VIRTUAL edge: $r4 = virtualinvoke r0.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute: java.lang.String getName()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String lambda$event$1(io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute: java.lang.String getName()>
VIRTUAL edge: $r9 = virtualinvoke r0.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute: java.lang.Object getValue()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String lambda$event$1(io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute: java.lang.Object getValue()>
SPECIAL edge: specialinvoke $r14.<java.lang.StringBuilder: void <init>()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String lambda$event$1(io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",\"") in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String lambda$event$1(io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String lambda$event$1(io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\":") in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String lambda$event$1(io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $d0 = virtualinvoke $r20.<java.lang.Number: double doubleValue()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String lambda$event$1(io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute)> ==> <java.lang.Integer: double doubleValue()>
VIRTUAL edge: $d0 = virtualinvoke $r20.<java.lang.Number: double doubleValue()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String lambda$event$1(io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute)> ==> <java.lang.Long: double doubleValue()>
VIRTUAL edge: $d0 = virtualinvoke $r20.<java.lang.Number: double doubleValue()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String lambda$event$1(io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute)> ==> <java.lang.Double: double doubleValue()>
VIRTUAL edge: $d0 = virtualinvoke $r20.<java.lang.Number: double doubleValue()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String lambda$event$1(io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute)> ==> <java.lang.Short: double doubleValue()>
VIRTUAL edge: $d0 = virtualinvoke $r20.<java.lang.Number: double doubleValue()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String lambda$event$1(io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute)> ==> <java.util.concurrent.atomic.AtomicInteger: double doubleValue()>
VIRTUAL edge: $d0 = virtualinvoke $r20.<java.lang.Number: double doubleValue()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String lambda$event$1(io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute)> ==> <java.lang.Byte: double doubleValue()>
VIRTUAL edge: $d0 = virtualinvoke $r20.<java.lang.Number: double doubleValue()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String lambda$event$1(io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute)> ==> <java.lang.Float: double doubleValue()>
VIRTUAL edge: $r22 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String lambda$event$1(io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String lambda$event$1(io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String lambda$event$1(io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",\"") in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String lambda$event$1(io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String lambda$event$1(io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\":\"") in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String lambda$event$1(io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String lambda$event$1(io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute)> ==> <java.lang.Float: java.lang.String toString()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String lambda$event$1(io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute)> ==> <java.lang.Throwable: java.lang.String toString()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String lambda$event$1(io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute)> ==> <java.lang.Object: java.lang.String toString()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String lambda$event$1(io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute)> ==> <java.lang.ThreadGroup: java.lang.String toString()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String lambda$event$1(io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute)> ==> <java.lang.Integer: java.lang.String toString()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String lambda$event$1(io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute)> ==> <java.net.InetAddress: java.lang.String toString()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String lambda$event$1(io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute)> ==> <java.lang.Character: java.lang.String toString()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String lambda$event$1(io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute)> ==> <java.net.Proxy: java.lang.String toString()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String lambda$event$1(io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute)> ==> <java.lang.Long: java.lang.String toString()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String lambda$event$1(io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute)> ==> <java.lang.Thread: java.lang.String toString()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String lambda$event$1(io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute)> ==> <java.net.NetworkInterface: java.lang.String toString()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String lambda$event$1(io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute)> ==> <java.nio.ByteOrder: java.lang.String toString()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String lambda$event$1(io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String lambda$event$1(io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute)> ==> <java.lang.Double: java.lang.String toString()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String lambda$event$1(io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute)> ==> <java.lang.reflect.Constructor: java.lang.String toString()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String lambda$event$1(io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute)> ==> <java.util.AbstractCollection: java.lang.String toString()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String lambda$event$1(io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String lambda$event$1(io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute)> ==> <java.lang.StackTraceElement: java.lang.String toString()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String lambda$event$1(io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute)> ==> <java.lang.String: java.lang.String toString()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String lambda$event$1(io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute)> ==> <java.lang.Enum: java.lang.String toString()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String lambda$event$1(io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute)> ==> <java.lang.reflect.Field: java.lang.String toString()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String lambda$event$1(io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute)> ==> <java.io.File: java.lang.String toString()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String lambda$event$1(io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute)> ==> <java.util.Date: java.lang.String toString()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String lambda$event$1(io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute)> ==> <java.net.URL: java.lang.String toString()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String lambda$event$1(io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute)> ==> <java.lang.Character$Subset: java.lang.String toString()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String lambda$event$1(io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute)> ==> <java.util.concurrent.atomic.AtomicInteger: java.lang.String toString()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String lambda$event$1(io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute)> ==> <java.util.Locale: java.lang.String toString()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String lambda$event$1(io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute)> ==> <java.lang.Short: java.lang.String toString()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String lambda$event$1(io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute)> ==> <java.net.URI: java.lang.String toString()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String lambda$event$1(io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute)> ==> <java.lang.Byte: java.lang.String toString()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String lambda$event$1(io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute)> ==> <java.lang.reflect.Method: java.lang.String toString()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String lambda$event$1(io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute)> ==> <java.net.InetSocketAddress: java.lang.String toString()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String lambda$event$1(io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute)> ==> <java.util.regex.Pattern: java.lang.String toString()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String lambda$event$1(io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute)> ==> <java.util.AbstractMap: java.lang.String toString()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String lambda$event$1(io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute)> ==> <java.security.CodeSigner: java.lang.String toString()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String lambda$event$1(io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute)> ==> <java.nio.charset.CoderResult: java.lang.String toString()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String lambda$event$1(io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute)> ==> <java.nio.charset.CodingErrorAction: java.lang.String toString()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String lambda$event$1(io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute)> ==> <java.lang.Boolean: java.lang.String toString()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String lambda$event$1(io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute)> ==> <java.lang.Package: java.lang.String toString()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String lambda$event$1(io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute)> ==> <java.lang.Class: java.lang.String toString()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String lambda$event$1(io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute)> ==> <java.security.Timestamp: java.lang.String toString()>
INTERFACE edge: $r11 = interfaceinvoke $r8.<io.micrometer.core.instrument.config.NamingConvention: java.lang.String tagValue(java.lang.String)>($r10) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String lambda$event$1(io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute)> ==> <io.micrometer.newrelic.NewRelicNamingConvention: java.lang.String tagValue(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String lambda$event$1(io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"") in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String lambda$event$1(io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String lambda$event$1(io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r3.<io.micrometer.newrelic.NewRelicNamingConvention: void <init>()>() in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void <init>(io.micrometer.newrelic.NewRelicConfig)> ==> <io.micrometer.newrelic.NewRelicNamingConvention: void <init>()>
SPECIAL edge: specialinvoke r0.<io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void <init>(io.micrometer.newrelic.NewRelicConfig,com.newrelic.api.agent.Agent,io.micrometer.core.instrument.config.NamingConvention)>(r1, $r2, $r3) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void <init>(io.micrometer.newrelic.NewRelicConfig)> ==> <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void <init>(io.micrometer.newrelic.NewRelicConfig,com.newrelic.api.agent.Agent,io.micrometer.core.instrument.config.NamingConvention)>
STATIC edge: $r1 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lio/micrometer/newrelic/NewRelicInsightsAgentClientProvider;") in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void <init>(io.micrometer.newrelic.NewRelicConfig,com.newrelic.api.agent.Agent,io.micrometer.core.instrument.config.NamingConvention)> ==> <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
SPECIAL edge: specialinvoke $r3.<io.micrometer.newrelic.NewRelicNamingConvention: void <init>()>() in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void <init>(io.micrometer.newrelic.NewRelicConfig,com.newrelic.api.agent.Agent)> ==> <io.micrometer.newrelic.NewRelicNamingConvention: void <init>()>
SPECIAL edge: specialinvoke r0.<io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void <init>(io.micrometer.newrelic.NewRelicConfig,com.newrelic.api.agent.Agent,io.micrometer.core.instrument.config.NamingConvention)>(r1, r2, $r3) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void <init>(io.micrometer.newrelic.NewRelicConfig,com.newrelic.api.agent.Agent)> ==> <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void <init>(io.micrometer.newrelic.NewRelicConfig,com.newrelic.api.agent.Agent,io.micrometer.core.instrument.config.NamingConvention)>
INTERFACE edge: r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>() in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void publish(io.micrometer.newrelic.NewRelicMeterRegistry)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
VIRTUAL edge: virtualinvoke r5.<io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void sendEvents(io.micrometer.core.instrument.Meter$Id,java.util.Map)>($r6, $r17) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void publish(io.micrometer.newrelic.NewRelicMeterRegistry)> ==> <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void sendEvents(io.micrometer.core.instrument.Meter$Id,java.util.Map)>
SPECIAL edge: specialinvoke $r0.<java.util.HashMap: void <init>()>() in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeLongTaskTimer(io.micrometer.core.instrument.LongTaskTimer)> ==> <java.util.HashMap: void <init>()>
SPECIAL edge: specialinvoke r2.<io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.Number,java.util.Map)>("activeTasks", $r4, $r0) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeLongTaskTimer(io.micrometer.core.instrument.LongTaskTimer)> ==> <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.Number,java.util.Map)>
SPECIAL edge: specialinvoke r2.<io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.Number,java.util.Map)>("duration", $r6, $r0) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeLongTaskTimer(io.micrometer.core.instrument.LongTaskTimer)> ==> <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.Number,java.util.Map)>
SPECIAL edge: specialinvoke r2.<io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.String,java.util.Map)>("timeUnit", $r9, $r0) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeLongTaskTimer(io.micrometer.core.instrument.LongTaskTimer)> ==> <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.String,java.util.Map)>
SPECIAL edge: specialinvoke r2.<io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addMeterAsAttributes(io.micrometer.core.instrument.Meter$Id,java.util.Map)>($r10, $r0) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeLongTaskTimer(io.micrometer.core.instrument.LongTaskTimer)> ==> <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addMeterAsAttributes(io.micrometer.core.instrument.Meter$Id,java.util.Map)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.util.concurrent.TimeUnit: java.lang.String name()>() in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeLongTaskTimer(io.micrometer.core.instrument.LongTaskTimer)> ==> <java.lang.Enum: java.lang.String name()>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.String: java.lang.String toLowerCase()>() in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeLongTaskTimer(io.micrometer.core.instrument.LongTaskTimer)> ==> <java.lang.String: java.lang.String toLowerCase()>
CLINIT edge: $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.Number,java.util.Map)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d3) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.Number,java.util.Map)> ==> <java.lang.Double: java.lang.Double valueOf(double)>
STATIC edge: $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.Number,java.util.Map)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $d1 = staticinvoke <java.lang.Math: double floor(double)>($d0) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.Number,java.util.Map)> ==> <java.lang.Math: double floor(double)>
CLINIT edge: $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d3) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.Number,java.util.Map)> ==> <java.lang.Double: void <clinit>()>
SPECIAL edge: $r3 = specialinvoke r0.<io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeCounterValues(io.micrometer.core.instrument.Meter$Id,double)>($r2, $d0) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeFunctionCounter(io.micrometer.core.instrument.FunctionCounter)> ==> <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeCounterValues(io.micrometer.core.instrument.Meter$Id,double)>
CLINIT edge: $z0 = staticinvoke <java.lang.Double: boolean isFinite(double)>(d0) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeCounterValues(io.micrometer.core.instrument.Meter$Id,double)> ==> <java.lang.Double: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeCounterValues(io.micrometer.core.instrument.Meter$Id,double)> ==> <java.lang.Double: java.lang.Double valueOf(double)>
STATIC edge: $r5 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>() in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeCounterValues(io.micrometer.core.instrument.Meter$Id,double)> ==> <java.util.Collections: java.util.Map emptyMap()>
STATIC edge: $z0 = staticinvoke <java.lang.Double: boolean isFinite(double)>(d0) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeCounterValues(io.micrometer.core.instrument.Meter$Id,double)> ==> <java.lang.Number: boolean isFinite(double)>
CLINIT edge: $r5 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>() in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeCounterValues(io.micrometer.core.instrument.Meter$Id,double)> ==> <java.util.Collections: void <clinit>()>
SPECIAL edge: $r3 = specialinvoke r0.<io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeCounterValues(io.micrometer.core.instrument.Meter$Id,double)>($r2, $d0) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeCounter(io.micrometer.core.instrument.Counter)> ==> <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeCounterValues(io.micrometer.core.instrument.Meter$Id,double)>
SPECIAL edge: specialinvoke $r1.<java.util.HashMap: void <init>()>() in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeGauge(io.micrometer.core.instrument.Gauge)> ==> <java.util.HashMap: void <init>()>
SPECIAL edge: specialinvoke r3.<io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.Number,java.util.Map)>("value", $r4, $r1) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeGauge(io.micrometer.core.instrument.Gauge)> ==> <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.Number,java.util.Map)>
SPECIAL edge: specialinvoke r3.<io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addMeterAsAttributes(io.micrometer.core.instrument.Meter$Id,java.util.Map)>($r5, $r1) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeGauge(io.micrometer.core.instrument.Gauge)> ==> <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addMeterAsAttributes(io.micrometer.core.instrument.Meter$Id,java.util.Map)>
SPECIAL edge: specialinvoke $r1.<java.util.HashMap: void <init>()>() in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeTimeGauge(io.micrometer.core.instrument.TimeGauge)> ==> <java.util.HashMap: void <init>()>
SPECIAL edge: specialinvoke r3.<io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.Number,java.util.Map)>("value", $r4, $r1) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeTimeGauge(io.micrometer.core.instrument.TimeGauge)> ==> <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.Number,java.util.Map)>
SPECIAL edge: specialinvoke r3.<io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.String,java.util.Map)>("timeUnit", $r7, $r1) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeTimeGauge(io.micrometer.core.instrument.TimeGauge)> ==> <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.String,java.util.Map)>
SPECIAL edge: specialinvoke r3.<io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addMeterAsAttributes(io.micrometer.core.instrument.Meter$Id,java.util.Map)>($r8, $r1) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeTimeGauge(io.micrometer.core.instrument.TimeGauge)> ==> <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addMeterAsAttributes(io.micrometer.core.instrument.Meter$Id,java.util.Map)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.util.concurrent.TimeUnit: java.lang.String name()>() in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeTimeGauge(io.micrometer.core.instrument.TimeGauge)> ==> <java.lang.Enum: java.lang.String name()>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String toLowerCase()>() in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeTimeGauge(io.micrometer.core.instrument.TimeGauge)> ==> <java.lang.String: java.lang.String toLowerCase()>
SPECIAL edge: specialinvoke $r0.<java.util.HashMap: void <init>()>() in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeSummary(io.micrometer.core.instrument.DistributionSummary)> ==> <java.util.HashMap: void <init>()>
SPECIAL edge: specialinvoke r2.<io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.Number,java.util.Map)>("count", $r4, $r0) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeSummary(io.micrometer.core.instrument.DistributionSummary)> ==> <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.Number,java.util.Map)>
SPECIAL edge: specialinvoke r2.<io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.Number,java.util.Map)>("avg", $r5, $r0) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeSummary(io.micrometer.core.instrument.DistributionSummary)> ==> <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.Number,java.util.Map)>
SPECIAL edge: specialinvoke r2.<io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.Number,java.util.Map)>("total", $r6, $r0) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeSummary(io.micrometer.core.instrument.DistributionSummary)> ==> <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.Number,java.util.Map)>
SPECIAL edge: specialinvoke r2.<io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.Number,java.util.Map)>("max", $r7, $r0) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeSummary(io.micrometer.core.instrument.DistributionSummary)> ==> <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.Number,java.util.Map)>
SPECIAL edge: specialinvoke r2.<io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addMeterAsAttributes(io.micrometer.core.instrument.Meter$Id,java.util.Map)>($r8, $r0) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeSummary(io.micrometer.core.instrument.DistributionSummary)> ==> <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addMeterAsAttributes(io.micrometer.core.instrument.Meter$Id,java.util.Map)>
SPECIAL edge: specialinvoke $r0.<java.util.HashMap: void <init>()>() in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeTimer(io.micrometer.core.instrument.Timer)> ==> <java.util.HashMap: void <init>()>
SPECIAL edge: specialinvoke r4.<io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.Number,java.util.Map)>("count", $r5, $r0) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeTimer(io.micrometer.core.instrument.Timer)> ==> <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.Number,java.util.Map)>
SPECIAL edge: specialinvoke r4.<io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.Number,java.util.Map)>("avg", $r6, $r0) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeTimer(io.micrometer.core.instrument.Timer)> ==> <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.Number,java.util.Map)>
SPECIAL edge: specialinvoke r4.<io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.Number,java.util.Map)>("totalTime", $r7, $r0) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeTimer(io.micrometer.core.instrument.Timer)> ==> <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.Number,java.util.Map)>
SPECIAL edge: specialinvoke r4.<io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.Number,java.util.Map)>("max", $r8, $r0) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeTimer(io.micrometer.core.instrument.Timer)> ==> <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.Number,java.util.Map)>
SPECIAL edge: specialinvoke r4.<io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.String,java.util.Map)>("timeUnit", $r10, $r0) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeTimer(io.micrometer.core.instrument.Timer)> ==> <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.String,java.util.Map)>
SPECIAL edge: specialinvoke r4.<io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addMeterAsAttributes(io.micrometer.core.instrument.Meter$Id,java.util.Map)>($r11, $r0) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeTimer(io.micrometer.core.instrument.Timer)> ==> <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addMeterAsAttributes(io.micrometer.core.instrument.Meter$Id,java.util.Map)>
VIRTUAL edge: $r9 = virtualinvoke r3.<java.util.concurrent.TimeUnit: java.lang.String name()>() in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeTimer(io.micrometer.core.instrument.Timer)> ==> <java.lang.Enum: java.lang.String name()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.String: java.lang.String toLowerCase()>() in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeTimer(io.micrometer.core.instrument.Timer)> ==> <java.lang.String: java.lang.String toLowerCase()>
SPECIAL edge: specialinvoke $r0.<java.util.HashMap: void <init>()>() in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeFunctionTimer(io.micrometer.core.instrument.FunctionTimer)> ==> <java.util.HashMap: void <init>()>
SPECIAL edge: specialinvoke r4.<io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.Number,java.util.Map)>("count", $r5, $r0) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeFunctionTimer(io.micrometer.core.instrument.FunctionTimer)> ==> <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.Number,java.util.Map)>
SPECIAL edge: specialinvoke r4.<io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.Number,java.util.Map)>("avg", $r6, $r0) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeFunctionTimer(io.micrometer.core.instrument.FunctionTimer)> ==> <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.Number,java.util.Map)>
SPECIAL edge: specialinvoke r4.<io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.Number,java.util.Map)>("totalTime", $r7, $r0) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeFunctionTimer(io.micrometer.core.instrument.FunctionTimer)> ==> <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.Number,java.util.Map)>
SPECIAL edge: specialinvoke r4.<io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.String,java.util.Map)>("timeUnit", $r9, $r0) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeFunctionTimer(io.micrometer.core.instrument.FunctionTimer)> ==> <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.String,java.util.Map)>
SPECIAL edge: specialinvoke r4.<io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addMeterAsAttributes(io.micrometer.core.instrument.Meter$Id,java.util.Map)>($r10, $r0) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeFunctionTimer(io.micrometer.core.instrument.FunctionTimer)> ==> <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addMeterAsAttributes(io.micrometer.core.instrument.Meter$Id,java.util.Map)>
VIRTUAL edge: $r8 = virtualinvoke r3.<java.util.concurrent.TimeUnit: java.lang.String name()>() in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeFunctionTimer(io.micrometer.core.instrument.FunctionTimer)> ==> <java.lang.Enum: java.lang.String name()>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.String: java.lang.String toLowerCase()>() in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeFunctionTimer(io.micrometer.core.instrument.FunctionTimer)> ==> <java.lang.String: java.lang.String toLowerCase()>
SPECIAL edge: specialinvoke $r0.<java.util.HashMap: void <init>()>() in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeMeter(io.micrometer.core.instrument.Meter)> ==> <java.util.HashMap: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke $r0.<java.util.Map: boolean isEmpty()>() in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeMeter(io.micrometer.core.instrument.Meter)> ==> <java.util.HashMap: boolean isEmpty()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeMeter(io.micrometer.core.instrument.Meter)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke r5.<io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.Number,java.util.Map)>($r10, $r11, $r0) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeMeter(io.micrometer.core.instrument.Meter)> ==> <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.Number,java.util.Map)>
SPECIAL edge: specialinvoke r5.<io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addMeterAsAttributes(io.micrometer.core.instrument.Meter$Id,java.util.Map)>($r6, $r0) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeMeter(io.micrometer.core.instrument.Meter)> ==> <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addMeterAsAttributes(io.micrometer.core.instrument.Meter$Id,java.util.Map)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeMeter(io.micrometer.core.instrument.Meter)>(r1) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.lang.Object writeMeter(io.micrometer.core.instrument.Meter)> ==> <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeMeter(io.micrometer.core.instrument.Meter)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeFunctionCounter(io.micrometer.core.instrument.FunctionCounter)>(r1) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.lang.Object writeFunctionCounter(io.micrometer.core.instrument.FunctionCounter)> ==> <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeFunctionCounter(io.micrometer.core.instrument.FunctionCounter)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeCounter(io.micrometer.core.instrument.Counter)>(r1) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.lang.Object writeCounter(io.micrometer.core.instrument.Counter)> ==> <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeCounter(io.micrometer.core.instrument.Counter)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeGauge(io.micrometer.core.instrument.Gauge)>(r1) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.lang.Object writeGauge(io.micrometer.core.instrument.Gauge)> ==> <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeGauge(io.micrometer.core.instrument.Gauge)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeTimeGauge(io.micrometer.core.instrument.TimeGauge)>(r1) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.lang.Object writeTimeGauge(io.micrometer.core.instrument.TimeGauge)> ==> <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeTimeGauge(io.micrometer.core.instrument.TimeGauge)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeLongTaskTimer(io.micrometer.core.instrument.LongTaskTimer)>(r1) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.lang.Object writeLongTaskTimer(io.micrometer.core.instrument.LongTaskTimer)> ==> <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeLongTaskTimer(io.micrometer.core.instrument.LongTaskTimer)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeSummary(io.micrometer.core.instrument.DistributionSummary)>(r1) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.lang.Object writeSummary(io.micrometer.core.instrument.DistributionSummary)> ==> <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeSummary(io.micrometer.core.instrument.DistributionSummary)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeTimer(io.micrometer.core.instrument.Timer)>(r1) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.lang.Object writeTimer(io.micrometer.core.instrument.Timer)> ==> <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeTimer(io.micrometer.core.instrument.Timer)>
VIRTUAL edge: $r2 = virtualinvoke r0.<io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeFunctionTimer(io.micrometer.core.instrument.FunctionTimer)>(r1) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.lang.Object writeFunctionTimer(io.micrometer.core.instrument.FunctionTimer)> ==> <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeFunctionTimer(io.micrometer.core.instrument.FunctionTimer)>
SPECIAL edge: specialinvoke r0.<io.micrometer.newrelic.NewRelicNamingConvention: void <init>(io.micrometer.core.instrument.config.NamingConvention)>($r1) in <io.micrometer.newrelic.NewRelicNamingConvention: void <init>()> ==> <io.micrometer.newrelic.NewRelicNamingConvention: void <init>(io.micrometer.core.instrument.config.NamingConvention)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.micrometer.newrelic.NewRelicNamingConvention: void <init>(io.micrometer.core.instrument.config.NamingConvention)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $r5 = interfaceinvoke $r4.<io.micrometer.core.instrument.config.NamingConvention: java.lang.String name(java.lang.String,io.micrometer.core.instrument.Meter$Type,java.lang.String)>(r1, r2, r3) in <io.micrometer.newrelic.NewRelicNamingConvention: java.lang.String name(java.lang.String,io.micrometer.core.instrument.Meter$Type,java.lang.String)> ==> <io.micrometer.newrelic.NewRelicNamingConvention: java.lang.String name(java.lang.String,io.micrometer.core.instrument.Meter$Type,java.lang.String)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<io.micrometer.core.instrument.config.NamingConvention: java.lang.String tagKey(java.lang.String)>(r1) in <io.micrometer.newrelic.NewRelicNamingConvention: java.lang.String tagKey(java.lang.String)> ==> <io.micrometer.newrelic.NewRelicNamingConvention: java.lang.String tagKey(java.lang.String)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<io.micrometer.core.instrument.config.NamingConvention: java.lang.String tagValue(java.lang.String)>(r1) in <io.micrometer.newrelic.NewRelicNamingConvention: java.lang.String tagValue(java.lang.String)> ==> <io.micrometer.newrelic.NewRelicNamingConvention: java.lang.String tagValue(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<io.micrometer.newrelic.NewRelicConfig$lambda_apiKey_0__1: void <init>(io.micrometer.newrelic.NewRelicConfig)>($r0) in <io.micrometer.newrelic.NewRelicConfig$lambda_apiKey_0__1: java.util.function.Predicate bootstrap$(io.micrometer.newrelic.NewRelicConfig)> ==> <io.micrometer.newrelic.NewRelicConfig$lambda_apiKey_0__1: void <init>(io.micrometer.newrelic.NewRelicConfig)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.micrometer.newrelic.NewRelicConfig$lambda_apiKey_0__1: void <init>(io.micrometer.newrelic.NewRelicConfig)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<io.micrometer.newrelic.NewRelicConfig$lambda_accountId_1__2: void <init>(io.micrometer.newrelic.NewRelicConfig)>($r0) in <io.micrometer.newrelic.NewRelicConfig$lambda_accountId_1__2: java.util.function.Predicate bootstrap$(io.micrometer.newrelic.NewRelicConfig)> ==> <io.micrometer.newrelic.NewRelicConfig$lambda_accountId_1__2: void <init>(io.micrometer.newrelic.NewRelicConfig)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.micrometer.newrelic.NewRelicConfig$lambda_accountId_1__2: void <init>(io.micrometer.newrelic.NewRelicConfig)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<io.micrometer.newrelic.NewRelicConfig$lambda_validate_2__3: void <init>()>() in <io.micrometer.newrelic.NewRelicConfig$lambda_validate_2__3: java.util.function.Function bootstrap$()> ==> <io.micrometer.newrelic.NewRelicConfig$lambda_validate_2__3: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.micrometer.newrelic.NewRelicConfig$lambda_validate_2__3: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<io.micrometer.newrelic.NewRelicConfig$lambda_validateForInsightsApi_5__4: void <init>(io.micrometer.newrelic.NewRelicConfig)>($r0) in <io.micrometer.newrelic.NewRelicConfig$lambda_validateForInsightsApi_5__4: java.util.function.Function bootstrap$(io.micrometer.newrelic.NewRelicConfig)> ==> <io.micrometer.newrelic.NewRelicConfig$lambda_validateForInsightsApi_5__4: void <init>(io.micrometer.newrelic.NewRelicConfig)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.micrometer.newrelic.NewRelicConfig$lambda_validateForInsightsApi_5__4: void <init>(io.micrometer.newrelic.NewRelicConfig)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<io.micrometer.newrelic.NewRelicConfig$isBlank__5: void <init>()>() in <io.micrometer.newrelic.NewRelicConfig$isBlank__5: java.util.function.Predicate bootstrap$()> ==> <io.micrometer.newrelic.NewRelicConfig$isBlank__5: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.micrometer.newrelic.NewRelicConfig$isBlank__5: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<io.micrometer.newrelic.NewRelicConfig$isBlank__6: void <init>()>() in <io.micrometer.newrelic.NewRelicConfig$isBlank__6: java.util.function.Predicate bootstrap$()> ==> <io.micrometer.newrelic.NewRelicConfig$isBlank__6: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.micrometer.newrelic.NewRelicConfig$isBlank__6: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<io.micrometer.newrelic.NewRelicConfig$isBlank__7: void <init>()>() in <io.micrometer.newrelic.NewRelicConfig$isBlank__7: java.util.function.Predicate bootstrap$()> ==> <io.micrometer.newrelic.NewRelicConfig$isBlank__7: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.micrometer.newrelic.NewRelicConfig$isBlank__7: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<io.micrometer.newrelic.NewRelicConfig$eventType__8: void <init>()>() in <io.micrometer.newrelic.NewRelicConfig$eventType__8: java.util.function.Function bootstrap$()> ==> <io.micrometer.newrelic.NewRelicConfig$eventType__8: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.micrometer.newrelic.NewRelicConfig$eventType__8: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<io.micrometer.newrelic.NewRelicConfig$lambda_validate_3__9: void <init>(io.micrometer.newrelic.NewRelicConfig)>($r0) in <io.micrometer.newrelic.NewRelicConfig$lambda_validate_3__9: java.util.function.Predicate bootstrap$(io.micrometer.newrelic.NewRelicConfig)> ==> <io.micrometer.newrelic.NewRelicConfig$lambda_validate_3__9: void <init>(io.micrometer.newrelic.NewRelicConfig)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.micrometer.newrelic.NewRelicConfig$lambda_validate_3__9: void <init>(io.micrometer.newrelic.NewRelicConfig)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<io.micrometer.newrelic.NewRelicConfig$uri__10: void <init>()>() in <io.micrometer.newrelic.NewRelicConfig$uri__10: java.util.function.Function bootstrap$()> ==> <io.micrometer.newrelic.NewRelicConfig$uri__10: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.micrometer.newrelic.NewRelicConfig$uri__10: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<io.micrometer.newrelic.NewRelicConfig$lambda_validateForInsightsApi_6__11: void <init>()>() in <io.micrometer.newrelic.NewRelicConfig$lambda_validateForInsightsApi_6__11: java.util.function.Function bootstrap$()> ==> <io.micrometer.newrelic.NewRelicConfig$lambda_validateForInsightsApi_6__11: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.micrometer.newrelic.NewRelicConfig$lambda_validateForInsightsApi_6__11: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<io.micrometer.newrelic.NewRelicConfig$lambda_validate_4__12: void <init>(io.micrometer.newrelic.NewRelicConfig)>($r0) in <io.micrometer.newrelic.NewRelicConfig$lambda_validate_4__12: java.util.function.Function bootstrap$(io.micrometer.newrelic.NewRelicConfig)> ==> <io.micrometer.newrelic.NewRelicConfig$lambda_validate_4__12: void <init>(io.micrometer.newrelic.NewRelicConfig)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.micrometer.newrelic.NewRelicConfig$lambda_validate_4__12: void <init>(io.micrometer.newrelic.NewRelicConfig)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<io.micrometer.newrelic.NewRelicInsightsAgentClientProvider$writeGauge__13: void <init>(io.micrometer.newrelic.NewRelicInsightsAgentClientProvider)>($r0) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider$writeGauge__13: java.util.function.Function bootstrap$(io.micrometer.newrelic.NewRelicInsightsAgentClientProvider)> ==> <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider$writeGauge__13: void <init>(io.micrometer.newrelic.NewRelicInsightsAgentClientProvider)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider$writeGauge__13: void <init>(io.micrometer.newrelic.NewRelicInsightsAgentClientProvider)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeGauge(io.micrometer.core.instrument.Gauge)>($r2) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider$writeGauge__13: java.lang.Object apply(java.lang.Object)> ==> <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeGauge(io.micrometer.core.instrument.Gauge)>
SPECIAL edge: specialinvoke $r0.<io.micrometer.newrelic.NewRelicConfig$apiKey__14: void <init>()>() in <io.micrometer.newrelic.NewRelicConfig$apiKey__14: java.util.function.Function bootstrap$()> ==> <io.micrometer.newrelic.NewRelicConfig$apiKey__14: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.micrometer.newrelic.NewRelicConfig$apiKey__14: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<io.micrometer.newrelic.NewRelicInsightsAgentClientProvider$writeCounter__15: void <init>(io.micrometer.newrelic.NewRelicInsightsAgentClientProvider)>($r0) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider$writeCounter__15: java.util.function.Function bootstrap$(io.micrometer.newrelic.NewRelicInsightsAgentClientProvider)> ==> <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider$writeCounter__15: void <init>(io.micrometer.newrelic.NewRelicInsightsAgentClientProvider)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider$writeCounter__15: void <init>(io.micrometer.newrelic.NewRelicInsightsAgentClientProvider)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeCounter(io.micrometer.core.instrument.Counter)>($r2) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider$writeCounter__15: java.lang.Object apply(java.lang.Object)> ==> <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeCounter(io.micrometer.core.instrument.Counter)>
SPECIAL edge: specialinvoke $r0.<io.micrometer.newrelic.NewRelicConfig$clientProviderType__16: void <init>()>() in <io.micrometer.newrelic.NewRelicConfig$clientProviderType__16: java.util.function.Function bootstrap$()> ==> <io.micrometer.newrelic.NewRelicConfig$clientProviderType__16: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.micrometer.newrelic.NewRelicConfig$clientProviderType__16: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<io.micrometer.newrelic.NewRelicConfig$lambda_validateForInsightsApi_7__17: void <init>()>() in <io.micrometer.newrelic.NewRelicConfig$lambda_validateForInsightsApi_7__17: java.util.function.Function bootstrap$()> ==> <io.micrometer.newrelic.NewRelicConfig$lambda_validateForInsightsApi_7__17: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.micrometer.newrelic.NewRelicConfig$lambda_validateForInsightsApi_7__17: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<io.micrometer.newrelic.NewRelicInsightsAgentClientProvider$writeTimer__18: void <init>(io.micrometer.newrelic.NewRelicInsightsAgentClientProvider)>($r0) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider$writeTimer__18: java.util.function.Function bootstrap$(io.micrometer.newrelic.NewRelicInsightsAgentClientProvider)> ==> <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider$writeTimer__18: void <init>(io.micrometer.newrelic.NewRelicInsightsAgentClientProvider)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider$writeTimer__18: void <init>(io.micrometer.newrelic.NewRelicInsightsAgentClientProvider)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeTimer(io.micrometer.core.instrument.Timer)>($r2) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider$writeTimer__18: java.lang.Object apply(java.lang.Object)> ==> <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeTimer(io.micrometer.core.instrument.Timer)>
SPECIAL edge: specialinvoke $r0.<io.micrometer.newrelic.NewRelicConfig$accountId__19: void <init>()>() in <io.micrometer.newrelic.NewRelicConfig$accountId__19: java.util.function.Function bootstrap$()> ==> <io.micrometer.newrelic.NewRelicConfig$accountId__19: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.micrometer.newrelic.NewRelicConfig$accountId__19: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<io.micrometer.newrelic.NewRelicInsightsAgentClientProvider$writeSummary__20: void <init>(io.micrometer.newrelic.NewRelicInsightsAgentClientProvider)>($r0) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider$writeSummary__20: java.util.function.Function bootstrap$(io.micrometer.newrelic.NewRelicInsightsAgentClientProvider)> ==> <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider$writeSummary__20: void <init>(io.micrometer.newrelic.NewRelicInsightsAgentClientProvider)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider$writeSummary__20: void <init>(io.micrometer.newrelic.NewRelicInsightsAgentClientProvider)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeSummary(io.micrometer.core.instrument.DistributionSummary)>($r2) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider$writeSummary__20: java.lang.Object apply(java.lang.Object)> ==> <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeSummary(io.micrometer.core.instrument.DistributionSummary)>
SPECIAL edge: specialinvoke $r1.<io.micrometer.newrelic.NewRelicInsightsAgentClientProvider$writeLongTaskTimer__21: void <init>(io.micrometer.newrelic.NewRelicInsightsAgentClientProvider)>($r0) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider$writeLongTaskTimer__21: java.util.function.Function bootstrap$(io.micrometer.newrelic.NewRelicInsightsAgentClientProvider)> ==> <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider$writeLongTaskTimer__21: void <init>(io.micrometer.newrelic.NewRelicInsightsAgentClientProvider)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider$writeLongTaskTimer__21: void <init>(io.micrometer.newrelic.NewRelicInsightsAgentClientProvider)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeLongTaskTimer(io.micrometer.core.instrument.LongTaskTimer)>($r2) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider$writeLongTaskTimer__21: java.lang.Object apply(java.lang.Object)> ==> <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeLongTaskTimer(io.micrometer.core.instrument.LongTaskTimer)>
SPECIAL edge: specialinvoke $r0.<io.micrometer.newrelic.NewRelicConfig$lambda_validateForInsightsApi_8__22: void <init>()>() in <io.micrometer.newrelic.NewRelicConfig$lambda_validateForInsightsApi_8__22: java.util.function.Function bootstrap$()> ==> <io.micrometer.newrelic.NewRelicConfig$lambda_validateForInsightsApi_8__22: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.micrometer.newrelic.NewRelicConfig$lambda_validateForInsightsApi_8__22: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider$lambda_publish_0__23: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider)>($r0) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$lambda_publish_0__23: java.util.function.Function bootstrap$(io.micrometer.newrelic.NewRelicInsightsApiClientProvider)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$lambda_publish_0__23: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$lambda_publish_0__23: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream lambda$publish$0(io.micrometer.core.instrument.Meter)>($r2) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$lambda_publish_0__23: java.lang.Object apply(java.lang.Object)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream lambda$publish$0(io.micrometer.core.instrument.Meter)>
SPECIAL edge: specialinvoke $r1.<io.micrometer.newrelic.NewRelicInsightsAgentClientProvider$writeTimeGauge__24: void <init>(io.micrometer.newrelic.NewRelicInsightsAgentClientProvider)>($r0) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider$writeTimeGauge__24: java.util.function.Function bootstrap$(io.micrometer.newrelic.NewRelicInsightsAgentClientProvider)> ==> <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider$writeTimeGauge__24: void <init>(io.micrometer.newrelic.NewRelicInsightsAgentClientProvider)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider$writeTimeGauge__24: void <init>(io.micrometer.newrelic.NewRelicInsightsAgentClientProvider)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeTimeGauge(io.micrometer.core.instrument.TimeGauge)>($r2) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider$writeTimeGauge__24: java.lang.Object apply(java.lang.Object)> ==> <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeTimeGauge(io.micrometer.core.instrument.TimeGauge)>
SPECIAL edge: specialinvoke $r1.<io.micrometer.newrelic.NewRelicInsightsAgentClientProvider$writeFunctionCounter__25: void <init>(io.micrometer.newrelic.NewRelicInsightsAgentClientProvider)>($r0) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider$writeFunctionCounter__25: java.util.function.Function bootstrap$(io.micrometer.newrelic.NewRelicInsightsAgentClientProvider)> ==> <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider$writeFunctionCounter__25: void <init>(io.micrometer.newrelic.NewRelicInsightsAgentClientProvider)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider$writeFunctionCounter__25: void <init>(io.micrometer.newrelic.NewRelicInsightsAgentClientProvider)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeFunctionCounter(io.micrometer.core.instrument.FunctionCounter)>($r2) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider$writeFunctionCounter__25: java.lang.Object apply(java.lang.Object)> ==> <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeFunctionCounter(io.micrometer.core.instrument.FunctionCounter)>
SPECIAL edge: specialinvoke $r1.<io.micrometer.newrelic.NewRelicInsightsAgentClientProvider$writeFunctionTimer__26: void <init>(io.micrometer.newrelic.NewRelicInsightsAgentClientProvider)>($r0) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider$writeFunctionTimer__26: java.util.function.Function bootstrap$(io.micrometer.newrelic.NewRelicInsightsAgentClientProvider)> ==> <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider$writeFunctionTimer__26: void <init>(io.micrometer.newrelic.NewRelicInsightsAgentClientProvider)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider$writeFunctionTimer__26: void <init>(io.micrometer.newrelic.NewRelicInsightsAgentClientProvider)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeFunctionTimer(io.micrometer.core.instrument.FunctionTimer)>($r2) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider$writeFunctionTimer__26: java.lang.Object apply(java.lang.Object)> ==> <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeFunctionTimer(io.micrometer.core.instrument.FunctionTimer)>
SPECIAL edge: specialinvoke $r1.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider$lambda_event_1__27: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider)>($r0) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$lambda_event_1__27: java.util.function.Function bootstrap$(io.micrometer.newrelic.NewRelicInsightsApiClientProvider)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$lambda_event_1__27: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$lambda_event_1__27: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String lambda$event$1(io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute)>($r2) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$lambda_event_1__27: java.lang.Object apply(java.lang.Object)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String lambda$event$1(io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute)>
SPECIAL edge: specialinvoke $r1.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider$lambda_sendEvents_2__28: void <init>(java.util.concurrent.atomic.AtomicInteger)>($r0) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$lambda_sendEvents_2__28: java.util.function.Consumer bootstrap$(java.util.concurrent.atomic.AtomicInteger)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$lambda_sendEvents_2__28: void <init>(java.util.concurrent.atomic.AtomicInteger)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$lambda_sendEvents_2__28: void <init>(java.util.concurrent.atomic.AtomicInteger)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider$lambda_sendEvents_3__29: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider,java.util.concurrent.atomic.AtomicInteger)>($r0, $r1) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$lambda_sendEvents_3__29: java.util.function.Consumer bootstrap$(io.micrometer.newrelic.NewRelicInsightsApiClientProvider,java.util.concurrent.atomic.AtomicInteger)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$lambda_sendEvents_3__29: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider,java.util.concurrent.atomic.AtomicInteger)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$lambda_sendEvents_3__29: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider,java.util.concurrent.atomic.AtomicInteger)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r3.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider: void lambda$sendEvents$3(java.util.concurrent.atomic.AtomicInteger,io.micrometer.core.ipc.http.HttpSender$Response)>($r4, $r2) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$lambda_sendEvents_3__29: void accept(java.lang.Object)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: void lambda$sendEvents$3(java.util.concurrent.atomic.AtomicInteger,io.micrometer.core.ipc.http.HttpSender$Response)>
SPECIAL edge: specialinvoke $r1.<io.micrometer.newrelic.NewRelicInsightsAgentClientProvider$writeMeter__30: void <init>(io.micrometer.newrelic.NewRelicInsightsAgentClientProvider)>($r0) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider$writeMeter__30: java.util.function.Function bootstrap$(io.micrometer.newrelic.NewRelicInsightsAgentClientProvider)> ==> <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider$writeMeter__30: void <init>(io.micrometer.newrelic.NewRelicInsightsAgentClientProvider)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider$writeMeter__30: void <init>(io.micrometer.newrelic.NewRelicInsightsAgentClientProvider)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeMeter(io.micrometer.core.instrument.Meter)>($r2) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider$writeMeter__30: java.lang.Object apply(java.lang.Object)> ==> <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeMeter(io.micrometer.core.instrument.Meter)>
SPECIAL edge: specialinvoke $r1.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider$writeGauge__31: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider)>($r0) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$writeGauge__31: java.util.function.Function bootstrap$(io.micrometer.newrelic.NewRelicInsightsApiClientProvider)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$writeGauge__31: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$writeGauge__31: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeGauge(io.micrometer.core.instrument.Gauge)>($r2) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$writeGauge__31: java.lang.Object apply(java.lang.Object)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeGauge(io.micrometer.core.instrument.Gauge)>
SPECIAL edge: specialinvoke $r1.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider$writeCounter__32: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider)>($r0) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$writeCounter__32: java.util.function.Function bootstrap$(io.micrometer.newrelic.NewRelicInsightsApiClientProvider)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$writeCounter__32: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$writeCounter__32: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeCounter(io.micrometer.core.instrument.Counter)>($r2) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$writeCounter__32: java.lang.Object apply(java.lang.Object)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeCounter(io.micrometer.core.instrument.Counter)>
SPECIAL edge: specialinvoke $r1.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider$lambda_sendEvents_4__34: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider)>($r0) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$lambda_sendEvents_4__34: java.util.function.Consumer bootstrap$(io.micrometer.newrelic.NewRelicInsightsApiClientProvider)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$lambda_sendEvents_4__34: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$lambda_sendEvents_4__34: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r3.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider: void lambda$sendEvents$4(io.micrometer.core.ipc.http.HttpSender$Response)>($r2) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$lambda_sendEvents_4__34: void accept(java.lang.Object)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: void lambda$sendEvents$4(io.micrometer.core.ipc.http.HttpSender$Response)>
SPECIAL edge: specialinvoke $r1.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider$writeTimer__33: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider)>($r0) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$writeTimer__33: java.util.function.Function bootstrap$(io.micrometer.newrelic.NewRelicInsightsApiClientProvider)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$writeTimer__33: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$writeTimer__33: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeTimer(io.micrometer.core.instrument.Timer)>($r2) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$writeTimer__33: java.lang.Object apply(java.lang.Object)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeTimer(io.micrometer.core.instrument.Timer)>
SPECIAL edge: specialinvoke $r1.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider$writeSummary__35: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider)>($r0) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$writeSummary__35: java.util.function.Function bootstrap$(io.micrometer.newrelic.NewRelicInsightsApiClientProvider)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$writeSummary__35: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$writeSummary__35: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeSummary(io.micrometer.core.instrument.DistributionSummary)>($r2) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$writeSummary__35: java.lang.Object apply(java.lang.Object)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeSummary(io.micrometer.core.instrument.DistributionSummary)>
SPECIAL edge: specialinvoke $r1.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider$writeLongTaskTimer__36: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider)>($r0) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$writeLongTaskTimer__36: java.util.function.Function bootstrap$(io.micrometer.newrelic.NewRelicInsightsApiClientProvider)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$writeLongTaskTimer__36: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$writeLongTaskTimer__36: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeLongTaskTimer(io.micrometer.core.instrument.LongTaskTimer)>($r2) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$writeLongTaskTimer__36: java.lang.Object apply(java.lang.Object)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeLongTaskTimer(io.micrometer.core.instrument.LongTaskTimer)>
SPECIAL edge: specialinvoke $r1.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider$writeTimeGauge__37: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider)>($r0) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$writeTimeGauge__37: java.util.function.Function bootstrap$(io.micrometer.newrelic.NewRelicInsightsApiClientProvider)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$writeTimeGauge__37: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$writeTimeGauge__37: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeTimeGauge(io.micrometer.core.instrument.TimeGauge)>($r2) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$writeTimeGauge__37: java.lang.Object apply(java.lang.Object)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeTimeGauge(io.micrometer.core.instrument.TimeGauge)>
SPECIAL edge: specialinvoke $r1.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider$writeFunctionCounter__38: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider)>($r0) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$writeFunctionCounter__38: java.util.function.Function bootstrap$(io.micrometer.newrelic.NewRelicInsightsApiClientProvider)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$writeFunctionCounter__38: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$writeFunctionCounter__38: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeFunctionCounter(io.micrometer.core.instrument.FunctionCounter)>($r2) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$writeFunctionCounter__38: java.lang.Object apply(java.lang.Object)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeFunctionCounter(io.micrometer.core.instrument.FunctionCounter)>
SPECIAL edge: specialinvoke $r1.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider$writeFunctionTimer__39: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider)>($r0) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$writeFunctionTimer__39: java.util.function.Function bootstrap$(io.micrometer.newrelic.NewRelicInsightsApiClientProvider)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$writeFunctionTimer__39: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$writeFunctionTimer__39: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeFunctionTimer(io.micrometer.core.instrument.FunctionTimer)>($r2) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$writeFunctionTimer__39: java.lang.Object apply(java.lang.Object)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeFunctionTimer(io.micrometer.core.instrument.FunctionTimer)>
SPECIAL edge: specialinvoke $r1.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider$writeMeter__40: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider)>($r0) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$writeMeter__40: java.util.function.Function bootstrap$(io.micrometer.newrelic.NewRelicInsightsApiClientProvider)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$writeMeter__40: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$writeMeter__40: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeMeter(io.micrometer.core.instrument.Meter)>($r2) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$writeMeter__40: java.lang.Object apply(java.lang.Object)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.util.stream.Stream writeMeter(io.micrometer.core.instrument.Meter)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: void finalize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<io.micrometer.newrelic.ClientProviderType: void <init>(java.lang.String,int)>("INSIGHTS_API", 0) in <io.micrometer.newrelic.ClientProviderType: void <clinit>()> ==> <io.micrometer.newrelic.ClientProviderType: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r1.<io.micrometer.newrelic.ClientProviderType: void <init>(java.lang.String,int)>("INSIGHTS_AGENT", 1) in <io.micrometer.newrelic.ClientProviderType: void <clinit>()> ==> <io.micrometer.newrelic.ClientProviderType: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r1.<io.micrometer.core.instrument.util.NamedThreadFactory: void <init>(java.lang.String)>("new-relic-metrics-publisher") in <io.micrometer.newrelic.NewRelicMeterRegistry: void <clinit>()> ==> <io.micrometer.core.instrument.util.NamedThreadFactory: void <init>(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0) in <io.micrometer.newrelic.NewRelicNamingConvention: java.lang.String toValidNewRelicString(java.lang.String)> ==> <java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>("_") in <io.micrometer.newrelic.NewRelicNamingConvention: java.lang.String toValidNewRelicString(java.lang.String)> ==> <java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: java.lang.Object clone()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: java.lang.Object clone()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<io.micrometer.core.instrument.step.StepMeterRegistry: void <init>(io.micrometer.core.instrument.step.StepRegistryConfig,io.micrometer.core.instrument.Clock)>(r1, r2) in <io.micrometer.newrelic.NewRelicMeterRegistry: void <init>(io.micrometer.newrelic.NewRelicConfig,io.micrometer.newrelic.NewRelicClientProvider,io.micrometer.core.instrument.config.NamingConvention,io.micrometer.core.instrument.Clock,java.util.concurrent.ThreadFactory)> ==> <io.micrometer.core.instrument.step.StepMeterRegistry: void <init>(io.micrometer.core.instrument.step.StepRegistryConfig,io.micrometer.core.instrument.Clock)>
VIRTUAL edge: $r11 = virtualinvoke r0.<io.micrometer.newrelic.NewRelicMeterRegistry: io.micrometer.core.instrument.MeterRegistry$Config config()>() in <io.micrometer.newrelic.NewRelicMeterRegistry: void <init>(io.micrometer.newrelic.NewRelicConfig,io.micrometer.newrelic.NewRelicClientProvider,io.micrometer.core.instrument.config.NamingConvention,io.micrometer.core.instrument.Clock,java.util.concurrent.ThreadFactory)> ==> <io.micrometer.newrelic.NewRelicMeterRegistry: io.micrometer.core.instrument.MeterRegistry$Config config()>
SPECIAL edge: specialinvoke $r12.<io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void <init>(io.micrometer.newrelic.NewRelicConfig)>(r1) in <io.micrometer.newrelic.NewRelicMeterRegistry: void <init>(io.micrometer.newrelic.NewRelicConfig,io.micrometer.newrelic.NewRelicClientProvider,io.micrometer.core.instrument.config.NamingConvention,io.micrometer.core.instrument.Clock,java.util.concurrent.ThreadFactory)> ==> <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void <init>(io.micrometer.newrelic.NewRelicConfig)>
SPECIAL edge: specialinvoke $r13.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider: void <init>(io.micrometer.newrelic.NewRelicConfig)>(r1) in <io.micrometer.newrelic.NewRelicMeterRegistry: void <init>(io.micrometer.newrelic.NewRelicConfig,io.micrometer.newrelic.NewRelicClientProvider,io.micrometer.core.instrument.config.NamingConvention,io.micrometer.core.instrument.Clock,java.util.concurrent.ThreadFactory)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: void <init>(io.micrometer.newrelic.NewRelicConfig)>
SPECIAL edge: specialinvoke $r14.<io.micrometer.newrelic.NewRelicMeterRegistry$1: void <init>(io.micrometer.newrelic.NewRelicMeterRegistry)>(r0) in <io.micrometer.newrelic.NewRelicMeterRegistry: void <init>(io.micrometer.newrelic.NewRelicConfig,io.micrometer.newrelic.NewRelicClientProvider,io.micrometer.core.instrument.config.NamingConvention,io.micrometer.core.instrument.Clock,java.util.concurrent.ThreadFactory)> ==> <io.micrometer.newrelic.NewRelicMeterRegistry$1: void <init>(io.micrometer.newrelic.NewRelicMeterRegistry)>
VIRTUAL edge: virtualinvoke $r11.<io.micrometer.core.instrument.MeterRegistry$Config: io.micrometer.core.instrument.MeterRegistry$Config namingConvention(io.micrometer.core.instrument.config.NamingConvention)>(r3) in <io.micrometer.newrelic.NewRelicMeterRegistry: void <init>(io.micrometer.newrelic.NewRelicConfig,io.micrometer.newrelic.NewRelicClientProvider,io.micrometer.core.instrument.config.NamingConvention,io.micrometer.core.instrument.Clock,java.util.concurrent.ThreadFactory)> ==> <io.micrometer.core.instrument.MeterRegistry$Config: io.micrometer.core.instrument.MeterRegistry$Config namingConvention(io.micrometer.core.instrument.config.NamingConvention)>
VIRTUAL edge: virtualinvoke $r11.<io.micrometer.core.instrument.MeterRegistry$Config: io.micrometer.core.instrument.MeterRegistry$Config namingConvention(io.micrometer.core.instrument.config.NamingConvention)>(r3) in <io.micrometer.newrelic.NewRelicMeterRegistry: void <init>(io.micrometer.newrelic.NewRelicConfig,io.micrometer.newrelic.NewRelicClientProvider,io.micrometer.core.instrument.config.NamingConvention,io.micrometer.core.instrument.Clock,java.util.concurrent.ThreadFactory)> ==> <io.micrometer.newrelic.NewRelicMeterRegistry$1: io.micrometer.core.instrument.MeterRegistry$Config namingConvention(io.micrometer.core.instrument.config.NamingConvention)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.micrometer.newrelic.NewRelicMeterRegistry$Builder: void <init>(io.micrometer.newrelic.NewRelicConfig)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<io.micrometer.newrelic.NewRelicNamingConvention: void <init>()>() in <io.micrometer.newrelic.NewRelicMeterRegistry$Builder: void <init>(io.micrometer.newrelic.NewRelicConfig)> ==> <io.micrometer.newrelic.NewRelicNamingConvention: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: void <init>(io.micrometer.newrelic.NewRelicConfig,io.micrometer.core.ipc.http.HttpSender,io.micrometer.core.instrument.config.NamingConvention)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r6.<java.lang.StringBuilder: void <init>()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: void <init>(io.micrometer.newrelic.NewRelicConfig,io.micrometer.core.ipc.http.HttpSender,io.micrometer.core.instrument.config.NamingConvention)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: void <init>(io.micrometer.newrelic.NewRelicConfig,io.micrometer.core.ipc.http.HttpSender,io.micrometer.core.instrument.config.NamingConvention)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/v1/accounts/") in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: void <init>(io.micrometer.newrelic.NewRelicConfig,io.micrometer.core.ipc.http.HttpSender,io.micrometer.core.instrument.config.NamingConvention)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: void <init>(io.micrometer.newrelic.NewRelicConfig,io.micrometer.core.ipc.http.HttpSender,io.micrometer.core.instrument.config.NamingConvention)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/events") in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: void <init>(io.micrometer.newrelic.NewRelicConfig,io.micrometer.core.ipc.http.HttpSender,io.micrometer.core.instrument.config.NamingConvention)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: void <init>(io.micrometer.newrelic.NewRelicConfig,io.micrometer.core.ipc.http.HttpSender,io.micrometer.core.instrument.config.NamingConvention)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: void <init>()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: void sendEvents(java.util.stream.Stream)> ==> <java.util.concurrent.atomic.AtomicInteger: void <init>()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<io.micrometer.core.ipc.http.HttpSender: io.micrometer.core.ipc.http.HttpSender$Request$Builder post(java.lang.String)>($r2) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: void sendEvents(java.util.stream.Stream)> ==> <io.micrometer.core.ipc.http.HttpSender: io.micrometer.core.ipc.http.HttpSender$Request$Builder post(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r4.<io.micrometer.core.ipc.http.HttpSender$Request$Builder: io.micrometer.core.ipc.http.HttpSender$Request$Builder withHeader(java.lang.String,java.lang.String)>("X-Insert-Key", $r6) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: void sendEvents(java.util.stream.Stream)> ==> <io.micrometer.core.ipc.http.HttpSender$Request$Builder: io.micrometer.core.ipc.http.HttpSender$Request$Builder withHeader(java.lang.String,java.lang.String)>
INTERFACE edge: $r10 = interfaceinvoke r8.<java.util.stream.Stream: java.util.stream.Stream peek(java.util.function.Consumer)>($r9) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: void sendEvents(java.util.stream.Stream)> ==> <java.util.stream.Stream: java.util.stream.Stream peek(java.util.function.Consumer)>
INTERFACE edge: $r12 = interfaceinvoke $r10.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r11) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: void sendEvents(java.util.stream.Stream)> ==> <java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>
VIRTUAL edge: $r14 = virtualinvoke $r7.<io.micrometer.core.ipc.http.HttpSender$Request$Builder: io.micrometer.core.ipc.http.HttpSender$Request$Builder withJsonContent(java.lang.String)>($r13) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: void sendEvents(java.util.stream.Stream)> ==> <io.micrometer.core.ipc.http.HttpSender$Request$Builder: io.micrometer.core.ipc.http.HttpSender$Request$Builder withJsonContent(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<io.micrometer.core.ipc.http.HttpSender$Request$Builder: io.micrometer.core.ipc.http.HttpSender$Response send()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: void sendEvents(java.util.stream.Stream)> ==> <io.micrometer.core.ipc.http.HttpSender$Request$Builder: io.micrometer.core.ipc.http.HttpSender$Response send()>
VIRTUAL edge: $r17 = virtualinvoke $r15.<io.micrometer.core.ipc.http.HttpSender$Response: io.micrometer.core.ipc.http.HttpSender$Response onSuccess(java.util.function.Consumer)>($r16) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: void sendEvents(java.util.stream.Stream)> ==> <io.micrometer.core.ipc.http.HttpSender$Response: io.micrometer.core.ipc.http.HttpSender$Response onSuccess(java.util.function.Consumer)>
VIRTUAL edge: virtualinvoke $r17.<io.micrometer.core.ipc.http.HttpSender$Response: io.micrometer.core.ipc.http.HttpSender$Response onError(java.util.function.Consumer)>($r18) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: void sendEvents(java.util.stream.Stream)> ==> <io.micrometer.core.ipc.http.HttpSender$Response: io.micrometer.core.ipc.http.HttpSender$Response onError(java.util.function.Consumer)>
SPECIAL edge: specialinvoke r0.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider,java.lang.String,java.lang.Object)>(r1, r2, r3) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider,java.lang.String,java.lang.Object,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$1)> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider,java.lang.String,java.lang.Object)>
SPECIAL edge: specialinvoke $r16.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider,java.lang.String,java.lang.Object,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$1)>(r0, "metricName", r9, null) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String event(io.micrometer.core.instrument.Meter$Id,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute[])> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider,java.lang.String,java.lang.Object,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$1)>
SPECIAL edge: specialinvoke $r17.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider,java.lang.String,java.lang.Object,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$1)>(r0, "metricType", $r13, null) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String event(io.micrometer.core.instrument.Meter$Id,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute[])> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider,java.lang.String,java.lang.Object,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$1)>
SPECIAL edge: $r15 = specialinvoke r0.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String event(io.micrometer.core.instrument.Meter$Id,java.lang.Iterable,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute[])>(r2, $r18, r7) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String event(io.micrometer.core.instrument.Meter$Id,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute[])> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String event(io.micrometer.core.instrument.Meter$Id,java.lang.Iterable,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute[])>
SPECIAL edge: $r5 = specialinvoke r0.<io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String event(io.micrometer.core.instrument.Meter$Id,java.lang.Iterable,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute[])>(r2, $r19, r4) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String event(io.micrometer.core.instrument.Meter$Id,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute[])> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String event(io.micrometer.core.instrument.Meter$Id,java.lang.Iterable,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute[])>
STATIC edge: $r43 = staticinvoke <io.micrometer.core.instrument.util.StringEscapeUtils: java.lang.String escapeJson(java.lang.String)>($r42) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String event(io.micrometer.core.instrument.Meter$Id,java.lang.Iterable,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute[])> ==> <io.micrometer.core.instrument.util.StringEscapeUtils: java.lang.String escapeJson(java.lang.String)>
STATIC edge: $r23 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector joining(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>("", $r18, $r22) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String event(io.micrometer.core.instrument.Meter$Id,java.lang.Iterable,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute[])> ==> <java.util.stream.Collectors: java.util.stream.Collector joining(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>
STATIC edge: $r15 = staticinvoke <io.micrometer.core.instrument.util.StringEscapeUtils: java.lang.String escapeJson(java.lang.String)>(r54) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String event(io.micrometer.core.instrument.Meter$Id,java.lang.Iterable,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute[])> ==> <io.micrometer.core.instrument.util.StringEscapeUtils: java.lang.String escapeJson(java.lang.String)>
STATIC edge: $r11 = staticinvoke <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$lambda_event_1__27: java.util.function.Function bootstrap$(io.micrometer.newrelic.NewRelicInsightsApiClientProvider)>(r3) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String event(io.micrometer.core.instrument.Meter$Id,java.lang.Iterable,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute[])> ==> <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$lambda_event_1__27: java.util.function.Function bootstrap$(io.micrometer.newrelic.NewRelicInsightsApiClientProvider)>
STATIC edge: $r10 = staticinvoke <java.util.Arrays: java.util.stream.Stream stream(java.lang.Object[])>(r9) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String event(io.micrometer.core.instrument.Meter$Id,java.lang.Iterable,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute[])> ==> <java.util.Arrays: java.util.stream.Stream stream(java.lang.Object[])>
STATIC edge: $r37 = staticinvoke <io.micrometer.core.instrument.util.StringEscapeUtils: java.lang.String escapeJson(java.lang.String)>($r36) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String event(io.micrometer.core.instrument.Meter$Id,java.lang.Iterable,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute[])> ==> <io.micrometer.core.instrument.util.StringEscapeUtils: java.lang.String escapeJson(java.lang.String)>
STATIC edge: $r31 = staticinvoke <io.micrometer.core.instrument.util.StringEscapeUtils: java.lang.String escapeJson(java.lang.String)>($r30) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String event(io.micrometer.core.instrument.Meter$Id,java.lang.Iterable,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute[])> ==> <io.micrometer.core.instrument.util.StringEscapeUtils: java.lang.String escapeJson(java.lang.String)>
STATIC edge: $r47 = staticinvoke <io.micrometer.core.instrument.util.StringEscapeUtils: java.lang.String escapeJson(java.lang.String)>($r46) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String event(io.micrometer.core.instrument.Meter$Id,java.lang.Iterable,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute[])> ==> <io.micrometer.core.instrument.util.StringEscapeUtils: java.lang.String escapeJson(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void <init>(io.micrometer.newrelic.NewRelicConfig,com.newrelic.api.agent.Agent,io.micrometer.core.instrument.config.NamingConvention)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.Map: boolean isEmpty()>() in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void sendEvents(io.micrometer.core.instrument.Meter$Id,java.util.Map)> ==> <java.util.HashMap: boolean isEmpty()>
INTERFACE edge: $r7 = interfaceinvoke $r6.<com.newrelic.api.agent.Agent: com.newrelic.api.agent.Insights getInsights()>() in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void sendEvents(io.micrometer.core.instrument.Meter$Id,java.util.Map)> ==> <com.newrelic.api.agent.Agent: com.newrelic.api.agent.Insights getInsights()>
INTERFACE edge: interfaceinvoke $r7.<com.newrelic.api.agent.Insights: void recordCustomEvent(java.lang.String,java.util.Map)>(r5, r0) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void sendEvents(io.micrometer.core.instrument.Meter$Id,java.util.Map)> ==> <com.newrelic.api.agent.Insights: void recordCustomEvent(java.lang.String,java.util.Map)>
VIRTUAL edge: $d0 = virtualinvoke r0.<java.lang.Number: double doubleValue()>() in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.Number,java.util.Map)> ==> <java.lang.Float: double doubleValue()>
VIRTUAL edge: $d0 = virtualinvoke r0.<java.lang.Number: double doubleValue()>() in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.Number,java.util.Map)> ==> <java.lang.Long: double doubleValue()>
VIRTUAL edge: $d0 = virtualinvoke r0.<java.lang.Number: double doubleValue()>() in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.Number,java.util.Map)> ==> <java.lang.Double: double doubleValue()>
VIRTUAL edge: $d0 = virtualinvoke r0.<java.lang.Number: double doubleValue()>() in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.Number,java.util.Map)> ==> <java.util.concurrent.atomic.AtomicInteger: double doubleValue()>
VIRTUAL edge: $d0 = virtualinvoke r0.<java.lang.Number: double doubleValue()>() in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.Number,java.util.Map)> ==> <java.lang.Short: double doubleValue()>
VIRTUAL edge: $d0 = virtualinvoke r0.<java.lang.Number: double doubleValue()>() in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.Number,java.util.Map)> ==> <java.lang.Byte: double doubleValue()>
VIRTUAL edge: $d0 = virtualinvoke r0.<java.lang.Number: double doubleValue()>() in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.Number,java.util.Map)> ==> <java.lang.Integer: double doubleValue()>
VIRTUAL edge: $d2 = virtualinvoke r0.<java.lang.Number: double doubleValue()>() in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.Number,java.util.Map)> ==> <java.lang.Float: double doubleValue()>
VIRTUAL edge: $d2 = virtualinvoke r0.<java.lang.Number: double doubleValue()>() in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.Number,java.util.Map)> ==> <java.lang.Long: double doubleValue()>
VIRTUAL edge: $d2 = virtualinvoke r0.<java.lang.Number: double doubleValue()>() in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.Number,java.util.Map)> ==> <java.lang.Double: double doubleValue()>
VIRTUAL edge: $d2 = virtualinvoke r0.<java.lang.Number: double doubleValue()>() in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.Number,java.util.Map)> ==> <java.util.concurrent.atomic.AtomicInteger: double doubleValue()>
VIRTUAL edge: $d2 = virtualinvoke r0.<java.lang.Number: double doubleValue()>() in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.Number,java.util.Map)> ==> <java.lang.Short: double doubleValue()>
VIRTUAL edge: $d2 = virtualinvoke r0.<java.lang.Number: double doubleValue()>() in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.Number,java.util.Map)> ==> <java.lang.Byte: double doubleValue()>
VIRTUAL edge: $d2 = virtualinvoke r0.<java.lang.Number: double doubleValue()>() in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.Number,java.util.Map)> ==> <java.lang.Integer: double doubleValue()>
VIRTUAL edge: $i1 = virtualinvoke r0.<java.lang.Number: int intValue()>() in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.Number,java.util.Map)> ==> <java.lang.Float: int intValue()>
VIRTUAL edge: $i1 = virtualinvoke r0.<java.lang.Number: int intValue()>() in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.Number,java.util.Map)> ==> <java.lang.Long: int intValue()>
VIRTUAL edge: $i1 = virtualinvoke r0.<java.lang.Number: int intValue()>() in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.Number,java.util.Map)> ==> <java.lang.Double: int intValue()>
VIRTUAL edge: $i1 = virtualinvoke r0.<java.lang.Number: int intValue()>() in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.Number,java.util.Map)> ==> <java.util.concurrent.atomic.AtomicInteger: int intValue()>
VIRTUAL edge: $i1 = virtualinvoke r0.<java.lang.Number: int intValue()>() in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.Number,java.util.Map)> ==> <java.lang.Short: int intValue()>
VIRTUAL edge: $i1 = virtualinvoke r0.<java.lang.Number: int intValue()>() in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.Number,java.util.Map)> ==> <java.lang.Byte: int intValue()>
VIRTUAL edge: $i1 = virtualinvoke r0.<java.lang.Number: int intValue()>() in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.Number,java.util.Map)> ==> <java.lang.Integer: int intValue()>
VIRTUAL edge: $d3 = virtualinvoke r0.<java.lang.Number: double doubleValue()>() in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.Number,java.util.Map)> ==> <java.lang.Float: double doubleValue()>
VIRTUAL edge: $d3 = virtualinvoke r0.<java.lang.Number: double doubleValue()>() in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.Number,java.util.Map)> ==> <java.lang.Long: double doubleValue()>
VIRTUAL edge: $d3 = virtualinvoke r0.<java.lang.Number: double doubleValue()>() in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.Number,java.util.Map)> ==> <java.lang.Double: double doubleValue()>
VIRTUAL edge: $d3 = virtualinvoke r0.<java.lang.Number: double doubleValue()>() in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.Number,java.util.Map)> ==> <java.util.concurrent.atomic.AtomicInteger: double doubleValue()>
VIRTUAL edge: $d3 = virtualinvoke r0.<java.lang.Number: double doubleValue()>() in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.Number,java.util.Map)> ==> <java.lang.Short: double doubleValue()>
VIRTUAL edge: $d3 = virtualinvoke r0.<java.lang.Number: double doubleValue()>() in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.Number,java.util.Map)> ==> <java.lang.Byte: double doubleValue()>
VIRTUAL edge: $d3 = virtualinvoke r0.<java.lang.Number: double doubleValue()>() in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.Number,java.util.Map)> ==> <java.lang.Integer: double doubleValue()>
INTERFACE edge: $r9 = interfaceinvoke $r8.<io.micrometer.core.instrument.config.NamingConvention: java.lang.String tagKey(java.lang.String)>(r3) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.Number,java.util.Map)> ==> <io.micrometer.newrelic.NewRelicNamingConvention: java.lang.String tagKey(java.lang.String)>
INTERFACE edge: interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r10) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.Number,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r6) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.Number,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: $r5 = interfaceinvoke $r4.<io.micrometer.core.instrument.config.NamingConvention: java.lang.String tagKey(java.lang.String)>(r3) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.Number,java.util.Map)> ==> <io.micrometer.newrelic.NewRelicNamingConvention: java.lang.String tagKey(java.lang.String)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<io.micrometer.core.instrument.config.NamingConvention: java.lang.String tagKey(java.lang.String)>(r2) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.String,java.util.Map)> ==> <io.micrometer.newrelic.NewRelicNamingConvention: java.lang.String tagKey(java.lang.String)>
INTERFACE edge: $r7 = interfaceinvoke $r6.<io.micrometer.core.instrument.config.NamingConvention: java.lang.String tagValue(java.lang.String)>(r5) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.String,java.util.Map)> ==> <io.micrometer.newrelic.NewRelicNamingConvention: java.lang.String tagValue(java.lang.String)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r7) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.String,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("metricName", r16) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addMeterAsAttributes(io.micrometer.core.instrument.Meter$Id,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("metricType", $r14) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addMeterAsAttributes(io.micrometer.core.instrument.Meter$Id,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r9) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addMeterAsAttributes(io.micrometer.core.instrument.Meter$Id,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: r17 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>() in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addMeterAsAttributes(io.micrometer.core.instrument.Meter$Id,java.util.Map)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke $r0.<java.util.HashMap: void <init>()>() in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeCounterValues(io.micrometer.core.instrument.Meter$Id,double)> ==> <java.util.HashMap: void <init>()>
SPECIAL edge: specialinvoke r2.<io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.Number,java.util.Map)>("throughput", $r3, $r0) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeCounterValues(io.micrometer.core.instrument.Meter$Id,double)> ==> <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addAttribute(java.lang.String,java.lang.Number,java.util.Map)>
SPECIAL edge: specialinvoke r2.<io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addMeterAsAttributes(io.micrometer.core.instrument.Meter$Id,java.util.Map)>(r4, $r0) in <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: java.util.Map writeCounterValues(io.micrometer.core.instrument.Meter$Id,double)> ==> <io.micrometer.newrelic.NewRelicInsightsAgentClientProvider: void addMeterAsAttributes(io.micrometer.core.instrument.Meter$Id,java.util.Map)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0) in <io.micrometer.newrelic.ClientProviderType: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
FINALIZE edge: null in <java.lang.Enum: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void finalize()>
SPECIAL edge: specialinvoke r0.<io.micrometer.core.instrument.MeterRegistry$Config: void <init>(io.micrometer.core.instrument.MeterRegistry)>($r2) in <io.micrometer.newrelic.NewRelicMeterRegistry$1: void <init>(io.micrometer.newrelic.NewRelicMeterRegistry)> ==> <io.micrometer.core.instrument.MeterRegistry$Config: void <init>(io.micrometer.core.instrument.MeterRegistry)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute: void <init>(io.micrometer.newrelic.NewRelicInsightsApiClientProvider,java.lang.String,java.lang.Object)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String event(io.micrometer.core.instrument.Meter$Id,java.lang.Iterable,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute[])> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r41 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",\"") in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String event(io.micrometer.core.instrument.Meter$Id,java.lang.Iterable,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r27 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",\"") in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String event(io.micrometer.core.instrument.Meter$Id,java.lang.Iterable,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
INTERFACE edge: r50 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String event(io.micrometer.core.instrument.Meter$Id,java.lang.Iterable,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute[])> ==> <java.util.ArrayList: java.util.Iterator iterator()>
VIRTUAL edge: $r44 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r43) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String event(io.micrometer.core.instrument.Meter$Id,java.lang.Iterable,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\":\"") in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String event(io.micrometer.core.instrument.Meter$Id,java.lang.Iterable,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r48 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r47) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String event(io.micrometer.core.instrument.Meter$Id,java.lang.Iterable,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"") in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String event(io.micrometer.core.instrument.Meter$Id,java.lang.Iterable,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
INTERFACE edge: r52 = interfaceinvoke r6.<java.lang.Iterable: java.util.Iterator iterator()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String event(io.micrometer.core.instrument.Meter$Id,java.lang.Iterable,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute[])> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $r30 = interfaceinvoke $r28.<io.micrometer.core.instrument.config.NamingConvention: java.lang.String tagKey(java.lang.String)>($r29) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String event(io.micrometer.core.instrument.Meter$Id,java.lang.Iterable,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute[])> ==> <io.micrometer.newrelic.NewRelicNamingConvention: java.lang.String tagKey(java.lang.String)>
VIRTUAL edge: $r32 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String event(io.micrometer.core.instrument.Meter$Id,java.lang.Iterable,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\":\"") in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String event(io.micrometer.core.instrument.Meter$Id,java.lang.Iterable,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
INTERFACE edge: $r36 = interfaceinvoke $r34.<io.micrometer.core.instrument.config.NamingConvention: java.lang.String tagValue(java.lang.String)>($r35) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String event(io.micrometer.core.instrument.Meter$Id,java.lang.Iterable,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute[])> ==> <io.micrometer.newrelic.NewRelicNamingConvention: java.lang.String tagValue(java.lang.String)>
VIRTUAL edge: $r38 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String event(io.micrometer.core.instrument.Meter$Id,java.lang.Iterable,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"") in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String event(io.micrometer.core.instrument.Meter$Id,java.lang.Iterable,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r13.<java.lang.StringBuilder: void <init>()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String event(io.micrometer.core.instrument.Meter$Id,java.lang.Iterable,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute[])> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("{\"eventType\":\"") in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String event(io.micrometer.core.instrument.Meter$Id,java.lang.Iterable,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String event(io.micrometer.core.instrument.Meter$Id,java.lang.Iterable,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"") in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String event(io.micrometer.core.instrument.Meter$Id,java.lang.Iterable,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String event(io.micrometer.core.instrument.Meter$Id,java.lang.Iterable,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute[])> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r19.<java.lang.StringBuilder: void <init>()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String event(io.micrometer.core.instrument.Meter$Id,java.lang.Iterable,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute[])> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String event(io.micrometer.core.instrument.Meter$Id,java.lang.Iterable,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}") in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String event(io.micrometer.core.instrument.Meter$Id,java.lang.Iterable,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>() in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String event(io.micrometer.core.instrument.Meter$Id,java.lang.Iterable,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute[])> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: $r24 = interfaceinvoke $r12.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r23) in <io.micrometer.newrelic.NewRelicInsightsApiClientProvider: java.lang.String event(io.micrometer.core.instrument.Meter$Id,java.lang.Iterable,io.micrometer.newrelic.NewRelicInsightsApiClientProvider$Attribute[])> ==> <java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Enum: void <init>(java.lang.String,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: void <init>(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: void finalize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
